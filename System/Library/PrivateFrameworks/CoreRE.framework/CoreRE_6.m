uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(void **)(result + 16);
      if (*v4 >> 1 < **(void **)result >> 1)
      {
        v5 = *(void *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(void **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 >> 1 < *v7 >> 1);
        *(void *)v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(long long *a1, void **a2, void **a3)
{
  unint64_t v3 = **a2 >> 1;
  unint64_t v4 = **a3 >> 1;
  if (v3 < **(void **)a1 >> 1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >> 1 >= **a2 >> 1) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >> 1 >= **(void **)a1 >> 1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

_OWORD *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::StringID const*,void *,true> *,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &>(_OWORD *a1, _OWORD *a2)
{
  long long v2 = *a1;
  unint64_t v3 = *(void **)a1;
  unint64_t v4 = **(void **)a1 >> 1;
  if (v4 >= **((void **)a2 - 2) >> 1)
  {
    long long v7 = a1 + 1;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      ++v7;
    }
    while (v4 >= **(void **)v5 >> 1);
  }
  else
  {
    long long v5 = a1;
    do
      long long v6 = (void *)*((void *)v5++ + 2);
    while (v4 >= *v6 >> 1);
  }
  if (v5 < a2)
  {
    do
      long long v8 = (void *)*((void *)a2-- - 2);
    while (v4 < *v8 >> 1);
  }
  while (v5 < a2)
  {
    long long v13 = *v5;
    *long long v5 = *a2;
    *a2 = v13;
    unint64_t v9 = *v3 >> 1;
    do
      v10 = (void *)*((void *)v5++ + 2);
    while (v9 >= *v10 >> 1);
    do
      v11 = (void *)*((void *)a2-- - 2);
    while (v9 < *v11 >> 1);
  }
  if (v5 - 1 != a1) {
    *a1 = *(v5 - 1);
  }
  *(v5 - 1) = v2;
  return v5;
}

long long *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::StringID const*,void *,true> *,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  unint64_t v4 = *(void **)a1;
  unint64_t v5 = **(void **)a1 >> 1;
  do
    unint64_t v6 = **(void **)&a1[++v2];
  while (v5 > v6 >> 1);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      v10 = (void *)*((void *)a2-- - 2);
    }
    while (v5 <= *v10 >> 1);
  }
  else
  {
    do
      unint64_t v9 = (void *)*((void *)a2-- - 2);
    while (v5 <= *v9 >> 1);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      long long v13 = *v11;
      long long *v11 = *v12;
      long long *v12 = v13;
      unint64_t v14 = *v4 >> 1;
      do
        v15 = (void *)*((void *)v11++ + 2);
      while (v14 > *v15 >> 1);
      do
        v16 = (void *)*((void *)v12-- - 2);
      while (v14 <= *v16 >> 1);
    }
    while (v11 < v12);
    long long v8 = v11 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  *long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) >> 1 < **(void **)a1 >> 1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      long long v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(void **)v9;
    if (**(void **)v9 >> 1 < **v8 >> 1)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >> 1 >= v15 >> 1)
        {
          v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (void *)a1;
LABEL_12:
      void *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(long long *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, a2, a3);
  if (*(void *)a4->n128_u64[0] >> 1 < *(void *)a3->n128_u64[0] >> 1)
  {
    __n128 result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(void *)a3->n128_u64[0] >> 1 < *(void *)a2->n128_u64[0] >> 1)
    {
      __n128 result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(void *)a2->n128_u64[0] >> 1 < **(void **)a1 >> 1)
      {
        __n128 result = (__n128)*a1;
        *a1 = (__int128)*a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(long long *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(void *)a5->n128_u64[0] >> 1 < *(void *)a4->n128_u64[0] >> 1)
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(void *)a4->n128_u64[0] >> 1 < *(void *)a3->n128_u64[0] >> 1)
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(void *)a3->n128_u64[0] >> 1 < *(void *)a2->n128_u64[0] >> 1)
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(void *)a2->n128_u64[0] >> 1 < **(void **)a1 >> 1)
        {
          __n128 result = (__n128)*a1;
          *a1 = (__int128)*a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,re::Pair<re::StringID const*,void *,true>*>(unint64_t **a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != (unint64_t **)a2)
  {
    uint64_t v8 = a2 - (char *)a1;
    uint64_t v9 = (a2 - (char *)a1) >> 4;
    if (a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (**(void **)v14 >> 1 < **a1 >> 1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        long long v21 = *(_OWORD *)a1;
        v18 = (char *)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - (char *)a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = **v8;
      }
      else
      {
        unint64_t v10 = **v8;
        if (v10 >> 1 < *v8[2] >> 1)
        {
          unint64_t v10 = *v8[2];
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *a4;
      if (v10 >> 1 >= **a4 >> 1)
      {
        v12 = a4[1];
        do
        {
          uint64_t v13 = a4;
          a4 = v8;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t **)(result + 16 * v14);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v15 = **v8;
            uint64_t v7 = v14;
          }
          else
          {
            unint64_t v15 = **v8;
            if (v15 >> 1 >= *v8[2] >> 1)
            {
              uint64_t v7 = v14;
            }
            else
            {
              unint64_t v15 = *v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >> 1 >= *v11 >> 1);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

void **std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = (void **)&a1[v3 + 1];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3 && **v6 >> 1 < *v6[2] >> 1)
    {
      v6 += 2;
      uint64_t v7 = v8;
    }
    *a1 = *(_OWORD *)v6;
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(a2 - 16);
    uint64_t v6 = *(void **)(a2 - 16);
    uint64_t v7 = (_OWORD *)(result + 16 * v4);
    if (**(void **)v7 >> 1 < *v6 >> 1)
    {
      uint64_t v8 = *(void *)(a2 - 8);
      do
      {
        uint64_t v9 = v5;
        uint64_t v5 = v7;
        *uint64_t v9 = *v7;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v7 = (_OWORD *)(result + 16 * v4);
      }
      while (**(void **)v7 >> 1 < *v6 >> 1);
      *uint64_t v5 = v6;
      v5[1] = v8;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(uint64_t *a1, char *a2, uint64_t (**a3)(unint64_t, unint64_t), uint64_t a4, char a5, __n128 a6)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *(void *)a1))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)uint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      unint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      unint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *(void *)v10))
    {
      long long v18 = *(_OWORD *)v11;
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = v12;
      while (1)
      {
        *(_OWORD *)&a1[v15 + 48] = *(_OWORD *)&a1[v15 + 32];
        if (v15 == -32) {
          break;
        }
        char v16 = (*a3)(v14, *(void *)&a1[v15 + 16]);
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          unint64_t v17 = &a1[v15 + 48];
          goto LABEL_12;
        }
      }
      unint64_t v17 = a1;
LABEL_12:
      *(_OWORD *)unint64_t v17 = v18;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    unint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

BOOL re::serializeDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_14;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  long long v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x22C6ED80D0CLL
    || (v19 = (char *)v18[1], v19 != "StringID") && strcmp(v19, "StringID"))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    uint64_t v27 = 0;
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, &v27, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    if (v27) {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
    }
    v22 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_29;
  }
  unint64_t v23 = *(void *)(a4 + 8);
  if (v23) {
    uint64_t v24 = v23 >> 1;
  }
  else {
    uint64_t v24 = v23 >> 1;
  }
  uint64_t v27 = v24;
  BOOL v25 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, &v27, 0);
  BOOL result = 0;
  if (v25)
  {
    if (v27)
    {
      if (*(unsigned char *)(a4 + 8)) {
        uint64_t v26 = *(void *)(a4 + 16);
      }
      else {
        uint64_t v26 = a4 + 9;
      }
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, v26, 0);
    }
    v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_29:
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString(v22);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::internal::serializeObjectWithOneMember<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)v29, *a5, a5[2]);
  re::TypeMemberCollection::operator[](v14, 0, (uint64_t)&v27);
  uint64_t v15 = a4 + *(unsigned int *)(v28 + 24);
  re::TypeRegistry::typeInfo(v27, *(void *)v28, v29);
  re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)v30);
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*a5 == *a6)
  {
    uint64_t v18 = *(void *)a5[2];
    uint64_t v19 = a6[2];
    uint64_t v20 = *(void *)v19;
    if ((unsigned __int16)v18 != (unsigned __int16)*(void *)v19) {
      goto LABEL_14;
    }
    BOOL v22 = WORD1(v18) == WORD1(v20);
    uint64_t v21 = (v20 ^ v18) & 0xFFFFFF00000000;
    BOOL v22 = v22 && v21 == 0;
    if (!v22) {
      goto LABEL_14;
    }
LABEL_4:
    if (!a1[64]) {
      return (*(uint64_t (**)(unsigned char *, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v15, v26, v26, a7);
    }
    return 0;
  }
  if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, v16)) {
    goto LABEL_4;
  }
  uint64_t v19 = a6[2];
LABEL_14:
  if (*(_DWORD *)(v19 + 88) != 1)
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
    return 0;
  }
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v23, *a6, v19);
  re::TypeMemberCollection::operator[](v23, 0, (uint64_t)v24);
  re::TypeRegistry::typeInfo(v24[0], *v24[2], v29);
  re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v30);
  if (a1[64]) {
    return 0;
  }
  return (*(uint64_t (**)(unsigned char *, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v15, v26, v25, a7);
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v19);
  if (v19[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v20);
    if (*(_DWORD *)(v17 + 88) || (re::TypeRegistry::typeInfo(v16[0], *(void *)(v17 + 72), v21), v21[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, v16, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v16, *a3, a3[2]);
  if (v18)
  {
    for (unint64_t i = 0; i < v18; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v16, i, (uint64_t)&v14);
      if (*(unsigned char *)(v15 + 28))
      {
        uint64_t v10 = *(void *)(v15 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v15 + 32);
        uint64_t v12 = *(unsigned int *)(v15 + 24);
        re::TypeRegistry::typeInfo(v14, *(void *)v15, v21);
        uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v22);
        if (!a1[64]) {
          uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, a2 + v12, v13, v13, a4);
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v49);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v45);
  if (v45[0])
  {
    if (!v49[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v46)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
      return re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Base class \"%s\" removed from type \"%s\".", v12, v13, v14, v15, v16, v11);
    }
    if (v50 == v46)
    {
      uint64_t v18 = *v52;
      uint64_t v19 = *v48;
      if ((unsigned __int16)*v52 == (unsigned __int16)*v48)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v50, (const re::TypeInfo *)&v46, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, &v50, a5);
      goto LABEL_15;
    }
    if (v51 == v47)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, &v50, &v46, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v50)[1];
      re::TypeInfo::name((re::TypeInfo *)&v46);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v23, v24, v25, v26, v27, v22);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v42, *a4, a4[2]);
  if (v43)
  {
    for (unint64_t i = 0; i < v43; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v42, i, (uint64_t)v40);
      if (*(unsigned char *)(v41 + 28))
      {
        uint64_t v29 = *(void *)(v41 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v41 + 32);
        v31 = *(re **)(*a4 + 856);
        if (!v31
          || (v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v40),
              v31 == -1))
        {
          v33 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)buf = 136315394;
            uint64_t v54 = v34;
            __int16 v55 = 2080;
            uint64_t v56 = v29;
            _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          v35 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v54 + 4);
          uint64_t result = re::internal::translateType(v35, (const re::TypeRegistry *)v38, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v44, (int)v31, (uint64_t)v38);
          uint64_t v32 = *(unsigned int *)(v39 + 24);
          re::TypeRegistry::typeInfo(v38[0], *(void *)v39, buf);
          re::TypeInfo::TypeInfo((uint64_t)v37, (uint64_t)&v54 + 4);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v36, (uint64_t)&v54 + 4);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, a2 + v32, v37, v36, a5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t result = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, a2);
  if (v5) {
    BOOL v7 = result == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = *result;
    uint64_t v10 = a3;
    unint64_t v9 = v8 | 0xFFFFFFFF00000000;
    return (uint64_t *)re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1 + 288, &v9, &v10);
  }
  return result;
}

BOOL re::serializeBool<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  char v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (unsigned __int8 *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeChar<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  char v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = &v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(a1 + 24, a2, (uint64_t)a3, (uint64_t)v14, a7);
}

BOOL re::serializeI8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  char v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = &v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeI16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, __int16 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  __int16 v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = &v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeI32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (unsigned int *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeI64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unint64_t *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (unint64_t *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  char v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (unsigned __int8 *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  __int16 v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (unsigned __int16 *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (unsigned int *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, rapidjson::internal **a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (rapidjson::internal **)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeFloat<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (float *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeDouble<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v20 = 0;
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v16 = **((void **)a5 + 2);
      uint64_t v17 = **((void **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        BOOL v19 = WORD1(v16) == WORD1(v17);
        uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        BOOL v19 = v19 && v18 == 0;
        if (v19) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v14 = (double *)&v20;
  }
  else {
    uint64_t v14 = a4;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeCString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 != a6)
  {
    if (*(void *)a5 != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3)) {
        goto LABEL_4;
      }
LABEL_23:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
      return 0;
    }
    uint64_t v24 = **((void **)a5 + 2);
    uint64_t v25 = **((void **)a6 + 2);
    if ((unsigned __int16)v24 != (unsigned __int16)v25) {
      goto LABEL_23;
    }
    BOOL v27 = WORD1(v24) == WORD1(v25);
    uint64_t v26 = (v25 ^ v24) & 0xFFFFFF00000000;
    BOOL v27 = v27 && v26 == 0;
    if (!v27) {
      goto LABEL_23;
    }
  }
LABEL_4:
  if (a7)
  {
    int v29 = 0;
    int v19 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (uint64_t)a3, &v29, 0);
    BOOL result = 0;
    if (!v19) {
      return result;
    }
    if (v29)
    {
      if (v29 == 1)
      {
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Found pointer reference instead of C string.", v14, v15, v16, v17, v18, (char)v28);
        return 0;
      }
      uint64_t v28 = 0;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, 0, (uint64_t *)&v28, 0))
      {
        if (v28) {
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
        }
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    uint64_t v23 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    int v29 = 2 * (*a4 != 0);
    int v21 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (uint64_t)a3, &v29, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    if (v29 == 2)
    {
      uint64_t v22 = (const char *)*a4;
      if (*a4) {
        uint64_t v22 = (const char *)strlen(v22);
      }
      uint64_t v28 = v22;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, 0, (uint64_t *)&v28, 0))
      {
        if (v28) {
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, *a4, 0);
        }
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    uint64_t v23 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderBinary<re::SeekableInputStream>::endPointer(v23);
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_14;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x134375A94D9F7110
    || (int v19 = (char *)v18[1], v19 != "DynamicString") && strcmp(v19, "DynamicString"))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    size_t v23 = 0;
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v23, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    if (v23) {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
    }
    uint64_t v22 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    size_t v23 = strlen(*(const char **)(a4 + 8));
    BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v23, 0);
    if (!result) {
      return result;
    }
    if (v23) {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, *(void *)(a4 + 8), 0);
    }
    uint64_t v22 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString(v22);
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 != a6)
  {
    if (*(void *)a5 != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3)) {
        goto LABEL_4;
      }
LABEL_28:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
      return 0;
    }
    uint64_t v23 = **((void **)a5 + 2);
    uint64_t v24 = **((void **)a6 + 2);
    if ((unsigned __int16)v23 != (unsigned __int16)v24) {
      goto LABEL_28;
    }
    BOOL v26 = WORD1(v23) == WORD1(v24);
    uint64_t v25 = (v24 ^ v23) & 0xFFFFFF00000000;
    BOOL v26 = v26 && v25 == 0;
    if (!v26) {
      goto LABEL_28;
    }
  }
LABEL_4:
  if (!a7)
  {
    unint64_t v16 = **((void **)a5 + 2);
    uint64_t v32 = *(void *)a5;
    unint64_t v33 = v16;
    LODWORD(v34) = -1;
    v36[0] = 0x258C98EAAF29A10ALL;
    v36[1] = (uint64_t)"CallbackSerializerAttribute";
    BOOL v17 = (uint64_t *)re::TypeAttributeCollection::operator[](&v32, v36);
    re::StringID::destroyString((re::StringID *)v36);
    uint64_t v18 = *v17;
    uint64_t v19 = *(void *)(a1 + 264);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v32 = v20;
    unint64_t v33 = 0;
    re::DynamicString::setCapacity(&v32, 0);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v18 + 72))(v19, v18, a4, &v32))
    {
      if (v33) {
        uint64_t v21 = v33 >> 1;
      }
      else {
        uint64_t v21 = v33 >> 1;
      }
      v36[0] = v21;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, v36, 0))
      {
        if (v36[0])
        {
          if (v33) {
            uint64_t v22 = v34;
          }
          else {
            uint64_t v22 = (char *)&v33 + 1;
          }
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, (uint64_t)v22, 0);
        }
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
        if (v32 && (v33 & 1) != 0) {
          (*(void (**)(void))(*(void *)v32 + 40))();
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name(a5);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Failed to write string for \"%s\" (type %s) using serialization callback.", v27, v28, v29, v30, v31, (char)a2);
    }
    if (v32 && (v33 & 1) != 0) {
      (*(void (**)(void))(*(void *)v32 + 40))();
    }
    return 0;
  }
  uint64_t v32 = 0;
  BOOL v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, &v32, 0);
  BOOL result = 0;
  if (v14)
  {
    if (v32) {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, const char *a2, uint64_t a3, int *a4, int a5)
{
  BOOL v17 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40)) {
    return v5 == 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v17);
  }
  int v9 = *a4;
  if ((*a4 - 1) < 2)
  {
LABEL_7:
    LOBYTE(v12) = 9;
    DWORD1(v12) = a5 & 0xFFFFFFDF;
    *((void *)&v12 + 1) = v17;
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    BOOL v14 = v9 != 0;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v12);
    return v5 == 0;
  }
  if (!v9)
  {
    uint64_t v10 = *(char **)(a1 + 168);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v10);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v10);
    int v9 = *a4;
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected PointerEncoding.", "!\"Unreachable code\"", "beginPointer", 1054);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 4) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = 3 * v8;
  *(void *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 4) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1, *(void *)(*(void *)&v13[16] + v10 + 4) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 4), *(void *)&v13[16] + v10 + 4, *(void *)&v13[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_6, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

BOOL re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(unsigned char *a1, const char *a2, const re::TypeInfo *a3, const char **a4, re *a5, const re::TypeInfo *a6)
{
  if (a5 != a6)
  {
    if (*(void *)a5 != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3)) {
        goto LABEL_4;
      }
LABEL_14:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a5, a6);
      return 0;
    }
    uint64_t v17 = **((void **)a5 + 2);
    uint64_t v18 = **((void **)a6 + 2);
    if ((unsigned __int16)v17 != (unsigned __int16)v18) {
      goto LABEL_14;
    }
    BOOL v20 = WORD1(v17) == WORD1(v18);
    uint64_t v19 = (v18 ^ v17) & 0xFFFFFF00000000;
    BOOL v20 = v20 && v19 == 0;
    if (!v20) {
      goto LABEL_14;
    }
  }
LABEL_4:
  if (!*a4)
  {
    LODWORD(v26) = 0;
    BOOL v14 = (_anonymous_namespace_ *)(a1 + 24);
    int v23 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (uint64_t)a3, (int *)&v26, 0);
    BOOL result = 0;
    if (!v23) {
      return result;
    }
    goto LABEL_22;
  }
  if (!a1[336]
    || (BOOL v26 = *a4,
        (signed int v12 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a1 + 344), (uint64_t *)&v26)) == 0))
  {
    int v25 = 2;
    if (re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (uint64_t)a3, &v25, 0))
    {
      BOOL v26 = (const char *)strlen(*a4);
      BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 24), a2, 0, (uint64_t *)&v26, 0);
      if (!result) {
        return result;
      }
      if (v26) {
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString((uint64_t)(a1 + 24), (uint64_t)*a4, 0);
      }
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
      re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
      uint64_t v21 = *a4;
      uint64_t v22 = **((void **)a5 + 2);
      *(void *)&long long v24 = *(void *)a5;
      *((void *)&v24 + 1) = v22;
      re::internal::SharedObjectGraph::addObject((uint64_t)(a1 + 336), (uint64_t)v21, &v24);
      return a1[64] == 0;
    }
    return 0;
  }
  int v13 = *v12;
  int v25 = 1;
  LODWORD(v26) = v13;
  BOOL v14 = (_anonymous_namespace_ *)(a1 + 24);
  int v15 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (uint64_t)a3, &v25, 0);
  BOOL result = 0;
  if (!v15) {
    return result;
  }
  re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((uint64_t)(a1 + 24), (unsigned int *)&v26, 0);
LABEL_22:
  re::EncoderBinary<re::SeekableInputStream>::endPointer(v14);
  return a1[64] == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, const char *a2, uint64_t a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v30 = **((void **)this + 2);
    uint64_t v31 = **((void **)a6 + 2);
    if ((unsigned __int16)v30 == (unsigned __int16)v31)
    {
      BOOL v33 = WORD1(v30) == WORD1(v31);
      uint64_t v32 = (v31 ^ v30) & 0xFFFFFF00000000;
      BOOL v33 = v33 && v32 == 0;
      if (v33) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v14))
  {
LABEL_4:
    int v16 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v34 = re::TypeInfo::name(this), v35 = re::TypeInfo::name(a6), !re::StringID::operator==(v34, v35))))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, this, a6);
    return 0;
  }
  int v16 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v42);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)v43);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v42);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v43);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    uint64_t v22 = *(void *)v41[2];
    *(void *)&long long v39 = v41[0];
    *((void *)&v39 + 1) = v22;
    if (v41[0]) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  re::internal::actualType(a4, (void **)this, &v39);
  if (!(void)v39)
  {
LABEL_15:
    int v23 = re::TypeInfo::name(this);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Failed to get actual type of polymorphic object. Type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, (re **)&v39, &v42);
  re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)v43);
  if ((a7 & 1) != 0 || (uint64_t v17 = *a4) == 0)
  {
    LODWORD(v42) = 0;
    uint64_t v19 = (_anonymous_namespace_ *)(a1 + 24);
    int v29 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, a3, (int *)&v42, 0);
    uint64_t result = 0;
    if (v29) {
      goto LABEL_17;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 336))
  {
LABEL_33:
    long long v36 = v39;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v17, &v36);
    LODWORD(v42) = 2;
    uint64_t result = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, a3, (int *)&v42, 0);
    if (result)
    {
      if (isPointerToPolymorphicType)
      {
        re::internal::serializePolymorphicObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, a3, (uint64_t)*a4, (re::TypeInfo *)v38, v40, v16);
      }
      else if (!*(unsigned char *)(a1 + 64))
      {
        (*(void (**)(uint64_t, const char *, void, char *, void *, re::TypeRegistry **, void))(*(void *)a1 + 72))(a1, a2, 0, *a4, v41, v40, 0);
      }
      re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
      if (*(unsigned char *)(a1 + 336))
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  v42 = *a4;
  uint64_t v18 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 344, (uint64_t *)&v42);
  if (!v18)
  {
    uint64_t v17 = *a4;
    goto LABEL_33;
  }
  LODWORD(v42) = *v18;
  int v37 = 1;
  uint64_t v19 = (_anonymous_namespace_ *)(a1 + 24);
  int v20 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, a3, &v37, 0);
  uint64_t result = 0;
  if (v20)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(a1 + 24, (unsigned int *)&v42, 0);
LABEL_17:
    re::EncoderBinary<re::SeekableInputStream>::endPointer(v19);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(uint64_t result, unsigned int *a2, int a3)
{
  if (!*(unsigned char *)(result + 40))
  {
    char v3 = a3;
    long long v5 = (_anonymous_namespace_ *)result;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(result, 0, 0, a3);
    if (result)
    {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)v5, "@ref", 0, a2, v3);
      return (uint64_t)re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v5);
    }
  }
  return result;
}

BOOL re::internal::serializePolymorphicObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, re::TypeRegistry **a6, int a7)
{
  re::TypeInfo::TypeInfo((uint64_t)v27, (uint64_t)a5);
  if (a7)
  {
    BOOL v14 = *a6;
    int v15 = re::TypeInfo::name(a5);
    re::TypeRegistry::typeInfo(v14, (const re::StringID *)v15, v25);
    if (!v25[0])
    {
      uint64_t v19 = re::TypeInfo::name(a5);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "No matching type found for polymorphic type \"%s\" to serialize.", v20, v21, v22, v23, v24, v19[1]);
      return 0;
    }
    re::TypeInfo::operator=((uint64_t)v27, (uint64_t)&v26);
  }
  BOOL v16 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 24), a2, a3, 0);
  BOOL result = 0;
  if (v16)
  {
    uint64_t v18 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v27);
    if (!a1[64]) {
      (*(void (**)(unsigned char *, uint64_t, void, uint64_t, re::TypeInfo *, unsigned char *, void))(*(void *)a1 + 72))(a1, v18[1], 0, a4, a5, v27, 0);
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return a1[64] == 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::EntityAssetData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    char v3 = *(re::ecs2::EntityAssetData **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        do
        {
          re::ecs2::EntityAssetData::~EntityAssetData(v3);
          char v3 = (re::ecs2::EntityAssetData *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        char v3 = *(re::ecs2::EntityAssetData **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::ecs2::EntityAssetData *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<unsigned long long &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_6, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

__n128 re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::ComponentHandleAssetData>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  long long v5 = (__n128 *)(*((void *)this + 4) + 24 * v4);
  __n128 result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *long long v5 = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::ecs2::ComponentHandleAssetData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (re::ecs2::EntityAssetData *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 112 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ecs2::EntityAssetData::EntityAssetData(v11, (uint64_t)v8);
          re::ecs2::EntityAssetData::~EntityAssetData(v8);
          long long v8 = (re::ecs2::EntityAssetData *)((char *)v8 + 112);
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        long long v8 = (re::ecs2::EntityAssetData *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, re::ecs2::EntityAssetData *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ecs2::EntityAssetData::EntityAssetData(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = *(void *)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(result + 8) = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(void *)(result + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = "";
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(result + 64) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v3;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v4 = *(void *)(result + 48);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v4;
  uint64_t v5 = *(void *)(result + 64);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v5;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(result + 56);
  *(void *)(result + 104) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v6;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v7 = *(void *)(result + 88);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v7;
  uint64_t v8 = *(void *)(result + 104);
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v8;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(result + 96);
  return result;
}

void *re::DynamicArray<re::ecs2::EntityAssetData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t *re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v3 = a1[34];
  __n128 result = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 200, a1 + 1);
  if (v3) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *result;
    uint64_t v7 = a1[34];
    v12[0] = v3;
    v12[1] = v6;
    re::TypeRegistry::attributesByAttributeType(v7, (uint64_t)v12, (uint64_t)&v13);
    if (v14)
    {
      uint64_t v8 = (uint64_t *)(v15 + 40);
      uint64_t v9 = 48 * v14;
      do
      {
        uint64_t v10 = *(v8 - 2);
        uint64_t v11 = *v8;
        v8 += 6;
        uint64_t v17 = v11;
        unint64_t v16 = v10 | 0xFFFFFFFF00000000;
        re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v2, &v16, &v17);
        v9 -= 48;
      }
      while (v9);
    }
    __n128 result = v13;
    if (v13)
    {
      if (v15) {
        return (uint64_t *)(*(uint64_t (**)(void))(*v13 + 40))();
      }
    }
  }
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::~__func()
{
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E6D4258;
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D4258;
}

re *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::internal::MeshSortGroupFixupTable>(*a2);
}

uint64_t std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::target_type()
{
}

re *re::internal::destroyPersistent<re::internal::MeshSortGroupFixupTable>(re *result)
{
  if (result)
  {
    v1 = (uint64_t *)result;
    uint64_t v2 = re::globalAllocators(result)[2];
    v3.n128_f64[0] = re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v1);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(void *)v2 + 40);
    return (re *)v4(v2, v1, v3);
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 160 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 160;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *std::__function::__value_func<void ()(re::internal::MeshSortGroupFixupTable *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::internal::MeshSortGroupFixupTable,std::function<void ()(re::internal::MeshSortGroupFixupTable*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v5 = v2;
    if (!v3)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x23348DBC8);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
  }
  std::__function::__value_func<void ()(re::internal::MeshSortGroupFixupTable *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::~__func()
{
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E6D42E8;
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D42E8;
}

re *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::internal::EntityHandleHookupTable>(*a2);
}

uint64_t std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::internal::EntityHandleHookupTable *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

uint64_t std::function<void ()(re::internal::EntityHandleHookupTable *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x23348DDACLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::~__func()
{
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26E6D4378;
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D4378;
}

re *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::internal::MeshSortGroupFixupTable>(*a2);
}

uint64_t std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::target_type()
{
}

uint64_t re::ecs2::EntityComponentCollection::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 24) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 40) + 8 * a2;
}

uint64_t re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::open(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 208);
  if (*(_DWORD *)(v8 + 24) != *(_DWORD *)(a1 + 216))
  {
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::deinit((void *)a1);
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::init(a1, v8);
  }
  v9.n128_f64[0] = re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::open(a1 + 24, a2, 0, 0xFFFFFFFFLL, a3, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 48);
  return v10(a1, v9);
}

void *allocInfo_AudioComponentDescription(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_75, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_75))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79020, "AudioComponentDescription");
    __cxa_guard_release(&_MergedGlobals_75);
  }
  return &unk_26AF79020;
}

void initInfo_AudioComponentDescription(re::IntrospectionBase *a1)
{
  v25[0] = 0x671391F4143CF2ALL;
  v25[1] = "AudioComponentDescription";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)a1 + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78F98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = (re *)__cxa_guard_acquire(&qword_26AF78F98);
    if (v3)
    {
      uint64_t v4 = re::introspectionAllocator(v3);
      uint64_t v6 = re::introspect_uint32_t((re *)1, v5);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v4 + 32))(v4, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "componentType";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF78FD0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "componentSubType";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x400000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF78FD8 = v11;
      signed int v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "componentManufacturer";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF78FE0 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint32_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "componentFlags";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0xC00000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF78FE8 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint32_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "componentFlagsMask";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78FF0 = v23;
      __cxa_guard_release(&qword_26AF78F98);
    }
  }
  *((void *)a1 + 2) = 0x1400000008;
  *((_DWORD *)a1 + 6) = 4;
  *((_WORD *)a1 + 14) = 1;
  *((_DWORD *)a1 + 14) = 5;
  *((void *)a1 + 8) = &qword_26AF78FD0;
  *((void *)a1 + 9) = re::internal::defaultConstruct<AudioComponentDescription>;
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 10) = re::internal::defaultDestruct<AudioComponentDescription>;
  *((void *)a1 + 13) = re::internal::defaultConstructV2<AudioComponentDescription>;
  *((void *)a1 + 14) = re::internal::defaultDestructV2<AudioComponentDescription>;
  re::IntrospectionRegistry::add(a1, v2);
  long long v24 = v26;
}

void sub_23348E47C(_Unwind_Exception *a1)
{
}

void *re::allocInfo_AudioGeneratorAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78FA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78FA8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79098, "AudioGeneratorAsset");
    __cxa_guard_release(&qword_26AF78FA8);
  }
  return &unk_26AF79098;
}

void re::initInfo_AudioGeneratorAsset(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x4E48AFB12BABDA66;
  v25[1] = "AudioGeneratorAsset";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78FB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78FB0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = (re::IntrospectionBase *)qword_26AF78FA0;
      if (!qword_26AF78FA0)
      {
        uint64_t v6 = (re::IntrospectionBase *)allocInfo_AudioComponentDescription();
        qword_26AF78FA0 = (uint64_t)v6;
        initInfo_AudioComponentDescription(v6);
      }
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "componentDescription";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0x4400000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF78FF8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "layoutTag";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 2;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF79000 = v11;
      signed int v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "referenceLevel";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x4000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF79008 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_double((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "maximumAlignmentLatency";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x6000000005;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF79010 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "mixGroupName";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x800000006;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF79018 = v23;
      __cxa_guard_release(&qword_26AF78FB0);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF78FF8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioGeneratorAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioGeneratorAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AudioGeneratorAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioGeneratorAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void sub_23348E8EC(_Unwind_Exception *a1)
{
}

int32x2_t re::internal::defaultConstruct<re::AudioGeneratorAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 6553601;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 64) = 1117126656;
  int32x2_t result = vdup_n_s32(0x62616464u);
  *(unsigned char *)(a3 + 56) = 0;
  *(int32x2_t *)(a3 + 68) = result;
  *(_DWORD *)(a3 + 76) = 1650549860;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AudioGeneratorAsset>(int a1, int a2, id *this)
{
}

int32x2_t re::internal::defaultConstructV2<re::AudioGeneratorAsset>(uint64_t a1)
{
  *(_DWORD *)a1 = 6553601;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 1117126656;
  int32x2_t result = vdup_n_s32(0x62616464u);
  *(unsigned char *)(a1 + 56) = 0;
  *(int32x2_t *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 76) = 1650549860;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  return result;
}

void re::AudioGeneratorAsset::~AudioGeneratorAsset(id *this)
{
  if (*((unsigned char *)this + 56)) {

  }
  if (*((unsigned char *)this + 8)) {
    re::DynamicString::deinit((re::DynamicString *)(this + 2));
  }
}

uint64_t *re::AudioGeneratorAsset::assetType(re::AudioGeneratorAsset *this)
{
  {
    re::AudioGeneratorAsset::assetType(void)::type = (uint64_t)"AudioGenerator";
    qword_26879E6D8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AudioGeneratorAsset::assetType(void)::type);
  }
  return &re::AudioGeneratorAsset::assetType(void)::type;
}

void *re::AudioGeneratorAsset::instantiateAudioUnit(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)MEMORY[0x263EFC0A8];
  long long v4 = *(_OWORD *)(a1 + 68);
  int v5 = *(_DWORD *)(a1 + 84);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3321888768;
  v6[2] = ___ZNK2re19AudioGeneratorAsset20instantiateAudioUnitENSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE_block_invoke;
  v6[3] = &__block_descriptor_64_ea8_32c49_ZTSNSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE_e33_v24__0__AUAudioUnit_8__NSError_16l;
  std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::__value_func[abi:nn180100]((uint64_t)v7, a2);
  [v2 instantiateWithComponentDescription:&v4 options:0 completionHandler:v6];
  return std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::~__value_func[abi:nn180100](v7);
}

void sub_23348EB34(_Unwind_Exception *a1, int a2)
{
  std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::~__value_func[abi:nn180100](v3);
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    uint64_t v6 = [MEMORY[0x263F087E8] errorWithDomain:@"REKit" code:0 userInfo:0];
    std::function<void ()(AUAudioUnit *,NSError *)>::operator()(v2, 0, v6);

    objc_end_catch();
    JUMPOUT(0x23348EB04);
  }
  _Unwind_Resume(a1);
}

void ___ZNK2re19AudioGeneratorAsset20instantiateAudioUnitENSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
}

void std::function<void ()(AUAudioUnit *,NSError *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t, id *, id *))(*(void *)v5 + 48))(v5, &v7, &v6);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_23348EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c49_ZTSNSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::__value_func[abi:nn180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_ea8_32c49_ZTSNSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::~__value_func[abi:nn180100]((void *)(a1 + 32));
}

void re::AudioGeneratorAssetLoader::~AudioGeneratorAssetLoader(re::AudioGeneratorAssetLoader *this)
{
}

re *re::AudioGeneratorAssetLoader::unloadAsset(re *this, id *a2)
{
  if (a2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    re::AudioGeneratorAsset::~AudioGeneratorAsset(a2);
    long long v4 = *(uint64_t (**)(uint64_t, id *))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return this;
}

re *re::internal::destroyPersistent<re::AudioGeneratorAsset>(re *result)
{
  if (result)
  {
    v1 = (id *)result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::AudioGeneratorAsset::~AudioGeneratorAsset(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, id *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::AudioGeneratorAssetLoader::registerAsset()
{
  return 0;
}

BOOL re::AudioGeneratorAssetLoader::isSupportedSourceExtension(re::AudioGeneratorAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reaudiogenerator") == 0;
}

uint64_t re::AudioGeneratorAssetLoader::introspectionType(re::AudioGeneratorAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78FC8))
  {
    qword_26AF78FC0 = re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioGeneratorAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGeneratorAsset, (void (*)(re::IntrospectionBase *))&unk_26AF78FB8, 0);
    __cxa_guard_release(&qword_26AF78FC8);
  }
  return qword_26AF78FC0;
}

re::DynamicString *re::AudioGeneratorAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::AudioGeneratorAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = (re::AudioGeneratorAsset *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(void *)a2 = 0x100000001;
  re::AudioGeneratorAsset::assetType(v3);
  v5[0] = re::AudioGeneratorAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::AudioGeneratorAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

uint64_t re::AudioGeneratorAssetCompiler::assetIntrospectionType(re::AudioGeneratorAssetCompiler *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78FC8))
  {
    qword_26AF78FC0 = re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioGeneratorAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGeneratorAsset, (void (*)(re::IntrospectionBase *))&unk_26AF78FB8, 0);
    __cxa_guard_release(&qword_26AF78FC8);
  }
  return qword_26AF78FC0;
}

void *re::AudioGeneratorAssetCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((void *)a1, &re::kGeneratorAssetFileExtension);
}

void sub_23348EF98(_Unwind_Exception *a1)
{
  re::DynamicArray<unsigned long>::deinit(v1);
  _Unwind_Resume(a1);
}

re *re::AudioGeneratorAssetCompiler::compile@<X0>(re::AudioGeneratorAssetCompiler *this@<X0>, re::AssetUtilities *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = re::globalAllocators(this);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 104, 8);
  *(_DWORD *)uint64_t v9 = 6553601;
  *(unsigned char *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 48) = 0;
  *(unsigned char *)(v9 + 56) = 0;
  *(_DWORD *)(v9 + 64) = 1117126656;
  *(int32x2_t *)(v9 + 68) = vdup_n_s32(0x62616464u);
  *(_DWORD *)(v9 + 76) = 1650549860;
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 80) = 0;
  *(unsigned char *)(v9 + 88) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78FC8))
  {
    qword_26AF78FC0 = re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioGeneratorAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGeneratorAsset, (void (*)(re::IntrospectionBase *))&unk_26AF78FB8, 0);
    __cxa_guard_release(&qword_26AF78FC8);
  }
  int32x2_t result = (re *)re::AssetUtilities::readSourceJson(a2, (const char *)v9, qword_26AF78FC0, a3, (uint64_t)v19);
  if (v19[0])
  {
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = v9;
  }
  else
  {
    uint64_t v11 = re::globalAllocators(result)[2];
    re::AudioGeneratorAsset::~AudioGeneratorAsset((id *)v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v9);
    *(void *)&long long v15 = 100;
    *((void *)&v15 + 1) = re::AssetErrorCategory(void)::instance;
    int32x2_t result = re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)&v20);
    long long v12 = v16;
    *(_OWORD *)(a4 + 8) = v15;
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v12;
    *(void *)(a4 + 40) = v13;
    *(void *)(a4 + 48) = v14;
    if (!v19[0])
    {
      int32x2_t result = v20;
      if (v20)
      {
        if (v21) {
          return (re *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
        }
      }
    }
  }
  return result;
}

void sub_23348F1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19)
{
  if (!a16 && a17 && (a18 & 1) != 0) {
    (*(void (**)(void))(*(void *)a17 + 40))();
  }
  _Unwind_Resume(exception_object);
}

re *re::AudioGeneratorAssetCompiler::deleteAsset(re::AudioGeneratorAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::AudioGeneratorAsset>(a2);
}

void re::AudioGeneratorAssetCompiler::~AudioGeneratorAssetCompiler(re::AudioGeneratorAssetCompiler *this)
{
}

void *std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(AUAudioUnit *,NSError *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t re::SkeletalPoseRuntimeData::update<re::MeshAsset>(re::SkeletalPoseRuntimeData *this, void *a2, uint64_t a3, re::MeshAsset *a4, uint64_t a5, re::SkeletalPoseRigMappingData *a6, uint64_t a7, void *a8, uint64_t a9, unint64_t a10, uint64_t a11, re::BindNode **a12)
{
  if (*((void *)this + 2) != a7)
  {
    re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>((uint64_t)this, a2, a3, a4, a5, a6, a8, (uint64_t)a8, a9, a10, a11, a12);
    ++*((_DWORD *)this + 2);
    *((void *)this + 2) = a7;
  }
  return re::SkeletalPoseRuntimeData::executeEvaluationTree((uint64_t)this);
}

void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(uint64_t a1, void *a2, uint64_t a3, re::MeshAsset *a4, uint64_t a5, re::SkeletalPoseRigMappingData *a6, void *a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, re::BindNode **a12)
{
  uint64_t v14 = a1;
  uint64_t v93 = *MEMORY[0x263EF8340];
  ++*(_DWORD *)(a1 + 8);
  *(void *)(a1 + 16) = -1;
  re::FixedArray<re::EvaluationRigState>::deinit((void *)(a1 + 24));
  uint64_t v15 = *(void *)(v14 + 48);
  *(void *)(v14 + 48) = 0;
  if (v15) {
    std::function<void ()(re::EvaluationModelBase *)>::operator()(v14 + 56, v15);
  }
  *(void *)(v14 + 88) = 0;
  re::DynamicRegisterIdTable::deinit((re::DynamicRegisterIdTable *)(v14 + 96));
  re::DynamicArray<unsigned long>::deinit(v14 + 416);
  re::DynamicRegisterIdTable::deinit((re::DynamicRegisterIdTable *)(v14 + 456));
  v75 = (re::EvaluationContextManager *)(v14 + 88);
  re::DynamicArray<unsigned long>::deinit(v14 + 776);
  for (uint64_t i = 816; i != 1176; i += 40)
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit(v14 + i);
  do
  {
    re::DynamicArray<unsigned long>::deinit(v14 + i);
    i += 40;
  }
  while (i != 1536);
  re::DynamicRegisterIdTable::deinit((re::DynamicRegisterIdTable *)(v14 + 1536));
  re::DynamicArray<unsigned long>::deinit(v14 + 1856);
  for (uint64_t j = 1896; j != 2256; j += 40)
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit(v14 + j);
  do
  {
    re::DynamicArray<unsigned long>::deinit(v14 + j);
    j += 40;
  }
  while (j != 2616);
  *(unsigned char *)(v14 + 2616) = 0;
  uint64_t v18 = (_anonymous_namespace_ *)re::EvaluationContext::deinit((re::EvaluationContext *)(v14 + 2624));
  if (!*(void *)v14)
  {
    *(_DWORD *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = -1;
  }
  unint64_t v19 = *((void *)a6 + 12);
  *(void *)(v14 + 32) = v19;
  if (v19)
  {
    if (v19 >= 0x124924924924925) {
      goto LABEL_87;
    }
    *(void *)(v14 + 40) = v21;
    if (!v21)
    {
LABEL_88:
      re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    unint64_t v23 = v19 - 1;
    if (v19 != 1)
    {
      do
      {
        *(void *)uint64_t v21 = 0;
        *(_OWORD *)(v21 + 96) = 0uLL;
        *(_OWORD *)(v21 + 112) = 0uLL;
        *(_OWORD *)(v21 + 128) = 0uLL;
        *(_OWORD *)(v21 + 144) = 0uLL;
        *(_OWORD *)(v21 + 32) = 0uLL;
        *(_OWORD *)(v21 + 48) = 0uLL;
        *(_OWORD *)(v21 + 64) = 0uLL;
        *(_OWORD *)(v21 + 80) = 0uLL;
        *(_OWORD *)(v21 + 160) = 0uLL;
        *(_OWORD *)(v21 + 176) = 0uLL;
        *(_DWORD *)(v21 + 104) = 1;
        *(void *)(v21 + 112) = 0;
        *(void *)(v21 + 120) = 0;
        *(_DWORD *)(v21 + 136) = 0;
        *(void *)(v21 + 128) = 0;
        *(void *)(v21 + 144) = 0;
        *(void *)(v21 + 152) = 0;
        *(_DWORD *)(v21 + 168) = 0;
        *(void *)(v21 + 160) = 0;
        *(void *)(v21 + 208) = 0;
        *(void *)(v21 + 216) = 0;
        *(_DWORD *)(v21 + 208) = 0;
        *(_OWORD *)(v21 + 176) = 0uLL;
        *(_OWORD *)(v21 + 192) = 0uLL;
        *(_OWORD *)(v21 + 192) = 0uLL;
        v21 += 224;
        --v23;
      }
      while (v23);
    }
    *(void *)uint64_t v21 = 0;
    *(_OWORD *)(v21 + 96) = 0u;
    *(_OWORD *)(v21 + 112) = 0u;
    *(_OWORD *)(v21 + 128) = 0u;
    *(_OWORD *)(v21 + 144) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_OWORD *)(v21 + 64) = 0u;
    *(_OWORD *)(v21 + 80) = 0u;
    *(_OWORD *)(v21 + 160) = 0u;
    *(_OWORD *)(v21 + 176) = 0u;
    *(_DWORD *)(v21 + 104) = 1;
    *(void *)(v21 + 112) = 0;
    *(void *)(v21 + 120) = 0;
    *(_DWORD *)(v21 + 136) = 0;
    *(void *)(v21 + 128) = 0;
    *(void *)(v21 + 144) = 0;
    *(void *)(v21 + 152) = 0;
    *(_DWORD *)(v21 + 168) = 0;
    *(void *)(v21 + 160) = 0;
    *(void *)(v21 + 208) = 0;
    *(void *)(v21 + 216) = 0;
    *(_DWORD *)(v21 + 208) = 0;
    *(_OWORD *)(v21 + 176) = 0u;
    *(_OWORD *)(v21 + 192) = 0u;
    *(_OWORD *)(v21 + 192) = 0u;
    re::EvaluationContextManager::init(v75, *(re::Allocator **)v14);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)v78);
    unint64_t v24 = 0;
    unint64_t v74 = 0;
    unsigned int v25 = 0;
    v69 = a4;
    v70 = a6;
    unint64_t v68 = v19;
    while (1)
    {
      unint64_t v26 = v25;
      if (*((void *)a6 + 24) <= (unint64_t)v25) {
        unint64_t v27 = 0xFFFFFFFFLL;
      }
      else {
        unint64_t v27 = *(unsigned int *)(*((void *)a6 + 25) + 4 * v25);
      }
      unint64_t v28 = *((void *)a4 + 52);
      if (v28 <= v27)
      {
        *(void *)v85 = 0;
        long long v83 = 0u;
        long long v82 = 0u;
        long long v81 = 0u;
        long long v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v90 = 136315906;
        *(void *)&v90[4] = "operator[]";
        *(_WORD *)&v90[12] = 1024;
        *(_DWORD *)&v90[14] = 797;
        *(_WORD *)&v90[18] = 2048;
        *(void *)&v90[20] = v27;
        *(_WORD *)&v90[28] = 2048;
        *(void *)&v90[30] = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        *(void *)&long long v77 = 0;
        long long v91 = 0u;
        long long v92 = 0u;
        memset(v90, 0, sizeof(v90));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v85 = 136315906;
        *(void *)&v85[4] = "operator[]";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 468;
        __int16 v86 = 2048;
        unint64_t v87 = v24;
        __int16 v88 = 2048;
        unint64_t v89 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        *(void *)&long long v77 = 0;
        long long v91 = 0u;
        long long v92 = 0u;
        memset(v90, 0, sizeof(v90));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v85 = 136315906;
        *(void *)&v85[4] = "operator[]";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 468;
        __int16 v86 = 2048;
        unint64_t v87 = v24;
        __int16 v88 = 2048;
        unint64_t v89 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 224, v19);
        _os_crash();
        __break(1u);
        goto LABEL_88;
      }
      int v29 = (re *)re::DataArray<re::MeshModel>::tryGet(*((void *)a4 + 55) + 8, *(void *)(*((void *)a4 + 54) + 8 * v27));
      if (v29)
      {
        uint64_t v30 = v29;
        if (*((void *)a6 + 21) <= v26) {
          unint64_t v31 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v31 = *(unsigned int *)(*((void *)a6 + 22) + 4 * v26);
        }
        if (*((void *)a4 + 117) <= v31)
        {
          int v37 = *re::assetsLogObjects(v29);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            BOOL v33 = v37;
            uint64_t v34 = "Skeleton index is out of bounds.";
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v35 = re::MeshAsset::skeletonAtIndex(a4, v31);
          if (*((void *)a6 + 12) <= v26) {
            uint64_t v36 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v36 = *(unsigned int *)(*((void *)a6 + 13) + 4 * v26);
          }
          long long v38 = 0uLL;
          long long v39 = 0uLL;
          if (*((void *)a6 + 15) > v26) {
            long long v39 = *(_OWORD *)(*((void *)a6 + 16) + 16 * v26);
          }
          *(_OWORD *)v90 = v39;
          uint64_t v40 = *(void *)(a11 + 16);
          *(void *)v85 = *(void *)(a11 + 32);
          *(void *)&v85[8] = v40;
          if (*((void *)a6 + 18) > v26) {
            long long v38 = *(_OWORD *)(*((void *)a6 + 19) + 16 * v26);
          }
          long long v77 = v38;
          uint64_t v41 = *(void *)(v35 + 24);
          v76[0] = *(void *)(v35 + 32);
          v76[1] = v41;
          re::RigRuntimeData::constructRigCommands(a3, v36, a2, a7, (_anonymous_namespace_ **)v90, v85, (_anonymous_namespace_ *)&v77, (uint64_t)v76, (unint64_t)buf, v78, v75, a12);
          if (buf[0])
          {
            unint64_t v28 = *(void *)(v14 + 32);
            if (v28 <= v24) {
              goto LABEL_85;
            }
            unint64_t v43 = (uint64_t *)(*(void *)(v14 + 40) + 224 * v24);
            std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::operator=[abi:nn180100](v43, (uint64_t *)&buf[8]);
            re::FixedArray<float>::operator=(v43 + 5, (uint64_t *)&v82);
            re::FixedArray<float>::operator=(v43 + 8, (uint64_t *)&v83 + 1);
            re::RigGraphCompilation::operator=(v43 + 11, v84);
            unint64_t v28 = *(void *)(v14 + 32);
            if (v28 <= v24) {
              goto LABEL_86;
            }
            uint64_t v44 = *(void *)(v14 + 40);
            uint64_t v45 = re::SkeletalPoseRigMappingData::poseRigMapJointTransformCount(a6, v26);
            if (v45)
            {
              unint64_t v46 = 0;
              uint64_t v47 = v44 + 224 * v24;
              v48 = (unint64_t *)(v47 + 48);
              v49 = (void *)(v47 + 56);
              if (a10 >= v74) {
                uint64_t v50 = (a10 - v74);
              }
              else {
                uint64_t v50 = 0;
              }
              char v51 = (const re::IntrospectionBase *)(a9 + (v74 << 6));
              while (1)
              {
                unint64_t v52 = *v48;
                if (*v48 <= v46) {
                  break;
                }
                *(void *)v90 = *(void *)(*v49 + 8 * v46);
                re::DynamicArray<unsigned long>::add((void *)(v14 + 1696), v90);
                uint64_t v54 = *(void *)(v14 + 1712) - 1;
                *(void *)v90 = v14 + 88;
                *(void *)&v90[8] = v54;
                if (v50 == v46) {
                  goto LABEL_79;
                }
                re::EvaluationOutputHandle<re::Matrix4x4<float>>::bindEvaluationOutput<re::Matrix4x4<float>>(v90, v51, 0);
                ++v46;
                char v51 = (const re::IntrospectionBase *)((char *)v51 + 64);
                if (v45 == v46) {
                  goto LABEL_49;
                }
              }
              *(void *)&long long v77 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              memset(v90, 0, sizeof(v90));
              uint64_t v14 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v85 = 136315906;
              *(void *)&v85[4] = "operator[]";
              *(_WORD *)&v85[12] = 1024;
              *(_DWORD *)&v85[14] = 468;
              __int16 v86 = 2048;
              unint64_t v87 = v46;
              __int16 v88 = 2048;
              unint64_t v89 = v52;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_79:
              re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v74 + v46, a10);
              _os_crash();
              __break(1u);
LABEL_80:
              if (v90[32]) {
                v67 = *(uint8_t **)&v90[40];
              }
              else {
                v67 = &v90[33];
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = v67;
              _os_log_error_impl(&dword_233120000, v50, OS_LOG_TYPE_ERROR, "Could not setup evaluation model: %s.", buf, 0xCu);
LABEL_71:
              uint64_t v66 = *(void *)(v14 + 48);
              *(void *)(v14 + 48) = 0;
              if (v66) {
                std::function<void ()(re::EvaluationModelBase *)>::operator()(v46, v66);
              }
              if (!v90[0] && *(void *)&v90[24] && (v90[32] & 1) != 0) {
                (*(void (**)(void))(**(void **)&v90[24] + 40))();
              }
              goto LABEL_74;
            }
LABEL_49:
            v74 += v45;
            a4 = v69;
            a6 = v70;
            unint64_t v19 = v68;
          }
          else
          {
            __int16 v55 = *re::assetsLogObjects(v42);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              uint64_t v56 = *((void *)v30 + 1);
              uint64_t v57 = (char *)&v81 + 1;
              if (v81) {
                uint64_t v57 = (char *)*((void *)&v81 + 1);
              }
              *(_DWORD *)v90 = 136315394;
              *(void *)&v90[4] = v56;
              *(_WORD *)&v90[12] = 2080;
              *(void *)&v90[14] = v57;
              _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "Could not evaluate rig for model \"%s\": %s.", v90, 0x16u);
            }
          }
          re::Result<re::EvaluationRigState,re::DetailedError>::~Result((uint64_t)buf);
        }
      }
      else
      {
        uint64_t v32 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          BOOL v33 = v32;
          uint64_t v34 = "Mesh model not not registered.";
LABEL_32:
          _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, v34, buf, 2u);
        }
      }
      unint64_t v24 = (v26 + 1);
      unsigned int v25 = v26 + 1;
      if (v19 <= v24) {
        goto LABEL_58;
      }
    }
  }
  re::EvaluationContextManager::init(v75, *(re::Allocator **)v14);
  re::EvaluationTree::EvaluationTree((re::EvaluationTree *)v78);
LABEL_58:
  v58 = (re *)re::EvaluationContextManager::buildEvaluationContext(v75);
  v59 = re::globalAllocators(v58);
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v59[2] + 32))(v59[2], 784, 8);
  *(void *)uint64_t v60 = &unk_26E6C4A78;
  *(_DWORD *)(v60 + 8) = -1;
  bzero((void *)(v60 + 16), 0x300uLL);
  *(void *)v90 = &unk_26E6D4760;
  *(void *)&v90[24] = v90;
  *(void *)&long long v81 = &buf[8];
  *(void *)&buf[8] = &unk_26E6D4760;
  *(void *)buf = 0;
  uint64_t v61 = *(void *)(v14 + 48);
  *(void *)(v14 + 48) = v60;
  if (v61) {
    std::function<void ()(re::EvaluationModelBase *)>::operator()(v14 + 56, v61);
  }
  unint64_t v46 = v14 + 56;
  uint64_t v62 = *(void *)(v14 + 80);
  *(void *)(v14 + 80) = 0;
  if (v62 == v14 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 32))(v14 + 56);
  }
  else if (v62)
  {
    (*(void (**)(uint64_t))(*(void *)v62 + 40))(v62);
  }
  if ((void)v81)
  {
    if ((uint8_t *)v81 == &buf[8])
    {
      *(void *)(v14 + 80) = v46;
      (*(void (**)(uint8_t *, uint64_t))(*(void *)&buf[8] + 24))(&buf[8], v14 + 56);
    }
    else
    {
      *(void *)(v14 + 80) = v81;
      *(void *)&long long v81 = 0;
    }
  }
  else
  {
    *(void *)(v14 + 80) = 0;
  }
  std::unique_ptr<re::EvaluationModelBase,std::function<void ()(re::EvaluationModelBase*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(re::EvaluationModelBase *)>::~__value_func[abi:nn180100](v90);
  v63 = *(re::Allocator **)v14;
  uint64_t v64 = *(void *)(v14 + 48);
  re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v75, (uint64_t)buf);
  v65 = (re *)(*(void *(**)(uint8_t *__return_ptr, uint64_t, re::Allocator *, void *, uint8_t *))(*(void *)v64 + 32))(v90, v64, v63, v78, buf);
  if (!v90[0])
  {
    uint64_t v50 = *re::assetsLogObjects(v65);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      goto LABEL_80;
    }
    goto LABEL_71;
  }
LABEL_74:
  re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)v78);
}

void *re::FixedArray<re::EvaluationRigState>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      long long v4 = (uint64_t *)result[2];
      uint64_t v5 = 224 * v2;
      do
      {
        re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v4 + 11));
        re::FixedArray<CoreIKTransform>::deinit(v4 + 8);
        re::FixedArray<CoreIKTransform>::deinit(v4 + 5);
        std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::~unique_ptr[abi:nn180100](v4);
        v4 += 28;
        v5 -= 224;
      }
      while (v5);
      int32x2_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t re::SkeletalPoseRuntimeData::executeEvaluationTree(uint64_t this)
{
  if (*(void *)(this + 48))
  {
    uint64_t v1 = this;
    uint64_t v2 = (re::EvaluationContextManager *)(this + 88);
    re::EvaluationContextManager::updateBoundInputs((re::EvaluationContextManager *)(this + 88));
    uint64_t v3 = *(void *)(v1 + 48);
    if (!*(unsigned char *)(v1 + 2616)) {
      re::EvaluationContextManager::buildEvaluationContext(v2);
    }
    memset(v4, 0, sizeof(v4));
    re::EvaluationContextSlices::init((re::EvaluationContextSlices *)v4, (re::EvaluationContext *)(v1 + 2624));
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 16))(v3, v4);
    return re::EvaluationContextManager::updateBoundOutputs(v2);
  }
  return this;
}

uint64_t re::EvaluationContextManager::updateBoundInputs(re::EvaluationContextManager *this)
{
  re::EvaluationContextManager::updateBoundInputDataForType<int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<unsigned int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<float>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix3x3<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix4x4<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Quaternion<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Vector2<float>>(this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Vector3<float>>((uint64_t)this);
  return re::EvaluationContextManager::updateBoundInputDataForType<re::GenericSRT<float>>((uint64_t)this);
}

uint64_t re::EvaluationContextManager::updateBoundOutputs(re::EvaluationContextManager *this)
{
  re::EvaluationContextManager::updateBoundOutputDataForType<int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<unsigned int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<float>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix3x3<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix4x4<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Quaternion<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector2<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector3<float>>((uint64_t)this);
  return re::EvaluationContextManager::updateBoundOutputDataForType<re::GenericSRT<float>>((uint64_t)this);
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<int>(uint64_t result)
{
  if (*(void *)(result + 1104))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[138]; ++i)
    {
      unint64_t v3 = *(void *)(v1[140] + 8 * i);
      if (v1[93] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[95] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[318] <= v3) {
            goto LABEL_13;
          }
          *(_DWORD *)(v1[319] + 4 * v3) = *(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<unsigned int>(uint64_t result)
{
  if (*(void *)(result + 1144))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[143]; ++i)
    {
      unint64_t v3 = *(void *)(v1[145] + 8 * i);
      if (v1[98] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[100] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[321] <= v3) {
            goto LABEL_13;
          }
          *(_DWORD *)(v1[322] + 4 * v3) = *(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<float>(uint64_t result)
{
  if (*(void *)(result + 1184))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[148]; ++i)
    {
      unint64_t v3 = *(void *)(v1[150] + 8 * i);
      if (v1[103] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[105] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[324] <= v3) {
            goto LABEL_13;
          }
          *(_DWORD *)(v1[325] + 4 * v3) = *(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix3x3<float>>(uint64_t result)
{
  if (*(void *)(result + 1224))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[153]; ++i)
    {
      unint64_t v3 = *(void *)(v1[155] + 8 * i);
      if (v1[108] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[110] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[327] <= v3) {
            goto LABEL_13;
          }
          uint64_t v5 = (_OWORD *)(v1[328] + 48 * v3);
          long long v6 = *(_OWORD *)result;
          long long v7 = *(_OWORD *)(result + 32);
          v5[1] = *(_OWORD *)(result + 16);
          void v5[2] = v7;
          *uint64_t v5 = v6;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix4x4<float>>(uint64_t result)
{
  if (*(void *)(result + 1264))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[158]; ++i)
    {
      unint64_t v3 = *(void *)(v1[160] + 8 * i);
      if (v1[113] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[115] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[330] <= v3) {
            goto LABEL_13;
          }
          uint64_t v5 = (_OWORD *)(v1[331] + (v3 << 6));
          long long v6 = *(_OWORD *)result;
          long long v7 = *(_OWORD *)(result + 16);
          long long v8 = *(_OWORD *)(result + 48);
          void v5[2] = *(_OWORD *)(result + 32);
          v5[3] = v8;
          *uint64_t v5 = v6;
          v5[1] = v7;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Quaternion<float>>(uint64_t result)
{
  if (*(void *)(result + 1304))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[163]; ++i)
    {
      unint64_t v3 = *(void *)(v1[165] + 8 * i);
      if (v1[118] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[120] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[333] <= v3) {
            goto LABEL_13;
          }
          *(_OWORD *)(v1[334] + 16 * v3) = *(_OWORD *)result;
        }
      }
    }
  }
  return result;
}

void *re::EvaluationContextManager::updateBoundInputDataForType<re::Vector2<float>>(void *result)
{
  if (result[168])
  {
    uint64_t v1 = result;
    for (unint64_t i = 0; i < v1[168]; ++i)
    {
      unint64_t v3 = *(void *)(v1[170] + 8 * i);
      if (v1[123] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[125] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = (void *)re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = (void *)re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[336] <= v3) {
            goto LABEL_13;
          }
          *(void *)(v1[337] + 8 * v3) = *result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Vector3<float>>(uint64_t result)
{
  if (*(void *)(result + 1384))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[173]; ++i)
    {
      unint64_t v3 = *(void *)(v1[175] + 8 * i);
      if (v1[128] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[130] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[339] <= v3) {
            goto LABEL_13;
          }
          *(_OWORD *)(v1[340] + 16 * v3) = *(_OWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::GenericSRT<float>>(uint64_t result)
{
  if (*(void *)(result + 1424))
  {
    uint64_t v1 = (void *)result;
    for (unint64_t i = 0; i < v1[178]; ++i)
    {
      unint64_t v3 = *(void *)(v1[180] + 8 * i);
      if (v1[133] <= v3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v4 = (re::BindPoint *)(v1[135] + 56 * v3);
      if (*((unsigned char *)v4 + 48))
      {
        int32x2_t result = re::BindPoint::baseValueUntyped(v4);
        if (result) {
          goto LABEL_8;
        }
      }
      else
      {
        int32x2_t result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[342] <= v3) {
            goto LABEL_13;
          }
          uint64_t v5 = (_OWORD *)(v1[343] + 48 * v3);
          long long v6 = *(_OWORD *)result;
          long long v7 = *(_OWORD *)(result + 32);
          v5[1] = *(_OWORD *)(result + 16);
          void v5[2] = v7;
          *uint64_t v5 = v6;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<int>(uint64_t result)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2184))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[275] + 8 * v2);
      unint64_t v4 = v1[228];
      if (v4 <= v3)
      {
        *(void *)long long v16 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = "operator[]";
        __int16 v10 = 1024;
        int v11 = 797;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[230] + 56 * v3;
      *(void *)uint64_t v9 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[345];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[346];
        long long v8 = (_DWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *long long v8 = *(_DWORD *)(v7 + 4 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<int>((uint64_t)v9, (int *)(v1[346] + 4 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[273]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<unsigned int>(uint64_t result)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2224))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[280] + 8 * v2);
      unint64_t v4 = v1[233];
      if (v4 <= v3)
      {
        *(void *)long long v16 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = "operator[]";
        __int16 v10 = 1024;
        int v11 = 797;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[235] + 56 * v3;
      *(void *)uint64_t v9 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[348];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[349];
        long long v8 = (_DWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *long long v8 = *(_DWORD *)(v7 + 4 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<int>((uint64_t)v9, (int *)(v1[349] + 4 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[278]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<float>(uint64_t result)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2264))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[285] + 8 * v2);
      unint64_t v4 = v1[238];
      if (v4 <= v3)
      {
        *(void *)long long v16 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = "operator[]";
        __int16 v10 = 1024;
        int v11 = 797;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[240] + 56 * v3;
      *(void *)uint64_t v9 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[351];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[352];
        long long v8 = (_DWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *long long v8 = *(_DWORD *)(v7 + 4 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<float>((uint64_t)v9, (float *)(v1[352] + 4 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[283]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix3x3<float>>(uint64_t result)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2304))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[290] + 8 * v2);
      unint64_t v4 = v1[243];
      if (v4 <= v3)
      {
        *(void *)__int16 v19 = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v12 = 136315906;
        *(void *)&v12[4] = "operator[]";
        __int16 v13 = 1024;
        int v14 = 797;
        __int16 v15 = 2048;
        unint64_t v16 = v3;
        __int16 v17 = 2048;
        unint64_t v18 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v19 = 136315906;
        *(void *)&v19[4] = "operator[]";
        __int16 v20 = 1024;
        int v21 = 476;
        __int16 v22 = 2048;
        unint64_t v23 = v3;
        __int16 v24 = 2048;
        unint64_t v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v19 = 136315906;
        *(void *)&v19[4] = "operator[]";
        __int16 v20 = 1024;
        int v21 = 476;
        __int16 v22 = 2048;
        unint64_t v23 = v3;
        __int16 v24 = 2048;
        unint64_t v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[245] + 56 * v3;
      *(void *)__int16 v12 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v12[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[354];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[355];
        long long v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v12);
        if (v8)
        {
          uint64_t v9 = (long long *)(v7 + 48 * v3);
          long long v10 = *v9;
          long long v11 = v9[2];
          v8[1] = v9[1];
          v8[2] = v11;
          *long long v8 = v10;
          re::BindPoint::markAsWritten((uint64_t)v12);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<re::Matrix3x3<float>>((float32x4_t *)v12, (float32x4_t *)(v1[355] + 48 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      ++v2;
    }
    while (v2 < v1[288]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix4x4<float>>(uint64_t result)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2344))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[295] + 8 * v2);
      unint64_t v4 = v1[248];
      if (v4 <= v3)
      {
        *(void *)__int16 v20 = 0;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v13 = 136315906;
        *(void *)&v13[4] = "operator[]";
        __int16 v14 = 1024;
        int v15 = 797;
        __int16 v16 = 2048;
        unint64_t v17 = v3;
        __int16 v18 = 2048;
        unint64_t v19 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v20 = 136315906;
        *(void *)&v20[4] = "operator[]";
        __int16 v21 = 1024;
        int v22 = 476;
        __int16 v23 = 2048;
        unint64_t v24 = v3;
        __int16 v25 = 2048;
        unint64_t v26 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v20 = 136315906;
        *(void *)&v20[4] = "operator[]";
        __int16 v21 = 1024;
        int v22 = 476;
        __int16 v23 = 2048;
        unint64_t v24 = v3;
        __int16 v25 = 2048;
        unint64_t v26 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[250] + 56 * v3;
      *(void *)__int16 v13 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v13[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[357];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[358];
        long long v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v13);
        if (v8)
        {
          uint64_t v9 = (long long *)(v7 + (v3 << 6));
          long long v10 = *v9;
          long long v11 = v9[1];
          long long v12 = v9[3];
          v8[2] = v9[2];
          v8[3] = v12;
          *long long v8 = v10;
          v8[1] = v11;
          re::BindPoint::markAsWritten((uint64_t)v13);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<re::Matrix4x4<float>>((float32x4_t *)v13, (float32x4_t *)(v1[358] + (v3 << 6)));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
      ++v2;
    }
    while (v2 < v1[293]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Quaternion<float>>(uint64_t result)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2384))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[300] + 8 * v2);
      unint64_t v4 = v1[253];
      if (v4 <= v3)
      {
        *(void *)__int16 v16 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = "operator[]";
        __int16 v10 = 1024;
        int v11 = 797;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[255] + 56 * v3;
      *(void *)uint64_t v9 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[360];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[361];
        long long v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *long long v8 = *(_OWORD *)(v7 + 16 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<re::Vector4<float>>((re::BindPoint *)v9, (float32x4_t *)(v1[361] + 16 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[298]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector2<float>>(uint64_t result)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2424))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[305] + 8 * v2);
      unint64_t v4 = v1[258];
      if (v4 <= v3)
      {
        *(void *)__int16 v16 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = "operator[]";
        __int16 v10 = 1024;
        int v11 = 797;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[260] + 56 * v3;
      *(void *)uint64_t v9 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[363];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[364];
        long long v8 = (void *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *long long v8 = *(void *)(v7 + 8 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<re::Vector2<float>>((uint64_t)v9, (float32x2_t *)(v1[364] + 8 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[303]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector3<float>>(uint64_t result)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2464))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[310] + 8 * v2);
      unint64_t v4 = v1[263];
      if (v4 <= v3)
      {
        *(void *)__int16 v16 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v9 = 136315906;
        *(void *)&v9[4] = "operator[]";
        __int16 v10 = 1024;
        int v11 = 797;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v16 = 136315906;
        *(void *)&v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 476;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        __int16 v21 = 2048;
        unint64_t v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[265] + 56 * v3;
      *(void *)uint64_t v9 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[366];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[367];
        long long v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *long long v8 = *(_OWORD *)(v7 + 16 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<re::Vector3<float>>((re::BindPoint *)v9, (float32x4_t *)(v1[367] + 16 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[308]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::GenericSRT<float>>(uint64_t result)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 2504))
  {
    uint64_t v1 = (void *)result;
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(void *)(v1[315] + 8 * v2);
      unint64_t v4 = v1[268];
      if (v4 <= v3)
      {
        *(void *)__int16 v19 = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v12 = 136315906;
        *(void *)&v12[4] = "operator[]";
        __int16 v13 = 1024;
        int v14 = 797;
        __int16 v15 = 2048;
        unint64_t v16 = v3;
        __int16 v17 = 2048;
        unint64_t v18 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v19 = 136315906;
        *(void *)&v19[4] = "operator[]";
        __int16 v20 = 1024;
        int v21 = 476;
        __int16 v22 = 2048;
        unint64_t v23 = v3;
        __int16 v24 = 2048;
        unint64_t v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v19 = 136315906;
        *(void *)&v19[4] = "operator[]";
        __int16 v20 = 1024;
        int v21 = 476;
        __int16 v22 = 2048;
        unint64_t v23 = v3;
        __int16 v24 = 2048;
        unint64_t v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = v1[270] + 56 * v3;
      *(void *)__int16 v12 = *(void *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v12[8], (uint64_t *)(v5 + 8));
      int v6 = *(unsigned __int8 *)(v5 + 48);
      unint64_t v4 = v1[369];
      if (v6)
      {
        if (v4 <= v3) {
          goto LABEL_13;
        }
        uint64_t v7 = v1[370];
        long long v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v12);
        if (v8)
        {
          uint64_t v9 = (long long *)(v7 + 48 * v3);
          long long v10 = *v9;
          long long v11 = v9[2];
          v8[1] = v9[1];
          v8[2] = v11;
          *long long v8 = v10;
          re::BindPoint::markAsWritten((uint64_t)v12);
        }
      }
      else
      {
        if (v4 <= v3) {
          goto LABEL_14;
        }
        re::BindPoint::setValue<re::GenericSRT<float>>((float32x4_t *)v12, (float32x4_t *)(v1[370] + 48 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      int32x2_t result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      ++v2;
    }
    while (v2 < v1[313]);
  }
  return result;
}

uint64_t re::BindPoint::setValue<int>(uint64_t result, int *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    unint64_t v4 = (re::BindPoint *)result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        unint64_t v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 797;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        __int16 v23 = 2048;
        uint64_t v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v11 = (void *)(*((void *)v4 + 5) + v8);
      if (!*v11) {
        long long v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      int v14 = (_DWORD *)v13;
      int32x2_t result = re::BindPoint::isOverridden(v4);
      int v15 = *a2;
      if (!result || *v14 != v15)
      {
        *int v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      int32x2_t result = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result && *(_DWORD *)result != *a2)
      {
        *(_DWORD *)int32x2_t result = *a2;
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

float32x4_t *re::BindPoint::setValue<re::Matrix3x3<float>>(float32x4_t *result, float32x4_t *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = result[1].i64[1];
  if (v2)
  {
    unint64_t v4 = (uint64_t *)result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = v4[3];
    do
    {
      if (v10 == v9)
      {
        v21[1] = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        __int16 v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 797;
        __int16 v26 = 2048;
        uint64_t v27 = v10;
        __int16 v28 = 2048;
        uint64_t v29 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v11 = (void *)(v4[5] + v8);
      if (!*v11) {
        long long v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      int v14 = (float32x4_t *)v13;
      int32x2_t result = (float32x4_t *)re::BindPoint::isOverridden((re::BindPoint *)v4);
      if (!result
        || (uint32x4_t v15 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v14[1], a2[1]), (int8x16_t)vceqq_f32(*v14, *a2)), (int8x16_t)vceqq_f32(v14[2], a2[2])), v15.i32[3] = v15.i32[2], (vminvq_u32(v15) & 0x80000000) == 0))
      {
        float32x4_t v16 = *a2;
        float32x4_t v17 = a2[2];
        v14[1] = a2[1];
        v14[2] = v17;
        *int v14 = v16;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      int32x2_t result = (float32x4_t *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        uint32x4_t v18 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(result[1], a2[1]), (int8x16_t)vceqq_f32(*result, *a2)), (int8x16_t)vceqq_f32(result[2], a2[2]));
        v18.i32[3] = v18.i32[2];
        if ((vminvq_u32(v18) & 0x80000000) == 0)
        {
          float32x4_t v19 = *a2;
          float32x4_t v20 = a2[2];
          result[1] = a2[1];
          result[2] = v20;
          *int32x2_t result = v19;
          return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

float32x4_t *re::BindPoint::setValue<re::Matrix4x4<float>>(float32x4_t *result, float32x4_t *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = result[1].i64[1];
  if (v2)
  {
    unint64_t v4 = (uint64_t *)result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = v4[3];
    do
    {
      if (v10 == v9)
      {
        v21[1] = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        __int16 v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 797;
        __int16 v26 = 2048;
        uint64_t v27 = v10;
        __int16 v28 = 2048;
        uint64_t v29 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v11 = (void *)(v4[5] + v8);
      if (!*v11) {
        long long v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      int v14 = (float32x4_t *)v13;
      int32x2_t result = (float32x4_t *)re::BindPoint::isOverridden((re::BindPoint *)v4);
      if (!result
        || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v14[1], a2[1]), (int8x16_t)vceqq_f32(*v14, *a2)), vandq_s8((int8x16_t)vceqq_f32(v14[2], a2[2]), (int8x16_t)vceqq_f32(v14[3], a2[3])))) & 0x80000000) == 0)
      {
        float32x4_t v15 = *a2;
        float32x4_t v16 = a2[1];
        float32x4_t v17 = a2[3];
        v14[2] = a2[2];
        v14[3] = v17;
        *int v14 = v15;
        v14[1] = v16;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      int32x2_t result = (float32x4_t *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(result[1], a2[1]), (int8x16_t)vceqq_f32(*result, *a2)), vandq_s8((int8x16_t)vceqq_f32(result[2], a2[2]), (int8x16_t)vceqq_f32(result[3], a2[3])))) & 0x80000000) == 0)
      {
        float32x4_t v18 = *a2;
        float32x4_t v19 = a2[1];
        float32x4_t v20 = a2[3];
        result[2] = a2[2];
        result[3] = v20;
        *int32x2_t result = v18;
        result[1] = v19;
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

uint64_t std::function<void ()(re::EvaluationModelBase *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  unint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::Result<re::EvaluationRigState,re::DetailedError>::~Result(v4);
}

uint64_t re::Result<re::EvaluationRigState,re::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(a1 + 96));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 72));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 48));
    std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(a1 + 8));
  }
  else
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  }
  return a1;
}

void std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::~__func()
{
}

void *std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::__clone()
{
  int32x2_t result = operator new(0x10uLL);
  *int32x2_t result = &unk_26E6D4760;
  return result;
}

void std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D4760;
}

re *std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::operator()(re *result, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    unint64_t v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::target_type()
{
}

uint64_t *std::unique_ptr<re::EvaluationModelBase,std::function<void ()(re::EvaluationModelBase*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::EvaluationModelBase *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::EvaluationModelBase *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void *std::__function::__value_func<void ()(re::EvaluationModelBase *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void re::IOSurfaceWrapper::SharedEvent::createSharedEvent(void *a1@<X8>)
{
  id v3 = objc_alloc_init(MEMORY[0x263F0ED10]);
  *a1 = v3;
}

void re::IOSurfaceWrapper::SharedEventListener::createSharedEventListenerWithQueue(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = (id)[objc_alloc(MEMORY[0x263F0ED18]) initWithDispatchQueue:*a1];
  *a2 = v3;
}

__CFString *re::figAlternateGetPackingLoggingStringForFigTagCollection(re *this, const OpaqueCMTagCollection *a2)
{
  if (!this) {
    return @"UNKNOWN";
  }
  if (!MEMORY[0x263F00DF8])
  {
    if (!MEMORY[0x263F00E00]) {
      return 0;
    }
    goto LABEL_11;
  }
  int TagsWithCategory = FigTagCollectionGetTagsWithCategory();
  if (TagsWithCategory) {
    int32x2_t result = @"UNKNOWN";
  }
  else {
    int32x2_t result = 0;
  }
  if (!TagsWithCategory && MEMORY[0x263F00E00])
  {
LABEL_11:
    if (FigTagEqualToTag())
    {
      return @"SIDE";
    }
    else if (FigTagEqualToTag())
    {
      return @"OVER";
    }
    else if (FigTagEqualToTag())
    {
      return @"NONE";
    }
    else
    {
      return @"UNKNOWN";
    }
  }
  return result;
}

__CFString *re::figAlternateGetChannelsLoggingStringForFigTagCollection(re *this, const OpaqueCMTagCollection *a2)
{
  if (!this) {
    return @"UNKNOWN";
  }
  if (!MEMORY[0x263F00DF8])
  {
    if (!MEMORY[0x263F00E00]) {
      return 0;
    }
    goto LABEL_11;
  }
  int TagsWithCategory = FigTagCollectionGetTagsWithCategory();
  if (TagsWithCategory) {
    int32x2_t result = @"UNKNOWN";
  }
  else {
    int32x2_t result = 0;
  }
  if (!TagsWithCategory && MEMORY[0x263F00E00])
  {
LABEL_11:
    if (FigTagEqualToTag())
    {
      return @"LEFT";
    }
    else if (FigTagEqualToTag())
    {
      return @"RIGHT";
    }
    else if (FigTagEqualToTag())
    {
      return @"STEREO";
    }
    else if (FigTagEqualToTag())
    {
      return @"MONO";
    }
    else
    {
      return @"UNKNOWN";
    }
  }
  return result;
}

__CFString *re::figAlternateProjectionLoggingStringForFigTagCollection(re *this, const OpaqueCMTagCollection *a2)
{
  if (!this) {
    return @"UNKNOWN";
  }
  if (!MEMORY[0x263F00DF8])
  {
    if (!MEMORY[0x263F00E00]) {
      return 0;
    }
    goto LABEL_11;
  }
  int TagsWithCategory = FigTagCollectionGetTagsWithCategory();
  if (TagsWithCategory) {
    int32x2_t result = @"UNKNOWN";
  }
  else {
    int32x2_t result = 0;
  }
  if (!TagsWithCategory && MEMORY[0x263F00E00])
  {
LABEL_11:
    if (FigTagEqualToTag())
    {
      return @"RECT";
    }
    else if (FigTagEqualToTag())
    {
      return @"FISH";
    }
    else
    {
      return @"UNKNOWN";
    }
  }
  return result;
}

void re::getDataPreferenceArray(_anonymous_namespace_ *a1, int a2)
{
  if (a2 == 1)
  {
  }
  else
  {
  }
}

void anonymous namespace'::addImmersiveDataChannelGroups(_anonymous_namespace_ *a1, int a2)
{
  if (a2)
  {
  }
  if ((a2 & 1) == 0)
  {
  }
}

void anonymous namespace'::addMonoscopicDataChannelGroups(_anonymous_namespace_ *a1)
{
}

void anonymous namespace'::addStereoscopicDataChannelGroups(_anonymous_namespace_ *a1)
{
}

uint64_t re::setVideoDataPreferences(re *a1, int a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  unint64_t v4 = *re::videoLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)a1;
    int v6 = "Unknown";
    if (a2 == 1) {
      int v6 = "Mono";
    }
    if (a2 == 2) {
      int v6 = "Stereo";
    }
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v6;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Setting Fig Receiver preferences with FVR pointer %p: %{public}s", buf, 0x16u);
  }
  uint64_t v62 = a1;
  __src = 0;
  memset(buf, 0, sizeof(buf));
  int v75 = 0;
  re::DynamicArray<float *>::setCapacity(buf, 0x10uLL);
  re::getDataPreferenceArray((_anonymous_namespace_ *)buf, a2);
  char v7 = 1;
  uint64_t v73 = 1;
  uint64_t v8 = (_OWORD *)MEMORY[0x263F01608];
  uint64_t v9 = (_OWORD *)MEMORY[0x263F01600];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    char v10 = v7;
    uint64_t v70 = 0;
    long long v11 = (re *)FigDataChannelGroupCreateForUseCase();
    int v12 = (int)v11;
    if (v11)
    {
      int v22 = *re::videoLogObjects(v11);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v77 = 67109120;
        *(_DWORD *)&v77[4] = v12;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Failed to create video data channel group (error: %d)", v77, 8u);
      }
      __int16 v23 = (CFTypeRef *)__src;
      if (*(void *)&buf[16])
      {
        unint64_t v24 = 0;
        uint64_t v25 = 8 * *(void *)&buf[16];
        do
        {
          CFTypeRef v26 = v23[v24 / 8];
          if (v26) {
            CFRelease(v26);
          }
          v24 += 8;
        }
        while (v25 != v24);
      }
      goto LABEL_75;
    }
    *(_OWORD *)long long v77 = *v8;
    *(_OWORD *)&v77[16] = *v9;
    uint64_t v13 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
    int v14 = (int)v13;
    if (v13)
    {
      uint64_t v27 = *re::videoLogObjects(v13);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v77 = 67109120;
        *(_DWORD *)&v77[4] = v14;
        _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "Failed to add a FigTag collection to channel group (error: %d).", v77, 8u);
      }
      __int16 v23 = (CFTypeRef *)__src;
      if (*(void *)&buf[16])
      {
        unint64_t v28 = 0;
        uint64_t v29 = 8 * *(void *)&buf[16];
        do
        {
          CFTypeRef v30 = v23[v28 / 8];
          if (v30) {
            CFRelease(v30);
          }
          v28 += 8;
        }
        while (v29 != v28);
      }
      goto LABEL_75;
    }
    re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)buf, &v70);
    *(void *)long long v77 = 0;
    float32x4_t v15 = (re *)FigDataChannelGroupCreateForUseCase();
    int v16 = (int)v15;
    if (v15)
    {
      long long v31 = *re::videoLogObjects(v15);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v71 = 67109120;
        int v72 = v16;
        _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "Failed to create video data channel group (error: %d)", v71, 8u);
      }
      __int16 v23 = (CFTypeRef *)__src;
      if (*(void *)&buf[16])
      {
        uint64_t v32 = 8 * *(void *)&buf[16];
        long long v33 = (CFTypeRef *)__src;
        do
        {
          if (*v33) {
            CFRelease(*v33);
          }
          ++v33;
          v32 -= 8;
        }
        while (v32);
      }
      goto LABEL_75;
    }
    float32x4_t v17 = re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)buf, v77);
    char v7 = 0;
  }
  while ((v10 & 1) != 0);
  float32x4_t v18 = *re::videoLogObjects(v17);
  float32x4_t v19 = (re *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    uint64_t v20 = *(void *)a1;
    *(_DWORD *)long long v77 = 134217984;
    *(void *)&v77[4] = v20;
    _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Setting Fig Receiver Preferences Groups Final List with FVR pointer %p:", v77, 0xCu);
  }
  __dst = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v65 = 0;
  int v68 = 0;
  if (*(void *)buf)
  {
    unint64_t v21 = *(void *)&buf[16];
    uint64_t v65 = *(void *)buf;
    float32x4_t v19 = (re *)re::DynamicArray<float *>::setCapacity(&v65, *(unint64_t *)&buf[16]);
    ++v68;
    if (v21 >= v67)
    {
      re::DynamicArray<float *>::setCapacity(&v65, v21);
      unint64_t v34 = v67;
      uint64_t v35 = (char *)__dst;
      uint64_t v36 = (char *)__src;
      if (v67) {
        memmove(__dst, __src, 8 * v67);
      }
      float32x4_t v19 = (re *)memcpy(&v35[8 * v34], &v36[8 * v34], 8 * v21 - 8 * v34);
    }
    else if (v21)
    {
      float32x4_t v19 = (re *)memmove(__dst, __src, 8 * v21);
    }
    unint64_t v67 = v21;
  }
  else
  {
    unint64_t v21 = 0;
  }
  int v37 = *re::videoLogObjects(v19);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v77 = 0;
    _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "Setting the FigVideoPreferences Tag Collection Currently:", v77, 2u);
  }
  uint64_t v61 = __dst;
  if (v21)
  {
    long long v38 = (char *)__dst;
    v63 = (char *)__dst + 8 * v21;
    do
    {
      for (uint64_t i = 0; FigDataChannelGroupGetCountOfDataChannels() > i; ++i)
      {
        DataChannelByIndex = (re *)FigDataChannelGroupGetDataChannelByIndex();
        PackingLoggingStringForFigTagCollection = re::figAlternateGetPackingLoggingStringForFigTagCollection(DataChannelByIndex, v41);
        ChannelsLoggingStringForFigTagCollection = re::figAlternateGetChannelsLoggingStringForFigTagCollection(DataChannelByIndex, v43);
        unint64_t v46 = re::figAlternateProjectionLoggingStringForFigTagCollection(DataChannelByIndex, v45);
        uint64_t v47 = *re::videoLogObjects((re *)v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v77 = 138412802;
          *(void *)&v77[4] = PackingLoggingStringForFigTagCollection;
          *(_WORD *)&v77[12] = 2112;
          *(void *)&v77[14] = ChannelsLoggingStringForFigTagCollection;
          *(_WORD *)&v77[22] = 2112;
          *(void *)&v77[24] = v46;
          _os_log_impl(&dword_233120000, v47, OS_LOG_TYPE_DEFAULT, "                                         Tag Collection :%@/%@/%@", v77, 0x20u);
        }
      }
      v38 += 8;
    }
    while (v38 != v63);
  }
  if (v65)
  {
    if (v61) {
      (*(void (**)(void))(*(void *)v65 + 40))();
    }
    __dst = 0;
    uint64_t v66 = 0;
    unint64_t v67 = 0;
    uint64_t v65 = 0;
    ++v68;
  }
  __int16 v23 = (CFTypeRef *)__src;
  uint64_t v48 = *(void *)&buf[16];
  CFArrayRef v49 = CFArrayCreate(allocator, (const void **)__src, *(CFIndex *)&buf[16], MEMORY[0x263EFFF70]);
  uint64_t v50 = *(void *)v62;
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v53 = *(uint64_t (**)(uint64_t, CFArrayRef, void))(v52 + 72);
  if (v53)
  {
    int v54 = v53(v50, v49, 0);
    if (!v48) {
      goto LABEL_72;
    }
  }
  else
  {
    int v54 = -12782;
    if (!v48) {
      goto LABEL_72;
    }
  }
  uint64_t v55 = 8 * v48;
  uint64_t v56 = v23;
  do
  {
    if (*v56) {
      CFRelease(*v56);
    }
    ++v56;
    v55 -= 8;
  }
  while (v55);
LABEL_72:
  CFRelease(v49);
  if (v54)
  {
    v58 = *re::videoLogObjects(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v77 = 67109120;
      *(_DWORD *)&v77[4] = v54;
      _os_log_error_impl(&dword_233120000, v58, OS_LOG_TYPE_ERROR, "Failed to set preferred video data channels (error: %d)", v77, 8u);
    }
LABEL_75:
    uint64_t v59 = 0;
    goto LABEL_76;
  }
  uint64_t v59 = 1;
LABEL_76:
  if (*(void *)buf && v23) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  return v59;
}

void sub_2334951BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a23)
  {
    if (a27) {
      (*(void (**)(void))(*(void *)a23 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL re::createVideoReceiver(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  CFTypeRef v38 = 0;
  uint64_t v8 = (re *)MEMORY[0x237DBAAA0](*MEMORY[0x263EFFB08], 0, &v38);
  int v9 = (int)v8;
  if (v8)
  {
    char v10 = *re::videoLogObjects(v8);
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 67109120;
    LODWORD(v40) = v9;
    int v12 = "Failed to create video receiver (error: %d)";
    uint64_t v13 = v10;
    uint32_t v14 = 8;
    goto LABEL_4;
  }
  CFTypeRef v15 = v38;
  if (v38)
  {
    if (*a1) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
    }
    *a1 = v15;
    CFRetain(v15);
    CFRelease(v38);
    float32x4_t v17 = *re::videoLogObjects(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      float32x4_t v18 = *a1;
      *(_DWORD *)buf = 134217984;
      uint64_t v40 = v18;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Creating Fig Receiver %p", buf, 0xCu);
    }
    if (!a2) {
      goto LABEL_18;
    }
    float32x4_t v19 = *a1;
    v37[0] = MEMORY[0x263EF8330];
    v37[1] = 3221225472;
    v37[2] = ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke;
    v37[3] = &__block_descriptor_56_e96_v68__0__OpaqueFigVideoReceiver__8___qiIq_16I40____CFArray__44____CFDictionary__52____CFArray__60l;
    v37[4] = a4;
    v37[5] = a1;
    v37[6] = a2;
    uint64_t v20 = v37;
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v24 = *(uint64_t (**)(const void *, void *))(v22 + 184);
    if (v24)
    {
      int v25 = v24(v19, v20);

      if (!v25)
      {
LABEL_18:
        if (!a3) {
          return 1;
        }
        uint64_t v27 = *a1;
        v36[0] = MEMORY[0x263EF8330];
        v36[1] = 3221225472;
        uint64_t v36[2] = ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke_59;
        v36[3] = &__block_descriptor_56_e70_v28__0__OpaqueFigVideoReceiver__8__OpaqueFigDataChannelResource__16i24l;
        v36[4] = a4;
        v36[5] = a1;
        v36[6] = a3;
        unint64_t v28 = v36;
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v32 = *(uint64_t (**)(const void *, void *))(v30 + 176);
        if (v32)
        {
          int v33 = v32(v27, v28);

          if (!v33) {
            return 1;
          }
        }
        else
        {

          int v33 = -12782;
        }
        uint64_t v35 = *re::videoLogObjects(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v40) = v33;
          _os_log_error_impl(&dword_233120000, v35, OS_LOG_TYPE_ERROR, "Failed to register change callback handler for resources (error: %d)", buf, 8u);
        }
        if (*a1) {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
        }
        goto LABEL_35;
      }
    }
    else
    {

      int v25 = -12782;
    }
    long long v31 = *re::videoLogObjects(v26);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v40) = v25;
      _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "Failed to register change callback handler for video data channels and dependent resources (error: %d)", buf, 8u);
    }
    if (*a1) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
    }
LABEL_35:
    BOOL result = 0;
    *a1 = 0;
    return result;
  }
  __int16 v23 = *re::videoLogObjects(v8);
  BOOL result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    int v12 = "Failed to create video receiver";
    uint64_t v13 = v23;
    uint32_t v14 = 2;
LABEL_4:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    return 0;
  }
  return result;
}

void sub_2334956BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke(uint64_t result, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 32);
  if (v7)
  {
    if (**(void **)(result + 40) == a2)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 48);
      long long v9 = *a3;
      uint64_t v10 = *((void *)a3 + 2);
      return v8(a2, &v9, a4, a5, a6, a7, v7);
    }
  }
  return result;
}

uint64_t ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke_59(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (v3)
  {
    if (**(void **)(result + 40) == a2) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 48))(a2, a3, v3);
    }
  }
  return result;
}

void re::destroyVideoReceiver(const void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(const void *, void))(v4 + 176);
    if (v5) {
      v5(v1, 0);
    }
    int v6 = *a1;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v9 = *(void (**)(const void *, void))(v8 + 184);
    if (v9) {
      v9(v6, 0);
    }
    if (*a1) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
    }
    *a1 = 0;
  }
}

__n128 re::retrievePixelBuffersWithVideoReceiver(uint64_t *a1, uint64_t *a2, CMTime *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v5 = (__n128 *)MEMORY[0x263F01090];
  if (!*a2) {
    goto LABEL_24;
  }
  long long v8 = *MEMORY[0x263F01090];
  *(void *)(a4 + 16) = *(void *)(MEMORY[0x263F01090] + 16);
  *(_OWORD *)a4 = v8;
  uint64_t v9 = *a2;
  long long v36 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t v38 = 0;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v13 = *(void *)(VTable + 16);
  long long v11 = (re *)(VTable + 16);
  uint64_t v12 = v13;
  if (v13) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, uint8_t *, void, uint64_t *, uint64_t))(v14 + 16);
  if (!v15)
  {
    int v17 = -12782;
LABEL_22:
    int v33 = *re::videoLogObjects(v11);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v17;
      _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Failed to sample image from video receiver (error: %d)", buf, 8u);
    }
    goto LABEL_24;
  }
  *(_OWORD *)buf = v36;
  CMTimeEpoch v40 = epoch;
  long long v11 = (re *)v15(v9, buf, 0, &v38, a4);
  int v17 = (int)v11;
  if (v11 == -15575)
  {
LABEL_24:
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    a1[4] = 0;
    *((_DWORD *)a1 + 10) = -1;
    __n128 result = *v5;
    *(__n128 *)((char *)a1 + 44) = *v5;
    *(uint64_t *)((char *)a1 + 60) = v5[1].n128_i64[0];
    return result;
  }
  if (v11) {
    goto LABEL_22;
  }
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = -1;
  *(__n128 *)((char *)a1 + 44) = *v5;
  *(uint64_t *)((char *)a1 + 60) = v5[1].n128_i64[0];
  float32x4_t v18 = (re::VideoDefaults *)re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(a1, v16);
  if (v18)
  {
    uint64_t v19 = *a1;
    a1[*a1 + 2] = v38;
    *a1 = v19 + 1;
    ++*((_DWORD *)a1 + 2);
  }
  *(_OWORD *)((char *)a1 + 44) = *(_OWORD *)a4;
  *(uint64_t *)((char *)a1 + 60) = *(void *)(a4 + 16);
  uint64_t v20 = (re *)re::VideoDefaults::logEnabled(v18);
  if (v20)
  {
    uint64_t v22 = *re::videoLogObjects(v20);
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "------------------------------------------", buf, 2u);
    }
    unint64_t v24 = (id)*re::videoLogObjects((re *)v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      CMTime time = *a3;
      Float64 Seconds = CMTimeGetSeconds(&time);
      *(_DWORD *)buf = 134217984;
      *(Float64 *)&uint8_t buf[4] = Seconds;
      _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "Sample Host Time: %f", buf, 0xCu);
    }

    uint64_t v27 = (id)*re::videoLogObjects(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      CMTime v34 = *(CMTime *)a4;
      Float64 v28 = CMTimeGetSeconds(&v34);
      *(_DWORD *)buf = 134217984;
      *(Float64 *)&uint8_t buf[4] = v28;
      _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "Sample Presentation Time: %f", buf, 0xCu);
    }

    uint64_t v30 = *re::videoLogObjects(v29);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v31)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Sample Format: Single-channel legacy", buf, 2u);
    }
    uint64_t v32 = *re::videoLogObjects((re *)v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v32, OS_LOG_TYPE_DEFAULT, "------------------------------------------", buf, 2u);
    }
  }
  return result;
}

void sub_233495C94(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = 0;
  ++*(_DWORD *)(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t populatePresentationGroup(long long *a1, NSObject *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9, void *a10, unsigned __int8 a11)
{
  v370[2] = *(id *)MEMORY[0x263EF8340];
  float32x4_t v18 = a10;
  v295 = v18;
  if (!a2->isa)
  {
    v42 = *re::videoLogObjects(v18);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      unint64_t v43 = 1;
      goto LABEL_460;
    }
    *(_WORD *)buf = 0;
    v133 = "Could no populate presentation group. Legacy buffer group has no pixel buffers.";
LABEL_190:
    _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, v133, buf, 2u);
    goto LABEL_20;
  }
  re::deinitVideoPresentationGroup(a8);
  unint64_t v298 = a4;
  long long v19 = *a1;
  *(void *)(a8 + 16) = *((void *)a1 + 2);
  *(_OWORD *)a8 = v19;
  *(_DWORD *)(a8 + 676) = a2[5].isa;
  *(_OWORD *)(a8 + 608) = 0u;
  v300 = (re::VideoProcessor *)(a3 + 7048);
  *(unsigned char *)(a8 + 480) = *(unsigned char *)(a3 + 7048);
  *(unsigned char *)(a8 + 888) = 0;
  if (!a2->isa)
  {
    unint64_t v351 = 0;
    int v352 = 0;
    goto LABEL_22;
  }
  Class v20 = 0;
  a4 = a8 + 608;
  do
  {
    IOSurface = CVPixelBufferGetIOSurface(a2[(void)v20 + 2].isa);
    if (!IOSurface)
    {
      v42 = *re::videoLogObjects(0);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_WORD *)buf = 0;
      v133 = "Sampled pixel buffer does not contain a surface.";
      goto LABEL_190;
    }
    IOSurfaceID ID = IOSurfaceGetID(IOSurface);
    unint64_t v24 = *(void *)(a8 + 24);
    if (v24 >= 2)
    {
      re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
      _os_crash();
      __break(1u);
      goto LABEL_526;
    }
    *(_DWORD *)(a8 + 36 + 4 * v24) = ID;
    *(void *)(a8 + 24) = v24 + 1;
    ++*(_DWORD *)(a8 + 32);
    Class v20 = (Class)((char *)v20 + 1);
    Class isa = a2->isa;
  }
  while (v20 < a2->isa);
  unint64_t v351 = 0;
  int v352 = 0;
  if (!isa)
  {
LABEL_22:
    v296 = (id *)(a5 + 184);
    id v294 = *(id *)(a5 + 184);
    unint64_t v38 = 0;
    CMTimeEpoch v40 = (unint64_t *)(a8 + 688);
    unint64_t v41 = *(void *)(a8 + 688);
    goto LABEL_23;
  }
  CFTypeRef v26 = 0;
  unint64_t v11 = (unint64_t)texture;
  do
  {
    uint64_t v27 = &a2[(void)v26];
    Float64 v28 = v27[2].isa;
    *(void *)buf = v28;
    CVPixelBufferRetain(v28);
    re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(v351, v29);
    unint64_t v31 = v351;
    texture[v351] = v28;
    unint64_t v351 = v31 + 1;
    ++v352;
    if (a2->isa <= v26)
    {
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v26, a2->isa);
      _os_crash();
      __break(1u);
LABEL_464:
      re::internal::assertLog((re::internal *)6, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v26, v35);
      _os_crash();
      __break(1u);
LABEL_465:
      re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v68);
      _os_crash();
      __break(1u);
LABEL_466:
      re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v66);
      _os_crash();
      __break(1u);
LABEL_467:
      re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v69);
      _os_crash();
      __break(1u);
      goto LABEL_468;
    }
    size_t Width = CVPixelBufferGetWidth(v27[2].isa);
    size_t v34 = *(void *)a4;
    if (*(void *)a4 <= Width) {
      size_t v34 = Width;
    }
    *(void *)a4 = v34;
    Class v35 = a2->isa;
    if (a2->isa <= v26) {
      goto LABEL_464;
    }
    size_t Height = CVPixelBufferGetHeight(v27[2].isa);
    size_t v37 = *(void *)(a8 + 616);
    if (v37 <= Height) {
      size_t v37 = Height;
    }
    *(void *)(a8 + 616) = v37;
    CFTypeRef v26 = (objc_class *)((char *)v26 + 1);
  }
  while (v26 < a2->isa);
  unint64_t v38 = v351;
  v296 = (id *)(a5 + 184);
  id v294 = *(id *)(a5 + 184);
  CMTimeEpoch v40 = (unint64_t *)(a8 + 688);
  unint64_t v41 = *(void *)(a8 + 688);
  if (v351 > v41)
  {
    if (v351 < 3)
    {
      bzero(&v40[v41 + 2], 8 * (v351 - v41));
      goto LABEL_28;
    }
LABEL_528:
    re::internal::assertLog((re::internal *)4, v39, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    _os_crash();
    __break(1u);
LABEL_529:
    re::internal::assertLog((re::internal *)4, v224, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    _os_crash();
    __break(1u);
LABEL_530:
    re::internal::assertLog((re::internal *)4, v53, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    _os_crash();
    __break(1u);
LABEL_531:
    re::internal::assertLog((re::internal *)4, v53, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
LABEL_23:
  if (v41 > v38)
  {
    a4 = a8 + 704;
    unint64_t v11 = 8 * v38;
    unint64_t v44 = v38;
    do
    {
      if (*(void *)(a4 + 8 * v44))
      {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a4 + v11));
        unint64_t v41 = *v40;
      }
      *(void *)(a4 + 8 * v44++) = 0;
      v11 += 8;
    }
    while (v44 < v41);
LABEL_28:
    *(void *)(a8 + 688) = v38;
    ++*(_DWORD *)(a8 + 696);
  }
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(a8 + 768);
  *(unsigned char *)(a8 + 674) = 0;
  unint64_t v45 = v351;
  if (v351 < 2) {
    goto LABEL_35;
  }
  a4 = 0;
  unint64_t v11 = 855041;
  unint64_t v46 = texture;
  do
  {
    if ((re::VideoPixelBufferBase::colorTags(v46) & 0xFFFFFF) == 0xD0C01) {
      *(unsigned char *)(a8 + 674) = 2;
    }
    ++a4;
    unint64_t v45 = v351;
    ++v46;
  }
  while (a4 < v351);
  int v47 = *(unsigned __int8 *)(a8 + 674);
  if (!*(unsigned char *)(a8 + 674))
  {
LABEL_35:
    if (v45 == 1)
    {
      *(void *)buf = 0;
      re::VideoObject<re::VideoTextureBase>::setRef((int)buf, (__CVBuffer **)buf, texture[0]);
      if (*(void *)buf)
      {
        if ((re::VideoPixelBufferBase::colorTags((__CVBuffer **)buf) & 0xFFFFFF) == 0xD0C01) {
          *(unsigned char *)(a8 + 888) = 1;
        }
        if (*(void *)buf) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)buf);
        }
      }
      int v47 = *(unsigned __int8 *)(a8 + 674);
    }
    else
    {
      int v47 = 0;
    }
  }
  v309 = (unint64_t *)(a8 + 768);
  unint64_t v348 = 0;
  int v349 = 0;
  unint64_t v345 = 0;
  int v346 = 0;
  unint64_t v340 = 0;
  int v341 = 0;
  unint64_t v337 = 0;
  int v338 = 0;
  id v334 = 0;
  int v335 = 0;
  unint64_t v330 = 0;
  int v331 = 0;
  int v48 = 1;
  *(void *)(a8 + 880) = 1;
  if (v47 == 2 || v47 == 1)
  {
    int v48 = 0;
  }
  else if (!v47)
  {
    unint64_t v11 = v351;
    if (v351)
    {
      unint64_t v49 = 0;
      int v48 = 1;
      a4 = (unint64_t)&v351;
      do
      {
        PixelFormatType = texture[v49];
        if (PixelFormatType)
        {
          PixelFormatType = (__CVBuffer *)CVPixelBufferGetPixelFormatType(PixelFormatType);
          unint64_t v11 = v351;
        }
        v48 &= re::CoreVideoUtils::pixelFormatIsTriPlanar(PixelFormatType) ^ 1;
        ++v49;
      }
      while (v49 < v11);
    }
    else
    {
      int v48 = 1;
    }
  }
  memset(&v329, 0, sizeof(v329));
  CMTimeMakeWithSeconds(&v329, *(Float64 *)(a9 + 8), 1000);
  memset(&v328, 0, sizeof(v328));
  CMTimeMakeWithSeconds(&v328, *(Float64 *)(a9 + 24), 1000);
  if (!v351)
  {
LABEL_514:
    re::internal::assertLog((re::internal *)6, (uint64_t)v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
LABEL_515:
    re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v137);
    _os_crash();
    __break(1u);
    goto LABEL_516;
  }
  unint64_t IsHDR = re::CoreVideoUtils::pixelBufferIsHDR(texture[0], v51);
  location = (id *)a6;
  int v307 = v48;
  if ((IsHDR & 1) == 0)
  {
    unint64_t v66 = v351;
    if (v351)
    {
      unint64_t v11 = 0;
      Float64 v28 = (__CVBuffer *)(a3 + 2128);
      uint64_t v67 = 704;
      a6 = (uint64_t)&v351;
      do
      {
        unint64_t v68 = *v40;
        if (*v40 <= v11) {
          goto LABEL_465;
        }
        a4 = a8 + v67;
        if (*(void *)(a8 + v67))
        {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a8 + v67));
          unint64_t v66 = v351;
        }
        *(void *)a4 = 0;
        if (v66 <= v11) {
          goto LABEL_466;
        }
        unint64_t v69 = *v40;
        if (*v40 <= v11) {
          goto LABEL_467;
        }
        unint64_t IsHDR = re::VideoColorManager::computeTransform((uint64_t)v28, (__CVBuffer **)((char *)&v326 + v67), *a7, (const void **)(a8 + v67));
        ++v11;
        unint64_t v66 = v351;
        v67 += 8;
      }
      while (v11 < v351);
      if (*(void *)(a8 + 880) > 1uLL)
      {
        if (v351)
        {
          unint64_t v70 = 0;
          a4 = 0;
          v71 = texture;
          do
          {
            v70 |= (unint64_t)re::VideoPixelBufferBase::protectionOptions(v71);
            ++a4;
            unint64_t v72 = v351;
            ++v71;
          }
          while (a4 < v351);
          goto LABEL_91;
        }
LABEL_90:
        unint64_t v70 = 0;
        unint64_t v72 = 0;
LABEL_91:
        unint64_t v304 = v70;
        v312 = (unint64_t *)(a8 + 48);
        re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize(a8 + 48, v72);
        re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::resize((uint64_t)&v340, v351);
        unint64_t v73 = v351;
        if (v351)
        {
          uint64_t v74 = 0;
          a6 = 8;
          while (1)
          {
            a2 = &texture[v74];
            int v75 = texture[v74];
            if (v75)
            {
              size_t v57 = CVPixelBufferGetWidth(v75);
              unint64_t v73 = v351;
            }
            else
            {
              size_t v57 = 0;
            }
            a5 = a6 - 8;
            if (v73 <= a6 - 8) {
              break;
            }
            uint64_t v76 = *(void *)(a8 + 880);
            if (a2->isa)
            {
              size_t v77 = CVPixelBufferGetHeight(a2->isa);
              a4 = *(void *)(a8 + 880);
              unint64_t v73 = v351;
            }
            else
            {
              size_t v77 = 0;
              a4 = *(void *)(a8 + 880);
            }
            if (v73 <= a5) {
              goto LABEL_484;
            }
            if (a2->isa)
            {
              unint64_t v11 = CVPixelBufferGetPixelFormatType(a2->isa);
              unint64_t v73 = v351;
            }
            else
            {
              unint64_t v11 = 0;
            }
            if (v73 <= a5) {
              goto LABEL_485;
            }
            v57 *= v76;
            uint64_t v78 = a4 * v77;
            a4 = re::VideoPixelBufferBase::colorTags(&a2->isa);
            char v79 = re::VideoDefaults::compressionAllowed((re::VideoDefaults *)a4);
            *(void *)buf = 0;
            if (re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded((re::VideoSimplePixelBufferAllocator *)(a3 + 88), v57, v78, v11, (re::CoreVideoUtils *)BYTE1(a4), BYTE2(a4), a4, 0, 0x1000000400, v79, v304))
            {
              re::VideoPixelBufferPool::createPixelBuffer((re::VideoPixelBufferPool *)(a3 + 128), buf);
            }
            unint64_t v81 = *v312;
            int v48 = v307;
            if (*v312 <= a5) {
              goto LABEL_486;
            }
            *(void *)(a8 + 8 * a6) = *(void *)buf;
            unint64_t v82 = v351;
            if (v351 <= a5) {
              goto LABEL_487;
            }
            double v84 = re::VideoPixelBufferBase::cleanRect(&a2->isa);
            unint64_t v88 = v351;
            if (v351 <= a5) {
              goto LABEL_488;
            }
            double v89 = v84;
            double v90 = v85;
            double v91 = v86;
            double v92 = v87;
            if (a2->isa)
            {
              CVImageBufferGetDisplaySize(a2->isa);
              unint64_t v88 = v351;
            }
            if (v88 <= a5) {
              goto LABEL_489;
            }
            if (a2->isa) {
              CVImageBufferGetDisplaySize(a2->isa);
            }
            unint64_t v93 = *v312;
            if (*v312 <= a5) {
              goto LABEL_490;
            }
            size_t v57 = a8 + v74 * 8 + 64;
            re::VideoPixelBufferBase::setCleanRect((CVPixelBufferRef *)v57, v89 * (double)*(unint64_t *)(a8 + 880), v90 * (double)*(unint64_t *)(a8 + 880), v91 * (double)*(unint64_t *)(a8 + 880), v92 * (double)*(unint64_t *)(a8 + 880));
            unint64_t v95 = *(void *)(a8 + 48);
            if (v95 <= a5) {
              goto LABEL_491;
            }
            if (*(void *)(a8 + 8 * a6))
            {
              CVImageBufferSetDisplayDimensions();
              unint64_t v95 = *(void *)(a8 + 48);
            }
            if (v95 <= a5) {
              goto LABEL_493;
            }
            float v96 = re::VideoPixelBufferBase::horizontalDisparityAdjustment((__CVBuffer **)(a8 + v74 * 8 + 64));
            if (v96 > 0.0)
            {
              unint64_t v97 = *v312;
              if (*v312 <= a5) {
                goto LABEL_508;
              }
              re::VideoPixelBufferBase::setHorizontalDisparityAdjustment((CVBufferRef *)(a8 + v74 * 8 + 64), v96);
            }
            unint64_t v73 = v351;
            unint64_t v98 = a6 - 7;
            ++a6;
            ++v74;
            if (v98 >= v351) {
              goto LABEL_124;
            }
          }
LABEL_483:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v73);
          _os_crash();
          __break(1u);
LABEL_484:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v73);
          _os_crash();
          __break(1u);
LABEL_485:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v73);
          _os_crash();
          __break(1u);
LABEL_486:
          re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v81);
          _os_crash();
          __break(1u);
LABEL_487:
          re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v82);
          _os_crash();
          __break(1u);
LABEL_488:
          re::internal::assertLog((re::internal *)6, v83, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v88);
          _os_crash();
          __break(1u);
LABEL_489:
          re::internal::assertLog((re::internal *)6, v83, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v88);
          _os_crash();
          __break(1u);
LABEL_490:
          re::internal::assertLog((re::internal *)6, v83, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v93);
          _os_crash();
          __break(1u);
LABEL_491:
          re::internal::assertLog((re::internal *)6, v94, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v95);
          _os_crash();
          __break(1u);
          goto LABEL_492;
        }
LABEL_124:
        unint64_t v99 = v340;
        if (v340)
        {
          a4 = 0;
          size_t v57 = a8 + 64;
          unint64_t v11 = (unint64_t)v344;
          while (1)
          {
            unint64_t v100 = v351;
            if (v351 <= a4) {
              break;
            }
            v101 = texture[a4];
            if (v101)
            {
              IOSurfaceRef v102 = CVPixelBufferGetIOSurface(v101);
              CFRetain(v102);
              unint64_t v99 = v340;
            }
            else
            {
              IOSurfaceRef v102 = 0;
            }
            *(void *)buf = v102;
            if (v99 <= a4) {
              goto LABEL_494;
            }
            *(void *)(v11 - 16) = v102;
            unint64_t v103 = *v312;
            if (*v312 <= a4) {
              goto LABEL_495;
            }
            unint64_t IsHDR = *(void *)(v57 + 8 * a4);
            if (IsHDR)
            {
              IOSurfaceRef v104 = CVPixelBufferGetIOSurface((CVPixelBufferRef)IsHDR);
              unint64_t IsHDR = (unint64_t)CFRetain(v104);
              unint64_t v99 = v340;
            }
            else
            {
              IOSurfaceRef v104 = 0;
            }
            *(void *)buf = v104;
            if (v99 <= a4) {
              goto LABEL_496;
            }
            *(void *)(v11 - 8) = v104;
            *(unsigned char *)unint64_t v11 = 0;
            v11 += 24;
            if (++a4 >= v99) {
              goto LABEL_153;
            }
          }
LABEL_492:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v100);
          _os_crash();
          __break(1u);
LABEL_493:
          re::internal::assertLog((re::internal *)6, v94, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v95);
          _os_crash();
          __break(1u);
LABEL_494:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v99);
          _os_crash();
          __break(1u);
LABEL_495:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v103);
          _os_crash();
          __break(1u);
LABEL_496:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v99);
          _os_crash();
          __break(1u);
LABEL_497:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v164);
          _os_crash();
          __break(1u);
LABEL_498:
          re::internal::assertLog((re::internal *)6, v252, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v253);
          _os_crash();
          __break(1u);
LABEL_499:
          re::internal::assertLog((re::internal *)6, v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v118);
          _os_crash();
          __break(1u);
LABEL_500:
          re::internal::assertLog((re::internal *)6, v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v118);
          _os_crash();
          __break(1u);
LABEL_501:
          re::internal::assertLog((re::internal *)6, v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v121);
          _os_crash();
          __break(1u);
LABEL_502:
          re::internal::assertLog((re::internal *)6, v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v118);
          _os_crash();
          __break(1u);
LABEL_503:
          re::internal::assertLog((re::internal *)6, v124, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v11, v126);
          _os_crash();
          __break(1u);
LABEL_504:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v109);
          _os_crash();
          __break(1u);
LABEL_505:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v107);
          _os_crash();
          __break(1u);
LABEL_506:
          re::internal::assertLog((re::internal *)6, v112, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v113);
          _os_crash();
          __break(1u);
LABEL_507:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v107);
          _os_crash();
          __break(1u);
LABEL_508:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v97);
          _os_crash();
          __break(1u);
LABEL_509:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v136);
          _os_crash();
          __break(1u);
LABEL_510:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v11);
          _os_crash();
          __break(1u);
LABEL_511:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v11);
          _os_crash();
          __break(1u);
LABEL_512:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v144);
          _os_crash();
          __break(1u);
LABEL_513:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v147);
          _os_crash();
          __break(1u);
          goto LABEL_514;
        }
LABEL_153:
        a6 = a9;
        if ((*(unsigned char *)v300 & 1) == 0) {
          goto LABEL_167;
        }
        uint64_t v53 = v340;
        if (!v340) {
          goto LABEL_167;
        }
        re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::resize((uint64_t)v309, v340);
        re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::resize((uint64_t)&v334, v340);
        a6 = a9;
        if (!v340) {
          goto LABEL_167;
        }
        unint64_t v11 = 0;
        uint64_t v114 = a8 + 784;
        v115 = (id *)v336;
        v116 = (re::VideoSurfaceBase *)&v343;
        while (1)
        {
          size_t v57 = re::VideoSurfaceBase::colorTags(v116);
          re::VideoHistogram::create((re::VideoHistogram *)v57, buf);
          unint64_t v118 = *v309;
          if (*v309 <= v11) {
            goto LABEL_499;
          }
          uint64_t v119 = *(void *)(v114 + 8 * v11);
          *(void *)(v114 + 8 * v11) = *(void *)buf;
          if (v119)
          {

            unint64_t v118 = *v309;
          }
          if (v118 <= v11) {
            goto LABEL_500;
          }
          v120 = *(_DWORD **)(v114 + 8 * v11);
          v120[6] = BYTE1(v57);
          v120[7] = BYTE2(v57);
          v120[8] = v57;
          unint64_t v121 = v340;
          if (v340 <= v11) {
            goto LABEL_501;
          }
          PixelFormat = *(__IOSurface **)v116;
          if (*(void *)v116)
          {
            PixelFormat = (__IOSurface *)IOSurfaceGetPixelFormat(PixelFormat);
            unint64_t v118 = *v309;
          }
          if (v118 <= v11) {
            goto LABEL_502;
          }
          char isFullRange = re::CoreVideoUtils::isFullRange(PixelFormat);
          v125 = *(unsigned char **)(v114 + 8 * v11);
          v125[36] = isFullRange;
          v125[37] = 0;
          id v126 = v334;
          if ((unint64_t)v334 <= v11) {
            goto LABEL_503;
          }
          unint64_t IsHDR = (unint64_t)objc_storeWeak(v115, v125 + 8);
          ++v11;
          ++v115;
          v116 = (re::VideoSurfaceBase *)((char *)v116 + 24);
          if (v11 >= v340) {
            goto LABEL_167;
          }
        }
      }
    }
    else if (*(void *)(a8 + 880) > 1uLL)
    {
      goto LABEL_90;
    }
    v105 = (unint64_t *)(a8 + 48);
    if ((unint64_t *)(a8 + 48) != &v351)
    {
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((void *)(a8 + 48), &v351);
      ++*(_DWORD *)(a8 + 56);
    }
    if (*(unsigned char *)v300)
    {
      re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::resize((uint64_t)&v340, *v105);
      unsigned __int8 v106 = *a7;
      if (!a7[64]) {
        unsigned __int8 v106 = 0;
      }
      unint64_t v107 = v340;
      if (v340)
      {
        size_t v57 = 0;
        unint64_t v11 = a8 + 64;
        v108 = v344;
        a5 = v106;
        a6 = 1;
        while (1)
        {
          unint64_t v109 = *v105;
          if (*v105 <= v57) {
            goto LABEL_504;
          }
          v110 = *(__CVBuffer **)(v11 + 8 * v57);
          if (v110)
          {
            a2 = CVPixelBufferGetIOSurface(v110);
            CFRetain(a2);
            unint64_t v107 = v340;
          }
          else
          {
            a2 = 0;
          }
          *(void *)buf = a2;
          if (v107 <= v57) {
            goto LABEL_505;
          }
          *((void *)v108 - 2) = a2;
          IOSurfaceRef v111 = re::VideoHistogramManager::selectDummySurface(a3 + 4704, (IOSurfaceRef)a2, a5);
          unint64_t v113 = v340;
          if (v340 <= v57) {
            goto LABEL_506;
          }
          re::VideoObject<re::VideoColorTransformBase>::setRef(v108 - 8, (const void **)v108 - 1, v111);
          unint64_t v107 = v340;
          if (v340 <= v57) {
            goto LABEL_507;
          }
          unsigned char *v108 = 1;
          v108 += 24;
          if (++v57 >= v107) {
            goto LABEL_153;
          }
        }
      }
    }
    goto LABEL_153;
  }
  *(unsigned char *)(a8 + 672) = 1;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a8 + 48);
  *(void *)(a8 + 496) = 0;
  ++*(_DWORD *)(a8 + 504);
  if (*(unsigned char *)v300)
  {
    re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::resize((uint64_t)v309, (unint64_t)a2->isa);
    re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::resize((uint64_t)&v334, *v309);
    if (a2->isa)
    {
      size_t v57 = 0;
      unint64_t v11 = a8 + 784;
      a4 = (unint64_t)v336;
      while (1)
      {
        re::VideoHistogram::create(v56, buf);
        unint64_t v59 = *v309;
        if (*v309 <= v57) {
          break;
        }
        uint64_t v60 = *(void *)(v11 + 8 * v57);
        *(void *)(v11 + 8 * v57) = *(void *)buf;
        if (v60)
        {

          unint64_t v59 = *v309;
        }
        if (v59 <= v57) {
          goto LABEL_481;
        }
        id v61 = v334;
        if ((unint64_t)v334 <= v57) {
          goto LABEL_482;
        }
        uint64_t v62 = *(void *)(v11 + 8 * v57);
        if (v62) {
          v63 = (void *)(v62 + 8);
        }
        else {
          v63 = 0;
        }
        uint64_t v56 = (re::VideoHistogram *)objc_storeWeak((id *)a4, v63);
        ++v57;
        a4 += 8;
        if ((Class)v57 >= a2->isa) {
          goto LABEL_67;
        }
      }
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v59);
      _os_crash();
      __break(1u);
LABEL_481:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v59);
      _os_crash();
      __break(1u);
LABEL_482:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v57, v61);
      _os_crash();
      __break(1u);
      goto LABEL_483;
    }
  }
LABEL_67:
  if (*(unsigned char *)a9)
  {
    CMTime v327 = v328;
    CMTime v326 = v329;
    if (re::CMTimeCompareWithThreshold(&v327, &v326, v55, *(double *)&v329.value))
    {
      long long v64 = *(_OWORD *)(a9 + 16);
      v324[0] = *(_OWORD *)a9;
      v324[1] = v64;
      re::DynamicString::DynamicString((re::DynamicString *)v325, (const re::DynamicString *)(a9 + 32));
      re::dumpHDRFrameToFile(&v351, (void *)(a8 + 496), a7, v324, 0, v295, *(double *)(a9 + 24));
      if (v325[0])
      {
        if (v325[1]) {
          (*(void (**)(void))(*(void *)v325[0] + 40))();
        }
        memset(v325, 0, sizeof(v325));
      }
    }
  }
  unint64_t IsHDR = re::videoPlaybackCreateHDRConfigs((uint64_t)&v351, *(unsigned int *)(a8 + 676), a5, (void *)a6, (unint64_t)a7, (re *)(a3 + 80), a3 + 88, (unint64_t *)(a8 + 496), *(void *)(a8 + 880), (unint64_t *)(a8 + 48), &v345);
  unint64_t v43 = IsHDR;
  a6 = a9;
  if (IsHDR)
  {
    uint64_t v65 = *re::videoLogObjects((re *)IsHDR);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v65, OS_LOG_TYPE_ERROR, "Unable to process HDR content.", buf, 2u);
    }
    goto LABEL_459;
  }
LABEL_167:
  if (*(unsigned char *)a6)
  {
    CMTime v323 = v328;
    CMTime v322 = v329;
    unint64_t IsHDR = re::CMTimeCompareWithThreshold(&v323, &v322, v54, *(double *)&v329.value);
    if (IsHDR)
    {
      long long v127 = *(_OWORD *)(a9 + 16);
      v320[0] = *(_OWORD *)a9;
      v320[1] = v127;
      re::DynamicString::DynamicString((re::DynamicString *)v321, (const re::DynamicString *)(a9 + 32));
      re::dumpHDRFrameToFile((void *)(a8 + 48), (void *)(a8 + 496), a7, v320, 1, v295, *(double *)(a9 + 24));
      unint64_t IsHDR = v321[0];
      if (v321[0])
      {
        if (v321[1]) {
          unint64_t IsHDR = (*(uint64_t (**)(void))(*(void *)v321[0] + 40))();
        }
        memset(v321, 0, sizeof(v321));
      }
      *(double *)(a9 + 8) = *(double *)(a9 + 16) + *(double *)(a9 + 8);
    }
  }
  if (v48)
  {
    unint64_t IsHDR = re::VideoDefaults::aseAllowed((re::VideoDefaults *)IsHDR);
    if (IsHDR)
    {
      if (*(void *)(a8 + 880) >= 2uLL)
      {
        v128 = (unint64_t *)(a3 + 48);
        unint64_t v11 = *(void *)(a3 + 48);
        a6 = a8 + 48;
        unint64_t v129 = *(void *)(a8 + 48);
        if (v129 != v11)
        {
          if (v129 <= v11)
          {
            if (v129 < v11)
            {
              uint64_t v130 = a3 + 64;
              unint64_t v131 = *(void *)(a8 + 48);
              do
              {
                uint64_t v132 = *(void *)(v130 + 8 * v131);
                if (v132)
                {

                  *(void *)(v130 + 8 * v131) = 0;
                  unint64_t v11 = *v128;
                }
                ++v131;
              }
              while (v131 < v11);
              unint64_t v11 = *(void *)a6;
              goto LABEL_188;
            }
            unint64_t v11 = *(void *)(a8 + 48);
          }
          else
          {
            if (v129 >= 3) {
              goto LABEL_531;
            }
            bzero(&v128[v11 + 2], 8 * (v129 - v11));
            unint64_t v11 = v129;
LABEL_188:
            *(void *)(a3 + 48) = v129;
            ++*(_DWORD *)(a3 + 56);
          }
        }
        if (v11 <= v348)
        {
          if (v11 < v348) {
            goto LABEL_196;
          }
        }
        else
        {
          if (v11 >= 3) {
            goto LABEL_530;
          }
          bzero(&v350[2 * v348], 32 * (v11 - v348));
LABEL_196:
          unint64_t v348 = v11;
          ++v349;
        }
        if (v11)
        {
          v134 = v350;
          uint64_t v135 = 8;
          while (1)
          {
            a5 = v135 - 8;
            unint64_t v136 = *v128;
            if (*v128 <= v135 - 8) {
              goto LABEL_509;
            }
            if (!*(void *)(a3 + 8 * v135))
            {
              re::VideoASEFrameMeasurement::create((re::VideoASEFrameMeasurement *)IsHDR, buf);
              unint64_t v137 = *v128;
              if (*v128 <= a5) {
                goto LABEL_515;
              }
              uint64_t v138 = *(void *)(a3 + 8 * v135);
              *(void *)(a3 + 8 * v135) = *(void *)buf;
              if (v138) {

              }
              unint64_t v11 = *(void *)a6;
            }
            if (v11 <= a5) {
              goto LABEL_510;
            }
            a2 = *(NSObject **)(a8 + 608);
            uint64_t v139 = *(void *)(a8 + 616);
            v140 = *(__CVBuffer **)(a8 + 8 * v135);
            if (v140)
            {
              unsigned int v141 = CVPixelBufferGetWidth(v140);
              unint64_t v11 = *(void *)a6;
            }
            else
            {
              unsigned int v141 = 0;
            }
            if (v11 <= a5) {
              goto LABEL_511;
            }
            v142 = *(__CVBuffer **)(a8 + 8 * v135);
            if (v142) {
              unsigned int v143 = CVPixelBufferGetHeight(v142);
            }
            else {
              unsigned int v143 = 0;
            }
            unint64_t v144 = *v128;
            if (*v128 <= a5) {
              goto LABEL_512;
            }
            uint64_t v145 = *(void *)(a3 + 8 * v135);
            uint64_t v319 = v145;
            if (v145) {
              id v146 = (id)(v145 + 8);
            }
            unint64_t v147 = v348;
            if (v348 <= a5) {
              goto LABEL_513;
            }
            v148 = (re::VideoDefaults *)re::VideoASEProcessor::createConfig(a3, a2, v139, v141, v143, &v319, v134);
            int v149 = (int)v148;
            if (v319)
            {

              uint64_t v319 = 0;
            }
            if (v149) {
              break;
            }
            unint64_t IsHDR = re::VideoDefaults::logEnabled(v148);
            if (IsHDR)
            {
              a2 = (id)*re::videoLogObjects((re *)IsHDR);
              if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v151 = *(void *)(a8 + 48);
                uint64_t v152 = *(void *)(a8 + 608);
                uint64_t v153 = *(void *)(a8 + 616);
                v154 = *(__CVBuffer **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)(a8 + 48), v135 - 8);
                if (v154) {
                  size_t v310 = CVPixelBufferGetWidth(v154);
                }
                else {
                  size_t v310 = 0;
                }
                v155 = *(__CVBuffer **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)(a8 + 48), v135 - 8);
                if (v155) {
                  v155 = (__CVBuffer *)CVPixelBufferGetHeight(v155);
                }
                *(_DWORD *)buf = 134219264;
                *(void *)&uint8_t buf[4] = v135 - 7;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v151;
                *(_WORD *)&buf[22] = 2048;
                *(void *)v361 = v152;
                *(_WORD *)&v361[8] = 2048;
                *(void *)&v361[10] = v153;
                __int16 v362 = 2048;
                size_t v363 = v310;
                __int16 v364 = 2048;
                v365 = v155;
                _os_log_impl(&dword_233120000, a2, OS_LOG_TYPE_DEFAULT, "Upscaling %zu of %zu from %zux%zu to %zux%zu", buf, 0x3Eu);
              }
            }
            unint64_t v11 = *(void *)a6;
            unint64_t v150 = v135 - 7;
            ++v135;
            v134 += 4;
            if (v150 >= *(void *)a6) {
              goto LABEL_231;
            }
          }
          unint64_t v157 = *re::videoLogObjects(v148);
          if (!os_log_type_enabled((os_log_t)v157, OS_LOG_TYPE_ERROR)) {
            goto LABEL_458;
          }
LABEL_479:
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_233120000, (os_log_t)v157, OS_LOG_TYPE_ERROR, "Unable to create ASE configuration.", buf, 2u);
          goto LABEL_458;
        }
      }
    }
  }
LABEL_231:
  a6 = a8 + 48;
  size_t v57 = *(void *)(a8 + 48);
  *(_OWORD *)(a8 + 592) = 0u;
  unint64_t v156 = 0;
  if (v57)
  {
    unint64_t v157 = 0;
    v158 = (size_t *)(a8 + 592);
    uint64_t v159 = a8 + 64;
    do
    {
      unint64_t IsHDR = *(void *)(v159 + 8 * v157);
      if (IsHDR)
      {
        size_t v160 = CVPixelBufferGetWidth((CVPixelBufferRef)IsHDR);
        size_t v161 = *v158;
        if (*v158 <= v160) {
          size_t v161 = v160;
        }
        size_t *v158 = v161;
        size_t v57 = *(void *)a6;
        if (*(void *)a6 <= v157) {
          goto LABEL_474;
        }
        unint64_t IsHDR = *(void *)(v159 + 8 * v157);
        if (IsHDR)
        {
          unint64_t IsHDR = CVPixelBufferGetHeight((CVPixelBufferRef)IsHDR);
          size_t v57 = *(void *)a6;
        }
        unint64_t v156 = *(void *)(a8 + 600);
        if (v156 <= IsHDR) {
          unint64_t v156 = IsHDR;
        }
        *(void *)(a8 + 600) = v156;
      }
      ++v157;
    }
    while (v157 < v57);
    unint64_t v162 = *v158;
  }
  else
  {
    unint64_t v162 = 0;
  }
  *(_OWORD *)(a8 + 624) = 0u;
  *(_OWORD *)(a8 + 640) = 0u;
  *(double *)(a8 + 656) = (double)v162;
  *(double *)(a8 + 664) = (double)v156;
  v163 = (unint64_t *)(a8 + 848);
  unint64_t v164 = *(void *)(a8 + 848);
  if (v57 <= v164)
  {
    if (v57 < v164) {
      goto LABEL_249;
    }
  }
  else
  {
    if (v57 >= 3)
    {
      re::internal::assertLog((re::internal *)4, v53, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      goto LABEL_528;
    }
    bzero((char *)v163 + 4 * v164 + 12, 4 * (v57 - v164));
LABEL_249:
    *(void *)(a8 + 848) = v57;
    ++*(_DWORD *)(a8 + 856);
    unint64_t v164 = v57;
  }
  if (v57)
  {
    unint64_t v11 = a8 + 624;
    uint64_t v165 = 215;
    uint64_t v166 = 64;
    do
    {
      a5 = v165 - 215;
      unint64_t v157 = a8 + v166;
      unint64_t IsHDR = *(void *)(a8 + v166);
      if (IsHDR)
      {
        double v168 = CVImageBufferGetDisplaySize((CVImageBufferRef)IsHDR).width;
        if (*(double *)v11 >= v168) {
          double v168 = *(double *)v11;
        }
        *(double *)unint64_t v11 = v168;
        unint64_t v169 = *(void *)a6;
        if (*(void *)a6 <= a5) {
          goto LABEL_475;
        }
        if (*(void *)v157)
        {
          double v170 = CVImageBufferGetDisplaySize((CVImageBufferRef)*(void *)v157).height;
          unint64_t v169 = *(void *)a6;
        }
        else
        {
          double v170 = 0.0;
        }
        double v171 = *(double *)(a8 + 632);
        if (v171 < v170) {
          double v171 = v170;
        }
        *(double *)(a8 + 632) = v171;
        if (v169 <= a5) {
          goto LABEL_476;
        }
        v173.f64[0] = re::VideoPixelBufferBase::cleanRect((__CVBuffer **)(a8 + v166));
        v173.f64[1] = v174;
        v176.f64[1] = v175;
        int8x16_t v177 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a8 + 656), v176), (int8x16_t)v176, *(int8x16_t *)(a8 + 656));
        *(int8x16_t *)(a8 + 640) = vbslq_s8((int8x16_t)vcgtq_f64(v173, *(float64x2_t *)(a8 + 640)), (int8x16_t)v173, *(int8x16_t *)(a8 + 640));
        *(int8x16_t *)(a8 + 656) = v177;
        unint64_t v178 = *(void *)(a8 + 48);
        if (v178 <= a5) {
          goto LABEL_477;
        }
        float v179 = re::VideoPixelBufferBase::horizontalDisparityAdjustment((__CVBuffer **)(a8 + v166));
        unint64_t v164 = *v163;
        if (*v163 <= a5) {
          goto LABEL_478;
        }
        *(float *)(a8 + 4 * v165) = v179;
        size_t v57 = *(void *)(a8 + 48);
      }
      else
      {
        if (v164 <= a5) {
          goto LABEL_497;
        }
        *(_DWORD *)(a8 + 4 * v165) = 0;
      }
      size_t v180 = v165 - 214;
      ++v165;
      v166 += 8;
    }
    while (v180 < v57);
  }
  *(unsigned char *)(a8 + 872) = 0;
  v181 = (re::VideoPSEProcessor *)re::VideoDefaults::pseAllowed((re::VideoDefaults *)IsHDR);
  if ((v181 & 1) == 0) {
    goto LABEL_282;
  }
  uint64_t v183 = re::VideoPSEProcessor::NeedsProcessing(v181);
  if (!re::VideoDefaults::overridePseEnabled(v183)) {
    goto LABEL_282;
  }
  v184 = (re::VideoPSEProcessor **)(a3 + 4904);
  if (!*(void *)(a3 + 4904))
  {
    v185 = operator new(0x20uLL);
    v185[1] = 0;
    v185[2] = 0;
    void *v185 = &unk_26E6D4828;
    v185[3] = 0;
    v186 = (re::VideoPSEProcessor *)(v185 + 3);
    *(void *)(a3 + 4904) = v185 + 3;
    v187 = *(std::__shared_weak_count **)(a3 + 4912);
    *(void *)(a3 + 4912) = v185;
    if (v187)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v187);
      v186 = *v184;
    }
    re::VideoPSEProcessor::init(v186);
  }
  *(void *)buf = 0;
  *(_DWORD *)&buf[8] = 0;
  CMTime time = *(CMTime *)a8;
  double Seconds = CMTimeGetSeconds(&time);
  PSEConfigs = (re *)re::videoPlaybackCreatePSEConfigs((re *)(a8 + 48), (uint64_t)location, (uint64_t)v184, (re::VideoSimplePixelBufferAllocator *)(a3 + 4832), (uint64_t)buf, (uint64_t)&v337, Seconds);
  if (PSEConfigs)
  {
    if (PSEConfigs == 2) {
      goto LABEL_521;
    }
    Float64 v28 = (__CVBuffer *)(id)*re::videoLogObjects(PSEConfigs);
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR)) {
      goto LABEL_469;
    }
    goto LABEL_280;
  }
  if ((uint8_t *)a6 != buf)
  {
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((void *)(a8 + 48), buf);
    ++*(_DWORD *)(a8 + 56);
  }
  *(unsigned char *)(a8 + 872) = 1;
  while (2)
  {
    while (2)
    {
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)buf);
LABEL_282:
      if (!*(void *)a6)
      {
LABEL_516:
        re::internal::assertLog((re::internal *)6, v182, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
        _os_crash();
        __break(1u);
LABEL_517:
        re::internal::assertLog((re::internal *)6, v224, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v243);
        _os_crash();
        __break(1u);
LABEL_518:
        re::internal::assertLog((re::internal *)6, v224, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v244);
        _os_crash();
        __break(1u);
LABEL_519:
        re::internal::assertLog((re::internal *)6, v224, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v259);
        _os_crash();
        __break(1u);
LABEL_520:
        re::internal::assertLog((re::internal *)6, v224, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v260);
        PSEConfigs = (re *)_os_crash();
        __break(1u);
LABEL_521:
        v293 = (re *)re::VideoDefaults::logEnabled(PSEConfigs);
        if (!v293) {
          continue;
        }
        Float64 v28 = (__CVBuffer *)(id)*re::videoLogObjects(v293);
        if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v354 = 0;
          _os_log_impl(&dword_233120000, (os_log_t)v28, OS_LOG_TYPE_DEFAULT, "Unable to PSE process content because surface is not supported.", v354, 2u);
        }
        goto LABEL_280;
      }
      break;
    }
    v190 = (__CVBuffer **)(a8 + 64);
    v191 = re::CoreVideoUtils::pixelBufferColorGamut(*(__CVBuffer **)(a8 + 64), (char *)(a8 + 584));
    if ((v191 & 1) == 0)
    {
      v192 = (id)*re::videoLogObjects(v191);
      if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v192, OS_LOG_TYPE_DEFAULT, "Could not determine color gamut of presentation group pixel buffer. Fallback to Rec709", buf, 2u);
      }
    }
    *(void *)(a8 + 576) = 0;
    if (!*(void *)(a8 + 48)) {
      goto LABEL_317;
    }
    unint64_t v193 = 0;
    v194 = (__CVBuffer **)(a8 + 64);
    do
    {
      *(void *)(a8 + 576) |= (unint64_t)re::VideoPixelBufferBase::protectionOptions(v194);
      ++v193;
      unint64_t v195 = *(void *)(a8 + 48);
      ++v194;
    }
    while (v193 < v195);
    if (!v195) {
      goto LABEL_317;
    }
    unint64_t v196 = 0;
    v197 = (re::VideoTextureCache *)(a3 + 216);
    do
    {
      memset(buf, 0, sizeof(buf));
      TexturesFromPixelBuffer = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer(v197, v190[v196], (re::VideoPixelBufferTextures *)buf, 0);
      a2 = TexturesFromPixelBuffer;
      if (TexturesFromPixelBuffer)
      {
        v199 = (id)*re::videoLogObjects(TexturesFromPixelBuffer);
        if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v354 = 0;
          _os_log_error_impl(&dword_233120000, v199, OS_LOG_TYPE_ERROR, "Unable to create texture for presentation group pixel buffer.", v354, 2u);
        }
      }
      else
      {
        re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(a8 + 80, (uint64_t)buf);
      }
      for (uint64_t i = 16; i != -8; i -= 8)
      {
        if (*(void *)&buf[i]) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&buf[i]);
        }
        *(void *)&buf[i] = 0;
      }
      if (a2) {
        goto LABEL_458;
      }
      ++v196;
    }
    while (v196 < *(void *)a6);
    if (!*(void *)a6 || (*(unsigned char *)v300 & 2) == 0)
    {
LABEL_317:
      *(void *)(a8 + 680) = 0;
      *(unsigned char *)(a8 + 673) = 0;
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(a8 + 544);
      if (*(void *)a6)
      {
        unint64_t v205 = 0;
        CFStringRef v206 = (const __CFString *)*MEMORY[0x263F04288];
        while (1)
        {
          v207 = v190[v205];
          OSType v208 = v207 ? CVPixelBufferGetPixelFormatType(v207) : 0;
          *(void *)buf = 0;
          re::VideoPixelFormatDescriptionManager::descriptionForPixelFormat(a3 + 2080, v208, (const void **)buf);
          BOOL v210 = *(unsigned char *)(a8 + 673)
              || re::VideoPixelFormatDescriptionBase::BOOLeanValue((const __CFDictionary **)buf, v206, 0);
          *(unsigned char *)(a8 + 673) = v210;
          unint64_t v211 = *(void *)(a8 + 544);
          if (v211 >= 2) {
            break;
          }
          *(void *)(a8 + 560 + 8 * v211) = *(void *)buf;
          *(void *)(a8 + 544) = v211 + 1;
          ++*(_DWORD *)(a8 + 552);
          ++v205;
          unint64_t v212 = *(void *)(a8 + 48);
          if (v205 >= v212) {
            goto LABEL_329;
          }
        }
LABEL_526:
        re::internal::assertLog((re::internal *)4, v209, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
        _os_crash();
        __break(1u);
      }
      unint64_t v212 = 0;
LABEL_329:
      v213 = (uint64_t *)(a8 + 720);
      re::DynamicInlineArray<re::VideoColorTags,2ul>::resize(a8 + 720, v212);
      if (*(void *)a6)
      {
        Float64 v28 = 0;
        uint64_t v214 = a8 + 732;
        while (1)
        {
          uint64_t v215 = re::VideoPixelBufferBase::colorTags(v190);
          uint64_t v217 = *v213;
          if (*v213 <= (unint64_t)v28) {
            break;
          }
          *(_WORD *)uint64_t v214 = v215;
          *(unsigned char *)(v214 + 2) = BYTE2(v215);
          Float64 v28 = (__CVBuffer *)((char *)v28 + 1);
          v214 += 3;
          ++v190;
          if ((unint64_t)v28 >= *(void *)a6) {
            goto LABEL_333;
          }
        }
LABEL_468:
        re::internal::assertLog((re::internal *)6, v216, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v28, v217);
        _os_crash();
        __break(1u);
LABEL_469:
        *(_WORD *)v354 = 0;
        _os_log_error_impl(&dword_233120000, (os_log_t)v28, OS_LOG_TYPE_ERROR, "Unable to PSE process content.", v354, 2u);
LABEL_280:

        continue;
      }
LABEL_333:
      v305 = (uint64_t *)(a8 + 208);
      re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(a8 + 208);
      *(void *)(a8 + 744) = 0;
      ++*(_DWORD *)(a8 + 752);
      int v218 = *(unsigned char *)(a8 + 674) & 0xFD;
      BOOL v219 = v218 == 0;
      v221 = (re::VideoDefaults *)re::VideoDefaults::stereoMipmapEnabled(v220);
      v303 = (re::VideoSimplePixelBufferAllocator *)(a8 + 720);
      if ((v221 & 1) == 0) {
        BOOL v219 = *(void *)(a8 + 80) < 2uLL && v218 == 0;
      }
      int v223 = *(unsigned __int8 *)(a8 + 872);
      if (re::VideoDefaults::mipmapEnabled(v221) && !v223 && v219)
      {
        if (*(void *)(a8 + 80))
        {
          unint64_t v225 = 0;
          v226 = (void *)(a8 + 112);
          while (1)
          {
            v227 = (__CVBuffer *)*(v226 - 2);
            if (v227) {
              uint64_t v228 = 2;
            }
            else {
              uint64_t v228 = 1;
            }
            if (*(v226 - 1)) {
              uint64_t v229 = v228;
            }
            else {
              uint64_t v229 = v227 != 0;
            }
            if (*v226) {
              ++v229;
            }
            if (v229 != 1) {
              break;
            }
            *(void *)v354 = 0;
            re::VideoObject<re::VideoTextureBase>::setRef((int)v354, (__CVBuffer **)v354, v227);
            re::VideoTextureBase::metalTexture((__CVBuffer **)v354, buf);
            if (*(void *)v354) {
              re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)v354);
            }
            v230 = *(void **)buf;
            if (!*(void *)buf) {
              break;
            }
            int v231 = objc_msgSend(*(id *)buf, sel_pixelFormat);

            ++v225;
            v226 += 3;
            if (v225 >= *(void *)(a8 + 80))
            {
              if (!re::CoreVideoUtils::isConvertibleToLinearRGBColorModel(v231)) {
                break;
              }
              goto LABEL_359;
            }
          }
        }
        else
        {
LABEL_359:
          uint64_t v232 = a3;
          v233 = (id *)(a3 + 208);
          if (!*(void *)(a3 + 208))
          {
            id v234 = *v296;
            id v317 = v234;
            if (!*v233)
            {
              re::ObjCObject::operator=(v233, &v317);
              id v234 = v317;
            }

            uint64_t v232 = a3;
          }
          unint64_t v235 = *(void *)(v232 + 7040);
          v236 = (re::VideoDefaults *)re::VideoDefaults::mipmapPixelsPerSecondMax(497664000);
          unint64_t v237 = vcvtpd_u64_f64((double)(unint64_t)v236 * 0.1);
          v238 = (re *)re::VideoDefaults::logEnabled(v236);
          if (v238)
          {
            uint64_t v239 = *(void *)(a3 + 6976);
            uint64_t v240 = *(void *)(a3 + 6968);
            v241 = (id)*re::videoLogObjects(v238);
            if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218752;
              *(void *)&uint8_t buf[4] = v235;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v236;
              *(_WORD *)&buf[22] = 2048;
              *(void *)v361 = v237;
              *(_WORD *)&v361[8] = 2048;
              *(void *)&v361[10] = v239 - v240;
              _os_log_impl(&dword_233120000, v241, OS_LOG_TYPE_DEFAULT, "[mipgen] pixelsPerSecond: %lld / %lld (+ %lld) (%zu samples)", buf, 0x2Au);
            }
          }
          if (v235 <= (unint64_t)v236 + v237)
          {
            re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::resize((uint64_t)&v330, *(void *)(a8 + 80));
            re::DynamicInlineArray<re::VideoMetalTextures,2ul>::resize((uint64_t)v305, *(void *)(a8 + 80));
            a3 = a8 + 744;
            re::DynamicInlineArray<re::VideoColorTags,2ul>::resize(a8 + 744, *(void *)(a8 + 80));
            if (*(void *)(a8 + 80))
            {
              a2 = 0;
              uint64_t v308 = (uint64_t)(v233 - 6);
              v300 = (re::VideoProcessor *)(a8 + 756);
              a6 = a8 + 224;
              unint64_t v242 = (unint64_t)v333;
              uint64_t v313 = a8 + 96;
              while (1)
              {
                uint64_t v243 = *(void *)v303;
                if (*(void *)v303 <= (unint64_t)a2) {
                  goto LABEL_517;
                }
                unint64_t v244 = *(void *)a3;
                if (*(void *)a3 <= (unint64_t)a2) {
                  goto LABEL_518;
                }
                v245 = (void *)(a8 + 96 + 24 * (void)a2);
                uint64_t v246 = a8 + 732 + 3 * (void)a2;
                v247 = (_WORD *)((char *)v300 + 3 * (void)a2);
                _WORD *v247 = *(_WORD *)v246;
                *((unsigned char *)v247 + 2) = *(unsigned char *)(v246 + 2);
                v306 = (re::VideoPixelBufferBase *)(v247 + 1);
                BOOL v248 = !v245[1] && *v245 == 0;
                if (!v248 || v245[2] != 0) {
                  break;
                }
LABEL_401:
                unint64_t v259 = v330;
                if (v330 <= (unint64_t)a2) {
                  goto LABEL_519;
                }
                uint64_t v260 = *v305;
                if (*v305 <= (unint64_t)a2) {
                  goto LABEL_520;
                }
                for (uint64_t j = 0; j != 24; j += 8)
                  NS::SharedPtr<MTL::Texture>::operator=((void **)(a6 + j), (void **)(v242 + j));
                a2 = ((char *)a2 + 1);
                v313 += 24;
                v242 += 48;
                a6 += 24;
                if ((unint64_t)a2 >= *(void *)(a8 + 80)) {
                  goto LABEL_406;
                }
              }
              unint64_t v157 = 0;
              unint64_t v11 = v242;
              while (1)
              {
                *(void *)buf = 0;
                re::VideoObject<re::VideoTextureBase>::setRef((int)buf, (__CVBuffer **)buf, *(CVPixelBufferRef *)(v313 + 8 * v157));
                re::VideoTextureBase::metalTexture((__CVBuffer **)buf, v354);
                size_t v57 = (size_t)objc_msgSend(*(id *)v354, sel_width);
                id v250 = objc_msgSend(*(id *)v354, sel_height);
                a5 = re::CoreVideoUtils::convertToLinearRGBColorModel((re *)objc_msgSend(*(id *)v354, sel_pixelFormat));
                id v316 = 0;
                re::VideoTextureAllocator::createTextureInternal(v308, v57, (uint64_t)v250, a5, 2, 3u, 1, 1, (unint64_t *)&v315, (uint64_t)objc_msgSend(*(id *)v354, sel_protectionOptions));
                NS::SharedPtr<MTL::Texture>::operator=(&v316, &v315);
                if (v315) {

                }
                int HasHardwareTransferFunction = re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction((int)objc_msgSend(*(id *)v354, sel_pixelFormat));
                unint64_t v253 = *(void *)a3;
                if (HasHardwareTransferFunction)
                {
                  if (v253 <= (unint64_t)a2) {
                    goto LABEL_498;
                  }
                  *(unsigned char *)v306 = 8;
                }
                if (v253 <= (unint64_t)a2) {
                  break;
                }
                *((unsigned char *)v300 + 3 * (void)a2) = 0;
                unint64_t v254 = v330;
                if (v330 <= (unint64_t)a2) {
                  goto LABEL_471;
                }
                NS::SharedPtr<MTL::Texture>::operator=((void **)(v11 - 24), (void **)v354);
                unint64_t v256 = v330;
                if (v330 <= (unint64_t)a2) {
                  goto LABEL_472;
                }
                NS::SharedPtr<MTL::Texture>::operator=((void **)v11, &v316);
                if (v316) {

                }
                if (*(void *)v354) {
                if (*(void *)buf)
                }
                  re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)buf);
                ++v157;
                unint64_t v257 = *v245 != 0;
                uint64_t v258 = 1;
                if (*v245) {
                  uint64_t v258 = 2;
                }
                if (v245[1]) {
                  unint64_t v257 = v258;
                }
                if (v245[2]) {
                  ++v257;
                }
                v11 += 8;
                if (v157 >= v257) {
                  goto LABEL_401;
                }
              }
              re::internal::assertLog((re::internal *)6, v252, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v253);
              _os_crash();
              __break(1u);
LABEL_471:
              re::internal::assertLog((re::internal *)6, v252, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v254);
              _os_crash();
              __break(1u);
LABEL_472:
              re::internal::assertLog((re::internal *)6, v255, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v256);
              _os_crash();
              __break(1u);
LABEL_473:
              re::internal::assertLog((re::internal *)6, v288, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v242, v289);
              _os_crash();
              __break(1u);
LABEL_474:
              re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v157, v57);
              _os_crash();
              __break(1u);
LABEL_475:
              re::internal::assertLog((re::internal *)6, v167, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v169);
              _os_crash();
              __break(1u);
LABEL_476:
              re::internal::assertLog((re::internal *)6, v167, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v169);
              _os_crash();
              __break(1u);
LABEL_477:
              re::internal::assertLog((re::internal *)6, v172, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v178);
              _os_crash();
              __break(1u);
LABEL_478:
              re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v164);
              _os_crash();
              __break(1u);
              goto LABEL_479;
            }
          }
        }
      }
LABEL_406:
      unint64_t v262 = v340;
      if (v340 <= v345) {
        unint64_t v262 = v345;
      }
      if (v262 <= v337) {
        unint64_t v262 = v337;
      }
      if (v262 <= v330) {
        unint64_t v262 = v330;
      }
      if (v262 <= v348) {
        unint64_t v43 = v348;
      }
      else {
        unint64_t v43 = v262;
      }
      if (!v43) {
        goto LABEL_459;
      }
      v314 = (unint64_t *)(a8 + 800);
      unint64_t v263 = *(void *)(a8 + 800);
      if (v43 <= v263)
      {
        if (v43 >= v263)
        {
          if (!v263)
          {
LABEL_454:
            unint64_t v43 = 0;
            goto LABEL_459;
          }
          goto LABEL_425;
        }
        v264 = (std::__shared_weak_count **)(a8 + 16 * v43 + 824);
        unint64_t v265 = v43;
        do
        {
          if (*v264)
          {
            std::__shared_weak_count::__release_shared[abi:nn180100](*v264);
            unint64_t v263 = *v314;
          }
          ++v265;
          v264 += 2;
        }
        while (v265 < v263);
      }
      else
      {
        if (v43 >= 3) {
          goto LABEL_529;
        }
        bzero(&v314[2 * v263 + 2], 16 * (v43 - v263));
      }
      *(void *)(a8 + 800) = v43;
      ++*(_DWORD *)(a8 + 808);
LABEL_425:
      unint64_t v242 = 0;
      v301 = (re::VideoProcessor *)(v298 + 152);
      v266 = &v342;
      a5 = (unint64_t)v354;
      v267 = (const void **)&v354[8];
      size_t v57 = (size_t)v339;
      v268 = &v332;
      uint64_t v299 = a8 + 816;
      v269 = (const void **)&v355;
      v270 = v333;
      unint64_t v157 = 1;
      while (1)
      {
        buf[0] = 0;
        BYTE4(v363) = 0;
        v366[0] = 0;
        v367[0] = 0;
        v368[0] = 0;
        v369[0] = 0;
        v271 = (id *)v267;
        if (v340 > v242)
        {
          v272 = v269;
          v273 = (CFTypeRef *)&v266[3 * v242];
          v354[0] = 1;
          *(void *)&v354[8] = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)v267, v267, *v273);
          uint64_t v355 = 0;
          CFTypeRef v274 = v273[1];
          v269 = v272;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)v272, v272, v274);
          LOBYTE(v356) = v266[3 * v242 + 2];
          re::Optional<re::VideoTransformSurfaceConfig>::operator=((uint64_t)v366, v354);
          re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v354);
          v271 = (id *)v267;
          unint64_t v157 = 1;
        }
        if (v348 > v242)
        {
          if (!buf[0]) {
            buf[0] = 1;
          }
          v275 = &v350[2 * v242];
          long long v276 = v275[1];
          *(_OWORD *)&buf[8] = *v275;
          *(_OWORD *)v361 = v276;
        }
        if (v345 > v242)
        {
          v277 = v271;
          v278 = &v347[5 * v242];
          v354[0] = 1;
          uint64_t v355 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)v269, v269, *(CFTypeRef *)v278);
          v356 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v356, &v356, *((CFTypeRef *)v278 + 1));
          v357 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v357, &v357, *((CFTypeRef *)v278 + 2));
          long long v279 = *(_OWORD *)((char *)v278 + 40);
          long long v358 = *(_OWORD *)((char *)v278 + 24);
          v359[0] = v279;
          *(_OWORD *)((char *)v359 + 9) = *(_OWORD *)((char *)v278 + 49);
          re::Optional<re::VideoHDRConfig>::operator=((uint64_t)&v363 + 4, v354);
          re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v354);
          v266 = &v342;
          v271 = v277;
        }
        if ((unint64_t)v334 > v242)
        {
          v280 = v266;
          v354[0] = 1;
          *(void *)&v354[8] = 0;
          v281 = v271;
          objc_copyWeak(v271, (id *)&v336[v242]);
          re::Optional<re::VideoHistogramConfig>::operator=(v369, (id *)v354);
          if (v354[0]) {
            objc_destroyWeak(v281);
          }
          v271 = v281;
          v266 = v280;
        }
        v267 = (const void **)v271;
        if (v337 > v242)
        {
          v282 = (uint64_t *)&v339[3 * v242];
          v354[0] = 1;
          uint64_t v284 = *v282;
          uint64_t v283 = v282[1];
          *(void *)&v354[8] = v284;
          uint64_t v355 = v283;
          if (v283) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v283 + 16), 1uLL, memory_order_relaxed);
          }
          v285 = &v339[3 * v242];
          v356 = (const void *)*((void *)v285 + 2);
          v357 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v357, &v357, *((CFTypeRef *)v285 + 3));
          *(void *)&long long v358 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v358, (const void **)&v358, *(CFTypeRef *)&v339[3 * v242 + 2]);
          *((void *)&v358 + 1) = *((void *)&v339[3 * v242 + 2] + 1);
          re::Optional<re::VideoPSEConfig>::operator=((uint64_t)v368, v354);
          re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v354);
        }
        if (v330 > v242)
        {
          uint64_t v286 = 0;
          v354[0] = 1;
          do
          {
            *(void *)&v354[v286 * 8 + 8] = (id)v268[v286];
            ++v286;
          }
          while (v286 != 3);
          for (uint64_t k = 0; k != 24; k += 8)
            *(const void **)((char *)&v357 + k) = *(id *)&v270[k];
          re::Optional<re::VideoMipGenConfig>::operator=(v367, v354);
          re::Optional<re::VideoMipGenConfig>::~Optional(v354);
          v266 = &v342;
          unint64_t v157 = 1;
        }
        re::VideoProcessor::dispatch(v301, (const re::VideoProcessorConfig *)buf, a11, v354);
        unint64_t v289 = *v314;
        if (*v314 <= v242) {
          goto LABEL_473;
        }
        unint64_t v290 = v299 + 16 * v242;
        v291 = *(std::__shared_weak_count **)(v290 + 8);
        *(_OWORD *)unint64_t v290 = *(_OWORD *)v354;
        if (v291) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v291);
        }
        if (v369[0])
        {
          objc_destroyWeak(v370);
          v370[0] = 0;
        }
        re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v368);
        re::Optional<re::VideoMipGenConfig>::~Optional(v367);
        re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v366);
        re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)&v363 + 4);
        ++v242;
        v268 += 6;
        v270 += 48;
        if (v242 >= *v314) {
          goto LABEL_454;
        }
      }
    }
    break;
  }
  uint64_t v201 = 0;
  while (1)
  {
    memset(buf, 0, sizeof(buf));
    v202 = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer(v197, v190[v201], (re::VideoPixelBufferTextures *)buf, 1);
    a2 = v202;
    if (v202)
    {
      v203 = (id)*re::videoLogObjects(v202);
      if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v354 = 0;
        _os_log_error_impl(&dword_233120000, v203, OS_LOG_TYPE_ERROR, "Unable to create legacy texture for presentation group pixel buffer.", v354, 2u);
      }
    }
    else
    {
      re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(a8 + 144, (uint64_t)buf);
    }
    for (uint64_t m = 16; m != -8; m -= 8)
    {
      if (*(void *)&buf[m]) {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&buf[m]);
      }
      *(void *)&buf[m] = 0;
    }
    if (a2) {
      break;
    }
    if ((unint64_t)++v201 >= *(void *)a6) {
      goto LABEL_317;
    }
  }
LABEL_458:
  unint64_t v43 = 1;
LABEL_459:
  re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::clear((uint64_t)&v330);
  re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::clear(&v334);
  re::DynamicInlineArray<re::VideoPSEConfig,2ul>::clear((uint64_t)&v337);
  re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::clear((uint64_t)&v340);
  re::DynamicInlineArray<re::VideoHDRConfig,2ul>::clear((uint64_t)&v345);

  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)&v351);
LABEL_460:

  return v43;
}

void sub_233498E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::clear((uint64_t)&STACK[0x250]);
  re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::clear((id *)&STACK[0x2C0]);
  re::DynamicInlineArray<re::VideoPSEConfig,2ul>::clear((uint64_t)&STACK[0x2E0]);
  re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::clear((uint64_t)&STACK[0x350]);
  re::DynamicInlineArray<re::VideoHDRConfig,2ul>::clear((uint64_t)&STACK[0x390]);

  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)&STACK[0x490]);
  _Unwind_Resume(a1);
}

void re::deinitVideoPresentationGroup(uint64_t a1)
{
  uint64_t v2 = *(void *)(MEMORY[0x263F01090] + 16);
  *(_OWORD *)a1 = *MEMORY[0x263F01090];
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0;
  ++*(_DWORD *)(a1 + 32);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a1 + 48);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(a1 + 80);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(a1 + 144);
  re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(a1 + 208);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a1 + 272);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a1 + 304);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(a1 + 336);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(a1 + 400);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(a1 + 432);
  if (*(void *)(a1 + 464)) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(a1 + 464));
  }
  *(void *)(a1 + 464) = 0;

  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 496) = 0;
  ++*(_DWORD *)(a1 + 504);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(a1 + 544);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  long long v3 = *MEMORY[0x263F001A8];
  long long v4 = *(_OWORD *)(MEMORY[0x263F001A8] + 16);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = v3;
  *(void *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 656) = v4;
  *(_WORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 676) = -1;
  *(unsigned char *)(a1 + 674) = 0;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(a1 + 688);
  *(void *)(a1 + 720) = 0;
  ++*(_DWORD *)(a1 + 728);
  *(void *)(a1 + 744) = 0;
  ++*(_DWORD *)(a1 + 752);
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(a1 + 768);
  *(unsigned char *)(a1 + 480) = 0;
  re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::clear(a1 + 800);
  *(void *)(a1 + 848) = 0;
  ++*(_DWORD *)(a1 + 856);
  *(unsigned char *)(a1 + 872) = 0;
  *(void *)(a1 + 880) = 1;
  *(unsigned char *)(a1 + 888) = 0;
}

void re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if (*(void *)a1)
  {
    uint64_t v3 = 8 * *(void *)a1;
    do
    {
      if (*(void *)v2)
      {

        *(void *)uint64_t v2 = 0;
      }
      v2 += 8;
      v3 -= 8;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[](unint64_t *a1, unint64_t a2)
{
  if (*a1 > a2) {
    return (uint64_t)&a1[a2 + 2];
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, *a1);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (*a1 > a2) {
    return (uint64_t)&a1[a2 + 2];
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, a2, *a1);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = (__CVBuffer **)(a1 + 16);
  if (*(void *)a1)
  {
    uint64_t v3 = 8 * *(void *)a1;
    do
    {
      if (*v2) {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v2);
      }
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
    unint64_t v5 = a2;
    do
    {
      uint64_t v6 = a1 + 8 * v5;
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {

        *(void *)(v6 + 16) = 0;
        unint64_t v4 = *(void *)a1;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 8 * v4 + 16), 8 * (a2 - *(void *)a1));
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 - *(void *)a1;
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
    uint64_t v6 = 8 * a2 + 16;
    unint64_t v7 = a2;
    do
    {
      objc_destroyWeak((id *)(a1 + v6));
      *(void *)(a1 + 8 * v7++ + 16) = 0;
      v6 += 8;
    }
    while (v7 < *(void *)a1);
  }
  else
  {
    if (a2 > 2)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    unint64_t v5 = (id *)(a1 + 8 * *(void *)a1 + 16);
    do
    {
      objc_initWeak(v5++, 0);
      --v4;
    }
    while (v4);
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

BOOL re::CMTimeCompareWithThreshold(CMTime *this, CMTime *a2, CMTime *a3, double a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  memset(&v19, 0, sizeof(v19));
  CMTime lhs = *this;
  CMTime rhs = *a2;
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&v19, &time);
  CMTime v15 = v19;
  double Seconds = CMTimeGetSeconds(&v15);
  CMTimeValue value = this->value;
  CMTimeFlags flags = this->flags;
  CMTimeScale timescale = this->timescale;
  CMTimeEpoch epoch = this->epoch;
  CMTimeValue v28 = a2->value;
  CMTimeFlags v9 = a2->flags;
  CMTimeScale v29 = a2->timescale;
  CMTimeEpoch v10 = a2->epoch;
  if ((flags & 0x1F) == 3 || (v9 & 0x1F) == 3)
  {
    memset(&v27, 0, sizeof(v27));
    CMTimeValue v11 = this->value;
    v24.CMTimeEpoch epoch = v10;
    v25.CMTimeValue value = v11;
    v25.CMTimeScale timescale = this->timescale;
    v25.CMTimeFlags flags = flags;
    v25.CMTimeEpoch epoch = epoch;
    v24.CMTimeValue value = a2->value;
    v24.CMTimeScale timescale = a2->timescale;
    v24.CMTimeFlags flags = v9;
    CMTimeSubtract(&v26, &v25, &v24);
    CMTimeAbsoluteValue(&v27, &v26);
    CMTime time1 = v27;
    CMTimeMake(&time2, 1, 1000000000);
    if (CMTimeCompare(&time1, &time2) <= 0) {
      return 1;
    }
  }
  v20.CMTimeEpoch epoch = v10;
  v21.CMTimeValue value = value;
  v21.CMTimeScale timescale = timescale;
  v21.CMTimeFlags flags = flags;
  v21.CMTimeEpoch epoch = epoch;
  v20.CMTimeValue value = v28;
  v20.CMTimeScale timescale = v29;
  v20.CMTimeFlags flags = v9;
  int32_t v12 = CMTimeCompare(&v21, &v20);
  return Seconds < 0.001 || v12 >= 0;
}

void re::dumpHDRFrameToFile(void *a1, void *a2, unsigned __int8 *a3, long long *a4, char a5, void *a6, double a7)
{
  v70[2] = *MEMORY[0x263EF8340];
  CMTimeValue v11 = a6;
  uint64_t v56 = 0;
  size_t v57 = &v56;
  uint64_t v58 = 0x5012000000;
  unint64_t v59 = __Block_byref_object_copy__2;
  uint64_t v60 = __Block_byref_object_dispose__2;
  id v61 = "";
  uint64_t v62 = 0;
  int v63 = 0;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy(&v62, a1);
  uint64_t v13 = v57;
  CMTime v15 = (unint64_t *)(v57 + 6);
  uint64_t v14 = (void *)v57[6];
  if (v14)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    unint64_t i = (unint64_t)(v57 + 8);
    while (1)
    {
      unint64_t v20 = *v15;
      if (*v15 <= v16) {
        break;
      }
      size_t Width = *(__CVBuffer **)(i + 8 * v16);
      if (Width)
      {
        size_t Width = (__CVBuffer *)CVPixelBufferGetWidth(Width);
        unint64_t v20 = *v15;
      }
      if (v20 <= v16) {
        goto LABEL_59;
      }
      if (v17 <= (unint64_t)Width) {
        unint64_t v17 = (unint64_t)Width;
      }
      size_t Height = *(__CVBuffer **)(i + 8 * v16);
      if (Height) {
        size_t Height = (__CVBuffer *)CVPixelBufferGetHeight(Height);
      }
      if (v18 <= (unint64_t)Height) {
        unint64_t v18 = (unint64_t)Height;
      }
      if (v14 == (void *)++v16) {
        goto LABEL_16;
      }
    }
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v16, v20);
    _os_crash();
    __break(1u);
LABEL_59:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v16, v20);
    _os_crash();
    __break(1u);
LABEL_60:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, i, v28);
    _os_crash();
    __break(1u);
LABEL_61:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, i, v39);
    _os_crash();
    __break(1u);
  }
  unint64_t v18 = 0;
  unint64_t v17 = 0;
LABEL_16:
  uint64_t v23 = *a2;
  if (*a2)
  {
    CMTime v24 = (float *)a2 + 7;
    do
    {
      if (v17 >= (unint64_t)*(v24 - 1)) {
        unint64_t v17 = (unint64_t)*(v24 - 1);
      }
      float v25 = *v24;
      v24 += 4;
      unint64_t v26 = (unint64_t)v25;
      if (v18 >= (unint64_t)v25) {
        unint64_t v18 = v26;
      }
      --v23;
    }
    while (v23);
  }
  if (v14)
  {
    unint64_t i = 0;
    CMTime v27 = (__CVBuffer **)(v13 + 8);
    while (1)
    {
      uint64_t v28 = *v15;
      if (*v15 <= i) {
        goto LABEL_60;
      }
      CMTimeScale v29 = re::VideoPixelBufferBase::protectionOptions(v27);
      if (v29) {
        break;
      }
      ++i;
      ++v27;
      if (v14 == (void *)i) {
        goto LABEL_28;
      }
    }
    uint64_t v32 = *re::videoLogObjects(v29);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "Unable to dump protected content", buf, 2u);
    }
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)v15);
  }
  else
  {
LABEL_28:
    int v47 = v11;
    if (a3[64])
    {
      int v30 = *a3;
      unsigned int v50 = re::VideoHDRDefaults::overridePixelFormat(1882468912);
      uint64_t v31 = 1;
      switch(v30)
      {
        case 0:
          break;
        case 1:
          uint64_t v31 = 12;
          break;
        case 2:
        case 3:
          uint64_t v31 = 9;
          break;
        default:
          uint64_t v31 = 2;
          break;
      }
    }
    else
    {
      unsigned int v50 = re::VideoHDRDefaults::overridePixelFormat(1882468912);
      uint64_t v31 = 1;
    }
    unsigned int v34 = re::VideoHDRDefaults::overrideColorPrimaries((re::VideoHDRDefaults *)v31);
    unsigned int v35 = re::VideoHDRDefaults::overrideTransferFunction((re::VideoHDRDefaults *)0xD);
    unsigned int v36 = re::VideoHDRDefaults::overrideYCbCrMatrix((re::VideoHDRDefaults *)1);
    v70[0] = 0;
    v70[1] = 0;
    int v67 = 0;
    *(_OWORD *)buf = 0u;
    long long v66 = 0u;
    uint64_t v68 = 0x7FFFFFFFLL;
    uint64_t v69 = 0;
    if (v14)
    {
      unsigned int v37 = v36;
      for (unint64_t i = 0; (void *)i != v14; ++i)
      {
        re::VideoPixelBufferAllocator::createPixelBuffer((re::VideoPixelBufferAllocator *)buf, v17, v18, v50, v34, v35, v37, 1, &pixelTransferSessionOut, 0x400u, 0x10u, 0, 0);
        v70[i] = pixelTransferSessionOut;
        VTPixelTransferSessionRef pixelTransferSessionOut = 0;
        VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
        if (pixelTransferSessionOut)
        {
          uint64_t v39 = *v15;
          if (*v15 <= i) {
            goto LABEL_61;
          }
          VTPixelTransferSessionTransferImage(pixelTransferSessionOut, (CVPixelBufferRef)v13[i + 8], (CVPixelBufferRef)v70[i]);
          CFRelease(pixelTransferSessionOut);
        }
      }
    }
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)v15);
    CMTimeValue v11 = v47;
    if (v14)
    {
      unint64_t v41 = v13[6];
      v42 = v70;
      do
      {
        re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(v41, v40);
        uint64_t v43 = v13[6];
        v13[v43 + 8] = *v42;
        *v42++ = 0;
        unint64_t v41 = v43 + 1;
        v13[6] = v43 + 1;
        ++*((_DWORD *)v13 + 14);
        uint64_t v14 = (void *)((char *)v14 - 1);
      }
      while (v14);
    }
    re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit((uint64_t *)buf);
    for (uint64_t j = 1; j != -1; --j)
    {
      uint64_t v33 = (__CVBuffer **)&v70[j];
      if (v70[j]) {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v33);
      }
      v70[j] = 0;
    }
  }
  if (v11)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3321888768;
    long long v45 = a4[1];
    long long v52 = *a4;
    block[2] = ___ZN2re18dumpHDRFrameToFileERNS_18DynamicInlineArrayINS_11VideoObjectINS_20VideoPixelBufferBaseEEELm2EEERKNS0_INS_7Vector4IfEELm2EEERKNS_12ColorManagerENS_4ecs211HDRDumpInfoEdbPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
    block[3] = &unk_26E6D47E8;
    block[4] = &v56;
    char v55 = a5;
    long long v53 = v45;
    re::DynamicString::DynamicString((re::DynamicString *)v54, (const re::DynamicString *)(a4 + 2));
    *(double *)&v54[4] = a7;
    dispatch_async(v11, block);
    if (v54[0])
    {
      if (v54[1]) {
        (*(void (**)(void))(*(void *)v54[0] + 40))();
      }
      memset(v54, 0, 32);
    }
  }
  else
  {
    unint64_t v46 = *re::videoLogObjects((re *)v33);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v46, OS_LOG_TYPE_ERROR, "VideoAsset.backgroundWorkQueue is invalid", buf, 2u);
    }
  }
  _Block_object_dispose(&v56, 8);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)&v62);
}

void sub_233499EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit((uint64_t *)(v36 - 192));
  uint64_t v38 = 8;
  uint64_t v39 = v36 - 128;
  while (1)
  {
    if (*(void *)(v39 + v38)) {
      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v39 + v38));
    }
    *(void *)(v39 + v38) = 0;
    v38 -= 8;
    if (v38 == -8)
    {
      _Block_object_dispose(&a36, 8);
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a18);

      _Unwind_Resume(a1);
    }
  }
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
    uint64_t v5 = 8 * a2 + 16;
    unint64_t v6 = a2;
    do
    {
      uint64_t v7 = a1 + 8 * v6;
      if (*(void *)(v7 + 16))
      {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(a1 + v5));
        unint64_t v4 = *(void *)a1;
      }
      *(void *)(v7 + 16) = 0;
      ++v6;
      v5 += 8;
    }
    while (v6 < v4);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 8 * v4 + 16), 8 * (a2 - *(void *)a1));
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 - *(void *)a1;
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
    unint64_t v6 = (const void **)(a1 + 24 * a2 + 24);
    unint64_t v7 = a2;
    do
    {
      if (*v6) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v6);
      }
      *unint64_t v6 = 0;
      if (*(v6 - 1)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v6 - 1);
      }
      *(v6 - 1) = 0;
      ++v7;
      v6 += 3;
    }
    while (v7 < *(void *)a1);
  }
  else
  {
    if (a2 > 2)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    uint64_t v5 = a1 + 24 * *(void *)a1 + 16;
    do
    {
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 16) = 0;
      v5 += 24;
      --v4;
    }
    while (v4);
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 24 * *(void *)a1 + 16;
    do
    {
      *(void *)(v5 + v4) = 0;
      re::VideoObject<re::VideoTextureBase>::setRef(v5 + v4, (__CVBuffer **)(v5 + v4), *(CVPixelBufferRef *)(a2 + v4));
      v4 += 8;
    }
    while (v4 != 24);
    ++*(void *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
}

void sub_23349A210(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = v1 + 24 * v3 + 8;
    do
    {
      if (*(void *)(v5 + v2)) {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v5 + v2));
      }
      *(void *)(v5 + v2) = 0;
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = (const void **)(a1 + 16);
  if (*(void *)a1)
  {
    uint64_t v3 = 8 * *(void *)a1;
    do
    {
      if (*v2) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v2);
      }
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoColorTags,2ul>::resize(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(3 * *(void *)a1 + a1 + 12), 3 * (a2 - *(void *)a1));
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if (*(void *)a1)
  {
    uint64_t v3 = v2 + 24 * *(void *)a1;
    uint64_t v4 = a1;
    do
    {
      v2 += 24;
      for (uint64_t i = 32; i != 8; i -= 8)
      {
        unint64_t v6 = *(void **)(v4 + i);
        if (v6)
        {

          *(void *)(v4 + i) = 0;
        }
      }
      v4 += 24;
    }
    while (v2 != v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::resize(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
    uint64_t v4 = a1 + 48 * a2;
    unint64_t v5 = a2;
    do
    {
      for (uint64_t i = 56; i != 32; i -= 8)
      {
        unint64_t v7 = *(void **)(v4 + i);
        if (v7)
        {

          *(void *)(v4 + i) = 0;
        }
      }
      do
      {
        long long v8 = *(void **)(v4 + i);
        if (v8)
        {

          *(void *)(v4 + i) = 0;
        }
        i -= 8;
      }
      while (i != 8);
      ++v5;
      v4 += 48;
    }
    while (v5 < *(void *)a1);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 48 * *(void *)a1 + 16), 48 * (a2 - *(void *)a1));
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoMetalTextures,2ul>::resize(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
    uint64_t v4 = a1 + 24 * a2;
    unint64_t v5 = a2;
    do
    {
      for (uint64_t i = 32; i != 8; i -= 8)
      {
        unint64_t v7 = *(void **)(v4 + i);
        if (v7)
        {

          *(void *)(v4 + i) = 0;
        }
      }
      ++v5;
      v4 += 24;
    }
    while (v5 < *(void *)a1);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 24 * *(void *)a1 + 16), 24 * (a2 - *(void *)a1));
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::Optional<re::VideoTransformSurfaceConfig>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      unint64_t v7 = (void *)(a1 + 16);
      long long v8 = (void *)(a1 + 8);
      if (*(void *)(a1 + 16)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
      }
      *unint64_t v7 = 0;
      if (*v8) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 8));
      }
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (v6)
      {
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *((void *)a2 + 1) = 0;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *((void *)a2 + 1) = 0;
        *(void *)(a1 + 16) = 0;
      }
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *((void *)a2 + 2) = 0;
      *(unsigned char *)(a1 + 24) = a2[24];
    }
  }
  return a1;
}

uint64_t re::Optional<re::VideoHDRConfig>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      unint64_t v7 = (const void **)(a1 + 32);
      if (*(void *)(a1 + 32)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v7);
      }
      uint64_t v8 = *(void *)(a1 + 24);
      *(void *)(a1 + 32) = 0;
      if (v8) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 24));
      }
      *(void *)(a1 + 24) = 0;
      if (*(void *)(a1 + 16)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
      }
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (v6)
      {
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *((void *)a2 + 2) = 0;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *((void *)a2 + 3) = 0;
        *((void *)a2 + 4) = 0;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *((void *)a2 + 2) = 0;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a2 + 24) = 0u;
      }
      long long v9 = *(_OWORD *)(a2 + 40);
      long long v10 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(a1 + 56) = v10;
      *(_OWORD *)(a1 + 40) = v9;
    }
  }
  return a1;
}

unsigned __int8 *re::Optional<re::VideoHistogramConfig>::operator=(unsigned __int8 *a1, id *a2)
{
  int v3 = *a1;
  int v4 = *(unsigned __int8 *)a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    BOOL v6 = (id *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      objc_destroyWeak(v6);
      *((void *)a1 + 1) = 0;
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::ArcWeakPtr<re::VideoHistogram>::operator=(v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        *((void *)a1 + 1) = 0;
        objc_moveWeak(v6, a2 + 1);
      }
    }
  }
  return a1;
}

uint64_t re::Optional<re::VideoPSEConfig>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      long long v10 = (const void **)(a1 + 40);
      if (*(void *)(a1 + 40)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v10);
      }
      uint64_t v11 = *(void *)(a1 + 32);
      *(void *)(a1 + 40) = 0;
      if (v11) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 32));
      }
      *(void *)(a1 + 32) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        long long v8 = *(_OWORD *)(a2 + 8);
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        long long v9 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v8;
        if (v9) {
          std::__shared_weak_count::__release_weak(v9);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *((void *)a2 + 4) = 0;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *((void *)a2 + 4) = 0;
        *(void *)(a1 + 40) = 0;
      }
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *((void *)a2 + 5) = 0;
      *(void *)(a1 + 48) = *((void *)a2 + 6);
    }
  }
  return a1;
}

{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  const void **v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v11 = (const void **)(a1 + 40);
      if (*(void *)(a1 + 40)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v11);
      }
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)(a1 + 40) = 0;
      if (v12) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 32));
      }
      *(void *)(a1 + 32) = 0;
      uint64_t v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        long long v9 = *((void *)a2 + 1);
        long long v8 = *((void *)a2 + 2);
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        }
        long long v10 = *(std::__shared_weak_count **)(a1 + 16);
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = v8;
        if (v10) {
          std::__shared_weak_count::__release_weak(v10);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 32, (const void **)(a1 + 32), *((CFTypeRef *)a2 + 4));
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 40, (const void **)(a1 + 40), *((CFTypeRef *)a2 + 5));
        *(void *)(a1 + 48) = *((void *)a2 + 6);
      }
      else
      {
        *(unsigned char *)a1 = 1;
        uint64_t v14 = *((void *)a2 + 2);
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(void *)(a1 + 16) = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 32, (const void **)(a1 + 32), *((CFTypeRef *)a2 + 4));
        *(void *)(a1 + 40) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 40, (const void **)(a1 + 40), *((CFTypeRef *)a2 + 5));
        *(void *)(a1 + 48) = *((void *)a2 + 6);
      }
    }
  }
  return a1;
}

unsigned char *re::Optional<re::VideoMipGenConfig>::operator=(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      for (uint64_t i = 48; i != 24; i -= 8)
      {
        uint64_t v12 = *(void **)&a1[i];
        if (v12)
        {

          *(void *)&a1[i] = 0;
        }
      }
      do
      {
        uint64_t v13 = *(void **)&a1[i];
        if (v13)
        {

          *(void *)&a1[i] = 0;
        }
        i -= 8;
      }
      while (i);
      *a1 = 0;
    }
    else
    {
      if (*a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        for (uint64_t j = 8; j != 32; j += 8)
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[j], (void **)&a2[j]);
        uint64_t v9 = 0;
        long long v10 = a2 + 32;
        do
        {
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[v9 + 32], (void **)&v10[v9]);
          v9 += 8;
        }
        while (v9 != 24);
      }
      else
      {
        *a1 = 1;
        for (uint64_t k = 8; k != 32; k += 8)
        {
          *(void *)&a1[k] = *(void *)&a2[k];
          *(void *)&a2[k] = 0;
        }
        uint64_t v15 = 0;
        unint64_t v16 = a2 + 32;
        do
        {
          *(void *)&a1[v15 + 32] = *(void *)&v16[v15];
          *(void *)&v16[v15] = 0;
          v15 += 8;
        }
        while (v15 != 24);
      }
    }
  }
  return a1;
}

{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  uint64_t j;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t i;
  void *v12;
  void *v13;
  uint64_t k;
  uint64_t v15;
  unsigned __int8 *v16;

  int v3 = *a2;
  if (*a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      for (uint64_t i = 48; i != 24; i -= 8)
      {
        uint64_t v12 = *(void **)&a1[i];
        if (v12)
        {

          *(void *)&a1[i] = 0;
        }
      }
      do
      {
        uint64_t v13 = *(void **)&a1[i];
        if (v13)
        {

          *(void *)&a1[i] = 0;
        }
        i -= 8;
      }
      while (i);
      *a1 = 0;
    }
    else
    {
      if (*a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        for (uint64_t j = 8; j != 32; j += 8)
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[j], (void **)&a2[j]);
        uint64_t v9 = 0;
        long long v10 = a2 + 32;
        do
        {
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[v9 + 32], (void **)&v10[v9]);
          v9 += 8;
        }
        while (v9 != 24);
      }
      else
      {
        *a1 = 1;
        for (uint64_t k = 8; k != 32; k += 8)
          *(void *)&a1[k] = *(id *)&a2[k];
        uint64_t v15 = 0;
        unint64_t v16 = a2 + 32;
        do
        {
          *(void *)&a1[v15 + 32] = *(id *)&v16[v15];
          v15 += 8;
        }
        while (v15 != 24);
      }
    }
  }
  return a1;
}

void re::VideoProcessorConfig::~VideoProcessorConfig(id *this)
{
  if (*((unsigned char *)this + 288))
  {
    objc_destroyWeak(this + 37);
    this[37] = 0;
  }
  re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)(this + 29));
  re::Optional<re::VideoMipGenConfig>::~Optional((unsigned char *)this + 176);
  re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)(this + 18));
  re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)(this + 6));
}

id re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::add(uint64_t a1, id a2)
{
  if (*(void *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    id result = (id)_os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = a1 + 8 * *(void *)a1;
    id result = a2;
    *(void *)(v3 + 16) = result;
    ++*(void *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t re::retrievePresentationGroupForTime(uint64_t a1, uint64_t a2, int a3, CMTime *a4, unint64_t a5, unint64_t a6, uint64_t a7, unsigned __int8 *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v272 = *MEMORY[0x263EF8340];
  id v17 = a13;
  if (a14)
  {
    int __src = *(unsigned char *)(a14 + 56) & (*(void *)a14 != 0);
    int v178 = *(unsigned char *)(a14 + 128) & (*(void *)(a14 + 72) != 0);
  }
  else
  {
    int v178 = 0;
    int __src = 0;
  }
  unint64_t v18 = (CMTime *)MEMORY[0x263F01090];
  CMTime v220 = *(CMTime *)*(void *)&MEMORY[0x263F01090];
  unint64_t v216 = 0;
  int v217 = 0;
  *(void *)BOOL v219 = 0;
  *(_DWORD *)&v219[8] = -1;
  *(CMTime *)&v219[12] = v220;
  if (a14 && (*(unsigned char *)(a14 + 56) & 1) != 0 && *(void *)a14)
  {
    CMTime v19 = a4;
    uint64_t v20 = a2;
    CMTime v21 = (re::VideoDefaults *)re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)&v216, (uint64_t *)a14);
    long long v22 = *(_OWORD *)(a14 + 48);
    *(_OWORD *)BOOL v219 = *(_OWORD *)(a14 + 32);
    *(_OWORD *)&v219[16] = v22;
    *(_DWORD *)&v219[32] = *(_DWORD *)(a14 + 64);
    if (v216)
    {
      uint64_t v23 = (CVPixelBufferRef *)v218;
      uint64_t v24 = 8 * v216;
      do
      {
        CMTime v21 = CVPixelBufferRetain(*v23++);
        v24 -= 8;
      }
      while (v24);
    }
    CMTime v220 = *(CMTime *)&v219[12];
    a2 = v20;
    a4 = v19;
  }
  else
  {
    CMTime v215 = *a4;
    re::retrievePixelBuffersWithVideoReceiver(&buf.value, (uint64_t *)a2, &v215, (uint64_t)&v220);
    CMTime v21 = (re::VideoDefaults *)re::DynamicInlineArray<__CVBuffer *,2ul>::move(&v216, (unint64_t *)&buf);
    ++v217;
    *(_OWORD *)BOOL v219 = v224;
    *(_OWORD *)&v219[16] = v225;
    *(_DWORD *)&v219[32] = v226;
  }
  float v25 = (re *)re::VideoDefaults::logEnabled(v21);
  unint64_t v26 = v216;
  if (v25)
  {
    if (!v216) {
      goto LABEL_196;
    }
    unint64_t v125 = 0;
    float64_t v174 = a4;
    do
    {
      uint64_t v126 = a2;
      long long v127 = v18;
      unint64_t v128 = v125 + 1;
      objc_msgSend(MEMORY[0x263F089D8], "stringWithFormat:", @"Pixel Buffer %zu of %zu", v125 + 1, v26);
      unint64_t v129 = (__CVBuffer *)objc_claimAutoreleasedReturnValue();
      uint64_t v130 = (re::CoreVideoUtils **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[](&v216, v125);
      re::CoreVideoUtils::printPixelBufferInfo(*v130, v129, v131);
      v133 = (id)*re::videoLogObjects(v132);
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
      {
        CMTimeValue v134 = [(__CVBuffer *)v129 cStringUsingEncoding:1];
        LODWORD(buf.value) = 136315138;
        *(CMTimeValue *)((char *)&buf.value + 4) = v134;
        _os_log_impl(&dword_233120000, v133, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
      }

      unint64_t v26 = v216;
      unint64_t v125 = v128;
      BOOL v135 = v128 >= v216;
      unint64_t v18 = v127;
      a2 = v126;
      a4 = v174;
    }
    while (!v135);
  }
  if (v26)
  {
    *(_DWORD *)(a2 + 8) = 0;
    if ((v220.flags & 1) == 0)
    {
      CMTime v27 = *re::videoLogObjects(v25);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.value) = 0;
        _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "Video receiver sample has an invalid presentation timestamp.", (uint8_t *)&buf, 2u);
      }
      goto LABEL_197;
    }
    float64x2_t v173 = a4;
    uint64_t v172 = (uint64_t *)a2;
    CMTime time = v220;
    uint64_t v28 = a12;
    *(Float64 *)(a12 + 24) = CMTimeGetSeconds(&time);
    if (*(void *)(a1 + 2064) == *(void *)(a1 + 2072)) {
      goto LABEL_37;
    }
    while (1)
    {
      CMTime time1 = v220;
      CMTime time2 = *(CMTime *)re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v30);
      CMTimeScale v29 = (re::VideoDefaults *)CMTimeCompare(&time1, &time2);
      if (!v29) {
        break;
      }
      if (v29 == -1)
      {
        uint64_t v43 = (re *)re::VideoDefaults::logEnabled(v29);
        if (v43)
        {
          v154 = *re::videoLogObjects(v43);
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.value) = 0;
            _os_log_impl(&dword_233120000, v154, OS_LOG_TYPE_DEFAULT, "Presentation queue is stale. Clearing.", (uint8_t *)&buf, 2u);
          }
        }
        re::VideoPresentationQueue::clear((re::VideoPresentationQueue *)(a1 + 256));
        goto LABEL_37;
      }
      if (*(void *)(a1 + 2064) != *(void *)(a1 + 2072))
      {
        re::deinitVideoPresentationGroup(a1 + 272 + 896 * (*(void *)(a1 + 2064) & 1));
        uint64_t v31 = *(void *)(a1 + 2064) + 1;
        *(void *)(a1 + 2064) = v31;
        if (v31 != *(void *)(a1 + 2072)) {
          continue;
        }
      }
      goto LABEL_37;
    }
    uint64_t v32 = (unsigned __int8 *)re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v30);
    if (v32[480] == *(unsigned __int8 *)(a1 + 7048))
    {
      unint64_t v34 = v216;
      unsigned int v35 = (re::VideoDefaults *)re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v33);
      if (v34 == *((void *)v35 + 3))
      {
        if (!v216)
        {
LABEL_31:
          CMTimeScale v29 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v35);
          if (v29)
          {
            if (*(void *)(a1 + 2064) != *(void *)(a1 + 2072))
            {
              v42 = *re::videoLogObjects(v29);
              CMTimeScale v29 = (re::VideoDefaults *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
              if (v29)
              {
                LOWORD(buf.value) = 0;
                _os_log_impl(&dword_233120000, v42, OS_LOG_TYPE_DEFAULT, "Presentation group found for presentation time.", (uint8_t *)&buf, 2u);
              }
            }
          }
LABEL_37:
          if (*(void *)(a1 + 2064) == *(void *)(a1 + 2072))
          {
            unint64_t v44 = (re *)re::VideoDefaults::logEnabled(v29);
            if (v44)
            {
              uint64_t v151 = *re::videoLogObjects(v44);
              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.value) = 0;
                _os_log_impl(&dword_233120000, v151, OS_LOG_TYPE_DEFAULT, "Presentation group not found for presentation time. Creating a new presentation group.", (uint8_t *)&buf, 2u);
              }
            }
            CMTime buf = *v18;
            uint64_t v223 = 0;
            LODWORD(v224) = 0;
            *(void *)&long long v225 = 0;
            DWORD2(v225) = 0;
            uint64_t v227 = 0;
            int v228 = 0;
            uint64_t v229 = 0;
            int v230 = 0;
            uint64_t v231 = 0;
            int v232 = 0;
            uint64_t v233 = 0;
            int v234 = 0;
            uint64_t v235 = 0;
            int v236 = 0;
            uint64_t v237 = 0;
            int v238 = 0;
            uint64_t v239 = 0;
            int v240 = 0;
            uint64_t v241 = 0;
            int v242 = 0;
            uint64_t v245 = 0;
            int v246 = 0;
            uint64_t v247 = 0;
            int v248 = 0;
            uint64_t v249 = 0;
            char v250 = 0;
            __int16 v254 = 0;
            char v255 = 0;
            char v244 = 0;
            long long v243 = 0u;
            long long v251 = 0u;
            long long v252 = 0u;
            long long v253 = 0u;
            int v256 = -1;
            uint64_t v259 = 0;
            int v260 = 0;
            uint64_t v261 = 0;
            int v262 = 0;
            uint64_t v263 = 0;
            int v264 = 0;
            uint64_t v265 = 0;
            int v266 = 0;
            uint64_t v267 = 0;
            int v268 = 0;
            char v269 = 0;
            long long v257 = 0u;
            int v258 = 0;
            uint64_t v270 = 1;
            char v271 = 0;
            int v45 = (*(unsigned __int8 *)(a1 + 7048) >> 3) & 1;
            CMTime v211 = v220;
            unint64_t v46 = (objc_class *)v216;
            int v208 = 0;
            memcpy(v209, v218, 8 * v216);
            v207.Class isa = v46;
            v209[1] = *(_OWORD *)v219;
            v209[2] = *(_OWORD *)&v219[16];
            int v210 = *(_DWORD *)&v219[32];
            int v47 = (re *)populatePresentationGroup((long long *)&v211.value, &v207, a1, a5, a6, a7, a8, (uint64_t)&buf, a12, v17, v45);
            uint64_t v48 = (uint64_t)v47;
            v207.Class isa = 0;
            int v208 = 1;
            if (v47)
            {
              unint64_t v49 = *re::videoLogObjects(v47);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v199 = 0;
                _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "Could not populate current presentation group using buffer group", v199, 2u);
              }
LABEL_47:
              re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&buf);
              goto LABEL_201;
            }
            uint64_t v50 = *(void *)(a1 + 2072);
            if (v50 - *(void *)(a1 + 2064) == 2)
            {
              uint64_t v51 = *re::videoLogObjects(v47);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v199 = 0;
                _os_log_error_impl(&dword_233120000, v51, OS_LOG_TYPE_ERROR, "Unable to enqueue new presentation group.", v199, 2u);
              }
              uint64_t v48 = 1;
              goto LABEL_47;
            }
            uint64_t v52 = a1 + 896 * (*(void *)(a1 + 2072) & 1);
            *(void *)(a1 + 2072) = v50 + 1;
            re::VideoPresentationGroup::operator=(v52 + 272, (long long *)&buf.value);
            re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&buf);
            uint64_t v28 = a12;
          }
          double v170 = (re *)(a1 + 256);
          double v171 = (CVPixelBufferRef *)v28;
          uint64_t v53 = re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v30);
          uint64_t v54 = v53;
          char v55 = (unsigned int **)(v53 + 816);
          if (*(void *)(v53 + 800))
          {
            unint64_t v56 = 0;
            size_t v57 = (unsigned int **)(v53 + 816);
            do
            {
              unsigned int v58 = atomic_load(*v57);
              if (v58 != 8) {
                goto LABEL_86;
              }
              ++v56;
              v57 += 2;
            }
            while (v56 < *(void *)(v53 + 800));
          }
          unint64_t v59 = *(void *)(v53 + 48);
          if (v59)
          {
            unint64_t v60 = 0;
            while (1)
            {
              *(void *)v199 = 0;
              re::VideoObject<re::VideoTextureBase>::setRef((int)v199, (__CVBuffer **)v199, *(CVPixelBufferRef *)(v54 + 64 + 8 * v60));
              id v61 = re::VideoLightSpillGenerator::CanGenerateForPixelBuffer((__CVBuffer **)v199);
              char v62 = (char)v61;
              if (*(void *)v199) {
                re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)v199);
              }
              *(void *)v199 = 0;
              if ((v62 & 1) == 0) {
                break;
              }
              ++v60;
              unint64_t v59 = *(void *)(v54 + 48);
              if (v60 >= v59) {
                goto LABEL_59;
              }
            }
            int v75 = (re *)re::VideoDefaults::logEnabled(v61);
            if (v75)
            {
              uint64_t v153 = *re::videoLogObjects(v75);
              if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.value) = 0;
                _os_log_impl(&dword_233120000, v153, OS_LOG_TYPE_DEFAULT, "Cannot generate light spill for pixel buffer because its pixel format is not supported.", (uint8_t *)&buf, 2u);
              }
            }
            goto LABEL_86;
          }
LABEL_59:
          if (*(void *)(v54 + 336)
            || !*(void *)(a1 + 4800)
            || *(int *)(a1 + 4784) < 1
            || *(int *)(a1 + 4788) < 1
            || !v59
            || (*(_DWORD *)(a1 + 4792) & 0x80000000) != 0)
          {
LABEL_60:
            if (!*(void *)(v54 + 432)
              && (*(unsigned char *)(a1 + 7048) & 4) != 0
              && *(void *)(a1 + 4824)
              && *(int *)(a1 + 4808) >= 1
              && *(int *)(a1 + 4812) >= 1
              && v59
              && (*(_DWORD *)(a1 + 4816) & 0x80000000) == 0)
            {
              unint64_t v63 = 0;
              uint64_t v64 = v54 + 64;
              do
              {
                uint64_t v65 = *(__CVBuffer **)(v64 + 8 * v63);
                texture[0] = 0;
                long long v66 = (re *)re::VideoLightSpillGenerator::generate(a1 + 4808, v65, texture);
                if (v66)
                {
                  int v67 = *re::videoLogObjects(v66);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(buf.value) = 0;
                    _os_log_error_impl(&dword_233120000, v67, OS_LOG_TYPE_ERROR, "Unable to generate specular light spill pixel buffer.", (uint8_t *)&buf, 2u);
                  }
                }
                else
                {
                  memset(&buf, 0, sizeof(buf));
                  TexturesFromPixelBuffer = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer((re::VideoTextureCache *)(a1 + 216), texture[0], (re::VideoPixelBufferTextures *)&buf, 1);
                  if (TexturesFromPixelBuffer)
                  {
                    uint64_t v69 = *re::videoLogObjects(TexturesFromPixelBuffer);
                    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(v206.value) = 0;
                      _os_log_error_impl(&dword_233120000, v69, OS_LOG_TYPE_ERROR, "Unable to generate specular light spill texture.", (uint8_t *)&v206, 2u);
                    }
                  }
                  else
                  {
                    CVPixelBufferRef v70 = texture[0];
                    v206.CMTimeValue value = (CMTimeValue)texture[0];
                    CVPixelBufferRetain(texture[0]);
                    re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(void *)(v54 + 304), v71);
                    uint64_t v72 = *(void *)(v54 + 304);
                    *(void *)(v54 + 320 + 8 * v72) = v70;
                    *(void *)(v54 + 304) = v72 + 1;
                    ++*(_DWORD *)(v54 + 312);
                    v205.CMTimeValue value = 0;
                    re::VideoObject<re::VideoTextureBase>::setRef((int)&v205, (__CVBuffer **)&v205, (CVPixelBufferRef)buf.value);
                    re::VideoTextureBase::metalTexture((__CVBuffer **)&v205, &v206);
                    if (v205.value) {
                      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v205);
                    }
                    CMTimeValue value = (void *)v206.value;
                    re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::add(v54 + 432, (id)v206.value);
                    if (value) {
                  }
                    }
                  for (uint64_t i = 16; i != -8; i -= 8)
                  {
                    if (*(CMTimeValue *)((char *)&buf.value + i)) {
                      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)((char *)&buf + i));
                    }
                    *(CMTimeValue *)((char *)&buf.value + i) = 0;
                  }
                  uint64_t v64 = v54 + 64;
                }
                CVPixelBufferRelease(texture[0]);
                ++v63;
              }
              while (v63 < *(void *)(v54 + 48));
            }
LABEL_86:
            uint64_t v76 = (CMTime *)MEMORY[0x263F01090];
            if (a3)
            {
              if (*(void *)(v54 + 800))
              {
                unint64_t v77 = 0;
                while (1)
                {
                  unsigned int v78 = atomic_load(*v55);
                  if (v78 != 8) {
                    break;
                  }
                  ++v77;
                  v55 += 2;
                  if (v77 >= *(void *)(v54 + 800)) {
                    goto LABEL_91;
                  }
                }
              }
              else
              {
LABEL_91:
                if (*(void *)(v54 + 48))
                {
                  unint64_t v79 = 0;
                  uint64_t v80 = (__CVBuffer **)(v54 + 64);
                  do
                  {
                    *(void *)v199 = 0;
                    re::VideoObject<re::VideoTextureBase>::setRef((int)v199, (__CVBuffer **)v199, v80[v79]);
                    unint64_t v81 = re::VideoLightSpillGenerator::CanGenerateForPixelBuffer((__CVBuffer **)v199);
                    char v82 = (char)v81;
                    if (*(void *)v199) {
                      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)v199);
                    }
                    *(void *)v199 = 0;
                    if ((v82 & 1) == 0)
                    {
                      unsigned __int8 v106 = (re *)re::VideoDefaults::logEnabled(v81);
                      if (v106)
                      {
                        v155 = *re::videoLogObjects(v106);
                        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(buf.value) = 0;
                          _os_log_impl(&dword_233120000, v155, OS_LOG_TYPE_DEFAULT, "Cannot generate video blur for pixel buffer because its pixel format is not supported.", (uint8_t *)&buf, 2u);
                        }
                      }
                      goto LABEL_149;
                    }
                    ++v79;
                    unint64_t v83 = *(void *)(v54 + 48);
                  }
                  while (v79 < v83);
                  if (v83
                    && *(void *)(a1 + 7072)
                    && *(int *)(a1 + 7056) >= 1
                    && *(int *)(a1 + 7060) >= 1
                    && (*(_DWORD *)(a1 + 7064) & 0x80000000) == 0)
                  {
                    double v84 = *v80;
                    texture[0] = 0;
                    double v85 = (re *)re::VideoLightSpillGenerator::generate(a1 + 7056, v84, texture);
                    if (v85)
                    {
                      double v86 = *re::videoLogObjects(v85);
                      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(buf.value) = 0;
                        _os_log_error_impl(&dword_233120000, v86, OS_LOG_TYPE_ERROR, "Unable to generate video blur texture.", (uint8_t *)&buf, 2u);
                      }
LABEL_236:
                      CVPixelBufferRelease(texture[0]);
                      goto LABEL_149;
                    }
                    memset(&buf, 0, sizeof(buf));
                    v123 = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer((re::VideoTextureCache *)(a1 + 216), texture[0], (re::VideoPixelBufferTextures *)&buf, 1);
                    if (v123)
                    {
                      uint64_t v124 = *re::videoLogObjects(v123);
                      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(v206.value) = 0;
                        _os_log_error_impl(&dword_233120000, v124, OS_LOG_TYPE_ERROR, "Unable to generate video blur texture.", (uint8_t *)&v206, 2u);
                      }
LABEL_232:
                      for (uint64_t j = 16; j != -8; j -= 8)
                      {
                        if (*(CMTimeValue *)((char *)&buf.value + j)) {
                          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)((char *)&buf + j));
                        }
                        *(CMTimeValue *)((char *)&buf.value + j) = 0;
                      }
                      goto LABEL_236;
                    }
                    CVPixelBufferRef v140 = texture[0];
                    CVPixelBufferRetain(texture[0]);
                    *(void *)(v54 + 464) = v140;
                    unsigned int v141 = (id *)(a6 + 184);
                    id v142 = *(id *)(a6 + 184);
                    v205.CMTimeValue value = 0;
                    re::VideoObject<re::VideoTextureBase>::setRef((int)&v205, (__CVBuffer **)&v205, (CVPixelBufferRef)buf.value);
                    re::VideoTextureBase::metalTexture((__CVBuffer **)&v205, &v206);
                    if (v205.value) {
                      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v205);
                    }
                    v205.CMTimeValue value = 0;
                    if (re::VideoDefaults::lightSpillTextureAllocatorEnabled(v143))
                    {
                      if (!*(void *)(a1 + 208))
                      {
                        id v144 = *v141;
                        v204.CMTimeValue value = (CMTimeValue)v144;
                        if (!*(void *)(a1 + 208))
                        {
                          re::ObjCObject::operator=((id *)(a1 + 208), (id *)&v204);
                          id v144 = (id)v204.value;
                        }
                      }
                      size_t Width = CVPixelBufferGetWidth(texture[0]);
                      size_t Height = CVPixelBufferGetHeight(texture[0]);
                      re::VideoTextureAllocator::createTextureInternal(a1 + 160, Width, Height, 115, 2, 3u, 0, 0, (unint64_t *)&v203, *(void *)(v54 + 576));
                      NS::SharedPtr<MTL::Texture>::operator=((void **)&v205, (void **)&v203);
                      unint64_t v147 = (void *)v203.value;
                      if (!v203.value) {
                        goto LABEL_221;
                      }
                    }
                    else
                    {
                      id v148 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
                      objc_msgSend(v148, sel_setStorageMode_, 2);
                      objc_msgSend(v148, sel_setPixelFormat_, 115);
                      objc_msgSend(v148, sel_setWidth_, CVPixelBufferGetWidth(texture[0]));
                      objc_msgSend(v148, sel_setHeight_, CVPixelBufferGetHeight(texture[0]));
                      objc_msgSend(v148, sel_setUsage_, 3);
                      objc_msgSend(v148, sel_setProtectionOptions_, *(void *)(v54 + 576));
                      re::mtl::Device::makeTexture(v148, v141, &v204);
                      NS::SharedPtr<MTL::Texture>::operator=((void **)&v205, (void **)&v204);
                      if (v204.value) {

                      }
                      if (!v148) {
                        goto LABEL_221;
                      }
                      unint64_t v147 = v148;
                    }

LABEL_221:
                    if (v205.value)
                    {
                      int v149 = *(os_unfair_lock_s **)(a6 + 64);
                      v203.CMTimeValue value = (CMTimeValue)(id)v206.value;
                      v196.CMTimeValue value = (CMTimeValue)(id)v205.value;
                      re::TextureManager::queueBlurGeneration(v149, (void **)&v203, (void **)&v196, 1);
                      if (v196.value)
                      {

                        v196.CMTimeValue value = 0;
                      }
                      if (v203.value)
                      {

                        v203.CMTimeValue value = 0;
                      }
                      NS::SharedPtr<MTL::Texture>::operator=((void **)&v206, (void **)&v205);
                    }
                    NS::SharedPtr<MTL::Texture>::operator=((void **)(v54 + 472), (void **)&v205);
                    if (v205.value) {

                    }
                    if (v206.value) {
                    uint64_t v76 = (CMTime *)MEMORY[0x263F01090];
                    }
                    goto LABEL_232;
                  }
                }
              }
            }
LABEL_149:
            if ((__src ^ 1 | v178) == 1 && *(void *)(a1 + 2072) - *(void *)(a1 + 2064) != *(void *)(a1 + 256))
            {
              v108 = (re *)re::VideoDefaults::logEnabled(v107);
              if (v108)
              {
                uint64_t v152 = *re::videoLogObjects(v108);
                if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf.value) = 0;
                  _os_log_impl(&dword_233120000, v152, OS_LOG_TYPE_DEFAULT, "Attempting to fill presentation queue with 1 more group.", (uint8_t *)&buf, 2u);
                }
              }
              CMTime v206 = *v76;
              uint64_t v109 = *(void *)(a1 + 2072);
              if (*(void *)(a1 + 2064) != v109) {
                CMTime v206 = *(CMTime *)(a1 + 896 * ((v109 & 1) == 0) + 272);
              }
              memset(&v205, 0, sizeof(v205));
              CMTimeMake(&v205, 0, 1000);
              CMTime v204 = v206;
              memset(&v203, 0, sizeof(v203));
              CMTimeMake(&v203, 10, 1000);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79118, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_26AF79118))
              {
                _MergedGlobals_76 = (uint64_t)re::retrievePresentationGroupForTime(re::VideoPlaybackContext *,re::VideoObject<re::VideoReceiverBase> &,BOOL,CMTime,re::VideoManager &,re::RenderManager const&,re::TargetDisplayInfoProvider const&,re::ColorManager const&,re::TextureManager const*,unsigned long long,re::VideoPresentationGroup &,re::ecs2::HDRDumpInfo &,NSObject  {objcproto17OS_dispatch_queue}*,re::FixedInlineArray<re::VideoPixelBuffers,2ul> *,BOOL)::$_0::operator()();
                __cxa_guard_release(&qword_26AF79118);
              }
              uint64_t v110 = 0;
              *(void *)v199 = 0;
              int v200 = 0;
              *(void *)v202 = 0;
              *(_DWORD *)&v202[8] = -1;
              *(_OWORD *)&v202[12] = *MEMORY[0x263F01090];
              *(void *)&v202[28] = *(void *)(MEMORY[0x263F01090] + 16);
              while (1)
              {
                CMTime lhs = v205;
                CMTime rhs = v203;
                CMTimeAdd(&buf, &lhs, &rhs);
                CMTime v205 = buf;
                memset(&v196, 0, sizeof(v196));
                CMTime v195 = *v173;
                CMTime v194 = buf;
                CMTimeAdd(&v196, &v195, &v194);
                if (a14 && (*(unsigned char *)(a14 + 128) & 1) != 0 && *(void *)(a14 + 72))
                {
                  id v111 = v17;
                  uint64_t v112 = (re *)re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)v199, (uint64_t *)a14);
                  long long v113 = *(_OWORD *)(a14 + 48);
                  *(_OWORD *)v202 = *(_OWORD *)(a14 + 32);
                  *(_OWORD *)&v202[16] = v113;
                  *(_DWORD *)&v202[32] = *(_DWORD *)(a14 + 64);
                  if (*(void *)v199)
                  {
                    uint64_t v114 = 8 * *(void *)v199;
                    v115 = (CVPixelBufferRef *)v201;
                    do
                    {
                      uint64_t v112 = CVPixelBufferRetain(*v115++);
                      v114 -= 8;
                    }
                    while (v114);
                  }
                  CMTime v220 = *(CMTime *)&v219[12];
                  id v17 = v111;
                }
                else
                {
                  CMTime v193 = v196;
                  re::retrievePixelBuffersWithVideoReceiver(&buf.value, v172, &v193, (uint64_t)&v204);
                  uint64_t v112 = (re *)re::DynamicInlineArray<__CVBuffer *,2ul>::move((unint64_t *)v199, (unint64_t *)&buf);
                  ++v200;
                  *(_OWORD *)v202 = v224;
                  *(_OWORD *)&v202[16] = v225;
                  *(_DWORD *)&v202[32] = v226;
                }
                if ((v204.flags & 1) == 0)
                {
                  uint64_t v117 = *re::videoLogObjects(v112);
                  if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(buf.value) = 0;
                    _os_log_error_impl(&dword_233120000, v117, OS_LOG_TYPE_ERROR, "Invalid presentation time sampled for future host time.", (uint8_t *)&buf, 2u);
                  }
                  goto LABEL_185;
                }
                CMTime v192 = v206;
                CMTime v191 = v204;
                v116 = (re::VideoDefaults *)CMTimeCompare(&v192, &v191);
                if ((v116 & 0x80000000) != 0) {
                  break;
                }
                if (++v110 == 5) {
                  goto LABEL_185;
                }
              }
              unint64_t v118 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v116);
              if (v118)
              {
                unint64_t v156 = v216;
                if (v216)
                {
                  unint64_t v157 = 0;
                  do
                  {
                    unint64_t v158 = v157 + 1;
                    objc_msgSend(MEMORY[0x263F089D8], "stringWithFormat:", @"Pixel Buffer %zu of %zu", v157 + 1, v156);
                    uint64_t v159 = (__CVBuffer *)objc_claimAutoreleasedReturnValue();
                    size_t v160 = (re::CoreVideoUtils **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[](&v216, v157);
                    re::CoreVideoUtils::printPixelBufferInfo(*v160, v159, v161);
                    v163 = (id)*re::videoLogObjects(v162);
                    if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                    {
                      CMTimeValue v164 = [(__CVBuffer *)v159 cStringUsingEncoding:1];
                      LODWORD(buf.value) = 136315138;
                      *(CMTimeValue *)((char *)&buf.value + 4) = v164;
                      _os_log_impl(&dword_233120000, v163, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
                    }

                    unint64_t v156 = v216;
                    unint64_t v157 = v158;
                  }
                  while (v158 < v216);
                }
              }
              uint64_t v119 = (re *)re::VideoDefaults::logEnabled(v118);
              if (v119)
              {
                uint64_t v165 = (id)*re::videoLogObjects(v119);
                if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                {
                  CMTime v190 = v204;
                  Float64 Seconds = CMTimeGetSeconds(&v190);
                  LODWORD(buf.value) = 134217984;
                  *(Float64 *)((char *)&buf.value + 4) = Seconds;
                  _os_log_impl(&dword_233120000, v165, OS_LOG_TYPE_DEFAULT, "Creating presentation queue group for future presentation Time: %.3f", (uint8_t *)&buf, 0xCu);
                }
              }
              CMTime buf = *(CMTime *)*(void *)&MEMORY[0x263F01090];
              uint64_t v223 = 0;
              LODWORD(v224) = 0;
              *(void *)&long long v225 = 0;
              DWORD2(v225) = 0;
              uint64_t v227 = 0;
              int v228 = 0;
              uint64_t v229 = 0;
              int v230 = 0;
              uint64_t v231 = 0;
              int v232 = 0;
              uint64_t v233 = 0;
              int v234 = 0;
              uint64_t v235 = 0;
              int v236 = 0;
              uint64_t v237 = 0;
              int v238 = 0;
              uint64_t v239 = 0;
              int v240 = 0;
              uint64_t v241 = 0;
              int v242 = 0;
              uint64_t v245 = 0;
              int v246 = 0;
              uint64_t v247 = 0;
              int v248 = 0;
              uint64_t v249 = 0;
              char v250 = 0;
              __int16 v254 = 0;
              char v255 = 0;
              char v244 = 0;
              long long v243 = 0u;
              long long v251 = 0u;
              long long v252 = 0u;
              long long v253 = 0u;
              int v256 = -1;
              uint64_t v259 = 0;
              int v260 = 0;
              uint64_t v261 = 0;
              int v262 = 0;
              uint64_t v263 = 0;
              int v264 = 0;
              uint64_t v265 = 0;
              int v266 = 0;
              uint64_t v267 = 0;
              int v268 = 0;
              char v269 = 0;
              long long v257 = 0u;
              int v258 = 0;
              uint64_t v270 = 1;
              char v271 = 0;
              LOBYTE(texture[0]) = 0;
              memset(&texture[1], 0, 24);
              re::DynamicString::DynamicString((re::DynamicString *)&v188);
              CMTime v186 = v204;
              int v183 = 0;
              v120 = *(objc_class **)v199;
              memcpy(v184, v201, 8 * *(void *)v199);
              v182.Class isa = v120;
              v184[1] = *(_OWORD *)v202;
              v184[2] = *(_OWORD *)&v202[16];
              int v185 = *(_DWORD *)&v202[32];
              unint64_t v121 = v171;
              if (*(void *)(a1 + 2064) == *(void *)(a1 + 2072)) {
                unint64_t v121 = texture;
              }
              uint64_t v48 = populatePresentationGroup((long long *)&v186.value, &v182, a1, a5, a6, a7, a8, (uint64_t)&buf, (uint64_t)v121, v17, 0);
              if (v48)
              {
                v122 = *re::videoLogObjects(v170);
                if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(v221[0]) = 0;
                  _os_log_error_impl(&dword_233120000, v122, OS_LOG_TYPE_ERROR, "Could not populate future presentation group using future buffer group", (uint8_t *)v221, 2u);
                }
                if (v188 && (v189 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v188 + 40))();
                }
                goto LABEL_47;
              }
              re::VideoPresentationQueue::push(v170, (const re::VideoPresentationGroup *)&buf);
              if (v188 && (v189 & 1) != 0) {
                (*(void (**)(void))(*(void *)v188 + 40))();
              }
              re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&buf);
            }
LABEL_185:
            re::VideoPresentationGroup::operator=(a11, (long long *)v54);
            uint64_t v48 = 0;
            goto LABEL_201;
          }
          unint64_t v87 = 0;
          uint64_t v88 = v54 + 64;
          unint64_t v169 = (id *)(a6 + 184);
          location = (id *)(a1 + 208);
          while (1)
          {
            double v89 = *(__CVBuffer **)(v88 + 8 * v87);
            texture[0] = 0;
            double v90 = (re *)re::VideoLightSpillGenerator::generate(a1 + 4784, v89, texture);
            if (!v90) {
              break;
            }
            double v91 = *re::videoLogObjects(v90);
            if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.value) = 0;
              _os_log_error_impl(&dword_233120000, v91, OS_LOG_TYPE_ERROR, "Unable to generate diffuse light spill pixel buffer.", (uint8_t *)&buf, 2u);
            }
LABEL_146:
            CVPixelBufferRelease(texture[0]);
            ++v87;
            unint64_t v59 = *(void *)(v54 + 48);
            if (v87 >= v59) {
              goto LABEL_60;
            }
          }
          memset(&buf, 0, sizeof(buf));
          double v92 = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer((re::VideoTextureCache *)(a1 + 216), texture[0], (re::VideoPixelBufferTextures *)&buf, 1);
          if (v92)
          {
            unint64_t v93 = *re::videoLogObjects(v92);
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v206.value) = 0;
              _os_log_error_impl(&dword_233120000, v93, OS_LOG_TYPE_ERROR, "Unable to generate diffuse light spill texture.", (uint8_t *)&v206, 2u);
            }
LABEL_141:
            for (uint64_t k = 16; k != -8; k -= 8)
            {
              if (*(CMTimeValue *)((char *)&buf.value + k)) {
                re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)((char *)&buf + k));
              }
              *(CMTimeValue *)((char *)&buf.value + k) = 0;
            }
            uint64_t v88 = v54 + 64;
            goto LABEL_146;
          }
          CVPixelBufferRef v94 = texture[0];
          v206.CMTimeValue value = (CMTimeValue)texture[0];
          CVPixelBufferRetain(texture[0]);
          re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(void *)(v54 + 272), v95);
          uint64_t v96 = *(void *)(v54 + 272);
          *(void *)(v54 + 288 + 8 * v96) = v94;
          *(void *)(v54 + 272) = v96 + 1;
          ++*(_DWORD *)(v54 + 280);
          re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(v54 + 336, (uint64_t)&buf);
          id v97 = *v169;
          v205.CMTimeValue value = 0;
          re::VideoObject<re::VideoTextureBase>::setRef((int)&v205, (__CVBuffer **)&v205, (CVPixelBufferRef)buf.value);
          re::VideoTextureBase::metalTexture((__CVBuffer **)&v205, &v206);
          if (v205.value) {
            re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v205);
          }
          v205.CMTimeValue value = 0;
          if (re::VideoDefaults::lightSpillTextureAllocatorEnabled(v98))
          {
            if (!*location)
            {
              id v99 = *v169;
              v204.CMTimeValue value = (CMTimeValue)v99;
              if (!*location)
              {
                re::ObjCObject::operator=(location, (id *)&v204);
                id v99 = (id)v204.value;
              }
            }
            size_t v100 = CVPixelBufferGetWidth(texture[0]);
            size_t v101 = CVPixelBufferGetHeight(texture[0]);
            re::VideoTextureAllocator::createTextureInternal(a1 + 160, v100, v101, 115, 2, 3u, 0, 0, (unint64_t *)&v203, *(void *)(v54 + 576));
            NS::SharedPtr<MTL::Texture>::operator=((void **)&v205, (void **)&v203);
            IOSurfaceRef v102 = (void *)v203.value;
            if (!v203.value) {
              goto LABEL_131;
            }
          }
          else
          {
            id v103 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
            objc_msgSend(v103, sel_setStorageMode_, 2);
            objc_msgSend(v103, sel_setPixelFormat_, 115);
            objc_msgSend(v103, sel_setWidth_, CVPixelBufferGetWidth(texture[0]));
            objc_msgSend(v103, sel_setHeight_, CVPixelBufferGetHeight(texture[0]));
            objc_msgSend(v103, sel_setUsage_, 3);
            objc_msgSend(v103, sel_setProtectionOptions_, *(void *)(v54 + 576));
            re::mtl::Device::makeTexture(v103, v169, &v203);
            NS::SharedPtr<MTL::Texture>::operator=((void **)&v205, (void **)&v203);
            if (v203.value) {

            }
            if (!v103) {
              goto LABEL_131;
            }
            IOSurfaceRef v102 = v103;
          }

LABEL_131:
          IOSurfaceRef v104 = (void *)v206.value;
          if (v205.value)
          {
            double v168 = *(os_unfair_lock_s **)(a6 + 64);
            v196.CMTimeValue value = (CMTimeValue)(id)v206.value;
            v221[0] = (id)v205.value;
            re::TextureManager::queueBlurGeneration(v168, (void **)&v196, v221, 1);
            if (v221[0])
            {

              v221[0] = 0;
            }
            if (v196.value)
            {

              v196.CMTimeValue value = 0;
            }
            re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::add(v54 + 400, (id)v205.value);
            if (v205.value) {
          }
            }
          if (v104) {

          }
          goto LABEL_141;
        }
        unint64_t v36 = 0;
        while (1)
        {
          IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)v218[v36]);
          IOSurfaceID ID = IOSurfaceGetID(IOSurface);
          unsigned int v35 = (re::VideoDefaults *)re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v39);
          unint64_t v41 = *((void *)v35 + 3);
          if (v41 <= v36) {
            break;
          }
          if (ID != *((_DWORD *)v35 + v36 + 9)) {
            goto LABEL_203;
          }
          if (++v36 >= v216) {
            goto LABEL_31;
          }
        }
        re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v36, v41);
        unsigned int v35 = (re::VideoDefaults *)_os_crash();
        __break(1u);
LABEL_203:
        uint64_t v138 = *re::videoLogObjects(v35);
        if (!os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        {
LABEL_206:
          re::VideoPresentationQueue::clear((re::VideoPresentationQueue *)(a1 + 256));
          goto LABEL_31;
        }
        LOWORD(buf.value) = 0;
        uint64_t v139 = "Surface IDs changed. Clearing.";
      }
      else
      {
        uint64_t v138 = *re::videoLogObjects(v35);
        if (!os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_206;
        }
        LOWORD(buf.value) = 0;
        uint64_t v139 = "Mismatched channel count. Clearing.";
      }
    }
    else
    {
      uint64_t v138 = *re::videoLogObjects((re *)v32);
      if (!os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_206;
      }
      LOWORD(buf.value) = 0;
      uint64_t v139 = "[VideoAssetUtillity]->retrievePresentationGroupForTime : : Options have changed and clearing the presentation queue";
    }
    _os_log_impl(&dword_233120000, v138, OS_LOG_TYPE_DEFAULT, v139, (uint8_t *)&buf, 2u);
    goto LABEL_206;
  }
LABEL_196:
  if (*(_DWORD *)(a2 + 8) == 1)
  {
LABEL_197:
    uint64_t v48 = 1;
    goto LABEL_201;
  }
  unint64_t v136 = *re::videoLogObjects(v25);
  if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.value) = 0;
    _os_log_error_impl(&dword_233120000, v136, OS_LOG_TYPE_ERROR, "Video receiver sample has no pixel buffers.", (uint8_t *)&buf, 2u);
  }
  uint64_t v48 = 1;
  *(_DWORD *)(a2 + 8) = 1;
LABEL_201:

  return v48;
}

void sub_23349C7AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_26AF79118);

  _Unwind_Resume(a1);
}

void anonymous namespace'::deinitLegacyBufferGroup(uint64_t a1)
{
  if (*(void *)a1)
  {
    unint64_t v2 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8 * v2++ + 16));
    while (v2 < *(void *)a1);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
}

CFDictionaryRef re::retrievePresentationGroupForTime(re::VideoPlaybackContext *,re::VideoObject<re::VideoReceiverBase> &,BOOL,CMTime,re::VideoManager &,re::RenderManager const&,re::TargetDisplayInfoProvider const&,re::ColorManager const&,re::TextureManager const*,unsigned long long,re::VideoPresentationGroup &,re::ecs2::HDRDumpInfo &,NSObject  {objcproto17OS_dispatch_queue}*,re::FixedInlineArray<re::VideoPixelBuffers,2ul> *,BOOL)::$_0::operator()()
{
  if (*MEMORY[0x263F12510]) {
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], MEMORY[0x263F12510], MEMORY[0x263EFFB40], 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  else {
    return 0;
  }
}

uint64_t re::VideoPresentationGroup::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)(a1 + 24), (unint64_t *)a2 + 3);
  if ((long long *)a1 != a2)
  {
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((void *)(a1 + 48), (void *)a2 + 6);
    ++*(_DWORD *)(a1 + 56);
    re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy((void *)(a1 + 80), (uint64_t *)a2 + 10);
    ++*(_DWORD *)(a1 + 88);
    re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy((void *)(a1 + 144), (uint64_t *)a2 + 18);
    ++*(_DWORD *)(a1 + 152);
    re::DynamicInlineArray<re::VideoMetalTextures,2ul>::copy((void *)(a1 + 208), (uint64_t *)a2 + 26);
    ++*(_DWORD *)(a1 + 216);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((void *)(a1 + 272), (void *)a2 + 34);
    ++*(_DWORD *)(a1 + 280);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((void *)(a1 + 304), (void *)a2 + 38);
    ++*(_DWORD *)(a1 + 312);
    re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy((void *)(a1 + 336), (uint64_t *)a2 + 42);
    ++*(_DWORD *)(a1 + 344);
    re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::copy((uint64_t *)(a1 + 400), (uint64_t *)a2 + 50);
    ++*(_DWORD *)(a1 + 408);
    re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::copy((uint64_t *)(a1 + 432), (uint64_t *)a2 + 54);
    ++*(_DWORD *)(a1 + 440);
  }
  re::VideoObject<re::VideoTextureBase>::setRef(a1 + 464, (__CVBuffer **)(a1 + 464), *((CVPixelBufferRef *)a2 + 58));
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 472), (void **)a2 + 59);
  *(unsigned char *)(a1 + 480) = *((unsigned char *)a2 + 480);
  re::DynamicInlineArray<re::Vector4<float>,2ul>::operator=((uint64_t *)(a1 + 496), (uint64_t *)a2 + 62);
  if ((long long *)a1 != a2)
  {
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::copy((void *)(a1 + 544), (void *)a2 + 68);
    ++*(_DWORD *)(a1 + 552);
    long long v5 = a2[36];
    long long v6 = a2[38];
    *(_OWORD *)(a1 + 592) = a2[37];
    *(_OWORD *)(a1 + 608) = v6;
    *(_OWORD *)(a1 + 576) = v5;
    long long v7 = a2[39];
    long long v8 = a2[40];
    long long v9 = a2[42];
    *(_OWORD *)(a1 + 656) = a2[41];
    *(_OWORD *)(a1 + 672) = v9;
    *(_OWORD *)(a1 + 624) = v7;
    *(_OWORD *)(a1 + 640) = v8;
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::copy((void *)(a1 + 688), (void *)a2 + 86);
    ++*(_DWORD *)(a1 + 696);
    re::DynamicInlineArray<re::VideoColorTags,2ul>::copy((void *)(a1 + 720), (void *)a2 + 90);
    ++*(_DWORD *)(a1 + 728);
    re::DynamicInlineArray<re::VideoColorTags,2ul>::copy((void *)(a1 + 744), (void *)a2 + 93);
    ++*(_DWORD *)(a1 + 752);
    re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::copy((uint64_t *)(a1 + 768), (uint64_t *)a2 + 96);
    ++*(_DWORD *)(a1 + 776);
    re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::copy((uint64_t *)(a1 + 800), (uint64_t *)a2 + 100);
    ++*(_DWORD *)(a1 + 808);
  }
  re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)(a1 + 848), (unint64_t *)a2 + 106);
  char v10 = *((unsigned char *)a2 + 888);
  *(_OWORD *)(a1 + 872) = *(long long *)((char *)a2 + 872);
  *(unsigned char *)(a1 + 888) = v10;
  return a1;
}

void re::logVideoInfo(re *this, const __CFArray *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(this);
  CFIndex v31 = Count;
  if (Count < 1)
  {
    char v10 = 0;
    char v9 = 0;
    char v8 = 0;
    char v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v5) = 0;
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    CFIndex v4 = 0;
    int v5 = 0;
    int v6 = 0;
    char v7 = 0;
    char v8 = 0;
    char v9 = 0;
    char v10 = 0;
    uint64_t v11 = (void *)MEMORY[0x263F01610];
    do
    {
      int v36 = v5;
      ValueAtIndex = (_anonymous_namespace_ *)CFArrayGetValueAtIndex(this, v4);
      *(void *)&v54.category = v11[1];
      else {
        char Tag = 0;
      }
      *(void *)&v13.category = v11[1];
      else {
        char v33 = 0;
      }
      *(void *)&v14.category = v11[1];
      {
        *(void *)&v15.category = *(void *)(MEMORY[0x263F01650] + 8);
      }
      else
      {
        char v32 = 0;
      }
      int v35 = v6;
      *(void *)&v15.category = v11[1];
      {
        *(void *)&v16.category = *(void *)(MEMORY[0x263F01660] + 8);
      }
      else
      {
        char v17 = 0;
      }
      *(void *)&v16.category = v11[1];
      else {
        char v19 = 0;
      }
      *(void *)&v18.category = v11[1];
      if (v20) {
      v3 |= Tag;
      }
      v10 |= v33;
      v9 |= v32;
      v8 |= v17;
      v7 |= v19;
      *(void *)&v21.category = *(void *)(MEMORY[0x263F01608] + 8);
      int v6 = v20 | v35;
      int v5 = Count | v36;
      ++v4;
    }
    while (v31 != v4);
  }
  long long v22 = *re::videoLogObjects((re *)Count);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = "✘";
    if (v3) {
      uint64_t v24 = "✔";
    }
    else {
      uint64_t v24 = "✘";
    }
    *(_DWORD *)CMTime buf = 134219778;
    CFIndex v38 = v31;
    if (v10) {
      float v25 = "✔";
    }
    else {
      float v25 = "✘";
    }
    __int16 v39 = 2080;
    uint64_t v40 = v24;
    if (v9) {
      unint64_t v26 = "✔";
    }
    else {
      unint64_t v26 = "✘";
    }
    __int16 v41 = 2080;
    v42 = v25;
    if (v8) {
      CMTime v27 = "✔";
    }
    else {
      CMTime v27 = "✘";
    }
    __int16 v43 = 2080;
    if (v7) {
      uint64_t v28 = "✔";
    }
    else {
      uint64_t v28 = "✘";
    }
    unint64_t v44 = v26;
    if (v6) {
      CMTimeScale v29 = "✔";
    }
    else {
      CMTimeScale v29 = "✘";
    }
    __int16 v45 = 2080;
    if (v5) {
      uint64_t v23 = "✔";
    }
    unint64_t v46 = v27;
    __int16 v47 = 2080;
    uint64_t v48 = v28;
    __int16 v49 = 2080;
    uint64_t v50 = v29;
    __int16 v51 = 2080;
    uint64_t v52 = v23;
    _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "Data channels changed. Number of video channels: %ld. Index 1 %s. Index 2 %s. Left eye channel %s. Right eye channel %s. SBS packed %s. O/U packed %s. Metadata %s", buf, 0x52u);
  }
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v2 = a2 + 48;
  uint64_t v3 = v4;
  *(_DWORD *)(a1 + 56) = 0;
  if (v4)
  {
    int v5 = (void *)(v2 + 16);
    int v6 = (void *)(a1 + 64);
    uint64_t v7 = 8 * v3;
    do
    {
      *int v6 = 0;
      *v6++ = *v5;
      *v5++ = 0;
      v7 -= 8;
    }
    while (v7);
  }
  *(void *)(a1 + 48) = v3;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v2);
}

void ___ZN2re18dumpHDRFrameToFileERNS_18DynamicInlineArrayINS_11VideoObjectINS_20VideoPixelBufferBaseEEELm2EEERKNS0_INS_7Vector4IfEELm2EEERKNS_12ColorManagerENS_4ecs211HDRDumpInfoEdbPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(void *a1)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1[4] + 8);
  if (!*(void *)(v1 + 48))
  {
LABEL_33:
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 48);
    return;
  }
  uint64_t v2 = a1;
  unint64_t v3 = 0;
  uint64_t v48 = (char *)a1 + 81;
  while (1)
  {
    uint64_t v4 = *(__CVBuffer **)(v1 + 8 * v3 + 64);
    int v5 = @"output";
    if (!*((unsigned char *)v2 + 112)) {
      int v5 = @"input";
    }
    uint64_t v53 = v5;
    unint64_t v6 = v2[10];
    unint64_t v7 = v6 >> 1;
    if ((v6 & 1) == 0) {
      unint64_t v7 = v6 >> 1;
    }
    if (v7)
    {
      char v8 = v48;
      if (v6) {
        char v8 = (char *)a1[11];
      }
      CMTag v54 = [NSString stringWithUTF8String:v8];
    }
    else
    {
      CMTag v54 = NSTemporaryDirectory();
    }
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v4, 0);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v4, 0);
    if (!CVPixelBufferIsPlanar(v4))
    {
      CVPixelBufferLockBaseAddress(v4, 1uLL);
      CMTag v13 = [NSString stringWithFormat:@"%@-width-%u-height-%u-bpr-%lu-time-%f-channel-%lu.raw", v53, WidthOfPlane, HeightOfPlane, CVPixelBufferGetBytesPerRow(v4), a1[13], v3];
      id v14 = [NSString stringWithFormat:@"%@/%@", v54, v13];
      CMTag v15 = (const char *)[v14 UTF8String];

      CMTag v16 = fopen(v15, "w+");
      if (v16)
      {
        size_t DataSize = CVPixelBufferGetDataSize(v4);
        BaseAddress = CVPixelBufferGetBaseAddress(v4);
        char v19 = (re *)fwrite(BaseAddress, DataSize, 1uLL, v16);
        if (v19 != (re *)1)
        {
          unint64_t v44 = *re::videoLogObjects(v19);
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
            goto LABEL_50;
          }
          *(_DWORD *)CMTime buf = 136315138;
          unint64_t v56 = v15;
          __int16 v43 = "[re::dumpHDRFrameToFile] Failed to write pixel buffer data to %s";
          goto LABEL_45;
        }
        int v20 = (re *)fclose(v16);
        if (v20)
        {
          unint64_t v44 = *re::videoLogObjects(v20);
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
            goto LABEL_50;
          }
          *(_DWORD *)CMTime buf = 136315138;
          unint64_t v56 = v15;
          __int16 v43 = "[re::dumpHDRFrameToFile] Failed to close %s";
LABEL_45:
          _os_log_error_impl(&dword_233120000, v44, OS_LOG_TYPE_ERROR, v43, buf, 0xCu);
          goto LABEL_50;
        }
      }
      else
      {
        unsigned int v37 = (re *)re::VideoDefaults::logEnabled(0);
        if (v37)
        {
          unint64_t v44 = *re::videoLogObjects(v37);
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
            goto LABEL_50;
          }
          *(_DWORD *)CMTime buf = 136315138;
          unint64_t v56 = v15;
          __int16 v43 = "[re::dumpHDRFrameToFile] Failed to open file %s";
          goto LABEL_45;
        }
      }
      CFIndex v38 = (re *)CVPixelBufferUnlockBaseAddress(v4, 1uLL);
      __int16 v39 = *re::videoLogObjects(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CMTime buf = 136315138;
        unint64_t v56 = v15;
        _os_log_impl(&dword_233120000, v39, OS_LOG_TYPE_DEFAULT, "[re::dumpHDRFrameToFile] Dumped pixel buffer to %s", buf, 0xCu);
      }
      goto LABEL_32;
    }
    CVPixelBufferLockBaseAddress(v4, 1uLL);
    PlaneCFIndex Count = CVPixelBufferGetPlaneCount(v4);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v4, 0);
    size_t v51 = PlaneCount < 2 ? 0 : CVPixelBufferGetBytesPerRowOfPlane(v4, 1uLL);
    size_t v50 = CVPixelBufferGetHeightOfPlane(v4, 1uLL);
    unint64_t v49 = PlaneCount;
    size_t v21 = CVPixelBufferGetWidthOfPlane(v4, 1uLL);
    long long v22 = NSString;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v4);
    unsigned __int8 v24 = CVPixelBufferGetPixelFormatType(v4) >> 16;
    unsigned __int8 v25 = (unsigned __int16)CVPixelBufferGetPixelFormatType(v4) >> 8;
    CMTag v13 = objc_msgSend(v22, "stringWithFormat:", @"%c%c%c%c", HIBYTE(PixelFormatType), v24, v25, CVPixelBufferGetPixelFormatType(v4));
    unint64_t v26 = [NSString stringWithFormat:@"%@-fmt-%@-width-%u-height-%u-stride-%u-cwidth-%u-cheight-%u-cstride-%u-time-%f-channel-%lu.raw", v53, v13, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, v21, v50, v51, a1[13], v3];
    id v27 = [NSString stringWithFormat:@"%@/%@", v54, v26];
    uint64_t v28 = (const char *)[v27 UTF8String];

    CMTimeScale v29 = fopen(v28, "w+");
    if (!v29) {
      break;
    }
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v4, 0);
    CFIndex v31 = (re *)fwrite(BaseAddressOfPlane, (BytesPerRowOfPlane * HeightOfPlane), 1uLL, v29);
    if (v31 != (re *)1)
    {
      __int16 v41 = *re::videoLogObjects(v31);
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      *(_DWORD *)CMTime buf = 136315138;
      unint64_t v56 = v28;
      v42 = "[re::dumpHDRFrameToFile] Failed to write luma data to %s";
LABEL_48:
      _os_log_error_impl(&dword_233120000, v41, OS_LOG_TYPE_ERROR, v42, buf, 0xCu);
      goto LABEL_49;
    }
    if (v49 >= 2)
    {
      char v32 = CVPixelBufferGetBaseAddressOfPlane(v4, 1uLL);
      if (v32)
      {
        char v33 = (re *)fwrite(v32, (v51 * v50), 1uLL, v29);
        if (v33 != (re *)1)
        {
          __int16 v41 = *re::videoLogObjects(v33);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            goto LABEL_49;
          }
          *(_DWORD *)CMTime buf = 136315138;
          unint64_t v56 = v28;
          v42 = "[re::dumpHDRFrameToFile] Failed to write chroma data to %s";
          goto LABEL_48;
        }
      }
    }
    unint64_t v34 = (re *)fclose(v29);
    if (v34)
    {
      __int16 v41 = *re::videoLogObjects(v34);
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      *(_DWORD *)CMTime buf = 136315138;
      unint64_t v56 = v28;
      v42 = "[re::dumpHDRFrameToFile] Failed to close %s";
      goto LABEL_48;
    }
    int v35 = (re *)CVPixelBufferUnlockBaseAddress(v4, 1uLL);
    int v36 = *re::videoLogObjects(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 136315138;
      unint64_t v56 = v28;
      _os_log_impl(&dword_233120000, v36, OS_LOG_TYPE_DEFAULT, "[re::dumpHDRFrameToFile] Dumped pixel buffer to %s", buf, 0xCu);
    }

LABEL_32:
    ++v3;
    uint64_t v2 = a1;
    uint64_t v1 = *(void *)(a1[4] + 8);
    if (v3 >= *(void *)(v1 + 48)) {
      goto LABEL_33;
    }
  }
  uint64_t v40 = (id)*re::videoLogObjects(0);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    NSTemporaryDirectory();
    id v46 = objc_claimAutoreleasedReturnValue();
    uint64_t v47 = [v46 UTF8String];
    *(_DWORD *)CMTime buf = 136315394;
    unint64_t v56 = v28;
    __int16 v57 = 2080;
    uint64_t v58 = v47;
    _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, "[re::dumpHDRFrameToFile] Failed to open file %s, please try with this directory %s", buf, 0x16u);
  }
LABEL_49:

LABEL_50:
}

void sub_23349D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

re::DynamicString *__copy_helper_block_ea8_40c27_ZTSN2re4ecs211HDRDumpInfoE(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  return re::DynamicString::DynamicString((re::DynamicString *)(a1 + 72), (const re::DynamicString *)(a2 + 72));
}

double __destroy_helper_block_ea8_40c27_ZTSN2re4ecs211HDRDumpInfoE(uint64_t a1)
{
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 72));
}

void anonymous namespace'::addFigTagGroupAndMetadata(_anonymous_namespace_ *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  long long v2 = (re *)FigDataChannelGroupCreate();
  if (!v2)
  {
    int v5 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
    if (v5)
    {
      int v6 = (int)v5;
      unint64_t v7 = *re::videoLogObjects(v5);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_9:
        CFRelease(cf);
        return;
      }
      *(_DWORD *)CMTime buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
    }
    else
    {
      long long v8 = *MEMORY[0x263F01600];
      *(_OWORD *)CMTime buf = *MEMORY[0x263F01608];
      long long v13 = v8;
      char v9 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
      if (!v9)
      {
        re::DynamicArray<re::RigDataValue *>::add(a1, &cf);
        return;
      }
      int v10 = (int)v9;
      unint64_t v7 = *re::videoLogObjects(v9);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      *(_DWORD *)CMTime buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
    }
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Failed to add a FigTag collection to channel group (error: %d).", buf, 8u);
    goto LABEL_9;
  }
  int v3 = (int)v2;
  uint64_t v4 = *re::videoLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)CMTime buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Failed to create Fig data channel group (error: %d).", buf, 8u);
  }
}

void anonymous namespace'::addFigTagGroup(_anonymous_namespace_ *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  long long v2 = (re *)FigDataChannelGroupCreate();
  if (v2)
  {
    int v3 = (int)v2;
    uint64_t v4 = *re::videoLogObjects(v2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 67109120;
      int v10 = v3;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Failed to create Fig data channel group (error: %d).", buf, 8u);
    }
  }
  else
  {
    int v5 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
    if (v5)
    {
      int v6 = (int)v5;
      unint64_t v7 = *re::videoLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 67109120;
        int v10 = v6;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Failed to add a FigTag collection to channel group (error: %d).", buf, 8u);
      }
      CFRelease(cf);
    }
    else
    {
      re::DynamicArray<re::RigDataValue *>::add(a1, &cf);
    }
  }
}

void re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if (*(void *)a1)
  {
    uint64_t v3 = v2 + 24 * *(void *)a1;
    uint64_t v4 = a1;
    do
    {
      v2 += 24;
      for (uint64_t i = 32; i != 8; i -= 8)
      {
        if (*(void *)(v4 + i)) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v4 + i));
        }
        *(void *)(v4 + i) = 0;
      }
      v4 += 24;
    }
    while (v2 != v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 16);
  if (*(void *)a1)
  {
    uint64_t v3 = 8 * *(void *)a1;
    do
    {
      if (*v2)
      {

        *uint64_t v2 = 0;
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::clear(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 16 * *(void *)a1;
    uint64_t v3 = (std::__shared_weak_count **)(a1 + 24);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:nn180100](*v3);
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t *re::DynamicInlineArray<__CVBuffer *,2ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *a2;
    unint64_t v4 = *a1;
    if (*a2 >= (unint64_t)*a1)
    {
      int v5 = a2 + 2;
      int v6 = &a2[v4 + 2];
      unint64_t v7 = a1 + 2;
      if (v4) {
        memmove(a1 + 2, a2 + 2, 8 * v4);
      }
      memcpy(&v7[v4], v6, (char *)&v5[v3] - (char *)v6);
    }
    else if (v3)
    {
      memmove(a1 + 2, a2 + 2, 8 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

unint64_t *re::DynamicInlineArray<__CVBuffer *,2ul>::move(unint64_t *result, unint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result;
  if (*a2 >= *result)
  {
    int v6 = (uint64_t *)(a2 + 2);
    uint64_t v7 = (uint64_t)&a2[v5 + 2];
    long long v8 = result + 2;
    if (v5) {
      memmove(result + 2, a2 + 2, 8 * v5);
    }
    id result = (unint64_t *)memcpy(&v8[v5], &a2[v5 + 2], (size_t)&v6[v4] - v7);
  }
  else if (v4)
  {
    id result = (unint64_t *)memmove(result + 2, a2 + 2, 8 * v4);
  }
  *uint64_t v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

void re::VideoPresentationGroup::~VideoPresentationGroup(re::VideoPresentationGroup *this)
{
  re::deinitVideoPresentationGroup((uint64_t)this);
  *((void *)this + 106) = 0;
  ++*((_DWORD *)this + 214);
  re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::clear((uint64_t)this + 800);
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear((uint64_t)this + 768);
  *((void *)this + 93) = 0;
  ++*((_DWORD *)this + 188);
  *((void *)this + 90) = 0;
  ++*((_DWORD *)this + 182);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear((uint64_t)this + 688);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear((uint64_t)this + 544);
  *((void *)this + 62) = 0;
  ++*((_DWORD *)this + 126);
  uint64_t v2 = (void *)*((void *)this + 59);
  if (v2)
  {

    *((void *)this + 59) = 0;
  }
  if (*((void *)this + 58)) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)this + 58);
  }
  *((void *)this + 58) = 0;
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear((uint64_t)this + 432);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear((uint64_t)this + 400);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear((uint64_t)this + 336);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)this + 304);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)this + 272);
  re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear((uint64_t)this + 208);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear((uint64_t)this + 144);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear((uint64_t)this + 80);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)this + 48);
  *((void *)this + 3) = 0;
  ++*((_DWORD *)this + 8);
}

void sub_23349DFC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 848) = 0;
  ++*(_DWORD *)(v1 + 856);
  re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::clear(v1 + 800);
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(v1 + 768);
  *(void *)(v1 + 744) = 0;
  ++*(_DWORD *)(v1 + 752);
  *(void *)(v1 + 720) = 0;
  ++*(_DWORD *)(v1 + 728);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(v1 + 688);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(v1 + 544);
  *(void *)(v1 + 496) = 0;
  ++*(_DWORD *)(v1 + 504);
  uint64_t v3 = *(void **)(v1 + 472);
  if (v3)
  {

    *(void *)(v1 + 472) = 0;
  }
  if (*(void *)(v1 + 464)) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v1 + 464));
  }
  *(void *)(v1 + 464) = 0;
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(v1 + 432);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(v1 + 400);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(v1 + 336);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 304);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 272);
  re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(v1 + 208);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(v1 + 144);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(v1 + 80);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 48);
  *(void *)(v1 + 24) = 0;
  ++*(_DWORD *)(v1 + 32);
  _Unwind_Resume(a1);
}

unint64_t *re::DynamicInlineArray<unsigned int,2ul>::operator=(unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    unint64_t v3 = *a2;
    unint64_t v4 = *a1;
    if (*a2 >= *a1)
    {
      unint64_t v5 = (char *)a2 + 12;
      int v6 = (char *)a2 + 4 * v4 + 12;
      uint64_t v7 = (uint64_t)a1 + 12;
      if (v4) {
        memmove((char *)a1 + 12, (char *)a2 + 12, 4 * v4);
      }
      memcpy((void *)(v7 + 4 * v4), v6, &v5[4 * v3] - v6);
    }
    else if (v3)
    {
      memmove((char *)a1 + 12, (char *)a2 + 12, 4 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

uint64_t *re::DynamicInlineArray<re::Vector4<float>,2ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *a2;
    unint64_t v4 = *a1;
    if (*a2 >= (unint64_t)*a1)
    {
      unint64_t v5 = a2 + 2;
      int v6 = &a2[2 * v4 + 2];
      uint64_t v7 = a1 + 2;
      if (v4) {
        memmove(a1 + 2, a2 + 2, 16 * v4);
      }
      memcpy(&v7[2 * v4], v6, (char *)&v5[2 * v3] - (char *)v6);
    }
    else if (v3)
    {
      memmove(a1 + 2, a2 + 2, 16 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

void re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy(void *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)(a2 + 2);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 2);
  if ((unint64_t)*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures*,0>(v3, v3 + 24 * *a1, v5);
    if (*a1 != v4)
    {
      uint64_t v10 = v3 + 24 * v4;
      uint64_t v11 = v3 + 24 * *a1;
      uint64_t v12 = &a1[3 * *a1];
      do
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          v12[i + 2] = 0;
          re::VideoObject<re::VideoTextureBase>::setRef(v12 + i * 8 + 16, (__CVBuffer **)&v12[i + 2], *(CVPixelBufferRef *)(v11 + i * 8));
        }
        v11 += 24;
        v12 += 3;
      }
      while (v11 != v10);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures*,0>(v3, v3 + 24 * v4, v5);
    if (v4 != *a1)
    {
      uint64_t v6 = v5 + 24 * *a1;
      uint64_t v7 = v5 + 24 * v4;
      long long v8 = &a1[3 * v4];
      do
      {
        v7 += 24;
        for (uint64_t j = 4; j != 1; --j)
        {
          if (v8[j]) {
            re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v8[j]);
          }
          v8[j] = 0;
        }
        v8 += 3;
      }
      while (v7 != v6);
    }
  }
  *a1 = v4;
}

void sub_23349E320(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v4 = (__CVBuffer **)(v2 + 8);
    uint64_t v5 = -v1;
    do
    {
      if (*v4) {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v4);
      }
      *v4-- = 0;
      v5 += 8;
    }
    while (v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      for (uint64_t i = 0; i != 24; i += 8)
        re::VideoObject<re::VideoTextureBase>::setRef(a3 + i, (__CVBuffer **)(a3 + i), *(CVPixelBufferRef *)(v4 + i));
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::VideoObject<re::VideoTextureBase>::setRef(int a1, __CVBuffer **a2, CVPixelBufferRef texture)
{
  if (*a2) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(a2);
  }
  *a2 = texture;
  if (texture)
  {
    CVPixelBufferRetain(texture);
  }
}

void re::DynamicInlineArray<re::VideoMetalTextures,2ul>::copy(void *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)(a2 + 2);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 2);
  if ((unint64_t)*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoMetalTextures const*,re::VideoMetalTextures const*,re::VideoMetalTextures*,0>(v3, v3 + 24 * *a1, v5);
    if (*a1 != v4)
    {
      uint64_t v11 = v3 + 24 * v4;
      uint64_t v12 = v3 + 24 * *a1;
      uint64_t v13 = v5 + 24 * *a1;
      do
      {
        for (uint64_t i = 0; i != 24; i += 8)
          *(void *)(v13 + i) = *(id *)(v12 + i);
        v12 += 24;
        v13 += 24;
      }
      while (v12 != v11);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoMetalTextures const*,re::VideoMetalTextures const*,re::VideoMetalTextures*,0>(v3, v3 + 24 * v4, v5);
    if (v4 != *a1)
    {
      uint64_t v6 = v5 + 24 * *a1;
      uint64_t v7 = v5 + 24 * v4;
      long long v8 = &a1[3 * v4];
      do
      {
        v7 += 24;
        for (uint64_t j = 4; j != 1; --j)
        {
          uint64_t v10 = (void *)v8[j];
          if (v10)
          {

            v8[j] = 0;
          }
        }
        v8 += 3;
      }
      while (v7 != v6);
    }
  }
  *a1 = v4;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoMetalTextures const*,re::VideoMetalTextures const*,re::VideoMetalTextures*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      for (uint64_t i = 0; i != 24; i += 8)
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + i), (void **)(v4 + i));
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::copy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2 + 2;
  uint64_t v4 = *a2;
  uint64_t v6 = a1 + 2;
  uint64_t v5 = *a1;
  if (*a2 >= (unint64_t)*a1)
  {
    if (v5)
    {
      unint64_t v10 = 0;
      uint64_t v11 = 8 * v5;
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[v10 / 8 + 2], (void **)&v3[v10 / 8]);
        v10 += 8;
      }
      while (v11 != v10);
      uint64_t v5 = *a1;
    }
    if (v5 != v4)
    {
      uint64_t v12 = (void **)&v3[v5];
      uint64_t v13 = &v6[v5];
      uint64_t v14 = 8 * v4 - 8 * v5;
      do
      {
        CMTag v15 = *v12++;
        *v13++ = v15;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[i + 2], (void **)&v3[i]);
      uint64_t v5 = *a1;
    }
    if (v4 != v5)
    {
      long long v8 = (id *)&v6[v4];
      uint64_t v9 = 8 * v5 - 8 * v4;
      do
      {
        if (*v8)
        {

          *long long v8 = 0;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  *a1 = v4;
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::copy(void *a1, void *a2)
{
  uint64_t v3 = (const void **)(a2 + 2);
  uint64_t v4 = *a2;
  uint64_t v5 = (const void **)(a1 + 2);
  if (*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase>*,0>(v3, &v3[*a1], v5);
    uint64_t v8 = *a1;
    if (*a1 != v4)
    {
      uint64_t v9 = &v3[v8];
      unint64_t v10 = &v5[v8];
      uint64_t v11 = v10;
      uint64_t v12 = 8 * v4 - 8 * v8;
      do
      {
        *v11++ = 0;
        uint64_t v13 = *v9++;
        re::VideoObject<re::VideoColorTransformBase>::setRef((int)v10, v10, v13);
        unint64_t v10 = v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase>*,0>(v3, &v3[v4], v5);
    if (v4 != *a1)
    {
      uint64_t v6 = &v5[v4];
      uint64_t v7 = 8 * *a1 - 8 * v4;
      do
      {
        if (*v6) {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v6);
        }
        *v6++ = 0;
        v7 -= 8;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

const void **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase>*,0>(const void **a1, const void **a2, const void **a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4++;
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)a3, a3, v6);
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *re::DynamicInlineArray<re::VideoColorTags,2ul>::copy(void *result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  if (*a2 >= *result)
  {
    uint64_t v5 = (char *)a2 + 12;
    uint64_t v6 = 3 * v4;
    uint64_t v7 = (char *)a2 + 3 * v4 + 12;
    uint64_t v8 = (char *)result + 12;
    if (v4) {
      memmove((char *)result + 12, (char *)a2 + 12, 3 * v4);
    }
    id result = memcpy(&v8[v6], v7, &v5[3 * v3] - v7);
  }
  else if (v3)
  {
    id result = memmove((char *)result + 12, (char *)a2 + 12, 3 * v3);
  }
  *uint64_t v2 = v3;
  return result;
}

void re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::copy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2 + 2;
  uint64_t v4 = *a2;
  uint64_t v5 = a1 + 2;
  if (*a2 >= (unint64_t)*a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram>*,0>(v3, &v3[*a1], v5);
    uint64_t v8 = *a1;
    if (*a1 != v4)
    {
      uint64_t v9 = &v3[v8];
      unint64_t v10 = &v5[v8];
      uint64_t v11 = 8 * v4 - 8 * v8;
      do
      {
        uint64_t v12 = *v9;
        uint64_t *v10 = *v9;
        if (v12) {
          id v13 = (id)(v12 + 8);
        }
        ++v9;
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram>*,0>(v3, &v3[v4], v5);
    if (v4 != *a1)
    {
      uint64_t v6 = &v5[v4];
      uint64_t v7 = 8 * *a1 - 8 * v4;
      do
      {
        if (*v6)
        {

          *uint64_t v6 = 0;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4++;
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a3++, v6);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::copy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2 + 2;
  uint64_t v4 = *a2;
  uint64_t v5 = a1 + 2;
  if (*a2 >= (unint64_t)*a1)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<std::atomic<re::VideoReturn>> const*,std::shared_ptr<std::atomic<re::VideoReturn>> const*,std::shared_ptr<std::atomic<re::VideoReturn>>*>((uint64_t)&v13, a2 + 2, &v3[2 * *a1], v5);
    uint64_t v8 = *a1;
    if (*a1 != v4)
    {
      uint64_t v9 = &v3[2 * v8];
      unint64_t v10 = &v5[2 * v8];
      do
      {
        uint64_t v11 = v9[1];
        void *v10 = *v9;
        v10[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        v9 += 2;
        v10 += 2;
      }
      while (v9 != &v3[2 * v4]);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<std::atomic<re::VideoReturn>> const*,std::shared_ptr<std::atomic<re::VideoReturn>> const*,std::shared_ptr<std::atomic<re::VideoReturn>>*>((uint64_t)&v12, a2 + 2, &v3[2 * v4], v5);
    if (v4 != *a1)
    {
      uint64_t v6 = 16 * *a1 - 16 * v4;
      uint64_t v7 = (std::__shared_weak_count **)&a1[2 * v4 + 3];
      do
      {
        if (*v7) {
          std::__shared_weak_count::__release_shared[abi:nn180100](*v7);
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
  }
  *a1 = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<std::atomic<re::VideoReturn>> const*,std::shared_ptr<std::atomic<re::VideoReturn>> const*,std::shared_ptr<std::atomic<re::VideoReturn>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t anonymous namespace'::findTag(_anonymous_namespace_ *this, const OpaqueCMTagCollection *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  if (MEMORY[0x263F00DF8]) {
    FigTagCollectionGetTagsWithCategory();
  }
  return 0;
}

uint64_t anonymous namespace'::findTag(_anonymous_namespace_ *this, const OpaqueCMTagCollection *a2, unsigned int a3, CMTag a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  if (MEMORY[0x263F00DF8]) {
    FigTagCollectionGetTagsWithCategory();
  }
  return 0;
}

double re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + 56));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 96;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t *std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::VideoPixelBufferPool *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::VideoPixelBufferPool *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void *std::function<void ()(re::VideoPixelBufferPool *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::VideoPixelBufferPool *)>::~__value_func[abi:nn180100](v4);
}

void *std::__function::__value_func<void ()(re::VideoPixelBufferPool *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(void *a1, uint64_t a2)
{
  if (*a1 <= 1uLL) {
    return 1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::DynamicInlineArray<re::VideoHDRConfig,2ul>::clear(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 80 * *(void *)a1;
    unint64_t v3 = (const void **)(a1 + 32);
    do
    {
      if (*v3) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3);
      }
      *unint64_t v3 = 0;
      if (*(v3 - 1)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 1);
      }
      *(v3 - 1) = 0;
      if (*(v3 - 2)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 2);
      }
      *(v3 - 2) = 0;
      v3 += 10;
      v2 -= 80;
    }
    while (v2);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::clear(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 24 * *(void *)a1;
    unint64_t v3 = (const void **)(a1 + 24);
    do
    {
      if (*v3) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3);
      }
      *unint64_t v3 = 0;
      if (*(v3 - 1)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 1);
      }
      *(v3 - 1) = 0;
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoPSEConfig,2ul>::clear(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 48 * *(void *)a1;
    unint64_t v3 = (const void **)(a1 + 48);
    do
    {
      if (*v3) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3);
      }
      *unint64_t v3 = 0;
      if (*(v3 - 1)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 1);
      }
      *(v3 - 1) = 0;
      uint64_t v4 = (std::__shared_weak_count *)*(v3 - 3);
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::clear(id *location)
{
  uint64_t v2 = location + 2;
  if (*location)
  {
    uint64_t v3 = 8 * (void)*location;
    do
    {
      objc_destroyWeak(v2);
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  id *location = 0;
  ++*((_DWORD *)location + 2);
}

void re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::clear(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if (*(void *)a1)
  {
    uint64_t v3 = v2 + 48 * *(void *)a1;
    uint64_t v4 = a1;
    do
    {
      v2 += 48;
      for (uint64_t i = 56; i != 32; i -= 8)
      {
        uint64_t v6 = *(void **)(v4 + i);
        if (v6)
        {

          *(void *)(v4 + i) = 0;
        }
      }
      do
      {
        int v7 = *(void **)(v4 + i);
        if (v7)
        {

          *(void *)(v4 + i) = 0;
        }
        i -= 8;
      }
      while (i != 8);
      v4 += 48;
    }
    while (v2 != v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy(void *a1, void *a2)
{
  uint64_t v3 = (__CVBuffer **)(a2 + 2);
  uint64_t v4 = *a2;
  uint64_t v5 = (__CVBuffer **)(a1 + 2);
  if (*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase>*,0>(v3, &v3[*a1], v5);
    uint64_t v8 = *a1;
    if (*a1 != v4)
    {
      long long v9 = &v3[v8];
      long long v10 = &v5[v8];
      long long v11 = v10;
      uint64_t v12 = 8 * v4 - 8 * v8;
      do
      {
        *v11++ = 0;
        long long v13 = *v9++;
        re::VideoObject<re::VideoTextureBase>::setRef((int)v10, v10, v13);
        long long v10 = v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase>*,0>(v3, &v3[v4], v5);
    if (v4 != *a1)
    {
      uint64_t v6 = &v5[v4];
      uint64_t v7 = 8 * *a1 - 8 * v4;
      do
      {
        if (*v6) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v6);
        }
        *v6++ = 0;
        v7 -= 8;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

__CVBuffer **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase>*,0>(__CVBuffer **a1, __CVBuffer **a2, __CVBuffer **a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4++;
      re::VideoObject<re::VideoTextureBase>::setRef((int)a3, a3, v6);
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__shared_ptr_emplace<re::VideoPSEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6D4828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::VideoPSEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6D4828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re *std::__shared_ptr_emplace<re::VideoPSEProcessor>::__on_zero_shared(uint64_t a1)
{
  return re::VideoMipProcessor::deinit((re *)(a1 + 24));
}

uint64_t re::Optional<re::VideoHDRConfig>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (const void **)(a1 + 32);
    uint64_t v3 = (void *)(a1 + 16);
    if (*(void *)(a1 + 32)) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v2);
    }
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 32) = 0;
    if (v4) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 24));
    }
    *(void *)(a1 + 24) = 0;
    if (*v3) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
    }
    *uint64_t v3 = 0;
  }
  return a1;
}

uint64_t re::Optional<re::VideoTransformSurfaceConfig>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (void *)(a1 + 16);
    uint64_t v3 = (void *)(a1 + 8);
    if (*(void *)(a1 + 16)) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
    }
    *uint64_t v2 = 0;
    if (*v3) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 8));
    }
    *uint64_t v3 = 0;
  }
  return a1;
}

unsigned char *re::Optional<re::VideoMipGenConfig>::~Optional(unsigned char *a1)
{
  if (*a1)
  {
    for (uint64_t i = 48; i != 24; i -= 8)
    {
      uint64_t v3 = *(void **)&a1[i];
      if (v3)
      {

        *(void *)&a1[i] = 0;
      }
    }
    do
    {
      uint64_t v4 = *(void **)&a1[i];
      if (v4)
      {

        *(void *)&a1[i] = 0;
      }
      i -= 8;
    }
    while (i);
  }
  return a1;
}

uint64_t re::Optional<re::VideoPSEConfig>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (const void **)(a1 + 40);
    if (*(void *)(a1 + 40)) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v2);
    }
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 40) = 0;
    if (v3) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 32));
    }
    *(void *)(a1 + 32) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

id *re::ArcWeakPtr<re::VideoHistogram>::operator=(id *location, id *a2)
{
  if (a2 != location)
  {
    objc_destroyWeak(location);
    id *location = 0;
    objc_moveWeak(location, a2);
  }
  return location;
}

void *re::RigRuntimeData::clear(re::RigRuntimeData *this)
{
  *((void *)this + 1) = -1;
  re::FixedArray<re::FixedArray<float>>::deinit((void *)this + 2);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5);
  re::FixedArray<re::RigEvaluation>::deinit((uint64_t)this + 64);
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((void *)this + 25);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28);
  return re::FixedArray<re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>>::deinit((void *)this + 34);
}

uint64_t re::FixedArray<re::RigEvaluation>::deinit(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v3 = (void *)(result + 8);
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      re::ObjectHelper::destroy<re::RigEvaluation>(*(uint64_t **)(result + 16), (uint64_t *)(*(void *)(result + 16) + 1528 * v2));
      uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = 40 * v2;
      do
      {
        re::DynamicArray<unsigned long>::deinit(v4);
        v4 += 40;
        v5 -= 40;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = 40 * v2;
      do
      {
        re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(v4);
        v4 += 40;
        v5 -= 40;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void re::RigRuntimeData::update(re::RigRuntimeData *this, const re::RigAsset *a2, const re::MeshAsset *a3, const re::MeshNameMap *a4, uint64_t a5)
{
  if (*((void *)this + 1) != a5)
  {
    if (!*(void *)this) {
      *(void *)this = *(void *)a2;
    }
    re::RigRuntimeData::resetRigEvaluations(this, a2);
    re::RigRuntimeData::setRigEntryHandles(this, a2, a3, a4);
    *((void *)this + 1) = a5;
    *((unsigned char *)this + 296) = 0;
  }
}

void re::RigRuntimeData::resetRigEvaluations(re::RigRuntimeData *this, const re::RigAsset *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  re::RigRuntimeData::clear(this);
  unint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)this;
  buf[0] = -1;
  re::FixedArray<unsigned long>::init<unsigned long const&>((void *)this + 5, v5, v4, buf);
  uint64_t v7 = *(void *)this;
  *((void *)this + 8) = *(void *)this;
  *((void *)this + 9) = v4;
  if (v4)
  {
    if (v4 >= 0x2AE3DA78A0D674) {
      goto LABEL_32;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 1528 * v4, 8);
    *((void *)this + 10) = v8;
    if (!v8)
    {
LABEL_33:
      re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    uint64_t v10 = v8;
    unint64_t v11 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        bzero((void *)v10, 0x5F0uLL);
        *(_DWORD *)(v10 + 1212) = 0x7FFFFFFF;
        *(_OWORD *)(v10 + 1224) = 0u;
        *(_OWORD *)(v10 + 1240) = 0u;
        *(void *)(v10 + 1256) = 0x7FFFFFFF00000000;
        *(void *)(v10 + 1520) = 0;
        uint64_t v12 = v10 + 1272;
        *(_OWORD *)(v10 + 1272) = 0u;
        *(_OWORD *)(v10 + 1288) = 0u;
        *(_OWORD *)(v10 + 1304) = 0u;
        *(_OWORD *)(v10 + 1320) = 0u;
        *(_OWORD *)(v10 + 1336) = 0u;
        *(_OWORD *)(v10 + 1352) = 0u;
        *(_OWORD *)(v10 + 1368) = 0u;
        *(_OWORD *)(v10 + 1384) = 0u;
        *(_OWORD *)(v10 + 1400) = 0u;
        *(_OWORD *)(v10 + 1416) = 0u;
        *(_OWORD *)(v10 + 1432) = 0u;
        *(_OWORD *)(v10 + 1448) = 0u;
        *(_OWORD *)(v10 + 1464) = 0u;
        *(_OWORD *)(v10 + 1480) = 0u;
        *(_DWORD *)(v10 + 1512) = 0;
        v10 += 1528;
        *(_OWORD *)(v12 + 224) = 0u;
        --v11;
      }
      while (v11);
    }
    bzero((void *)v10, 0x5F0uLL);
    unint64_t v13 = 0;
    *(_DWORD *)(v10 + 1212) = 0x7FFFFFFF;
    *(_OWORD *)(v10 + 1224) = 0u;
    *(_OWORD *)(v10 + 1240) = 0u;
    *(void *)(v10 + 1256) = 0x7FFFFFFF00000000;
    *(void *)(v10 + 1520) = 0;
    *(_OWORD *)(v10 + 1272) = 0u;
    *(_OWORD *)(v10 + 1288) = 0u;
    *(_OWORD *)(v10 + 1304) = 0u;
    *(_OWORD *)(v10 + 1320) = 0u;
    *(_OWORD *)(v10 + 1336) = 0u;
    *(_OWORD *)(v10 + 1352) = 0u;
    *(_OWORD *)(v10 + 1368) = 0u;
    *(_OWORD *)(v10 + 1384) = 0u;
    *(_OWORD *)(v10 + 1400) = 0u;
    *(_OWORD *)(v10 + 1416) = 0u;
    *(_OWORD *)(v10 + 1432) = 0u;
    *(_OWORD *)(v10 + 1448) = 0u;
    *(_OWORD *)(v10 + 1464) = 0u;
    *(_OWORD *)(v10 + 1480) = 0u;
    *(_OWORD *)(v10 + 1496) = 0u;
    *(_DWORD *)(v10 + 1512) = 0;
    while (1)
    {
      unint64_t v14 = *((void *)a2 + 2);
      if (v14 <= v13)
      {
        *(void *)uint64_t v31 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        unsigned __int8 v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 797;
        __int16 v28 = 2048;
        *(void *)CMTimeScale v29 = v13;
        *(_WORD *)&unsigned char v29[8] = 2048;
        *(void *)&v29[10] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v31 = 136315906;
        *(void *)&v31[4] = "operator[]";
        __int16 v32 = 1024;
        int v33 = 468;
        __int16 v34 = 2048;
        unint64_t v35 = v13;
        __int16 v36 = 2048;
        unint64_t v37 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v31 = 136315906;
        *(void *)&v31[4] = "operator[]";
        __int16 v32 = 1024;
        int v33 = 468;
        __int16 v34 = 2048;
        unint64_t v35 = v13;
        __int16 v36 = 2048;
        unint64_t v37 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 1528, v4);
        _os_crash();
        __break(1u);
        goto LABEL_33;
      }
      unint64_t v14 = *((void *)this + 9);
      if (v14 <= v13) {
        goto LABEL_30;
      }
      uint64_t v15 = *((void *)a2 + 4);
      long long v16 = (re *)re::RigEvaluation::init((re::RigEvaluation *)(*((void *)this + 10) + 1528 * v13), *(re::Allocator **)this, (const re::RigDefinition *)(v15 + 1144 * v13), (uint64_t)&v24);
      if (!(_BYTE)v24) {
        break;
      }
      if (v13 < *((void *)a2 + 7))
      {
        uint64_t v17 = *(void *)(v15 + 1144 * v13 + 1120);
        if (v17)
        {
          uint64_t v18 = 0;
          uint64_t v19 = v15 + 1144 * v13;
          long long v20 = (void *)(*((void *)a2 + 9) + 16 * v13);
          uint64_t v21 = *(void **)(v19 + 1136);
          while (!re::StringID::operator==(v21, v20))
          {
            ++v18;
            v21 += 4;
            if (v17 == v18) {
              goto LABEL_22;
            }
          }
          unint64_t v14 = *((void *)this + 6);
          if (v14 <= v13) {
            goto LABEL_31;
          }
          *(void *)(*((void *)this + 7) + 8 * v13) = v18;
        }
        goto LABEL_22;
      }
LABEL_23:
      if (++v13 == v4) {
        return;
      }
    }
    long long v22 = *re::assetsLogObjects(v16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = &v29[13];
      if (v29[12]) {
        uint64_t v23 = v30;
      }
      LODWORD(buf[0]) = 134218242;
      *(void *)((char *)buf + 4) = v13;
      WORD2(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 6) = v23;
      _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Rig entry %zu has an invalid rig definition: %s.", (uint8_t *)buf, 0x16u);
    }
LABEL_22:
    if (!(_BYTE)v24 && *(void *)&v29[4] && (v29[12] & 1) != 0) {
      (*(void (**)(void))(**(void **)&v29[4] + 40))();
    }
    goto LABEL_23;
  }
}

void re::RigRuntimeData::setRigEntryHandles(re::RigRuntimeData *this, const re::RigAsset *a2, const re::MeshAsset *a3, const re::MeshNameMap *a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  re::FixedArray<re::FixedArray<unsigned int>>::init<>((uint64_t *)this + 2, *(void *)this, *((unsigned int *)a4 + 54));
  uint64_t v7 = *((void *)a2 + 12);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v31 = a2;
    __int16 v32 = a3;
    uint64_t v30 = *((void *)a2 + 12);
    do
    {
      unint64_t v9 = *((void *)a2 + 12);
      if (v9 <= v8) {
        goto LABEL_33;
      }
      uint64_t v10 = *((void *)a2 + 14);
      uint64_t v11 = v10 + (v8 << 6);
      unint64_t v13 = (_DWORD *)(v11 + 56);
      unsigned int v12 = *(_DWORD *)(v11 + 56);
      if (*((void *)this + 9) > (unint64_t)v12 && *(void *)(*((void *)this + 10) + 1528 * v12 + 1176))
      {
        unint64_t v14 = *((void *)a3 + 117);
        if (v14 < 2)
        {
LABEL_10:
          unint64_t v16 = 0;
        }
        else
        {
          uint64_t v15 = (void *)(v10 + (v8 << 6) + 40);
          unint64_t v16 = 1;
          while (1)
          {
            uint64_t v17 = (void *)re::MeshAsset::skeletonAtIndex(a3, v16);
            if (re::StringID::operator==(v17, v15)) {
              break;
            }
            if (v14 == ++v16) {
              goto LABEL_10;
            }
          }
        }
        re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)a4, (unsigned __int8 *)v11, buf);
        *(void *)unint64_t v37 = a3;
        *(void *)&v37[8] = a4;
        *(void *)&v37[16] = *(void *)buf;
        uint64_t v40 = v50;
        uint64_t v41 = 0;
        re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v37[24], (uint64_t)&buf[8]);
        uint64_t v18 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
        uint64_t v19 = *(void *)&v37[16];
        if (*(void *)&v37[16])
        {
          __int16 v34 = (uint64_t *)v37;
          uint64_t v35 = 0;
          goto LABEL_16;
        }
        long long v20 = *re::assetsLogObjects(v18);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(v11 + 16);
          *(_DWORD *)CMTime buf = 134218242;
          *(void *)&void buf[4] = v8;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v21;
          _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Mesh rig %zu did not apply to any known mesh: %s.", buf, 0x16u);
        }
        uint64_t v19 = *(void *)&v37[16];
        __int16 v34 = (uint64_t *)v37;
        uint64_t v35 = 0;
        if (*(void *)&v37[16])
        {
          do
          {
LABEL_16:
            uint64_t v22 = re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(&v34);
            *(void *)CMTime buf = v35;
            unsigned int v23 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v34[7] + 16))(v34[7], buf);
            *(void *)CMTime buf = v35;
            uint64_t v24 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v34[7] + 16))(v34[7], buf);
            uint64_t v25 = *(void *)(v22 + 176);
            if (v25)
            {
              if (*(void *)(v25 + 8) > (unint64_t)WORD2(v24))
              {
                unint64_t v9 = WORD2(v24);
                if (v16 == *(_DWORD *)(*(void *)(v25 + 16) + 72 * WORD2(v24) + 4))
                {
                  unint64_t v26 = *((void *)this + 3);
                  if (v26 <= v23)
                  {
                    uint64_t v36 = 0;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    long long v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v42 = 136315906;
                    *(void *)&uint64_t v42[4] = "operator[]";
                    __int16 v43 = 1024;
                    int v44 = 468;
                    __int16 v45 = 2048;
                    unint64_t v46 = v23;
                    __int16 v47 = 2048;
                    unint64_t v48 = v26;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_31:
                    uint64_t v36 = 0;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    long long v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v42 = 136315906;
                    *(void *)&uint64_t v42[4] = "operator[]";
                    __int16 v43 = 1024;
                    int v44 = 468;
                    __int16 v45 = 2048;
                    unint64_t v46 = v23;
                    __int16 v47 = 2048;
                    unint64_t v48 = v26;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_32:
                    uint64_t v36 = 0;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    long long v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v42 = 136315906;
                    *(void *)&uint64_t v42[4] = "operator[]";
                    __int16 v43 = 1024;
                    int v44 = 468;
                    __int16 v45 = 2048;
                    unint64_t v46 = v9;
                    __int16 v47 = 2048;
                    unint64_t v48 = v26;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_33:
                    *(void *)uint64_t v42 = 0;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    long long v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)unint64_t v37 = 136315906;
                    *(void *)&v37[4] = "operator[]";
                    *(_WORD *)&v37[12] = 1024;
                    *(_DWORD *)&v37[14] = 797;
                    *(_WORD *)&v37[18] = 2048;
                    *(void *)&v37[20] = v8;
                    __int16 v38 = 2048;
                    unint64_t v39 = v9;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  int v27 = (void *)(*((void *)this + 4) + 24 * v23);
                  if (!*v27)
                  {
                    re::FixedArray<unsigned int>::init<unsigned int const&>(v27, *(void *)this, *(void *)(v22 + 56), &re::RigRuntimeData::kInvalidRigDefinitionIndex);
                    unint64_t v26 = *((void *)this + 3);
                  }
                  if (v26 <= v23) {
                    goto LABEL_31;
                  }
                  uint64_t v28 = *((void *)this + 4);
                  unint64_t v26 = *(void *)(v28 + 24 * v23 + 8);
                  if (v26 <= v9) {
                    goto LABEL_32;
                  }
                  *(_DWORD *)(*(void *)(v28 + 24 * v23 + 16) + 4 * v9) = *v13;
                }
              }
            }
            uint64_t v29 = ++v35;
          }
          while (v34 != (uint64_t *)v37 || v29 != v19);
        }
        re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v37[24]);
        a2 = v31;
        a3 = v32;
        uint64_t v7 = v30;
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void re::RigRuntimeData::update(re::Allocator **this, void *a2, re::MeshAsset *a3, uint64_t a4, re::Allocator *a5, unint64_t *a6, re::Allocator *a7, re::Allocator *a8)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (this[1] != a8)
  {
    unint64_t v13 = *this;
    if (!*this)
    {
      unint64_t v13 = (re::Allocator *)a2[15];
      *this = v13;
    }
    unint64_t v14 = (re::RigEnvironment *)(this + 12);
    if (!this[12])
    {
      this[24] = a7;
      re::RigEnvironment::init((re::RigEnvironment *)(this + 12), v13);
    }
    unint64_t v81 = a8;
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::removeLast((uint64_t)(this + 12));
    re::RigEnvironment::pushEnvironmentScope((re::RigEnvironment *)(this + 12));
    this[19] = a5;
    re::makeBindNode((re *)a6, (uint64_t)v93);
    if (this + 20 != (re::Allocator **)v93) {
      re::BindNode::copy((re::BindNode *)(this + 20), (const re::BindNode *)v93);
    }
    re::BindNode::deinit((re::BindNode *)v93);
    double v89 = (re::RigRuntimeData *)this;
    this[11] = (re::Allocator *)(a2 + 15);
    uint64_t v15 = (uint64_t)a2;
    if (a2[17])
    {
      uint64_t v8 = 0;
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unint64_t v18 = 2080;
      do
      {
        unint64_t v19 = a2[2];
        if (v19 <= v17) {
          goto LABEL_114;
        }
        re::StringID::StringID((re::StringID *)&v90, (const StringID *)(a2[4] + v8));
        unint64_t v19 = a2[17];
        if (v19 <= v17) {
          goto LABEL_115;
        }
        re::RigEnvironment::insertRigGraphNode(v14, (const re::StringID *)&v90, (const re::RigGraphNode *)(a2[19] + v16), (uint64_t)v99);
        if (!v99[0])
        {
          a6 = (unint64_t *)*re::assetsLogObjects(v20);
          if (os_log_type_enabled((os_log_t)a6, OS_LOG_TYPE_DEFAULT))
          {
            if (v99[32]) {
              uint64_t v21 = v100;
            }
            else {
              uint64_t v21 = &v99[33];
            }
            *(_DWORD *)CMTime buf = 134218754;
            *(void *)&void buf[4] = v17;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v91;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = *(_DWORD *)&v99[8];
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v21;
            _os_log_impl(&dword_233120000, (os_log_t)a6, OS_LOG_TYPE_DEFAULT, "Could not insert rig graph node %zu (%s). [%d] %s", buf, 0x26u);
          }
          if (!v99[0] && *(void *)&v99[24] && (v99[32] & 1) != 0) {
            (*(void (**)(void))(**(void **)&v99[24] + 40))();
          }
        }
        re::StringID::destroyString((re::StringID *)&v90);
        ++v17;
        v16 += 200;
        v8 += 216;
      }
      while (v17 < *(void *)(*((void *)v89 + 11) + 16));
    }
    unint64_t v17 = (unint64_t)v89;
    re::RigRuntimeData::clear(v89);
    re::FixedArray<re::FixedArray<unsigned int>>::init<>((uint64_t *)(v17 + 16), *(void *)v17, *(unsigned int *)(a4 + 216));
    unint64_t v22 = a2[7];
    *((void *)v89 + 26) = v22;
    if (v22)
    {
      if (v22 > 0x666666666666666)
      {
LABEL_118:
        re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v22);
        _os_crash();
        __break(1u);
        goto LABEL_119;
      }
      *((void *)v89 + 27) = v25;
      if (!v25)
      {
LABEL_119:
        re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_120;
      }
      unint64_t v27 = v22 - 1;
      if (v22 != 1)
      {
        do
        {
          v25[4] = 0;
          v25[1] = 0;
          void v25[2] = 0;
          *uint64_t v25 = 0;
          *((_DWORD *)v25 + 6) = 0;
          v25 += 5;
          --v27;
        }
        while (v27);
      }
      v25[4] = 0;
      v25[1] = 0;
      void v25[2] = 0;
      *uint64_t v25 = 0;
      *((_DWORD *)v25 + 6) = 0;
    }
    if (v22)
    {
      unint64_t v18 = 0;
      unint64_t v82 = v22;
      while (1)
      {
        unint64_t v19 = *(void *)(v15 + 56);
        if (v19 <= v18) {
          goto LABEL_117;
        }
        uint64_t v8 = *(void *)(v15 + 72) + (v18 << 6);
        *(_DWORD *)CMTime buf = v18;
        double v85 = (_DWORD *)(v8 + 56);
        uint64_t v29 = (unint64_t *)*(unsigned int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)v89 + 224, (_DWORD *)(v8 + 56), buf);
        unint64_t v30 = *((void *)a3 + 117);
        if (v30 < 2)
        {
LABEL_37:
          unint64_t v31 = 0;
        }
        else
        {
          uint64_t v15 = v8 + 48;
          unint64_t v31 = 1;
          while (1)
          {
            __int16 v32 = *(const char **)(re::MeshAsset::skeletonAtIndex(a3, v31) + 8);
            size_t v33 = strlen(v32);
            *(void *)CMTime buf = v32;
            *(void *)&buf[8] = v33;
            size_t v34 = strlen(*(const char **)v15);
            *(void *)id v103 = *(void *)v15;
            *(void *)&v103[8] = v34;
            re::StringSlice::findFirstOf(buf, (uint64_t)v103, 0, (uint64_t)v99);
            if (v99[0]) {
              break;
            }
            if (v30 == ++v31) {
              goto LABEL_37;
            }
          }
        }
        re::MeshNameMap::meshInstancePartsForIdentifier(a4, (unsigned __int8 *)v8, buf);
        *(void *)id v99 = a3;
        *(void *)&v99[8] = a4;
        *(void *)&v99[16] = *(void *)buf;
        uint64_t v101 = *(void *)&buf[32];
        uint64_t v102 = 0;
        unint64_t v19 = (unint64_t)&buf[8];
        re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v99[24], (uint64_t)&buf[8]);
        uint64_t v35 = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[8]);
        uint64_t v36 = *(void *)&v99[16];
        double v86 = v29;
        unint64_t v84 = v18;
        if (*(void *)&v99[16])
        {
          double v90 = (uint64_t *)v99;
          uint64_t v91 = 0;
          break;
        }
        a6 = (unint64_t *)*re::assetsLogObjects(v35);
        if (os_log_type_enabled((os_log_t)a6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = *(void *)(v8 + 16);
          *(_DWORD *)CMTime buf = 134218242;
          *(void *)&void buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v37;
          _os_log_impl(&dword_233120000, (os_log_t)a6, OS_LOG_TYPE_DEFAULT, "Mesh rig graph %zu did not apply to any known mesh: %s.", buf, 0x16u);
        }
        uint64_t v36 = *(void *)&v99[16];
        double v90 = (uint64_t *)v99;
        uint64_t v91 = 0;
        if (*(void *)&v99[16]) {
          break;
        }
LABEL_68:
        uint64_t v28 = (_anonymous_namespace_ *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v99[24]);
        unint64_t v18 = v84 + 1;
        unint64_t v17 = (unint64_t)v89;
        uint64_t v15 = (uint64_t)a2;
        if (v84 + 1 == v82) {
          goto LABEL_69;
        }
      }
      while (1)
      {
        uint64_t v8 = re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(&v90);
        *(void *)CMTime buf = v91;
        a6 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v90[7] + 16))(v90[7], buf);
        *(void *)CMTime buf = v91;
        uint64_t v38 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v90[7] + 16))(v90[7], buf);
        uint64_t v39 = *(void *)(v8 + 176);
        if (v39)
        {
          if (*(void *)(v39 + 8) > (unint64_t)WORD2(v38))
          {
            unint64_t v18 = WORD2(v38);
            unint64_t v40 = *(unsigned int *)(*(void *)(v39 + 16) + 72 * WORD2(v38) + 4);
            if (v31 == v40 && *((void *)a3 + 117) > v40)
            {
              uint64_t v42 = a6;
              unint64_t v17 = *((void *)v89 + 3);
              if (v17 <= a6) {
                goto LABEL_110;
              }
              uint64_t v15 = 24;
              __int16 v43 = (void *)(*((void *)v89 + 4) + 24 * a6);
              if (!*v43)
              {
                unint64_t v19 = (unint64_t)v89;
                re::FixedArray<unsigned int>::init<unsigned int const&>(v43, *(void *)v89, *(void *)(v8 + 56), &re::RigRuntimeData::kInvalidRigDefinitionIndex);
                unint64_t v17 = *((void *)v89 + 3);
              }
              if (v17 <= a6) {
                goto LABEL_111;
              }
              uint64_t v44 = *((void *)v89 + 4);
              unint64_t v19 = *(void *)(v44 + 24 * a6 + 8);
              if (v19 <= v18) {
                goto LABEL_112;
              }
              *(_DWORD *)(*(void *)(v44 + 24 * a6 + 16) + 4 * v18) = *v85;
              unint64_t v19 = *((void *)v89 + 26);
              uint64_t v15 = (uint64_t)v86;
              if (v19 <= (unint64_t)v86) {
                goto LABEL_113;
              }
              unint64_t v19 = *((void *)v89 + 27);
              __int16 v45 = (void *)(v19 + 40 * v86);
              if (!*v45)
              {
                uint64_t v15 = (uint64_t)v89;
                *__int16 v45 = *(void *)v89;
                re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(v45, 0);
                a6 = v86;
                ++*(_DWORD *)(v19 + 40 * v86 + 24);
                uint64_t v46 = re::MeshAsset::skeletonAtIndex(a3, v31);
                unint64_t v19 = *((void *)v89 + 26);
                if (v19 <= (unint64_t)v86) {
                  goto LABEL_116;
                }
                uint64_t v8 = v46;
                unint64_t v18 = *(unsigned int *)(v46 + 24);
                if (*(_DWORD *)(v46 + 24)) {
                  break;
                }
              }
            }
          }
        }
LABEL_66:
        uint64_t v57 = ++v91;
        if (v90 == (uint64_t *)v99 && v57 == v36) {
          goto LABEL_68;
        }
      }
      uint64_t v15 = 0;
      unint64_t v17 = 0;
      a6 = (unint64_t *)(*((void *)v89 + 27) + 40 * v86);
      unint64_t v19 = 8;
      while (1)
      {
        unint64_t v48 = *(void *)(v8 + 24);
        if (v48 <= v17) {
          break;
        }
        uint64_t v42 = *(void *)(*(void *)(v8 + 32) + v19);
        size_t v49 = strlen((const char *)v42);
        *(void *)CMTime buf = v42;
        *(void *)&buf[8] = v49;
        unint64_t v51 = *(void *)(v8 + 48);
        if (v51 <= v17) {
          goto LABEL_106;
        }
        uint64_t v52 = *(unsigned int *)(*(void *)(v8 + 56) + 4 * v17);
        if (v52 == -1) {
          uint64_t v52 = -1;
        }
        *(void *)&uint8_t buf[16] = v52;
        unint64_t v53 = *(void *)(v8 + 72);
        if (v53 <= v17) {
          goto LABEL_107;
        }
        CMTag v54 = (long long *)(*(void *)(v8 + 80) + v15);
        uint8_t buf[32] = 1;
        long long v56 = v54[1];
        long long v55 = v54[2];
        long long v95 = *v54;
        long long v96 = v56;
        long long v97 = v55;
        char v98 = 0;
        re::DynamicArray<re::RigHierarchyJointDescription>::add(a6, (long long *)buf);
        ++v17;
        v15 += 48;
        v19 += 16;
        if (v18 == v17) {
          goto LABEL_66;
        }
      }
      re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17, v48);
      _os_crash();
      __break(1u);
LABEL_106:
      re::internal::assertLog((re::internal *)6, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17, v51);
      _os_crash();
      __break(1u);
LABEL_107:
      re::internal::assertLog((re::internal *)6, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17, v53);
      _os_crash();
      __break(1u);
LABEL_108:
      *(void *)id v103 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 797;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v18;
      *(_WORD *)&v99[28] = 2048;
      *(void *)&v99[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_109:
      *(void *)id v103 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 468;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v18;
      *(_WORD *)&v99[28] = 2048;
      *(void *)&v99[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_110:
      uint64_t v92 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v103 = 136315906;
      *(void *)&v103[4] = "operator[]";
      *(_WORD *)&v103[12] = 1024;
      *(_DWORD *)&v103[14] = 468;
      __int16 v104 = 2048;
      v105 = (void *)v42;
      __int16 v106 = 2048;
      unint64_t v107 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_111:
      uint64_t v92 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v103 = 136315906;
      *(void *)&v103[4] = "operator[]";
      *(_WORD *)&v103[12] = 1024;
      *(_DWORD *)&v103[14] = 468;
      __int16 v104 = 2048;
      v105 = (void *)v42;
      __int16 v106 = 2048;
      unint64_t v107 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_112:
      uint64_t v92 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v103 = 136315906;
      *(void *)&v103[4] = "operator[]";
      *(_WORD *)&v103[12] = 1024;
      *(_DWORD *)&v103[14] = 468;
      __int16 v104 = 2048;
      v105 = (void *)v18;
      __int16 v106 = 2048;
      unint64_t v107 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_113:
      uint64_t v92 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v103 = 136315906;
      *(void *)&v103[4] = "operator[]";
      *(_WORD *)&v103[12] = 1024;
      *(_DWORD *)&v103[14] = 468;
      __int16 v104 = 2048;
      v105 = (void *)v15;
      __int16 v106 = 2048;
      unint64_t v107 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_114:
      *(void *)id v103 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 797;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v17;
      *(_WORD *)&v99[28] = 2048;
      *(void *)&v99[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      uint64_t v92 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v103 = 136315906;
      *(void *)&v103[4] = "operator[]";
      *(_WORD *)&v103[12] = 1024;
      *(_DWORD *)&v103[14] = 797;
      __int16 v104 = 2048;
      v105 = (void *)v17;
      __int16 v106 = 2048;
      unint64_t v107 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      uint64_t v92 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v103 = 136315906;
      *(void *)&v103[4] = "operator[]";
      *(_WORD *)&v103[12] = 1024;
      *(_DWORD *)&v103[14] = 468;
      __int16 v104 = 2048;
      v105 = a6;
      __int16 v106 = 2048;
      unint64_t v107 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_117:
      *(void *)id v103 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      memset(buf, 0, sizeof(buf));
      unint64_t v22 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)id v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 797;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v18;
      *(_WORD *)&v99[28] = 2048;
      *(void *)&v99[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_118;
    }
LABEL_69:
    unint64_t v22 = *(void *)(v15 + 136);
    *(void *)(v17 + 280) = v22;
    if (v22)
    {
      if (v22 > 0x666666666666666)
      {
LABEL_120:
        re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v22);
        _os_crash();
        __break(1u);
LABEL_121:
        re::internal::assertLog((re::internal *)4, v60, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      *(void *)(v17 + 288) = v59;
      if (!v59) {
        goto LABEL_121;
      }
      unint64_t v61 = v22 - 1;
      if (v22 != 1)
      {
        do
        {
          *(void *)(v59 + 32) = 0;
          *(void *)(v59 + 8) = 0;
          *(void *)(v59 + 16) = 0;
          *(void *)uint64_t v59 = 0;
          *(_DWORD *)(v59 + 24) = 0;
          v59 += 40;
          --v61;
        }
        while (v61);
      }
      *(void *)(v59 + 32) = 0;
      *(void *)(v59 + 8) = 0;
      *(void *)(v59 + 16) = 0;
      *(void *)uint64_t v59 = 0;
      *(_DWORD *)(v59 + 24) = 0;
    }
    unint64_t v62 = *(void *)(v15 + 136);
    if (v62)
    {
      unint64_t v18 = 0;
      uint64_t v42 = 40;
      do
      {
        uint64_t v63 = *(void *)(v15 + 96);
        if (v63)
        {
          uint64_t v64 = *(void *)(v15 + 112);
          uint64_t v65 = v64 + 40 * v63;
          do
          {
            if (v18 == *(_DWORD *)(v64 + 32))
            {
              unint64_t v19 = *(void *)(v15 + 136);
              if (v19 <= v18) {
                goto LABEL_108;
              }
              uint64_t v66 = *(void *)(v15 + 152) + 200 * v18;
              uint64_t v67 = *(void *)(v66 + 16);
              if (v67)
              {
                uint64_t v15 = 0;
                a6 = *(unint64_t **)(v66 + 32);
                while (!re::StringID::operator==((void *)v64, a6))
                {
                  ++v15;
                  a6 += 5;
                  if (v67 == v15) {
                    goto LABEL_87;
                  }
                }
                uint64_t v8 = v15;
              }
LABEL_87:
              unint64_t v19 = *(void *)(v17 + 280);
              if (v19 <= v18) {
                goto LABEL_109;
              }
              uint64_t v68 = *(void *)(v17 + 288);
              a6 = (unint64_t *)(v68 + 40 * v18);
              uint64_t v69 = re::StringID::StringID((re::StringID *)buf, (const StringID *)(v64 + 16));
              *(void *)&uint8_t buf[16] = v8;
              uint64_t v71 = a6 + 2;
              unint64_t v70 = a6[2];
              unint64_t v72 = a6[1];
              if (v70 >= v72)
              {
                unint64_t v73 = v70 + 1;
                if (v72 < v70 + 1)
                {
                  if (*a6)
                  {
                    uint64_t v74 = 2 * v72;
                    BOOL v75 = v72 == 0;
                    unint64_t v76 = 8;
                    if (!v75) {
                      unint64_t v76 = v74;
                    }
                    if (v76 <= v73) {
                      unint64_t v77 = v73;
                    }
                    else {
                      unint64_t v77 = v76;
                    }
                    re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity((void *)(v68 + 40 * v18), v77);
                  }
                  else
                  {
                    re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity((void *)(v68 + 40 * v18), v73);
                    ++*(_DWORD *)(v68 + 40 * v18 + 24);
                  }
                }
                unint64_t v70 = *v71;
                unint64_t v17 = (unint64_t)v89;
              }
              uint64_t v78 = v68 + 40 * v18;
              unint64_t v79 = (unint64_t *)(*(void *)(v78 + 32) + 24 * v70);
              uint8_t v80 = buf[0];
              *unint64_t v79 = *v79 & 0xFFFFFFFFFFFFFFFELL | buf[0] & 1;
              *unint64_t v79 = *(void *)buf & 0xFFFFFFFFFFFFFFFELL | v80 & 1;
              v79[1] = *(void *)&buf[8];
              *(void *)CMTime buf = 0;
              *(void *)&buf[8] = "";
              v79[2] = *(void *)&buf[16];
              ++*v71;
              ++*(_DWORD *)(v78 + 24);
              re::StringID::destroyString((re::StringID *)buf);
              uint64_t v15 = (uint64_t)a2;
            }
            v64 += 40;
          }
          while (v64 != v65);
          unint64_t v62 = *(void *)(v15 + 136);
        }
        ++v18;
      }
      while (v18 < v62);
    }
    *(void *)(v17 + 8) = v81;
    *(unsigned char *)(v17 + 296) = 1;
  }
}

double re::RigRuntimeData::constructRigCommands@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _anonymous_namespace_ **a5@<X4>, void *a6@<X5>, _anonymous_namespace_ *a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>, void *a10, void *a11, re::BindNode **a12)
{
  if (*(unsigned char *)(a1 + 296)) {
    return re::RigRuntimeData::constructRigCommandsForRigGraph(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a10, a11, a12);
  }
  *(void *)&double result = re::RigRuntimeData::constructRigCommandsForRig((void *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11).n128_u64[0];
  return result;
}

double re::RigRuntimeData::constructRigCommandsForRigGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, re::BindNode **a11)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v114 = v20;
  unint64_t v118 = v21;
  unint64_t v23 = v22;
  uint64_t v232 = *MEMORY[0x263EF8340];
  if (!*(void *)(v14 + 224)) {
    goto LABEL_86;
  }
  unint64_t v24 = 0xBF58476D1CE4E5B9 * (v15 ^ ((unint64_t)v15 >> 30));
  uint64_t v25 = *(unsigned int *)(*(void *)(v14 + 232)
                        + 4
                        * (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
                         % *(unsigned int *)(v14 + 248)));
  if (v25 == 0x7FFFFFFF) {
    goto LABEL_86;
  }
  uint64_t v26 = v17;
  unint64_t v27 = v16;
  uint64_t v28 = *(void *)(v14 + 240);
  while (*(_DWORD *)(v28 + 24 * v25 + 12) != v15)
  {
    LODWORD(v25) = *(_DWORD *)(v28 + 24 * v25 + 8) & 0x7FFFFFFF;
    if (v25 == 0x7FFFFFFF) {
      goto LABEL_86;
    }
  }
  unint64_t v29 = *(unsigned int *)(v28 + 24 * v25 + 16);
  if (*(void *)(v14 + 208) <= v29 || (uint64_t v30 = *(void *)(v14 + 216), !*(void *)(v30 + 40 * v29)))
  {
LABEL_86:
    re::DynamicString::format((re::DynamicString *)"Invalid rig entry handle: %u.", (re::DynamicString *)&v211, v15);
    __n128 v99 = v211;
    long long v100 = v212;
    *(unsigned char *)unint64_t v23 = 0;
    *(void *)(v23 + 8) = 100;
    *(void *)(v23 + 16) = re::AssetErrorCategory(void)::instance;
    *(__n128 *)(v23 + 24) = v99;
    *(_OWORD *)(v23 + 40) = v100;
    return v99.n128_f64[0];
  }
  v115 = v18;
  unint64_t v106 = v15;
  uint64_t v107 = v23;
  uint64_t v108 = v19;
  memset(v147, 0, sizeof(v147));
  uint64_t v148 = 0x7FFFFFFFLL;
  memset(v149, 0, sizeof(v149));
  int v150 = 0;
  uint64_t v151 = 0x7FFFFFFFLL;
  memset(v152, 0, sizeof(v152));
  uint64_t v167 = 0;
  memset(v154, 0, sizeof(v154));
  int v153 = 0;
  int v155 = 0;
  memset(v156, 0, sizeof(v156));
  int v157 = 0;
  int v160 = 0;
  long long v159 = 0u;
  long long v158 = 0u;
  int v163 = 0;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  int v166 = 0;
  uint64_t v110 = v14;
  uint64_t v109 = (re::RigEnvironment *)(v14 + 96);
  re::RigHierarchy::init((uint64_t)v147, v14 + 96, *(void *)v14, a9, *(void *)(v30 + 40 * v29 + 32), *(void *)(v30 + 40 * v29 + 16));
  __int16 v32 = v26[1];
  long long v113 = v27;
  if (v32)
  {
    size_t v33 = *v26;
    v116 = (_anonymous_namespace_ *)((char *)*v26 + 4 * (void)v32);
    uint64_t v11 = 0x3F80000000000000;
    while (1)
    {
      unint64_t v34 = *(unsigned int *)v33;
      unint64_t v35 = *((void *)v27 + 17);
      if (v35 <= v34) {
        goto LABEL_128;
      }
      unint64_t v36 = *((void *)v118 + 1);
      if (v36 <= v34) {
        goto LABEL_129;
      }
      uint64_t v117 = v33;
      uint64_t v37 = *((void *)v27 + 19);
      uint64_t v38 = v37 + 24 * v34;
      uint64_t v40 = *(void *)(v38 + 8);
      unint64_t v12 = v38 + 8;
      uint64_t v39 = v40;
      if (v40) {
        break;
      }
LABEL_21:
      size_t v33 = (_anonymous_namespace_ *)((char *)v117 + 4);
      unint64_t v27 = v113;
      if ((_anonymous_namespace_ *)((char *)v117 + 4) == v116) {
        goto LABEL_22;
      }
    }
    unint64_t v13 = 0;
    uint64_t v41 = (re *)(*(void *)v118 + 48 * v34);
    unint64_t v34 = v37 + 24 * v34 + 16;
    unint64_t v42 = 8;
    while (1)
    {
      v211.n128_u64[1] = 1065353216;
      v211.n128_u64[0] = 0x3F8000003F800000;
      *((void *)&v212 + 1) = 0x3F80000000000000;
      *(void *)&long long v212 = 0;
      long long v213 = 0uLL;
      re::EvaluationTree::createInputRegister(a9, &v211, v176);
      v211.n128_u64[1] = 1065353216;
      v211.n128_u64[0] = 0x3F8000003F800000;
      *((void *)&v212 + 1) = 0x3F80000000000000;
      *(void *)&long long v212 = 0;
      long long v213 = 0uLL;
      re::DynamicArray<re::EvaluationSRT>::add((_anonymous_namespace_ *)(a10 + 41), v176);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a10 + 86), (uint64_t)&v211);
      uint64_t v43 = a10[43] - 1;
      *(void *)&v169[0] = a10;
      *((void *)&v169[0] + 1) = v43;
      re::makeSkeletalPoseJointBindNode(v41, (const re::BindPoint *)v13, (uint64_t)&v211);
      re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(*(void **)&v169[0], (uint64_t)v169, (uint64_t *)&v211, 0);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v211.n128_i64[1]);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v211.n128_i64[1]);
      unint64_t v44 = *(void *)v12;
      if (*(void *)v12 <= v13) {
        break;
      }
      unint64_t v23 = *(void *)(*(void *)v34 + v42);
      size_t v45 = strlen((const char *)v23);
      v211.n128_u64[0] = v23;
      v211.n128_u64[1] = v45;
      re::RigHierarchy::setLocalSpaceJointTransform((_anonymous_namespace_ *)v147, (uint64_t)&v211, (uint64_t *)v176, (uint64_t)v144);
      if (!v144[0] && (void)v145)
      {
        if (BYTE8(v145)) {
          (*(void (**)(void))(*(void *)v145 + 40))();
        }
        long long v145 = 0u;
        long long v146 = 0u;
      }
      ++v13;
      v42 += 16;
      if (v39 == v13) {
        goto LABEL_21;
      }
    }
    *(void *)CMTime v194 = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 476;
    __int16 v219 = 2048;
    unint64_t v220 = v13;
    __int16 v221 = 2048;
    unint64_t v222 = v44;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_125;
  }
LABEL_22:
  uint64_t v46 = v115[1];
  if (v46)
  {
    uint64_t v47 = *v115;
    uint64_t v111 = (uint64_t)&(*v115)[(void)v46];
    unint64_t v13 = (unint64_t)&v211.n128_u64[1];
    while (1)
    {
      unint64_t v12 = *v47;
      unint64_t v35 = *((void *)v27 + 22);
      if (v35 <= v12) {
        goto LABEL_130;
      }
      unint64_t v48 = v114[1];
      if (v48 <= v12) {
        goto LABEL_131;
      }
      uint64_t v112 = v47;
      uint64_t v49 = *((void *)v27 + 24);
      uint64_t v50 = v49 + 24 * v12;
      unint64_t v51 = *(_anonymous_namespace_ **)(v50 + 8);
      uint64_t v11 = v50 + 8;
      uint64_t v119 = v51;
      if (v51) {
        break;
      }
LABEL_37:
      uint64_t v47 = v112 + 1;
      unint64_t v27 = v113;
      if (v112 + 1 == (unsigned int *)v111) {
        goto LABEL_38;
      }
    }
    uint64_t v52 = 0;
    unint64_t v42 = 0;
    uint64_t v53 = *v114 + 40 * v12;
    CMTag v54 = (re **)(v53 + 16);
    unint64_t v34 = v53 + 32;
    long long v55 = (void *)(v49 + 24 * v12 + 16);
    unint64_t v12 = 8;
    while (1)
    {
      uint64_t v41 = *v54;
      if ((unint64_t)*v54 <= v42) {
        break;
      }
      uint64_t v56 = *(void *)v34 + v52;
      v211.n128_u32[0] = 4;
      long long v212 = 0uLL;
      v211.n128_u64[1] = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a9 + 228), (uint64_t)&v211);
      v211.n128_u64[0] = a9[230] - 1;
      re::DynamicArray<unsigned long>::add(a9 + 21, &v211);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a9 + 61), v56);
      uint64_t v57 = *(void *)(a9[25] + 8 * a9[23] - 8);
      long long v214 = 0u;
      long long v213 = 0u;
      long long v212 = 0u;
      __n128 v211 = 0u;
      *(void *)unint64_t v216 = v57;
      re::DynamicArray<unsigned long>::add(a10 + 21, v216);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a10 + 66), (uint64_t)&v211);
      uint64_t v58 = a10[23] - 1;
      v176[0].n128_u64[0] = (unint64_t)a10;
      v176[0].n128_u64[1] = v58;
      uint64_t v59 = *v54;
      if ((unint64_t)*v54 <= v42) {
        goto LABEL_126;
      }
      re::EvaluationInputHandle<re::Matrix4x4<float>>::bindEvaluationInput<re::Matrix4x4<float>>(v176, (const re::IntrospectionBase *)(*(void *)v34 + v52));
      uint64_t v59 = *(re **)v11;
      if (*(void *)v11 <= v42) {
        goto LABEL_127;
      }
      unint64_t v23 = *(void *)(*v55 + v12);
      size_t v60 = strlen((const char *)v23);
      v211.n128_u64[0] = v23;
      v211.n128_u64[1] = v60;
      re::RigHierarchy::setModelSpaceJointTransform((uint64_t)v147, (uint64_t)&v211, v57, (uint64_t)v141);
      if (!v141[0] && (void)v142)
      {
        if (BYTE8(v142)) {
          (*(void (**)(void))(*(void *)v142 + 40))();
        }
        long long v142 = 0u;
        long long v143 = 0u;
      }
      ++v42;
      v12 += 16;
      v52 += 64;
      if (v119 == (_anonymous_namespace_ *)v42) {
        goto LABEL_37;
      }
    }
LABEL_125:
    v176[0].n128_u64[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    uint64_t v59 = (re *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 797;
    __int16 v219 = 2048;
    unint64_t v220 = v42;
    __int16 v221 = 2048;
    unint64_t v222 = (unint64_t)v41;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_126:
    *(void *)&v169[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 797;
    __int16 v219 = 2048;
    unint64_t v220 = v42;
    __int16 v221 = 2048;
    unint64_t v222 = (unint64_t)v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_127:
    *(void *)&v169[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    unint64_t v35 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 476;
    __int16 v219 = 2048;
    unint64_t v220 = v42;
    __int16 v221 = 2048;
    unint64_t v222 = (unint64_t)v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_128:
    v176[0].n128_u64[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 797;
    __int16 v219 = 2048;
    unint64_t v220 = v34;
    __int16 v221 = 2048;
    unint64_t v222 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_129:
    re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v34, v36);
    _os_crash();
    __break(1u);
LABEL_130:
    v176[0].n128_u64[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    unint64_t v23 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 797;
    __int16 v219 = 2048;
    unint64_t v220 = v12;
    __int16 v221 = 2048;
    unint64_t v222 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_131:
    re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, v48);
    _os_crash();
    __break(1u);
LABEL_132:
    uint64_t v132 = 0;
    long long v178 = 0u;
    long long v177 = 0u;
    memset(v176, 0, sizeof(v176));
    unint64_t v62 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)CMTime v194 = 136315906;
    *(void *)&v194[4] = "operator[]";
    *(_WORD *)&v194[12] = 1024;
    *(_DWORD *)&v194[14] = 789;
    *(_WORD *)&v194[18] = 2048;
    *(void *)&v194[20] = v13;
    __int16 v195 = 2048;
    *(void *)CMTime v196 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_133:
    uint64_t v124 = 0;
    long long v171 = 0u;
    long long v170 = 0u;
    memset(v169, 0, sizeof(v169));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v174 = 136315906;
    *(void *)float64_t v175 = "operator[]";
    *(_WORD *)&v175[8] = 1024;
    *(_DWORD *)&v175[10] = 468;
    *(_WORD *)&v175[14] = 2048;
    *(void *)&v175[16] = v62;
    *(_WORD *)&v175[24] = 2048;
    *(void *)&v175[26] = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_134:
    re::internal::assertLog((re::internal *)6, v81, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v82);
    _os_crash();
    __break(1u);
LABEL_135:
    re::internal::assertLog((re::internal *)6, v84, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v85);
    _os_crash();
    __break(1u);
LABEL_136:
    re::internal::assertLog((re::internal *)6, v87, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v88);
    _os_crash();
    __break(1u);
    goto LABEL_137;
  }
LABEL_38:
  uint64_t v61 = *(void *)(v110 + 88);
  unint64_t v62 = *(void *)(v61 + 16);
  uint64_t v11 = v106;
  if (v62 <= v106)
  {
LABEL_137:
    v176[0].n128_u64[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 797;
    __int16 v219 = 2048;
    unint64_t v220 = v11;
    __int16 v221 = 2048;
    unint64_t v222 = v62;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_138;
  }
  uint64_t v63 = *(void *)(v61 + 32);
  CVPixelBufferRef v140 = 0;
  unint64_t v138 = 0;
  v137[0] = 0;
  v137[1] = 0;
  int v139 = 0;
  unint64_t v62 = *(void *)(v110 + 280);
  if (v62 <= v106)
  {
LABEL_138:
    v176[0].n128_u64[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v216 = 136315906;
    *(void *)&v216[4] = "operator[]";
    __int16 v217 = 1024;
    int v218 = 476;
    __int16 v219 = 2048;
    unint64_t v220 = v11;
    __int16 v221 = 2048;
    unint64_t v222 = v62;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_139:
    *(void *)&v169[0] = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    long long v213 = 0u;
    long long v212 = 0u;
    __n128 v211 = 0u;
    uint64_t v90 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v176[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v176[0].n128_u64 + 4) = (unint64_t)"operator[]";
    v176[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v176[0].n128_u32[3] + 2) = 789;
    v176[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)v176[1].n128_u64 + 4) = 0;
    v176[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&v176[1].n128_u64[1] + 6) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_140:
    uint64_t v168 = 0;
    long long v171 = 0u;
    long long v170 = 0u;
    memset(v169, 0, sizeof(v169));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v224 = 136315906;
    long long v225 = "operator[]";
    __int16 v226 = 1024;
    int v227 = 468;
    __int16 v228 = 2048;
    unint64_t v229 = v62;
    __int16 v230 = 2048;
    uint64_t v231 = v90;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_141:
    re::internal::assertLog((re::internal *)6, v75, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
  }
  uint64_t v64 = (re::RigGraphNode *)(v63 + 200 * v106);
  uint64_t v65 = *(void *)(v110 + 288);
  uint64_t v66 = v65 + 40 * v106;
  uint64_t v67 = *(void *)(v66 + 16);
  unint64_t v62 = v66 + 16;
  re::DynamicArray<re::RigDataValue>::resize((uint64_t)v137, v67 + 1);
  re::RigGraphNode::inputValue(v64, v109, (re::EvaluationTree *)a9, *(re::Allocator **)v110, 0, (uint64_t)v216);
  uint64_t v68 = (_OWORD *)v223;
  long long v69 = *(_OWORD *)v147;
  *(void *)(v223 + 16) = *(void *)&v147[16];
  *uint64_t v68 = v69;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v68 + 24, (uint64_t)&v147[24]);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v68 + 72, (uint64_t)v149);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=((uint64_t)v68 + 120, v152);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=((uint64_t)(v68 + 10), &v154[1]);
  re::DynamicArray<re::StringID>::operator=((uint64_t)v68 + 200, (uint64_t *)v156 + 1);
  re::DynamicArray<unsigned long>::operator=((uint64_t)(v68 + 15), (uint64_t *)&v158 + 1);
  re::DynamicArray<re::RigHierarchyJointTransform>::operator=((uint64_t)v68 + 280, (uint64_t *)&v161 + 1);
  re::DynamicArray<unsigned long>::operator=((uint64_t)(v68 + 20), (uint64_t *)&v164 + 1);
  if (!v138) {
    goto LABEL_139;
  }
  re::RigDataValue::operator=(v140, (uint64_t)v216);
  if (*(void *)v62)
  {
    unint64_t v70 = (unint64_t *)(*(void *)(v65 + 40 * v106 + 32) + 16);
    uint64_t v71 = 24 * *(void *)v62;
    uint64_t v11 = 288;
    while (1)
    {
      unint64_t v13 = *v70;
      re::RigGraphNode::inputValue(v64, v109, (re::EvaluationTree *)a9, *(re::Allocator **)v110, *v70, (uint64_t)&v211);
      size_t v72 = strlen((const char *)*(v70 - 1));
      if (!LOBYTE(v169[0])) {
        break;
      }
      unint64_t v23 = v138;
      if (v138 <= v13) {
        goto LABEL_132;
      }
      re::RigDataValue::operator=(&v140[36 * v13], (uint64_t)&v211);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)&v211);
      v70 += 3;
      v71 -= 24;
      if (!v71) {
        goto LABEL_46;
      }
    }
    v176[0] = *(__n128 *)((char *)v169 + 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v176[1], (const re::DynamicString *)((char *)&v169[1] + 8));
    *(unsigned char *)uint64_t v107 = 0;
    *(__n128 *)(v107 + 8) = v176[0];
    unint64_t v101 = v176[2].n128_u64[1];
    *(void *)(v107 + 24) = v176[1].n128_u64[0];
    *(void *)(v107 + 48) = v101;
    *(__n128 *)(v107 + 32) = *(__n128 *)((char *)&v176[1] + 8);
    if (*((void *)&v169[1] + 1) && (v169[2] & 1) != 0) {
      (*(void (**)(void))(**((void **)&v169[1] + 1) + 40))();
    }
    re::RigDataValue::~RigDataValue((re::RigDataValue *)&v211);
    goto LABEL_111;
  }
LABEL_46:
  re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)&v211);
  re::EvaluationContextManager::init((re::EvaluationContextManager *)&v211, *(re::Allocator **)v110);
  uint64_t v197 = 0;
  *(void *)&v196[2] = 0;
  int v198 = 1;
  uint64_t v201 = 0;
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  int v202 = 0;
  uint64_t v205 = 0;
  uint64_t v203 = 0;
  uint64_t v204 = 0;
  uint64_t v210 = 0;
  long long v207 = 0u;
  long long v208 = 0u;
  int v206 = 0;
  int v209 = 0;
  unint64_t v73 = *(re::Allocator **)v110;
  *(void *)&v194[16] = v109;
  v194[24] = 0;
  *(void *)CMTime v194 = v73;
  *(void *)&v194[8] = 0;
  re::RigGraphCompilation::init((re::RigGraphCompilation *)&v196[2], v73);
  re::RigGraphSystem::compile((uint64_t)v194, v64, (uint64_t)a9, (re::EvaluationContextManager *)&v211, v140, v138, (uint64_t)&v132);
  if ((_BYTE)v132)
  {
    v176[0].n128_u64[0] = 0;
    v176[2] = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    uint64_t v180 = 0;
    int v181 = 1;
    uint64_t v184 = 0;
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    int v185 = 0;
    uint64_t v188 = 0;
    uint64_t v186 = 0;
    uint64_t v187 = 0;
    int v189 = 0;
    uint64_t v193 = 0;
    long long v190 = 0u;
    long long v191 = 0u;
    int v192 = 0;
    re::RigGraphCompilation::operator=((void *)&v179 + 1, &v133);
    uint64_t v74 = v108;
    re::FixedArray<re::EvaluationRegisterId<int>>::init<>(&v176[2].n128_u64[1], *(void *)v110, v108[1]);
    re::FixedArray<re::EvaluationSRT>::init<>(&v178, *(void *)v110, v108[1]);
    if (!*((void *)&v191 + 1)) {
      goto LABEL_141;
    }
    if (v108[1])
    {
      uint64_t v76 = 0;
      unint64_t v62 = 0;
      uint64_t v11 = (uint64_t)v169;
      unint64_t v77 = *(_anonymous_namespace_ **)(v193 + 184);
      uint64_t v78 = (_OWORD *)(v107 + 8);
      uint64_t v79 = 8;
      do
      {
        size_t v80 = strlen(*(const char **)(*v74 + v79));
        *(void *)&v169[0] = *(void *)(*v74 + v79);
        *((void *)&v169[0] + 1) = v80;
        re::RigHierarchy::getModelSpaceJointTransform(v77, (uint64_t)v169, (uint64_t)v128);
        if (!v128[0])
        {
          v169[0] = v129;
          re::DynamicString::DynamicString((re::DynamicString *)&v169[1], (const re::DynamicString *)&v130);
          *(unsigned char *)uint64_t v107 = 0;
          *uint64_t v78 = v169[0];
          uint64_t v95 = *((void *)&v169[2] + 1);
          *(void *)(v107 + 24) = *(void *)&v169[1];
          *(void *)(v107 + 48) = v95;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v169[1] + 8);
          int v91 = 1;
LABEL_61:
          uint64_t v74 = v108;
          goto LABEL_70;
        }
        unint64_t v23 = v177;
        if ((unint64_t)v177 <= v62) {
          goto LABEL_133;
        }
        *(void *)(*((void *)&v177 + 1) + 8 * v62) = v129;
        uint64_t v74 = v108;
        unint64_t v82 = v108[1];
        if (v82 <= v62) {
          goto LABEL_134;
        }
        size_t v83 = strlen(*(const char **)(*v108 + v79));
        *(void *)&v169[0] = *(void *)(*v108 + v79);
        *((void *)&v169[0] + 1) = v83;
        re::RigHierarchy::getLocalSpaceJointScale(v77, (uint64_t)v169, (uint64_t)&v174);
        if (!(_BYTE)v174)
        {
          v169[0] = *(_OWORD *)&v175[4];
          re::DynamicString::DynamicString((re::DynamicString *)&v169[1], (const re::DynamicString *)&v175[20]);
          *(unsigned char *)uint64_t v107 = 0;
          *uint64_t v78 = v169[0];
          uint64_t v96 = *((void *)&v169[2] + 1);
          *(void *)(v107 + 24) = *(void *)&v169[1];
          *(void *)(v107 + 48) = v96;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v169[1] + 8);
          int v91 = 1;
          goto LABEL_69;
        }
        unint64_t v85 = v108[1];
        if (v85 <= v62) {
          goto LABEL_135;
        }
        size_t v86 = strlen(*(const char **)(*v108 + v79));
        *(void *)&v169[0] = *(void *)(*v108 + v79);
        *((void *)&v169[0] + 1) = v86;
        re::RigHierarchy::getLocalSpaceJointRotation(v77, (uint64_t)v169, (uint64_t)&v124);
        if ((_BYTE)v124)
        {
          unint64_t v88 = v108[1];
          if (v88 <= v62) {
            goto LABEL_136;
          }
          size_t v89 = strlen(*(const char **)(*v108 + v79));
          *(void *)&v169[0] = *(void *)(*v108 + v79);
          *((void *)&v169[0] + 1) = v89;
          re::RigHierarchy::getLocalSpaceJointTranslation(v77, (uint64_t)v169, (uint64_t)v120);
          if (v120[0])
          {
            uint64_t v90 = *((void *)&v178 + 1);
            if (*((void *)&v178 + 1) <= v62) {
              goto LABEL_140;
            }
            int v91 = 0;
            uint64_t v92 = v121;
            uint64_t v93 = v125;
            CVPixelBufferRef v94 = (void *)(v179 + v76);
            *CVPixelBufferRef v94 = *(void *)&v175[4];
            v94[1] = v93;
            v94[2] = v92;
            goto LABEL_67;
          }
          v169[0] = v121;
          re::DynamicString::DynamicString((re::DynamicString *)&v169[1], (const re::DynamicString *)&v122);
          *(unsigned char *)uint64_t v107 = 0;
          *uint64_t v78 = v169[0];
          uint64_t v98 = *((void *)&v169[2] + 1);
          *(void *)(v107 + 24) = *(void *)&v169[1];
          *(void *)(v107 + 48) = v98;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v169[1] + 8);
          if (v120[0])
          {
            int v91 = 1;
LABEL_67:
            uint64_t v74 = v108;
            goto LABEL_68;
          }
          uint64_t v74 = v108;
          if (v122 && (v123 & 1) != 0)
          {
            (*(void (**)(void))(*(void *)v122 + 40))();
            uint64_t v74 = v108;
          }
        }
        else
        {
          v169[0] = v125;
          re::DynamicString::DynamicString((re::DynamicString *)&v169[1], (const re::DynamicString *)&v126);
          *(unsigned char *)uint64_t v107 = 0;
          *uint64_t v78 = v169[0];
          uint64_t v97 = *((void *)&v169[2] + 1);
          *(void *)(v107 + 24) = *(void *)&v169[1];
          *(void *)(v107 + 48) = v97;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v169[1] + 8);
        }
        int v91 = 1;
LABEL_68:
        if (!(_BYTE)v124 && v126 && (v127 & 1) != 0)
        {
          (*(void (**)(void))(*(void *)v126 + 40))();
          uint64_t v74 = v108;
        }
LABEL_69:
        if (!(_BYTE)v174 && *(void *)&v175[20] && (v175[28] & 1) != 0)
        {
          (*(void (**)(void))(**(void **)&v175[20] + 40))();
          goto LABEL_61;
        }
LABEL_70:
        if (!v128[0] && v130 && (v131 & 1) != 0)
        {
          (*(void (**)(void))(*(void *)v130 + 40))();
          uint64_t v74 = v108;
        }
        if (v91) {
          goto LABEL_100;
        }
        ++v62;
        v79 += 16;
        v76 += 24;
      }
      while (v62 < v74[1]);
    }
    re::types::Ok<re::EvaluationRigState>::Ok(v169, (uint64_t *)v176);
    re::Result<re::EvaluationRigState,re::DetailedError>::Result(v107, (uint64_t *)v169);
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v173);
    if ((void)v171)
    {
      if (*((void *)&v171 + 1))
      {
        (*(void (**)(void))(*(void *)v171 + 40))();
        *((void *)&v171 + 1) = 0;
        uint64_t v172 = 0;
      }
      *(void *)&long long v171 = 0;
    }
    if (*((void *)&v169[2] + 1))
    {
      if ((void)v170)
      {
        (*(void (**)(void))(**((void **)&v169[2] + 1) + 40))();
        long long v170 = 0uLL;
      }
      *((void *)&v169[2] + 1) = 0;
    }
    std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v169);
LABEL_100:
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)((char *)&v179 + 8));
    if ((void)v178)
    {
      if (*((void *)&v178 + 1))
      {
        (*(void (**)(void))(*(void *)v178 + 40))();
        *((void *)&v178 + 1) = 0;
        *(void *)&long long v179 = 0;
      }
      *(void *)&long long v178 = 0;
    }
    if (v176[2].n128_u64[1])
    {
      if ((void)v177)
      {
        (*(void (**)(void))(*(void *)v176[2].n128_u64[1] + 40))();
        long long v177 = 0uLL;
      }
      v176[2].n128_u64[1] = 0;
    }
    std::unique_ptr<re::internal::RigIKCallbackData,std::function<void ()(re::internal::RigIKCallbackData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v176);
  }
  else
  {
    *(_OWORD *)(v107 + 8) = v133;
    long long v102 = v134;
    uint64_t v103 = v135;
    uint64_t v104 = v136;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    long long v134 = 0uLL;
    *(unsigned char *)uint64_t v107 = 0;
    *(_OWORD *)(v107 + 24) = v102;
    *(void *)(v107 + 40) = v103;
    *(void *)(v107 + 48) = v104;
  }
  re::Result<re::RigGraphCompilation,re::DetailedError>::~Result(&v132);
  re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v196[2]);
  re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)&v211);
LABEL_111:
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v216);
  re::DynamicArray<re::RigDataValue>::deinit((uint64_t)v137);
  if (*((void *)&v164 + 1))
  {
    if (v167) {
      (*(void (**)(void))(**((void **)&v164 + 1) + 40))();
    }
    uint64_t v167 = 0;
    long long v165 = 0uLL;
    *((void *)&v164 + 1) = 0;
    ++v166;
  }
  if (*((void *)&v161 + 1))
  {
    if ((void)v164) {
      (*(void (**)(void))(**((void **)&v161 + 1) + 40))();
    }
    *(void *)&long long v164 = 0;
    long long v162 = 0uLL;
    *((void *)&v161 + 1) = 0;
    ++v163;
  }
  if (*((void *)&v158 + 1))
  {
    if ((void)v161) {
      (*(void (**)(void))(**((void **)&v158 + 1) + 40))();
    }
    *(void *)&long long v161 = 0;
    long long v159 = 0uLL;
    *((void *)&v158 + 1) = 0;
    ++v160;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)v156 + 8);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)&v154[1]);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)v152);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v149);
  v99.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v147[24]);
  return v99.n128_f64[0];
}

__n128 re::RigRuntimeData::constructRigCommandsForRig@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _anonymous_namespace_ **a5@<X4>, void *a6@<X5>, _anonymous_namespace_ *a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>, void *a10, void *a11)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (a1[9] > (unint64_t)a2
    && (unint64_t v13 = a2, v14 = (re::RigEvaluation *)(a1[10] + 1528 * a2), *((void *)v14 + 147)))
  {
    re::RigEvaluation::reset((re::RigEvaluation *)(a1[10] + 1528 * a2));
    unint64_t v19 = a1[6];
    if (v19 <= v13) {
      goto LABEL_35;
    }
    uint64_t v53 = a7;
    uint64_t v48 = a9;
    unint64_t v59 = (unint64_t)v14;
    re::RigEvaluation::setDefaultPose(v14, *(void *)(a1[7] + 8 * v13));
    uint64_t v21 = a5[1];
    uint64_t v52 = a3;
    if (v21)
    {
      unint64_t v22 = *a5;
      CMTag v54 = (_anonymous_namespace_ *)((char *)*a5 + 4 * (void)v21);
      unint64_t v19 = 0x3F80000000000000;
      while (1)
      {
        unint64_t v13 = *(unsigned int *)v22;
        unint64_t v23 = (void *)a3[17];
        if ((unint64_t)v23 <= v13) {
          goto LABEL_31;
        }
        unint64_t v24 = a4[1];
        if (v24 <= v13) {
          goto LABEL_32;
        }
        uint64_t v56 = v22;
        uint64_t v25 = a3[19];
        uint64_t v26 = v25 + 24 * v13;
        unint64_t v29 = *(const re::BindPoint **)(v26 + 8);
        unint64_t v27 = (unint64_t *)(v26 + 8);
        uint64_t v28 = v29;
        if (v29) {
          break;
        }
LABEL_12:
        unint64_t v22 = (_anonymous_namespace_ *)((char *)v56 + 4);
        a3 = v52;
        if ((_anonymous_namespace_ *)((char *)v56 + 4) == v54) {
          goto LABEL_13;
        }
      }
      uint64_t v30 = 0;
      uint64_t v31 = (re *)(*a4 + 48 * v13);
      a3 = (void *)(v25 + 24 * v13 + 16);
      unint64_t v13 = 8;
      while (1)
      {
        v70.n128_u64[0] = 0x3F8000003F800000;
        v70.n128_u64[1] = 1065353216;
        *(void *)&long long v71 = 0;
        *((void *)&v71 + 1) = 0x3F80000000000000;
        long long v72 = 0uLL;
        re::EvaluationTree::createInputRegister(a10, &v70, &v61);
        v70.n128_u64[0] = 0x3F8000003F800000;
        v70.n128_u64[1] = 1065353216;
        *(void *)&long long v71 = 0;
        *((void *)&v71 + 1) = 0x3F80000000000000;
        long long v72 = 0uLL;
        re::DynamicArray<re::EvaluationSRT>::add((_anonymous_namespace_ *)(a11 + 41), &v61);
        re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a11 + 86), (uint64_t)&v70);
        __int16 v32 = (void *)(a11[43] - 1);
        v60[0] = a11;
        v60[1] = v32;
        re::makeSkeletalPoseJointBindNode(v31, v30, (uint64_t)&v70);
        re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(v60[0], (uint64_t)v60, (uint64_t *)&v70, 0);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v70.n128_i64[1]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v70.n128_i64[1]);
        a9 = *v27;
        if (*v27 <= (unint64_t)v30) {
          break;
        }
        re::RigEvaluation::bindLocalSpaceJointInput(v59, *(char **)(*a3 + v13), (long long *)&v61);
        uint64_t v30 = (const re::BindPoint *)((char *)v30 + 1);
        v13 += 16;
        if (v28 == v30) {
          goto LABEL_12;
        }
      }
      uint64_t v62 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      unint64_t v42 = (void *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 476;
      __int16 v66 = 2048;
      unint64_t v67 = (unint64_t)v30;
      __int16 v68 = 2048;
      long long v69 = (void *)a9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_28;
    }
LABEL_13:
    uint64_t v33 = *((void *)v53 + 1);
    if (v33)
    {
      unint64_t v34 = *(unsigned int **)v53;
      uint64_t v49 = *(void *)v53 + 4 * v33;
      while (1)
      {
        a9 = *v34;
        unint64_t v23 = (void *)a3[22];
        if ((unint64_t)v23 <= a9) {
          goto LABEL_33;
        }
        unint64_t v35 = a6[1];
        if (v35 <= a9) {
          goto LABEL_34;
        }
        uint64_t v50 = v34;
        uint64_t v36 = a3[24];
        uint64_t v37 = v36 + 24 * a9;
        uint64_t v38 = *(_anonymous_namespace_ **)(v37 + 8);
        unint64_t v19 = v37 + 8;
        uint64_t v58 = v38;
        if (v38) {
          break;
        }
LABEL_23:
        unint64_t v34 = v50 + 1;
        a3 = v52;
        if (v50 + 1 == (unsigned int *)v49) {
          goto LABEL_24;
        }
      }
      uint64_t v39 = 0;
      unint64_t v13 = 0;
      uint64_t v40 = *a6 + 40 * a9;
      uint64_t v41 = (unint64_t *)(v40 + 16);
      unint64_t v23 = (void *)(v40 + 32);
      uint64_t v57 = (_anonymous_namespace_ *)(v36 + 24 * a9 + 16);
      a9 = 8;
      while (1)
      {
        unint64_t v42 = (void *)*v41;
        if (*v41 <= v13) {
          break;
        }
        uint64_t v43 = *v23 + v39;
        v70.n128_u32[0] = 4;
        long long v71 = 0uLL;
        v70.n128_u64[1] = 0;
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a10 + 228), (uint64_t)&v70);
        v70.n128_u64[0] = a10[230] - 1;
        re::DynamicArray<unsigned long>::add(a10 + 21, &v70);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a10 + 61), v43);
        uint64_t v44 = *(void *)(a10[25] + 8 * a10[23] - 8);
        long long v72 = 0u;
        long long v73 = 0u;
        __n128 v70 = 0u;
        long long v71 = 0u;
        *(void *)uint64_t v63 = v44;
        re::DynamicArray<unsigned long>::add(a11 + 21, v63);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a11 + 66), (uint64_t)&v70);
        uint64_t v45 = a11[23] - 1;
        v61.n128_u64[0] = (unint64_t)a11;
        v61.n128_u64[1] = v45;
        a3 = (void *)*v41;
        if (*v41 <= v13) {
          goto LABEL_29;
        }
        re::EvaluationInputHandle<re::Matrix4x4<float>>::bindEvaluationInput<re::Matrix4x4<float>>(&v61, (const re::IntrospectionBase *)(*v23 + v39));
        a3 = *(void **)v19;
        if (*(void *)v19 <= v13) {
          goto LABEL_30;
        }
        re::RigEvaluation::bindModelSpaceJointInput(v59, *(char **)(*(void *)v57 + a9), v44);
        ++v13;
        a9 += 16;
        v39 += 64;
        if (v58 == (_anonymous_namespace_ *)v13) {
          goto LABEL_23;
        }
      }
LABEL_28:
      v61.n128_u64[0] = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      unint64_t v23 = (void *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 797;
      __int16 v66 = 2048;
      unint64_t v67 = v13;
      __int16 v68 = 2048;
      long long v69 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v60[0] = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 797;
      __int16 v66 = 2048;
      unint64_t v67 = v13;
      __int16 v68 = 2048;
      long long v69 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      v60[0] = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 476;
      __int16 v66 = 2048;
      unint64_t v67 = v13;
      __int16 v68 = 2048;
      long long v69 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v61.n128_u64[0] = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 797;
      __int16 v66 = 2048;
      unint64_t v67 = v13;
      __int16 v68 = 2048;
      long long v69 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, v24, a8, v48);
      _os_crash();
      __break(1u);
LABEL_33:
      v61.n128_u64[0] = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 797;
      __int16 v66 = 2048;
      unint64_t v67 = a9;
      __int16 v68 = 2048;
      long long v69 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a9, v35);
      _os_crash();
      __break(1u);
LABEL_35:
      v61.n128_u64[0] = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      __n128 v70 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v63 = 136315906;
      *(void *)&v63[4] = "operator[]";
      __int16 v64 = 1024;
      int v65 = 476;
      __int16 v66 = 2048;
      unint64_t v67 = v13;
      __int16 v68 = 2048;
      long long v69 = (void *)v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_24:
    re::RigEvaluation::constructEvaluationCommands(v59, *(void *)a8, *(void *)(a8 + 8), (unint64_t)a10, v48);
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Invalid rig entry handle: %u.", (re::DynamicString *)&v70, a2);
    __n128 result = v70;
    long long v47 = v71;
    *(unsigned char *)a9 = 0;
    *(void *)(a9 + 8) = 100;
    *(void *)(a9 + 16) = re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a9 + 24) = result;
    *(_OWORD *)(a9 + 40) = v47;
  }
  return result;
}

void re::FixedArray<re::FixedArray<unsigned int>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 24 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    uint64_t v8 = (void *)((char *)v8 + v5 - 24);
  }
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
}

uint64_t re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 24 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(_DWORD *)(v11 + 24 * v10 + 12) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 24 * v10;
  return v12 + 16;
}

uint64_t re::EvaluationInputHandle<re::Matrix4x4<float>>::bindEvaluationInput<re::Matrix4x4<float>>(void **a1, const re::IntrospectionBase *a2)
{
  uint64_t v3 = &qword_268772000;
  {
    *(void *)unint64_t v6 = a2;
    uint64_t v3 = &qword_268772000;
    a2 = *(const re::IntrospectionBase **)v6;
    if (v5)
    {
      re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
      uint64_t v3 = &qword_268772000;
      a2 = *(const re::IntrospectionBase **)v6;
    }
  }
  re::makeBindPoint((re *)v3[102], a2, (uint64_t)&v7);
  re::EvaluationContextManager::bindInputHandle<re::Matrix4x4<float>>(*a1, (uint64_t)a1, &v7);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8);
}

double re::RigRuntimeData::makeRigHierarchyForPose(re::RigRuntimeData *this, const re::MeshAsset *a2, const re::SkeletalPoseDefinitionAsset *a3, uint64_t a4, const re::BindPoint *a5, const re::RigEnvironment *a6, re::EvaluationTree *a7, re::EvaluationContextManager *a8)
{
  unint64_t v35 = this;
  v88[5] = *MEMORY[0x263EF8340];
  memset(v43, 0, sizeof(v43));
  uint64_t v44 = 0x7FFFFFFFLL;
  memset(v45, 0, sizeof(v45));
  int v46 = 0;
  uint64_t v47 = 0x7FFFFFFFLL;
  memset(v48, 0, sizeof(v48));
  uint64_t v63 = 0;
  memset(v50, 0, sizeof(v50));
  int v49 = 0;
  int v51 = 0;
  memset(v52, 0, sizeof(v52));
  int v53 = 0;
  int v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  int v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  int v62 = 0;
  uint64_t v8 = *((void *)a3 + 37);
  if (!v8)
  {
LABEL_20:
    long long v24 = v64;
    uint64_t v25 = v65;
    uint64_t v26 = v66[0];
    *(unsigned char *)unint64_t v35 = 0;
    *((void *)v35 + 1) = 6002;
    *((void *)v35 + 2) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)((char *)v35 + 24) = v24;
    *((void *)v35 + 5) = v25;
    *((void *)v35 + 6) = v26;
    goto LABEL_43;
  }
  unint64_t v11 = *((void *)a2 + 117);
  uint64_t v12 = *((void *)a3 + 39);
  uint64_t v13 = v12 + (v8 << 6);
  uint64_t v36 = (const re::MeshAsset *)((char *)a2 + 448);
  while (1)
  {
    uint64_t v14 = v13 - 64;
    if (*(_DWORD *)(v13 - 4) == a4) {
      break;
    }
LABEL_19:
    v13 -= 64;
    if (v14 == v12) {
      goto LABEL_20;
    }
  }
  re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v36, (unsigned __int8 *)(v13 - 64), &v64);
  v86[0] = a2;
  v86[1] = v36;
  uint64_t v87 = v64;
  v88[3] = v66[1];
  v88[4] = 0;
  re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)v88, (uint64_t)&v64 + 8);
  re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v64 + 8);
  uint64_t v41 = v86;
  uint64_t v42 = 0;
  uint64_t v15 = v87;
  if (!v87)
  {
LABEL_18:
    this = (re::RigRuntimeData *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v88);
    uint64_t v12 = *((void *)a3 + 39);
    goto LABEL_19;
  }
  uint64_t v16 = (void *)(v13 - 24);
  while (1)
  {
    uint64_t v17 = re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(&v41);
    *(void *)&long long v64 = v42;
    uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v41[7] + 16))(v41[7], &v64);
    uint64_t v19 = *(void *)(v17 + 176);
    if (v19)
    {
      if (*(void *)(v19 + 8) > (unint64_t)WORD2(v18))
      {
        unint64_t v20 = *(unsigned int *)(*(void *)(v19 + 16) + 72 * WORD2(v18) + 4);
        if (v11 > v20)
        {
          if (*v16 >= 0xFFFFFFFFFFFFFFFELL && (*v16 & 1) == 0 && !**(unsigned char **)(v13 - 16)) {
            break;
          }
          uint64_t v21 = (void *)re::MeshAsset::skeletonAtIndex(a2, v20);
          if (re::StringID::operator==((void *)(v13 - 24), v21)) {
            break;
          }
        }
      }
    }
    uint64_t v22 = ++v42;
    if (v41 == v86 && v22 == v15) {
      goto LABEL_18;
    }
  }
  if (*((void *)a2 + 28) > v20
    && (unint64_t v27 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::SkeletonAsset>((re::SkeletonAsset *)(*((void *)a2 + 30) + 24 * v20))) != 0)
  {
    uint64_t v28 = (_anonymous_namespace_ *)((char *)v27 + 88);
  }
  else
  {
    unint64_t v27 = (_anonymous_namespace_ *)re::MeshAsset::skeletonAtIndex(a2, v20);
    uint64_t v28 = v27;
  }
  __n128 v29 = re::RigHierarchy::bindRigHierarchyPose((re::RigHierarchy *)v43, a7, a8, a5, v38);
  if (!v38[0] && (void)v39)
  {
    if (BYTE8(v39)) {
      (*(void (**)(__n128))(*(void *)v39 + 40))(v29);
    }
    long long v39 = 0u;
    long long v40 = 0u;
  }
  re::RigHierarchy::RigHierarchy((uint64_t)&v64, (long long *)v43);
  *(unsigned char *)unint64_t v35 = 1;
  re::RigHierarchy::RigHierarchy((uint64_t)v35 + 8, &v64);
  if (v81)
  {
    if (v85) {
      (*(void (**)(void))(*(void *)v81 + 40))();
    }
    uint64_t v85 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v81 = 0;
    ++v84;
  }
  if (v76)
  {
    if (v80) {
      (*(void (**)(void))(*(void *)v76 + 40))();
    }
    uint64_t v80 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = 0;
    ++v79;
  }
  if (v71)
  {
    if (v75) {
      (*(void (**)(void))(*(void *)v71 + 40))();
    }
    uint64_t v75 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    ++v74;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)&v70);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)&v69);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)&v68);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v67);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v66);
  re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v88);
LABEL_43:
  if (*((void *)&v60 + 1))
  {
    if (v63) {
      (*(void (**)(void))(**((void **)&v60 + 1) + 40))();
    }
    uint64_t v63 = 0;
    long long v61 = 0uLL;
    *((void *)&v60 + 1) = 0;
    ++v62;
  }
  if (*((void *)&v57 + 1))
  {
    if ((void)v60) {
      (*(void (**)(void))(**((void **)&v57 + 1) + 40))();
    }
    *(void *)&long long v60 = 0;
    long long v58 = 0uLL;
    *((void *)&v57 + 1) = 0;
    ++v59;
  }
  if (*((void *)&v54 + 1))
  {
    if ((void)v57) {
      (*(void (**)(void))(**((void **)&v54 + 1) + 40))();
    }
    *(void *)&long long v57 = 0;
    long long v55 = 0uLL;
    *((void *)&v54 + 1) = 0;
    ++v56;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)&v52[8]);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)&v50[8]);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)v48);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v45);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v43[24]);
}

uint64_t re::AssetHandle::loadedAsset<re::SkeletonAsset>(re::SkeletonAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::SkeletonAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::anonymous namespace'::setCompilationValueForBoundInput(uint64_t result, uint64_t a2, const re::RigEnvironment *a3, void *a4, re::EvaluationContextManager *a5, uint64_t a6, unint64_t a7, re::BindNode **a8)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  uint64_t v114 = a6;
  unint64_t v115 = a7;
  unint64_t v9 = (re::RigDataTypeClass *)(a2 + 32);
  uint64_t v10 = (void *)a7;
  uint64_t v12 = (__guard *)a5;
  uint64_t v13 = a4;
  uint64_t v15 = (unsigned char *)result;
  uint64_t v16 = v175;
  uint64_t v17 = &v145;
  uint64_t v113 = a2;
  switch(*(unsigned char *)(a2 + 32))
  {
    case 1:
      uint64_t v143 = a6;
      v144[0] = a7;
      v145.n128_u32[0] = 0;
      v167[0].n128_u32[0] = 0;
      memset(&v167[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 208), (uint64_t)v167);
      v167[0].n128_u64[0] = v13[210] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 1, v167);
      re::DynamicArray<int>::add(v13 + 41, &v145);
      a3 = *(const re::RigEnvironment **)(v13[5] + 8 * v13[3] - 8);
      v145.n128_u32[0] = 0;
      v167[0].n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 1, v167);
      re::DynamicArray<int>::add(v12 + 46, &v145);
      uint64_t v10 = v12;
      uint64_t v13 = (void *)v12[3];
      uint64_t v8 = &off_268773000;
      goto LABEL_191;
    case 2:
      uint64_t v143 = a6;
      v144[0] = a7;
      v145.n128_u32[0] = 0;
      v167[0].n128_u32[0] = 1;
      memset(&v167[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 213), (uint64_t)v167);
      v167[0].n128_u64[0] = v13[215] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 6, v167);
      re::DynamicArray<int>::add(v13 + 46, &v145);
      a3 = *(const re::RigEnvironment **)(v13[10] + 8 * v13[8] - 8);
      v145.n128_u32[0] = 0;
      v167[0].n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 6, v167);
      re::DynamicArray<int>::add(v12 + 51, &v145);
      uint64_t v22 = v12;
      unint64_t v23 = v12[8];
      {
        re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v99);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<unsigned int>(void)::info, &v143, (uint64_t)&v121);
      uint64_t v18 = v113;
      if (!v123[0]) {
        goto LABEL_161;
      }
      uint64_t v19 = v15;
      long long v24 = (void *)v121.n128_u64[0];
      {
        uint64_t v18 = v113;
        if (v102)
        {
          re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v103);
          uint64_t v18 = v113;
        }
      }
      BOOL v21 = v24 == re::introspect<unsigned int>(void)::info;
      uint64_t v15 = v19;
      if (!v21) {
        goto LABEL_161;
      }
      unint64_t v118 = v23 - 1;
      if (v23 - 1 >= v12[98])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 96, v23);
        goto LABEL_140;
      }
      if (!*(void *)(v12[100] + 56 * (v23 - 1) + 24))
      {
LABEL_140:
        re::DynamicArray<unsigned long>::add(v12 + 141, &v118);
        v145.n128_u64[0] = v121.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
        v146[32] = 0;
        unint64_t v88 = v118;
        unint64_t v89 = v12[98];
        if (v89 > v118)
        {
          __guard v90 = v22[100];
          goto LABEL_159;
        }
LABEL_184:
        v120[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        uint64_t v17 = (__n128 *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float64_t v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)&v175[20] = v88;
        *(_WORD *)&v175[28] = 2048;
        *(void *)&v175[30] = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_185;
      }
      goto LABEL_160;
    case 3:
      uint64_t v16 = (unsigned char *)result;
      uint64_t v143 = a6;
      v144[0] = a7;
      v145.n128_u32[0] = 0;
      v167[0].n128_u32[0] = 2;
      memset(&v167[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 218), (uint64_t)v167);
      v167[0].n128_u64[0] = v13[220] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 11, v167);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 51), (float *)&v145);
      unint64_t v25 = *(void *)(v13[15] + 8 * v13[13] - 8);
      v145.n128_u32[0] = 0;
      v167[0].n128_u64[0] = v25;
      re::DynamicArray<unsigned long>::add(v12 + 11, v167);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)(v12 + 56), (float *)&v145);
      uint64_t v26 = v12;
      unint64_t v27 = v12[13];
      re::BindNode::bindPointWithOverride<float>(a8, &v143, (uint64_t)&v121);
      uint64_t v28 = v113;
      if (!v123[0]) {
        goto LABEL_146;
      }
      __n128 v29 = (void *)v121.n128_u64[0];
      {
        uint64_t v28 = v113;
        if (v104)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v105);
          uint64_t v28 = v113;
        }
      }
      if (v29 != re::introspect<float>(void)::info) {
        goto LABEL_146;
      }
      unint64_t v118 = v27 - 1;
      if (v27 - 1 >= v12[103])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 101, v27);
      }
      else if (*(void *)(v12[105] + 56 * (v27 - 1) + 24))
      {
LABEL_145:
        uint64_t v28 = v113;
LABEL_146:
        *(unsigned char *)(v28 + 96) = 2;
        *(void *)(v28 + 176) = v25;
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v121.n128_i64[1]);
        __n128 result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v121.n128_i64[1]);
        uint64_t v15 = v16;
        goto LABEL_163;
      }
      re::DynamicArray<unsigned long>::add(v12 + 146, &v118);
      v145.n128_u64[0] = v121.n128_u64[0];
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
      v146[32] = 0;
      unint64_t v88 = v118;
      unint64_t v89 = v12[103];
      if (v89 <= v118)
      {
LABEL_185:
        v120[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        uint64_t v17 = (__n128 *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float64_t v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)&v175[20] = v88;
        *(_WORD *)&v175[28] = 2048;
        *(void *)&v175[30] = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_186:
        v120[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        uint64_t v17 = (__n128 *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float64_t v175 = 136315906;
        *(void *)(v16 + 4) = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)(v16 + 20) = v88;
        *(_WORD *)&v175[28] = 2048;
        *(void *)(v16 + 30) = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_187:
        v120[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        uint64_t v17 = (__n128 *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float64_t v175 = 136315906;
        *(void *)(v16 + 4) = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)(v16 + 20) = v88;
        *(_WORD *)&v175[28] = 2048;
        *(void *)(v16 + 30) = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_188:
        v120[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        uint64_t v17 = (__n128 *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float64_t v175 = 136315906;
        *(void *)(v16 + 4) = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)(v16 + 20) = v88;
        *(_WORD *)&v175[28] = 2048;
        *(void *)(v16 + 30) = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_189;
      }
      uint64_t v91 = v26[105] + 56 * v118;
      *(void *)uint64_t v91 = v145.n128_u64[0];
      re::DynamicArray<re::RigDataValue>::operator=(v91 + 8, (uint64_t)&v145.n128_i64[1]);
      *(unsigned char *)(v91 + 48) = v146[32];
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v145.n128_i64[1]);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v145.n128_i64[1]);
      goto LABEL_145;
    case 4:
      uint64_t v143 = a6;
      v144[0] = a7;
      memset(v167, 0, 48);
      v145.n128_u32[0] = 3;
      v145.n128_u64[1] = 0;
      *(_OWORD *)long long v146 = 0uLL;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 223), (uint64_t)&v145);
      v145.n128_u64[0] = v13[225] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 16, &v145);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 56), (uint64_t)v167);
      a3 = *(const re::RigEnvironment **)(v13[20] + 8 * v13[18] - 8);
      memset(v167, 0, 48);
      v145.n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 16, &v145);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v12 + 61), (uint64_t)v167);
      uint64_t v30 = v12;
      unint64_t v31 = v12[18];
      {
        re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Matrix3x3<float>>(void)::info, &v143, (uint64_t)&v121);
      uint64_t v18 = v113;
      if (!v123[0]) {
        goto LABEL_161;
      }
      uint64_t v19 = v15;
      __int16 v32 = (void *)v121.n128_u64[0];
      {
        uint64_t v18 = v113;
        if (v106)
        {
          re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
          uint64_t v18 = v113;
        }
      }
      BOOL v21 = v32 == re::introspect<re::Matrix3x3<float>>(void)::info;
      uint64_t v15 = v19;
      if (!v21) {
        goto LABEL_161;
      }
      unint64_t v118 = v31 - 1;
      if (v31 - 1 >= v12[108])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 106, v31);
        goto LABEL_148;
      }
      if (!*(void *)(v12[110] + 56 * (v31 - 1) + 24))
      {
LABEL_148:
        re::DynamicArray<unsigned long>::add(v12 + 151, &v118);
        v145.n128_u64[0] = v121.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
        v146[32] = 0;
        unint64_t v88 = v118;
        unint64_t v89 = v12[108];
        if (v89 > v118)
        {
          __guard v90 = v30[110];
          goto LABEL_159;
        }
        goto LABEL_186;
      }
      goto LABEL_160;
    case 5:
      uint64_t v33 = result;
      v121.n128_u64[0] = a6;
      v121.n128_u64[1] = a7;
      memset(v167, 0, 64);
      v145.n128_u32[0] = 4;
      v145.n128_u64[1] = 0;
      *(_OWORD *)long long v146 = 0uLL;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 228), (uint64_t)&v145);
      v145.n128_u64[0] = v13[230] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 21, &v145);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 61), (uint64_t)v167);
      unint64_t v34 = *(void *)(v13[25] + 8 * v13[23] - 8);
      memset(v167, 0, 64);
      v145.n128_u64[0] = v34;
      re::DynamicArray<unsigned long>::add(v12 + 21, &v145);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v12 + 66), (uint64_t)v167);
      uint64_t v35 = v12[23] - 1;
      v145.n128_u64[0] = (unint64_t)v12;
      v145.n128_u64[1] = v35;
      {
        re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Matrix4x4<float>>(void)::info, (uint64_t *)&v121, (uint64_t)v167);
      re::EvaluationContextManager::bindInputHandle<re::Matrix4x4<float>>(v12, (uint64_t)&v145, (uint64_t *)v167);
      *(unsigned char *)(v113 + 96) = 2;
      *(void *)(v113 + 176) = v34;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v167[0].n128_i64[1]);
      __n128 result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v167[0].n128_i64[1]);
      uint64_t v15 = (unsigned char *)v33;
      goto LABEL_163;
    case 6:
      uint64_t v143 = a6;
      v144[0] = a7;
      __n128 v145 = (__n128)xmmword_23435FBB0;
      v167[0].n128_u32[0] = 5;
      memset(&v167[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 233), (uint64_t)v167);
      v167[0].n128_u64[0] = v13[235] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 26, v167);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v13 + 66), &v145);
      a3 = *(const re::RigEnvironment **)(v13[30] + 8 * v13[28] - 8);
      v167[0] = (__n128)xmmword_23435FBB0;
      v145.n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 26, &v145);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v12 + 71), v167);
      uint64_t v36 = v12;
      unint64_t v37 = v12[28];
      {
        re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      }
      re::BindNode::bindPointWithOverride(a8, re::introspect<re::Quaternion<float>>(void)::info, &v143, (uint64_t)&v121);
      uint64_t v18 = v113;
      if (!v123[0]) {
        goto LABEL_161;
      }
      uint64_t v19 = v15;
      unint64_t v38 = v121.n128_u64[0];
      {
        uint64_t v18 = v113;
        if (v107)
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
          uint64_t v18 = v113;
        }
      }
      BOOL v21 = v38 == re::introspect<re::Quaternion<float>>(void)::info;
      uint64_t v15 = v19;
      if (!v21) {
        goto LABEL_161;
      }
      unint64_t v118 = v37 - 1;
      if (v37 - 1 >= v12[118])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 116, v37);
        goto LABEL_151;
      }
      if (!*(void *)(v12[120] + 56 * (v37 - 1) + 24))
      {
LABEL_151:
        re::DynamicArray<unsigned long>::add(v12 + 161, &v118);
        v145.n128_u64[0] = v121.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
        v146[32] = 0;
        unint64_t v88 = v118;
        unint64_t v89 = v12[118];
        if (v89 > v118)
        {
          __guard v90 = v36[120];
          goto LABEL_159;
        }
        goto LABEL_187;
      }
      goto LABEL_160;
    case 7:
      uint64_t v143 = a6;
      v144[0] = a7;
      v145.n128_u64[0] = 0;
      v167[0].n128_u32[0] = 6;
      memset(&v167[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 238), (uint64_t)v167);
      v167[0].n128_u64[0] = v13[240] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 31, v167);
      re::DynamicArray<unsigned long>::add(v13 + 71, &v145);
      a3 = *(const re::RigEnvironment **)(v13[35] + 8 * v13[33] - 8);
      v145.n128_u64[0] = 0;
      v167[0].n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 31, v167);
      re::DynamicArray<unsigned long>::add(v12 + 76, &v145);
      long long v39 = v12;
      unint64_t v40 = v12[33];
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, &v143, (uint64_t)&v121);
      uint64_t v18 = v113;
      if (!v123[0]) {
        goto LABEL_161;
      }
      uint64_t v19 = v15;
      uint64_t v41 = (void *)v121.n128_u64[0];
      {
        uint64_t v18 = v113;
        if (v108)
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
          uint64_t v18 = v113;
        }
      }
      BOOL v21 = v41 == re::introspect<re::Vector2<float>>(void)::info;
      uint64_t v15 = v19;
      if (!v21) {
        goto LABEL_161;
      }
      unint64_t v118 = v40 - 1;
      if (v40 - 1 >= v12[123])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 121, v40);
        goto LABEL_154;
      }
      if (!*(void *)(v12[125] + 56 * (v40 - 1) + 24))
      {
LABEL_154:
        re::DynamicArray<unsigned long>::add(v12 + 166, &v118);
        v145.n128_u64[0] = v121.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
        v146[32] = 0;
        unint64_t v88 = v118;
        unint64_t v89 = v12[123];
        if (v89 > v118)
        {
          __guard v90 = v39[125];
          goto LABEL_159;
        }
        goto LABEL_188;
      }
      goto LABEL_160;
    case 8:
      uint64_t v143 = a6;
      v144[0] = a7;
      __n128 v145 = 0u;
      v167[0].n128_u32[0] = 7;
      memset(&v167[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 243), (uint64_t)v167);
      v167[0].n128_u64[0] = v13[245] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 36, v167);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v13 + 76), &v145);
      a3 = *(const re::RigEnvironment **)(v13[40] + 8 * v13[38] - 8);
      v167[0] = 0u;
      v145.n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 36, &v145);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v12 + 81), v167);
      uint64_t v42 = v12;
      unint64_t v43 = v12[38];
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, &v143, (uint64_t)&v121);
      uint64_t v18 = v113;
      if (!v123[0]) {
        goto LABEL_161;
      }
      uint64_t v19 = v15;
      uint64_t v44 = (void *)v121.n128_u64[0];
      {
        uint64_t v18 = v113;
        if (v109)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          uint64_t v18 = v113;
        }
      }
      BOOL v21 = v44 == re::introspect<re::Vector3<float>>(void)::info;
      uint64_t v15 = v19;
      if (!v21) {
        goto LABEL_161;
      }
      unint64_t v118 = v43 - 1;
      if (v43 - 1 >= v12[128])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 126, v43);
        goto LABEL_157;
      }
      if (!*(void *)(v12[130] + 56 * (v43 - 1) + 24))
      {
LABEL_157:
        re::DynamicArray<unsigned long>::add(v12 + 171, &v118);
        v145.n128_u64[0] = v121.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
        v146[32] = 0;
        unint64_t v88 = v118;
        unint64_t v89 = v12[128];
        if (v89 > v118)
        {
          __guard v90 = v42[130];
          goto LABEL_159;
        }
LABEL_189:
        v120[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float64_t v175 = 136315906;
        *(void *)(v16 + 4) = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)(v16 + 20) = v88;
        *(_WORD *)&v175[28] = 2048;
        *(void *)(v16 + 30) = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      goto LABEL_160;
    case 0xA:
      memset(v146, 0, sizeof(v146));
      __n128 v145 = 0u;
      uint64_t v147 = 0x7FFFFFFFLL;
      memset(v148, 0, sizeof(v148));
      int v149 = 0;
      uint64_t v150 = 0x7FFFFFFFLL;
      memset(v151, 0, sizeof(v151));
      uint64_t v166 = 0;
      memset(v153, 0, sizeof(v153));
      int v152 = 0;
      int v154 = 0;
      memset(v155, 0, sizeof(v155));
      int v156 = 0;
      int v159 = 0;
      long long v158 = 0u;
      long long v157 = 0u;
      int v162 = 0;
      long long v160 = 0u;
      long long v161 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      int v165 = 0;
      re::BindNode::bindPointWithOverride<re::SkeletalPose>(a8, &v114, (uint64_t)&v143);
      int v46 = (_anonymous_namespace_ *)re::BindPoint::valueUntyped((re::BindPoint *)&v143);
      if (!v46 || (uint64_t v47 = *((void *)v46 + 10)) == 0 || !*(void *)(v47 + 40))
      {
        v121.n128_u64[0] = (unint64_t)".";
        v121.n128_u64[1] = 1;
        re::StringSlice::findLastOf(&v114, (unsigned __int8 **)&v121, 0, (uint64_t)v120);
        v121.n128_u64[0] = (unint64_t)"]";
        v121.n128_u64[1] = 1;
        re::StringSlice::findLastOf(&v114, (unsigned __int8 **)&v121, 0, (uint64_t)&v118);
        v121.n128_u64[0] = (unint64_t)"[";
        v121.n128_u64[1] = 1;
        LastOf = (_anonymous_namespace_ *)re::StringSlice::findLastOf(&v114, (unsigned __int8 **)&v121, 0, (uint64_t)v116);
        if (LOBYTE(v120[0]))
        {
          if ((_BYTE)v118)
          {
            if (v116[0])
            {
              unint64_t v63 = v119;
              unint64_t v64 = v117;
              if (v119 > v117)
              {
                uint64_t v111 = v15;
                *(void *)float64_t v175 = re::Slice<char>::range(&v114, 0, v120[1]);
                *(void *)&v175[8] = v65;
                re::BindNode::bindPoint<re::ecs2::SkeletalPoseComponent>((uint64_t)&v121, a8, (uint64_t *)v175);
                uint64_t v66 = re::BindPoint::valueUntyped((re::BindPoint *)&v121);
                if (!v66)
                {
                  v167[0].n128_u8[0] = 0;
                  v167[0].n128_u64[1] = 6002;
                  v167[1].n128_u64[0] = (unint64_t)&re::AnimationErrorCategory(void)::instance;
                  *(__n128 *)((char *)&v167[1] + 8) = *(__n128 *)v175;
                  v167[2].n128_u64[1] = *(void *)&v175[16];
                  v167[3].n128_u64[0] = *(void *)&v175[24];
LABEL_182:
                  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v121.n128_i64[1]);
                  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v121.n128_i64[1]);
                  goto LABEL_166;
                }
                uint64_t v67 = v66;
                uint64_t v68 = *(void *)(*(void *)(v66 + 16) + 176);
                if (v68)
                {
                  uint64_t v69 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v68 + 32));
                  if (v69)
                  {
                    unint64_t v70 = v64 + 1;
                    size_t v71 = v63 - (v64 + 1);
                    uint64_t v72 = (const re::MeshAsset *)v69;
                    uint64_t v73 = (_anonymous_namespace_ *)re::Slice<char>::operator[](v114, v115, v70);
                    if (v175[8]) {
                      int v74 = *(const char **)&v175[16];
                    }
                    else {
                      int v74 = &v175[9];
                    }
                    unsigned int v75 = atoi(v74);
                    uint64_t v76 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(v67 + 32));
                    if (v76) {
                      uint64_t v77 = (const re::SkeletalPoseDefinitionAsset *)v76;
                    }
                    else {
                      uint64_t v77 = (const re::SkeletalPoseDefinitionAsset *)(v67 + 152);
                    }
                    double RigHierarchyForPose = re::RigRuntimeData::makeRigHierarchyForPose((re::RigRuntimeData *)v167, v72, v77, v75, (const re::BindPoint *)&v143, a3, (re::EvaluationTree *)v13, a5);
                    if (*(void *)v175 && (v175[8] & 1) != 0) {
                      (*(void (**)(double))(**(void **)v175 + 40))(RigHierarchyForPose);
                    }
                    uint64_t v15 = v111;
                    goto LABEL_182;
                  }
                }
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v121.n128_i64[1]);
                LastOf = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v121.n128_i64[1]);
                uint64_t v15 = v111;
              }
            }
          }
        }
        v167[0].n128_u8[0] = 0;
        v167[0].n128_u64[1] = 6002;
        v167[1].n128_u64[0] = (unint64_t)&re::AnimationErrorCategory(void)::instance;
        *(__n128 *)((char *)&v167[1] + 8) = v121;
        v167[2].n128_u64[1] = v122;
        v167[3].n128_u64[0] = v123[0];
        goto LABEL_166;
      }
      uint64_t v48 = v15;
      int v49 = (const re::Skeleton *)(v47 + 24);
      __n128 v50 = re::RigHierarchy::bindRigHierarchyPose((re::RigHierarchy *)&v145, (re::EvaluationTree *)v13, a5, (const re::BindPoint *)&v143, v175);
      if (!v175[0] && *(void *)&v175[24])
      {
        if (v175[32]) {
          (*(void (**)(__n128))(**(void **)&v175[24] + 40))(v50);
        }
        *(_OWORD *)&v175[24] = 0u;
        long long v176 = 0u;
      }
      re::RigHierarchy::RigHierarchy((uint64_t)&v121, (long long *)&v145);
      v167[0].n128_u8[0] = 1;
      re::RigHierarchy::RigHierarchy((uint64_t)&v167[0].n128_i64[1], (long long *)&v121);
      uint64_t v15 = v48;
      if (v138)
      {
        if (v142) {
          (*(void (**)(void))(*(void *)v138 + 40))();
        }
        uint64_t v142 = 0;
        uint64_t v139 = 0;
        uint64_t v140 = 0;
        uint64_t v138 = 0;
        ++v141;
      }
      if (v133)
      {
        if (v137) {
          (*(void (**)(void))(*(void *)v133 + 40))();
        }
        uint64_t v137 = 0;
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        uint64_t v133 = 0;
        ++v136;
      }
      if (v128)
      {
        if (v132) {
          (*(void (**)(void))(*(void *)v128 + 40))();
        }
        uint64_t v132 = 0;
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v128 = 0;
        ++v131;
      }
      re::DynamicArray<re::StringID>::deinit((uint64_t)&v127);
      re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)&v126);
      re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)&v125);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v124);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v123);
LABEL_166:
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v144);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v144);
      if (*((void *)&v163 + 1))
      {
        if (v166) {
          (*(void (**)(void))(**((void **)&v163 + 1) + 40))();
        }
        uint64_t v166 = 0;
        long long v164 = 0uLL;
        *((void *)&v163 + 1) = 0;
        ++v165;
      }
      if (*((void *)&v160 + 1))
      {
        if ((void)v163) {
          (*(void (**)(void))(**((void **)&v160 + 1) + 40))();
        }
        *(void *)&long long v163 = 0;
        long long v161 = 0uLL;
        *((void *)&v160 + 1) = 0;
        ++v162;
      }
      if (*((void *)&v157 + 1))
      {
        if ((void)v160) {
          (*(void (**)(void))(**((void **)&v157 + 1) + 40))();
        }
        *(void *)&long long v160 = 0;
        long long v158 = 0uLL;
        *((void *)&v157 + 1) = 0;
        ++v159;
      }
      re::DynamicArray<re::StringID>::deinit((uint64_t)&v155[8]);
      re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit((uint64_t)&v153[8]);
      re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit((uint64_t)v151);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v148);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v146[8]);
      if (v167[0].n128_u8[0])
      {
        uint64_t v93 = *(void *)(v113 + 184);
        long long v94 = *(long long *)((char *)v167 + 8);
        *(void *)(v93 + 16) = v167[1].n128_u64[1];
        *(_OWORD *)uint64_t v93 = v94;
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v93 + 24, (uint64_t)&v167[2]);
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v93 + 72, (uint64_t)&v168);
        re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(v93 + 120, v169);
        re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(v93 + 160, v170);
        re::DynamicArray<re::StringID>::operator=(v93 + 200, v171);
        re::DynamicArray<unsigned long>::operator=(v93 + 240, v172);
        re::DynamicArray<re::RigHierarchyJointTransform>::operator=(v93 + 280, v173);
        re::DynamicArray<unsigned long>::operator=(v93 + 320, v174);
        __n128 result = re::Result<re::RigHierarchy,re::DetailedError>::~Result((uint64_t)v167);
LABEL_163:
        unsigned char *v15 = 1;
        return result;
      }
      __n128 v145 = *(__n128 *)((char *)v167 + 8);
      re::DynamicString::DynamicString((re::DynamicString *)v146, (const re::DynamicString *)&v167[1].n128_i8[8]);
      uint64_t v95 = *(void *)&v146[16];
      uint64_t v96 = *(void *)&v146[24];
      unsigned char *v15 = 0;
      long long v97 = *(_OWORD *)v146;
      *(__n128 *)(v15 + 8) = v145;
      *(_OWORD *)(v15 + 24) = v97;
      *((void *)v15 + 5) = v95;
      *((void *)v15 + 6) = v96;
      return re::Result<re::RigHierarchy,re::DetailedError>::~Result((uint64_t)v167);
    case 0xB:
      uint64_t v110 = result;
      if (*(void *)(a2 + 256))
      {
        unint64_t v52 = 0;
        do
        {
          unint64_t v53 = re::RigDataValue::attributeValue((re::RigDataValue *)a2, v52);
          re::DynamicString::format((re::DynamicString *)"%.*s[%zu]", (re::DynamicString *)&v145, v10, a6, v52);
          if (v145.n128_u8[8]) {
            long long v54 = *(__int8 **)v146;
          }
          else {
            long long v54 = &v145.n128_i8[9];
          }
          if (v145.n128_u8[8]) {
            unint64_t v55 = v145.n128_u64[1] >> 1;
          }
          else {
            unint64_t v55 = v145.n128_u8[8] >> 1;
          }
          if (!v167[0].n128_u8[0] && v167[1].n128_u64[1])
          {
            if (v167[2].n128_u8[0]) {
              (*(void (**)(void))(*(void *)v167[1].n128_u64[1] + 40))();
            }
            memset(&v167[1].n128_i8[8], 0, 32);
          }
          __n128 result = v145.n128_u64[0];
          if (v145.n128_u64[0] && (v145.n128_u8[8] & 1) != 0) {
            __n128 result = (*(uint64_t (**)(void))(*(void *)v145.n128_u64[0] + 40))();
          }
          ++v52;
          a2 = v113;
        }
        while (v52 < *(void *)(v113 + 256));
      }
      goto LABEL_117;
    case 0xD:
      if (*(void *)(a2 + 40) >> 1 == 82389)
      {
        int v56 = *(char **)(a2 + 48);
        if (v56 == "SRT" || (__n128 result = strcmp(v56, "SRT"), a2 = v113, !result))
        {
          v121.n128_u64[0] = a6;
          v121.n128_u64[1] = (unint64_t)v10;
          v167[0].n128_u64[1] = 1065353216;
          v167[0].n128_u64[0] = 0x3F8000003F800000;
          v167[1].n128_u64[1] = 0x3F80000000000000;
          v167[1].n128_u64[0] = 0;
          v167[2] = 0uLL;
          int v79 = (re::RigDataValue *)a2;
          re::EvaluationTree::createInputRegister(v13, v167, &v145);
          v167[0].n128_u64[1] = 1065353216;
          v167[0].n128_u64[0] = 0x3F8000003F800000;
          v167[1].n128_u64[1] = 0x3F80000000000000;
          v167[1].n128_u64[0] = 0;
          v167[2] = 0uLL;
          re::DynamicArray<re::EvaluationSRT>::add((_anonymous_namespace_ *)(v12 + 41), &v145);
          re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v12 + 86), (uint64_t)v167);
          uint64_t v80 = v12[43] - 1;
          *(void *)float64_t v175 = v12;
          *(void *)&v175[8] = v80;
          re::BindNode::bindPointWithOverride<re::GenericSRT<float>>(a8, (uint64_t *)&v121, (uint64_t)v167);
          re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(v12, (uint64_t)v175, (uint64_t *)v167, 0);
          unint64_t v81 = re::RigDataValue::attributeValue(v79, 0);
          unint64_t v82 = v145.n128_u64[0];
          *(unsigned char *)(v81 + 96) = 2;
          *(void *)(v81 + 176) = v82;
          unint64_t v83 = re::RigDataValue::attributeValue(v79, 1uLL);
          unint64_t v84 = v145.n128_u64[1];
          *(unsigned char *)(v83 + 96) = 2;
          *(void *)(v83 + 176) = v84;
          unint64_t v85 = re::RigDataValue::attributeValue(v79, 2uLL);
          uint64_t v86 = *(void *)v146;
          *(unsigned char *)(v85 + 96) = 2;
          *(void *)(v85 + 176) = v86;
          uint64_t v87 = &v167[0].n128_u64[1];
          goto LABEL_162;
        }
      }
      uint64_t v110 = (uint64_t)v15;
      if (*(void *)(a2 + 256))
      {
        unint64_t v57 = 0;
        do
        {
          unint64_t v58 = re::RigDataValue::attributeValue((re::RigDataValue *)a2, v57);
          unint64_t v59 = re::RigDataTypeClass::attributeName(v9, v57);
          re::DynamicString::format((re::DynamicString *)"%.*s.%s", (re::DynamicString *)&v145, v10, a6, *(void *)(v59 + 8));
          if (v145.n128_u8[8]) {
            long long v60 = *(__int8 **)v146;
          }
          else {
            long long v60 = &v145.n128_i8[9];
          }
          if (v145.n128_u8[8]) {
            unint64_t v61 = v145.n128_u64[1] >> 1;
          }
          else {
            unint64_t v61 = v145.n128_u8[8] >> 1;
          }
          if (!v167[0].n128_u8[0] && v167[1].n128_u64[1])
          {
            if (v167[2].n128_u8[0]) {
              (*(void (**)(void))(*(void *)v167[1].n128_u64[1] + 40))();
            }
            memset(&v167[1].n128_i8[8], 0, 32);
          }
          __n128 result = v145.n128_u64[0];
          if (v145.n128_u64[0] && (v145.n128_u8[8] & 1) != 0) {
            __n128 result = (*(uint64_t (**)(void))(*(void *)v145.n128_u64[0] + 40))();
          }
          ++v57;
          a2 = v113;
        }
        while (v57 < *(void *)(v113 + 256));
      }
LABEL_117:
      uint64_t v15 = (unsigned char *)v110;
      goto LABEL_163;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unsupported type.", "!\"Unreachable code\"", "setCompilationValueForBoundInput", 691);
      _os_crash();
      __break(1u);
LABEL_191:
      {
        v8[267] = (char **)re::introspect_int(0, v98);
      }
LABEL_3:
      re::BindNode::bindPointWithOverride(a8, (uint64_t)v8[267], &v143, (uint64_t)&v121);
      uint64_t v18 = v113;
      if (!v123[0]) {
        goto LABEL_161;
      }
      uint64_t v19 = v15;
      unint64_t v20 = (char **)v121.n128_u64[0];
      if ((atomic_load_explicit((atomic_uchar *volatile)v12, memory_order_acquire) & 1) == 0)
      {
        uint64_t v18 = v113;
        if (v100)
        {
          v8[267] = (char **)re::introspect_int(0, v101);
          uint64_t v18 = v113;
        }
      }
      BOOL v21 = v20 == v8[267];
      uint64_t v15 = v19;
      if (!v21) {
        goto LABEL_161;
      }
      unint64_t v118 = (unint64_t)v13 - 1;
      if ((unint64_t)v13 - 1 >= v10[93])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v10 + 91, (unint64_t)v13);
      }
      else if (*(void *)(v10[95] + 56 * ((void)v13 - 1) + 24))
      {
LABEL_160:
        uint64_t v18 = v113;
LABEL_161:
        *(unsigned char *)(v18 + 96) = 2;
        *(void *)(v18 + 176) = a3;
        uint64_t v87 = &v121.n128_u64[1];
LABEL_162:
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v87);
        __n128 result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v87);
        goto LABEL_163;
      }
      re::DynamicArray<unsigned long>::add(v10 + 136, &v118);
      v145.n128_u64[0] = v121.n128_u64[0];
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v145.n128_i64[1], &v121.n128_i64[1]);
      v146[32] = 0;
      unint64_t v88 = v118;
      unint64_t v89 = v10[93];
      if (v89 > v118)
      {
        __guard v90 = v10[95];
LABEL_159:
        unint64_t v92 = v90 + 56 * v88;
        *(void *)unint64_t v92 = v145.n128_u64[0];
        re::DynamicArray<re::RigDataValue>::operator=(v92 + 8, (uint64_t)&v145.n128_i64[1]);
        *(unsigned char *)(v92 + 48) = v146[32];
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v145.n128_i64[1]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v145.n128_i64[1]);
        uint64_t v15 = v19;
        goto LABEL_160;
      }
      v120[0] = 0;
      memset(v167, 0, sizeof(v167));
      uint64_t v17 = (__n128 *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float64_t v175 = 136315906;
      *(void *)&v175[4] = "operator[]";
      *(_WORD *)&v175[12] = 1024;
      *(_DWORD *)&v175[14] = 789;
      *(_WORD *)&v175[18] = 2048;
      *(void *)&v175[20] = v88;
      *(_WORD *)&v175[28] = 2048;
      *(void *)&v175[30] = v89;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_184;
  }
}

uint64_t re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      unint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 32) = v4;
        *(void *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      unint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    unint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      uint64_t v8 = v6;
      unint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        unint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        unint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 32) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 32))(*(void *)(a2 + 32));
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable(a2);
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable(uint64_t a1))(void)
{
  __n128 result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    __n128 result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      __n128 result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

double re::BindNode::bindPointWithOverride<float>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  unint64_t v4 = 0x268771000uLL;
  {
    uint64_t v12 = a1;
    uint64_t v10 = a3;
    unint64_t v4 = 0x268771000;
    a3 = v10;
    uint64_t v3 = a2;
    int v9 = v7;
    a1 = v12;
    if (v9)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
      unint64_t v4 = 0x268771000;
      a3 = v10;
      uint64_t v3 = a2;
      a1 = v12;
    }
  }
  uint64_t v5 = *(void *)(v4 + 3632);
  return re::BindNode::bindPointWithOverride(a1, v5, v3, a3);
}

void re::EvaluationContextManager::bindInputHandle<re::Matrix4x4<float>>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a3[3])
  {
    uint64_t v5 = *a3;
    uint64_t v6 = &qword_268772000;
    {
      *(void *)uint64_t v13 = a2;
      uint64_t v6 = &qword_268772000;
      a2 = *(void *)v13;
      if (v12)
      {
        re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
        uint64_t v6 = &qword_268772000;
        a2 = *(void *)v13;
      }
    }
    if (v5 == v6[102])
    {
      unint64_t v7 = *(void *)(a2 + 8);
      v17[0] = v7;
      if (v7 >= a1[113])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(a1 + 111, v7 + 1);
      }
      else if (*(void *)(a1[115] + 56 * v7 + 24))
      {
        return;
      }
      re::DynamicArray<unsigned long>::add(a1 + 156, v17);
      uint64_t v14 = *a3;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)v15, a3 + 1);
      char v16 = 0;
      uint64_t v8 = v17[0];
      unint64_t v9 = a1[113];
      if (v9 <= v17[0])
      {
        v17[1] = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        unint64_t v11 = v9;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v18 = 136315906;
        uint64_t v19 = "operator[]";
        __int16 v20 = 1024;
        int v21 = 789;
        __int16 v22 = 2048;
        uint64_t v23 = v8;
        __int16 v24 = 2048;
        unint64_t v25 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[115] + 56 * v17[0];
      *(void *)uint64_t v10 = v14;
      re::DynamicArray<re::RigDataValue>::operator=(v10 + 8, (uint64_t)v15);
      *(unsigned char *)(v10 + 48) = v16;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v15);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v15);
    }
  }
}

double re::BindNode::bindPointWithOverride<re::SkeletalPose>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  unint64_t v4 = 0x268771000uLL;
  {
    unint64_t v11 = a1;
    uint64_t v9 = a3;
    unint64_t v4 = 0x268771000;
    a3 = v9;
    uint64_t v3 = a2;
    int v8 = v7;
    a1 = v11;
    if (v8)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      unint64_t v4 = 0x268771000;
      a3 = v9;
      uint64_t v3 = a2;
      a1 = v11;
    }
  }
  uint64_t v5 = *(void *)(v4 + 3872);
  return re::BindNode::bindPointWithOverride(a1, v5, v3, a3);
}

double re::BindNode::bindPoint<re::ecs2::SkeletalPoseComponent>(uint64_t a1, re::BindNode **a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = &off_268773000;
  {
    uint64_t v11 = a1;
    uint64_t v10 = a3;
    unint64_t v4 = &off_268773000;
    uint64_t v3 = a2;
    a3 = v10;
    int v8 = v7;
    a1 = v11;
    if (v8)
    {
      re::introspect<re::ecs2::SkeletalPoseComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SkeletalPoseComponent(0);
      unint64_t v4 = &off_268773000;
      a1 = v11;
      uint64_t v3 = a2;
      a3 = v10;
    }
  }
  uint64_t v5 = (uint64_t)v4[273];
  return re::BindNode::bindPoint(v3, v5, a3, a1);
}

uint64_t re::Slice<char>::operator[](uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 > a3) {
    return a1 + a3;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, a2, v3, v4);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::Result<re::RigHierarchy,re::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    re::DynamicArray<unsigned long>::deinit(a1 + 328);
    re::DynamicArray<unsigned long>::deinit(a1 + 288);
    re::DynamicArray<unsigned long>::deinit(a1 + 248);
    re::DynamicArray<re::StringID>::deinit(a1 + 208);
    re::DynamicArray<re::DynamicArray<re::RigDataValue>>::deinit(a1 + 168);
    re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::deinit(a1 + 128);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 80));
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  else
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  }
  return a1;
}

double re::BindNode::bindPointWithOverride<re::GenericSRT<float>>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  unint64_t v4 = 0x268771000uLL;
  {
    uint64_t v11 = a1;
    uint64_t v9 = a3;
    unint64_t v4 = 0x268771000;
    a3 = v9;
    uint64_t v3 = a2;
    int v8 = v7;
    a1 = v11;
    if (v8)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      unint64_t v4 = 0x268771000;
      a3 = v9;
      uint64_t v3 = a2;
      a1 = v11;
    }
  }
  uint64_t v5 = *(void *)(v4 + 3888);
  return re::BindNode::bindPointWithOverride(a1, v5, v3, a3);
}

void re::ObjectHelper::destroy<re::RigEvaluation>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      re::DynamicArray<re::internal::RigIKCall>::deinit((uint64_t)(v3 + 186));
      re::FixedArray<CoreIKTransform>::deinit(v3 + 183);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 180);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 177);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 174);
      re::FixedArray<re::FixedArray<float>>::deinit(v3 + 171);
      re::FixedArray<re::FixedArray<float>>::deinit(v3 + 168);
      re::FixedArray<re::internal::RigIKCall>::deinit(v3 + 165);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 162);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 159);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v3 + 153);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v3 + 147);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 144);
      re::RigDefinition::~RigDefinition((re::RigDefinition *)(v3 + 1));
      v3 += 191;
    }
    while (v3 != a2);
  }
}

void *re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      int v8 = (re::StringID *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (re::StringID *)((char *)v8 + 24 * v9);
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *(void *)v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(void *)v8 & 1;
          unint64_t *v11 = *(void *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          unint64_t v13 = *((void *)v8 + 2);
          v11[1] = *((void *)v8 + 1);
          *(void *)int v8 = 0;
          *((void *)v8 + 1) = "";
          v11[2] = v13;
          re::StringID::destroyString(v8);
          int v8 = (re::StringID *)((char *)v8 + 24);
          v11 += 3;
        }
        while (v8 != v10);
        int v8 = (re::StringID *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, re::StringID *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 24 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v9) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 12) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 16) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (_DWORD *)(*(void *)&v13[16] + v10 + 12), (_DWORD *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::RigHierarchy::RigHierarchy(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 60) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 108) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 72), (uint64_t *)a2 + 9);
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v5 = *((void *)a2 + 16);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(void *)(a1 + 128) = v5;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v6;
  uint64_t v7 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v7;
  ++*((_DWORD *)a2 + 36);
  ++*(_DWORD *)(a1 + 144);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  uint64_t v8 = *((void *)a2 + 21);
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(void *)(a1 + 168) = v8;
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  uint64_t v9 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v9;
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v10;
  ++*((_DWORD *)a2 + 46);
  ++*(_DWORD *)(a1 + 184);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  uint64_t v11 = *((void *)a2 + 26);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *(void *)(a1 + 208) = v11;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  uint64_t v12 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v12;
  uint64_t v13 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v13;
  ++*((_DWORD *)a2 + 56);
  ++*(_DWORD *)(a1 + 224);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  uint64_t v14 = *((void *)a2 + 31);
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(void *)(a1 + 248) = v14;
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  uint64_t v15 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v15;
  uint64_t v16 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v16;
  ++*((_DWORD *)a2 + 66);
  ++*(_DWORD *)(a1 + 264);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  uint64_t v17 = *((void *)a2 + 36);
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  *(void *)(a1 + 288) = v17;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  uint64_t v18 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v18;
  uint64_t v19 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v19;
  ++*((_DWORD *)a2 + 76);
  ++*(_DWORD *)(a1 + 304);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  uint64_t v20 = *((void *)a2 + 41);
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  *(void *)(a1 + 328) = v20;
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 41) = 0;
  uint64_t v21 = *(void *)(a1 + 336);
  *(void *)(a1 + 336) = *((void *)a2 + 42);
  *((void *)a2 + 42) = v21;
  uint64_t v22 = *(void *)(a1 + 352);
  *(void *)(a1 + 352) = *((void *)a2 + 44);
  *((void *)a2 + 44) = v22;
  ++*((_DWORD *)a2 + 86);
  ++*(_DWORD *)(a1 + 344);
  return a1;
}

void re::introspect_ImageDimensionsMode(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79128, memory_order_acquire) & 1) == 0)
  {
    __int16 v24 = (re *)__cxa_guard_acquire(&qword_26AF79128);
    if (v24)
    {
      unint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "UseSource";
      qword_26AF79170 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "DownsampleFactor";
      qword_26AF79178 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "UseOverride";
      qword_26AF79180 = v30;
      __cxa_guard_release(&qword_26AF79128);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79130))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF791A8, "ImageDimensionsMode", 4, 4, 1, 1);
    qword_26AF791A8 = (uint64_t)&unk_26E715E00;
    qword_26AF791E8 = (uint64_t)&re::introspect_ImageDimensionsMode(BOOL)::enumTable;
    dword_26AF791B8 = 9;
    __cxa_guard_release(&qword_26AF79130);
  }
  if ((_MergedGlobals_77 & 1) == 0)
  {
    _MergedGlobals_77 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF791A8, a2);
    uint64_t v32 = 0xFF96F997A9010256;
    uint64_t v33 = "ImageDimensionsMode";
    v36[0] = 0x607DD0F01DCLL;
    v36[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      long long v4 = (unsigned int *)qword_26AF791E8;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF791C8 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ImageDimensionsMode", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_TextureMipmapMode(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79138, memory_order_acquire) & 1) == 0)
  {
    __int16 v24 = (re *)__cxa_guard_acquire(&qword_26AF79138);
    if (v24)
    {
      unint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 2;
      *((void *)v26 + 2) = "None";
      qword_26AF79188 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "AllocateOnly";
      qword_26AF79190 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = "AllocateAndGenerateOnGPU";
      qword_26AF79198 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 3;
      *(void *)(v32 + 16) = "AllocateAndGenerateOnCPU";
      qword_26AF791A0 = v32;
      __cxa_guard_release(&qword_26AF79138);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79140))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF791F0, "TextureMipmapMode", 4, 4, 1, 1);
    qword_26AF791F0 = (uint64_t)&unk_26E715E00;
    qword_26AF79230 = (uint64_t)&re::introspect_TextureMipmapMode(BOOL)::enumTable;
    dword_26AF79200 = 9;
    __cxa_guard_release(&qword_26AF79140);
  }
  if ((byte_26AF79121 & 1) == 0)
  {
    byte_26AF79121 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF791F0, a2);
    uint64_t v34 = 0xE21B701012C6474CLL;
    uint64_t v35 = "TextureMipmapMode";
    v38[0] = 0x607DD0F01DCLL;
    v38[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      long long v4 = (unsigned int *)qword_26AF79230;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF79210 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TextureMipmapMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_TextureLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79148))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79280, "TextureLoadDescriptorParameters");
    __cxa_guard_release(&qword_26AF79148);
  }
  return &unk_26AF79280;
}

void re::initInfo_TextureLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v39[0] = 0x3CC0D7AC778599B4;
  v39[1] = "TextureLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v39);
  *((_OWORD *)this + 2) = v40;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79150, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF79150);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "bundle";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79238 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "resource";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF79240 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_TextureSemantic((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "semantic";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF79248 = v16;
      uint64_t v17 = (re *)re::introspectionAllocator((re *)v16);
      re::introspect_ImageDimensionsMode(v17, v18);
      uint64_t v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "dimensionsMode";
      *(void *)(v19 + 16) = &qword_26AF791A8;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x4400000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF79250 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_int((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "downsampleFactor";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x4800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF79258 = v23;
      __int16 v24 = (re *)re::introspectionAllocator((re *)v23);
      re::introspect_TextureMipmapMode(v24, v25);
      uint64_t v26 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "mipmapMode";
      *(void *)(v26 + 16) = &qword_26AF791F0;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x4C00000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF79260 = v26;
      long long v27 = re::introspectionAllocator((re *)v26);
      long long v29 = re::IntrospectionInfo<re::DynamicString>::get(1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "aliasName";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x5000000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF79268 = v30;
      uint64_t v31 = re::introspectionAllocator((re *)v30);
      uint64_t v33 = re::introspect_TextureCompressionType((re *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "compressionType";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x7000000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF79270 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = re::introspect_ASTCCompressionOptions((re::IntrospectionBase **)1);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "astcCompressionOptions";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x7400000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF79278 = v37;
      __cxa_guard_release(&qword_26AF79150);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF79238;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TextureLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TextureLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TextureLoadDescriptorParameters>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TextureLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v38 = v40;
}

void *re::internal::defaultConstruct<re::TextureLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  long long v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[3] = 0u;
  v3[2] = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v3 + 4, 0);
  v3[5] = 0u;
  v3[6] = 0u;
  v3 += 5;
  uint64_t result = re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)v3 + 12) = 0;
  *(void *)((char *)v3 + 36) = 0;
  *((unsigned char *)v3 + 44) = 0;
  return result;
}

double re::internal::defaultDestruct<re::TextureLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 80));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::TextureLoadDescriptorParameters>(_anonymous_namespace_ *a1)
{
  uint64_t v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v1 + 4, 0);
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  uint64_t v1 = (_anonymous_namespace_ *)((char *)v1 + 80);
  uint64_t result = re::DynamicString::setCapacity(v1, 0);
  *((_DWORD *)v1 + 12) = 0;
  *(void *)((char *)v1 + 36) = 0;
  *((unsigned char *)v1 + 44) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::TextureLoadDescriptorParameters>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 80));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::TextureAssetProvider::TextureAssetProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6D4878;
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = (id *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  *(_DWORD *)(a1 + 56) = 65793;
  uint64_t v8 = a1 + 56;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79168))
  {
    qword_26AF79160 = re::internal::getOrCreateInfo((re::internal *)"TextureLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_TextureLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_TextureLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF79158, 0);
    uint64_t v8 = a1 + 56;
    __cxa_guard_release(&qword_26AF79168);
  }
  re::TextureAssetProvider::s_loadDescriptorParametersIntrospect = qword_26AF79160;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a2;
  uint64_t v9 = (id *)re::ServiceLocator::serviceOrNull<re::ImportGraphicsResources>(a3);
  if (v9)
  {
    re::ImportGraphicsContext::ImportGraphicsContext((re::ImportGraphicsContext *)&v16, v9);
    if (v6 != &v16)
    {
      id v10 = v16;
      id v16 = 0;
      id v11 = *v6;
      *unint64_t v6 = v10;
    }
    if (v7 != &v17)
    {
      uint64_t v12 = v17;
      uint64_t v17 = 0;
      int v13 = *v7;
      *uint64_t v7 = v12;
    }
    *(_WORD *)uint64_t v8 = v18;
    *(unsigned char *)(v8 + 2) = v19;
    if (*(unsigned char *)(a1 + 59) || v20)
    {
      if (!*(unsigned char *)(a1 + 59) || v20)
      {
        if (!*(unsigned char *)(a1 + 59) && v20) {
          *(unsigned char *)(a1 + 59) = 1;
        }
        *(unsigned char *)(a1 + 60) = v21;
      }
      else
      {
        *(unsigned char *)(a1 + 59) = 0;
      }
    }
    uint64_t v14 = v17;
    *(void *)(a1 + 64) = v22;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 1232);
  return a1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ImportGraphicsResources>(uint64_t a1)
{
  {
    re::introspect<re::ImportGraphicsResources>(void)::info = re::introspect_ImportGraphicsResources(0);
  }
  uint64_t v2 = re::introspect<re::ImportGraphicsResources>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void re::TextureAssetProvider::~TextureAssetProvider(re::TextureAssetProvider *this)
{
  *(void *)this = &unk_26E6D4878;
  *((void *)this + 9) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::TextureAssetProvider::~TextureAssetProvider(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::TextureAssetProvider::makeDescriptor@<X0>(re::TextureAssetProvider *this@<X0>, const re::DynamicString *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a4, 0);
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(void *)(a4 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a4 + 112), 0);
  uint64_t v30 = (uint64_t *)"TextureImage";
  uint64_t v31 = 12;
  id v10 = re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)&v30);
  id v11 = (const char *)*re::TextureAsset::assetType(v10);
  size_t v12 = strlen(v11);
  uint64_t v30 = (uint64_t *)v11;
  uint64_t v31 = v12;
  int v13 = re::DynamicString::operator=((re::DynamicString *)(a4 + 112), (uint64_t)&v30);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v30, 0);
  *((void *)&v34 + 1) = 0;
  long long v35 = 0uLL;
  uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v34, 0);
  *((void *)&v37 + 1) = 0;
  long long v38 = 0uLL;
  re::DynamicString::setCapacity(&v37, 0);
  *(_DWORD *)&v39[16] = 0;
  *(void *)&v39[4] = 0;
  v39[12] = 0;
  re::DynamicString::operator=((re::DynamicString *)&v30, this);
  re::DynamicString::operator=((re::DynamicString *)&v34, a2);
  int v16 = *((_DWORD *)a3 + 2);
  LODWORD(v36) = *((_DWORD *)a3 + 14);
  DWORD1(v36) = v16;
  *((void *)&v36 + 1) = *((void *)a3 + 2);
  *(_DWORD *)long long v39 = *((_DWORD *)a3 + 6);
  *(_OWORD *)&v39[4] = *(_OWORD *)((char *)a3 + 28);
  re::DynamicString::DynamicString((re::DynamicString *)v24, (const re::DynamicString *)&v30);
  re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)&v34);
  long long v26 = v36;
  re::DynamicString::DynamicString((re::DynamicString *)v27, (const re::DynamicString *)&v37);
  long long v28 = *(_OWORD *)v39;
  int v29 = *(_DWORD *)&v39[16];
  re::AssetLoadDescriptor::setIntrospectableData((char **)a4, (const re::IntrospectionBase *)re::TextureAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v24, 0);
  if (v27[0])
  {
    if (v27[1]) {
      (*(void (**)(void))(*(void *)v27[0] + 40))();
    }
    memset(v27, 0, sizeof(v27));
  }
  if (v25[0])
  {
    if (v25[1]) {
      (*(void (**)(void))(*(void *)v25[0] + 40))();
    }
    memset(v25, 0, sizeof(v25));
  }
  if (*(void *)&v24[0])
  {
    if (BYTE8(v24[0])) {
      (*(void (**)(void))(**(void **)&v24[0] + 40))();
    }
    memset(v24, 0, sizeof(v24));
  }
  if ((void)v37)
  {
    if (BYTE8(v37)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v37 + 40))(v37, v38, v17, v18, v19, v20, v21, v22);
    }
    long long v37 = 0u;
    long long v38 = 0u;
  }
  if ((void)v34)
  {
    if (BYTE8(v34)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v34 + 40))(v34, v35, v17, v18, v19, v20, v21, v22);
    }
    long long v34 = 0u;
    long long v35 = 0u;
  }
  uint64_t result = v30;
  if (v30)
  {
    if (v31) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v30 + 40))(v30, v32, v17, v18, v19, v20, v21, v22);
    }
  }
  return result;
}

re::DynamicString *re::TextureAssetProvider::load@<X0>(re::TextureAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v9 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v9 = (char *)a2 + 9;
  }
  id v10 = (re::TextureAsset *)strcmp(v9, "TextureImage");
  int v11 = (int)v10;
  size_t v12 = (const char *)*re::TextureAsset::assetType(v10);
  if (*((void *)a2 + 15)) {
    int v13 = (const char *)*((void *)a2 + 16);
  }
  else {
    int v13 = (char *)a2 + 121;
  }
  uint64_t v14 = (_anonymous_namespace_ *)strcmp(v13, v12);
  if (v11 | v14)
  {
    long long v23 = v75;
    uint64_t v24 = v76;
    uint64_t v25 = v77;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v23;
    *(void *)(a3 + 24) = v24;
    *(void *)(a3 + 32) = v25;
    return result;
  }
  *((void *)&v75 + 1) = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v75, 0);
  *((void *)&v78 + 1) = 0;
  long long v79 = 0uLL;
  int v16 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v78, 0);
  *((void *)&v83 + 1) = 0;
  long long v84 = 0uLL;
  re::DynamicString::setCapacity(&v83, 0);
  int v87 = 0;
  uint64_t v85 = 0;
  char v86 = 0;
  uint64_t Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::TextureLoadDescriptorParameters>(a2, (re::DynamicString **)&v75);
  if (Descriptor)
  {
    long long v74 = 0u;
    long long v73 = 0u;
    re::DynamicString::setCapacity(&v73, 0);
    if (BYTE8(v83)) {
      uint64_t v18 = *((void *)&v83 + 1) >> 1;
    }
    else {
      uint64_t v18 = BYTE8(v83) >> 1;
    }
    if (v18)
    {
      uint64_t v19 = (os_unfair_lock_s *)*((void *)this + 9);
      re::DynamicString::DynamicString((re::DynamicString *)v72, (const re::DynamicString *)&v83);
      re::NamedFileRegistry::tryGetFilePathFor(v19, (uint64_t)v72, v93);
      if (*(void *)&v72[0])
      {
        if (BYTE8(v72[0])) {
          (*(void (**)(void))(**(void **)&v72[0] + 40))();
        }
        memset(v72, 0, sizeof(v72));
      }
      int v20 = v93[0];
      if (v93[0])
      {
        uint64_t v21 = re::DynamicString::operator=((re::DynamicString *)&v73, (re::DynamicString *)&v93[8]);
      }
      else
      {
        if (BYTE8(v83)) {
          uint64_t v33 = (char *)v84;
        }
        else {
          uint64_t v33 = (char *)&v83 + 9;
        }
        uint64_t v21 = (re *)re::DynamicString::format((re::DynamicString *)"No file found for Alias: '%s'", (re::DynamicString *)v98, v33);
        long long v34 = *(_OWORD *)v98;
        uint64_t v35 = *(void *)&v98[16];
        uint64_t v36 = *(void *)&v98[24];
        *(unsigned char *)a3 = 0;
        *(_OWORD *)(a3 + 8) = v34;
        *(void *)(a3 + 24) = v35;
        *(void *)(a3 + 32) = v36;
      }
      if (v93[0])
      {
        uint64_t v21 = *(re **)&v93[8];
        if (*(void *)&v93[8])
        {
          if (v93[16]) {
            uint64_t v21 = (re *)(*(uint64_t (**)(void))(**(void **)&v93[8] + 40))();
          }
        }
      }
      if (!v20) {
        goto LABEL_73;
      }
LABEL_40:
      uint64_t v37 = *((void *)this + 4);
      long long v38 = (id *)((char *)this + 40);
      *(void *)uint64_t v93 = v37;
      uint64_t v70 = 0;
      long long v39 = re::globalAllocators(v21);
      long long v40 = (re::FileTextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39[2] + 32))(v39[2], 240, 8);
      if (BYTE8(v73)) {
        uint64_t v41 = (const char *)v74;
      }
      else {
        uint64_t v41 = (const char *)((unint64_t)&v73 | 9);
      }
      uint64_t v69 = re::FileTextureProvider::FileTextureProvider(v40, v38, *(unsigned __int8 *)(v37 + 1344), v41);
      LOBYTE(v66) = 1;
      re::make::shared::object<re::TextureImportOperation,re::TextureProvider *&,BOOL,re::AssetManager *&>((re *)&v69, (char *)&v66, (re::AssetManager **)v93, (re::TextureImportOperation **)v98);
      uint64_t v42 = v70;
      uint64_t v70 = *(void *)v98;
      *(void *)uint64_t v98 = v42;
      if (v42) {

      }
      unint64_t v43 = v69;
      long long v44 = *((_OWORD *)v69 + 3);
      long long v45 = *((_OWORD *)v69 + 4);
      *(_OWORD *)&v99[12] = *(_OWORD *)((char *)v69 + 92);
      *(_OWORD *)uint64_t v98 = v44;
      *(_OWORD *)&v98[16] = v45;
      *(_OWORD *)__n128 v99 = *((_OWORD *)v69 + 5);
      id v100 = *((id *)v69 + 14);
      long long v101 = *(_OWORD *)((char *)v43 + 120);
      *(_DWORD *)&v98[8] = v81;
      *(void *)&v98[16] = v82;
      *(_DWORD *)&v99[24] = v80;
      if (v80 == 6)
      {
        if (*(_DWORD *)v98 == 2) {
          *(_DWORD *)uint64_t v98 = 0;
        }
        if (*(_DWORD *)&v98[4] == 3) {
          *(_DWORD *)&v98[4] = 0;
        }
      }
      else
      {
        *(void *)uint64_t v98 = 0x300000002;
      }
      re::TextureProvider::setOptions((uint64_t)v69, (long long *)v98);
      int v46 = *(re **)(v70 + 496);
      uint64_t v48 = re::globalAllocators(v47);
      re::loadTextureDataWithProvider(v46, (re::TextureProvider *)v48[2], v49, (uint64_t)v93);
      if (v93[0])
      {
        uint64_t v50 = v70;
        *(unsigned char *)(v70 + 216) = v93[8];
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(v50 + 224, (uint64_t)&v93[16]);
        re::ObjCObject::operator=((id *)(v50 + 312), &v97);
        uint64_t v51 = v70;
        uint64_t v52 = 1;
        *(_DWORD *)(v70 + 112) = 1;
        uint64_t v91 = 0x101000101;
        *(_DWORD *)unint64_t v92 = 1;
        memset(&v92[4], 0, 20);
        uint64_t TextureAsset = re::TextureAsset::makeTextureAsset(v51 + 216, *(int *)&v99[24], (long long *)&v91);
        if (TextureAsset)
        {
          uint64_t v54 = TextureAsset;
          re::createTextureCompileOptionsFromTextureImageOptions((re *)v98, (uint64_t)&v66);
          char v55 = 0;
          *(_OWORD *)(v54 + 8) = v66;
          *(_OWORD *)(v54 + 24) = v67;
          LOBYTE(v66) = 1;
          *((void *)&v66 + 1) = v54;
LABEL_64:
          re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v93);

          if (v55)
          {
            re::DynamicString::DynamicString((re::DynamicString *)v93, (const re::DynamicString *)((char *)&v66 + 8));
            *(unsigned char *)a3 = 0;
            uint64_t v62 = v94;
            *(void *)(a3 + 8) = *(void *)v93;
            *(void *)(a3 + 32) = v62;
            *(_OWORD *)(a3 + 16) = *(_OWORD *)&v93[8];
            if (v54 && (v5 & 1) != 0) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 40))(v54, v52);
            }
          }
          else
          {
            *(void *)&v93[8] = 0;
            *(void *)&v93[16] = 0;
            uint64_t v94 = 0;
            re::DynamicString::setCapacity(v93, 0);
            BYTE8(v95) = 0;
            char v96 = 0;
            *(void *)&long long v95 = v54;
            re::DynamicString::operator=((re::DynamicString *)v93, (const re::AssetLoadDescriptor *)((char *)a2 + 112));
            re::DynamicString::DynamicString((re::DynamicString *)v98, (const re::DynamicString *)v93);
            char v63 = v96;
            long long v64 = v95;
            *(unsigned char *)a3 = 1;
            uint64_t v65 = *(void *)&v98[24];
            *(void *)(a3 + 8) = *(void *)v98;
            *(void *)(a3 + 32) = v65;
            *(_OWORD *)(a3 + 16) = *(_OWORD *)&v98[8];
            *(_OWORD *)(a3 + 40) = v64;
            *(unsigned char *)(a3 + 56) = v63;
            if (*(void *)v93 && (v93[8] & 1) != 0) {
              (*(void (**)(void, void))(**(void **)v93 + 40))(*(void *)v93, *(void *)&v93[16]);
            }
          }
          if (v70) {

          }
LABEL_73:
          if (void)v73 && (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          goto LABEL_76;
        }
        uint64_t v52 = v89;
        uint64_t v54 = v88[0];
        uint64_t v5 = v88[1];
        LOBYTE(v66) = 0;
        *((void *)&v67 + 1) = v89;
        uint64_t v68 = v90;
      }
      else
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v91, (const re::DynamicString *)&v93[8]);
        LOBYTE(v66) = 0;
        uint64_t v52 = *(void *)&v92[8];
        *((void *)&v67 + 1) = *(void *)&v92[8];
        uint64_t v68 = *(void *)&v92[16];
        uint64_t v54 = v91;
        uint64_t v5 = *(void *)v92;
      }
      *((void *)&v66 + 1) = v54;
      *(void *)&long long v67 = v5;
      char v55 = 1;
      goto LABEL_64;
    }
    int v29 = *(os_unfair_lock_s **)(*((void *)this + 4) + 1240);
    re::DynamicString::DynamicString((re::DynamicString *)v71, (const re::DynamicString *)&v75);
    re::BundleFilePathRegistry::findWithBundleID(v29, (uint64_t)v71, (id *)&v66);
    uint64_t v30 = *(_anonymous_namespace_ **)&v71[0];
    if (*(void *)&v71[0])
    {
      if (BYTE8(v71[0])) {
        uint64_t v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v71[0] + 40))();
      }
      memset(v71, 0, sizeof(v71));
    }
    if ((void)v66)
    {
      if (BYTE8(v78)) {
        uint64_t v31 = (const char *)v79;
      }
      else {
        uint64_t v31 = (char *)&v78 + 9;
      }
      BOOL v32 = re::Bundle::pathForResource((id *)&v66, v31, (re::DynamicString *)&v73);
      if (v32)
      {

        goto LABEL_40;
      }
      unint64_t v57 = &v78;
    }
    else
    {
      unint64_t v57 = &v75;
    }
    re::DynamicString::operator+(v56, (uint64_t)v57, (re::DynamicString *)v93);
    long long v58 = *(_OWORD *)v93;
    memset(v93, 0, sizeof(v93));
    uint64_t v59 = *(void *)&v93[16];
    uint64_t v60 = v94;
    uint64_t v94 = 0;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v58;
    *(void *)(a3 + 24) = v59;
    *(void *)(a3 + 32) = v60;
    if (*(void *)v98 && (v98[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v98 + 40))();
    }

    goto LABEL_73;
  }
  long long v26 = *(_OWORD *)v93;
  uint64_t v27 = *(void *)&v93[16];
  uint64_t v28 = v94;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v26;
  *(void *)(a3 + 24) = v27;
  *(void *)(a3 + 32) = v28;
LABEL_76:
  if ((void)v83)
  {
    if (BYTE8(v83)) {
      (*(void (**)(void))(*(void *)v83 + 40))();
    }
    long long v83 = 0u;
    long long v84 = 0u;
  }
  if ((void)v78)
  {
    if (BYTE8(v78)) {
      (*(void (**)(void))(*(void *)v78 + 40))();
    }
    long long v78 = 0u;
    long long v79 = 0u;
  }
  uint64_t result = (re::DynamicString *)v75;
  if ((void)v75)
  {
    if (BYTE8(v75)) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v75 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::TextureLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2)
{
  uint64_t v2 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79168, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v7 = __cxa_guard_acquire(&qword_26AF79168);
    uint64_t v2 = a2;
    int v8 = v7;
    a1 = v5;
    if (v8)
    {
      qword_26AF79160 = re::internal::getOrCreateInfo((re::internal *)"TextureLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_TextureLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_TextureLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF79158, 0);
      __cxa_guard_release(&qword_26AF79168);
      a1 = v5;
      uint64_t v2 = a2;
    }
  }
  uint64_t v3 = (re **)qword_26AF79160;
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v3, v2, 0);
}

__n128 re::TextureAssetProvider::resolveChild@<Q0>(re::TextureAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = v9;
  uint64_t v7 = v10;
  uint64_t v8 = v11;
  *(unsigned char *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  return result;
}

re::DynamicString *re::TextureAssetProvider::getDescription(re::TextureAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v31, 0);
  *((void *)&v35 + 1) = 0;
  long long v36 = 0uLL;
  unint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v35, 0);
  *((void *)&v41 + 1) = 0;
  long long v42 = 0uLL;
  re::DynamicString::setCapacity(&v41, 0);
  int v45 = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  if (!re::AssetLoadDescriptor::getIntrospectableData<re::TextureLoadDescriptorParameters>(a2, &v31))
  {
    int v29 = "mangled";
    v30[0] = 7;
    re::DynamicString::operator=(a3, (uint64_t)&v29);
    goto LABEL_39;
  }
  if (BYTE8(v41)) {
    uint64_t v7 = *((void *)&v41 + 1) >> 1;
  }
  else {
    uint64_t v7 = BYTE8(v41) >> 1;
  }
  if (v7)
  {
    int v29 = "AliasName:";
    v30[0] = 10;
    re::DynamicString::operator=(a3, (uint64_t)&v29);
    uint64_t v8 = &v41;
  }
  else
  {
    __n128 v9 = re::DynamicString::operator=(a3, (re::DynamicString *)&v31);
    re::DynamicString::append(v9, "/", 1uLL);
    uint64_t v8 = &v35;
  }
  unint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = (const char *)*((void *)v8 + 2);
  size_t v12 = (char *)v8 + 9;
  BOOL v13 = (v10 & 1) == 0;
  if (v10) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v12;
  }
  size_t v15 = v10 >> 1;
  size_t v16 = v10 >> 1;
  if (v13) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v15;
  }
  re::DynamicString::append(a3, v14, v17);
  if (v37 <= 6)
  {
    size_t v18 = strlen(off_264BE28D0[v37]);
    re::DynamicString::append(a3, off_264BE28D0[v37], v18);
  }
  switch(v38)
  {
    case 2:
      uint64_t v19 = "/override";
      int v20 = a3;
      size_t v21 = 9;
      goto LABEL_31;
    case 1:
      re::DynamicString::format((re::DynamicString *)"/downsample=%d", (re::DynamicString *)&v29, v39);
      uint64_t v22 = v30[0] & 1;
      if (v30[0]) {
        long long v23 = (const char *)v30[1];
      }
      else {
        long long v23 = (char *)v30 + 1;
      }
      if (v30[0]) {
        size_t v24 = v30[0] >> 1;
      }
      else {
        size_t v24 = LOBYTE(v30[0]) >> 1;
      }
      re::DynamicString::append(a3, v23, v24);
      if (v29 && v22) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      break;
    case 0:
      uint64_t v19 = "/source";
      int v20 = a3;
      size_t v21 = 7;
LABEL_31:
      re::DynamicString::append(v20, v19, v21);
      break;
  }
  switch(v40)
  {
    case 0:
      uint64_t v25 = "/GPU";
      goto LABEL_37;
    case 1:
      uint64_t v25 = "/allocate";
      long long v26 = a3;
      size_t v27 = 9;
      goto LABEL_38;
    case 2:
      uint64_t v25 = "/-";
      long long v26 = a3;
      size_t v27 = 2;
      goto LABEL_38;
    case 3:
      uint64_t v25 = "/CPU";
LABEL_37:
      long long v26 = a3;
      size_t v27 = 4;
LABEL_38:
      re::DynamicString::append(v26, v25, v27);
      break;
    default:
      break;
  }
LABEL_39:
  if ((void)v41)
  {
    if (BYTE8(v41)) {
      (*(void (**)(void))(*(void *)v41 + 40))();
    }
    long long v41 = 0u;
    long long v42 = 0u;
  }
  if ((void)v35)
  {
    if (BYTE8(v35)) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    long long v35 = 0u;
    long long v36 = 0u;
  }
  __n128 result = v31;
  if (v31)
  {
    if (v32) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v31 + 40))();
    }
  }
  return result;
}

const char *re::TextureAssetProvider::schemeName(re::TextureAssetProvider *this)
{
  return "TextureImage";
}

re::TextureImportOperation *re::make::shared::object<re::TextureImportOperation,re::TextureProvider *&,BOOL,re::AssetManager *&>@<X0>(re *a1@<X0>, char *a2@<X1>, re::AssetManager **a3@<X2>, re::TextureImportOperation **a4@<X8>)
{
  uint64_t v8 = re::globalAllocators(a1);
  __n128 v9 = (re::TextureImportOperation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 512, 8);
  __n128 result = re::TextureImportOperation::TextureImportOperation(v9, *(re::TextureProvider **)a1, *a2, *a3);
  *a4 = result;
  return result;
}

uint64_t *re::ARReferenceObjectAsset::assetType(re::ARReferenceObjectAsset *this)
{
  {
    re::ARReferenceObjectAsset::assetType(void)::type = (uint64_t)"ARReferenceObject";
    qword_26879E700 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ARReferenceObjectAsset::assetType(void)::type);
  }
  return &re::ARReferenceObjectAsset::assetType(void)::type;
}

BOOL re::ARReferenceObjectAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDataRef v3 = *(const __CFData **)(a3 + 8);
  if (!v3) {
    return 1;
  }
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(*(CFDataRef *)(a3 + 8));
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const UInt8 *, CFIndex))(*(void *)a2 + 16))(a2, BytePtr, Length);
  return v8 == CFDataGetLength(*(CFDataRef *)(a3 + 8));
}

uint64_t re::ARReferenceObjectAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  memset(length, 0, sizeof(length));
  long long v4 = (re *)(*(uint64_t (**)(uint64_t, _DWORD *, _DWORD *))(*(void *)a3 + 16))(a3, &length[1], length);
  uint64_t v5 = v4;
  if (v4)
  {
    *(void *)(a2 + 8) = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UInt8 **)&length[1], length[0]);
  }
  else
  {
    unint64_t v6 = *re::assetTypesLogObjects(v4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "ARReferenceObjectAsset: Empty input stream, failed to deserialize", v8, 2u);
    }
  }
  return (uint64_t)v5;
}

CFIndex re::ARReferenceObjectAssetLoader::assetByteSize(re::ARReferenceObjectAssetLoader *this, CFDataRef *a2)
{
  return CFDataGetLength(a2[1]);
}

uint64_t re::ARReferenceObjectAssetLoader::unloadAsset(re::ARReferenceObjectAssetLoader *this, void *a2)
{
  CFDataRef v3 = (void *)a2[1];
  if (v3)
  {
    CFRelease(v3);
    a2[1] = 0;
  }
  long long v4 = *(uint64_t (**)(void))(*(void *)re::globalAllocators((re *)v3)[2] + 40);
  return v4();
}

uint64_t re::ARReferenceObjectAssetLoader::isSupportedSourceExtension(re::ARReferenceObjectAssetLoader *this, const char *a2)
{
  return 0;
}

uint64_t re::ARReferenceObjectAssetLoader::introspectionType(re::ARReferenceObjectAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79320))
  {
    qword_26AF79318 = re::internal::getOrCreateInfo((re::internal *)"ARReferenceObjectAsset", (uint64_t (*)(re::internal *))re::allocInfo_ARReferenceObjectAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ARReferenceObjectAsset, (void (*)(re::IntrospectionBase *))&unk_26AF79310, 0);
    __cxa_guard_release(&qword_26AF79320);
  }
  return qword_26AF79318;
}

void re::ARReferenceObjectAssetLoader::makeSharedResourcePayload(REReferenceObjectPayload **a1@<X8>)
{
  uint64_t v2 = objc_alloc_init(REReferenceObjectPayload);

  *a1 = v2;
}

uint64_t re::ARReferenceObjectAssetLoader::postInitializeAssetFromPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8) = 0;
  return 1;
}

void *re::allocInfo_ARReferenceObjectAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79328, "ARReferenceObjectAsset");
    __cxa_guard_release(&_MergedGlobals_78);
  }
  return &unk_26AF79328;
}

void re::initInfo_ARReferenceObjectAsset(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x9C4150F1F6BA78EELL;
  v10[1] = "ARReferenceObjectAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79308, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF79308);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_uint8_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_version";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79300 = v8;
      __cxa_guard_release(&qword_26AF79308);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF79300;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ARReferenceObjectAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ARReferenceObjectAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ARReferenceObjectAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ARReferenceObjectAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void sub_2334A9F6C(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::ARReferenceObjectAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ARReferenceObjectAsset>(uint64_t result)
{
  *(unsigned char *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  return result;
}

void re::ARReferenceObjectAssetLoader::~ARReferenceObjectAssetLoader(re::ARReferenceObjectAssetLoader *this)
{
}

void re::RenderGraphFile::~RenderGraphFile(re::RenderGraphFile *this)
{
  uint64_t v2 = (char *)this + 40;
  re::DynamicArray<re::RenderGraphTargetData>::deinit((uint64_t)this + 40);
  unint64_t v3 = *((void *)this + 17);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 90);
    unint64_t v6 = v3 - 1;
    uint64_t v7 = 24;
    do
    {
      uint64_t v8 = v4 + 1;
      if (v4 + 1 < v3)
      {
        uint64_t v9 = *((void *)this + 19);
        unint64_t v10 = (void *)(v9 + 16 * v4 + 8);
        long long v11 = (void *)(v9 + v7);
        unint64_t v12 = v6;
        do
        {
          if (*v10 == *v11) {
            void *v11 = 0;
          }
          v11 += 2;
          --v12;
        }
        while (v12);
      }
      if (v5)
      {
        uint64_t v13 = *(void *)(*((void *)this + 19) + 16 * v4 + 8);
        uint64_t v14 = (void *)*((void *)this + 91);
        uint64_t v15 = v5;
        do
        {
          if (v13 == *v14) {
            *uint64_t v14 = 0;
          }
          v14 += 16;
          --v15;
        }
        while (v15);
      }
      --v6;
      v7 += 16;
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
  unint64_t v16 = *((void *)this + 37);
  if (v16)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = v17++;
      if (v17 < v16)
      {
        unint64_t v19 = v17;
        do
        {
          uint64_t v20 = *((void *)this + 39);
          if (*(void *)(v20 + 8 * v18) == *(void *)(v20 + 8 * v19)) {
            *(void *)(v20 + 8 * v19) = 0;
          }
          ++v19;
        }
        while (v16 != v19);
      }
    }
    while (v17 != v16);
  }
  unint64_t v21 = *((void *)this + 90);
  if (v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = v21 - 1;
    uint64_t v24 = 128;
    do
    {
      uint64_t v25 = v22 + 1;
      if (v22 + 1 < v21)
      {
        uint64_t v26 = *((void *)this + 91);
        size_t v27 = (void *)(v26 + (v22 << 7));
        uint64_t v28 = (void *)(v26 + v24);
        unint64_t v29 = v23;
        do
        {
          if (*v27 == *v28) {
            *uint64_t v28 = 0;
          }
          v28 += 16;
          --v29;
        }
        while (v29);
      }
      --v23;
      v24 += 128;
      uint64_t v22 = v25;
    }
    while (v25 != v21);
  }
  if (v3)
  {
    uint64_t v30 = 16 * v3;
    uint64_t v31 = (re **)(*((void *)this + 19) + 8);
    do
    {
      re::internal::destroyPersistent<re::RenderGraphNode>(*v31);
      v31 += 2;
      v30 -= 16;
    }
    while (v30);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::RenderGraphInputData>::deinit((uint64_t)this + 160);
  uint64_t v32 = (re *)re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this + 240);
  uint64_t v33 = *((void *)this + 37);
  if (v33)
  {
    uint64_t v34 = (void (****)(void))*((void *)this + 39);
    uint64_t v35 = 8 * v33;
    do
    {
      long long v36 = *v34;
      if (*v34)
      {
        uint64_t v37 = re::globalAllocators(v32)[2];
        (**v36)(v36);
        uint64_t v32 = (re *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v37 + 40))(v37, v36);
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 280);
  uint64_t v38 = *((void *)this + 90);
  if (v38)
  {
    unsigned int v39 = (re **)*((void *)this + 91);
    uint64_t v40 = v38 << 7;
    do
    {
      re::internal::destroyPersistent<re::RenderGraphNode>(*v39);
      v39 += 16;
      v40 -= 128;
    }
    while (v40);
  }
  re::FixedArray<re::RuntimeSettingsNodeCache>::deinit((void *)this + 89);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 824);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 784);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 92);
  re::FixedArray<re::RuntimeSettingsNodeCache>::deinit((void *)this + 89);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 81);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 75);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 69);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 63);
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 57);
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 51);
  re::DynamicString::deinit((re::RenderGraphFile *)((char *)this + 368));
  re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit((uint64_t)this + 320);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 280);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this + 240);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this + 200);
  re::DynamicArray<re::RenderGraphInputData>::deinit((uint64_t)this + 160);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::RenderGraphBufferData>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::RenderGraphTargetData>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6D52C8;
  re::DynamicString::deinit((re::RenderGraphFile *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::RenderGraphFile::~RenderGraphFile(this);
  JUMPOUT(0x237DBCBD0);
}

void sub_2334AA31C(_Unwind_Exception *a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)(v1 + 103));
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)(v1 + 98));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v1 + 92);
  re::FixedArray<re::RuntimeSettingsNodeCache>::deinit(v1 + 89);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v1 + 81);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v1 + 75);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v1 + 69);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v1 + 63);
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(v1 + 57);
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(v1 + 51);
  re::DynamicString::deinit((re::DynamicString *)(v1 + 46));
  re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit((uint64_t)(v1 + 40));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(v1 + 35));
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)(v1 + 30));
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)(v1 + 25));
  re::DynamicArray<re::RenderGraphInputData>::deinit((uint64_t)(v1 + 20));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(v1 + 15));
  re::DynamicArray<re::RenderGraphBufferData>::deinit((uint64_t)(v1 + 10));
  re::DynamicArray<re::RenderGraphTargetData>::deinit(v2);
  uint64_t *v1 = (uint64_t)&unk_26E6D52C8;
  re::DynamicString::deinit((re::DynamicString *)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t re::DynamicArray<re::RenderGraphTargetData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 160 * v4;
        do
        {
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v3 + 120);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 88));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 160;
          v5 -= 160;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

re *re::internal::destroyPersistent<re::RenderGraphNode>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphInputData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 40));
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 56;
          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphOutputData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 32));
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 48;
          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::FixedArray<re::RuntimeSettingsNodeCache>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = v2 << 7;
      uint64_t v5 = (uint64_t *)(result[2] + 80);
      do
      {
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v5);
        re::DynamicArray<re::BindPointAndPath>::deinit((uint64_t)(v5 - 5));
        double v6 = re::BindNode::deinit((re::BindNode *)(v5 - 9));
        v5 += 16;
        v4 -= 128;
      }
      while (v4);
      uint64_t result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v6);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t re::RenderGraphSpecifyLaneOperation::apply(uint64_t a1, re::RenderFrame *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(const char **)(a1 + 24);
    *(void *)&v7.var0 = 0;
    v7.var1 = "";
    uint64_t v6 = 0;
    re::RenderFrame::applyPropertiesToScopeLane(a2, v3, (const re::RenderGraphTargetDescription *)v8, 0);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 144)) {
      return 0;
    }
    uint64_t v4 = *(const char **)(a1 + 24);
    *(void *)&v7.var0 = 0;
    v7.var1 = "";
    uint64_t v6 = 0;
    re::RenderFrame::applyPropertiesToScopeLane(a2, v4, (const re::RenderGraphBufferDescription *)v8, 0);
  }
  re::StringID::destroyString((re::StringID *)&v7);
  return 1;
}

void sub_2334AA840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  re::StringID::destroyString((re::StringID *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::targetDescriptionFromData(uint64_t a1, uint64_t a2, StringID *a3, void *a4)
{
  *(_DWORD *)a1 = 3;
  int v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = 1;
  *(_OWORD *)(a1 + 68) = xmmword_234376700;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = v5;
  *(void *)&long long v7 = vrev64q_s32(*(int32x4_t *)(a2 + 20)).u64[0];
  *((void *)&v7 + 1) = *(void *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 20) = v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 40);
  *(void *)(a1 + 96) = 0;
  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      *(_DWORD *)a1 = 2;
      re::StringID::StringID((re::StringID *)v9, a3);
      *(void *)(a1 + 96) = (*a4 + (v9[0] >> 3) + (v9[0] >> 1 << 6) - 0x61C8864680B583E9) ^ (v9[0] >> 1);
      re::StringID::destroyString((re::StringID *)v9);
    }
    else
    {
      *(_DWORD *)a1 = 3;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
}

void anonymous namespace'::bufferDescriptionFromData(uint64_t a1, uint64_t a2, StringID *a3, void *a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 28);
  *(void *)(a1 + 24) = 0xFFFFFFFF00000020;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0;
  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      *(_DWORD *)a1 = 2;
      re::StringID::StringID((re::StringID *)v7, a3);
      *(void *)(a1 + 40) = (*a4 + (v7[0] >> 3) + (v7[0] >> 1 << 6) - 0x61C8864680B583E9) ^ (v7[0] >> 1);
      re::StringID::destroyString((re::StringID *)v7);
    }
    else
    {
      *(_DWORD *)a1 = 3;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
}

void re::RenderGraphSpecifyLaneOperation::validateOperation(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

unint64_t re::RenderGraphFile::fillConnectionHashes(const char *a1, void *a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen(a1);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)a1, v4, 0, v14);
    unint64_t v5 = (v14[1] - 0x61C8864680B583E9 + (v14[0] << 6) + (v14[0] >> 2)) ^ v14[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v6 = a2[2];
  if (v6)
  {
    uint64_t v7 = a2[4];
    uint64_t v8 = 32 * v6;
    do
    {
      v5 ^= (v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + re::Hash<re::DynamicString>::operator()((uint64_t)v14, v7);
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  a2[15] = v5;
  unint64_t result = re::Hash<re::DynamicString>::operator()((uint64_t)v14, (uint64_t)(a2 + 5));
  unint64_t v10 = result;
  a2[14] = result;
  uint64_t v11 = a2[11];
  if (v11)
  {
    uint64_t v12 = a2[13];
    uint64_t v13 = 32 * v11;
    do
    {
      unint64_t result = re::Hash<re::DynamicString>::operator()((uint64_t)v14, v12);
      v10 ^= (v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + result;
      v12 += 32;
      v13 -= 32;
    }
    while (v13);
  }
  a2[16] = v10;
  return result;
}

unint64_t re::hashString(re *this, const char *a2)
{
  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"UpdateMaterialTextureSource", 27, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"PortalClippingMode", 18, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"DynamicFunctionConstants", 24, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"ProjectiveMeshShadow", 20, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"SkyScope", 8, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"PostProcess", 11, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"Deformer", 8, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"RenderGraphDataPipeData", 23, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"VisualProxyHighFidelity", 23, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

uint64_t *re::RenderGraphFile::calculateValidity@<X0>(re::RenderGraphFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  char v122 = 1;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  re::DynamicString::setCapacity(&v118, 0);
  if (*((unsigned char *)this + 16)) {
    size_t v4 = (const char *)*((void *)this + 3);
  }
  else {
    size_t v4 = (char *)this + 17;
  }
  re::DynamicString::appendf((re::DynamicString *)&v118, "RenderGraph (%s) Errors: ", v4);
  int v116 = 0;
  memset(v115, 0, sizeof(v115));
  uint64_t v117 = 0x7FFFFFFFLL;
  int v113 = 0;
  memset(v112, 0, sizeof(v112));
  uint64_t v114 = 0x7FFFFFFFLL;
  int v110 = 0;
  memset(v109, 0, sizeof(v109));
  uint64_t v111 = 0x7FFFFFFFLL;
  int v107 = 0;
  long long v105 = 0u;
  long long v106 = 0u;
  uint64_t v108 = 0x7FFFFFFFLL;
  unsigned int v103 = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  uint64_t v104 = 0x7FFFFFFFLL;
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 9);
    uint64_t v7 = v6 + 160 * v5;
    do
    {
      unint64_t v123 = *(void *)v6 >> 1;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v115, &v123);
      uint64_t v8 = *(void *)(v6 + 136);
      if (v8)
      {
        uint64_t v9 = *(void **)(v6 + 152);
        uint64_t v10 = 136 * v8;
        do
        {
          re::RenderGraphFile::fillConnectionHashes(*(const char **)(v6 + 8), v9);
          v9 += 17;
          v10 -= 136;
        }
        while (v10);
      }
      v6 += 160;
    }
    while (v6 != v7);
  }
  uint64_t v11 = *((void *)this + 12);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 14);
    uint64_t v13 = v12 + 88 * v11;
    do
    {
      unint64_t v123 = *(void *)v12 >> 1;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v112, &v123);
      uint64_t v14 = *(void *)(v12 + 64);
      if (v14)
      {
        uint64_t v15 = *(void **)(v12 + 80);
        uint64_t v16 = 136 * v14;
        do
        {
          re::RenderGraphFile::fillConnectionHashes(*(const char **)(v12 + 8), v15);
          v15 += 17;
          v16 -= 136;
        }
        while (v16);
      }
      v12 += 88;
    }
    while (v12 != v13);
  }
  uint64_t v93 = a2;
  __n128 v99 = &v122;
  id v100 = (re::DynamicString *)&v118;
  uint64_t v17 = *((void *)this + 22);
  if (v17)
  {
    uint64_t v18 = (const char **)(*((void *)this + 24) + 24);
    uint64_t v19 = 56 * v17;
    do
    {
      unint64_t v20 = (unint64_t)*(v18 - 1) >> 1;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v115, v20)&& !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v112, v20))
      {
        unint64_t v21 = v99;
        if (!*v99)
        {
          re::DynamicString::append(v100, "\n", 1uLL);
          unint64_t v21 = v99;
        }
        *unint64_t v21 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v118, "Input defined with no matching target or buffer (%s).", *v18);
      }
      v18 += 7;
      v19 -= 56;
    }
    while (v19);
  }
  long long v95 = this;
  uint64_t v22 = *((void *)this + 17);
  if (v22)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unsigned int v27 = 0;
    uint64_t v28 = *((void *)v95 + 19);
    uint64_t v29 = v28 + 16 * v22;
    uint64_t v94 = 0;
    while (1)
    {
      re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *(void *)v28, (uint64_t)v97);
      if (!v97[0]) {
        break;
      }
      uint64_t v30 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v30 = &unk_26E6D4B50;
      *((void *)v30 + 1) = v115;
      *((void *)v30 + 2) = &v99;
      *((void *)v30 + 3) = &v118;
      *((void *)v30 + 4) = v28;
      *((void *)v30 + 5) = v112;
      uint64_t v125 = v30;
      uint64_t v31 = *(void *)(v28 + 8);
      if (v31)
      {
        if (*(void *)(v31 + 16))
        {
          uint64_t v32 = (**v98)(v98);
          re::IntrospectionWalker::walk(v32, *(const re::IntrospectionBase ***)(v28 + 8), (uint64_t)&v123);
          uint64_t v33 = *(char **)(*(void *)(v28 + 8) + 16);
          if (v33)
          {
            uint64_t v34 = *v33;
            if (*v33)
            {
              char v35 = v33[1];
              if (v35)
              {
                long long v36 = (unsigned __int8 *)(v33 + 2);
                do
                {
                  uint64_t v34 = 31 * v34 + v35;
                  int v37 = *v36++;
                  char v35 = v37;
                }
                while (v37);
              }
            }
          }
          else
          {
            uint64_t v34 = 0;
          }
          v96[0] = 2 * v34;
          v96[1] = (uint64_t)v33;
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v109, v96);
          re::StringID::destroyString((re::StringID *)v96);
          std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](&v123);
LABEL_49:
          unint64_t v42 = *(void *)(v28 + 8);
          if (v27)
          {
            unint64_t v43 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
            for (uint64_t i = *(unsigned int *)(v23 + 4 * ((v43 ^ (v43 >> 31)) % v27));
                  i != 0x7FFFFFFF;
                  LODWORD(i) = *(_DWORD *)(v26 + 24 * i + 8) & 0x7FFFFFFF)
            {
              if (*(void *)(v26 + 24 * i + 16) == v42)
              {
                int v45 = v99;
                if (!*v99)
                {
                  re::DynamicString::append(v100, "\n", 1uLL);
                  int v45 = v99;
                }
                *int v45 = 0;
                int v46 = (char *)v95 + 17;
                if (*((unsigned char *)v95 + 16)) {
                  int v46 = (const char *)*((void *)v95 + 3);
                }
                re::DynamicString::appendf((re::DynamicString *)&v118, "Found redundant RenderGraphNode pointer in RenderGraph %s.", v46);
                unint64_t v42 = *(void *)(v28 + 8);
                break;
              }
            }
          }
          unint64_t v47 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
          unint64_t v48 = v47 ^ (v47 >> 31);
          if (v27)
          {
            unint64_t v49 = v48 % v27;
            for (uint64_t j = *(unsigned int *)(v23 + 4 * v49);
                  j != 0x7FFFFFFF;
                  LODWORD(j) = *(_DWORD *)(v26 + 24 * j + 8) & 0x7FFFFFFF)
            {
              if (*(void *)(v26 + 24 * j + 16) == v42) {
                goto LABEL_71;
              }
            }
          }
          else
          {
            unint64_t v49 = 0;
          }
          uint64_t v51 = v108;
          if (v108 == 0x7FFFFFFF)
          {
            int v52 = v25;
            if (v25 == v27)
            {
              re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::setCapacity((uint64_t)&v105, 2 * v24);
              unsigned int v27 = DWORD2(v106);
              int v52 = v107;
              unint64_t v49 = v48 % DWORD2(v106);
              unint64_t v42 = *(void *)(v28 + 8);
              uint64_t v26 = v106;
              uint64_t v94 = *((void *)&v105 + 1);
            }
            uint64_t v53 = (v52 + 1);
            int v107 = v53;
            uint64_t v51 = v25;
            int v54 = *(_DWORD *)(v26 + 24 * v25 + 8);
            uint64_t v23 = v94;
          }
          else
          {
            int v54 = *(_DWORD *)(v26 + 24 * v108 + 8);
            LODWORD(v108) = v54 & 0x7FFFFFFF;
            uint64_t v53 = v25;
            LODWORD(v25) = v51;
          }
          uint64_t v55 = 3 * v51;
          *(_DWORD *)(v26 + 8 * v55 + 8) = v54 | 0x80000000;
          uint64_t v26 = v106;
          uint64_t v56 = v106 + 8 * v55;
          *(_DWORD *)(v56 + 8) = *(_DWORD *)(v56 + 8) & 0x80000000 | *(_DWORD *)(v23 + 4 * v49);
          *(void *)uint64_t v56 = v48;
          *(void *)(v56 + 16) = v42;
          *(_DWORD *)(v23 + 4 * v49) = v25;
          int v24 = ++HIDWORD(v106);
          ++HIDWORD(v108);
          uint64_t v25 = v53;
          goto LABEL_71;
        }
        long long v41 = v99;
        if (!*v99)
        {
          re::DynamicString::append(v100, "\n", 1uLL);
          long long v41 = v99;
        }
        *long long v41 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v118, "Rendergraph node in file %s found with no name set - please set a valid name");
      }
      else
      {
        uint64_t v40 = v99;
        if (!*v99)
        {
          re::DynamicString::append(v100, "\n", 1uLL);
          uint64_t v40 = v99;
        }
        *uint64_t v40 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v118, "Rendergraph node found with no data");
      }
      std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](&v123);
LABEL_71:
      v28 += 16;
      if (v28 == v29) {
        goto LABEL_72;
      }
    }
    uint64_t v38 = v99;
    if (!*v99)
    {
      re::DynamicString::append(v100, "\n", 1uLL);
      uint64_t v38 = v99;
    }
    *uint64_t v38 = 0;
    unsigned int v39 = (char *)v95 + 17;
    if (*((unsigned char *)v95 + 16)) {
      unsigned int v39 = (const char *)*((void *)v95 + 3);
    }
    re::DynamicString::appendf((re::DynamicString *)&v118, "Node found with unregistered type in RenderGraph %s. Check log for error \"Skipping unknown polymorphic type.\" to find type name.", v39);
    goto LABEL_49;
  }
LABEL_72:
  uint64_t v57 = *((void *)v95 + 37);
  if (v57)
  {
    uint64_t v58 = 0;
    uint64_t v59 = (unint64_t *)*((void *)v95 + 39);
    uint64_t v60 = &v59[v57];
    do
    {
      unint64_t v61 = *v59;
      (*(void (**)(unint64_t *__return_ptr, unint64_t, _OWORD *, _OWORD *, _OWORD *))(*(void *)*v59 + 16))(&v123, *v59, v115, v112, v109);
      if (!(_BYTE)v123)
      {
        uint64_t v62 = v99;
        if (!*v99)
        {
          re::DynamicString::append(v100, "\n", 1uLL);
          uint64_t v62 = v99;
        }
        *uint64_t v62 = 0;
        if (BYTE8(v124)) {
          char v63 = v125;
        }
        else {
          char v63 = (char *)&v124 + 9;
        }
        size_t v64 = strlen(v63);
        re::DynamicString::append((re::DynamicString *)&v118, v63, v64);
      }
      unint64_t v65 = DWORD2(v102);
      unint64_t v66 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v61 ^ (v61 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v61 ^ (v61 >> 30))) >> 27));
      unint64_t v67 = v66 ^ (v66 >> 31);
      if (DWORD2(v102))
      {
        uint64_t v68 = *(unsigned int *)(v58 + 4 * (v67 % DWORD2(v102)));
        if (v68 != 0x7FFFFFFF)
        {
          while (*(void *)(v102 + 24 * v68 + 16) != v61)
          {
            LODWORD(v68) = *(_DWORD *)(v102 + 24 * v68 + 8) & 0x7FFFFFFF;
            if (v68 == 0x7FFFFFFF) {
              goto LABEL_92;
            }
          }
          uint64_t v70 = v99;
          if (!*v99)
          {
            re::DynamicString::append(v100, "\n", 1uLL);
            uint64_t v70 = v99;
          }
          char *v70 = 0;
          size_t v71 = (char *)v95 + 17;
          if (*((unsigned char *)v95 + 16)) {
            size_t v71 = (const char *)*((void *)v95 + 3);
          }
          re::DynamicString::appendf((re::DynamicString *)&v118, "Found redundant RenderGraphSpecifyOperationBase pointer in RenderGraph %s.", v71);
        }
LABEL_92:
        unint64_t v69 = (v67 % v65);
        uint64_t v58 = *((void *)&v101 + 1);
        uint64_t v72 = *(unsigned int *)(*((void *)&v101 + 1) + 4 * (v67 % v65));
        if (v72 != 0x7FFFFFFF)
        {
          while (*(void *)(v102 + 24 * v72 + 16) != v61)
          {
            LODWORD(v72) = *(_DWORD *)(v102 + 24 * v72 + 8) & 0x7FFFFFFF;
            if (v72 == 0x7FFFFFFF) {
              goto LABEL_95;
            }
          }
          goto LABEL_101;
        }
      }
      else
      {
        unint64_t v69 = 0;
      }
LABEL_95:
      unsigned int v73 = v104;
      if (v104 == 0x7FFFFFFF)
      {
        unsigned int v73 = v103;
        unsigned int v74 = v103;
        if (v103 == v65)
        {
          re::HashSetBase<re::RenderGraphSpecifyOperationBase *,re::RenderGraphSpecifyOperationBase *,re::internal::ValueAsKey<re::RenderGraphSpecifyOperationBase *>,re::Hash<re::RenderGraphSpecifyOperationBase *>,re::EqualTo<re::RenderGraphSpecifyOperationBase *>,true,false>::setCapacity((uint64_t)&v101, 2 * HIDWORD(v102));
          unsigned int v74 = v103;
          unint64_t v69 = v67 % DWORD2(v102);
        }
        unsigned int v103 = v74 + 1;
        uint64_t v75 = v102;
        int v76 = *(_DWORD *)(v102 + 24 * v73 + 8);
      }
      else
      {
        uint64_t v75 = v102;
        int v76 = *(_DWORD *)(v102 + 24 * v104 + 8);
        LODWORD(v104) = v76 & 0x7FFFFFFF;
      }
      uint64_t v77 = v75 + 24 * v73;
      *(_DWORD *)(v77 + 8) = v76 | 0x80000000;
      uint64_t v58 = *((void *)&v101 + 1);
      *(_DWORD *)(v77 + 8) = *(_DWORD *)(*((void *)&v101 + 1) + 4 * v69) | 0x80000000;
      *(void *)uint64_t v77 = v67;
      *(void *)(v77 + 16) = v61;
      *(_DWORD *)(v58 + 4 * v69) = v73;
      ++HIDWORD(v102);
      ++HIDWORD(v104);
LABEL_101:
      if (!(_BYTE)v123 && (void)v124 && (BYTE8(v124) & 1) != 0) {
        (*(void (**)(void))(*(void *)v124 + 40))();
      }
      ++v59;
    }
    while (v59 != v60);
  }
  uint64_t v78 = *((void *)v95 + 32);
  if (v78)
  {
    long long v79 = (const char **)(*((void *)v95 + 34) + 24);
    uint64_t v80 = 48 * v78;
    do
    {
      unint64_t v81 = (unint64_t)*(v79 - 1) >> 1;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v115, v81)&& !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v112, v81))
      {
        uint64_t v82 = v99;
        if (!*v99)
        {
          re::DynamicString::append(v100, "\n", 1uLL);
          uint64_t v82 = v99;
        }
        *uint64_t v82 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v118, "Output defined with no matching target or buffer (%s).", *v79);
      }
      v79 += 6;
      v80 -= 48;
    }
    while (v80);
  }
  uint64_t v83 = *((void *)v95 + 42);
  if (v83)
  {
    uint64_t v84 = *((void *)v95 + 44);
    uint64_t v85 = v84 + 56 * v83;
    do
    {
      uint64_t v86 = *(void *)(v84 + 32);
      if (v86)
      {
        int v87 = *(void **)(v84 + 48);
        uint64_t v88 = 136 * v86;
        do
        {
          re::RenderGraphFile::fillConnectionHashes(*(const char **)(v84 + 8), v87);
          v87 += 17;
          v88 -= 136;
        }
        while (v88);
      }
      v84 += 56;
    }
    while (v84 != v85);
  }
  if (v122)
  {
    char v89 = 1;
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v123, (const re::DynamicString *)&v118);
    char v89 = 0;
    uint64_t v90 = v125;
    *(void *)(v93 + 8) = v123;
    *(void *)(v93 + 32) = v90;
    *(_OWORD *)(v93 + 16) = v124;
  }
  *(unsigned char *)uint64_t v93 = v89;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v101);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v105);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v109);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v112);
  double v91 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v115);
  unint64_t result = v118;
  if (v118)
  {
    if (v119) {
      return (uint64_t *)(*(uint64_t (**)(double))(*v118 + 40))(v91);
    }
  }
  return result;
}

void sub_2334AB6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&a21);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&a27);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&a33);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(&a39);
  double v41 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v39 - 240));
  uint64_t v42 = *(void *)(v39 - 184);
  if (v42)
  {
    if (*(unsigned char *)(v39 - 176)) {
      (*(void (**)(uint64_t, void, double))(*(void *)v42 + 40))(v42, *(void *)(v39 - 168), v41);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add(uint64_t result, unint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = *(unsigned int *)(result + 24);
  if (v5)
  {
    unint64_t v6 = v4 % v5;
    uint64_t v7 = *(unsigned int *)(*(void *)(result + 8) + 4 * (v4 % v5));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(result + 16);
      if (*(void *)(v8 + 16 * v7 + 8) == v4) {
        return result;
      }
      while (1)
      {
        uint64_t v7 = *(_DWORD *)(v8 + 16 * v7) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v8 + 16 * v7 + 8) == v4) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  unint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(result, v6, v4, a2);
  ++*(_DWORD *)(v3 + 40);
  return result;
}

BOOL re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % v2));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 16 * v3 + 8) == a2) {
    return 1;
  }
  do
  {
    uint64_t v3 = *(_DWORD *)(v5 + 16 * v3) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 16 * v3 + 8) != a2);
  return result;
}

__n128 re::RenderGraphFile::initRuntimeNodeSettings@<Q0>(re::RenderGraphFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 17);
  *((void *)this + 90) = v4;
  if (v4)
  {
    if (v4 >> 57)
    {
LABEL_33:
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 128, v4);
      _os_crash();
      __break(1u);
LABEL_34:
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    *((void *)this + 91) = v7;
    if (!v7) {
      goto LABEL_34;
    }
    unint64_t v9 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        *(_OWORD *)(v7 + 100) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        *(void *)(v7 + 116) = 0x7FFFFFFFLL;
        v7 += 128;
        --v9;
      }
      while (v9);
    }
    *(_OWORD *)(v7 + 100) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_DWORD *)(v7 + 64) = 0;
    __n128 result = (__n128)0x7FFFFFFFuLL;
    *(void *)(v7 + 116) = 0x7FFFFFFFLL;
  }
  v30[1] = 0;
  v30[2] = 0;
  v30[0] = re::PassthroughAssetSerialization::instance(void)::instance;
  unsigned int v29 = 0;
  if (!*((void *)this + 17))
  {
LABEL_20:
    *(unsigned char *)a2 = 1;
    return result;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = (uint64_t *)(*((void *)this + 19) + 16 * v10);
    uint64_t v12 = (char **)(v11 + 1);
    if (!v11[1])
    {
      re::DynamicString::format((re::DynamicString *)"Invalid node data %p", (re::DynamicString *)&v41, v11);
      goto LABEL_25;
    }
    re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *v11, (uint64_t)v27);
    if (!v27[0])
    {
      if (*((unsigned char *)this + 16)) {
        int v24 = (char *)*((void *)this + 3);
      }
      else {
        int v24 = (char *)this + 17;
      }
      re::DynamicString::format((re::DynamicString *)"Node found with unregistered type in RenderGraph %s.", (re::DynamicString *)&v41, v24);
      __n128 result = v41;
      long long v26 = v42;
      *(unsigned char *)a2 = 0;
      *(__n128 *)(a2 + 8) = result;
      *(_OWORD *)(a2 + 24) = v26;
      return result;
    }
    unint64_t v14 = (unint64_t)v28;
    uint64_t v15 = (re::Allocator *)(**v28)(v28);
    unint64_t v17 = v29;
    unint64_t v18 = *((void *)this + 90);
    if (v18 <= v29)
    {
      v32[0] = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v41 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      uint64_t v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 468;
      __int16 v37 = 2048;
      unint64_t v38 = v17;
      __int16 v39 = 2048;
      unint64_t v40 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v32[0] = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v41 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      uint64_t v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 468;
      __int16 v37 = 2048;
      unint64_t v38 = v17;
      __int16 v39 = 2048;
      unint64_t v40 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      uint64_t v31 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v41 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      uint64_t v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 468;
      __int16 v37 = 2048;
      unint64_t v38 = v14;
      __int16 v39 = 2048;
      unint64_t v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      uint64_t v31 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v41 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      uint64_t v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 468;
      __int16 v37 = 2048;
      unint64_t v38 = v14;
      __int16 v39 = 2048;
      unint64_t v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      v32[0] = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v41 = 0u;
      unint64_t v4 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      uint64_t v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 789;
      __int16 v37 = 2048;
      unint64_t v38 = v14;
      __int16 v39 = 2048;
      unint64_t v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_33;
    }
    *(void *)(*((void *)this + 91) + ((unint64_t)v29 << 7)) = v16;
    uint64_t v19 = (const re::IntrospectionBase *)(**(uint64_t (***)(unint64_t))v14)(v14);
    unint64_t v17 = v29;
    unint64_t v18 = *((void *)this + 90);
    if (v18 <= v29) {
      goto LABEL_29;
    }
    unint64_t v20 = *v12;
    unint64_t v21 = *(const re::IntrospectionBase ***)(*((void *)this + 91) + ((unint64_t)v29 << 7));
    v41.n128_u64[1] = 0;
    *(void *)&long long v42 = v30;
      break;
    uint64_t v22 = (re *)(**(uint64_t (***)(unint64_t))v14)(v14);
    unint64_t v14 = v29;
    unint64_t v17 = *((void *)this + 90);
    if (v17 <= v29) {
      goto LABEL_30;
    }
    re::makeBindNode(v22, *(const re::IntrospectionBase **)(*((void *)this + 91) + ((unint64_t)v29 << 7)), (uint64_t)v32);
    unint64_t v14 = v29;
    unint64_t v17 = *((void *)this + 90);
    if (v17 <= v29) {
      goto LABEL_31;
    }
    uint64_t v23 = (re::BindNode *)(*((void *)this + 91) + ((unint64_t)v29 << 7) + 8);
    if (v23 != (re::BindNode *)v32) {
      re::BindNode::move(v23, (re::BindNode *)v32);
    }
    re::BindNode::deinit((re::BindNode *)v32);
    unint64_t v14 = v29;
    unint64_t v17 = *((void *)this + 17);
    if (v17 <= v29) {
      goto LABEL_32;
    }
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)this + 736, (StringID *)(*(void *)(*((void *)this + 19) + 16 * v29 + 8) + 8), &v29);
    uint64_t v10 = ++v29;
    if (*((void *)this + 17) <= (unint64_t)v29) {
      goto LABEL_20;
    }
  }
  re::DynamicString::format((re::DynamicString *)"Failed to perform deep copy into the node cache of %s.", (re::DynamicString *)&v41, *((void *)*v12 + 2));
LABEL_25:
  __n128 result = v41;
  long long v25 = v42;
  *(unsigned char *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v25;
  return result;
}

void sub_2334AC0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  re::BindNode::deinit((re::BindNode *)va);
  _Unwind_Resume(a1);
}

double re::RenderGraphFile::initConnectionSourceDataList(BOOL this)
{
  uint64_t v1 = (void *)this;
  int v36 = 0;
  memset(v35, 0, sizeof(v35));
  uint64_t v37 = 0x7FFFFFFFLL;
  uint64_t v2 = *(void *)(this + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(this + 72);
    uint64_t v4 = v3 + 160 * v2;
    do
    {
      uint64_t v5 = *(void *)(v3 + 136);
      if (v5)
      {
        unint64_t v6 = *(__n128 **)(v3 + 152);
        uint64_t v7 = 136 * v5;
        do
        {
          unint64_t v8 = v6[8].n128_u64[0];
          this = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v35, v8);
          if (!this)
          {
            *(void *)&v34[0] = v8;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v35, (unint64_t *)v34);
            re::DynamicArray<re::RenderGraphDataStoreConnection>::add((_anonymous_namespace_ *)(v1 + 98), v6);
          }
          unint64_t v6 = (__n128 *)((char *)v6 + 136);
          v7 -= 136;
        }
        while (v7);
      }
      v3 += 160;
    }
    while (v3 != v4);
  }
  uint64_t v9 = v1[12];
  if (v9)
  {
    uint64_t v10 = v1[14];
    uint64_t v11 = v10 + 88 * v9;
    do
    {
      uint64_t v12 = *(void *)(v10 + 64);
      if (v12)
      {
        uint64_t v13 = *(__n128 **)(v10 + 80);
        uint64_t v14 = 136 * v12;
        do
        {
          unint64_t v15 = v13[8].n128_u64[0];
          this = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v35, v15);
          if (!this)
          {
            *(void *)&v34[0] = v15;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v35, (unint64_t *)v34);
            re::DynamicArray<re::RenderGraphDataStoreConnection>::add((_anonymous_namespace_ *)(v1 + 98), v13);
          }
          uint64_t v13 = (__n128 *)((char *)v13 + 136);
          v14 -= 136;
        }
        while (v14);
      }
      v10 += 88;
    }
    while (v10 != v11);
  }
  uint64_t v16 = v1[42];
  memset(v34, 0, sizeof(v34));
  uint64_t v17 = v1[42];
  if (v17)
  {
    unint64_t v18 = (void *)v1[44];
    uint64_t v19 = 56 * v17;
    do
    {
      v32[0] = *v18 >> 1;
      int v33 = v18;
      uint64_t v20 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v34, v32[0]);
      if (v20 == -1) {
        re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd((_anonymous_namespace_ *)v34, v32, (uint64_t *)&v33);
      }
      else {
        *(void *)(*((void *)&v34[0] + 1) + 16 * v20 + 8) = v18;
      }
      v18 += 7;
      v19 -= 56;
    }
    while (v19);
  }
  if (v1[17])
  {
    uint64_t v21 = 0;
    unsigned int v22 = 0;
    uint64_t v23 = *((void *)&v34[0] + 1);
    do
    {
      int v24 = (uint64_t *)(v1[19] + 16 * v21);
      re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *v24, (uint64_t)v32);
      uint64_t v25 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v34, *(void *)(v24[1] + 8) >> 1);
      if (v25 != -1)
      {
        uint64_t v26 = *(void *)(v23 + 16 * v25 + 8);
        uint64_t v27 = *(void *)(v26 + 32);
        if (v27)
        {
          uint64_t v28 = *(__n128 **)(v26 + 48);
          uint64_t v29 = 136 * v27;
          do
          {
            unint64_t v30 = v28[8].n128_u64[0];
            if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v35, v30))
            {
              int v33 = (void *)v30;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v35, (unint64_t *)&v33);
              re::DynamicArray<re::RenderGraphDataStoreConnection>::add((_anonymous_namespace_ *)(v1 + 103), v28);
            }
            uint64_t v28 = (__n128 *)((char *)v28 + 136);
            v29 -= 136;
          }
          while (v29);
        }
      }
      uint64_t v21 = ++v22;
    }
    while (v1[17] > (unint64_t)v22);
  }
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v34);
  return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v35);
}

void sub_2334AC3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 re::DynamicArray<re::RenderGraphDataStoreConnection>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphDataStoreConnection>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (__n128 *)(*((void *)this + 4) + 136 * v4);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v5, (uint64_t *)a2);
  re::DynamicString::DynamicString((re::DynamicString *)&v5[2].n128_i8[8], (const re::DynamicString *)&a2[2].n128_i8[8]);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)&v5[4].n128_i64[1], &a2[4].n128_i64[1]);
  __n128 result = a2[7];
  v5[8].n128_u64[0] = a2[8].n128_u64[0];
  v5[7] = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::RenderGraphFile::fillIndexTable(re *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (a4 && a5)
  {
    unint64_t v6 = a4;
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    uint64_t v9 = a1;
    unint64_t v10 = 0;
    int v11 = 0;
    uint64_t v37 = a3 + 9;
    __int16 v35 = a1;
    while (2)
    {
      uint64_t v12 = 0;
      switch(*(_DWORD *)(v5 + 16))
      {
        case 0:
        case 9:
          return v12 != 0;
        case 2:
          uint64_t v13 = v7 + 32 * v10;
          if (*(unsigned char *)(v13 + 8)) {
            uint64_t v14 = *(const char **)(v13 + 16);
          }
          else {
            uint64_t v14 = (const char *)(v37 + 32 * v10);
          }
          if (v10 < (unint64_t)v9) {
            goto LABEL_38;
          }
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          *(_OWORD *)CMTime buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_47:
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          *(_OWORD *)CMTime buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_48;
        case 3:
          uint64_t v15 = v7 + 32 * v10;
          if (*(unsigned char *)(v15 + 8)) {
            uint64_t v14 = *(const char **)(v15 + 16);
          }
          else {
            uint64_t v14 = (const char *)(v37 + 32 * v10);
          }
          if (v10 >= (unint64_t)v9) {
            goto LABEL_47;
          }
          goto LABEL_38;
        case 4:
          uint64_t v16 = v7 + 32 * v10;
          if (*(unsigned char *)(v16 + 8)) {
            uint64_t v14 = *(const char **)(v16 + 16);
          }
          else {
            uint64_t v14 = (const char *)(v37 + 32 * v10);
          }
          if (v10 >= (unint64_t)v9)
          {
LABEL_48:
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            *(_OWORD *)CMTime buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_49;
          }
LABEL_38:
          a1 = (re *)atoi(v14);
          *(_DWORD *)(v8 + 4 * v10) = a1;
          uint64_t v29 = (uint64_t *)(v5 + 48);
LABEL_39:
          uint64_t v5 = *v29;
          unint64_t v10 = (v11 + 1);
          if (v6 <= v10) {
            goto LABEL_42;
          }
          ++v11;
          uint64_t v12 = *v29;
          if (!v5) {
            return v12 != 0;
          }
          continue;
        case 8:
          int v36 = v11;
          int v17 = 0;
          uint64_t v18 = v7 + 32 * v10;
          uint64_t v19 = (unsigned char *)(v18 + 8);
          uint64_t v20 = (const char **)(v18 + 16);
          break;
        default:
          unint64_t v30 = *re::graphicsLogObjects(a1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)CMTime buf = 0;
            _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Connection source type isn't supported.", buf, 2u);
          }
          goto LABEL_45;
      }
      break;
    }
    do
    {
      uint64_t v21 = *(unsigned int *)(v5 + 56);
      if (!v21) {
        break;
      }
      uint64_t v22 = 0;
      char v23 = 0;
      uint64_t v24 = *(void *)(v5 + 64);
LABEL_14:
      char v38 = v23;
      do
      {
        uint64_t v25 = *(void *)(v24 + 8 * v22);
        if (*(_DWORD *)v25 == 1)
        {
          uint64_t v26 = (const char *)(v37 + 32 * v10);
          if (*v19) {
            uint64_t v26 = *v20;
          }
          a1 = (re *)strcmp(*(const char **)(v25 + 8), v26);
          if (!a1)
          {
            uint64_t v9 = v35;
            if (v10 < (unint64_t)v35)
            {
              int v28 = v17 + v22;
              uint64_t v8 = a2;
              uint64_t v7 = a3;
              *(_DWORD *)(a2 + 4 * v10) = v28;
              uint64_t v29 = (uint64_t *)(v25 + 16);
              unint64_t v6 = a4;
              int v11 = v36;
              goto LABEL_39;
            }
LABEL_49:
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            *(_OWORD *)CMTime buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (*(_DWORD *)(v25 + 40) == 3)
          {
            uint64_t v5 = *(void *)(v25 + 16);
            char v23 = 1;
            if (v21 - 1 != v22++) {
              goto LABEL_14;
            }
            goto LABEL_26;
          }
        }
        ++v22;
      }
      while (v21 != v22);
      if ((v38 & 1) == 0) {
        break;
      }
LABEL_26:
      v17 += v21;
    }
    while (v5);
LABEL_45:
    uint64_t v12 = 0;
  }
  else
  {
LABEL_42:
    uint64_t v12 = v5;
  }
  return v12 != 0;
}

uint64_t re::RenderGraphFile::getCachedConnection(re::RenderGraphFile *this, const re::IntrospectionBase *a2, const re::RenderGraphDataStoreConnection *a3, const re::RenderGraphData *a4, const re::IntrospectionStructure *a5)
{
  uint64_t v8 = (uint64_t *)((char *)this + 408);
  uint64_t v9 = (uint64_t *)((char *)a3 + 120);
  uint64_t v10 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 408, *((void *)a3 + 15));
  if (!v10)
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    char v20 = 1;
    unint64_t v11 = *((void *)a3 + 2);
    unint64_t v12 = *((void *)a3 + 11);
    *(void *)&long long v16 = a3;
    if (re::RenderGraphFile::fillIndexTable(*((re **)&v18 + 1), v19, *((void *)a3 + 4), *((void *)a3 + 2), (uint64_t)a2)&& re::RenderGraphFile::fillIndexTable((re *)v17, *((uint64_t *)&v17 + 1), *((void *)a3 + 13), *((void *)a3 + 11), (uint64_t)a4))
    {
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::RenderGraphFile::ConnectionCacheInfo&>(v8, v9, (uint64_t)&v16);
      uint64_t v10 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)v8, *v9);
      int v14 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v14 = 0;
    }
    if ((void)v18)
    {
      if (*((void *)&v18 + 1))
      {
        (*(void (**)(void))(*(void *)v18 + 40))(v18);
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
      }
      *(void *)&long long v18 = 0;
    }
    if (*((void *)&v16 + 1) && (void)v17) {
      (*(void (**)(void))(**((void **)&v16 + 1) + 40))(*((void *)&v16 + 1));
    }
    if (!v14) {
      return 0;
    }
  }
  return v10;
}

void sub_2334ACBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a13 && a14) {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  if (a10)
  {
    if (a11) {
      (*(void (**)(void))(*(void *)a10 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 88 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 88 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 88 * v3 + 16) == a2) {
        return v5 + 88 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 88 * v3 + 24;
}

uint64_t *re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::RenderGraphFile::ConnectionCacheInfo&>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*result)
  {
    unint64_t v9 = v8 % *((unsigned int *)result + 6);
    uint64_t v10 = *(unsigned int *)(result[1] + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = result[2];
      if (*(void *)(v11 + 88 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 88 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 88 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v12 = *((_DWORD *)result + 9);
  if (v12 == 0x7FFFFFFF)
  {
    unsigned int v12 = *((_DWORD *)result + 8);
    unsigned int v13 = v12;
    if (v12 == *((_DWORD *)result + 6))
    {
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)result, 2 * *((_DWORD *)result + 7));
      LODWORD(v9) = v8 % *((unsigned int *)v5 + 6);
      unsigned int v13 = *((_DWORD *)v5 + 8);
    }
    *((_DWORD *)v5 + 8) = v13 + 1;
    uint64_t v14 = v5[2];
    int v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
  }
  else
  {
    uint64_t v14 = result[2];
    int v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
    *((_DWORD *)result + 9) = v15 & 0x7FFFFFFF;
  }
  uint64_t v16 = 88 * v12;
  *(_DWORD *)(v14 + v16 + 8) = v15 | 0x80000000;
  *(_DWORD *)(v5[2] + v16 + 8) = *(_DWORD *)(v5[2] + v16 + 8) & 0x80000000 | *(_DWORD *)(v5[1] + 4 * v9);
  *(void *)(v5[2] + v16) = v8;
  *(void *)(v5[2] + v16 + 16) = *a2;
  uint64_t v17 = v5[2] + v16;
  *(void *)(v17 + 24) = *(void *)a3;
  re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v17 + 32), a3 + 8);
  __n128 result = re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v17 + 56), a3 + 32);
  *(unsigned char *)(v17 + 80) = *(unsigned char *)(a3 + 56);
  *(_DWORD *)(v5[1] + 4 * v9) = v12;
  ++*((_DWORD *)v5 + 7);
  ++*((_DWORD *)v5 + 10);
  return result;
}

uint64_t re::RenderGraphFile::hashConnection(re::RenderGraphFile *this, re::RenderFrame *a2, uint64_t a3, const re::RenderGraphDataStoreConnection *a4, uint64_t a5)
{
  *(void *)&long long v26 = *(void *)(a5 + 112);
  uint64_t v11 = (_anonymous_namespace_ **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a3 + 208, (uint64_t *)&v26);
  unsigned int v12 = v11;
  if (v11) {
    uint64_t v5 = *v11;
  }
  uint64_t result = re::RenderGraphDataStore::tryGetByTypeNameHash((re::RenderGraphDataStore *)(a3 + 32), (uint64_t)a4, *(void *)(a5 + 112));
  if (!v12) {
    goto LABEL_23;
  }
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_23;
  }
  int v15 = (uint64_t *)((char *)a2 + 456);
  uint64_t v16 = (uint64_t *)(a5 + 128);
  uint64_t result = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)a2 + 456, *(void *)(a5 + 128));
  uint64_t v17 = result;
  if (!result)
  {
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    char v30 = 1;
    unint64_t v18 = *(void *)(a5 + 88);
    *(void *)&long long v26 = a5;
    BOOL v19 = re::RenderGraphFile::fillIndexTable((re *)v27, *((uint64_t *)&v27 + 1), *(void *)(a5 + 104), *(void *)(a5 + 88), (uint64_t)v5);
    if (v19)
    {
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::RenderGraphFile::ConnectionCacheInfo&>(v15, v16, (uint64_t)&v26);
      uint64_t v17 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)v15, *v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    if ((void)v28)
    {
      if (*((void *)&v28 + 1))
      {
        (*(void (**)(void))(*(void *)v28 + 40))();
        *((void *)&v28 + 1) = 0;
        uint64_t v29 = 0;
      }
      *(void *)&long long v28 = 0;
    }
    uint64_t result = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1) && (void)v27) {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)&v26 + 1) + 40))();
    }
    if (!v17 || !v19) {
      goto LABEL_23;
    }
  }
  if (*(unsigned char *)(v17 + 56))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    uint64_t v25 = v5;
    *(void *)&long long v26 = v21;
    uint64_t result = re::scanForCopy(v17 + 8, (uint64_t *)&v26, &v25);
    if (result)
    {
      *((void *)this + 1) = result;
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
    }
    *(unsigned char *)this = v24;
  }
  else
  {
LABEL_23:
    *(unsigned char *)this = 0;
  }
  return result;
}

void sub_2334AD148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a15 && a16) {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }
  if (a12)
  {
    if (a13) {
      (*(void (**)(void))(*(void *)a12 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t anonymous namespace'::hashMembers(_anonymous_namespace_ *this, re::RenderFrame *a2, const re::IntrospectionBase *a3, const void *a4)
{
  v42[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = this;
  switch(*((_DWORD *)this + 4))
  {
    case 0:
    case 9:
      *(void *)&buf[0] = 0;
      size_t v6 = *((unsigned int *)this + 5);
      if (v6 >= 9)
      {
        unint64_t v7 = *re::graphicsLogObjects(this);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
          return 0;
        }
        LOWORD(__dst[0]) = 0;
        unint64_t v8 = "Connection hashing only supports basic types of up to 64 bits.";
        unint64_t v9 = (uint8_t *)__dst;
        goto LABEL_7;
      }
      memcpy(buf, a2, v6);
      unint64_t v37 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(void *)&buf[0] ^ (*(void *)&buf[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * (*(void *)&buf[0] ^ (*(void *)&buf[0] >> 30))) >> 27));
      return v37 ^ (v37 >> 31);
    case 2:
      uint64_t v10 = *((void *)this + 6);
      int v11 = *(_DWORD *)(v10 + 16);
      if (v11 != 9 && v11 != 0) {
        return 0;
      }
      LODWORD(v13) = *((_DWORD *)this + 16) * *(_DWORD *)(v10 + 20);
      if (!v13) {
        return 0;
      }
      goto LABEL_28;
    case 3:
      int v14 = *(_DWORD *)(*((void *)this + 6) + 16);
      if (v14 == 9 || v14 == 0)
      {
        uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_ *, re::RenderFrame *, const re::IntrospectionBase *, const void *))(*(void *)this + 88))(this, a2, a3, a4)* *(int *)(*((void *)this + 6) + 20);
        if (v13) {
          goto LABEL_28;
        }
      }
      return 0;
    case 4:
      int v16 = *(_DWORD *)(*((void *)this + 6) + 16);
      if (v16 != 9 && v16 != 0) {
        return 0;
      }
      uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_ *, re::RenderFrame *, const re::IntrospectionBase *, const void *))(*(void *)this + 80))(this, a2, a3, a4)* *(int *)(*((void *)this + 6) + 20);
      if (!v13) {
        return 0;
      }
LABEL_28:
      MurmurHash3_x64_128((uint64_t)a2, v13, 0, (unint64_t *)buf);
      return (*((void *)&buf[0] + 1) - 0x61C8864680B583E9 + (*(void *)&buf[0] << 6) + (*(void *)&buf[0] >> 2)) ^ *(void *)&buf[0];
    case 6:
      unint64_t v18 = *((void *)a2 + 1);
      if (v18) {
        BOOL v19 = (char *)*((void *)a2 + 2);
      }
      else {
        BOOL v19 = (char *)a2 + 9;
      }
      if (v18) {
        unint64_t v38 = v18 >> 1;
      }
      else {
        unint64_t v38 = v18 >> 1;
      }
      if (!v38) {
        return 0;
      }
      MurmurHash3_x64_128((uint64_t)v19, v38, 0, (unint64_t *)buf);
      return (*((void *)&buf[0] + 1) - 0x61C8864680B583E9 + (*(void *)&buf[0] << 6) + (*(void *)&buf[0] >> 2)) ^ *(void *)&buf[0];
    case 8:
      if (!*((_DWORD *)this + 14)) {
        return 0;
      }
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      uint64_t v22 = v42;
      char v23 = (char *)buf + 8;
      break;
    default:
      unint64_t v7 = *re::graphicsLogObjects(this);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        unint64_t v8 = "Connection source type isn't supported for hashing.";
        unint64_t v9 = (uint8_t *)buf;
LABEL_7:
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      }
      return 0;
  }
  do
  {
    uint64_t v24 = *(void *)(*((void *)v5 + 8) + 8 * v20);
    if (*(_DWORD *)v24 != 1) {
      goto LABEL_46;
    }
    int v25 = *(_DWORD *)(v24 + 40);
    long long v26 = (char *)a2 + *(int *)(v24 + 36);
    switch(v25)
    {
      case 3:
LABEL_37:
        v21 ^= (unint64_t)this + 64 * v21 + (v21 >> 2) - 0x61C8864680B583E9;
        break;
      case 1:
        uint64_t v27 = *(void *)(v24 + 48);
        if (v27)
        {
          long long v28 = &v26[*(int *)(v24 + 64)];
          __dst[0] = 0;
          memcpy(__dst, v28, *(int *)(v27 + 20));
          uint64_t v29 = __dst[0];
        }
        else
        {
          uint64_t v31 = v23;
          uint64_t v32 = v22;
          int v33 = *re::graphicsLogObjects(this);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            uint64_t v36 = *(void *)(v24 + 8);
            LODWORD(buf[0]) = 136315138;
            *(void *)((char *)buf + 4) = v36;
            _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Connection hashing failed to get array length for member '%s'.", (uint8_t *)buf, 0xCu);
          }
          uint64_t v29 = 0;
          uint64_t v22 = v32;
          char v23 = v31;
        }
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)buf, *(const re::IntrospectionBase **)(*(void *)(v24 + 16) + 48), v29);
        v21 ^= (v21 << 6)
             - 0x61C8864680B583E9
             + (v21 >> 2)
        *(void *)&buf[0] = &unk_26E6C2018;
        re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v22);
        *(void *)&buf[0] = &unk_26E6DECE0;
        this = (_anonymous_namespace_ *)objc_destructInstance(v23);
        break;
      case 0:
        goto LABEL_37;
      default:
        char v30 = *re::graphicsLogObjects(this);
        this = (_anonymous_namespace_ *)os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Connection source type isn't supported for hashing.", (uint8_t *)buf, 2u);
        }
        break;
    }
LABEL_46:
    ++v20;
  }
  while (v20 < *((unsigned int *)v5 + 14));
  return v21;
}

void sub_2334AD698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)va);
  _Unwind_Resume(a1);
}

uint64_t re::RenderGraphFile::connectionWalker(uint64_t result, uint64_t a2, uint64_t a3, const re::IntrospectionBase *a4, const re::IntrospectionBase **a5, uint64_t a6)
{
  uint64_t v24 = (re::RenderGraphFile *)result;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(void *)(a6 + 16))
  {
    unint64_t v10 = 0;
    uint64_t v11 = a2 + 208;
    unsigned int v12 = (re::RenderGraphDataStore *)(a2 + 32);
    unsigned int v13 = 1;
    while (1)
    {
      *(void *)&long long v36 = *(void *)(*(void *)(a6 + 32) + 136 * v10 + 112);
      int v14 = (const re::RenderGraphData **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v11, (uint64_t *)&v36);
      if (v14) {
        unint64_t v7 = *v14;
      }
      unint64_t v15 = *(void *)(a6 + 16);
      if (v15 <= v10) {
        break;
      }
      unint64_t v6 = v14 != 0;
      uint64_t result = re::RenderGraphDataStore::tryGetByTypeNameHash(v12, a3, *(void *)(*(void *)(a6 + 32) + 136 * v10 + 112));
      uint64_t v17 = result;
      char v18 = v6 ^ 1;
      if (!result) {
        char v18 = 1;
      }
      if ((v18 & 1) == 0)
      {
        unint64_t v6 = *(void *)(a6 + 16);
        if (v6 <= v10) {
          goto LABEL_18;
        }
        uint64_t result = re::RenderGraphFile::getCachedConnection(v24, a4, (const re::RenderGraphDataStoreConnection *)(*(void *)(a6 + 32) + 136 * v10), v7, v16);
        uint64_t v19 = result;
        if (result)
        {
          if (*(unsigned char *)(result + 56))
          {
            *(void *)uint64_t v29 = 0;
            uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
            long long v28 = v7;
            *(void *)uint64_t v29 = v20;
            long long v26 = a4;
            uint64_t v27 = a5;
            uint64_t result = re::scanForCopy(v19 + 8, (uint64_t *)v29, &v28);
            if (result)
            {
              uint64_t result = re::scanForCopy(v19 + 32, (uint64_t *)&v27, &v26);
              if (result)
              {
                *((void *)&v36 + 1) = 0;
                *(void *)&long long v37 = 0;
                if ((result & 1) == 0) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
      unint64_t v10 = v13;
      if (*(void *)(a6 + 16) <= (unint64_t)v13++) {
        return result;
      }
    }
    long long v28 = 0;
    long long v40 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v29 = 136315906;
    *(void *)&v29[4] = "operator[]";
    __int16 v30 = 1024;
    int v31 = 797;
    __int16 v32 = 2048;
    unint64_t v33 = v10;
    __int16 v34 = 2048;
    unint64_t v35 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    long long v28 = 0;
    long long v40 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v29 = 136315906;
    *(void *)&v29[4] = "operator[]";
    __int16 v30 = 1024;
    int v31 = 797;
    __int16 v32 = 2048;
    unint64_t v33 = v10;
    __int16 v34 = 2048;
    unint64_t v35 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Failed to perform introspection deep copy when setting RenderGraphFile connections.", "copyResult", "connectionWalker", 704);
    _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::RenderGraphFile::prepareFrame(re::RenderGraphFile *this, char *__s, char *a3, re::RenderFrame *a4)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v8 = *a3;
    if (*a3)
    {
      char v9 = a3[1];
      if (v9)
      {
        unint64_t v10 = a3 + 2;
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *(unsigned __int8 *)v10++;
          char v9 = v11;
        }
        while (v11);
      }
      v8 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v136 = v8;
  uint64_t v12 = *((void *)this + 7);
  if (v12)
  {
    unsigned int v13 = (re::TextureAsset *)(*((void *)this + 9) + 88);
    uint64_t v14 = 160 * v12;
    do
    {
      if (*((_DWORD *)v13 - 18) == 1)
      {
        uint64_t v15 = re::AssetHandle::asset<re::TextureAsset>(v13);
        if (*(_DWORD *)(v15 + 240)) {
          goto LABEL_144;
        }
        id v16 = *(id *)(v15 + 160);
        id v135 = v16;
        *(void *)&v141[0] = *((void *)v13 - 11) >> 1;
        re::RenderFrame::registerExternalTexture((uint64_t)a4, &v135, v141, &v136, 0);
        if (v16)
        {

          id v135 = 0;
        }
      }
      unsigned int v13 = (re::TextureAsset *)((char *)v13 + 160);
      v14 -= 160;
    }
    while (v14);
  }
  v134[0] = 0x51E0F8031ADFD2D4;
  v134[1] = (unint64_t)"RenderGraphFile";
  __sa = __s;
  uint64_t v120 = a3;
  unint64_t ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v134, __s, a3);
  uint64_t v121 = (char *)a4;
  if (!*((unsigned char *)a4 + 425))
  {
    if (*((unsigned char *)this + 704))
    {
      unint64_t v33 = a4;
      unint64_t v34 = re::Hash<re::DynamicString>::operator()((uint64_t)v141, (uint64_t)this + 368) - 0x61C8864680B583E9;
      uint64_t v35 = *((void *)this + 90);
      if (v35)
      {
        uint64_t v36 = *((void *)this + 91);
        uint64_t v37 = v36 + (v35 << 7);
        do
        {
          uint64_t v38 = *(void *)(v36 + 56);
          if (v38)
          {
            long long v39 = *(re::BindPoint **)(v36 + 72);
            long long v40 = (re::BindPoint *)((char *)v39 + 64 * v38);
            do
            {
              uint64_t v41 = re::BindPoint::valueUntyped(v39);
              int v42 = *(_DWORD *)(*(void *)v39 + 20);
              if (v42)
              {
                MurmurHash3_x64_128(v41, v42, 0, (unint64_t *)v141);
                unint64_t v43 = (*((void *)&v141[0] + 1)
                     - 0x61C8864680B583E9
                     + (*(void *)&v141[0] << 6)
                     + (*(void *)&v141[0] >> 2)) ^ *(void *)&v141[0];
              }
              else
              {
                unint64_t v43 = 0;
              }
              v34 ^= (v34 << 6)
                   - 0x61C8864680B583E9
                   + (v34 >> 2)
                   + (((v43 << 6) - 0x61C8864680B583E9 + (v43 >> 2) + (*((void *)v39 + 6) >> 1)) ^ v43);
              long long v39 = (re::BindPoint *)((char *)v39 + 64);
            }
            while (v39 != v40);
          }
          v36 += 128;
        }
        while (v36 != v37);
      }
      *((void *)this + 87) = v34;
      *((unsigned char *)this + 704) = 0;
    }
    else
    {
      unint64_t v34 = *((void *)this + 87);
      unint64_t v33 = a4;
    }
    size_t v44 = strlen(__s);
    if (v44)
    {
      MurmurHash3_x64_128((uint64_t)__s, v44, 0, (unint64_t *)v141);
      unint64_t v45 = (*((void *)&v141[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v141[0] << 6) + (*(void *)&v141[0] >> 2)) ^ *(void *)&v141[0];
    }
    else
    {
      unint64_t v45 = 0;
    }
    size_t v46 = strlen(v120);
    if (v46)
    {
      MurmurHash3_x64_128((uint64_t)v120, v46, 0, (unint64_t *)v141);
      uint64_t v47 = ((*((void *)&v141[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v141[0] << 6) + (*(void *)&v141[0] >> 2)) ^ *(void *)&v141[0])
          - 0x61C8864680B583E9;
    }
    else
    {
      uint64_t v47 = 0x9E3779B97F4A7C17;
    }
    ScopeHash ^= (ScopeHash << 6) - 0x61C8864680B583E9 + (ScopeHash >> 2) + v34;
    int64_t v128 = ((v45 >> 2) + (v45 << 6) + v47) ^ v45;
    uint64_t v48 = *((void *)this + 100);
    if (v48)
    {
      uint64_t v49 = *((void *)this + 102);
      uint64_t v50 = 136 * v48;
      do
      {
        re::RenderGraphFile::hashConnection((re::RenderGraphFile *)v141, this, (uint64_t)v33, (const re::RenderGraphDataStoreConnection *)v128, v49);
        if (LOBYTE(v141[0])) {
          ScopeHash ^= (ScopeHash << 6) - 0x61C8864680B583E9 + (ScopeHash >> 2) + *((void *)&v141[0] + 1);
        }
        v49 += 136;
        v50 -= 136;
      }
      while (v50);
    }
    uint64_t v51 = ((v128 << 6) - 0x61C8864680B583E9 + ((unint64_t)v128 >> 2) + *((void *)this + 50)) ^ v128;
    unint64_t v52 = (unint64_t)"N2re28RenderGraphNodeExecutionDataE";
    unint64_t v53 = (unint64_t)"N2re28RenderGraphNodeExecutionDataE";
    if (((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x8000000000000000) != 0)
    {
      int v54 = (unsigned __int8 *)((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v55 = 5381;
      do
      {
        unint64_t v53 = v55;
        unsigned int v56 = *v54++;
        uint64_t v55 = (33 * v55) ^ v56;
      }
      while (v56);
    }
    uint64_t v57 = v51 - 0x61C8864680B583E9;
    *(void *)&v141[0] = (v51 - 0x61C8864680B583E9 + (v53 << 6) + (v53 >> 2)) ^ v53;
    uint64_t v58 = (unint64_t *)((char *)v33 + 48);
    uint64_t v59 = (re *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v33 + 48, (uint64_t *)v141);
    if (!v59 || !*(void *)v59)
    {
      memset((char *)v141 + 8, 0, 32);
      *(void *)&v141[0] = &unk_26E6D4B10;
      *((void *)&v141[2] + 1) = 0x7FFFFFFF00000000;
      *(void *)&long long v142 = 0;
      if (((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x8000000000000000) != 0)
      {
        uint64_t v60 = (unsigned __int8 *)((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v61 = 5381;
        do
        {
          unint64_t v52 = v61;
          unsigned int v62 = *v60++;
          uint64_t v61 = (33 * v61) ^ v62;
        }
        while (v62);
      }
      char v63 = re::globalAllocators(v59);
      uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63[2] + 32))(v63[2], 56, 8);
      unint64_t v65 = (v57 + (v52 << 6) + (v52 >> 2)) ^ v52;
      *(void *)uint64_t v64 = &unk_26E6D4B10;
      *(_OWORD *)(v64 + 8) = 0u;
      *(_OWORD *)(v64 + 24) = 0u;
      *(_DWORD *)(v64 + 40) = 0;
      *(void *)(v64 + 44) = 0x7FFFFFFFLL;
      *(void *)(v64 + 8) = *((void *)&v141[0] + 1);
      *(void *)(v64 + 16) = *(void *)&v141[1];
      *((void *)&v141[0] + 1) = 0;
      *(void *)&v141[1] = 0;
      *(void *)(v64 + 24) = *((void *)&v141[1] + 1);
      *((void *)&v141[1] + 1) = 0;
      *(_OWORD *)(v64 + 32) = v141[2];
      v141[2] = xmmword_23436F740;
      unint64_t v66 = *v58;
      if (*v58)
      {
        unint64_t v66 = v65 % *((unsigned int *)v33 + 18);
        uint64_t v67 = *(unsigned int *)(*((void *)v33 + 7) + 4 * v66);
        if (v67 != 0x7FFFFFFF)
        {
          uint64_t v74 = *((void *)v33 + 8);
          if (*(void *)(v74 + 24 * v67 + 8) == v65)
          {
LABEL_74:
            uint64_t v73 = v74 + 24 * v67;
            goto LABEL_75;
          }
          while (1)
          {
            LODWORD(v67) = *(_DWORD *)(v74 + 24 * v67) & 0x7FFFFFFF;
            if (v67 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v74 + 24 * v67 + 8) == v65) {
              goto LABEL_74;
            }
          }
        }
      }
      uint64_t v68 = *((unsigned int *)v33 + 21);
      if (v68 == 0x7FFFFFFF)
      {
        uint64_t v68 = *((unsigned int *)v33 + 20);
        int v69 = v68;
        if (v68 == *((_DWORD *)v33 + 18))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v33 + 48, 2 * *((_DWORD *)v33 + 19));
          LODWORD(v66) = v65 % *((unsigned int *)v33 + 18);
          int v69 = *((_DWORD *)v33 + 20);
        }
        *((_DWORD *)v33 + 20) = v69 + 1;
        uint64_t v70 = *((void *)v33 + 8);
        int v71 = *(_DWORD *)(v70 + 24 * v68);
      }
      else
      {
        uint64_t v70 = *((void *)v33 + 8);
        int v71 = *(_DWORD *)(v70 + 24 * v68);
        *((_DWORD *)v33 + 21) = v71 & 0x7FFFFFFF;
      }
      uint64_t v72 = 24 * v68;
      *(_DWORD *)(v70 + v72) = v71 | 0x80000000;
      *(_DWORD *)(*((void *)v33 + 8) + v72) = *(_DWORD *)(*((void *)v33 + 8) + 24 * v68) & 0x80000000 | *(_DWORD *)(*((void *)v33 + 7) + 4 * v66);
      *(void *)(*((void *)v33 + 8) + 24 * v68 + 8) = v65;
      *(void *)(*((void *)v33 + 8) + 24 * v68 + 16) = v64;
      *(_DWORD *)(*((void *)v33 + 7) + 4 * v66) = v68;
      ++*((_DWORD *)v33 + 19);
      ++*((_DWORD *)v33 + 22);
      uint64_t v73 = *((void *)v33 + 8) + 24 * v68;
LABEL_75:
      uint64_t v75 = *(void *)(v73 + 16);
      *(void *)&v141[0] = &unk_26E6D4B10;
      re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v141 + 1);
      uint64_t v76 = *((void *)this + 105);
      if (v76)
      {
        uint64_t v77 = (re::RenderFrame *)((char *)v33 + 32);
        uint64_t v78 = (const re::RenderGraphDataStoreConnection *)*((void *)this + 107);
        uint64_t v117 = (const re::RenderGraphDataStoreConnection *)((char *)v78 + 136 * v76);
        uint64_t v118 = v75;
        uint64_t v79 = (uint64_t)v33 + 208;
        unint64_t v123 = (void *)(v75 + 8);
        while (1)
        {
          re::RenderGraphFile::hashConnection((re::RenderGraphFile *)v132, this, (uint64_t)v121, (const re::RenderGraphDataStoreConnection *)v128, (uint64_t)v78);
          if (v132[0])
          {
            MurmurHash3_x64_128((uint64_t)"Enabled", 7, 0, (unint64_t *)v141);
            if (*((void *)v78 + 2) == 1
              && ((uint64_t v80 = *((void *)v78 + 4), (*(unsigned char *)(v80 + 8) & 1) != 0)
                ? (unint64_t v81 = *(const char **)(v80 + 16))
                : (unint64_t v81 = (const char *)(v80 + 9)),
                  (long long v82 = v141[0], (v83 = strlen(v81)) == 0)
                ? (uint64_t v84 = 0)
                : (MurmurHash3_x64_128((uint64_t)v81, v83, 0, (unint64_t *)v141),
                   uint64_t v84 = (*((void *)&v141[0] + 1)
                        - 0x61C8864680B583E9
                        + (*(void *)&v141[0] << 6)
                        + (*(void *)&v141[0] >> 2)) ^ *(void *)&v141[0]),
                  v84 == ((*((void *)&v82 + 1)
                         - 0x61C8864680B583E9
                         + ((void)v82 << 6)
                         + ((unint64_t)v82 >> 2)) ^ (unint64_t)v82)))
            {
              ScopeHash ^= (ScopeHash << 6) - 0x61C8864680B583E9 + (ScopeHash >> 2) + v133;
            }
            else
            {
              uint64_t v85 = *((void *)this + 42);
              if (v85)
              {
                unint64_t v20 = *((void *)this + 44);
                unint64_t v122 = v20 + 56 * v85;
                while (1)
                {
                  uint64_t v86 = *(void *)(v20 + 32);
                  if (v86) {
                    break;
                  }
                  char v126 = 0;
LABEL_138:
                  if ((v126 & 1) == 0)
                  {
                    v20 += 56;
                    if (v20 != v122) {
                      continue;
                    }
                  }
                  goto LABEL_140;
                }
                char v126 = 0;
                unint64_t v18 = *(void *)(v20 + 48);
                unint64_t v87 = v18 + 136 * v86;
                while (2)
                {
                  if (*(void *)(v18 + 120) != *((void *)v78 + 15)) {
                    goto LABEL_135;
                  }
                  unint64_t v88 = *(unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 736, (void *)v20);
                  unint64_t v89 = *((void *)this + 17);
                  if (v89 <= v88)
                  {
                    v140[0] = 0;
                    long long v142 = 0u;
                    long long v143 = 0u;
                    memset(v141, 0, sizeof(v141));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v137 = 136315906;
                    *(void *)&v137[4] = "operator[]";
                    *(_WORD *)&v137[12] = 1024;
                    *(_DWORD *)&v137[14] = 797;
                    *(_WORD *)&v137[18] = 2048;
                    *(void *)&v137[20] = v88;
                    __int16 v138 = 2048;
                    *(void *)uint64_t v139 = v89;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_143;
                  }
                  re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *(void *)(*((void *)this + 19) + 16 * v88), (uint64_t)v130);
                  uint64_t v90 = (const re::IntrospectionBase *)(**v131)();
                  *(void *)&long long v142 = 0;
                  memset(v141, 0, sizeof(v141));
                  *(void *)uint64_t v137 = *((void *)v78 + 14);
                  double v91 = (re::RenderGraphData **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v79, (uint64_t *)v137);
                  unint64_t v92 = v91;
                  if (v91) {
                    uint64_t v127 = *v91;
                  }
                  uint64_t v93 = re::RenderGraphDataStore::tryGetByTypeNameHash(v77, v128, *((void *)v78 + 14));
                  if (v92)
                  {
                    uint64_t v95 = v93;
                    if (v93)
                    {
                      uint64_t CachedConnection = re::RenderGraphFile::getCachedConnection(this, v90, v78, v127, v94);
                      uint64_t v97 = CachedConnection;
                      if (CachedConnection)
                      {
                        if (*(unsigned char *)(CachedConnection + 56))
                        {
                          v140[0] = 0;
                          v140[0] = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v95 + 16))(v95);
                          uint64_t v129 = v127;
                          BOOL v98 = re::scanForCopy(v97 + 8, (uint64_t *)v140, &v129);
                          if (v98)
                          {
                            uint64_t v99 = *((int *)v129 + 5);
                            id v100 = *(const re::IntrospectionBase ***)&v141[1];
                            *(void *)&v137[8] = 0;
                            *(void *)&v137[16] = 0;
                            break;
                          }
                        }
                      }
LABEL_109:
                      int v105 = 1;
LABEL_127:
                      if (*((void *)&v141[1] + 1))
                      {
                        if (*(void *)&v141[2])
                        {
                          (*(void (**)(void))(**((void **)&v141[1] + 1) + 40))();
                          v141[2] = 0uLL;
                        }
                        *((void *)&v141[1] + 1) = 0;
                      }
                      if (*(void *)&v141[0] && *((void *)&v141[0] + 1)) {
                        (*(void (**)(void))(**(void **)&v141[0] + 40))();
                      }
                      if (!v105) {
                        goto LABEL_138;
                      }
LABEL_135:
                      v18 += 136;
                      if (v18 == v87) {
                        goto LABEL_138;
                      }
                      continue;
                    }
                  }
                  break;
                }
                *(void *)uint64_t v137 = *((void *)v78 + 14);
                long long v102 = (re::RenderGraphData **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v79, (uint64_t *)v137);
                unsigned int v103 = v102;
                if (v102) {
                  uint64_t v125 = *v102;
                }
                uint64_t v104 = re::RenderGraphDataStore::tryGetByTypeNameHash(v77, v128, *((void *)v78 + 14));
                int v105 = 0;
                if (v103 && v104)
                {
                  uint64_t v106 = re::RenderGraphFile::getCachedConnection(this, v90, v78, v125, v17);
                  if (!v106 || !*(unsigned char *)(v106 + 56)) {
                    goto LABEL_109;
                  }
                  re::FixedArray<unsigned int>::operator=((uint64_t *)&v141[1] + 1, v106 + 32);
                  *(void *)&long long v142 = v90;
                  size_t v107 = strlen(*(const char **)(v20 + 8));
                  if (v107)
                  {
                    MurmurHash3_x64_128(*(void *)(v20 + 8), v107, 0, (unint64_t *)v137);
                    uint64_t v108 = (char *)((*(void *)&v137[8]
                                   - 0x61C8864680B583E9
                                   + (*(void *)v137 << 6)
                                   + (*(void *)v137 >> 2)) ^ *(void *)v137);
                  }
                  else
                  {
                    uint64_t v108 = 0;
                  }
                  v140[0] = v108;
                  int v109 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v123, (uint64_t *)v140);
                  if (v109)
                  {
                    re::DynamicArray<re::NodePatchData>::add(v109, v141);
                    goto LABEL_125;
                  }
                  *(void *)&v139[2] = 0;
                  memset(v137, 0, sizeof(v137));
                  re::DynamicArray<re::NodePatchData>::add((_anonymous_namespace_ *)v137, v141);
                  size_t v110 = strlen(*(const char **)(v20 + 8));
                  if (v110)
                  {
                    MurmurHash3_x64_128(*(void *)(v20 + 8), v110, 0, (unint64_t *)v140);
                    unint64_t v111 = (uint64_t)&v140[1][64 * (uint64_t)v140[0]
                                           - 0x61C8864680B583E9
                                           + ((unint64_t)v140[0] >> 2)] ^ (uint64_t)v140[0];
                  }
                  else
                  {
                    unint64_t v111 = 0;
                  }
                  uint64_t v129 = (re::IntrospectionBase *)v111;
                  unint64_t v112 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v111 ^ (v111 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v111 ^ (v111 >> 30))) >> 27));
                  unint64_t v113 = v112 ^ (v112 >> 31);
                  if (*v123)
                  {
                    unint64_t v114 = v113 % *(unsigned int *)(v118 + 32);
                    uint64_t v115 = *(unsigned int *)(*(void *)(v118 + 16) + 4 * v114);
                    if (v115 != 0x7FFFFFFF)
                    {
                      uint64_t v116 = *(void *)(v118 + 24);
                      while (*(void *)(v116 + (v115 << 6) + 16) != v111)
                      {
                        uint64_t v115 = *(_DWORD *)(v116 + (v115 << 6) + 8) & 0x7FFFFFFF;
                        if (v115 == 0x7FFFFFFF) {
                          goto LABEL_123;
                        }
                      }
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    LODWORD(v114) = 0;
                  }
LABEL_123:
                  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v123, v114, v113, &v129, (uint64_t)v137);
                  ++*(_DWORD *)(v118 + 48);
LABEL_124:
                  re::DynamicArray<re::NodePatchData>::deinit((uint64_t)v137);
LABEL_125:
                  int v105 = 0;
                }
                char v126 = 1;
                goto LABEL_127;
              }
            }
          }
LABEL_140:
          uint64_t v78 = (const re::RenderGraphDataStoreConnection *)((char *)v78 + 136);
          if (v78 == v117) {
            break;
          }
        }
      }
    }
  }
  if (*((void *)this + 17))
  {
    unint64_t v18 = 0;
    unsigned int v19 = 1;
    while (1)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793B8, memory_order_acquire) & 1) == 0)
      {
        __int16 v30 = (re *)__cxa_guard_acquire(&qword_26AF793B8);
        if (v30)
        {
          qword_26AF793B0 = re::hashString(v30, v31);
          __cxa_guard_release(&qword_26AF793B8);
        }
      }
      unint64_t v20 = *((void *)this + 17);
      if (v20 <= v18) {
        break;
      }
      uint64_t v21 = *((void *)this + 19);
      if (*(void *)(v21 + 16 * v18) == qword_26AF793B0)
      {
        uint64_t v22 = *(void *)(v21 + 16 * v18 + 8);
        uint64_t v23 = *(void *)(v22 + 264);
        uint64_t v24 = *(_anonymous_namespace_ **)(v22 + 272);
        int v25 = (_anonymous_namespace_ *)(v22 + 265);
        if (v23) {
          long long v26 = v24;
        }
        else {
          long long v26 = v25;
        }
        unint64_t v28 = 0xBF58476D1CE4E5B9;
        if (!SourceTable) {
          unint64_t v28 = 0;
        }
        ScopeHash ^= (ScopeHash << 6)
                   - 0x61C8864680B583E9
                   + (ScopeHash >> 2)
                   + ((((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31))
                     + 0x227C153807781E51) ^ 0x7D937EEF0B15A0E8);
        unint64_t v20 = *((void *)this + 17);
      }
      unint64_t v18 = v19;
      if (v20 <= v19++) {
        return ScopeHash;
      }
    }
LABEL_143:
    v140[0] = 0;
    long long v142 = 0u;
    long long v143 = 0u;
    memset(v141, 0, sizeof(v141));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v137 = 136315906;
    *(void *)&v137[4] = "operator[]";
    *(_WORD *)&v137[12] = 1024;
    *(_DWORD *)&v137[14] = 797;
    *(_WORD *)&v137[18] = 2048;
    *(void *)&v137[20] = v18;
    __int16 v138 = 2048;
    *(void *)uint64_t v139 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_144:
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  return ScopeHash;
}

void sub_2334AE998(_Unwind_Exception *a1)
{
}

unint64_t re::RenderGraphProviderBase::generateScopeHash(unint64_t *a1, char *__s, const char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v5 = *a1;
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, &v11);
    unint64_t v7 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    unint64_t v7 = 0;
  }
  size_t v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, &v11);
    unint64_t v9 = ((v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v9 = 0x9E3779B97F4A7C17;
  }
  return ((v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + (((v7 >> 2) + (v7 << 6) + v9) ^ v7)) ^ v5;
}

void re::RenderGraphNodeExecutionData::~RenderGraphNodeExecutionData(re::RenderGraphNodeExecutionData *this)
{
  *(void *)this = &unk_26E6D4B10;
  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D4B10;
  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

_anonymous_namespace_ *re::DynamicArray<re::NodePatchData>::add(_anonymous_namespace_ *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::NodePatchData>::setCapacity(result, v10);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::NodePatchData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  unint64_t v11 = (void *)(*((void *)v3 + 4) + 56 * v5);
  void *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  uint64_t v12 = a2[1];
  void *v11 = *a2;
  v11[1] = v12;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v13 = v11[2];
  v11[2] = a2[2];
  a2[2] = v13;
  v11[3] = 0;
  v11[4] = 0;
  v11[5] = 0;
  uint64_t v14 = a2[4];
  v11[3] = a2[3];
  v11[4] = v14;
  a2[3] = 0;
  a2[4] = 0;
  uint64_t v15 = v11[5];
  v11[5] = a2[5];
  a2[5] = v15;
  v11[6] = a2[6];
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::RenderGraphFile::provide(re::RenderGraphFile *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v7 = this;
  uint64_t v234 = *MEMORY[0x263EF8340];
  RenderGraph = (_anonymous_namespace_ *)re::RenderFrame::makeRenderGraph(a4, a3, *((void *)this + 17));
  if (a3)
  {
    uint64_t v8 = *a3;
    if (*a3)
    {
      char v9 = a3[1];
      if (v9)
      {
        unint64_t v10 = a3 + 2;
        do
        {
          uint64_t v8 = 31 * v8 + v9;
          int v11 = *(unsigned __int8 *)v10++;
          char v9 = v11;
        }
        while (v11);
      }
      v8 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 0x9E3779B97F4A7C17;
  uint64_t v217 = v8;
  size_t v13 = strlen(a2);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a2, v13, 0, (unint64_t *)&v229);
    unint64_t v14 = (*((void *)&v229 + 1) - 0x61C8864680B583E9 + ((void)v229 << 6) + ((unint64_t)v229 >> 2)) ^ v229;
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t v15 = strlen(a3);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)a3, v15, 0, (unint64_t *)&v229);
    uint64_t v12 = ((*((void *)&v229 + 1) - 0x61C8864680B583E9 + ((void)v229 << 6) + ((unint64_t)v229 >> 2)) ^ v229)
        - 0x61C8864680B583E9;
  }
  __int16 v195 = (void *)((char *)v7 + 532);
  CMTime v196 = (unint64_t *)((char *)v7 + 504);
  if (*((_DWORD *)v7 + 133))
  {
    uint64_t v16 = *((unsigned int *)v7 + 132);
    if (v16) {
      memset_pattern16(*((void **)v7 + 64), &memset_pattern_256, 4 * v16);
    }
    uint64_t v17 = *((unsigned int *)v7 + 134);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 24 * v17;
      do
      {
        uint64_t v20 = *((void *)v7 + 65);
        int v21 = *(_DWORD *)(v20 + v18);
        if (v21 < 0) {
          *(_DWORD *)(v20 + v18) = v21 & 0x7FFFFFFF;
        }
        v18 += 24;
      }
      while (v19 != v18);
    }
    *((_DWORD *)v7 + 135) = 0x7FFFFFFF;
    *__int16 v195 = 0;
    ++*((_DWORD *)v7 + 136);
  }
  re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v196, *((_DWORD *)v7 + 34));
  uint64_t v201 = (unint64_t *)((char *)v7 + 552);
  if (*((_DWORD *)v7 + 145))
  {
    uint64_t v22 = *((unsigned int *)v7 + 144);
    if (v22) {
      memset_pattern16(*((void **)v7 + 70), &memset_pattern_256, 4 * v22);
    }
    uint64_t v23 = *((unsigned int *)v7 + 146);
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 32 * v23;
      do
      {
        uint64_t v26 = *((void *)v7 + 71);
        int v27 = *(_DWORD *)(v26 + v24);
        if (v27 < 0) {
          *(_DWORD *)(v26 + v24) = v27 & 0x7FFFFFFF;
        }
        v24 += 32;
      }
      while (v25 != v24);
    }
    *((_DWORD *)v7 + 147) = 0x7FFFFFFF;
    *(void *)((char *)v7 + 580) = 0;
    ++*((_DWORD *)v7 + 148);
  }
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v201, *((_DWORD *)v7 + 14));
  uint64_t v200 = (unint64_t *)((char *)v7 + 600);
  if (*((_DWORD *)v7 + 157))
  {
    uint64_t v28 = *((unsigned int *)v7 + 156);
    if (v28) {
      memset_pattern16(*((void **)v7 + 76), &memset_pattern_256, 4 * v28);
    }
    uint64_t v29 = *((unsigned int *)v7 + 158);
    if (v29)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 32 * v29;
      do
      {
        uint64_t v32 = *((void *)v7 + 77);
        int v33 = *(_DWORD *)(v32 + v30);
        if (v33 < 0) {
          *(_DWORD *)(v32 + v30) = v33 & 0x7FFFFFFF;
        }
        v30 += 32;
      }
      while (v31 != v30);
    }
    *((_DWORD *)v7 + 159) = 0x7FFFFFFF;
    *(void *)((char *)v7 + 628) = 0;
    ++*((_DWORD *)v7 + 160);
  }
  re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v200, *((_DWORD *)v7 + 24));
  if (*((_DWORD *)v7 + 169))
  {
    uint64_t v34 = *((unsigned int *)v7 + 168);
    if (v34) {
      memset_pattern16(*((void **)v7 + 82), &memset_pattern_256, 4 * v34);
    }
    uint64_t v35 = *((unsigned int *)v7 + 170);
    if (v35)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 24 * v35;
      do
      {
        uint64_t v38 = *((void *)v7 + 83);
        int v39 = *(_DWORD *)(v38 + v36);
        if (v39 < 0) {
          *(_DWORD *)(v38 + v36) = v39 & 0x7FFFFFFF;
        }
        v36 += 24;
      }
      while (v37 != v36);
    }
    *((_DWORD *)v7 + 171) = 0x7FFFFFFF;
    *(void *)((char *)v7 + 676) = 0;
    ++*((_DWORD *)v7 + 172);
  }
  re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v7 + 648, *((_DWORD *)v7 + 44));
  uint64_t v40 = *((void *)v7 + 22);
  if (v40)
  {
    uint64_t v41 = *((void *)v7 + 24);
    uint64_t v42 = v41 + 56 * v40;
    do
    {
      unint64_t v43 = *(void *)(v41 + 16) >> 1;
      *(void *)&unsigned long long v229 = v43;
      *(void *)&long long v211 = v41;
      if (*((void *)v7 + 81))
      {
        unint64_t v44 = v43 % *((unsigned int *)v7 + 168);
        uint64_t v45 = *(unsigned int *)(*((void *)v7 + 82) + 4 * v44);
        if (v45 != 0x7FFFFFFF)
        {
          uint64_t v46 = *((void *)v7 + 83);
          while (*(void *)(v46 + 24 * v45 + 8) != v43)
          {
            LODWORD(v45) = *(_DWORD *)(v46 + 24 * v45) & 0x7FFFFFFF;
            if (v45 == 0x7FFFFFFF) {
              goto LABEL_58;
            }
          }
          goto LABEL_59;
        }
      }
      else
      {
        LODWORD(v44) = 0;
      }
LABEL_58:
      re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove((uint64_t)v7 + 648, v44, v43, &v229, &v211);
      ++*((_DWORD *)v7 + 172);
LABEL_59:
      v41 += 56;
    }
    while (v41 != v42);
  }
  int v202 = a4;
  uint64_t v198 = ((v14 >> 2) + (v14 << 6) + v12) ^ v14;
  uint64_t v199 = a3;
  uint64_t v47 = *((void *)v7 + 7);
  if (v47)
  {
    uint64_t v48 = *((void *)v7 + 9);
    uint64_t v197 = v48 + 160 * v47;
    uint64_t v193 = (re::RenderFrame *)((char *)a4 + 3448);
    do
    {
      long long v49 = *(_OWORD *)(v48 + 48);
      long long v212 = *(_OWORD *)(v48 + 32);
      long long v213 = v49;
      long long v214 = *(_OWORD *)(v48 + 64);
      uint64_t v215 = *(void *)(v48 + 80);
      long long v211 = *(_OWORD *)(v48 + 16);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v216, (const re::AssetHandle *)(v48 + 88));
      v216[24] = *(unsigned char *)(v48 + 112);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79528, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF79528))
      {
        qword_26AF79520 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphTargetDescriptionData", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTargetDescriptionData, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTargetDescriptionData, (void (*)(re::IntrospectionBase *))&qword_26AF79490, 0);
        __cxa_guard_release(&qword_26AF79528);
      }
      re::RenderGraphFile::connectionWalker((uint64_t)v7, (uint64_t)v202, v198, (const re::IntrospectionBase *)qword_26AF79520, (const re::IntrospectionBase **)&v211, v48 + 120);
      uint64_t v50 = re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v7 + 648, *(void *)v48 >> 1);
      if (!v50
        || ((uint64_t v51 = v50, **(unsigned char **)(*(void *)v50 + 48))
          ? (unint64_t v52 = *(const char **)(*(void *)v50 + 48))
          : (unint64_t v52 = a3),
            (re::RenderFrame::tryGetInputTarget(v202, *(const char **)(*(void *)v50 + 8), v52, (double *)v224),
             uint64_t v53 = *(void *)v224,
             int v54 = *(_DWORD *)&v224[8],
             int v55 = *(_DWORD *)&v224[12],
             !*(unsigned char *)(*(void *)v51 + 32))
         && (*(_DWORD *)&v224[8] == -1 || *(_DWORD *)&v224[12] == -1)))
      {
        int v56 = DWORD1(v230);
        if ((DWORD1(v230) - 2) > 0xFFFFFFFC)
        {
          re::RenderFrame::createTarget(v202, (const re::RenderGraphTargetDescription *)&v229, *(const char **)(v48 + 8), v224);
          uint64_t v53 = *(void *)v224;
          int v54 = *(_DWORD *)&v224[8];
          int v55 = *(_DWORD *)&v224[12];
        }
        else
        {
          DWORD1(v230) = 1;
          re::RenderFrame::createTarget(v202, (const re::RenderGraphTargetDescription *)&v229, *(const char **)(v48 + 8), v224);
          uint64_t v53 = *(void *)v224;
          int v54 = *(_DWORD *)&v224[8];
          int v55 = *(_DWORD *)&v224[12];
          DWORD1(v230) = v56;
          re::InlineString<64ul>::format((uint64_t)v224, *(void *)(v48 + 8));
          re::RenderFrame::createTarget(v202, (const re::RenderGraphTargetDescription *)&v229, &v224[8], &v221);
          uint64_t v208 = v53;
          int v209 = v54;
          int v210 = v55;
          int v57 = v222;
          *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription(v193, &v208) + 80) = v57;
        }
      }
      unint64_t v58 = *(void *)v48 >> 1;
      unint64_t v59 = *v201;
      if (!*v201
        || (unint64_t v59 = v58 % *((unsigned int *)v7 + 144),
            uint64_t v60 = *(unsigned int *)(*((void *)v7 + 70) + 4 * v59),
            v60 == 0x7FFFFFFF))
      {
LABEL_78:
        uint64_t v62 = *((unsigned int *)v7 + 147);
        if (v62 == 0x7FFFFFFF)
        {
          uint64_t v62 = *((unsigned int *)v7 + 146);
          int v63 = v62;
          if (v62 == *((_DWORD *)v7 + 144))
          {
            re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v201, 2 * *((_DWORD *)v7 + 145));
            unint64_t v59 = v58 % *((unsigned int *)v7 + 144);
            int v63 = *((_DWORD *)v7 + 146);
          }
          *((_DWORD *)v7 + 146) = v63 + 1;
          uint64_t v64 = *((void *)v7 + 71);
          int v65 = *(_DWORD *)(v64 + 32 * v62);
        }
        else
        {
          uint64_t v64 = *((void *)v7 + 71);
          int v65 = *(_DWORD *)(v64 + 32 * v62);
          *((_DWORD *)v7 + 147) = v65 & 0x7FFFFFFF;
        }
        uint64_t v66 = 32 * v62;
        *(_DWORD *)(v64 + v66) = v65 | 0x80000000;
        uint64_t v67 = *((void *)v7 + 70);
        *(_DWORD *)(*((void *)v7 + 71) + v66) = *(_DWORD *)(*((void *)v7 + 71) + 32 * v62) & 0x80000000 | *(_DWORD *)(v67 + 4 * v59);
        *(void *)(*((void *)v7 + 71) + 32 * v62 + 8) = v58;
        uint64_t v68 = *((void *)v7 + 71) + 32 * v62;
        *(void *)(v68 + 16) = v53;
        *(_DWORD *)(v68 + 24) = v54;
        *(_DWORD *)(v68 + 28) = v55;
        *(_DWORD *)(v67 + 4 * v59) = v62;
        ++*((_DWORD *)v7 + 145);
        ++*((_DWORD *)v7 + 148);
      }
      else
      {
        uint64_t v61 = *((void *)v7 + 71);
        while (*(void *)(v61 + 32 * v60 + 8) != v58)
        {
          uint64_t v60 = *(_DWORD *)(v61 + 32 * v60) & 0x7FFFFFFF;
          if (v60 == 0x7FFFFFFF) {
            goto LABEL_78;
          }
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v216);
      v48 += 160;
    }
    while (v48 != v197);
  }
  uint64_t v69 = *((void *)v7 + 12);
  if (v69)
  {
    uint64_t v70 = *((void *)v7 + 14);
    uint64_t v71 = v70 + 88 * v69;
    do
    {
      long long v72 = *(_OWORD *)(v70 + 32);
      long long v211 = *(_OWORD *)(v70 + 16);
      long long v212 = v72;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79538, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF79538))
      {
        qword_26AF79530 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphBufferDescriptionData", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphBufferDescriptionData, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphBufferDescriptionData, (void (*)(re::IntrospectionBase *))&qword_26AF793D0, 0);
        __cxa_guard_release(&qword_26AF79538);
      }
      re::RenderGraphFile::connectionWalker((uint64_t)v7, (uint64_t)v202, v198, (const re::IntrospectionBase *)qword_26AF79530, (const re::IntrospectionBase **)&v211, v70 + 48);
      uint64_t v73 = re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v7 + 648, *(void *)v70 >> 1);
      if (!v73
        || ((uint64_t v74 = v73, **(unsigned char **)(*(void *)v73 + 48))
          ? (uint64_t v75 = *(const char **)(*(void *)v73 + 48))
          : (uint64_t v75 = v199),
            (re::RenderFrame::tryGetInputBuffer(v202, *(const char **)(*(void *)v73 + 8), v75, (double *)v224),
             uint64_t v76 = *(void *)v224,
             int v77 = *(_DWORD *)&v224[8],
             int v78 = *(_DWORD *)&v224[12],
             !*(unsigned char *)(*(void *)v74 + 32))
         && (*(_DWORD *)&v224[8] == -1 || *(_DWORD *)&v224[12] == -1)))
      {
        re::RenderFrame::createBuffer(v202, (const re::RenderGraphBufferDescription *)&v229, *(const char **)(v70 + 8), v224);
        uint64_t v76 = *(void *)v224;
        int v77 = *(_DWORD *)&v224[8];
        int v78 = *(_DWORD *)&v224[12];
      }
      unint64_t v79 = *(void *)v70 >> 1;
      unint64_t v80 = *v200;
      if (!*v200
        || (unint64_t v80 = v79 % *((unsigned int *)v7 + 156),
            uint64_t v81 = *(unsigned int *)(*((void *)v7 + 76) + 4 * v80),
            v81 == 0x7FFFFFFF))
      {
LABEL_104:
        uint64_t v83 = *((unsigned int *)v7 + 159);
        if (v83 == 0x7FFFFFFF)
        {
          uint64_t v83 = *((unsigned int *)v7 + 158);
          int v84 = v83;
          if (v83 == *((_DWORD *)v7 + 156))
          {
            re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v200, 2 * *((_DWORD *)v7 + 157));
            unint64_t v80 = v79 % *((unsigned int *)v7 + 156);
            int v84 = *((_DWORD *)v7 + 158);
          }
          *((_DWORD *)v7 + 158) = v84 + 1;
          uint64_t v85 = *((void *)v7 + 77);
          int v86 = *(_DWORD *)(v85 + 32 * v83);
        }
        else
        {
          uint64_t v85 = *((void *)v7 + 77);
          int v86 = *(_DWORD *)(v85 + 32 * v83);
          *((_DWORD *)v7 + 159) = v86 & 0x7FFFFFFF;
        }
        uint64_t v87 = 32 * v83;
        *(_DWORD *)(v85 + v87) = v86 | 0x80000000;
        uint64_t v88 = *((void *)v7 + 76);
        *(_DWORD *)(*((void *)v7 + 77) + v87) = *(_DWORD *)(*((void *)v7 + 77) + 32 * v83) & 0x80000000 | *(_DWORD *)(v88 + 4 * v80);
        *(void *)(*((void *)v7 + 77) + 32 * v83 + 8) = v79;
        uint64_t v89 = *((void *)v7 + 77) + 32 * v83;
        *(void *)(v89 + 16) = v76;
        *(_DWORD *)(v89 + 24) = v77;
        *(_DWORD *)(v89 + 28) = v78;
        *(_DWORD *)(v88 + 4 * v80) = v83;
        ++*((_DWORD *)v7 + 157);
        ++*((_DWORD *)v7 + 160);
      }
      else
      {
        uint64_t v82 = *((void *)v7 + 77);
        while (*(void *)(v82 + 32 * v81 + 8) != v79)
        {
          uint64_t v81 = *(_DWORD *)(v82 + 32 * v81) & 0x7FFFFFFF;
          if (v81 == 0x7FFFFFFF) {
            goto LABEL_104;
          }
        }
      }
      v70 += 88;
    }
    while (v70 != v71);
  }
  uint64_t v90 = &qword_26AF79540;
  uint64_t v91 = (uint64_t)v202;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79548, memory_order_acquire) & 1) == 0) {
    goto LABEL_265;
  }
LABEL_115:
  uint64_t v92 = *v90;
  if ((atomic_load_explicit((atomic_uchar *volatile)v90 + 24, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79558))
  {
    qword_26AF79550 = (uint64_t)re::introspect_RenderGraphBufferHandle(0, v191);
    __cxa_guard_release(&qword_26AF79558);
    uint64_t v91 = (uint64_t)v202;
  }
  uint64_t v93 = qword_26AF79550;
  uint64_t v94 = operator new(0x28uLL);
  *uint64_t v94 = &unk_26E6D4BD0;
  v94[1] = v92;
  v94[2] = v93;
  v94[3] = v7;
  v94[4] = v91;
  uint64_t v223 = v94;
  LODWORD(v213) = 0;
  long long v211 = 0u;
  long long v212 = 0u;
  *(void *)((char *)&v213 + 4) = 0x7FFFFFFFLL;
  uint64_t v95 = *((void *)v7 + 42);
  if (v95)
  {
    uint64_t v96 = *((void *)v7 + 44);
    uint64_t v97 = v96 + 56 * v95;
    do
    {
      BOOL v98 = *(char **)(v96 + 8);
      if (v98)
      {
        uint64_t v99 = *v98;
        if (*v98)
        {
          char v100 = v98[1];
          if (v100)
          {
            long long v101 = (unsigned __int8 *)(v98 + 2);
            do
            {
              uint64_t v99 = 31 * v99 + v100;
              int v102 = *v101++;
              char v100 = v102;
            }
            while (v102);
          }
        }
      }
      else
      {
        uint64_t v99 = 0;
      }
      uint64_t v103 = 2 * v99;
      *(void *)&unsigned long long v229 = 2 * v99;
      *((void *)&v229 + 1) = v98;
      *(void *)int v224 = v96;
      unint64_t v104 = 0xBF58476D1CE4E5B9 * (v99 & 0x7FFFFFFFFFFFFFFFLL ^ ((unint64_t)(2 * v99) >> 31));
      unint64_t v105 = (0x94D049BB133111EBLL * (v104 ^ (v104 >> 27))) ^ ((0x94D049BB133111EBLL * (v104 ^ (v104 >> 27))) >> 31);
      if ((void)v211)
      {
        unint64_t v106 = v105 % DWORD2(v212);
        uint64_t v107 = *(unsigned int *)(*((void *)&v211 + 1) + 4 * v106);
        if (v107 != 0x7FFFFFFF)
        {
          uint64_t v108 = v212;
          do
          {
            uint64_t v109 = v108 + 32 * v107;
            if ((*(void *)(v109 + 8) ^ (unint64_t)v103) <= 1)
            {
              size_t v110 = *(const char **)(v109 + 16);
              if (v110 == v98 || !strcmp(v110, v98)) {
                goto LABEL_135;
              }
            }
            uint64_t v107 = *(_DWORD *)(v108 + 32 * v107) & 0x7FFFFFFF;
          }
          while (v107 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v106) = 0;
      }
      re::HashTable<re::StringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove((uint64_t)&v211, v106, v105, (const StringID *)&v229, v224);
      ++DWORD2(v213);
LABEL_135:
      re::StringID::destroyString((re::StringID *)&v229);
      v96 += 56;
      uint64_t v91 = (uint64_t)v202;
    }
    while (v96 != v97);
  }
  v207[1] = 0;
  v207[2] = 0;
  v207[0] = re::PassthroughAssetSerialization::instance(void)::instance;
  if (*((void *)v7 + 17))
  {
    unint64_t v111 = 0;
    unsigned int v112 = 0;
    do
    {
      unint64_t v113 = (uint64_t *)(*((void *)v7 + 19) + 16 * (void)v111);
      re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *v113, (uint64_t)&v205);
      if ((_BYTE)v205)
      {
        unint64_t v114 = (re *)(**v206)(v206);
        uint64_t v115 = v114;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79568, memory_order_acquire) & 1) == 0)
        {
          unint64_t v114 = (re *)__cxa_guard_acquire(&qword_26AF79568);
          if (v114)
          {
            qword_26AF79560 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphNodeDataPointer", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphNodeDataPointer, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphNodeDataPointer, (void (*)(re::IntrospectionBase *))&qword_26AF794C0, 0);
            __cxa_guard_release(&qword_26AF79568);
          }
        }
        uint64_t v91 = qword_26AF79560;
        uint64_t v203 = 0;
        uint64_t v204 = 0;
        uint64_t v116 = (uint64_t *)*((void *)v7 + 17);
        if (v116 <= (uint64_t *)v111) {
          goto LABEL_263;
        }
        uint64_t v203 = *(const re::IntrospectionBase **)(*((void *)v7 + 19) + 16 * (void)v111);
        *(void *)&unsigned long long v229 = re::globalAllocators(v114)[2];
        *((void *)&v229 + 1) = 0;
        *(void *)&long long v230 = v207;
        *(void *)&unsigned long long v229 = v204;
        re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v229);
        uint64_t v117 = v204;
        *((void *)v204 + 3) = *((void *)RenderGraph + 10);
        *((void *)v117 + 4) = *((void *)RenderGraph + 12);
        *((void *)v117 + 6) = *((void *)RenderGraph + 13);
        uint64_t v118 = (char *)v7 + 377;
        if (*((unsigned char *)v7 + 376)) {
          uint64_t v118 = (char *)*((void *)v7 + 48);
        }
        *((void *)v117 + 5) = v118;
        *((void *)v117 + 7) = *((void *)v7 + 50);
        re::IntrospectionWalker::walk((uint64_t)v115, (const re::IntrospectionBase **)v117, (uint64_t)&v221);
        uint64_t v119 = (char *)*((void *)v204 + 2);
        if (v119)
        {
          uint64_t v120 = *v119;
          if (*v119)
          {
            char v121 = v119[1];
            if (v121)
            {
              unint64_t v122 = (unsigned __int8 *)(v119 + 2);
              do
              {
                uint64_t v120 = 31 * v120 + v121;
                int v123 = *v122++;
                char v121 = v123;
              }
              while (v123);
            }
          }
        }
        else
        {
          uint64_t v120 = 0;
        }
        unint64_t v125 = 2 * v120;
        *(void *)&unsigned long long v229 = 2 * v120;
        *((void *)&v229 + 1) = v119;
        if (!(void)v211
          || (unint64_t v126 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v120 & 0x7FFFFFFFFFFFFFFFLL ^ (v125 >> 31))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * (v120 & 0x7FFFFFFFFFFFFFFFLL ^ (v125 >> 31))) >> 27)),
              uint64_t v127 = *(unsigned int *)(*((void *)&v211 + 1) + 4 * ((v126 ^ (v126 >> 31)) % DWORD2(v212))),
              v127 == 0x7FFFFFFF))
        {
LABEL_162:
          re::StringID::destroyString((re::StringID *)&v229);
          uint64_t v91 = (uint64_t)v202;
        }
        else
        {
          uint64_t v128 = v212;
          while (1)
          {
            uint64_t v129 = v128 + 32 * v127;
            if ((*(void *)(v129 + 8) ^ v125) <= 1)
            {
              uint64_t v130 = *(const char **)(v129 + 16);
              if (v130 == v119 || !strcmp(v130, v119)) {
                break;
              }
            }
            uint64_t v127 = *(_DWORD *)(v128 + 32 * v127) & 0x7FFFFFFF;
            if (v127 == 0x7FFFFFFF) {
              goto LABEL_162;
            }
          }
          re::StringID::destroyString((re::StringID *)&v229);
          uint64_t v91 = (uint64_t)v202;
          re::RenderGraphFile::connectionWalker((uint64_t)v7, (uint64_t)v202, v198, v115, (const re::IntrospectionBase **)v204, *(void *)(v128 + 32 * v127 + 24) + 16);
        }
        uint64_t v116 = (uint64_t *)*((void *)v7 + 90);
        if (v116 <= (uint64_t *)v111) {
          goto LABEL_264;
        }
        int v131 = v204;
        uint64_t v132 = *((void *)v7 + 91) + ((void)v111 << 7);
        if (*(void *)(v132 + 56))
        {
          re::makeBindNode(v115, v204, (uint64_t)v224);
          uint64_t v133 = *(void *)(v132 + 56);
          if (v133)
          {
            uint64_t v134 = *(const char ***)(v132 + 72);
            unint64_t v111 = &v134[8 * v133];
            while (1)
            {
              uint64_t v135 = (uint64_t)*v134;
              size_t v136 = strlen(v134[7]);
              int v218 = (uint64_t *)v134[7];
              size_t v219 = v136;
              re::BindNode::bindPoint((re::BindNode **)v224, v135, (uint64_t *)&v218, (uint64_t)&v229);
              uint64_t v137 = (const re::IntrospectionBase **)re::BindPoint::valueUntyped((re::BindPoint *)&v229);
              uint64_t v91 = re::BindPoint::valueUntyped((re::BindPoint *)v134);
              size_t v219 = 0;
              uint64_t v220 = 0;
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v229 + 8);
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v229 + 8);
              v134 += 8;
              if (v134 == v111) {
                goto LABEL_169;
              }
            }
            re::internal::assertLog((re::internal *)4, v138, "assertion failure: '%s' (%s:line %i) Failed to perform introspection deep copy when applying RenderGraphFile runtime settings.", "copyResult", "applyRuntimeNodeSetting", 733);
            _os_crash();
            __break(1u);
LABEL_263:
            int v218 = 0;
            long long v232 = 0u;
            long long v233 = 0u;
            long long v230 = 0u;
            long long v231 = 0u;
            unsigned long long v229 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int v224 = 136315906;
            *(void *)&v224[4] = "operator[]";
            *(_WORD *)&v224[12] = 1024;
            *(_DWORD *)&v224[14] = 797;
            __int16 v225 = 2048;
            __int16 v226 = v111;
            __int16 v227 = 2048;
            __int16 v228 = v116;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_264:
            int v218 = 0;
            uint64_t v90 = (uint64_t *)v224;
            long long v232 = 0u;
            long long v233 = 0u;
            long long v230 = 0u;
            long long v231 = 0u;
            unsigned long long v229 = 0u;
            uint64_t v7 = (re::RenderGraphFile *)&_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int v224 = 136315906;
            *(void *)&v224[4] = "operator[]";
            *(_WORD *)&v224[12] = 1024;
            *(_DWORD *)&v224[14] = 476;
            __int16 v225 = 2048;
            __int16 v226 = v111;
            __int16 v227 = 2048;
            __int16 v228 = v116;
            LODWORD(v192) = 38;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_265:
            if (__cxa_guard_acquire(&qword_26AF79548))
            {
              *uint64_t v90 = (uint64_t)re::introspect_RenderGraphTargetHandle(0, v190);
              __cxa_guard_release(v90 + 1);
              uint64_t v91 = (uint64_t)v202;
            }
            goto LABEL_115;
          }
LABEL_169:
          re::BindNode::deinit((re::BindNode *)v224);
          int v131 = v204;
          uint64_t v91 = (uint64_t)v202;
        }
        unint64_t v139 = *((void *)v131 + 1) >> 1;
        unint64_t v140 = *v196;
        if (!*v196
          || (unint64_t v140 = v139 % *((unsigned int *)v7 + 132),
              uint64_t v141 = *(unsigned int *)(*((void *)v7 + 64) + 4 * v140),
              v141 == 0x7FFFFFFF))
        {
LABEL_175:
          uint64_t v143 = *((unsigned int *)v7 + 135);
          if (v143 == 0x7FFFFFFF)
          {
            uint64_t v143 = *((unsigned int *)v7 + 134);
            int v144 = v143;
            if (v143 == *((_DWORD *)v7 + 132))
            {
              re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v196, 2 * *(_DWORD *)v195);
              unint64_t v140 = v139 % *((unsigned int *)v7 + 132);
              int v144 = *((_DWORD *)v7 + 134);
              int v131 = v204;
            }
            *((_DWORD *)v7 + 134) = v144 + 1;
            uint64_t v145 = *((void *)v7 + 65);
            int v146 = *(_DWORD *)(v145 + 24 * v143);
          }
          else
          {
            uint64_t v145 = *((void *)v7 + 65);
            int v146 = *(_DWORD *)(v145 + 24 * v143);
            *((_DWORD *)v7 + 135) = v146 & 0x7FFFFFFF;
          }
          uint64_t v147 = 24 * v143;
          *(_DWORD *)(v145 + v147) = v146 | 0x80000000;
          *(_DWORD *)(*((void *)v7 + 65) + v147) = *(_DWORD *)(*((void *)v7 + 65) + 24 * v143) & 0x80000000 | *(_DWORD *)(*((void *)v7 + 64) + 4 * v140);
          *(void *)(*((void *)v7 + 65) + 24 * v143 + 8) = v139;
          *(void *)(*((void *)v7 + 65) + 24 * v143 + 16) = v131;
          *(_DWORD *)(*((void *)v7 + 64) + 4 * v140) = v143;
          ++*((_DWORD *)v7 + 133);
          ++*((_DWORD *)v7 + 136);
        }
        else
        {
          uint64_t v142 = *((void *)v7 + 65);
          while (*(void *)(v142 + 24 * v141 + 8) != v139)
          {
            LODWORD(v141) = *(_DWORD *)(v142 + 24 * v141) & 0x7FFFFFFF;
            if (v141 == 0x7FFFFFFF) {
              goto LABEL_175;
            }
          }
        }
      }
      else
      {
        long long v124 = (char *)v7 + 17;
        if (*((unsigned char *)v7 + 16)) {
          long long v124 = (char *)*((void *)v7 + 3);
        }
        re::DynamicString::format((re::DynamicString *)"Node found with unregistered type in RenderGraph %s", (re::DynamicString *)&v229, v124, v192);
        re::RenderFrame::addError(v91, (uint64_t)&v229);
        if (void)v229 && (BYTE8(v229)) {
          (*(void (**)(void, void))(*(void *)v229 + 40))(v229, v230);
        }
      }
      unint64_t v111 = (const char **)++v112;
    }
    while (*((void *)v7 + 17) > (unint64_t)v112);
  }
  uint64_t v148 = *((void *)v7 + 37);
  if (v148)
  {
    int v149 = (void *)*((void *)v7 + 39);
    uint64_t v150 = 8 * v148;
    do
    {
      (*(void (**)(void, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)*v149 + 24))(*v149, v91, v201, v200, v196);
      ++v149;
      v150 -= 8;
    }
    while (v150);
  }
  uint64_t v151 = *((void *)v7 + 27);
  if (v151)
  {
    int v152 = (void *)*((void *)v7 + 29);
    uint64_t v153 = 48 * v151;
    do
    {
      unint64_t v154 = v152[2] >> 1;
      int v155 = (double *)re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v201, v154);
      if (v155)
      {
        int v156 = (uint64_t *)v155;
        *(void *)&unsigned long long v229 = *v152 >> 1;
        if (*(unsigned char *)v152[5]) {
          long long v157 = (char *)v152[5];
        }
        else {
          long long v157 = (char *)v199;
        }
        re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v91, (uint64_t *)&v229, v155, v157);
        unsigned int v158 = *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re *)(v91 + 3448), v156) + 80);
        if (v158 != -1)
        {
          re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(v91 + 3448), v158, &v229);
          *(void *)int v224 = *((void *)&v229 + 1) >> 1;
          *(void *)&v224[8] = *((void *)&v230 + 1);
          int v218 = (uint64_t *)(*v152 >> 1);
          if (*(unsigned char *)v152[5]) {
            int v159 = (char *)v152[5];
          }
          else {
            int v159 = (char *)v199;
          }
          re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v91, (uint64_t *)&v218, (double *)v224, v159);
          re::StringID::destroyString((re::StringID *)((char *)&v229 + 8));
        }
      }
      else
      {
        long long v160 = (double *)re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v200, v154);
        if (v160)
        {
          *(void *)&unsigned long long v229 = *v152 >> 1;
          if (*(unsigned char *)v152[5]) {
            long long v161 = (char *)v152[5];
          }
          else {
            long long v161 = (char *)v199;
          }
          re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v91, (uint64_t *)&v229, v160, v161);
        }
      }
      v152 += 6;
      v153 -= 48;
    }
    while (v153);
  }
  uint64_t v162 = *((void *)v7 + 32);
  if (v162)
  {
    long long v163 = (void *)*((void *)v7 + 34);
    long long v164 = &v163[6 * v162];
    do
    {
      unint64_t v165 = v163[2] >> 1;
      if (*v201)
      {
        uint64_t v166 = *(unsigned int *)(*((void *)v7 + 70) + 4 * (v165 % *((unsigned int *)v7 + 144)));
        if (v166 != 0x7FFFFFFF)
        {
          uint64_t v173 = *((void *)v7 + 71);
          uint64_t v174 = *(void *)(v173 + 32 * v166 + 8);
          uint64_t v175 = *(unsigned int *)(*((void *)v7 + 70) + 4 * (v165 % *((unsigned int *)v7 + 144)));
          if (v174 == v165)
          {
            uint64_t v176 = *(unsigned int *)(*((void *)v7 + 70) + 4 * (v165 % *((unsigned int *)v7 + 144)));
LABEL_227:
            uint64_t v177 = v173 + 32 * v176;
            *(void *)int v224 = 0;
            *(void *)&v224[8] = -1;
            *(void *)int v224 = *(void *)(v177 + 16);
            *(void *)&v224[8] = *(void *)(v177 + 24);
            unsigned int v178 = *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re *)(v91 + 3448), (uint64_t *)v224)+ 80);
            if (v178 != -1)
            {
              re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(v91 + 3448), v178, &v229);
              int v218 = (uint64_t *)(*((void *)&v229 + 1) >> 1);
              size_t v219 = *((void *)&v230 + 1);
              uint64_t v205 = *v163 >> 1;
              if (*(unsigned char *)v163[5]) {
                long long v179 = (char *)v163[5];
              }
              else {
                long long v179 = (char *)v199;
              }
              re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v91, &v205, (double *)&v218, v179);
              re::StringID::destroyString((re::StringID *)((char *)&v229 + 8));
            }
            *(void *)&unsigned long long v229 = *v163 >> 1;
            if (*(unsigned char *)v163[5]) {
              uint64_t v180 = (char *)v163[5];
            }
            else {
              uint64_t v180 = (char *)v199;
            }
            re::RenderFrame::addTargetOutput((re::RenderFrame *)v91, (uint64_t *)&v229, (double *)v224, v180);
            goto LABEL_236;
          }
          while (1)
          {
            uint64_t v175 = *(_DWORD *)(v173 + 32 * v175) & 0x7FFFFFFF;
            if (v175 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v173 + 32 * v175 + 8) == v165)
            {
              while (1)
              {
                uint64_t v176 = v166;
                if (v174 == v165) {
                  break;
                }
                uint64_t v166 = *(_DWORD *)(v173 + 32 * v166) & 0x7FFFFFFF;
                uint64_t v176 = 0x7FFFFFFFLL;
                if (v166 == 0x7FFFFFFF) {
                  break;
                }
                uint64_t v174 = *(void *)(v173 + 32 * v166 + 8);
              }
              goto LABEL_227;
            }
          }
        }
      }
      if (*v200)
      {
        uint64_t v167 = *(unsigned int *)(*((void *)v7 + 76) + 4 * (v165 % *((unsigned int *)v7 + 156)));
        if (v167 != 0x7FFFFFFF)
        {
          uint64_t v168 = *((void *)v7 + 77);
          uint64_t v169 = *(void *)(v168 + 32 * v167 + 8);
          uint64_t v170 = *(unsigned int *)(*((void *)v7 + 76) + 4 * (v165 % *((unsigned int *)v7 + 156)));
          if (v169 == v165)
          {
            uint64_t v171 = *(unsigned int *)(*((void *)v7 + 76) + 4 * (v165 % *((unsigned int *)v7 + 156)));
LABEL_214:
            *(void *)&unsigned long long v229 = 0;
            *((void *)&v229 + 1) = -1;
            unsigned long long v229 = *(_OWORD *)(v168 + 32 * v171 + 16);
            *(void *)int v224 = *v163 >> 1;
            if (*(unsigned char *)v163[5]) {
              uint64_t v172 = (char *)v163[5];
            }
            else {
              uint64_t v172 = (char *)v199;
            }
            re::RenderFrame::addBufferOutput((re::RenderFrame *)v91, (uint64_t *)v224, (double *)&v229, v172);
          }
          else
          {
            while (1)
            {
              uint64_t v170 = *(_DWORD *)(v168 + 32 * v170) & 0x7FFFFFFF;
              if (v170 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v168 + 32 * v170 + 8) == v165)
              {
                while (1)
                {
                  uint64_t v171 = v167;
                  if (v169 == v165) {
                    break;
                  }
                  uint64_t v167 = *(_DWORD *)(v168 + 32 * v167) & 0x7FFFFFFF;
                  uint64_t v171 = 0x7FFFFFFFLL;
                  if (v167 == 0x7FFFFFFF) {
                    break;
                  }
                  uint64_t v169 = *(void *)(v168 + 32 * v167 + 8);
                }
                goto LABEL_214;
              }
            }
          }
        }
      }
LABEL_236:
      v163 += 6;
    }
    while (v163 != v164);
  }
  uint64_t v181 = *((unsigned int *)v7 + 134);
  if (v181)
  {
    uint64_t v182 = 0;
    uint64_t v183 = (int *)*((void *)v7 + 65);
    while (1)
    {
      int v184 = *v183;
      v183 += 6;
      if (v184 < 0) {
        break;
      }
      if (v181 == ++v182)
      {
        LODWORD(v182) = *((_DWORD *)v7 + 134);
        break;
      }
    }
  }
  else
  {
    LODWORD(v182) = 0;
  }
  if (v181 != v182)
  {
    uint64_t v185 = v182;
    do
    {
      uint64_t v186 = *((void *)v7 + 65) + 24 * v185;
      (*(void (**)(void, void, void, uint64_t))(**(void **)(v186 + 16) + 80))(*(void *)(v186 + 16), *((void *)RenderGraph + 10), *((void *)RenderGraph + 12), v91);
      *(unsigned char *)(*(void *)(v186 + 16) + 65) = 1;
      if (*((_DWORD *)v7 + 134) <= (v182 + 1)) {
        int v187 = v182 + 1;
      }
      else {
        int v187 = *((_DWORD *)v7 + 134);
      }
      while (1)
      {
        uint64_t v185 = (v182 + 1);
        if (v187 - 1 == v182) {
          break;
        }
        LODWORD(v182) = v182 + 1;
        int v188 = v185;
        if ((*(_DWORD *)(*((void *)v7 + 65) + 24 * v185) & 0x80000000) != 0) {
          goto LABEL_260;
        }
      }
      int v188 = v187;
LABEL_260:
      LODWORD(v182) = v188;
    }
    while (v181 != v188);
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v211);
  return std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](&v221);
}

void sub_2334B054C(_Unwind_Exception *a1)
{
}

void re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        size_t v13 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *v13;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *v13 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v14 = *v13;
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            uint64_t v21 = 24 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v21) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + 8) = v14;
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + 16) = v13[1];
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void sub_2334B0860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        size_t v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 1);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v14 = *(v13 - 1);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            uint64_t v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v21) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 8) = v14;
            uint64_t v22 = *(void *)(a1 + 16) + 32 * v17;
            *(void *)(v22 + 16) = 0;
            *(void *)(v22 + 24) = -1;
            *(void *)(v22 + 16) = *v13;
            *(void *)(v22 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void sub_2334B0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        size_t v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 1);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v14 = *(v13 - 1);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            uint64_t v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v21) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 8) = v14;
            uint64_t v22 = *(void *)(a1 + 16) + 32 * v17;
            *(void *)(v22 + 16) = 0;
            *(void *)(v22 + 24) = -1;
            *(void *)(v22 + 16) = *v13;
            *(void *)(v22 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void sub_2334B0CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)size_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = (unint64_t *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0) {
            re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v11 % *(unsigned int *)(a1 + 24), *v11, v11, v11 + 1);
          }
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void sub_2334B0DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 24 * v2 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v2) = *(_DWORD *)(v4 + 24 * v2) & 0x7FFFFFFF;
      if (v2 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v4 + 24 * v2 + 8) == a2) {
        return v4 + 24 * v2 + 16;
      }
    }
    return 0;
  }
  return v4 + 24 * v2 + 16;
}

uint64_t re::InlineString<64ul>::format@<X0>(uint64_t a1@<X8>, char a2)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = 0;
  uint64_t result = vsnprintf((char *)(a1 + 8), 0x40uLL, "%s[MSAA]", &a2);
  if ((result & 0x80000000) != 0)
  {
    *(unsigned char *)(a1 + *(void *)a1 + 8) = 0;
  }
  else
  {
    unint64_t v5 = *(void *)a1 + result;
    if (v5 >= 0x40)
    {
      re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "m_length + result < m_capacity", "vappendf", 446);
      uint64_t result = _os_crash();
      __break(1u);
    }
    else
    {
      *(void *)a1 = v5;
    }
  }
  return result;
}

void sub_2334B0F50(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t re::RenderFrame::addError(uint64_t a1, uint64_t a2)
{
  v4.n128_u64[0] = 2000;
  v4.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  uint64_t v5 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __n128 v2 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 3152), &v4);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(__n128))(*(void *)v5 + 40))(v2);
    }
  }
  return result;
}

void sub_2334B0FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a11)
  {
    if (a12) {
      (*(void (**)(void))(*(void *)a11 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 32 * v2 + 8) != a2)
  {
    while (1)
    {
      uint64_t v2 = *(_DWORD *)(v4 + 32 * v2) & 0x7FFFFFFF;
      if (v2 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v4 + 32 * v2 + 8) == a2) {
        return v4 + 32 * v2 + 16;
      }
    }
    return 0;
  }
  return v4 + 32 * v2 + 16;
}

uint64_t re::RenderGraphFile::setRuntimeNodeSetting(re::RenderGraphFile *this, const re::StringID *a2, const re::IntrospectionBase *a3, const char *a4, char *a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v10 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 736, a2);
  if (v10)
  {
    unint64_t v11 = *(unsigned int *)v10;
    unint64_t v12 = *((void *)this + 90);
    if (v12 <= v11)
    {
      *(void *)&v36.var0 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v37 = 136315906;
      *(void *)&v37[4] = "operator[]";
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = 468;
      *(_WORD *)&v37[18] = 2048;
      *(void *)&v37[20] = v11;
      __int16 v38 = 2048;
      unint64_t v39 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      __s2 = a5;
      uint64_t v13 = *((void *)this + 91);
      *(void *)&v36.var0 = 0;
      v36.var1 = "";
      unint64_t v14 = (re *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v13 + (v11 << 7) + 80, &v36);
      unint64_t v15 = (unsigned int *)v14;
      if (!v14)
      {
        memset(&buf[8], 0, 24);
        LODWORD(v41) = 0;
        *((void *)&v41 + 1) = 0;
        *(void *)&long long v42 = 0;
        *((void *)&v42 + 1) = "";
        v35[0] = (uint64_t)a4;
        v35[1] = strlen(a4);
        uint64_t v16 = v13 + (v11 << 7);
        re::BindNode::bindPoint((re::BindNode **)(v16 + 8), (uint64_t)a3, v35, (uint64_t)v37);
        *(void *)CMTime buf = *(void *)v37;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&buf[8], (uint64_t)&v37[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v37[8]);
        uint64_t v17 = (re *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v37[8]);
        uint64_t v18 = *(void *)&buf[24];
        if (*(void *)&buf[24])
        {
          re::StringID::operator=((unint64_t *)&v42, (uint64_t *)&v36);
          re::DynamicArray<re::BindPointAndPath>::add((_anonymous_namespace_ *)(v16 + 40), (uint64_t *)buf);
          *(_DWORD *)uint64_t v37 = *(_DWORD *)(v13 + (v11 << 7) + 56) - 1;
          unint64_t v15 = (unsigned int *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v13 + (v11 << 7) + 80, &v36, v37);
        }
        else
        {
          uint64_t v21 = (id)*re::graphicsLogObjects(v17);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *((void *)a2 + 1);
            *(_DWORD *)uint64_t v37 = 136315394;
            *(void *)&v37[4] = v22;
            *(_WORD *)&v37[12] = 2080;
            *(void *)&v37[14] = a4;
            _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Failed to find binding path [node].[binding path]: [%s].[%s].", v37, 0x16u);
          }

          unint64_t v15 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v42);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        unint64_t v14 = (re *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        if (!v18) {
          goto LABEL_25;
        }
      }
      unint64_t v12 = *v15;
      uint64_t v23 = v13 + (v11 << 7);
      unint64_t v11 = *(void *)(v23 + 56);
      if (v11 > v12)
      {
        uint64_t v24 = (re::BindPoint *)(*(void *)(v23 + 72) + (v12 << 6));
        if (*(const re::IntrospectionBase **)v24 == a3)
        {
          int v27 = (const re::IntrospectionBase **)re::BindPoint::valueUntyped(v24);
          uint64_t v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(const re::IntrospectionBase *))(*(void *)a3 + 32))(a3);
          if (v28 || (uint64_t v28 = (_anonymous_namespace_ *)memcmp(v27, __s2, *((int *)a3 + 5)), v28))
          {
            *((unsigned char *)this + 704) = 1;
            *(_OWORD *)&v37[8] = 0uLL;
            *(void *)uint64_t v37 = re::PassthroughAssetSerialization::instance(void)::instance;
            uint64_t v29 = *(const re::IntrospectionBase **)v24;
            *(void *)&buf[8] = 0;
            *(void *)&uint8_t buf[16] = v37;
            uint64_t v18 = v30;
            if ((v30 & 1) == 0)
            {
              uint64_t v31 = (id)*re::graphicsLogObjects((re *)v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v32 = *((void *)a2 + 1);
                *(_DWORD *)CMTime buf = 136315394;
                *(void *)&void buf[4] = v32;
                *(_WORD *)&buf[12] = 2080;
                *(void *)&buf[14] = a4;
                _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "Failed to perform deep copy into [node].[binding path]: [%s].[%s]", buf, 0x16u);
              }
            }
          }
          else
          {
            uint64_t v18 = 1;
          }
        }
        else
        {
          uint64_t v25 = (id)*re::graphicsLogObjects(v14);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = *((void *)a2 + 1);
            *(_DWORD *)CMTime buf = 136315394;
            *(void *)&void buf[4] = v26;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = a4;
            _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "Binding path does not match expected type [node].[binding path]: [%s].[%s].", buf, 0x16u);
          }

          uint64_t v18 = 0;
        }
LABEL_25:
        re::StringID::destroyString((re::StringID *)&v36);
        return v18;
      }
    }
    v35[0] = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v37 = 136315906;
    *(void *)&v37[4] = "operator[]";
    *(_WORD *)&v37[12] = 1024;
    *(_DWORD *)&v37[14] = 789;
    *(_WORD *)&v37[18] = 2048;
    *(void *)&v37[20] = v12;
    __int16 v38 = 2048;
    unint64_t v39 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v19 = (id)*re::graphicsLogObjects(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *((void *)a2 + 1);
    *(_DWORD *)CMTime buf = 136315138;
    *(void *)&void buf[4] = v20;
    _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Failed to find node with name [%s].", buf, 0xCu);
  }

  return 0;
}

void sub_2334B1668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = v17;
  re::StringID::destroyString(v18);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit(a11);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit(a11);
  re::StringID::destroyString((re::StringID *)&a17);
  _Unwind_Resume(a1);
}

uint64_t re::DynamicArray<re::BindPointAndPath>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::BindPointAndPath>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::BindPoint::BindPoint(*((void *)this + 4) + (v4 << 6), a2);
  uint64_t v6 = a2[6];
  *(void *)(result + 48) = *(void *)(result + 48) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(result + 48) = a2[6] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(result + 56) = a2[7];
  a2[6] = 0;
  a2[7] = (uint64_t)"";
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::allocInfo_RenderGraphBufferDescriptionData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF793C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79B80, "RenderGraphBufferDescriptionData");
    __cxa_guard_release(&qword_26AF793C0);
  }
  return &unk_26AF79B80;
}

void re::initInfo_RenderGraphBufferDescriptionData(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x761AC20EE8B6461CLL;
  v25[1] = "RenderGraphBufferDescriptionData";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793C8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF793C8);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_RenderGraphResourceDescriptionType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "type";
      *(void *)(v7 + 16) = &qword_26AF79AF0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF79698 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_size_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "length";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF796A0 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "exposeToMaterial";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1C00000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF796A8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint64_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "protectionOptions";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF796B0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_float((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "lengthMultiplier";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF796B8 = v23;
      __cxa_guard_release(&qword_26AF793C8);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF79698;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphBufferDescriptionData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphBufferDescriptionData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphBufferDescriptionData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphBufferDescriptionData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void sub_2334B1B88(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphBufferDescriptionData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 2;
  *(void *)(a3 + 8) = -1;
  *(void *)(a3 + 16) = -1;
  *(_DWORD *)(a3 + 24) = 1065353216;
  *(unsigned char *)(a3 + 28) = 0;
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphBufferDescriptionData>(uint64_t result)
{
  *(_DWORD *)uint64_t result = 2;
  *(void *)(result + 8) = -1;
  *(void *)(result + 16) = -1;
  *(_DWORD *)(result + 24) = 1065353216;
  *(unsigned char *)(result + 28) = 0;
  return result;
}

void *re::allocInfo_RenderGraphBufferData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF793D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79BF8, "RenderGraphBufferData");
    __cxa_guard_release(&qword_26AF793D8);
  }
  return &unk_26AF79BF8;
}

void re::initInfo_RenderGraphBufferData(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x2F0DE9BEFAA4A6C4;
  v17[1] = "RenderGraphBufferData";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793E0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF793E0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79618 = v8;
      long long v9 = (re *)re::introspectionAllocator((re *)v8);
      uint64_t v10 = v9;
      uint64_t v11 = (re *)qword_26AF793D0;
      if (!qword_26AF793D0)
      {
        uint64_t v11 = (re *)re::allocInfo_RenderGraphBufferDescriptionData(v9);
        qword_26AF793D0 = (uint64_t)v11;
        re::initInfo_RenderGraphBufferDescriptionData(v11, v12);
      }
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "description";
      *(void *)(v13 + 16) = v11;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF79620 = v13;
      unint64_t v14 = (re *)re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get(v14);
      uint64_t v15 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "connections";
      *(void *)(v15 + 16) = &qword_26AF79768;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF79628 = v15;
      __cxa_guard_release(&qword_26AF793E0);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF79618;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphBufferData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphBufferData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphBufferData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphBufferData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void sub_2334B1F40(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79570, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF79570);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF79768);
      qword_26AF79768 = (uint64_t)&unk_26E6D4C50;
      __cxa_guard_release(&qword_26AF79570);
    }
  }
  if ((byte_26AF793A3 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF79418;
    if (qword_26AF79418
      || (uint64_t v1 = re::allocInfo_RenderGraphDataStoreConnection(a1),
          qword_26AF79418 = (uint64_t)v1,
          re::initInfo_RenderGraphDataStoreConnection((re *)v1, v2),
          (byte_26AF793A3 & 1) == 0))
    {
      byte_26AF793A3 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79768, 0);
      qword_26AF79778 = 0x2800000003;
      dword_26AF79780 = v3;
      word_26AF79784 = 0;
      *(void *)&xmmword_26AF79788 = 0;
      *((void *)&xmmword_26AF79788 + 1) = 0xFFFFFFFFLL;
      qword_26AF79798 = (uint64_t)v1;
      qword_26AF797A0 = 0;
      qword_26AF79768 = (uint64_t)&unk_26E6D4C50;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF79768, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79788 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B2254(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphBufferData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(_DWORD *)(a3 + 16) = 2;
  *(void *)(a3 + 24) = -1;
  *(void *)(a3 + 32) = -1;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(unsigned char *)(a3 + 44) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 72) = 0;
}

void re::internal::defaultDestruct<re::RenderGraphBufferData>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a3 + 48);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphBufferData>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = "";
  *(_DWORD *)(result + 16) = 2;
  *(void *)(result + 24) = -1;
  *(void *)(result + 32) = -1;
  *(_DWORD *)(result + 40) = 1065353216;
  *(unsigned char *)(result + 44) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphBufferData>(re::StringID *a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a1 + 48);
  re::StringID::destroyString(a1);
}

void *re::allocInfo_RenderGraphDataNodeConnection(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF793F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79C70, "RenderGraphDataNodeConnection");
    __cxa_guard_release(&qword_26AF793F0);
  }
  return &unk_26AF79C70;
}

void re::initInfo_RenderGraphDataNodeConnection(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x5BFF1C4CD5873844;
  v12[1] = "RenderGraphDataNodeConnection";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF793F8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF793F8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF795D8 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "connections";
      *(void *)(v10 + 16) = &qword_26AF79768;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF795E0 = v10;
      __cxa_guard_release(&qword_26AF793F8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF795D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDataNodeConnection>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDataNodeConnection>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDataNodeConnection>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDataNodeConnection>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void sub_2334B2610(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphDataNodeConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::RenderGraphDataNodeConnection>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a3 + 16);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphDataNodeConnection>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = "";
  *(void *)(result + 48) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphDataNodeConnection>(re::StringID *a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a1 + 16);
  re::StringID::destroyString(a1);
}

void *re::allocInfo_RenderGraphDataStoreConnection(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79408))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79CE8, "RenderGraphDataStoreConnection");
    __cxa_guard_release(&qword_26AF79408);
  }
  return &unk_26AF79CE8;
}

void re::initInfo_RenderGraphDataStoreConnection(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xB1F8E4E1F120EA7ALL;
  v18[1] = "RenderGraphDataStoreConnection";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79410, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF79410);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "toMember";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79630 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "fromType";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF79638 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "fromMember";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF79640 = v16;
      __cxa_guard_release(&qword_26AF79410);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF79630;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDataStoreConnection>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDataStoreConnection>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDataStoreConnection>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDataStoreConnection>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void sub_2334B2A1C(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::RenderGraphDataStoreConnection>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  v3 += 40;
  re::DynamicString::setCapacity((void *)v3, 0);
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)(v3 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphDataStoreConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DynamicString>::deinit(a3 + 72);
  re::DynamicString::deinit((re::DynamicString *)(a3 + 40));
  return re::DynamicArray<re::DynamicString>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphDataStoreConnection>(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  v1 += 40;
  re::DynamicString::setCapacity((void *)v1, 0);
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)(v1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphDataStoreConnection>(uint64_t a1)
{
  re::DynamicArray<re::DynamicString>::deinit(a1 + 72);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  return re::DynamicArray<re::DynamicString>::deinit(a1);
}

void re::introspect_RenderGraphSpecifyOperationBaseType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79428, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF79428);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = 1;
      *(void *)(v26 + 16) = "SpecifyLane";
      qword_26AF79420 = v26;
      __cxa_guard_release(&qword_26AF79428);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79430, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79430))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF79AA8, "RenderGraphSpecifyOperationBaseType", 4, 4, 1, 1);
    qword_26AF79AA8 = (uint64_t)&unk_26E715E00;
    qword_26AF79AE8 = (uint64_t)&re::introspect_RenderGraphSpecifyOperationBaseType(BOOL)::enumTable;
    dword_26AF79AB8 = 9;
    __cxa_guard_release(&qword_26AF79430);
  }
  if ((_MergedGlobals_79 & 1) == 0)
  {
    _MergedGlobals_79 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF79AA8, a2);
    uint64_t v28 = 0x2209C4ED1E795452;
    uint64_t v29 = "RenderGraphSpecifyOperationBaseType";
    v33[0] = 208862;
    v33[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v33);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v33);
      unint64_t v4 = (unsigned int *)qword_26AF79AE8;
      v32[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v33, &v28, 1, 1, (uint64_t)v32);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v31.var0 = 2 * v10;
            v31.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v33, v14, &v31);
            re::StringID::destroyString((re::StringID *)&v31);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v31.var0 = 2 * v18;
              v31.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v33, v22, &v31);
              re::StringID::destroyString((re::StringID *)&v31);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v23);
      xmmword_26AF79AC8 = v30;
      re::StringID::destroyString((re::StringID *)&v28);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v33);
      re::internal::assertLog((re::internal *)5, v27, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphSpecifyOperationBaseType", v28, v29);
      _os_crash();
      __break(1u);
    }
  }
}

void sub_2334B2F0C(_Unwind_Exception *a1)
{
}

void re::introspectionTable_RenderGraphSpecifyOperationBase(re *this)
{
  if ((byte_26AF793A1 & 1) == 0)
  {
    byte_26AF793A1 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79438, memory_order_acquire) & 1) == 0)
    {
      uint64_t v1 = (re *)__cxa_guard_acquire(&qword_26AF79438);
      if (v1)
      {
        qword_26AF796C0 = (uint64_t)"RenderGraphSpecifyLaneOperation";
        uint64_t v2 = (re *)qword_26AF79450;
        if (!qword_26AF79450)
        {
          uint64_t v2 = (re *)re::allocInfo_RenderGraphSpecifyLaneOperation(v1);
          qword_26AF79450 = (uint64_t)v2;
          re::initInfo_RenderGraphSpecifyLaneOperation(v2, v3);
        }
        qword_26AF796C8 = (uint64_t)v2;
        qword_26AF796D0 = 0;
        qword_26AF796D8 = 1;
        dword_26AF796E0 = 0;
        __cxa_guard_release(&qword_26AF79438);
      }
    }
    dword_26AF795E8 = 1;
    qword_26AF795F0 = (uint64_t)&qword_26AF796C0;
  }
}

void *re::allocInfo_RenderGraphSpecifyLaneOperation(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79440, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79440))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79D60, "RenderGraphSpecifyLaneOperation");
    __cxa_guard_release(&qword_26AF79440);
  }
  return &unk_26AF79D60;
}

void re::initInfo_RenderGraphSpecifyLaneOperation(re *this, re::IntrospectionBase *a2)
{
  v23[0] = 0xEEB686440C99DCA4;
  v23[1] = "RenderGraphSpecifyLaneOperation";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79448, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF79448);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF79468;
      if (!qword_26AF79468)
      {
        uint64_t v7 = (re *)re::allocInfo_RenderGraphSpecifyOperationBase(v5);
        qword_26AF79468 = (uint64_t)v7;
        re::initInfo_RenderGraphSpecifyOperationBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "RenderGraphSpecifyOperationBase";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF796E8 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::IntrospectionInfo<re::StringID>::get(1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "lane";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF796F0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "graphScopeOverride";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0xB800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF796F8 = v17;
      uint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::RenderGraphTargetDescriptionData>>::get(v18);
      uint64_t v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "targetDescription";
      *(void *)(v19 + 16) = &qword_26AF797A8;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF79700 = v19;
      uint64_t v20 = (re *)re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::RenderGraphBufferDescriptionData>>::get(v20);
      uint64_t v21 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "bufferDescription";
      *(void *)(v21 + 16) = &qword_26AF797E8;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x9000000005;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF79708 = v21;
      __cxa_guard_release(&qword_26AF79448);
    }
  }
  *((void *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF796E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSpecifyLaneOperation>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSpecifyLaneOperation>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSpecifyLaneOperation>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSpecifyLaneOperation>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

void sub_2334B3428(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::Optional<re::RenderGraphTargetDescriptionData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79578, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF79578);
    if (a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF797A8);
      qword_26AF797A8 = (uint64_t)&unk_26E6D4CE8;
      __cxa_guard_release(&qword_26AF79578);
    }
  }
  if ((byte_26AF793A4 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF79490;
    if (qword_26AF79490
      || (uint64_t v1 = re::allocInfo_RenderGraphTargetDescriptionData(a1),
          qword_26AF79490 = (uint64_t)v1,
          re::initInfo_RenderGraphTargetDescriptionData((re *)v1, v2),
          (byte_26AF793A4 & 1) == 0))
    {
      byte_26AF793A4 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF797A8, 0);
      qword_26AF797B8 = 0x700000000DLL;
      dword_26AF797C0 = v3;
      word_26AF797C4 = 0;
      *(void *)&xmmword_26AF797C8 = 0;
      *((void *)&xmmword_26AF797C8 + 1) = 0xFFFFFFFFLL;
      qword_26AF797D8 = (uint64_t)v1;
      qword_26AF797E0 = 0;
      qword_26AF797A8 = (uint64_t)&unk_26E6D4CE8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF797A8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        unint64_t v6 = *(const char **)&v16[7];
      }
      else {
        unint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x70uLL, 8uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF797C8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B36B4(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::Optional<re::RenderGraphBufferDescriptionData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79580, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF79580);
    if (a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF797E8);
      qword_26AF797E8 = (uint64_t)&unk_26E6D4D68;
      __cxa_guard_release(&qword_26AF79580);
    }
  }
  if ((byte_26AF793A5 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF793D0;
    if (qword_26AF793D0
      || (uint64_t v1 = re::allocInfo_RenderGraphBufferDescriptionData(a1),
          qword_26AF793D0 = (uint64_t)v1,
          re::initInfo_RenderGraphBufferDescriptionData((re *)v1, v2),
          (byte_26AF793A5 & 1) == 0))
    {
      byte_26AF793A5 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF797E8, 0);
      qword_26AF797F8 = 0x280000000DLL;
      dword_26AF79800 = v3;
      word_26AF79804 = 0;
      *(void *)&xmmword_26AF79808 = 0;
      *((void *)&xmmword_26AF79808 + 1) = 0xFFFFFFFFLL;
      qword_26AF79818 = (uint64_t)v1;
      qword_26AF79820 = 0;
      qword_26AF797E8 = (uint64_t)&unk_26E6D4D68;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF797E8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        unint64_t v6 = *(const char **)&v16[7];
      }
      else {
        unint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79808 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B392C(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphSpecifyLaneOperation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E6D4AB8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = "";
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = "";
}

void re::internal::defaultDestruct<re::RenderGraphSpecifyLaneOperation>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 184));
  if (a3[32]) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 112));
  }
  re::StringID::destroyString((re::StringID *)(a3 + 16));
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphSpecifyLaneOperation>(uint64_t result)
{
  *(void *)double result = &unk_26E6D4AB8;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = "";
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = "";
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphSpecifyLaneOperation>(unsigned char *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 184));
  if (a1[32]) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 112));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 16));
}

void *re::allocInfo_RenderGraphSpecifyOperationBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79458, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79458))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79DD8, "RenderGraphSpecifyOperationBase");
    __cxa_guard_release(&qword_26AF79458);
  }
  return &unk_26AF79DD8;
}

void re::initInfo_RenderGraphSpecifyOperationBase(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x3AAEC69498BCCC9ELL;
  v11[1] = "RenderGraphSpecifyOperationBase";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79460, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF79460);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_RenderGraphSpecifyOperationBaseType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v7 = 3;
      *(void *)(v7 + 8) = &qword_26AF79AA8;
      *(void *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 8;
      qword_26AF795F8 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspectionTable_RenderGraphSpecifyOperationBase(v8);
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 16, 8);
      *(_DWORD *)uint64_t v9 = 2;
      *(void *)(v9 + 8) = &dword_26AF795E8;
      qword_26AF79600 = v9;
      __cxa_guard_release(&qword_26AF79460);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF795F8;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void sub_2334B3C94(_Unwind_Exception *a1)
{
}

void re::introspect_RenderGraphResourceDescriptionType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79470, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF79470);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "MemoryManaged";
      qword_26AF79648 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "External";
      qword_26AF79650 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Unspecified";
      qword_26AF79658 = v30;
      __cxa_guard_release(&qword_26AF79470);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79478, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79478))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF79AF0, "RenderGraphResourceDescriptionType", 4, 4, 1, 1);
    qword_26AF79AF0 = (uint64_t)&unk_26E715E00;
    qword_26AF79B30 = (uint64_t)&re::introspect_RenderGraphResourceDescriptionType(BOOL)::enumTable;
    dword_26AF79B00 = 9;
    __cxa_guard_release(&qword_26AF79478);
  }
  if ((byte_26AF793A2 & 1) == 0)
  {
    byte_26AF793A2 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF79AF0, a2);
    uint64_t v32 = 0x56001466E58CE620;
    int v33 = "RenderGraphResourceDescriptionType";
    v37[0] = 208862;
    v37[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v37);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v37);
      unint64_t v4 = (unsigned int *)qword_26AF79B30;
      v36[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v37, &v32, 1, 1, (uint64_t)v36);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  long long v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v35.var0 = 2 * v10;
            v35.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v37, v14, &v35);
            re::StringID::destroyString((re::StringID *)&v35);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v35.var0 = 2 * v18;
              v35.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v37, v22, &v35);
              re::StringID::destroyString((re::StringID *)&v35);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v37, v23);
      xmmword_26AF79B10 = v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v37);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphResourceDescriptionType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void sub_2334B40BC(_Unwind_Exception *a1)
{
}

void *re::allocInfo_RenderGraphTargetDescriptionData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79480, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79480))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79E50, "RenderGraphTargetDescriptionData");
    __cxa_guard_release(&qword_26AF79480);
  }
  return &unk_26AF79E50;
}

void re::initInfo_RenderGraphTargetDescriptionData(re *this, re::IntrospectionBase *a2)
{
  v77[0] = 0xBE1FA06AD453B33ALL;
  v77[1] = "RenderGraphTargetDescriptionData";
  re::StringID::destroyString((re::StringID *)v77);
  *((_OWORD *)this + 2) = v78;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79488, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF79488);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_RenderGraphResourceDescriptionType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "type";
      *(void *)(v7 + 16) = &qword_26AF79AF0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7A198 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::mtl::introspect_PixelFormat((re::mtl *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "format";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x400000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7A1A0 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "width";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0xC00000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7A1A8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint32_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "height";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7A1B0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint32_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "sampleCount";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF7A1B8 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_float((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "widthMultiplier";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x3000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF7A1C0 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_float((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "heightMultiplier";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x3400000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF7A1C8 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      long long v34 = re::introspect_RenderGraphTargetDimensionRoundingMode((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "widthRoundingMode";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x3800000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF7A1D0 = v35;
      StringID v36 = re::introspectionAllocator((re *)v35);
      __int16 v38 = re::introspect_RenderGraphTargetDimensionRoundingMode((re *)1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "heightRoundingMode";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x3C00000009;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF7A1D8 = v39;
      uint64_t v40 = re::introspectionAllocator((re *)v39);
      long long v42 = re::introspect_uint32_t((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "mipLevelCount";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x1C0000000ALL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF7A1E0 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v46 = re::introspect_BOOL((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "exposeToMaterial";
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x600000000BLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF7A1E8 = v47;
      uint64_t v48 = re::introspectionAllocator((re *)v47);
      Action = re::mtl::introspect_LoadAction((re::mtl *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "initialLoadAction";
      *(void *)(v51 + 16) = Action;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0x400000000CLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF7A1F0 = v51;
      unint64_t v52 = re::introspectionAllocator((re *)v51);
      int v54 = re::mtl::introspect_TextureUsage((re::mtl *)1, v53);
      uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v55 = 1;
      *(void *)(v55 + 8) = "initialUsageFlags";
      *(void *)(v55 + 16) = v54;
      *(void *)(v55 + 24) = 0;
      *(void *)(v55 + 32) = 0x440000000DLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(void *)(v55 + 48) = 0;
      *(void *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_26AF7A1F8 = v55;
      int v56 = re::introspectionAllocator((re *)v55);
      unint64_t v58 = re::introspect_uint32_t((re *)1, v57);
      uint64_t v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *(void *)(v59 + 8) = "tonemapInPlace";
      *(void *)(v59 + 16) = v58;
      *(void *)(v59 + 24) = 0;
      *(void *)(v59 + 32) = 0x200000000ELL;
      *(_DWORD *)(v59 + 40) = 0;
      *(void *)(v59 + 48) = 0;
      *(void *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_26AF7A200 = v59;
      uint64_t v60 = re::introspectionAllocator((re *)v59);
      uint64_t v62 = re::introspect_AssetHandle((re *)1, v61);
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 72, 8);
      *(_DWORD *)uint64_t v63 = 1;
      *(void *)(v63 + 8) = "externalTarget";
      *(void *)(v63 + 16) = v62;
      *(void *)(v63 + 24) = 0;
      *(void *)(v63 + 32) = 0x480000000FLL;
      *(_DWORD *)(v63 + 40) = 0;
      *(void *)(v63 + 48) = 0;
      *(void *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_26AF7A208 = v63;
      uint64_t v64 = re::introspectionAllocator((re *)v63);
      uint64_t v66 = re::introspect_uint32_t((re *)1, v65);
      uint64_t v67 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v64 + 32))(v64, 72, 8);
      *(_DWORD *)uint64_t v67 = 1;
      *(void *)(v67 + 8) = "arrayLength";
      *(void *)(v67 + 16) = v66;
      *(void *)(v67 + 24) = 0;
      *(void *)(v67 + 32) = 0x1400000010;
      *(_DWORD *)(v67 + 40) = 0;
      *(void *)(v67 + 48) = 0;
      *(void *)(v67 + 56) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_26AF7A210 = v67;
      uint64_t v68 = re::introspectionAllocator((re *)v67);
      uint64_t v70 = re::introspect_uint64_t((re *)1, v69);
      uint64_t v71 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 72, 8);
      *(_DWORD *)uint64_t v71 = 1;
      *(void *)(v71 + 8) = "protectionOptions";
      *(void *)(v71 + 16) = v70;
      *(void *)(v71 + 24) = 0;
      *(void *)(v71 + 32) = 0x2800000011;
      *(_DWORD *)(v71 + 40) = 0;
      *(void *)(v71 + 48) = 0;
      *(void *)(v71 + 56) = 0;
      *(_DWORD *)(v71 + 64) = 0;
      qword_26AF7A218 = v71;
      long long v72 = re::introspectionAllocator((re *)v71);
      uint64_t v74 = re::mtl::introspect_TextureType((re::mtl *)1, v73);
      uint64_t v75 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v72 + 32))(v72, 72, 8);
      *(_DWORD *)uint64_t v75 = 1;
      *(void *)(v75 + 8) = "textureType";
      *(void *)(v75 + 16) = v74;
      *(void *)(v75 + 24) = 0;
      *(void *)(v75 + 32) = 0x800000012;
      *(_DWORD *)(v75 + 40) = 0;
      *(void *)(v75 + 48) = 0;
      *(void *)(v75 + 56) = 0;
      *(_DWORD *)(v75 + 64) = 0;
      qword_26AF7A220 = v75;
      __cxa_guard_release(&qword_26AF79488);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 18;
  *((void *)this + 8) = &qword_26AF7A198;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTargetDescriptionData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTargetDescriptionData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTargetDescriptionData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTargetDescriptionData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v76 = v78;
}

void sub_2334B4B34(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::RenderGraphTargetDescriptionData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 2;
  *(_DWORD *)(a3 + 8) = 2;
  *(void *)(a3 + 40) = -1;
  *(void *)(a3 + 12) = -1;
  *(void *)(a3 + 20) = -1;
  *(void *)(a3 + 28) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 48) = result;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 2;
  *(void *)(a3 + 68) = 0;
  *(void *)(a3 + 84) = 0;
  *(void *)(a3 + 76) = 0;
  *(void *)(a3 + 89) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphTargetDescriptionData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double re::internal::defaultConstructV2<re::RenderGraphTargetDescriptionData>(uint64_t a1)
{
  *(void *)a1 = 2;
  *(_DWORD *)(a1 + 8) = 2;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 12) = -1;
  *(void *)(a1 + 20) = -1;
  *(void *)(a1 + 28) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 48) = result;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 2;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 89) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphTargetDescriptionData>(uint64_t a1)
{
}

void *re::allocInfo_RenderGraphTargetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79498))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79EC8, "RenderGraphTargetData");
    __cxa_guard_release(&qword_26AF79498);
  }
  return &unk_26AF79EC8;
}

void re::initInfo_RenderGraphTargetData(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x2F112D0051684066;
  v17[1] = "RenderGraphTargetData";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794A0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF794A0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79660 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      uint64_t v10 = v9;
      uint64_t v11 = (re *)qword_26AF79490;
      if (!qword_26AF79490)
      {
        uint64_t v11 = (re *)re::allocInfo_RenderGraphTargetDescriptionData(v9);
        qword_26AF79490 = (uint64_t)v11;
        re::initInfo_RenderGraphTargetDescriptionData(v11, v12);
      }
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "description";
      *(void *)(v13 + 16) = v11;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF79668 = v13;
      uint64_t v14 = (re *)re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get(v14);
      uint64_t v15 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "connections";
      *(void *)(v15 + 16) = &qword_26AF79768;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x7800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF79670 = v15;
      __cxa_guard_release(&qword_26AF794A0);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF79660;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTargetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTargetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTargetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTargetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void sub_2334B4F80(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::RenderGraphTargetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 2;
  *(void *)(a3 + 56) = -1;
  *(void *)(a3 + 28) = -1;
  *(void *)(a3 + 36) = -1;
  *(void *)(a3 + 44) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 64) = result;
  *(void *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 80) = 2;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  *(void *)(a3 + 84) = 0;
  *(void *)(a3 + 100) = 0;
  *(void *)(a3 + 92) = 0;
  *(void *)(a3 + 105) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphTargetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a3 + 120);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 88));
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::RenderGraphTargetData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = "";
  *(void *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 56) = -1;
  *(void *)(a1 + 28) = -1;
  *(void *)(a1 + 36) = -1;
  *(void *)(a1 + 44) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 64) = result;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 105) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphTargetData>(uint64_t a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a1 + 120);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 88));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_RenderGraphNodeDataPointer(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF794B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79F40, "RenderGraphNodeDataPointer");
    __cxa_guard_release(&qword_26AF794B0);
  }
  return &unk_26AF79F40;
}

void re::initInfo_RenderGraphNodeDataPointer(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0xD192579ECB7666F2;
  v12[1] = "RenderGraphNodeDataPointer";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794B8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF794B8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::RenderGraphNode *>::get();
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "data";
      *(void *)(v8 + 16) = &qword_26AF79828;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 2;
      *(void *)(v8 + 48) = v7;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79608 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v10 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 8, 4);
      void *v10 = 0x100000004;
      qword_26AF79610 = (uint64_t)v10;
      __cxa_guard_release(&qword_26AF794B8);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF79608;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphNodeDataPointer>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphNodeDataPointer>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphNodeDataPointer>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphNodeDataPointer>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void sub_2334B53A4(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::RenderGraphNode *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79588))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF79828);
    __cxa_guard_release(&qword_26AF79588);
  }
  if ((byte_26AF793A6 & 1) == 0)
  {
    byte_26AF793A6 = 1;
    uint64_t v0 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79828, 0);
    qword_26AF79838 = 0x800000001;
    dword_26AF79840 = 8;
    word_26AF79844 = 0;
    *(void *)&xmmword_26AF79848 = 0;
    *((void *)&xmmword_26AF79848 + 1) = 0xFFFFFFFFLL;
    qword_26AF79828 = (uint64_t)&unk_26E6CDA08;
    qword_26AF79858 = v0;
    qword_26AF79860 = 0;
    re::IntrospectionRegistry::add(v1, v2);
    re::getPrettyTypeName((re *)&qword_26AF79828, (const re::IntrospectionBase *)&v6);
    if (BYTE8(v6)) {
      uint64_t v3 = v7;
    }
    else {
      uint64_t v3 = (char *)&v6 + 9;
    }
    if (void)v6 && (BYTE8(v6)) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
    if (v8 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v4 = v6;
    }
    else
    {
      long long v6 = *(_OWORD *)(v0 + 32);
      long long v4 = v5;
    }
    xmmword_26AF79848 = v4;
    re::StringID::destroyString((re::StringID *)&v8);
  }
}

void sub_2334B55C0(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphNodeDataPointer>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

void *re::internal::defaultConstructV2<re::RenderGraphNodeDataPointer>(void *result)
{
  *double result = 0;
  result[1] = 0;
  return result;
}

void *re::allocInfo_RenderGraphInputData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF794C8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF79FB8, "RenderGraphInputData");
    __cxa_guard_release(&qword_26AF794C8);
  }
  return &unk_26AF79FB8;
}

void re::initInfo_RenderGraphInputData(re *this, re::IntrospectionBase *a2)
{
  v30[0] = 0x228CE084AB270078;
  v30[1] = "RenderGraphInputData";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794D0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF794D0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "lane";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79738 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "resource";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF79740 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "Target";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF79748 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "Buffer";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x1000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF79750 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "inputOnly";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x2000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF79758 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::IntrospectionInfo<re::StringID>::get(1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "graphScopeOverride";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x2800000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF79760 = v28;
      __cxa_guard_release(&qword_26AF794D0);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF79738;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphInputData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphInputData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphInputData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphInputData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

void sub_2334B5A9C(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphInputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = "";
  *(unsigned char *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = "";
}

void re::internal::defaultDestruct<re::RenderGraphInputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphInputData>(uint64_t result)
{
  *(void *)double result = 0;
  *(void *)(result + 8) = "";
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = "";
  *(unsigned char *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = "";
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphInputData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_RenderGraphOutputData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF794E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A030, "RenderGraphOutputData");
    __cxa_guard_release(&qword_26AF794E0);
  }
  return &unk_26AF7A030;
}

void re::initInfo_RenderGraphOutputData(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x2F105BAD7F8B1F46;
  v26[1] = "RenderGraphOutputData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794E8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF794E8);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "lane";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79710 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "graphScopeOverride";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000003;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF79718 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "resource";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF79720 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "Target";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x1000000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF79728 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::IntrospectionInfo<re::StringID>::get(1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "Buffer";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x1000000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF79730 = v24;
      __cxa_guard_release(&qword_26AF794E8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF79710;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphOutputData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphOutputData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphOutputData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphOutputData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

void sub_2334B5FB8(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphOutputData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[2] = 0;
  a3[3] = "";
  a3[4] = 0;
  a3[5] = "";
}

void re::internal::defaultDestruct<re::RenderGraphOutputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::RenderGraphOutputData>(void *result)
{
  *double result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  result[4] = 0;
  result[5] = "";
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphOutputData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_RenderGraphInheritanceData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF794F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF794F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A0A8, "RenderGraphInheritanceData");
    __cxa_guard_release(&qword_26AF794F8);
  }
  return &unk_26AF7A0A8;
}

void re::initInfo_RenderGraphInheritanceData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x2D46A26BFC724E78;
  v22[1] = "RenderGraphInheritanceData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79500, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF79500);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "lane";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79678 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "Target";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF79680 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "Buffer";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF79688 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "graphScopeOverride";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF79690 = v20;
      __cxa_guard_release(&qword_26AF79500);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF79678;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphInheritanceData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphInheritanceData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphInheritanceData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphInheritanceData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void sub_2334B644C(_Unwind_Exception *a1)
{
}

void re::internal::defaultConstruct<re::RenderGraphInheritanceData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[2] = 0;
  a3[3] = "";
  a3[4] = 0;
  a3[5] = "";
}

void re::internal::defaultDestruct<re::RenderGraphInheritanceData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::RenderGraphInheritanceData>(void *result)
{
  *double result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  result[4] = 0;
  result[5] = "";
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphInheritanceData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_RenderGraphFile(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79510, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF79510))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A120, "RenderGraphFile");
    __cxa_guard_release(&qword_26AF79510);
  }
  return &unk_26AF7A120;
}

void re::initInfo_RenderGraphFile(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0xA3C1F00635BFA5A8;
  v26[1] = "RenderGraphFile";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79518, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF79518);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF79B38 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphTargetData>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "targets";
      *(void *)(v10 + 16) = &qword_26AF79868;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF79B40 = v10;
      long long v11 = (re *)re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphBufferData>>::get(v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "buffers";
      *(void *)(v12 + 16) = &qword_26AF798A8;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000003;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF79B48 = v12;
      long long v13 = (re *)re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphNodeDataPointer>>::get(v13);
      uint64_t v14 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "nodes";
      *(void *)(v14 + 16) = &qword_26AF798E8;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x7800000004;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF79B50 = v14;
      uint64_t v15 = (re *)re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInputData>>::get(v15);
      uint64_t v16 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "inputs";
      *(void *)(v16 + 16) = &qword_26AF79928;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xA000000005;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF79B58 = v16;
      uint64_t v17 = (re *)re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphOutputData>>::get(v17);
      uint64_t v18 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "outputs";
      *(void *)(v18 + 16) = &qword_26AF79968;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0xF000000006;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF79B60 = v18;
      uint64_t v19 = (re *)re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphSpecifyOperationBase *>>::get(v19);
      uint64_t v20 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "operations";
      *(void *)(v20 + 16) = &qword_26AF799A8;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x11800000007;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF79B68 = v20;
      long long v21 = (re *)re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataNodeConnection>>::get(v21);
      uint64_t v22 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "connections";
      *(void *)(v22 + 16) = &qword_26AF79A28;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x14000000008;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF79B70 = v22;
      long long v23 = (re *)re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInheritanceData>>::get(v23);
      uint64_t v24 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "propertyInheritance";
      *(void *)(v24 + 16) = &qword_26AF79A68;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xC800000009;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF79B78 = v24;
      __cxa_guard_release(&qword_26AF79518);
    }
  }
  *((void *)this + 2) = 0x36000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF79B38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderGraphFile>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderGraphFile>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphFile>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphFile>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

void sub_2334B6B28(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphTargetData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79590, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF79590);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF79868);
      qword_26AF79868 = (uint64_t)&unk_26E6D4DE8;
      __cxa_guard_release(&qword_26AF79590);
    }
  }
  if ((byte_26AF793A7 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF794A8;
    if (qword_26AF794A8
      || (uint64_t v1 = re::allocInfo_RenderGraphTargetData(a1),
          qword_26AF794A8 = (uint64_t)v1,
          re::initInfo_RenderGraphTargetData((re *)v1, v2),
          (byte_26AF793A7 & 1) == 0))
    {
      byte_26AF793A7 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79868, 0);
      qword_26AF79878 = 0x2800000003;
      dword_26AF79880 = v3;
      word_26AF79884 = 0;
      *(void *)&xmmword_26AF79888 = 0;
      *((void *)&xmmword_26AF79888 + 1) = 0xFFFFFFFFLL;
      qword_26AF79898 = (uint64_t)v1;
      qword_26AF798A0 = 0;
      qword_26AF79868 = (uint64_t)&unk_26E6D4DE8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF79868, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79888 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B6E58(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphBufferData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF79598, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF79598);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF798A8);
      qword_26AF798A8 = (uint64_t)&unk_26E6D4E80;
      __cxa_guard_release(&qword_26AF79598);
    }
  }
  if ((byte_26AF793A8 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF793E8;
    if (qword_26AF793E8
      || (uint64_t v1 = re::allocInfo_RenderGraphBufferData(a1),
          qword_26AF793E8 = (uint64_t)v1,
          re::initInfo_RenderGraphBufferData((re *)v1, v2),
          (byte_26AF793A8 & 1) == 0))
    {
      byte_26AF793A8 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF798A8, 0);
      qword_26AF798B8 = 0x2800000003;
      dword_26AF798C0 = v3;
      word_26AF798C4 = 0;
      *(void *)&xmmword_26AF798C8 = 0;
      *((void *)&xmmword_26AF798C8 + 1) = 0xFFFFFFFFLL;
      qword_26AF798D8 = (uint64_t)v1;
      qword_26AF798E0 = 0;
      qword_26AF798A8 = (uint64_t)&unk_26E6D4E80;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF798A8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF798C8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B7160(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphNodeDataPointer>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795A0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF795A0);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF798E8);
      qword_26AF798E8 = (uint64_t)&unk_26E6D4F18;
      __cxa_guard_release(&qword_26AF795A0);
    }
  }
  if ((byte_26AF793A9 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF794C0;
    if (qword_26AF794C0
      || (uint64_t v1 = re::allocInfo_RenderGraphNodeDataPointer(a1),
          qword_26AF794C0 = (uint64_t)v1,
          re::initInfo_RenderGraphNodeDataPointer((re *)v1, v2),
          (byte_26AF793A9 & 1) == 0))
    {
      byte_26AF793A9 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF798E8, 0);
      qword_26AF798F8 = 0x2800000003;
      dword_26AF79900 = v3;
      word_26AF79904 = 0;
      *(void *)&xmmword_26AF79908 = 0;
      *((void *)&xmmword_26AF79908 + 1) = 0xFFFFFFFFLL;
      qword_26AF79918 = (uint64_t)v1;
      qword_26AF79920 = 0;
      qword_26AF798E8 = (uint64_t)&unk_26E6D4F18;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF798E8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79908 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B746C(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInputData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795A8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF795A8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF79928);
      qword_26AF79928 = (uint64_t)&unk_26E6D4FB0;
      __cxa_guard_release(&qword_26AF795A8);
    }
  }
  if ((byte_26AF793AA & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF794D8;
    if (qword_26AF794D8
      || (uint64_t v1 = re::allocInfo_RenderGraphInputData(a1),
          qword_26AF794D8 = (uint64_t)v1,
          re::initInfo_RenderGraphInputData((re *)v1, v2),
          (byte_26AF793AA & 1) == 0))
    {
      byte_26AF793AA = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79928, 0);
      qword_26AF79938 = 0x2800000003;
      dword_26AF79940 = v3;
      word_26AF79944 = 0;
      *(void *)&xmmword_26AF79948 = 0;
      *((void *)&xmmword_26AF79948 + 1) = 0xFFFFFFFFLL;
      qword_26AF79958 = (uint64_t)v1;
      qword_26AF79960 = 0;
      qword_26AF79928 = (uint64_t)&unk_26E6D4FB0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF79928, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79948 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B777C(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphOutputData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795B0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF795B0);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF79968);
      qword_26AF79968 = (uint64_t)&unk_26E6D5048;
      __cxa_guard_release(&qword_26AF795B0);
    }
  }
  if ((byte_26AF793AB & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF794F0;
    if (qword_26AF794F0
      || (uint64_t v1 = re::allocInfo_RenderGraphOutputData(a1),
          qword_26AF794F0 = (uint64_t)v1,
          re::initInfo_RenderGraphOutputData((re *)v1, v2),
          (byte_26AF793AB & 1) == 0))
    {
      byte_26AF793AB = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79968, 0);
      qword_26AF79978 = 0x2800000003;
      dword_26AF79980 = v3;
      word_26AF79984 = 0;
      *(void *)&xmmword_26AF79988 = 0;
      *((void *)&xmmword_26AF79988 + 1) = 0xFFFFFFFFLL;
      qword_26AF79998 = (uint64_t)v1;
      qword_26AF799A0 = 0;
      qword_26AF79968 = (uint64_t)&unk_26E6D5048;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF79968, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79988 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B7A88(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphSpecifyOperationBase *>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795B8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF795B8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF799A8);
      qword_26AF799A8 = (uint64_t)&unk_26E6D50E0;
      __cxa_guard_release(&qword_26AF795B8);
    }
  }
  if ((byte_26AF793AC & 1) == 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795C0, memory_order_acquire) & 1) == 0)
    {
      a1 = (re *)__cxa_guard_acquire(&qword_26AF795C0);
      if (a1)
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF799E8);
        __cxa_guard_release(&qword_26AF795C0);
      }
    }
    if ((byte_26AF793AD & 1) == 0)
    {
      byte_26AF793AD = 1;
      uint64_t v1 = (re *)qword_26AF79468;
      if (!qword_26AF79468)
      {
        uint64_t v1 = (re *)re::allocInfo_RenderGraphSpecifyOperationBase(a1);
        qword_26AF79468 = (uint64_t)v1;
        re::initInfo_RenderGraphSpecifyOperationBase(v1, v2);
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF799E8, 0);
      qword_26AF799F8 = 0x800000001;
      dword_26AF79A00 = 8;
      word_26AF79A04 = 0;
      *(void *)&xmmword_26AF79A08 = 0;
      *((void *)&xmmword_26AF79A08 + 1) = 0xFFFFFFFFLL;
      qword_26AF799E8 = (uint64_t)&unk_26E6CDA08;
      qword_26AF79A18 = (uint64_t)v1;
      unk_26AF79A20 = 0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF799E8, (const re::IntrospectionBase *)&v18);
      if (BYTE8(v18)) {
        long long v5 = v19;
      }
      else {
        long long v5 = (char *)&v18 + 9;
      }
      if (void)v18 && (BYTE8(v18)) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
      if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
      {
        long long v6 = v18;
      }
      else
      {
        long long v18 = *((_OWORD *)v1 + 2);
        long long v6 = v16;
      }
      xmmword_26AF79A08 = v6;
      re::StringID::destroyString((re::StringID *)__s1);
    }
    if ((byte_26AF793AC & 1) == 0)
    {
      byte_26AF793AC = 1;
      int v7 = dword_26AF79A00;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF799A8, 0);
      qword_26AF799B8 = 0x2800000003;
      dword_26AF799C0 = v7;
      word_26AF799C4 = 0;
      *(void *)&xmmword_26AF799C8 = 0;
      *((void *)&xmmword_26AF799C8 + 1) = 0xFFFFFFFFLL;
      qword_26AF799D8 = (uint64_t)&qword_26AF799E8;
      qword_26AF799E0 = 0;
      qword_26AF799A8 = (uint64_t)&unk_26E6D50E0;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_26AF799A8, (const re::IntrospectionBase *)&v18);
      if (BYTE8(v18)) {
        long long v10 = v19;
      }
      else {
        long long v10 = (char *)&v18 + 9;
      }
      if (void)v18 && (BYTE8(v18)) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
      long long v15 = xmmword_26AF79A08;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v16);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v14 + 1) = v12;
      }
      else
      {
        *(_OWORD *)__s1 = v15;
        re::TypeBuilder::beginListType((uint64_t)&v18, (uint64_t *)&v16, 1, 0x28uLL, 8uLL, (long long *)__s1);
        re::TypeBuilder::setConstructor((uint64_t)&v18, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v18, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v18, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v18, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v18, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v18, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v18, v13);
      }
      xmmword_26AF799C8 = v14;
      re::StringID::destroyString((re::StringID *)&v16);
    }
  }
}

void sub_2334B7F60(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataNodeConnection>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795C8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF795C8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF79A28);
      qword_26AF79A28 = (uint64_t)&unk_26E6D5178;
      __cxa_guard_release(&qword_26AF795C8);
    }
  }
  if ((byte_26AF793AE & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF79400;
    if (qword_26AF79400
      || (uint64_t v1 = re::allocInfo_RenderGraphDataNodeConnection(a1),
          qword_26AF79400 = (uint64_t)v1,
          re::initInfo_RenderGraphDataNodeConnection((re *)v1, v2),
          (byte_26AF793AE & 1) == 0))
    {
      byte_26AF793AE = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79A28, 0);
      qword_26AF79A38 = 0x2800000003;
      dword_26AF79A40 = v3;
      word_26AF79A44 = 0;
      *(void *)&xmmword_26AF79A48 = 0;
      *((void *)&xmmword_26AF79A48 + 1) = 0xFFFFFFFFLL;
      qword_26AF79A58 = (uint64_t)v1;
      qword_26AF79A60 = 0;
      qword_26AF79A28 = (uint64_t)&unk_26E6D5178;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF79A28, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      int v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79A48 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B827C(_Unwind_Exception *a1)
{
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInheritanceData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF795D0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF795D0);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF79A68);
      qword_26AF79A68 = (uint64_t)&unk_26E6D5210;
      __cxa_guard_release(&qword_26AF795D0);
    }
  }
  if ((byte_26AF793AF & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF79508;
    if (qword_26AF79508
      || (uint64_t v1 = re::allocInfo_RenderGraphInheritanceData(a1),
          qword_26AF79508 = (uint64_t)v1,
          re::initInfo_RenderGraphInheritanceData((re *)v1, v2),
          (byte_26AF793AF & 1) == 0))
    {
      byte_26AF793AF = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF79A68, 0);
      qword_26AF79A78 = 0x2800000003;
      dword_26AF79A80 = v3;
      word_26AF79A84 = 0;
      *(void *)&xmmword_26AF79A88 = 0;
      *((void *)&xmmword_26AF79A88 + 1) = 0xFFFFFFFFLL;
      qword_26AF79A98 = (uint64_t)v1;
      qword_26AF79AA0 = 0;
      qword_26AF79A68 = (uint64_t)&unk_26E6D5210;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF79A68, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      int v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF79A88 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2334B8588(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::RenderGraphFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E6D52C8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  long long v4 = (void *)(a3 + 8);
  long long v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(void *)a3 = &unk_26E6D4A70;
  *(void *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_DWORD *)(a3 + 264) = 0;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_DWORD *)(a3 + 344) = 0;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  re::DynamicString::setCapacity((void *)(a3 + 368), 0);
  double result = 0.0;
  *(_OWORD *)(a3 + 428) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(void *)(a3 + 444) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 456) = 0u;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_DWORD *)(a3 + 488) = 0;
  *(void *)(a3 + 492) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 504) = 0u;
  *(_OWORD *)(a3 + 520) = 0u;
  *(_DWORD *)(a3 + 536) = 0;
  *(void *)(a3 + 540) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 552) = 0u;
  *(_OWORD *)(a3 + 568) = 0u;
  *(_DWORD *)(a3 + 584) = 0;
  *(void *)(a3 + 588) = 0x7FFFFFFFLL;
  *(_DWORD *)(a3 + 632) = 0;
  *(_OWORD *)(a3 + 600) = 0u;
  *(_OWORD *)(a3 + 616) = 0u;
  *(void *)(a3 + 636) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 648) = 0u;
  *(_OWORD *)(a3 + 664) = 0u;
  *(_DWORD *)(a3 + 680) = 0;
  *(void *)(a3 + 684) = 0x7FFFFFFFLL;
  *(void *)(a3 + 696) = 0;
  *(unsigned char *)(a3 + 704) = 1;
  *(_OWORD *)(a3 + 712) = 0u;
  *(_OWORD *)(a3 + 728) = 0u;
  *(_OWORD *)(a3 + 744) = 0u;
  *(_OWORD *)(a3 + 756) = 0u;
  *(void *)(a3 + 772) = 0x7FFFFFFFLL;
  *(void *)(a3 + 800) = 0;
  *(_DWORD *)(a3 + 808) = 0;
  *(_OWORD *)(a3 + 784) = 0u;
  *(void *)(a3 + 856) = 0;
  *(_DWORD *)(a3 + 848) = 0;
  *(_OWORD *)(a3 + 816) = 0u;
  *(_OWORD *)(a3 + 832) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphFile>(int a1, int a2, re::RenderGraphFile *this)
{
}

double re::internal::defaultConstructV2<re::RenderGraphFile>(uint64_t a1)
{
  *(void *)a1 = &unk_26E6D52C8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(void *)a1 = &unk_26E6D4A70;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 368), 0);
  double result = 0.0;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 444) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 492) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  *(void *)(a1 + 540) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_DWORD *)(a1 + 584) = 0;
  *(void *)(a1 + 588) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 636) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 0;
  *(void *)(a1 + 684) = 0x7FFFFFFFLL;
  *(void *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 704) = 1;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 756) = 0u;
  *(void *)(a1 + 772) = 0x7FFFFFFFLL;
  *(void *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  return result;
}

uint64_t re::introspect_RenderGraphFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFile", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphFile, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphFile>, this);
}

void re::RenderGraphSpecifyLaneOperation::~RenderGraphSpecifyLaneOperation(re::RenderGraphSpecifyLaneOperation *this)
{
  if (*((unsigned char *)this + 32)) {
    re::AssetHandle::~AssetHandle((re::RenderGraphSpecifyLaneOperation *)((char *)this + 112));
  }
  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 16));
}

{
  uint64_t vars8;

  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 184));
  if (*((unsigned char *)this + 32)) {
    re::AssetHandle::~AssetHandle((re::RenderGraphSpecifyLaneOperation *)((char *)this + 112));
  }
  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 16));
  JUMPOUT(0x237DBCBD0);
}

double re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 16 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 16;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 24 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 24 * v3 + 8) == v2) {
        return v5 + 24 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 24 * v3 + 16;
}

uint64_t re::RenderGraphDataStore::tryGetByTypeNameHash(re::RenderGraphDataStore *this, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = (a2 + (a3 << 6) + (a3 >> 2) - 0x61C8864680B583E9) ^ a3;
  uint64_t v4 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)this + 16, (uint64_t *)&v7);
  if (!v4)
  {
    uint64_t v4 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)this + 64, (uint64_t *)&v7);
    if (!v4)
    {
      uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 14, &v7);
      if (v5 == -1) {
        return 0;
      }
      uint64_t v4 = *((void *)this + 15) + 16 * v5 + 8;
    }
  }
  return *(void *)v4;
}

double re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::NodePatchData>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

__n128 re::DynamicArray<re::DetailedError>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DetailedError>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  __n128 result = *a2;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(__n128 *)uint64_t v5 = result;
  *(void *)(v5 + 40) = a2[2].n128_u64[1];
  unint64_t v7 = a2[1].n128_u64[1];
  *(void *)(v5 + 16) = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  unint64_t v8 = a2[2].n128_u64[0];
  a2[2].n128_u64[1] = 0;
  unint64_t v10 = *(void *)(v5 + 24);
  unint64_t v9 = *(void *)(v5 + 32);
  *(void *)(v5 + 24) = v7;
  *(void *)(v5 + 32) = v8;
  a2[1].n128_u64[1] = v10;
  a2[2].n128_u64[0] = v9;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::DetailedError>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DetailedError>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DetailedError>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::DetailedError>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::DetailedError>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[6 * v9];
        long long v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)v8;
          *((_OWORD *)v11 + 1) = 0u;
          *((_OWORD *)v11 + 2) = 0u;
          *(_OWORD *)long long v11 = v12;
          uint64_t v14 = v8[2];
          long long v13 = (re::DynamicString *)(v8 + 2);
          void v11[2] = v14;
          *(void *)long long v13 = 0;
          v11[5] = *((void *)v13 + 3);
          *((void *)v13 + 3) = 0;
          uint64_t v16 = v11[3];
          uint64_t v15 = v11[4];
          uint64_t v17 = *((void *)v13 + 2);
          v11[3] = *((void *)v13 + 1);
          v11[4] = v17;
          *((void *)v13 + 1) = v16;
          *((void *)v13 + 2) = v15;
          re::DynamicString::deinit(v13);
          unint64_t v8 = (void *)((char *)v13 + 32);
          v11 += 6;
        }
        while (v8 != v10);
        unint64_t v8 = (void *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::RenderGraphTargetData::~RenderGraphTargetData(re::RenderGraphTargetData *this)
{
}

void re::RenderGraphInputData::~RenderGraphInputData(re::RenderGraphInputData *this)
{
}

void re::RenderGraphOutputData::~RenderGraphOutputData(re::RenderGraphOutputData *this)
{
}

uint64_t re::DynamicArray<re::BindPointAndPath>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = (re::StringID *)(v3 + 48);
        uint64_t v6 = v4 << 6;
        do
        {
          re::StringID::destroyString(v5);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v5 - 40);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v5 - 40);
          uint64_t v5 = (re::StringID *)((char *)v5 + 64);
          v6 -= 64;
        }
        while (v6);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphBufferData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 88 * v4;
        do
        {
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v3 + 48);
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 88);
          v5 -= 88;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        do
        {
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v3 + 16);
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 56);
          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v6 + 56));
          re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v6 + 32));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 88;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 32;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 136 * v4;
        do
        {
          re::DynamicArray<re::DynamicString>::deinit(v3 + 72);
          re::DynamicString::deinit((re::DynamicString *)(v3 + 40));
          re::DynamicArray<re::DynamicString>::deinit(v3);
          v3 += 136;
          v5 -= 136;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::RenderGraphDataStoreConnection::~RenderGraphDataStoreConnection(re::RenderGraphDataStoreConnection *this)
{
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4)
{
  uint64_t v6 = *(unsigned int *)(a1 + 36);
  if (v6 == 0x7FFFFFFF)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    int v7 = v6;
    if (v6 == *(_DWORD *)(a1 + 24))
    {
      int v9 = *(_DWORD *)(a1 + 28);
      signed int v10 = 2 * v9;
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v10) {
          BOOL v12 = v6 == v10;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12 && (v9 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(void *)&v26[36] = 0x7FFFFFFFLL;
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v26, v11, v10);
          long long v13 = *(_OWORD *)v26;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v13;
          uint64_t v14 = *(void *)&v26[16];
          uint64_t v15 = *(void *)(a1 + 16);
          *(void *)&v26[16] = v15;
          *(void *)(a1 + 16) = v14;
          long long v17 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          unsigned int v16 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v17;
          uint64_t v18 = v16;
          if (v16)
          {
            uint64_t v19 = (void *)(v15 + 8);
            do
            {
              if ((*(_DWORD *)(v19 - 1) & 0x80000000) != 0) {
                re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v19 % (unint64_t)*(unsigned int *)(a1 + 24), *v19, v19);
              }
              v19 += 2;
              --v18;
            }
            while (v18);
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v10) {
          signed int v22 = v10;
        }
        else {
          signed int v22 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v7 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v7 + 1;
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 16 * v6);
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 16 * v6);
    *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
  }
  uint64_t v23 = 16 * v6;
  *(_DWORD *)(v20 + v23) = v21 | 0x80000000;
  uint64_t v24 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v23) = *(_DWORD *)(*(void *)(a1 + 16) + 16 * v6) & 0x80000000 | *(_DWORD *)(v24 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 16 * v6 + 8) = *a4;
  *(_DWORD *)(v24 + 4 * a2) = v6;
  ++*(_DWORD *)(a1 + 28);
  return v6;
}

void sub_2334B96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  BOOL v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_256, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

void std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

__n128 std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26E6D4B50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6D4B50;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, unint64_t **a3)
{
  if (*(_DWORD *)(a2 + 16) == 11)
  {
    uint64_t v4 = result;
    uint64_t v5 = *a3;
    unint64_t v6 = *(const char **)(a2 + 48);
    if (!strcmp(v6, "RenderGraphTargetHandle"))
    {
      unint64_t v7 = *v5;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey(*(void *)(v4 + 8), *v5))
      {
        uint64_t v8 = *(void *)(v4 + 16);
        signed int v9 = *(unsigned char **)v8;
        if (!**(unsigned char **)v8)
        {
          re::DynamicString::append(*(re::DynamicString **)(v8 + 8), "\n", 1uLL);
          signed int v9 = *(unsigned char **)v8;
          unint64_t v7 = *v5;
        }
        *signed int v9 = 0;
        re::DynamicString::appendf(*(re::DynamicString **)(v4 + 24), "Node (%s) references target named (%llu) which is undefined.", *(const char **)(*(void *)(*(void *)(v4 + 32) + 8) + 16), v7);
        unint64_t v6 = *(const char **)(a2 + 48);
      }
    }
    __n128 result = strcmp(v6, "RenderGraphBufferHandle");
    if (!result)
    {
      unint64_t v10 = *v5;
      __n128 result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey(*(void *)(v4 + 40), *v5);
      if ((result & 1) == 0)
      {
        uint64_t v11 = *(void *)(v4 + 16);
        BOOL v12 = *(unsigned char **)v11;
        if (!**(unsigned char **)v11)
        {
          re::DynamicString::append(*(re::DynamicString **)(v11 + 8), "\n", 1uLL);
          BOOL v12 = *(unsigned char **)v11;
          unint64_t v10 = *v5;
        }
        unsigned char *v12 = 0;
        return re::DynamicString::appendf(*(re::DynamicString **)(v4 + 24), "Node (%s) references buffer named (%llu) which is undefined.", *(const char **)(*(void *)(*(void *)(v4 + 32) + 8) + 16), v10);
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

void re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)signed int v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + 16) = *v13;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void sub_2334B9C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_256, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

void re::HashSetBase<re::RenderGraphSpecifyOperationBase *,re::RenderGraphSpecifyOperationBase *,re::internal::ValueAsKey<re::RenderGraphSpecifyOperationBase *>,re::Hash<re::RenderGraphSpecifyOperationBase *>,re::EqualTo<re::RenderGraphSpecifyOperationBase *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)signed int v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashSetBase<re::RenderGraphSpecifyOperationBase *,re::RenderGraphSpecifyOperationBase *,re::internal::ValueAsKey<re::RenderGraphSpecifyOperationBase *>,re::Hash<re::RenderGraphSpecifyOperationBase *>,re::EqualTo<re::RenderGraphSpecifyOperationBase *>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 24 * v17 + 16) = *v13;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void sub_2334B9FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *re::DynamicArray<re::RenderGraphDataStoreConnection>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          uint64_t v2 = 136 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 136 * v9;
        do
        {
          uint64_t v12 = v8 + v10;
          uint64_t v13 = &v7[v10 / 8];
          v13[4] = 0;
          v13[1] = 0;
          v13[2] = 0;
          *uint64_t v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 8);
          *uint64_t v13 = *(void *)(v8 + v10);
          v13[1] = v14;
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          uint64_t v15 = v7[v10 / 8 + 2];
          v13[2] = *(void *)(v8 + v10 + 16);
          *(void *)(v12 + 16) = v15;
          uint64_t v16 = v7[v10 / 8 + 4];
          v13[4] = *(void *)(v8 + v10 + 32);
          *(void *)(v12 + 32) = v16;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *(_OWORD *)(v13 + 5) = 0u;
          *(_OWORD *)(v13 + 7) = 0u;
          v13[5] = *(void *)(v8 + v10 + 40);
          *(void *)(v8 + v10 + 40) = 0;
          BOOL v13[8] = *(void *)(v8 + v10 + 64);
          *(void *)(v12 + 64) = 0;
          uint64_t v18 = v7[v10 / 8 + 6];
          uint64_t v17 = v7[v10 / 8 + 7];
          uint64_t v19 = *(void *)(v8 + v10 + 56);
          v13[6] = *(void *)(v8 + v10 + 48);
          v13[7] = v19;
          LODWORD(v19) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(void *)(v12 + 48) = v18;
          *(void *)(v12 + 56) = v17;
          v13[13] = 0;
          *((_DWORD *)v13 + 24) = 0;
          v13[10] = 0;
          v13[11] = 0;
          v13[9] = 0;
          int v20 = (uint64_t *)(v8 + v10 + 72);
          uint64_t v21 = *v20;
          *((_DWORD *)v13 + 6) = v19;
          uint64_t v22 = *(void *)(v8 + v10 + 80);
          v13[9] = v21;
          *int v20 = 0;
          v13[10] = v22;
          *(void *)(v12 + 80) = 0;
          uint64_t v23 = v7[v10 / 8 + 11];
          v13[11] = *(void *)(v8 + v10 + 88);
          *(void *)(v12 + 88) = v23;
          uint64_t v24 = v7[v10 / 8 + 13];
          v13[13] = *(void *)(v8 + v10 + 104);
          *(void *)(v12 + 104) = v24;
          *(_DWORD *)(v12 + 96) = *(_DWORD *)(v8 + v10 + 96) + 1;
          *((_DWORD *)v13 + 24) = LODWORD(v7[v10 / 8 + 12]) + 1;
          long long v25 = *(_OWORD *)(v8 + v10 + 112);
          v13[16] = *(void *)(v8 + v10 + 128);
          *((_OWORD *)v13 + 7) = v25;
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)v20);
          re::DynamicString::deinit((re::DynamicString *)(v8 + v10 + 40));
          re::DynamicArray<re::DynamicString>::deinit(v8 + v10);
          v10 += 136;
        }
        while (v12 + 136 != v11);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize((uint64_t *)a1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = *a2;
  uint64_t v17 = *a3;
  uint64_t v18 = (unint64_t *)(*((void *)a1 + 1) + 16 * (v13 + 16 * v11));
  unint64_t *v18 = *a2;
  v18[1] = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  unint64_t v20 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v20 >> 31) ^ v20;
}

void re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize(uint64_t *a1)
{
  unint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = a1[7];
  long long v28 = 0u;
  *(_OWORD *)long long v29 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v29[16], 0, 32);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v28, v7, v8);
  unint64_t v9 = a1[2];
  uint64_t v10 = *a1;
  if (v9 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v9 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(&v28, a1[1] + 16 * v15, a1[1] + 16 * v15 + 8);
        unint64_t v23 = v15 >> 4;
        unint64_t v9 = a1[2];
        if (v15 >> 4 >= v9 >> 4) {
          break;
        }
        unint64_t v24 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
        if (v24 >= 0x40)
        {
          if (v23 == (v9 >> 4) - 1) {
            break;
          }
          uint64_t v10 = *a1;
          uint64_t v25 = 16 * v23 + 16;
          unint64_t v26 = ~v23 + (v9 >> 4);
          while (1)
          {
            unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + v25)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
            unint64_t v27 = __clz(__rbit64(v14));
            if (v27 <= 0x3F) {
              break;
            }
            v25 += 16;
            if (!--v26) {
              goto LABEL_12;
            }
          }
          unint64_t v15 = v27 + v25;
        }
        else
        {
          unint64_t v15 = v24 + (v15 & 0xFFFFFFFFFFFFFFF0);
        }
      }
      while (v15 != -1);
      uint64_t v10 = *a1;
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)&v29[40];
  *(void *)&v29[40] = a1[7];
  uint64_t v17 = a1[1];
  long long v18 = v28;
  long long v19 = *(_OWORD *)v29;
  *(void *)&long long v28 = v10;
  *((void *)&v28 + 1) = v17;
  *(void *)long long v29 = v9;
  long long v20 = *(_OWORD *)&v29[16];
  long long v21 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v29[32];
  a1[7] = v16;
  *(_OWORD *)&v29[24] = v21;
  long long v22 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v20;
  *(_OWORD *)&unsigned char v29[8] = v22;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v28);
}

void sub_2334BA71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(void *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v28, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v28;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)long long v28 = v5;
      *(void *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        uint64_t v10 = 0;
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = 88 * v8;
        do
        {
          unint64_t v14 = (unint64_t *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            unint64_t v15 = *v14;
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = *v14 % v16;
            unsigned int v18 = *(_DWORD *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              unsigned int v18 = *(_DWORD *)(a1 + 32);
              unsigned int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                unsigned int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 88 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 88 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 88 * v18 + 8) = v21 | 0x80000000;
            uint64_t v22 = *(void *)(a1 + 16) + 88 * v18;
            *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 88 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 88 * v18 + 16) = v14[2];
            uint64_t v23 = *(void *)(a1 + 16) + 88 * v18;
            unint64_t v24 = (void *)(v6 + v10);
            *(void *)(v23 + 24) = v14[3];
            *(void *)(v23 + 32) = 0;
            *(void *)(v23 + 40) = 0;
            *(void *)(v23 + 48) = 0;
            *(void *)(v23 + 32) = *(void *)(v6 + v10 + 32);
            v24[4] = 0;
            *(void *)(v23 + 40) = *(void *)(v6 + v10 + 40);
            v24[5] = 0;
            uint64_t v25 = *(void *)(v23 + 48);
            *(void *)(v23 + 48) = *(void *)(v6 + v10 + 48);
            v24[6] = v25;
            *(void *)(v23 + 56) = 0;
            *(void *)(v23 + 64) = 0;
            *(void *)(v23 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
            *(void *)(v23 + 56) = *(void *)(v6 + v10 + 56);
            v24[7] = 0;
            *(void *)(v23 + 64) = *(void *)(v6 + v10 + 64);
            v24[8] = 0;
            uint64_t v26 = *(void *)(v23 + 72);
            *(void *)(v23 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *(void *)(v6 + v10 + 72);
            v24[9] = v26;
            *(unsigned char *)(v23 + 80) = *(unsigned char *)(v6 + v10 + 80);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v10 += 88;
        }
        while (v13 != v10);
      }
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2) {
      signed int v27 = a2;
    }
    else {
      signed int v27 = 3;
    }
  }
}

void sub_2334BA9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_256, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 8), (void *)(*(void *)&v13[16] + v10 + 8), (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void sub_2334BAC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_256, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicArray<re::NodePatchData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(uint64_t **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 56 * v4;
        do
        {
          re::FixedArray<CoreIKTransform>::deinit(v3 + 3);
          re::FixedArray<CoreIKTransform>::deinit(v3);
          v3 += 7;
          v5 -= 56;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(uint64_t **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::NodePatchData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::NodePatchData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[7 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t *v11 = 0;
          v11[1] = 0;
          void v11[2] = 0;
          uint64_t v12 = v8[1];
          uint64_t *v11 = *v8;
          v11[1] = v12;
          *uint64_t v8 = 0;
          v8[1] = 0;
          uint64_t v13 = v11[2];
          void v11[2] = v8[2];
          v8[2] = v13;
          v11[3] = 0;
          v11[4] = 0;
          v11[5] = 0;
          v11[3] = v8[3];
          v8[3] = 0;
          uint64_t v14 = v11[5];
          uint64_t v15 = v8[5];
          v11[4] = v8[4];
          v11[5] = v15;
          uint8_t v8[4] = 0;
          v8[5] = v14;
          v11[6] = v8[6];
          re::FixedArray<CoreIKTransform>::deinit(v8 + 3);
          re::FixedArray<CoreIKTransform>::deinit(v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)long long v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void sub_2334BB3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_256, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_256, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(result + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(result + 24))
    {
      uint64_t result = re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v7 + 24);
      int v9 = *(_DWORD *)(v7 + 32);
    }
    *(_DWORD *)(v7 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(v7 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(result + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(v7 + 16) + v13) = *(_DWORD *)(*(void *)(v7 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(v7 + 8) + 4 * a2);
  *(void *)(*(void *)(v7 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(v7 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(v7 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(v7 + 28);
  return result;
}

void std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

__n128 std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26E6D4BD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6D4BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, unint64_t **a3)
{
  if (*(_DWORD *)(a2 + 16) != 11) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(result + 24);
  if (*(void *)(result + 8) != a2) {
    goto LABEL_5;
  }
  __n128 result = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(v6 + 552, *v5);
  if (result)
  {
    v5[1] = *(void *)(result + 8);
LABEL_5:
    if (*(void *)(v4 + 16) != a2) {
      return result;
    }
    __n128 result = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(v6 + 600, *v5);
    if (result)
    {
      v5[1] = *(void *)(result + 8);
      return result;
    }
    uint64_t v7 = *(void *)(v4 + 32);
    if (*(unsigned char *)(v6 + 16)) {
      uint64_t v8 = *(void *)(v6 + 24);
    }
    else {
      uint64_t v8 = v6 + 17;
    }
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v4 + 32);
  if (*(unsigned char *)(v6 + 16)) {
    uint64_t v8 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v8 = v6 + 17;
  }
LABEL_14:
  re::DynamicString::format((re::DynamicString *)"Invalid RenderGraphFile detected (%s). Call calculateValidity before using.", (re::DynamicString *)&v9, v8);
  re::RenderFrame::addError(v7, (uint64_t)&v9);
  __n128 result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

void sub_2334BB914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a11)
  {
    if (a12) {
      (*(void (**)(void))(*(void *)a11 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

re::StringID *re::HashTable<re::StringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v30, v14, v13);
          long long v16 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v30[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * ((*(void *)(v22 - 16) >> 31) ^ (*(void *)(v22 - 16) >> 1));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 32;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13) {
          signed int v27 = 2 * v12;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 32 * v9);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 32 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v28) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  __n128 result = re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void sub_2334BBBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *re::DynamicArray<re::BindPointAndPath>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::BindPointAndPath>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BindPointAndPath>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::BindPointAndPath>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::BindPointAndPath>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v9 << 6;
        do
        {
          uint64_t v12 = re::BindPoint::BindPoint((uint64_t)&v7[v10 / 8], (uint64_t *)(v8 + v10));
          uint64_t v14 = *(void *)(v8 + v10 + 48);
          signed int v13 = (re::StringID *)(v8 + v10 + 48);
          *(void *)(v12 + 48) = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          *(void *)(v12 + 48) = *(void *)v13 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          *(void *)(v12 + 56) = *(void *)(v8 + v10 + 56);
          *(void *)signed int v13 = 0;
          *((void *)v13 + 1) = "";
          re::StringID::destroyString(v13);
          uint64_t v15 = v8 + v10 + 8;
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v15);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v15);
          v10 += 64;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a2);
  *(void *)a2 = a3;
  __n128 result = re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::RenderGraphDataStoreConnection>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      __n128 result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  memset(v27, 0, 40);
  long long v26 = 0u;
  uint64_t v24 = 0;
  memset(&v25[8], 0, 32);
  long long v22 = 0u;
  long long v23 = 0u;
  re::DynamicString::setCapacity(v25, 0);
  *(void *)&unsigned char v25[32] = 0;
  long long v26 = 0uLL;
  LODWORD(v27[0]) = 0;
  memset((char *)v27 + 8, 0, 32);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::RenderGraphDataStoreConnection>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 136 * v8;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)uint64_t v9 = v22;
  *(void *)&long long v22 = 0;
  *(void *)(v9 + 8) = *((void *)&v22 + 1);
  *((void *)&v22 + 1) = 0;
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v9 + 16) = v23;
  *(void *)&long long v23 = v10;
  uint64_t v11 = *(void *)(v9 + 32);
  *(void *)(v9 + 32) = v24;
  uint64_t v24 = v11;
  ++DWORD2(v23);
  ++*(_DWORD *)(v9 + 24);
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(void *)(v9 + 40) = *(void *)v25;
  *(void *)uint64_t v25 = 0;
  uint64_t v12 = *(void *)(v9 + 56);
  *(void *)(v9 + 56) = *(void *)&v25[16];
  *(void *)&v25[16] = v12;
  *(void *)(v9 + 64) = *(void *)&v25[24];
  *(void *)&v25[24] = 0;
  uint64_t v13 = *(void *)(v9 + 48);
  *(void *)(v9 + 48) = *(void *)&v25[8];
  *(void *)&unsigned char v25[8] = v13;
  *(void *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 88) = 0;
  *(void *)(v9 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(v9 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *(void *)&v25[32];
  *(void *)&unsigned char v25[32] = 0;
  *(void *)(v9 + 80) = v26;
  *(void *)&long long v26 = 0;
  uint64_t v14 = *(void *)(v9 + 88);
  *(void *)(v9 + 88) = *((void *)&v26 + 1);
  *((void *)&v26 + 1) = v14;
  uint64_t v15 = *(void *)(v9 + 104);
  *(void *)(v9 + 104) = *((void *)&v27[0] + 1);
  *((void *)&v27[0] + 1) = v15;
  ++LODWORD(v27[0]);
  ++*(_DWORD *)(v9 + 96);
  long long v16 = v27[1];
  *(void *)(v9 + 128) = *(void *)&v27[2];
  *(_OWORD *)(v9 + 112) = v16;
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v25[32]);
  if (*(void *)v25)
  {
    if (v25[8]) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(**(void **)v25 + 40))(*(void *)v25, *(void *)&v25[16], v17, v18, v19);
    }
    memset(v25, 0, 32);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v22);
  long long v20 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 136 * *(void *)(a4 + 16) - 136);
  re::introspectionInitElement(a2, a3, a1[6], v20);
  return v20;
}

void sub_2334BC35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 136 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 136 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::RenderGraphDataStoreConnection>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 136 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *((void *)v3 + 4) + v8;
      re::DynamicArray<re::DynamicString>::deinit(v10 + 72);
      re::DynamicString::deinit((re::DynamicString *)(v10 + 40));
      __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicString>::deinit(v10);
      ++v9;
      v8 += 136;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)result + 1) < a2)
    {
      __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(result, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 136 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(void *)(v7 + 128) = 0;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        __n128 result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 40), 0);
        *(void *)(v7 + 80) = 0;
        *(void *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
        *(_DWORD *)(v7 + 96) = 0;
        *(void *)(v7 + 88) = 0;
        v6 += 136;
        *(_OWORD *)(v7 + 104) = 0u;
        *(_OWORD *)(v7 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0u;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  __n128 result = re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 136 * v8;
      do
      {
        re::DynamicArray<re::DynamicString>::deinit(v9 + 72);
        re::DynamicString::deinit((re::DynamicString *)(v9 + 40));
        re::DynamicArray<re::DynamicString>::deinit(v9);
        v9 += 136;
        v10 -= 136;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = re::DynamicArray<re::RenderGraphDataStoreConnection>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 136 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 136 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 136 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    *(void *)uint64_t v9 = 2;
    *(_DWORD *)&v9[8] = 2;
    *(void *)&v9[40] = -1;
    memset(&v9[12], 255, 24);
    __asm { FMOV            V0.2S, #1.0 }
    int v10 = 0;
    v12[0] = 0;
    uint64_t v11 = 0;
    *(void *)((char *)v12 + 5) = 0;
    v13[0] = 1;
    long long v14 = *(_OWORD *)v9;
    long long v17 = _D0;
    long long v16 = *(_OWORD *)&v9[32];
    long long v15 = *(_OWORD *)&v9[16];
    uint64_t v18 = 2;
    memset(v19, 0, sizeof(v19));
    char v20 = 0;
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a2, v13);
    if (v13[0]) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
    }
    uint64_t v8 = (re::AssetHandle *)&v10;
  }
  else
  {
    v13[0] = 0;
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a2, v13);
    if (!v13[0]) {
      return;
    }
    uint64_t v8 = (re::AssetHandle *)v19;
  }
  re::AssetHandle::~AssetHandle(v8);
}

uint64_t re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

uint64_t re::Optional<re::RenderGraphTargetDescriptionData>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      uint64_t v6 = (_OWORD *)(a1 + 8);
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        *uint64_t v6 = *(_OWORD *)(a2 + 8);
        long long v8 = *(_OWORD *)(a2 + 24);
        long long v9 = *(_OWORD *)(a2 + 40);
        long long v10 = *(_OWORD *)(a2 + 56);
        *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *((void *)a2 + 9);
        *(_OWORD *)(a1 + 40) = v9;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 24) = v8;
        uint64_t v11 = *(void *)(a1 + 88);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *((void *)a2 + 11) = v11;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *uint64_t v6 = *(_OWORD *)(a2 + 8);
        long long v12 = *(_OWORD *)(a2 + 24);
        long long v13 = *(_OWORD *)(a2 + 40);
        long long v14 = *(_OWORD *)(a2 + 56);
        *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *((void *)a2 + 9);
        *(_OWORD *)(a1 + 40) = v13;
        *(_OWORD *)(a1 + 56) = v14;
        *(_OWORD *)(a1 + 24) = v12;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *((void *)a2 + 11) = 0;
      }
      uint64_t v15 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *((void *)a2 + 10) = v15;
      uint64_t v16 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *((void *)a2 + 12) = v16;
      *(unsigned char *)(a1 + 104) = a2[104];
    }
  }
  return a1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

void re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, long long *a2)
{
  if (a2)
  {
    long long v4 = *a2;
    long long v8 = a2[1];
    long long v5 = a2[3];
    long long v9 = a2[2];
    long long v10 = v5;
    v6[0] = 1;
    uint64_t v11 = *((void *)a2 + 8);
    long long v7 = v4;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v12, (const re::AssetHandle *)((char *)a2 + 72));
    v12[24] = *((unsigned char *)a2 + 96);
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a1, v6);
    if (!v6[0]) {
      return;
    }
  }
  else
  {
    v6[0] = 0;
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a1, v6);
    if (!v6[0]) {
      return;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
}

void *re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 8) = 2;
    *(void *)(a2 + 16) = -1;
    *(void *)(a2 + 24) = -1;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(unsigned char *)(a2 + 36) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

__n128 re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __n128 v6 = *(__n128 *)a2;
    long long v7 = *(_OWORD *)(a2 + 16);
    int v2 = (__n128 *)(a1 + 8);
    if (*(unsigned char *)a1)
    {
      __n128 result = *(__n128 *)a2;
      uint64_t v4 = *(void *)(a2 + 16);
      int v5 = *(_DWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 28);
      *(_DWORD *)(a1 + 32) = v5;
      *(void *)(a1 + 24) = v4;
      *int v2 = result;
    }
    else
    {
      *(unsigned char *)a1 = 1;
      __n128 result = v6;
      *int v2 = v6;
      *(_OWORD *)(a1 + 24) = v7;
    }
  }
  else if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphTargetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphTargetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphTargetData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphTargetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphTargetData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphTargetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphTargetData>::deinit(a2);
  *(void *)a2 = a3;
  __n128 result = re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphTargetData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphTargetData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphTargetData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v29 = 0;
  *(_DWORD *)&v31[36] = 0;
  *(_DWORD *)&v32[8] = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v30 = "";
  *(void *)long long v31 = 2;
  *(_DWORD *)&v31[8] = 2;
  *(void *)&v31[40] = -1;
  memset(&v31[12], 255, 24);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)uint64_t v32 = _D0;
  *(void *)&v32[12] = 0x200000000;
  long long v33 = 0uLL;
  memset(&v32[20], 0, 44);
  unint64_t v14 = *(void *)(a4 + 8);
  unint64_t v13 = *(void *)(a4 + 16);
  if (v13 >= v14)
  {
    unint64_t v16 = v13 + 1;
    if (v14 < v13 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v17 = 2 * v14;
        if (!v14) {
          unint64_t v17 = 8;
        }
        if (v17 <= v16) {
          unint64_t v18 = v16;
        }
        else {
          unint64_t v18 = v17;
        }
        re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a4, v18);
      }
      else
      {
        re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a4, v16);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v13 = *(void *)(a4 + 16);
    uint64_t v15 = v29 & 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v19 = *(void *)(a4 + 32) + 160 * v13;
  *(void *)uint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFFELL | v15;
  *(void *)uint64_t v19 = v29 & 0xFFFFFFFFFFFFFFFELL | v15;
  *(void *)(v19 + 8) = v30;
  uint64_t v29 = 0;
  uint64_t v30 = "";
  uint64_t v20 = *(void *)&v32[16];
  long long v22 = *(_OWORD *)&v31[32];
  long long v21 = *(_OWORD *)v32;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)&v31[16];
  *(_OWORD *)(v19 + 48) = v22;
  *(_OWORD *)(v19 + 64) = v21;
  *(void *)(v19 + 80) = v20;
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v31;
  *(void *)(v19 + 96) = 0;
  *(void *)(v19 + 104) = 0;
  *(void *)(v19 + 88) = 0;
  *(void *)(v19 + 96) = *(void *)&v32[32];
  *(void *)&v32[32] = 0;
  uint64_t v23 = *(void *)(v19 + 88);
  *(void *)(v19 + 88) = 0;
  *(void *)(v19 + 88) = *(void *)&v32[24];
  *(void *)&v32[24] = v23;
  uint64_t v24 = *(void *)(v19 + 104);
  *(void *)(v19 + 104) = *(void *)&v32[40];
  *(void *)&v32[40] = v24;
  *(unsigned char *)(v19 + 112) = v32[48];
  *(void *)(v19 + 152) = 0;
  *(void *)(v19 + 128) = 0;
  *(void *)(v19 + 136) = 0;
  *(void *)(v19 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(_DWORD *)(v19 + 144) = 0;
  *(void *)(v19 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = *(void *)&v32[56];
  *(void *)&v32[56] = 0;
  *(void *)(v19 + 128) = v33;
  *(void *)&long long v33 = 0;
  uint64_t v25 = *(void *)(v19 + 136);
  *(void *)(v19 + 136) = *((void *)&v33 + 1);
  *((void *)&v33 + 1) = v25;
  uint64_t v26 = *(void *)(v19 + 152);
  *(void *)(v19 + 152) = v35;
  uint64_t v35 = v26;
  LODWORD(v34) = v34 + 1;
  ++*(_DWORD *)(v19 + 144);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)&v32[56]);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32[24]);
  re::StringID::destroyString((re::StringID *)&v29);
  signed int v27 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 160 * *(void *)(a4 + 16) - 160);
  re::introspectionInitElement(a2, a3, a1[6], v27);
  return v27;
}

void sub_2334BD59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphTargetData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphTargetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 160 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 160 * a3;
}

void *re::DynamicArray<re::RenderGraphTargetData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    int v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::RenderGraphTargetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          uint64_t v2 = 160 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 160 * v9;
        uint64_t v11 = v8 + 88;
        long long v12 = v7;
        do
        {
          char v13 = *(void *)(v11 - 88);
          unint64_t *v12 = *v12 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v11 - 88) & 1;
          unint64_t *v12 = *(void *)(v11 - 88) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v12[1] = *(void *)(v11 - 80);
          *(void *)(v11 - 80) = "";
          *(void *)(v11 - 88) = 0;
          unint64_t v14 = *(void *)(v11 - 8);
          long long v15 = *(_OWORD *)(v11 - 24);
          long long v16 = *(_OWORD *)(v11 - 40);
          *((_OWORD *)v12 + 2) = *(_OWORD *)(v11 - 56);
          *((_OWORD *)v12 + 3) = v16;
          *((_OWORD *)v12 + 4) = v15;
          v12[10] = v14;
          *((_OWORD *)v12 + 1) = *(_OWORD *)(v11 - 72);
          unsigned char v12[12] = 0;
          v12[13] = 0;
          v12[11] = 0;
          unsigned char v12[12] = *(void *)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          unint64_t v17 = v12[11];
          v12[11] = 0;
          v12[11] = *(void *)v11;
          *(void *)uint64_t v11 = v17;
          unint64_t v18 = v12[13];
          v12[13] = *(void *)(v11 + 16);
          *(void *)(v11 + 16) = v18;
          *((unsigned char *)v12 + 112) = *(unsigned char *)(v11 + 24);
          v12[19] = 0;
          v12[16] = 0;
          v12[17] = 0;
          v12[15] = 0;
          *((_DWORD *)v12 + 36) = 0;
          unint64_t v19 = *(void *)(v11 + 40);
          v12[15] = *(void *)(v11 + 32);
          *(void *)(v11 + 32) = 0;
          v12[16] = v19;
          *(void *)(v11 + 40) = 0;
          unint64_t v20 = v12[17];
          v12[17] = *(void *)(v11 + 48);
          *(void *)(v11 + 48) = v20;
          unint64_t v21 = v12[19];
          v12[19] = *(void *)(v11 + 64);
          *(void *)(v11 + 64) = v21;
          ++*(_DWORD *)(v11 + 56);
          ++*((_DWORD *)v12 + 36);
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v11 + 32);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          re::StringID::destroyString((re::StringID *)(v11 - 88));
          uint64_t v22 = v11 + 72;
          v11 += 160;
          v12 += 20;
        }
        while (v22 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphTargetData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v13 = 160 * a2;
    unint64_t v14 = a2;
    do
    {
      uint64_t v15 = *(void *)(a1 + 32) + v13;
      re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v15 + 120);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v15 + 88));
      re::StringID::destroyString((re::StringID *)v15);
      ++v14;
      v13 += 160;
    }
    while (v14 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 160 * v4 + 152;
      __asm { FMOV            V1.2S, #1.0 }
      do
      {
        long long v12 = (void *)(*(void *)(a1 + 32) + v6);
        *(v12 - 19) = 0;
        *(v12 - 18) = "";
        *(v12 - 17) = 2;
        *((_DWORD *)v12 - 32) = 2;
        *(v12 - 12) = -1;
        *(void *)((char *)v12 - 124) = -1;
        *(void *)((char *)v12 - 116) = -1;
        *(void *)((char *)v12 - 108) = -1;
        *(v12 - 11) = _D1;
        *(v12 - 10) = 0;
        *((_DWORD *)v12 - 18) = 2;
        void *v12 = 0;
        *(v12 - 3) = 0;
        *(v12 - 2) = 0;
        *(v12 - 4) = 0;
        *((_DWORD *)v12 - 2) = 0;
        *(void *)((char *)v12 - 68) = 0;
        *(void *)((char *)v12 - 52) = 0;
        *(void *)((char *)v12 - 60) = 0;
        v6 += 160;
        *(void *)((char *)v12 - 47) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  __n128 result = re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 160 * v8;
      do
      {
        re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v9 + 120);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v9 + 88));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 160;
        v10 -= 160;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphTargetData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphTargetData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphTargetData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 160 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 160;
        v14 -= 160;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 160 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 160 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphBufferData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphBufferData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphBufferData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphBufferData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphBufferData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphBufferData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphBufferData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphBufferData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphBufferData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphBufferData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v17 = 0;
  unint64_t v18 = "";
  *(void *)&long long v19 = 2;
  *((void *)&v19 + 1) = -1;
  *(void *)&long long v20 = -1;
  *((void *)&v20 + 1) = 1065353216;
  uint64_t v23 = 0;
  long long v21 = 0uLL;
  long long v22 = 0uLL;
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = *(void *)(a4 + 32) + 88 * v8;
  *(void *)uint64_t v13 = 0;
  *(void *)(v13 + 8) = "";
  uint64_t v17 = 0;
  unint64_t v18 = "";
  long long v14 = v20;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = v14;
  *(void *)(v13 + 56) = 0;
  *(void *)(v13 + 64) = 0;
  *(void *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  long long v21 = 0uLL;
  *(void *)&long long v22 = 0;
  *(void *)(v13 + 80) = 0;
  uint64_t v23 = 0;
  DWORD2(v22) = 1;
  *(_DWORD *)(v13 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 1;
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)&v21);
  re::StringID::destroyString((re::StringID *)&v17);
  uint64_t v15 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 88 * *(void *)(a4 + 16) - 88);
  re::introspectionInitElement(a2, a3, a1[6], v15);
  return v15;
}

void sub_2334BE430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v9);
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphBufferData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphBufferData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 88 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 88 * a3;
}

void *re::DynamicArray<re::RenderGraphBufferData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphBufferData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          uint64_t v2 = 88 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[11 * v9];
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          unint64_t *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *unint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          long long v13 = *((_OWORD *)v8 + 2);
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *((_OWORD *)v11 + 2) = v13;
          v11[10] = 0;
          *((_DWORD *)v11 + 18) = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          uint64_t v14 = v8[7];
          v11[6] = v8[6];
          v8[6] = 0;
          v11[7] = v14;
          v8[7] = 0;
          uint64_t v15 = v11[8];
          v11[8] = v8[8];
          v8[8] = v15;
          uint64_t v16 = v11[10];
          v11[10] = v8[10];
          v8[10] = v16;
          ++*((_DWORD *)v8 + 18);
          ++*((_DWORD *)v11 + 18);
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)(v8 + 6));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 11;
          v11 += 11;
        }
        while (v8 != v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphBufferData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 88 * a2;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v10 + 48);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 88;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 88 * v4 + 80;
      do
      {
        long long v7 = (void *)(*(void *)(a1 + 32) + v6);
        *(v7 - 10) = 0;
        *(v7 - 9) = "";
        *((_DWORD *)v7 - 16) = 2;
        *(v7 - 7) = -1;
        *(v7 - 6) = -1;
        *((_DWORD *)v7 - 10) = 1065353216;
        *((unsigned char *)v7 - 36) = 0;
        *long long v7 = 0;
        *(v7 - 3) = 0;
        *(v7 - 2) = 0;
        *(v7 - 4) = 0;
        v6 += 88;
        *((_DWORD *)v7 - 2) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      unint64_t v9 = *(re::StringID **)(a1 + 32);
      uint64_t v10 = 88 * v8;
      do
      {
        re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v9 + 48);
        re::StringID::destroyString(v9);
        unint64_t v9 = (re::StringID *)((char *)v9 + 88);
        v10 -= 88;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphBufferData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphBufferData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphBufferData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      long long v13 = *(char **)(a1 + 32);
      uint64_t v14 = 88 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 88;
        v14 -= 88;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 88 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  uint64_t v15 = (void *)(*(void *)(a4 + 32) + 16 * v9);
  void *v15 = 0;
  v15[1] = 0;
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v17 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 16 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (v4 < a2)
    {
      unint64_t v5 = (void *)(*(void *)(a1 + 32) + 16 * v4);
      uint64_t v6 = 16 * a2 - 16 * v4;
      if (v6 >= 1) {
        bzero(v5, 16 * (((unint64_t)v6 >> 4) - ((unint64_t)v6 > 0xF)) + 16);
      }
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 16 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 16;
        v11 -= 16;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 16 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphInputData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphInputData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphInputData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInputData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphInputData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphInputData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphInputData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphInputData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphInputData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphInputData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v17 = "";
  long long v19 = "";
  long long v22 = "";
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = *(void *)(a4 + 32) + 56 * v8;
  *(void *)uint64_t v13 = 0;
  *(void *)(v13 + 8) = "";
  uint64_t v16 = 0;
  uint64_t v17 = "";
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = "";
  uint64_t v18 = 0;
  long long v19 = "";
  *(unsigned char *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = "";
  uint64_t v21 = 0;
  long long v22 = "";
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v16);
  uint64_t v14 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 56 * *(void *)(a4 + 16) - 56);
  re::introspectionInitElement(a2, a3, a1[6], v14);
  return v14;
}

void sub_2334BFBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInputData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInputData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

void *re::DynamicArray<re::RenderGraphInputData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphInputData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[7 * v9];
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          unint64_t *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *unint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          LOBYTE(v12) = v8[2];
          void v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          void v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = (uint64_t)"";
          v8[2] = 0;
          *((unsigned char *)v11 + 32) = *((unsigned char *)v8 + 32);
          LOBYTE(v12) = v8[5];
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v8[5] & 1;
          v11[5] = v8[5] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[6] = v8[6];
          v8[6] = (uint64_t)"";
          v8[5] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 5));
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphInputData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 56 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 40));
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 56;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 56 * v4 + 48;
      do
      {
        long long v7 = (void *)(*(void *)(a1 + 32) + v6);
        *(v7 - 6) = 0;
        *(v7 - 5) = "";
        *(v7 - 4) = 0;
        *(v7 - 3) = "";
        *((unsigned char *)v7 - 16) = 0;
        *(v7 - 1) = 0;
        *long long v7 = "";
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 56 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 40));
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 56;
        v10 -= 56;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphInputData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphInputData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphInputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 56 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 56;
        v14 -= 56;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 56 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphOutputData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphOutputData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphOutputData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphOutputData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphOutputData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphOutputData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphOutputData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphOutputData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = "";
  uint64_t v18 = 0;
  long long v19 = "";
  uint64_t v20 = 0;
  uint64_t v21 = "";
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = (void *)(*(void *)(a4 + 32) + 48 * v8);
  *uint64_t v13 = 0;
  v13[1] = "";
  uint64_t v16 = 0;
  uint64_t v17 = "";
  v13[2] = 0;
  v13[3] = "";
  uint64_t v18 = 0;
  long long v19 = "";
  v13[4] = 0;
  v13[5] = "";
  uint64_t v20 = 0;
  uint64_t v21 = "";
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v16);
  uint64_t v14 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 48 * *(void *)(a4 + 16) - 48);
  re::introspectionInitElement(a2, a3, a1[6], v14);
  return v14;
}

void sub_2334C0940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphOutputData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphOutputData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void *re::DynamicArray<re::RenderGraphOutputData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphOutputData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[6 * v9];
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          unint64_t *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          LOBYTE(v12) = v8[2];
          *unint64_t v8 = 0;
          v8[1] = "";
          void v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          void v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = "";
          v8[2] = 0;
          LOBYTE(v12) = v8[4];
          v11[4] = v11[4] & 0xFFFFFFFFFFFFFFFELL | v8[4] & 1;
          v11[4] = v8[4] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[5] = v8[5];
          v8[5] = "";
          uint8_t v8[4] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 4));
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 6;
          v11 += 6;
        }
        while (v8 != v10);
        unint64_t v8 = (void *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphOutputData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 48 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 32));
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 48;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 48 * v4;
      do
      {
        long long v7 = (void *)(*(void *)(a1 + 32) + v6);
        *long long v7 = 0;
        v7[1] = "";
        void v7[2] = 0;
        v7[3] = "";
        v7[4] = 0;
        void v7[5] = "";
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 48 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 32));
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphOutputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 48 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 48;
        v14 -= 48;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<double>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<float *>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<float *>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  *(void *)(*(void *)(a4 + 32) + 8 * v8) = 0;
  *(void *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v13 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 8 * v8);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 8 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphDataNodeConnection>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v18 = 0;
  uint64_t v22 = 0;
  long long v20 = 0uLL;
  long long v19 = "";
  long long v21 = 0uLL;
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  uint64_t v15 = *(void *)(a4 + 32) + 56 * v9;
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = "";
  uint64_t v18 = 0;
  long long v19 = "";
  *(_DWORD *)(v15 + 40) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 16) = 0;
  long long v20 = 0uLL;
  *(void *)&long long v21 = 0;
  *(void *)(v15 + 48) = 0;
  uint64_t v22 = 0;
  DWORD2(v21) = 1;
  *(_DWORD *)(v15 + 40) = 1;
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)&v20);
  re::StringID::destroyString((re::StringID *)&v18);
  uint64_t v16 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 56 * *(void *)(a4 + 16) - 56);
  re::introspectionInitElement(a2, a3, a1[6], v16);
  return v16;
}

void sub_2334C2014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v9);
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

void *re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[7 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          unint64_t *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *unint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          v11[6] = 0;
          *((_DWORD *)v11 + 10) = 0;
          v11[3] = 0;
          v11[4] = 0;
          void v11[2] = 0;
          uint64_t v13 = v8[3];
          void v11[2] = v8[2];
          v8[2] = 0;
          v11[3] = v13;
          v8[3] = 0;
          uint64_t v14 = v11[4];
          v11[4] = v8[4];
          uint8_t v8[4] = v14;
          uint64_t v15 = v11[6];
          v11[6] = v8[6];
          v8[6] = v15;
          ++*((_DWORD *)v8 + 10);
          ++*((_DWORD *)v11 + 10);
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphDataNodeConnection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 56 * a2;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v10 + 16);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 56;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 56 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = "";
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 40) = 0;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      unint64_t v9 = *(re::StringID **)(a1 + 32);
      uint64_t v10 = 56 * v8;
      do
      {
        re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v9 + 16);
        re::StringID::destroyString(v9);
        unint64_t v9 = (re::StringID *)((char *)v9 + 56);
        v10 -= 56;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphDataNodeConnection>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 56 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 56;
        v14 -= 56;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 56 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RenderGraphOutputData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = "";
  uint64_t v18 = 0;
  long long v19 = "";
  uint64_t v20 = 0;
  long long v21 = "";
  unint64_t v9 = *(void *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= v9)
  {
    unint64_t v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(void *)a4)
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v13 = (void *)(*(void *)(a4 + 32) + 48 * v8);
  *uint64_t v13 = 0;
  v13[1] = "";
  uint64_t v16 = 0;
  uint64_t v17 = "";
  v13[2] = 0;
  v13[3] = "";
  uint64_t v18 = 0;
  long long v19 = "";
  v13[4] = 0;
  v13[5] = "";
  uint64_t v20 = 0;
  long long v21 = "";
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v16);
  uint64_t v14 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 48 * *(void *)(a4 + 16) - 48);
  re::introspectionInitElement(a2, a3, a1[6], v14);
  return v14;
}

void sub_2334C2D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 48 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 32));
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphOutputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 48 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 48;
        v14 -= 48;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void sub_2334C3538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334C35AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2334C3678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *re::VideoAsset::assetType(re::VideoAsset *this)
{
  {
    re::VideoAsset::assetType(void)::type = (uint64_t)"Video";
    qword_26879E720 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VideoAsset::assetType(void)::type);
  }
  return &re::VideoAsset::assetType(void)::type;
}

re::VideoAsset *re::VideoAsset::VideoAsset(re::VideoAsset *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6D52F8;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = -1;
  *((unsigned char *)this + 24) = 0;
  *((_DWORD *)this + 7) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  re::DynamicString::setCapacity((void *)this + 9, 0);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 30) = -1;
  *((unsigned char *)this + 124) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((unsigned char *)this + 176) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 208) = 0;
  *((void *)this + 27) = 0x800000008;
  *((_DWORD *)this + 56) = 3;
  *((void *)this + 29) = 0x21C000003C0;
  *((void *)this + 30) = 0x1900000001;
  *((_DWORD *)this + 62) = 0x1000000;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = 0;
  *((_DWORD *)this + 68) = 0;
  *((unsigned char *)this + 520) = 0;
  *((_OWORD *)this + 33) = xmmword_234376D50;
  *((_WORD *)this + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *((void *)this + 69) = 0;
  *((_DWORD *)this + 140) = 0;
  *((_OWORD *)this + 38) = xmmword_234376D50;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = re::kVideoMajorColorDefault;
  *((_DWORD *)this + 164) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((void *)this + 86) = 0x3F8000003F800000;
  *((void *)this + 87) = 1065353216;
  *((void *)this + 88) = 0x3F8000003F800000;
  *((void *)this + 89) = 1065353216;
  *((float *)this + 180) = re::VideoDefaults::hueLerpVelocityVideoTuning(0);
  *(_OWORD *)((char *)this + 724) = xmmword_234376D60;
  *((float *)this + 185) = re::VideoDefaults::saturationPowerVideoTuning(0);
  *((void *)this + 93) = 0x3FC666663D4CCCCDLL;
  *((float *)this + 188) = re::VideoDefaults::minSaturationVideoTuning(0);
  *((float *)this + 189) = re::VideoDefaults::maxSaturationVideoTuning(0);
  *((float *)this + 190) = re::VideoDefaults::saturationInflectionVideoTuning(0);
  *((float *)this + 191) = re::VideoDefaults::saturationSmoothingVideoTuning(0);
  *((float *)this + 192) = re::VideoDefaults::brightnessMinVideoTuning(0);
  *((float *)this + 193) = re::VideoDefaults::brightnessMaxVideoTuning(0);
  *((void *)this + 97) = 0x42C800003F800000;
  *((float *)this + 196) = re::VideoDefaults::brightnessInflectionVideoTuning(0);
  *((float *)this + 197) = re::VideoDefaults::brightnessSmoothingVideoTuning(0);
  *(_OWORD *)((char *)this + 792) = xmmword_234376D70;
  *((float *)this + 202) = re::VideoDefaults::colorSmoothTimeVideoTuning(0);
  *((_DWORD *)this + 203) = 1120403456;
  *((int32x4_t *)this + 51) = vdupq_n_s32(0x3E99999Au);
  *((void *)this + 104) = 0x3E8000003F0A3D71;
  *((float *)this + 210) = re::VideoDefaults::gazeDeadbandVideoTuning(0);
  *((_DWORD *)this + 211) = 1036831949;
  *((float *)this + 212) = re::VideoDefaults::gazeMaxAngleVideoTuning(0);
  *((void *)this + 108) = 1010174817;
  *((void *)this + 111) = 3212836864;
  *((void *)this + 110) = 0;
  *((void *)this + 113) = 3212836864;
  *((void *)this + 112) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 114) = _D0;
  *((_DWORD *)this + 232) = 0;
  *((_WORD *)this + 466) = 0;
  *((unsigned char *)this + 934) = 1;
  uint64_t v8 = *re::videoLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 134217984;
    unint64_t v11 = this;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "VideoAsset has been constructed: %p", (uint8_t *)&v10, 0xCu);
  }
  return this;
}

void re::VideoAsset::~VideoAsset(re::VideoAsset *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6D52F8;
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    unint64_t v4 = *(const void **)(v2 + 7072);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(v2 + 7008) = 0;
    ++*(_DWORD *)(v2 + 7016);
    unint64_t v5 = *(std::__shared_weak_count **)(v2 + 4912);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v5);
    }
    re::VideoPixelBufferPool::~VideoPixelBufferPool((const void **)(v2 + 4872));
    uint64_t v6 = *(const void **)(v2 + 4824);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(const void **)(v2 + 4800);
    if (v7) {
      CFRelease(v7);
    }
    re::VideoHistogramManager::~VideoHistogramManager((re::VideoHistogramManager *)(v2 + 4704));
    re::VideoColorManager::~VideoColorManager((re::VideoColorManager *)(v2 + 2128));
    re::VideoPixelFormatDescriptionManager::~VideoPixelFormatDescriptionManager((re::VideoPixelFormatDescriptionManager *)(v2 + 2080));
    re::VideoPresentationQueue::~VideoPresentationQueue((re::VideoPresentationQueue *)(v2 + 256));
    for (uint64_t i = 240; i != 216; i -= 8)
    {
      if (*(void *)(v2 + i)) {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v2 + i));
      }
      *(void *)(v2 + i) = 0;
    }
    uint64_t v9 = *(const void **)(v2 + 216);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v2 + 216) = 0;
    }
    re::VideoTextureAllocator::~VideoTextureAllocator((void **)(v2 + 160));
    re::VideoPixelBufferPool::~VideoPixelBufferPool((const void **)(v2 + 128));
    re::VideoHDRProcessor::~VideoHDRProcessor((void **)(v2 + 80));
    re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(v2 + 48);
    double v10 = re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::deinit((uint64_t *)v2);
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)v3 + 40))(v3, v2, v10);
    *((void *)this + 21) = 0;
  }
  unint64_t v11 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;

  uint64_t v13 = *re::videoLogObjects(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 134217984;
    uint64_t v16 = this;
    _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "VideoAsset has been destructed: %p", (uint8_t *)&v15, 0xCu);
  }
  re::DynamicInlineArray<re::VideoObject<re::VideoFigDataChannelResourceBase>,5ul>::clear((uint64_t)this + 552);
  re::DynamicInlineArray<re::VideoAssetResourceData,10ul>::clear((void *)this + 33);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 128);

  re::DynamicString::deinit((re::VideoAsset *)((char *)this + 72));
  uint64_t v14 = (const void *)*((void *)this + 4);
  if (v14) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v14);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t vars8;

  re::VideoAsset::~VideoAsset(this);
  JUMPOUT(0x237DBCBD0);
}

void sub_2334C3C5C(_Unwind_Exception *a1)
{
  re::DynamicInlineArray<re::VideoObject<re::VideoFigDataChannelResourceBase>,5ul>::clear(v1 + 552);
  re::DynamicInlineArray<re::VideoAssetResourceData,10ul>::clear((void *)(v1 + 264));
  re::DynamicArray<re::AssetHandle>::deinit(v1 + 128);

  re::DynamicString::deinit((re::DynamicString *)(v1 + 72));
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v3);
  }
  *(void *)(v1 + 32) = 0;
  _Unwind_Resume(a1);
}

void re::VideoAsset::makeVideoMutableMemoryAsset(re::VideoAsset *this, AssetService *a2, AVSampleBufferVideoRenderer *a3)
{
  uint64_t v12 = a2;
  unint64_t v5 = re::globalAllocators((re *)v12);
  uint64_t v6 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 944, 16);
  uint64_t v7 = re::VideoAsset::VideoAsset(v6);
  uint64_t v8 = re::globalAllocators(v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 56, 8);
  *(void *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  objc_storeStrong((id *)(v9 + 8), a2);
  double v10 = *(void **)v9;
  *(void *)uint64_t v9 = 0;

  *((void *)v6 + 23) = v9;
  re::VideoAsset::assetType(v11);
  (*(void (**)(re::VideoAsset *, re::VideoAsset *, uint64_t *, uint64_t, void, void))(*(void *)this
                                                                                                 + 416))(this, v6, &re::VideoAsset::assetType(void)::type, 1, 0, 0);
}

void sub_2334C3E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::VideoAsset::makeVideoMutableMemoryAsset(uint64_t a1, void *a2)
{
  double v10 = a2;
  unint64_t v4 = re::globalAllocators(v10);
  unint64_t v5 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 944, 16);
  uint64_t v6 = re::VideoAsset::VideoAsset(v5);
  uint64_t v7 = re::globalAllocators(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 56, 8);
  *(void *)(v8 + 48) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  objc_storeStrong((id *)v8, a2);
  *((void *)v5 + 23) = v8;
  re::VideoAsset::assetType(v9);
  (*(void (**)(uint64_t, re::VideoAsset *, uint64_t *, uint64_t, void, void))(*(void *)a1 + 416))(a1, v5, &re::VideoAsset::assetType(void)::type, 1, 0, 0);
}

void sub_2334C3F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t re::VideoAsset::makeVideoMutableMemoryAsset(re::VideoAsset *this, AssetService *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  unint64_t v4 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 944, 16);
  unint64_t v5 = re::VideoAsset::VideoAsset(v4);
  uint64_t v6 = re::globalAllocators(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 56, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(void *)(v7 + 48) = 0;
  *((void *)v4 + 23) = v7;
  re::VideoAsset::assetType((re::VideoAsset *)v7);
  uint64_t v8 = *(uint64_t (**)(re::VideoAsset *, re::VideoAsset *, uint64_t *, uint64_t, void, void))(*(void *)this + 416);
  return v8(this, v4, &re::VideoAsset::assetType(void)::type, 1, 0, 0);
}

uint64_t re::VideoAsset::makeVideoMutableMemoryAssetWithoutTarget(re::VideoAsset *this, AssetService *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  unint64_t v4 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 944, 16);
  unint64_t v5 = re::VideoAsset::VideoAsset(v4);
  uint64_t v6 = re::globalAllocators(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 56, 8);
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(unsigned char *)(v7 + 48) = 1;
  *(void *)uint64_t v7 = 0;
  *((void *)v4 + 23) = v7;
  re::VideoAsset::assetType((re::VideoAsset *)v7);
  uint64_t v8 = *(uint64_t (**)(re::VideoAsset *, re::VideoAsset *, uint64_t *, uint64_t, void, void))(*(void *)this + 416);
  return v8(this, v4, &re::VideoAsset::assetType(void)::type, 1, 0, 0);
}

re *re::VideoAsset::loadAndConnectForRendering(uint64_t *a1)
{
  re::AssetHandle::loadAsync((re::AssetHandle *)a1);
  uint64_t v2 = (re *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)a1);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = *((void *)v2 + 24);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 2600))
      {
        unint64_t v5 = *re::videoLogObjects(v2);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CMTime buf = 0;
          _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "VideoAsset->loadAndConnectForRendering :: Loading Video Asset", buf, 2u);
        }
        *(unsigned char *)(v4 + 2600) = 0;
        re::VideoRequestOptions::makeWithReceiver((uint64_t *)v4, &v7);
        re::AssetManager::setAssetPayloadRequestOptions(*(void *)(a1[1] + 24), a1[1], (id *)&v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t re::AssetHandle::loadedAsset<re::VideoAsset>(re::VideoAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  re::VideoAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::VideoAsset::assetType(void)::type, 1);
}

float64_t re::VideoAsset::dimensions(re::VideoAsset *this)
{
  if (!*((void *)this + 23)
    || (objc_opt_respondsToSelector() & 1) == 0
    || ([**((id **)this + 23) videoTrackNaturalSize], v2.f64[0] == 0.0)
    || v3 == 0.0)
  {
    uint64_t v5 = *((void *)this + 24);
    if (v5) {
      v2.f64[0] = *(float64_t *)(v5 + 2592);
    }
    else {
      v2.f64[0] = 0.0;
    }
  }
  else
  {
    v2.f64[1] = v3;
    *(float32x2_t *)&v2.f64[0] = vcvt_f32_f64(v2);
  }
  return v2.f64[0];
}

id re::VideoAsset::getAVPlayer(id **this)
{
  if (!*((unsigned char *)this + 176) && this[23] && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v1 = *this[23];
  }
  else {
    id v1 = 0;
  }
  return v1;
}

id re::VideoAsset::getAVSampleBufferVideoRenderer(re::VideoAsset *this)
{
  if (*((unsigned char *)this + 176) || (uint64_t v2 = *((void *)this + 23)) == 0) {
    id v1 = 0;
  }
  else {
    id v1 = *(id *)(v2 + 8);
  }
  return v1;
}

id re::VideoAsset::testingGetInternalAVPlayer(id **this)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = *this[23];
  }
  else {
    id v2 = 0;
  }
  return v2;
}

void re::VideoPlaybackRuntimeData::updateAVPlayer(id *this, AVPlayer *a2)
{
  double v3 = a2;
  if (*this)
  {
    if (this[4]) {
      objc_msgSend(*this, "removeEndpoint:");
    }
    objc_opt_class();
    uint64_t isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      if (this[4]) {
        -[AVPlayer addVideoTarget:](v3, "addVideoTarget:");
      }
    }
    else if (*this)
    {
      uint64_t v5 = *re::assetTypesLogObjects((re *)isKindOfClass);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "VideoAsset is replacing remote player with AVPlayer", v8, 2u);
      }
      id v6 = this[4];
      if (v6) {
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v6);
      }
      this[4] = 0;
    }
  }
  id v7 = *this;
  *this = v3;
}

void sub_2334C4598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::VideoPlaybackRuntimeData::updateAVSampleBufferVideoRenderer(id *this, AVSampleBufferVideoRenderer *a2)
{
}

void re::VideoAsset::setAVPlayer(re::VideoAsset *this, AVPlayer *a2)
{
  uint64_t v4 = a2;
  re::VideoAsset::updateAutoPlay((uint64_t)this, 0, 0);
  double v3 = (id *)*((void *)this + 23);
  if (v3) {
    re::VideoPlaybackRuntimeData::updateAVPlayer(v3, v4);
  }
  re::VideoAsset::updateVideoTarget(this);
}

void sub_2334C461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::VideoAsset::updateAutoPlay(uint64_t a1, int a2, int a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 176);
  *(unsigned char *)(a1 + 176) = a2;
  id v7 = *(void **)(a1 + 184);
  if (!v7)
  {
    if (!a2) {
      return;
    }
    BOOL v8 = 0;
    goto LABEL_17;
  }
  BOOL v8 = *v7 != 0;
  if (v6) {
    BOOL v9 = *v7 != 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (a2 != 2 && v9 && v6 == 2)
  {
    unint64_t v11 = (void *)v7[2];
    void v7[2] = 0;
  }
  if (a2)
  {
    if (v9) {
      goto LABEL_27;
    }
LABEL_17:
    uint64_t v12 = *re::assetTypesLogObjects((re *)a1);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      *(_WORD *)long long v41 = 0;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "videoFileAutoPlay will replace current AVPlayer", v41, 2u);
    }
    uint64_t v14 = *(id **)(a1 + 184);
    if (v14)
    {
      int v15 = (AVPlayer *)objc_opt_new();
      re::VideoPlaybackRuntimeData::updateAVPlayer(v14, v15);

      if (!v8) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v18 = re::globalAllocators((re *)v13);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 56, 8);
      *(_OWORD *)uint64_t v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(void *)(v19 + 48) = 0;
      *(void *)(a1 + 184) = v19;
      uint64_t v20 = objc_opt_new();
      long long v21 = *(void ***)(a1 + 184);
      uint64_t v22 = *v21;
      *long long v21 = (void *)v20;

      re::VideoAsset::init((uint64_t **)a1);
      if (!v8)
      {
LABEL_29:
        id v23 = **(id **)(a1 + 184);
        if (a2 == 2)
        {
          uint64_t v30 = [MEMORY[0x263EFF980] arrayWithCapacity:*(void *)(a1 + 144)];
          uint64_t v31 = *(void *)(a1 + 144);
          if (v31)
          {
            uint64_t v32 = *(re::VideoFileAsset **)(a1 + 160);
            uint64_t v33 = 24 * v31;
            do
            {
              uint64_t v34 = re::AssetHandle::asset<re::VideoFileAsset>(v32);
              if (v34)
              {
                id v35 = **(id **)(v34 + 40);
                if (v35) {
                  [v30 addObject:v35];
                }
              }
              uint64_t v32 = (re::VideoFileAsset *)((char *)v32 + 24);
              v33 -= 24;
            }
            while (v33);
          }
          if ([v30 count])
          {
            StringID v36 = [REVideoPlayerItemsLooper alloc];
            uint64_t v37 = (void *)[v30 copy];
            uint64_t v38 = [(REVideoPlayerItemsLooper *)v36 initWithPlayer:v23 assets:v37];
            uint64_t v39 = *(void *)(a1 + 184);
            uint64_t v40 = *(void **)(v39 + 16);
            *(void *)(v39 + 16) = v38;
          }
        }
        else if (a2 == 1)
        {
          uint64_t v24 = *(void *)(a1 + 144);
          if (v24)
          {
            uint64_t v25 = *(re::VideoFileAsset **)(a1 + 160);
            uint64_t v26 = 24 * v24;
            do
            {
              uint64_t v27 = re::AssetHandle::asset<re::VideoFileAsset>(v25);
              if (v27)
              {
                id v28 = **(id **)(v27 + 40);
                if (v28)
                {
                  uint64_t v29 = [MEMORY[0x263EFA800] playerItemWithAsset:v28];
                  [v23 insertItem:v29 afterItem:0];
                }
              }
              uint64_t v25 = (re::VideoFileAsset *)((char *)v25 + 24);
              v26 -= 24;
            }
            while (v26);
          }
          [v23 play];
        }

        return;
      }
    }
LABEL_27:
    if (v6 == a2 && !a3) {
      return;
    }
    goto LABEL_29;
  }
  if (v9)
  {
    [**(id **)(a1 + 184) pause];
    uint64_t v16 = *(void ***)(a1 + 184);
    uint64_t v17 = *v16;
    re::VideoAsset *v16 = 0;
  }
}

void sub_2334C4964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::VideoAsset::updateVideoTarget(re::VideoAsset *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 23);
  if (v1)
  {
    if (*(void *)v1)
    {
      if (*(void *)(v1 + 32))
      {
        objc_msgSend(*(id *)v1, "removeEndpoint:");
        uint64_t v3 = *((void *)this + 23);
        uint64_t v4 = *(const void **)(v3 + 32);
        uint64_t v1 = v3;
        if (v4)
        {
          re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v4);
          uint64_t v1 = *((void *)this + 23);
        }
        *(void *)(v3 + 32) = 0;
      }
      if (*(void *)(v1 + 40))
      {
        objc_msgSend(*(id *)v1, "addEndpoint:");
        uint64_t v5 = (const void *)objc_claimAutoreleasedReturnValue();
        if (v5)
        {
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)(*((void *)this + 23) + 32), v5);
          CFRelease(v5);
        }
      }
    }
    else if (*(void *)(v1 + 8))
    {
      int v6 = *(const void **)(v1 + 32);
      if (v6)
      {
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v6);
        *(void *)(v1 + 32) = 0;
        uint64_t v1 = *((void *)this + 23);
      }
      if (*(void *)(v1 + 40))
      {
        CFAllocatorGetDefault();
        id v7 = (re *)FigVideoTargetCreateWithVideoReceiverEndpointID();
        int v8 = (int)v7;
        if (v7)
        {
          BOOL v9 = *re::assetTypesLogObjects(v7);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CMTime buf = 67109120;
            int v11 = v8;
            _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to create video target from endpoint (error: %d)", buf, 8u);
          }
        }
        else
        {
          [*(id *)(*((void *)this + 23) + 8) addVideoTarget:0];
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)(*((void *)this + 23) + 32), 0);
          CFRelease(0);
        }
      }
    }
  }
}

void re::VideoAsset::setAVSampleBufferVideoRenderer(re::VideoAsset *this, AVSampleBufferVideoRenderer *a2)
{
  uint64_t v5 = a2;
  re::VideoAsset::updateAutoPlay((uint64_t)this, 0, 0);
  uint64_t v4 = *((void *)this + 23);
  if (v4) {
    objc_storeStrong((id *)(v4 + 8), a2);
  }
  re::VideoAsset::updateVideoTarget(this);
}

void sub_2334C4BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id re::VideoAsset::getRemotePlayer(id **this)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = 0;
  }
  else {
    id v2 = *this[23];
  }
  return v2;
}

void re::VideoAsset::setRemotePlayer(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (re *)[v4 isEqual:**(void **)(a1 + 184)];
  if ((v5 & 1) == 0)
  {
    if (**(void **)(a1 + 184))
    {
      int v6 = *re::assetTypesLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v10 = 0;
        _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "VideoAsset is replacing remote player", v10, 2u);
      }
      uint64_t v7 = *(void *)(a1 + 184);
      if (*(void *)(v7 + 32))
      {
        objc_msgSend(*(id *)v7, "removeEndpoint:");
        uint64_t v8 = *(void *)(a1 + 184);
        BOOL v9 = *(const void **)(v8 + 32);
        if (v9) {
          re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v9);
        }
        *(void *)(v8 + 32) = 0;
      }
    }
    re::VideoAsset::updateAutoPlay(a1, 0, 0);
    objc_storeStrong(*(id **)(a1 + 184), a2);
  }
}

void sub_2334C4D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::VideoAsset::setCurrentUserProvidedVideoPixelBuffers(re::VideoAsset *a1, uint64_t a2)
{
  re::VideoAsset::clearCurrentUserProvidedVideoPixelBuffers(a1);
  uint64_t v4 = *((void *)a1 + 24);
  uint64_t result = re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)(v4 + 24), (uint64_t *)a2);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v4 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v7;
  *(_OWORD *)(v4 + 56) = v6;
  uint64_t v8 = *((void *)a1 + 24);
  if (*(void *)(v8 + 24))
  {
    unint64_t v9 = 0;
    do
      uint64_t result = CVPixelBufferRetain(*(CVPixelBufferRef *)(v8 + 40 + 8 * v9++));
    while (v9 < *(void *)(v8 + 24));
  }
  return result;
}

void re::VideoAsset::clearCurrentUserProvidedVideoPixelBuffers(re::VideoAsset *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (*(void *)(v1 + 24))
  {
    unint64_t v3 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v1 + 40 + 8 * v3++));
    while (v3 < *(void *)(v1 + 24));
    uint64_t v1 = *((void *)this + 24);
  }
  *(void *)(v1 + 24) = 0;
  ++*(_DWORD *)(v1 + 32);
}

void *re::VideoAsset::setFutureUserProvidedVideoPixelBuffers(re::VideoAsset *a1, uint64_t a2)
{
  re::VideoAsset::clearFutureUserProvidedVideoPixelBuffers(a1);
  uint64_t v4 = *((void *)a1 + 24);
  uint64_t result = re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)(v4 + 96), (uint64_t *)a2);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v4 + 160) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 128) = v6;
  *(_OWORD *)(v4 + 144) = v7;
  uint64_t v8 = *((void *)a1 + 24);
  if (*(void *)(v8 + 96))
  {
    unint64_t v9 = 0;
    do
      uint64_t result = CVPixelBufferRetain(*(CVPixelBufferRef *)(v8 + 112 + 8 * v9++));
    while (v9 < *(void *)(v8 + 96));
  }
  return result;
}

void re::VideoAsset::clearFutureUserProvidedVideoPixelBuffers(re::VideoAsset *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (*(void *)(v1 + 96))
  {
    unint64_t v3 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v1 + 112 + 8 * v3++));
    while (v3 < *(void *)(v1 + 96));
    uint64_t v1 = *((void *)this + 24);
  }
  *(void *)(v1 + 96) = 0;
  ++*(_DWORD *)(v1 + 104);
}

double re::VideoAsset::getVideoTextureHandles@<D0>(re::VideoAsset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 24);
  if (v3)
  {
    re::FixedInlineArray<re::VideoChannelTextureHandles,2ul>::FixedInlineArray(a2, v3 + 1984);
    int v5 = *(_DWORD *)(v3 + 2272);
    *(unsigned char *)(a2 + 292) = *(unsigned char *)(v3 + 2276);
    *(_DWORD *)(a2 + 288) = v5;
  }
  else
  {
    *(void *)(a2 + 128) = 0;
    *(_DWORD *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 92) = 0u;
    *(void *)(a2 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(_DWORD *)(a2 + 264) = 0;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 236) = 0u;
    *(_DWORD *)(a2 + 288) = -1;
    *(unsigned char *)(a2 + 292) = 0;
  }
  return result;
}

double re::VideoAsset::getLegacyVideoTextureHandles@<D0>(re::VideoAsset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 24);
  if (v3)
  {
    re::FixedInlineArray<re::VideoChannelTextureHandles,2ul>::FixedInlineArray(a2, v3 + 2280);
    int v5 = *(_DWORD *)(v3 + 2568);
    *(unsigned char *)(a2 + 292) = *(unsigned char *)(v3 + 2572);
    *(_DWORD *)(a2 + 288) = v5;
  }
  else
  {
    *(void *)(a2 + 128) = 0;
    *(_DWORD *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 92) = 0u;
    *(void *)(a2 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(_DWORD *)(a2 + 264) = 0;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 236) = 0u;
    *(_DWORD *)(a2 + 288) = -1;
    *(unsigned char *)(a2 + 292) = 0;
  }
  return result;
}

uint64_t re::VideoAsset::getResourceContext(re::VideoAsset *this)
{
  return (uint64_t)this + 256;
}

{
  return (uint64_t)this + 256;
}

void re::VideoAsset::retrieveBuffersAndUpdateRuntimeData(re::VideoAsset *this, char **a2, re::RenderManager *a3, float32x2_t *a4, CMTime *p_buf, unint64_t a6, CMTime *a7, float a8, id *a9, BOOL *a10)
{
  uint64_t v219 = *MEMORY[0x263EF8340];
  double v10 = (float32x2_t *)*((void *)this + 24);
  if (!v10) {
    return;
  }
  uint64_t v18 = this;
  CMTime v155 = *(CMTime *)*(void *)&MEMORY[0x263F01090];
  uint64_t v156 = 0;
  int v157 = 0;
  uint64_t v160 = 0;
  int v161 = 0;
  unint64_t v162 = 0;
  int v163 = 0;
  unint64_t v165 = 0;
  int v166 = 0;
  unint64_t v168 = 0;
  int v169 = 0;
  v170[6] = 0;
  int v171 = 0;
  uint64_t v172 = 0;
  int v173 = 0;
  uint64_t v174 = 0;
  int v175 = 0;
  unint64_t v176 = 0;
  int v177 = 0;
  unint64_t v179 = 0;
  int v180 = 0;
  uint64_t v184 = 0;
  int v185 = 0;
  uint64_t v186 = 0;
  int v187 = 0;
  CMTimeValue v188 = 0;
  char v189 = 0;
  __int16 v195 = 0;
  char v196 = 0;
  char v183 = 0;
  long long v182 = 0u;
  uint64x2_t v190 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  int v197 = -1;
  unint64_t v201 = 0;
  int v202 = 0;
  unint64_t v204 = 0;
  int v205 = 0;
  uint64_t v207 = 0;
  int v208 = 0;
  unint64_t v210 = 0;
  int v211 = 0;
  uint64_t v212 = 0;
  int v213 = 0;
  char v215 = 0;
  long long v198 = 0u;
  int v199 = 0;
  uint64_t v216 = 1;
  char v217 = 0;
  CMTime v103 = *(CMTime *)*(void *)&MEMORY[0x263F01090];
  unint64_t v104 = 0;
  int v105 = 0;
  uint64_t v108 = 0;
  int v109 = 0;
  uint64_t v110 = 0;
  int v111 = 0;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v114 = 0;
  int v115 = 0;
  uint64_t v116 = 0;
  int v117 = 0;
  uint64_t v118 = 0;
  int v119 = 0;
  uint64_t v120 = 0;
  int v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  uint64_t v124 = 0;
  int v125 = 0;
  uint64_t v128 = 0;
  int v129 = 0;
  uint64_t v130 = 0;
  int v131 = 0;
  uint64_t v132 = 0;
  char v133 = 0;
  __int16 v137 = 0;
  char v138 = 0;
  char v127 = 0;
  long long v126 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  int v139 = -1;
  uint64_t v142 = 0;
  int v143 = 0;
  uint64_t v144 = 0;
  int v145 = 0;
  uint64_t v146 = 0;
  int v147 = 0;
  unint64_t v148 = 0;
  int v149 = 0;
  v150[4] = 0;
  int v151 = 0;
  char v152 = 0;
  long long v140 = 0u;
  int v141 = 0;
  uint64_t v153 = 1;
  char v154 = 0;
  float32x2_t v19 = v10[247];
  uint64_t v93 = v10 + 22;
  if (*(void *)&v10[246] == *(void *)&v19)
  {
    uint64_t v20 = *((void *)this + 21);
    if (*(void *)(v20 + 2064) != *(void *)(v20 + 2072)) {
      this = (re::VideoAsset *)re::VideoPresentationGroup::operator=((uint64_t)&v103, (long long *)(v20 + 896 * (*(void *)(v20 + 2064) & 1) + 272));
    }
  }
  else
  {
    this = (re::VideoAsset *)re::VideoPresentationGroup::operator=((uint64_t)&v103, (long long *)&v10[112 * ((v19.i8[0] & 1) == 0) + 22]);
  }
  long long v21 = (re *)re::VideoDefaults::logEnabled(this);
  if (v21) {
    goto LABEL_178;
  }
LABEL_7:
  re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((void *)v18 + 21) + 4784), *((void *)v18 + 27), HIDWORD(*((void *)v18 + 27)), *((_DWORD *)v18 + 56));
  re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((void *)v18 + 21) + 4808), *((void *)v18 + 29), HIDWORD(*((void *)v18 + 29)), *((_DWORD *)v18 + 60));
  uint64_t v95 = (uint64_t)v10;
  uint64_t v22 = *((void *)v18 + 25);
  if (v22 && *(unsigned char *)(*(void *)v22 + 6332) && !*((unsigned char *)v18 + 250))
  {
    *((unsigned char *)v18 + 249) = 1;
    re::VideoAsset::dimensions(v18);
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((void *)v18 + 21) + 7056), (int)(float)((float)(v23 / v24) * 180.0), 180, *((_DWORD *)v18 + 61));
  }
  uint64_t v25 = (void *)a6;
  uint64_t v26 = *((void *)v18 + 21);
  int v27 = *((unsigned __int8 *)v18 + 249);
  CMTime v101 = *a7;
  LOBYTE(v92) = *((unsigned char *)v18 + 251);
  id v28 = p_buf;
  int v29 = re::retrievePresentationGroupForTime(v26, v95, v27, &v101, (unint64_t)a2, (unint64_t)a3, *((void *)a3 + 36), (unsigned __int8 *)a4, *((void *)a3 + 8), (uint64_t)p_buf, (uint64_t)&v155, (uint64_t)v18 + 40, *((void **)v18 + 13), *((void *)v18 + 24) + 24);
  uint64_t v94 = (BOOL *)a9;
  uint64_t v30 = 0;
  a7 = (CMTime *)(v95 + 1984);
  a4 = (float32x2_t *)(v95 + 2280);
  char v31 = 1;
  do
  {
    char v32 = v31;
    re::VideoChannelTextureHandles::setFallbackTextures((re::VideoChannelTextureHandles *)&a7[6 * v30], *((id **)a3 + 8));
    re::VideoChannelTextureHandles::setFallbackTextures((re::VideoChannelTextureHandles *)&a4[18 * v30], *((id **)a3 + 8));
    char v31 = 0;
    uint64_t v30 = 1;
  }
  while ((v32 & 1) != 0);
  *uint64_t v25 = 0;
  uint64_t v34 = v94;
  p_CMTime buf = &buf;
  if (v29) {
    goto LABEL_18;
  }
  if ((v188 & ~(unint64_t)v28) == 0)
  {
    *uint64_t v25 = v188;
    if (v210)
    {
      unint64_t v42 = 0;
      uint64_t v43 = 816;
      while (1)
      {
        unsigned int v44 = atomic_load(*(unsigned int **)((char *)&v155.value + v43));
        if (v44 != 8) {
          break;
        }
        ++v42;
        v43 += 16;
        if (v42 >= v210) {
          goto LABEL_42;
        }
      }
      if (v148)
      {
        unint64_t v45 = 0;
        uint64_t v46 = (unsigned int **)v150;
        while (1)
        {
          unsigned int v47 = atomic_load(*v46);
          if (v47 != 8) {
            break;
          }
          ++v45;
          v46 += 2;
          if (v45 >= v148) {
            goto LABEL_39;
          }
        }
        int v86 = (id)*re::videoLogObjects(v33);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.value) = 0;
          _os_log_impl(&dword_233120000, v86, OS_LOG_TYPE_DEFAULT, "Presentation group is not ready.", (uint8_t *)&buf, 2u);
        }

        int v29 = 5;
        goto LABEL_18;
      }
LABEL_39:
      uint64_t v48 = (id)*re::videoLogObjects(v33);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.value) = 0;
        _os_log_impl(&dword_233120000, v48, OS_LOG_TYPE_DEFAULT, "Presentation group is not ready. Using previous presentation group.", (uint8_t *)&buf, 2u);
      }

      uint64_t v33 = (re *)re::VideoPresentationGroup::operator=((uint64_t)&v155, (long long *)&v103.value);
    }
LABEL_42:
    a6 = 1;
    *a10 = 1;
    if (!*((unsigned char *)v18 + 933)
      && (*((unsigned char *)v18 + 933) = 1, long long v49 = (re *)re::VideoDefaults::logEnabled(v33), v49))
    {
      uint64_t v91 = (id)*re::videoLogObjects(v49);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.value) = 0;
        _os_log_impl(&dword_233120000, v91, OS_LOG_TYPE_DEFAULT, "[VideoAsset]->retrieveBuffersAndUpdateRuntimeData :: outPixelBufferFound is set to True which is variable for VideoComponent::isReadyToRender", (uint8_t *)&buf, 2u);
      }

      uint64_t v34 = v94;
      p_CMTime buf = &buf;
      int v29 = 0;
      a6 = 1;
    }
    else
    {
      int v29 = 0;
    }
    goto LABEL_19;
  }
  id v35 = (id)*re::videoLogObjects(v33);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.value) = 134218240;
    *(CMTimeValue *)((char *)&buf.value + 4) = v188;
    LOWORD(buf.flags) = 2048;
    *(void *)((char *)&buf.flags + 2) = v28;
    _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "Unable to play back protected content %llu at current protection levels %llu.", (uint8_t *)&buf, 0x16u);
  }

  *uint64_t v25 = v188;
  int v29 = 3;
LABEL_18:
  a6 = 0;
  *a10 = 0;
LABEL_19:
  CMTime buf = v103;
  CMTime time2 = v155;
  StringID v36 = (re *)CMTimeCompare(&buf, &time2);
  if (v36)
  {
    BOOL v37 = 0;
    uint64_t v38 = v95;
    goto LABEL_47;
  }
  uint64_t v38 = v95;
  if (v104 != v156) {
    goto LABEL_28;
  }
  if (!v104)
  {
    BOOL v37 = 1;
    goto LABEL_47;
  }
  if (v106 != v158)
  {
LABEL_28:
    BOOL v37 = 0;
    goto LABEL_47;
  }
  unint64_t v39 = 0;
  while (v104 - 1 != v39)
  {
    int v40 = v107[v39];
    int v41 = v159[v39++];
    if (v40 != v41) {
      goto LABEL_46;
    }
  }
  unint64_t v39 = v104;
LABEL_46:
  BOOL v37 = v39 >= v104;
LABEL_47:
  *uint64_t v34 = !v37;
  if (!a6)
  {
    if (v29 == 5 || v29 == 3)
    {
      int v56 = v197;
      *(_DWORD *)(v38 + 22re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v197;
      if (v165) {
        *(_DWORD *)(v38 + 2568) = v56;
      }
    }
    else
    {
      if (*((_DWORD *)v18 + 30) != v29)
      {
        int v57 = *re::videoLogObjects(v36);
        StringID v36 = (re *)os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
        if (v36)
        {
          LODWORD(buf.value) = 67109120;
          HIDWORD(buf.value) = v29;
          _os_log_error_impl(&dword_233120000, v57, OS_LOG_TYPE_ERROR, "Unable to get presentation group (error: %d)", (uint8_t *)&buf, 8u);
        }
        *((_DWORD *)v18 + 30) = v29;
      }
      *(_DWORD *)(v38 + 22re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = -1;
      *(_DWORD *)(v38 + 2568) = -1;
      *(void *)(v38 + 2592) = 0;
      *(void *)(v38 + 2576) = 0;
      *((_OWORD *)v18 + 40) = re::kVideoMajorColorDefault;
      unint64_t v58 = (re *)re::VideoDefaults::logEnabled(v36);
      if (v58)
      {
        uint64_t v59 = *re::videoLogObjects(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.value) = 0;
          _os_log_impl(&dword_233120000, v59, OS_LOG_TYPE_DEFAULT, "==========================================", (uint8_t *)&buf, 2u);
        }
      }
    }
    goto LABEL_153;
  }
  *(unsigned char *)(v38 + 2276) = v217;
  if (*((unsigned char *)v18 + 251))
  {
    uint64_t v50 = (id)*re::videoLogObjects(v36);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_233120000, v50, OS_LOG_TYPE_DEFAULT, "First successful sampling", (uint8_t *)&buf, 2u);
    }

    *((unsigned char *)v18 + 251) = 0;
  }
  uint64_t v51 = (re::VideoHistogram *)re::VideoDefaults::logEnabled(v36);
  if (v51) {
    re::CoreVideoUtils::printPresentationGroupInfo(&v155, v52);
  }
  if (v215 || !v207)
  {
    *((_OWORD *)v18 + 39) = 0u;
    *((_OWORD *)v18 + 40) = re::kVideoMajorColorDefault;
    double v10 = (float32x2_t *)v95;
  }
  else
  {
    uint64_t v51 = v209;
    double v10 = (float32x2_t *)v95;
    if (v209)
    {
      uint64_t v51 = (re::VideoHistogram *)re::VideoHistogram::data(v209);
      if (*(void *)v51)
      {
        uint64_t v53 = (re::VideoDefaults *)re::videoStatisticsComputeAverageColor(v209, v52);
        buf.CMTimeValue value = (CMTimeValue)v53;
        *(void *)&buf.CMTimeScale timescale = v54;
        *((_OWORD *)v18 + 39) = *(_OWORD *)&buf.value;
        uint64_t v51 = (re::VideoHistogram *)re::VideoDefaults::passthroughTintColorTuningAllowed(v53);
        if (v51)
        {
          re::VideoColorTuner::calculateColor((uint64_t)v18 + 656, (float *)v18 + 216, (float32x4_t *)v18 + 45, (float32x4_t *)&buf);
          *(void *)&long long v55 = v51;
          DWORD2(v55) = v52;
        }
        else
        {
          long long v55 = *(_OWORD *)&buf.value;
        }
        HIDWORD(v55) = 1.0;
        *((_OWORD *)v18 + 40) = v55;
      }
    }
  }
  unint64_t v60 = v168;
  if (v168)
  {
    p_CMTime buf = 0;
    a9 = (id *)v170;
    a6 = (unint64_t)v200;
    uint64_t v61 = (__int16 *)&v206;
    a2 = (char **)(v95 + 1984);
    while (1)
    {
      if (*a9 || a9[1] || a9[2])
      {
        if ((unint64_t)p_buf >= 2)
        {
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, p_buf, 2, v92);
          _os_crash();
          __break(1u);
LABEL_159:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, p_buf, v60);
          _os_crash();
          __break(1u);
LABEL_160:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, p_buf, v62);
          _os_crash();
          __break(1u);
LABEL_161:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, p_buf, v63);
          _os_crash();
          __break(1u);
LABEL_162:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a7, 2);
          _os_crash();
          __break(1u);
LABEL_163:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a7, v73);
          _os_crash();
          __break(1u);
LABEL_164:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a7, v74);
          _os_crash();
          __break(1u);
LABEL_165:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a7, v75);
          _os_crash();
          __break(1u);
LABEL_166:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v61, 2);
          _os_crash();
          __break(1u);
LABEL_167:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v61, v70);
          _os_crash();
          __break(1u);
LABEL_168:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v61, 2);
          _os_crash();
          __break(1u);
LABEL_169:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v61, v71);
          _os_crash();
          __break(1u);
LABEL_170:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, p_buf, 2);
          _os_crash();
          __break(1u);
          goto LABEL_171;
        }
        if (v60 <= (unint64_t)p_buf) {
          goto LABEL_159;
        }
        uint64_t v62 = *((void *)&v198 + 1);
        if (*((void *)&v198 + 1) <= (unint64_t)p_buf) {
          goto LABEL_160;
        }
        unint64_t v63 = v204;
        if (v204 <= (unint64_t)p_buf) {
          goto LABEL_161;
        }
        re::VideoChannelTextureHandles::setTextures((uint64_t)a2, *((void *)a3 + 8), a9, v195 != 0, v189, HIBYTE(v195) != 0, (CFTypeRef *)a6, v61, v196);
        unint64_t v60 = v168;
      }
      p_CMTime buf = (CMTime *)((char *)p_buf + 1);
      a6 += 8;
      uint64_t v61 = (__int16 *)((char *)v61 + 3);
      a2 += 18;
      a9 += 3;
      if ((unint64_t)p_buf >= v60) {
        goto LABEL_97;
      }
    }
  }
  unint64_t v64 = v162;
  if (v162)
  {
    p_CMTime buf = 0;
    a9 = (id *)&v164;
    a6 = (unint64_t)v200;
    int v65 = (__int16 *)v203;
    a2 = (char **)(v95 + 1984);
    do
    {
      if (*a9 || a9[1] || a9[2])
      {
        if ((unint64_t)p_buf >= 2) {
          goto LABEL_170;
        }
        if (v64 <= (unint64_t)p_buf)
        {
LABEL_171:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, p_buf, v64);
          _os_crash();
          __break(1u);
LABEL_172:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, p_buf, v66);
          _os_crash();
          __break(1u);
LABEL_173:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a6, 2);
          _os_crash();
          __break(1u);
LABEL_174:
          re::internal::assertLog((re::internal *)6, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, p_buf, v67);
          _os_crash();
          __break(1u);
LABEL_175:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a6, v76);
          _os_crash();
          __break(1u);
LABEL_176:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a6, 2);
          _os_crash();
          __break(1u);
LABEL_177:
          re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a6, v77);
          long long v21 = (re *)_os_crash();
          __break(1u);
LABEL_178:
          uint64_t v87 = (id)*re::videoLogObjects(v21);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.value) = 0;
            _os_log_impl(&dword_233120000, v87, OS_LOG_TYPE_DEFAULT, "==========================================", (uint8_t *)&buf, 2u);
          }

          goto LABEL_7;
        }
        uint64_t v66 = *((void *)&v198 + 1);
        if (*((void *)&v198 + 1) <= (unint64_t)p_buf) {
          goto LABEL_172;
        }
        unint64_t v67 = v201;
        if (v201 <= (unint64_t)p_buf) {
          goto LABEL_174;
        }
        re::VideoChannelTextureHandles::setTextures((uint64_t)a2, *((void *)a3 + 8), (CVPixelBufferRef *)a9, v195 != 0, v189, HIBYTE(v195) != 0, (CFTypeRef *)a6, v65, v196);
        unint64_t v64 = v162;
      }
      p_CMTime buf = (CMTime *)((char *)p_buf + 1);
      a6 += 8;
      int v65 = (__int16 *)((char *)v65 + 3);
      a2 += 18;
      a9 += 3;
    }
    while ((unint64_t)p_buf < v64);
  }
LABEL_97:
  id v68 = (id)re::VideoDefaults::screenFallbackTextureEnabled(v51);
  if (v68)
  {
    uint64_t v88 = 0;
    uint64_t v89 = 1;
    do
    {
      a6 = v89;
      re::VideoChannelTextureHandles::setScreenFallbackTextures((re::VideoChannelTextureHandles *)&a7[6 * v88], *((id **)a3 + 8));
      uint64_t v89 = 0;
      uint64_t v88 = 1;
    }
    while ((a6 & 1) != 0);
  }
  unint64_t v70 = v176;
  a2 = &selRef_taskToken;
  if (v176)
  {
    uint64_t v61 = 0;
    a7 = (CMTime *)v178;
    a9 = (id *)&v10[254];
    do
    {
      id v68 = (id)v178[(void)v61];
      if (v68)
      {
        if ((unint64_t)v61 >= 2) {
          goto LABEL_166;
        }
        if (v70 <= (unint64_t)v61) {
          goto LABEL_167;
        }
        a6 = *((void *)a3 + 8);
        id v100 = v68;
        *((_DWORD *)a9 + 15) = objc_msgSend(v100, sel_pixelFormat);
        id v68 = v100;
        if (v100)
        {

          id v100 = 0;
        }
      }
      uint64_t v61 = (__int16 *)((char *)v61 + 1);
      unint64_t v70 = v176;
      a9 += 18;
    }
    while ((unint64_t)v61 < v176);
  }
  unint64_t v71 = v179;
  if (v179)
  {
    uint64_t v61 = 0;
    a7 = (CMTime *)v181;
    a9 = (id *)&v10[256];
    do
    {
      id v68 = (id)v181[(void)v61];
      if (v68)
      {
        if ((unint64_t)v61 >= 2) {
          goto LABEL_168;
        }
        if (v71 <= (unint64_t)v61) {
          goto LABEL_169;
        }
        a6 = *((void *)a3 + 8);
        id v99 = v68;
        *((_DWORD *)a9 + 12) = objc_msgSend(v99, sel_pixelFormat);
        id v68 = v99;
        if (v99)
        {

          id v99 = 0;
        }
      }
      uint64_t v61 = (__int16 *)((char *)v61 + 1);
      unint64_t v71 = v179;
      a9 += 18;
    }
    while ((unint64_t)v61 < v179);
  }
  if (*((unsigned char *)v18 + 249))
  {
    id v68 = (id)*((void *)&v182 + 1);
    if (*((void *)&v182 + 1))
    {
      long long v72 = (os_unfair_lock_s *)*((void *)a3 + 8);
      id v98 = *((id *)&v182 + 1);
      v10[262].i32[1] = objc_msgSend(v98, sel_pixelFormat);
      id v68 = v98;
      if (v98)
      {

        id v98 = 0;
      }
      *(_WORD *)((char *)v18 + 249) = 256;
    }
  }
  v10[284].i32[0] = v197;
  unint64_t v73 = v165;
  if (v165)
  {
    a7 = 0;
    a9 = (id *)&v167;
    a6 = (unint64_t)v200;
    uint64_t v61 = (__int16 *)v203;
    do
    {
      if (*a9 || a9[1] || a9[2])
      {
        if ((unint64_t)a7 >= 2) {
          goto LABEL_162;
        }
        if (v73 <= (unint64_t)a7) {
          goto LABEL_163;
        }
        uint64_t v74 = *((void *)&v198 + 1);
        if (*((void *)&v198 + 1) <= (unint64_t)a7) {
          goto LABEL_164;
        }
        unint64_t v75 = v201;
        if (v201 <= (unint64_t)a7) {
          goto LABEL_165;
        }
        re::VideoChannelTextureHandles::setTextures((uint64_t)a4, *((void *)a3 + 8), (CVPixelBufferRef *)a9, v195 != 0, v189, HIBYTE(v195) != 0, (CFTypeRef *)a6, v61, v196);
        unint64_t v73 = v165;
      }
      a7 = (CMTime *)((char *)a7 + 1);
      a6 += 8;
      uint64_t v61 = (__int16 *)((char *)v61 + 3);
      a4 += 18;
      a9 += 3;
    }
    while ((unint64_t)a7 < v73);
    unint64_t v76 = v176;
    if (v176)
    {
      a6 = 0;
      a4 = v10 + 291;
      do
      {
        id v68 = (id)v178[a6];
        if (v68)
        {
          if (a6 >= 2) {
            goto LABEL_173;
          }
          if (v76 <= a6) {
            goto LABEL_175;
          }
          a9 = (id *)*((void *)a3 + 8);
          id v97 = v68;
          a4[7].i32[1] = objc_msgSend(v97, sel_pixelFormat);
          id v68 = v97;
          if (v97)
          {

            id v97 = 0;
          }
        }
        ++a6;
        unint64_t v76 = v176;
        a4 += 18;
      }
      while (a6 < v176);
    }
    unint64_t v77 = v179;
    if (v179)
    {
      a6 = 0;
      a4 = v10 + 293;
      do
      {
        id v68 = (id)v181[a6];
        if (v68)
        {
          if (a6 >= 2) {
            goto LABEL_176;
          }
          if (v77 <= a6) {
            goto LABEL_177;
          }
          a9 = (id *)*((void *)a3 + 8);
          id v96 = v68;
          a4[6].i32[0] = objc_msgSend(v96, sel_pixelFormat);
          id v68 = v96;
          if (v96)
          {

            id v96 = 0;
          }
        }
        ++a6;
        unint64_t v77 = v179;
        a4 += 18;
      }
      while (a6 < v179);
    }
    v10[321].i32[0] = v197;
  }
  float v78 = *(double *)&v192;
  float v79 = *((double *)&v192 + 1);
  v10[324] = (float32x2_t)(*(void *)&vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v18 + 608), v78), *(float32x2_t *)((char *)v18 + 616), v79) & 0x7FFFFFFF7FFFFFFFLL);
  v10[322] = (float32x2_t)v198;
  float64x2_t v80 = vcvtq_f64_u64(v190);
  v10[327] = vcvt_f32_f64(vdivq_f64(v193, v80));
  v10[326] = vcvt_f32_f64(vdivq_f64(v194, v80));
  uint64_t v81 = (re::VideoDefaults *)re::VideoDefaults::horizontalDisparityEnabled((re::VideoDefaults *)v68);
  float v82 = 0.0;
  if (v81 && v212) {
    float v82 = re::VideoDefaults::overrideHorizontalDispartiy(v81, v214);
  }
  v10[328].f32[0] = v82;
  float32x2_t v83 = v10[247];
  if (*(void *)&v83 - *(void *)&v10[246] == 2) {
    v10[246] = (float32x2_t)(*(void *)&v83 - 1);
  }
  v10[247] = (float32x2_t)(*(void *)&v83 + 1);
  int v84 = (re::VideoDefaults *)re::VideoPresentationGroup::operator=((uint64_t)&v93[112 * (v83.i8[0] & 1)], (long long *)&v155.value);
  uint64_t v85 = (re *)re::VideoDefaults::logEnabled(v84);
  if (v85)
  {
    uint64_t v90 = (id)*re::videoLogObjects(v85);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_233120000, v90, OS_LOG_TYPE_DEFAULT, "==========================================", (uint8_t *)&buf, 2u);
    }
  }
LABEL_153:
  re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&v103);
  re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&v155);
}

void sub_2334C64B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,id a21,id a22,id a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t re::VideoHistogram::data(re::VideoHistogram *this)
{
  id v2 = (unsigned __int8 *)this + 44;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 44);
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 10);
    unsigned __int8 v4 = atomic_load(v2);
    if (v4)
    {
      *((void *)this + 6) = *((void *)this + 205);
      re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)this + 7, (unint64_t *)this + 206);
      re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)this + 73, (unint64_t *)this + 272);
      re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)this + 139, (unint64_t *)this + 338);
      atomic_store(0, (unsigned __int8 *)this + 44);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 10);
  }
  return (uint64_t)this + 48;
}

uint64_t re::VideoAsset::init(uint64_t **this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!this[21])
  {
    id v2 = re::globalAllocators((re *)this);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 7088, 16);
    bzero((void *)v3, 0x1BB0uLL);
    *(_DWORD *)(v3 + 36) = 0x7FFFFFFF;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 136) = 0;
    *(void *)(v3 + 144) = 0;
    *(void *)(v3 + 128) = 0;
    *(_WORD *)(v3 + 152) = 514;
    *(unsigned char *)(v3 + 154) = 2;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(void *)(v3 + 192) = 0x7FFFFFFF00000000;
    *(_OWORD *)(v3 + 208) = 0u;
    *(_OWORD *)(v3 + 224) = 0u;
    *(void *)(v3 + 256) = 2;
    *(void *)(v3 + 240) = 0;
    re::FixedInlineArray<re::VideoPresentationGroup,2ul>::FixedInlineArray(v3 + 272);
    uint64_t v4 = 0;
    *(void *)(v3 + 2164) = 0x7FFFFFFFLL;
    *(void *)(v3 + 2212) = 0x7FFFFFFFLL;
    *(void *)(v3 + 2260) = 0x7FFFFFFFLL;
    *(void *)(v3 + 2308) = 0x7FFFFFFFLL;
    *(void *)(v3 + 2628) = 0x7FFFFFFFLL;
    *(_OWORD *)(v3 + 2096) = 0u;
    *(_OWORD *)(v3 + 2080) = 0u;
    *(_OWORD *)(v3 + 2064) = 0u;
    *(void *)(v3 + 2112) = 0x7FFFFFFF00000000;
    *(_DWORD *)(v3 + 2re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
    *(_OWORD *)(v3 + 2128) = 0u;
    *(_OWORD *)(v3 + 2144) = 0u;
    *(_DWORD *)(v3 + 2160) = 0;
    *(_OWORD *)(v3 + 2176) = 0u;
    *(_OWORD *)(v3 + 2192) = 0u;
    *(_DWORD *)(v3 + 2208) = 0;
    *(_OWORD *)(v3 + 2224) = 0u;
    *(_OWORD *)(v3 + 2240) = 0u;
    *(_DWORD *)(v3 + 2256) = 0;
    *(_DWORD *)(v3 + 2304) = 0;
    *(_OWORD *)(v3 + 2288) = 0u;
    *(_OWORD *)(v3 + 22re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
    *(_OWORD *)(v3 + 2576) = 0u;
    *(_OWORD *)(v3 + 2592) = 0u;
    *(_OWORD *)(v3 + 2608) = 0u;
    __asm { FMOV            V0.2S, #1.0 }
    *(_DWORD *)(v3 + 2624) = 0;
    do
    {
      *(void *)(v3 + v4 + 2644) = _D0;
      *(_DWORD *)(v3 + v4 + 2668) = 0;
      *(_OWORD *)(v3 + v4 + 2652) = 0uLL;
      v4 += 32;
    }
    while (v4 != 2048);
    *(_OWORD *)(v3 + 4752) = 0u;
    *(_OWORD *)(v3 + 4736) = 0u;
    *(_OWORD *)(v3 + 4720) = 0u;
    *(_OWORD *)(v3 + 4704) = 0u;
    *(_OWORD *)(v3 + 4688) = 0u;
    *(void *)(v3 + 4768) = 0x7FFFFFFF00000000;
    *(_DWORD *)(v3 + 4776) = 0;
    *(void *)(v3 + 4784) = 0;
    *(_DWORD *)(v3 + 4792) = -1;
    *(_OWORD *)(v3 + 4800) = 0u;
    *(_DWORD *)(v3 + 4816) = -1;
    *(void *)(v3 + 4824) = 0;
    *(_WORD *)(v3 + 4896) = 514;
    *(unsigned char *)(v3 + 4898) = 2;
    *(void *)(v3 + 48re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(_OWORD *)(v3 + 4880) = 0u;
    bzero((void *)(v3 + 4904), 0x820uLL);
    uint64_t v10 = MEMORY[0x263F01090];
    *(_OWORD *)(v3 + 6984) = *MEMORY[0x263F01090];
    *(void *)(v3 + 7000) = *(void *)(v10 + 16);
    *(void *)(v3 + 7008) = 0;
    *(_DWORD *)(v3 + 7016) = 0;
    *(void *)(v3 + 7056) = 0;
    *(_OWORD *)(v3 + 7032) = 0u;
    *(unsigned char *)(v3 + 7048) = 0;
    *(_DWORD *)(v3 + 7064) = -1;
    *(void *)(v3 + 70re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    this[21] = (uint64_t *)v3;
    re::VideoTextureCache::init((CVMetalTextureCacheRef *)(v3 + 216));
  }
  int v11 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x263EF83A8], QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v12 = dispatch_queue_create("VideoAsset.backgroundWorkQueue", v11);
  BOOL v13 = this[13];
  this[13] = (uint64_t *)v12;

  if (!this[23]) {
    goto LABEL_13;
  }
  uint64_t v14 = this[24];
  if (!v14) {
    goto LABEL_13;
  }
  uint64_t v26 = 0;
  uint64_t v15 = *v14;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v19 = *(void *)(VTable + 16);
  uint64_t v17 = (re *)(VTable + 16);
  uint64_t v18 = v19;
  if (v19) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = 0;
  }
  long long v21 = *(uint64_t (**)(uint64_t, void **))(v20 + 8);
  if (v21)
  {
    uint64_t v17 = (re *)v21(v15, &v26);
    int v22 = (int)v17;
    if (!v17)
    {
      re::VideoAsset::setReceiverEndpoint((re::VideoAsset *)this, v26);

LABEL_13:
      uint64_t v23 = 1;
      goto LABEL_18;
    }
  }
  else
  {
    int v22 = -12782;
  }
  float v24 = *re::assetTypesLogObjects(v17);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)CMTime buf = 67109120;
    int v28 = v22;
    _os_log_fault_impl(&dword_233120000, v24, OS_LOG_TYPE_FAULT, "Failed to create video target with in-process video receiver (error: %d)", buf, 8u);
  }

  uint64_t v23 = 0;
LABEL_18:

  return v23;
}

void sub_2334C69CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t re::AssetHandle::asset<re::VideoFileAsset>(re::VideoFileAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v2 = re::VideoFileAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = (id)*re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      long long v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        long long v7 = (char *)v6[18];
      }
      else {
        long long v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      unint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::VideoAsset::setDiffuseSpillMapBlurSigma(re::VideoAsset *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = a2 & ~(a2 >> 31);
  if (a2 < 0)
  {
    int v5 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid diffuse spill map blur sigma: %d, diffuse spill map blur sigma clamped to %d", (uint8_t *)v6, 0xEu);
    }
  }
  *((_DWORD *)this + 56) = v3;
}

void re::VideoAsset::setSpecularSpillMapBlurSigma(re::VideoAsset *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = a2 & ~(a2 >> 31);
  if (a2 < 0)
  {
    int v5 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid specular spill map blur sigma: %d, specular spill map blur sigma clamped to %d", (uint8_t *)v6, 0xEu);
    }
  }
  *((_DWORD *)this + 60) = v3;
}

uint64_t re::VideoAssetLoader::introspectionType(re::VideoAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A260))
  {
    qword_26AF7A258 = re::internal::getOrCreateInfo((re::internal *)"VideoAsset", (uint64_t (*)(re::internal *))re::allocInfo_VideoAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VideoAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7A250, 0);
    __cxa_guard_release(&qword_26AF7A260);
  }
  return qword_26AF7A258;
}

uint64_t re::VideoAssetLoader::createRuntimeData(re *a1, re::VideoAsset *this)
{
  uint64_t v3 = *((void *)this + 24);
  if (*((_DWORD *)a1 + 2))
  {
    if (!v3) {
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    uint64_t v4 = re::globalAllocators(a1);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 2640, 16);
    bzero((void *)(v3 + 16), 0xA40uLL);
    uint64_t v5 = 0;
    *(void *)(v3 + 8) = 0xFFFFFFFFLL;
    *(void *)uint64_t v3 = 0;
    long long v6 = (long long *)MEMORY[0x263F01090];
    do
    {
      uint64_t v7 = v3 + v5;
      *(void *)(v7 + 24) = 0;
      *(_DWORD *)(v7 + 32) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = -1;
      long long v8 = *v6;
      *(void *)(v7 + 84) = *((void *)v6 + 2);
      *(_OWORD *)(v7 + 68) = v8;
      v5 += 72;
    }
    while (v5 != 144);
    re::FixedInlineArray<re::VideoPresentationGroup,2ul>::FixedInlineArray(v3 + 176);
    *(void *)(v3 + 2112) = 0;
    *(_DWORD *)(v3 + 2104) = 0;
    *(void *)(v3 + 2256) = 0;
    *(_DWORD *)(v3 + 2248) = 0;
    *(_OWORD *)(v3 + 2128) = 0u;
    *(_OWORD *)(v3 + 2144) = 0u;
    *(_OWORD *)(v3 + 2160) = 0u;
    *(_OWORD *)(v3 + 2176) = 0u;
    *(_OWORD *)(v3 + 2192) = 0u;
    *(_OWORD *)(v3 + 2208) = 0u;
    *(_OWORD *)(v3 + 2220) = 0u;
    *(_OWORD *)(v3 + 1968) = 0u;
    *(_OWORD *)(v3 + 1984) = 0u;
    *(_OWORD *)(v3 + 2000) = 0u;
    *(_OWORD *)(v3 + 2016) = 0u;
    *(_OWORD *)(v3 + 2032) = 0u;
    *(_OWORD *)(v3 + 2048) = 0u;
    *(_OWORD *)(v3 + 2064) = 0u;
    *(_OWORD *)(v3 + 2076) = 0u;
    *(_DWORD *)(v3 + 22re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = -1;
    *(unsigned char *)(v3 + 2276) = 0;
    *(void *)(v3 + 2408) = 0;
    *(_DWORD *)(v3 + 2400) = 0;
    *(_OWORD *)(v3 + 2280) = 0u;
    *(_OWORD *)(v3 + 2296) = 0u;
    *(_OWORD *)(v3 + 2312) = 0u;
    *(_OWORD *)(v3 + 2328) = 0u;
    *(_OWORD *)(v3 + 2344) = 0u;
    *(_OWORD *)(v3 + 2360) = 0u;
    *(_OWORD *)(v3 + 23re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
    *(void *)(v3 + 2552) = 0;
    *(_DWORD *)(v3 + 2544) = 0;
    *(_OWORD *)(v3 + 2424) = 0u;
    *(_OWORD *)(v3 + 2440) = 0u;
    *(_OWORD *)(v3 + 2456) = 0u;
    *(_OWORD *)(v3 + 24re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
    *(_OWORD *)(v3 + 2488) = 0u;
    *(_OWORD *)(v3 + 2504) = 0u;
    *(_OWORD *)(v3 + 2516) = 0u;
    *(_DWORD *)(v3 + 2568) = -1;
    *(unsigned char *)(v3 + 25re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(unsigned char *)(v3 + 2600) = 0;
    *(void *)(v3 + 2592) = 0;
    *(_OWORD *)(v3 + 2576) = 0u;
    *(_OWORD *)(v3 + 2608) = xmmword_234376D80;
    *(_DWORD *)(v3 + 2624) = 0;
    *((void *)this + 24) = v3;
  }
LABEL_9:
  uint64_t v9 = re::VideoAsset::init((uint64_t **)this);
  uint64_t v10 = *((void *)this + 21);
  if (v10)
  {
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(v10 + 4784), *((void *)this + 27), HIDWORD(*((void *)this + 27)), *((_DWORD *)this + 56));
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((void *)this + 21) + 4808), *((void *)this + 29), HIDWORD(*((void *)this + 29)), *((_DWORD *)this + 60));
  }
  return v9;
}

void anonymous namespace'::onPrepareDataChannels(int a1, const __CFArray *a2, int a3, re *this, const __CFDictionary *a5, const __CFArray *a6, uint64_t a7)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  re::logVideoInfo(this, a2);
  if (!a7 || !*(void *)(a7 + 192)) {
    return;
  }
  locuint64_t k = (os_unfair_lock_s *)(a7 + 256);
  if (this)
  {
    if (a5)
    {
      CFIndex Count = CFArrayGetCount(this);
      if (Count)
      {
        unint64_t v12 = Count;
        unint64_t v13 = 0;
        uint64_t v14 = MEMORY[0x263F00DF0];
        uint64_t v15 = (void *)MEMORY[0x263F01610];
        uint64_t v16 = MEMORY[0x263F00DF8];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(this, v13);
          if (v14) {
            BOOL v18 = ValueAtIndex == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (!v18 && MEMORY[0x237DBAA60](ValueAtIndex, *v15, v15[1]))
          {
            *(_OWORD *)CMTime buf = *MEMORY[0x263F015F8];
            if (v16) {
              FigTagCollectionGetTagsWithCategory();
            }
            if (*(_DWORD *)&buf[4] && MEMORY[0x263F00E08])
            {
              uint64_t valuePtr = FigTagGetSInt64Value();
              CFNumberRef v46 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, &valuePtr);
              if (v46)
              {
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, v46);
                if (Value)
                {
                  CFArrayRef v48 = (const __CFArray *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x263F12508]);
                  CFArrayRef v49 = v48;
                  if (v48)
                  {
                    if (CFArrayGetCount(v48) == 9)
                    {
                      int v58 = 0;
                      uint64_t v50 = 0;
                      char v51 = 1;
                      int v52 = 1065353216;
                      while (1)
                      {
                        uint64_t v53 = 0;
                        uint64_t v54 = 0;
                        *(void *)CMTime buf = 0;
                        do
                        {
                          CFNumberRef v55 = (const __CFNumber *)CFArrayGetValueAtIndex(v49, v50 + v53);
                          LODWORD(valuePtr) = 0;
                          CFNumberGetValue(v55, kCFNumberFloatType, &valuePtr);
                          *(_DWORD *)&buf[4 * v54] = valuePtr;
                          ++v53;
                          uint64_t v54 = 1;
                        }
                        while (v53 != 2);
                        int v56 = *(_DWORD *)buf;
                        if ((v51 & 1) == 0) {
                          break;
                        }
                        char v51 = 0;
                        int v52 = *(_DWORD *)buf;
                        int v58 = *(_DWORD *)&buf[4];
                        v50 += v53 + 1;
                      }
                      int v57 = *(_DWORD *)&buf[4];
                      os_unfair_lock_lock(lock);
                      *(_DWORD *)(a7 + 528) = v52;
                      *(_DWORD *)(a7 + 532) = v56;
                      *(_DWORD *)(a7 + 536) = v58;
                      *(_DWORD *)(a7 + 540) = v57;
                      atomic_store(1u, (unsigned __int8 *)(a7 + 520));
                      os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 256));
                    }
                  }
                }
              }
              break;
            }
            if (*(_DWORD *)&buf[4]) {
              break;
            }
          }
          ++v13;
        }
        while (v13 < v12);
      }
    }
  }
  if (!a6 || (CFIndex v19 = CFArrayGetCount(a6), v19 < 1))
  {
    char v20 = 0;
LABEL_47:
    unint64_t v39 = (re *)CFArrayGetCount(this);
    int v40 = (id)*re::assetTypesLogObjects(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = "Invalid";
      if (v39) {
        int v41 = "2D";
      }
      *(_DWORD *)CMTime buf = 136446210;
      *(void *)&uint8_t buf[4] = v41;
      _os_log_impl(&dword_233120000, v40, OS_LOG_TYPE_DEFAULT, "Content type detected is %{public}s", buf, 0xCu);
    }

    char v42 = v20 & 1;
    unsigned int v44 = *re::assetTypesLogObjects(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CMTime buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 0;
      _os_log_impl(&dword_233120000, v44, OS_LOG_TYPE_DEFAULT, "Stereo type detected is %{public}d", buf, 8u);
    }
    LOWORD(valuePtr) = v39 != 0;
    BYTE2(valuePtr) = v42;
    int v64 = 1;
    re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)&valuePtr, 3, 7);
    if (v64 != -1) {
      ((void (*)(CFTypeRef *, uint64_t *))off_26E6D5470[v64])(&cf, &valuePtr);
    }
    re::VideoAssetResourceContext::pushResourceData((uint64_t)lock, (uint64_t *)buf);
    if (*(_DWORD *)&buf[16] != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_26E6D5470[*(unsigned int *)&buf[16]])(&valuePtr, &buf[8]);
    }
    return;
  }
  char v20 = 0;
  CFIndex v21 = 0;
  int v22 = (const void **)(a7 + 32);
  uint64_t v23 = MEMORY[0x263F00DF0];
  float v24 = (void *)MEMORY[0x263F01640];
  while (1)
  {
    uint64_t v25 = CFArrayGetValueAtIndex(a6, v21);
    CFRetain(v25);
    if (!v25) {
      goto LABEL_44;
    }
    CFTypeRef cf = 0;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v29 = *(void *)(VTable + 16);
    int v27 = (re *)(VTable + 16);
    uint64_t v28 = v29;
    uint64_t v30 = v29 ? v28 : 0;
    char v31 = *(uint64_t (**)(const void *, CFTypeRef *))(v30 + 24);
    if (!v31) {
      break;
    }
    int v27 = (re *)v31(v25, &cf);
    int v32 = (int)v27;
    if (v27) {
      goto LABEL_58;
    }
    if (v23)
    {
      uint64_t v33 = (re *)MEMORY[0x237DBAA60](cf, *v24, v24[1]);
      if (v33)
      {
        uint64_t v34 = *re::assetTypesLogObjects(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CMTime buf = 134217984;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, "Received onPrepareDataChannels with resource(%p)", buf, 0xCu);
        }
        if (*v22 != v25)
        {
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v22, v25);
          StringID v36 = *re::assetTypesLogObjects(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v37 = *v22;
            *(_DWORD *)CMTime buf = 134217984;
            *(void *)&uint8_t buf[4] = v37;
            _os_log_impl(&dword_233120000, v36, OS_LOG_TYPE_DEFAULT, "Current player item fig resource(%p) is set", buf, 0xCu);
          }
          CFTypeRef v60 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v60, v25);
          uint64_t valuePtr = 0;
          CFTypeRef v38 = v60;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)&valuePtr, v60);
          int v64 = 0;
          re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)&valuePtr, 1, 6);
          if (v64 != -1) {
            ((void (*)(char *, uint64_t *))off_26E6D5470[v64])(&v62, &valuePtr);
          }
          re::VideoAssetResourceContext::pushResourceData((uint64_t)lock, (uint64_t *)buf);
          if (*(_DWORD *)&buf[16] != -1) {
            ((void (*)(uint64_t *, unsigned char *))off_26E6D5470[*(unsigned int *)&buf[16]])(&valuePtr, &buf[8]);
          }
          if (v38) {
            re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v38);
          }
          char v20 = 1;
        }
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v25);
LABEL_44:
    if (v19 == ++v21) {
      goto LABEL_47;
    }
  }
  int v32 = -12782;
LABEL_58:
  unint64_t v45 = *re::assetTypesLogObjects(v27);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)CMTime buf = 134218240;
    *(void *)&uint8_t buf[4] = v25;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v32;
    _os_log_error_impl(&dword_233120000, v45, OS_LOG_TYPE_ERROR, "Error occured while getting a description fig tags of a resource(%p) - %d", buf, 0x12u);
  }
  re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v25);
}

void sub_2334C75C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a21 != -1) {
    ((void (*)(char *, uint64_t))off_26E6D5470[a21])(&a17, a10);
  }
  if (v22) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v22);
  }
  re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::resourceLifeCycleCallback(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a3 && *(void *)(a3 + 192))
  {
    CFTypeRef cf = 0;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v10 = *(void *)(VTable + 16);
    long long v8 = (re *)(VTable + 16);
    uint64_t v9 = v10;
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = *(uint64_t (**)(const void *, CFTypeRef *))(v11 + 24);
    if (v12)
    {
      long long v8 = (re *)v12(a2, &cf);
      int v13 = (int)v8;
      if (!v8)
      {
        if (MEMORY[0x263F00DF0])
        {
          long long v8 = (re *)MEMORY[0x237DBAA60](cf, *MEMORY[0x263F01640], *(void *)(MEMORY[0x263F01640] + 8));
          BOOL v14 = v8 != 0;
        }
        else
        {
          BOOL v14 = 0;
        }
        uint64_t v16 = a3 + 256;
        if (a4 == 1)
        {
          char v20 = *re::assetTypesLogObjects(v8);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 134217984;
            char v31 = a2;
            _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Received kFigVideoReceiverResourceLifeCycleEvent_Removed for resource(%p)", buf, 0xCu);
          }
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterRemoveListener();
          CFRetain(a2);
          *(void *)uint64_t v28 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v28, a2);
          *(_DWORD *)&v28[8] = 0;
          re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)v28, v14, 2);
          if (*(_DWORD *)&v28[8] != -1) {
            ((void (*)(const void **, unsigned char *))off_26E6D5470[*(unsigned int *)&v28[8]])(&v24, v28);
          }
          re::VideoAssetResourceContext::pushResourceData(a3 + 256, (uint64_t *)buf);
        }
        else
        {
          if (a4)
          {
LABEL_43:
            if (cf) {
              CFRelease(cf);
            }
            return;
          }
          uint64_t v17 = *re::assetTypesLogObjects(v8);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CMTime buf = 134217984;
            char v31 = a2;
            _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Received kFigVideoReceiverResourceLifeCycleEvent_Added for resource(%p)", buf, 0xCu);
          }
          CFRetain(a2);
          *(void *)uint64_t v28 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v28, a2);
          *(_DWORD *)&v28[8] = 0;
          re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)v28, v14, 1);
          if (*(_DWORD *)&v28[8] != -1) {
            ((void (*)(const void **, unsigned char *))off_26E6D5470[*(unsigned int *)&v28[8]])(&v24, v28);
          }
          re::VideoAssetResourceContext::pushResourceData(a3 + 256, (uint64_t *)buf);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterAddListener();
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v18) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          CFIndex v21 = *(uint64_t (**)(const void *))(v19 + 8);
          if (v21)
          {
            int v22 = (re *)v21(a2);
            if (v22 == 1)
            {
              uint64_t v23 = *re::assetTypesLogObjects(v22);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v28 = 134217984;
                *(void *)&v28[4] = a2;
                _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Looks like the newly added resource(%p) state is already kFigDataChannelResourceState_Ready", v28, 0xCu);
              }
              CFRetain(a2);
              float v24 = 0;
              re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v24, a2);
              int v25 = 0;
              re::VideoAssetResourceData::create((uint64_t)v28, (uint64_t)&v24, v14, 3);
              if (v25 != -1) {
                ((void (*)(char *, const void **))off_26E6D5470[v25])(&v27, &v24);
              }
              re::VideoAssetResourceContext::pushResourceData(v16, (uint64_t *)v28);
              if (v29 != -1) {
                ((void (*)(const void **, unsigned char *))off_26E6D5470[v29])(&v24, &v28[8]);
              }
              if (a2) {
                re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(a2);
              }
            }
          }
        }
        if (v32 != -1) {
          ((void (*)(unsigned char *, char *))off_26E6D5470[v32])(v28, (char *)&v31 + 4);
        }
        if (a2) {
          re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(a2);
        }
        goto LABEL_43;
      }
    }
    else
    {
      int v13 = -12782;
    }
    uint64_t v15 = *re::assetTypesLogObjects(v8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CMTime buf = 67109120;
      LODWORD(v31) = v13;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Error occured while getting a description fig tags of a resource - %d", buf, 8u);
    }
  }
}

void sub_2334C7BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, int a18, int a19, int a20,uint64_t a21,char a22,uint64_t a23,int a24)
{
  if (a20 != -1) {
    ((void (*)(uint64_t *, int *))off_26E6D5470[a20])(&a9, &a18);
  }
  if (v24) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v24);
  }
  if (a24 != -1) {
    ((void (*)(char *, uint64_t *))off_26E6D5470[a24])(&a16, &a23);
  }
  if (v24) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v24);
  }
  _Unwind_Resume(exception_object);
}

void *re::VideoAsset::cleanupVideoPlayerHelper(void *this)
{
  uint64_t v1 = (id **)this[25];
  if (v1)
  {
    id v2 = this;
    uint64_t v3 = re::globalAllocators((re *)this)[2];
    re::ecs2::VideoPlayerComponentHelper::~VideoPlayerComponentHelper(v1);
    this = (void *)(*(uint64_t (**)(uint64_t, id **))(*(void *)v3 + 40))(v3, v1);
    v2[25] = 0;
  }
  return this;
}

uint64_t re::VideoAsset::containsFigDataChannelResource(uint64_t result, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 552);
  if (v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a2 + 568;
    while (1)
    {
      unint64_t v9 = *(void *)(a2 + 552);
      if (v9 <= v7) {
        break;
      }
      double result = CFEqual(*(CFTypeRef *)(v8 + 8 * v7), *a3);
      if (result)
      {
        *(unsigned char *)uint64_t v3 = 1;
        *(void *)(v3 + 8) = v7;
        return result;
      }
      if (v4 == ++v7) {
        goto LABEL_6;
      }
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v7, v9);
    double result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_6:
    *(unsigned char *)uint64_t v3 = 0;
  }
  return result;
}

BOOL re::VideoAssetResourceContext::getResourceDataAtIndex(uint64_t a1, unint64_t a2, void *a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 > a2)
  {
    uint64_t v7 = a1 + 24 * a2;
    *a3 = *(void *)(v7 + 24);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 1), v7 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v6 > a2;
}

void sub_2334C7E4C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::VideoAsset::processResourceData(re::VideoAsset *this)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v2 = (os_unfair_lock_s *)((char *)this + 256);
  os_unfair_lock_lock((os_unfair_lock_t)this + 64);
  uint64_t v3 = *((void *)this + 33);
  os_unfair_lock_unlock(v2);
  uint64_t v57 = 0;
  CFTypeRef cf = 0;
  int v59 = 0;
  if ((int)v3 < 1)
  {
    int v50 = 0;
LABEL_94:
    ((void (*)(uint8_t *, CFTypeRef *))off_26E6D5470[v50])(buf, &cf);
    return;
  }
  unint64_t v4 = 0;
  uint64_t v5 = v3;
  p_CFTypeRef cf = &cf;
  int v56 = (unsigned __int8 *)this + 928;
  uint64_t v7 = &v65;
  uint64_t v54 = (char *)this + 568;
  uint64_t v8 = (char *)this + 560;
  do
  {
    BOOL ResourceDataAtIndex = re::VideoAssetResourceContext::getResourceDataAtIndex((uint64_t)v2, v4, &v57);
    if (!ResourceDataAtIndex) {
      goto LABEL_80;
    }
    uint64_t v10 = *re::videoLogObjects((re *)ResourceDataAtIndex);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      *(_DWORD *)CMTime buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v57;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "VideoAsset::processResourceData VideoAssetResourceCommand: %d", buf, 8u);
    }
    switch((int)v57)
    {
      case 1:
        if (HIDWORD(v57) != 1) {
          goto LABEL_80;
        }
        if (v59
          || (buf[0] = 1, CFTypeRef v65 = 0, re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v7, cf), !buf[0]))
        {
          unint64_t v12 = *re::assetTypesLogObjects((re *)v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            __int16 v62 = 0;
            int v13 = (uint8_t *)&v62;
            BOOL v14 = v12;
            uint64_t v15 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCommandAdd]";
LABEL_31:
            _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v15, v13, 2u);
          }
          goto LABEL_80;
        }
        re::VideoAsset::containsFigDataChannelResource((uint64_t)&v62, (uint64_t)this, v7);
        CFTypeRef v23 = v65;
        if ((_BYTE)v62) {
          goto LABEL_36;
        }
        *(void *)CFTypeRef v60 = 0;
        re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v60, v65);
        unint64_t v25 = *((void *)this + 69);
        if (v25 < 5)
        {
          *(void *)&v54[8 * v25] = *(void *)v60;
          *((void *)this + 69) = v25 + 1;
          ++*((_DWORD *)this + 140);
LABEL_36:
          if (v23)
          {
            CFTypeRef v26 = v23;
LABEL_79:
            CFRelease(v26);
          }
          goto LABEL_80;
        }
        re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
        _os_crash();
        __break(1u);
        return;
      case 2:
        if (HIDWORD(v57) != 1) {
          goto LABEL_80;
        }
        if (v59
          || (buf[0] = 1, CFTypeRef v65 = 0, re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v7, cf), !buf[0]))
        {
          uint64_t v17 = *re::assetTypesLogObjects((re *)v11);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            goto LABEL_80;
          }
          __int16 v62 = 0;
          int v13 = (uint8_t *)&v62;
          BOOL v14 = v17;
          uint64_t v15 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCommandRemove]";
          goto LABEL_31;
        }
        re::VideoAsset::containsFigDataChannelResource((uint64_t)&v62, (uint64_t)this, v7);
        if ((_BYTE)v62)
        {
          unint64_t v36 = *((void *)this + 69);
          if (v36 <= v63)
          {
            re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v63, v36);
            _os_crash();
            __break(1u);
          }
          uint64_t v37 = v36 - 1;
          if (v36 - 1 <= v63)
          {
            int v41 = *(const void **)&v8[8 * v36];
            if (v41)
            {
              CFRelease(v41);
              uint64_t v37 = *((void *)this + 69) - 1;
            }
          }
          else
          {
            *(void *)&v54[8 * v63] = *(void *)&v8[8 * v36];
          }
          *(void *)&v8[8 * v36] = 0;
          *((void *)this + 69) = v37;
          ++*((_DWORD *)this + 140);
        }
LABEL_78:
        CFTypeRef v26 = v65;
        if (!v65) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 3:
        if (HIDWORD(v57) != 1) {
          goto LABEL_80;
        }
        if (v59
          || (LOBYTE(v62) = 1,
              unint64_t v63 = 0,
              re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)&v63, cf),
              !(_BYTE)v62))
        {
          uint64_t v16 = *re::assetTypesLogObjects((re *)v11);
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            goto LABEL_80;
          }
          *(_WORD *)CMTime buf = 0;
          int v13 = buf;
          BOOL v14 = v16;
          uint64_t v15 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCommandReady]";
          goto LABEL_31;
        }
        os_unfair_lock_lock(v2);
        uint64_t v27 = *((void *)this + 33);
        os_unfair_lock_unlock(v2);
        *(void *)CMTime buf = 0;
        CFTypeRef v65 = 0;
        unsigned int v66 = 0;
        if ((int)v27 < 1)
        {
          uint64_t v39 = 0;
LABEL_72:
          ((void (*)(uint8_t *, const void **))off_26E6D5470[v39])(v60, v7);
          goto LABEL_73;
        }
        unint64_t v28 = 0;
        char v53 = 0;
        char v51 = p_cf;
        CFTypeRef cf2 = (CFTypeRef)v63;
        CFNumberRef v55 = v7;
        break;
      case 6:
        if (HIDWORD(v57) != 1) {
          goto LABEL_80;
        }
        if (!v59)
        {
          buf[0] = 1;
          CFTypeRef v65 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v7, cf);
          if (buf[0]) {
            goto LABEL_78;
          }
        }
        uint64_t v18 = *re::assetTypesLogObjects((re *)v11);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_80;
        }
        __int16 v62 = 0;
        int v13 = (uint8_t *)&v62;
        BOOL v14 = v18;
        uint64_t v15 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCo"
              "mmandSetAsCurrent]";
        goto LABEL_31;
      case 7:
        if (HIDWORD(v57) != 3) {
          goto LABEL_80;
        }
        if (v59 == 1)
        {
          char v19 = (char)cf;
          if (*v56 != cf)
          {
            *((unsigned char *)this + 251) = 1;
            *((unsigned char *)this + 545) = 0;
          }
          __int16 v20 = *(_WORD *)((char *)&cf + 1);
          *((unsigned char *)this + 928) = v19;
          *(_WORD *)((char *)this + 929) = v20;
          CFIndex v21 = (unsigned __int8 **)*((void *)this + 25);
          if (v21) {
            re::ecs2::VideoPlayerComponentHelper::impl::setVideoAssetContentInfo(*v21, v56);
          }
          goto LABEL_80;
        }
        int v22 = *re::assetTypesLogObjects((re *)v11);
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          goto LABEL_80;
        }
        *(_WORD *)CMTime buf = 0;
        int v13 = buf;
        BOOL v14 = v22;
        uint64_t v15 = "Invalid ResourceData for type[VideoAssetResourceTypeCurrentContentInfo] and for command[VideoAssetResourceCommandChanged]";
        goto LABEL_31;
      default:
        goto LABEL_80;
    }
    do
    {
      int v29 = (re *)re::VideoAssetResourceContext::getResourceDataAtIndex((uint64_t)v2, v28, buf);
      if (!v29) {
        goto LABEL_53;
      }
      if (*(_DWORD *)&buf[4] != 1 || *(_DWORD *)buf != 2) {
        goto LABEL_53;
      }
      char v31 = v8;
      if (v66)
      {
        int v32 = 0;
        v60[0] = 0;
        uint64_t v33 = v61;
LABEL_49:
        char v34 = 1;
        if (!v32) {
          goto LABEL_52;
        }
        goto LABEL_50;
      }
      v60[0] = 1;
      uint64_t v61 = 0;
      re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v61, v65);
      int v32 = v60[0];
      uint64_t v33 = v61;
      if (!v60[0]) {
        goto LABEL_49;
      }
      int v29 = (re *)CFEqual(v61, cf2);
      if (!v29) {
        goto LABEL_49;
      }
      char v34 = 0;
      char v53 = 1;
LABEL_50:
      if (v33) {
        CFRelease(v33);
      }
LABEL_52:
      uint64_t v7 = v55;
      uint64_t v8 = v31;
      if ((v34 & 1) == 0) {
        break;
      }
LABEL_53:
      ++v28;
    }
    while (v27 != v28);
    if (v53)
    {
      CFTypeRef v38 = *re::videoLogObjects(v29);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CFTypeRef v60 = 0;
        _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "There is a Remove command in the queue, abort processing Ready command", v60, 2u);
      }
      uint64_t v39 = v66;
      BOOL v40 = v66 == -1;
    }
    else
    {
      uint64_t v39 = v66;
      BOOL v40 = v66 == -1;
    }
    p_CFTypeRef cf = v51;
    if (!v40) {
      goto LABEL_72;
    }
LABEL_73:
    CFTypeRef v26 = (CFTypeRef)v63;
    if (v63) {
      goto LABEL_79;
    }
LABEL_80:
    ++v4;
  }
  while (v4 != v5);
  char v42 = (char *)this + 280;
  unint64_t v43 = v5 + 1;
  do
  {
    unint64_t v44 = (v43 - 2);
    if (re::VideoAssetResourceContext::getResourceDataAtIndex((uint64_t)v2, v44, &v57))
    {
      os_unfair_lock_lock(v2);
      unint64_t v45 = *((void *)this + 33);
      if (v45 > v44)
      {
        if (v45 - 1 > v44)
        {
          CFNumberRef v46 = &v42[24 * v45];
          unsigned int v47 = &v42[24 * v44];
          *(void *)unsigned int v47 = *((void *)v46 - 3);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v47 + 8), (uint64_t)(v46 - 16));
          unint64_t v45 = *((void *)this + 33);
        }
        CFArrayRef v48 = &v42[24 * v45];
        uint64_t v49 = *((unsigned int *)v48 - 2);
        if (v49 != -1)
        {
          ((void (*)(uint8_t *, char *))off_26E6D5470[v49])(buf, v48 - 16);
          unint64_t v45 = *((void *)this + 33);
        }
        *((_DWORD *)v48 - 2) = -1;
        *((void *)this + 33) = v45 - 1;
        ++*((_DWORD *)this + 68);
      }
      os_unfair_lock_unlock(v2);
    }
    --v43;
  }
  while (v43 > 1);
  int v50 = v59;
  if (v59 != -1) {
    goto LABEL_94;
  }
}

void sub_2334C8614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30)
{
  uint64_t v33 = *(const void **)(v31 - 160);
  if (v33) {
    CFRelease(v33);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (a30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26E6D5470[a30])(v31 - 128, a16);
  }
  _Unwind_Resume(exception_object);
}

void re::VideoAsset::setReceiverEndpoint(re::VideoAsset *a1, void *a2)
{
  id v5 = a2;
  uint64_t v4 = *((void *)a1 + 23);
  if (v4)
  {
    objc_storeStrong((id *)(v4 + 40), a2);
    if (!*(unsigned char *)(*((void *)a1 + 23) + 48)) {
      re::VideoAsset::updateVideoTarget(a1);
    }
  }
}

void sub_2334C878C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id re::VideoAsset::getReceiverEndpoint(re::VideoAsset *this)
{
  uint64_t v1 = *((void *)this + 23);
  if (v1) {
    id v2 = *(id *)(v1 + 40);
  }
  else {
    id v2 = 0;
  }
  return v2;
}

unsigned __int8 **re::VideoAsset::createOrGetVideoPlayerComponentHelper(re::VideoAsset *this)
{
  double result = (unsigned __int8 **)*((void *)this + 25);
  if (!result)
  {
    uint64_t v3 = *re::videoLogObjects(0);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "VideoAsset createOrGetVideoPlayerComponentHelper", v7, 2u);
    }
    id v5 = re::globalAllocators((re *)v4);
    unint64_t v6 = (re::ecs2::VideoPlayerComponentHelper *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 8, 8);
    double result = (unsigned __int8 **)re::ecs2::VideoPlayerComponentHelper::VideoPlayerComponentHelper(v6);
    *((void *)this + 25) = result;
    if (*((unsigned char *)this + 928))
    {
      re::ecs2::VideoPlayerComponentHelper::impl::setVideoAssetContentInfo(*result, (unsigned __int8 *)this + 928);
      return (unsigned __int8 **)*((void *)this + 25);
    }
  }
  return result;
}

uint64_t re::VideoAssetLoader::registerAsset(re::VideoAssetLoader *this, unsigned __int8 *a2, const re::ExistingAssetInformation *a3)
{
  unint64_t v6 = *re::videoLogObjects(this);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "VideoAsset->registerAsset :: Registering Asset", v9, 2u);
  }
  uint64_t v7 = re::AssetLoader::registerAsset(this, a2, a3);
  if (!v7) {
    re::VideoAsset::updateAutoPlay((uint64_t)a2, a2[176], 1);
  }
  return v7;
}

void *re::VideoAssetLoader::unregisterAsset(re::VideoAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  BOOL v4 = *re::videoLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "VideoAsset :: UnRegistering Asset", v12, 2u);
  }
  uint64_t v5 = a2[23];
  if (v5)
  {
    unint64_t v6 = *(const void **)(v5 + 32);
    if (v6)
    {
      if (!*(void *)v5 || (objc_msgSend(*(id *)v5, "removeEndpoint:"), (unint64_t v6 = *(const void **)(v5 + 32)) != 0)) {
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v6);
      }
      *(void *)(v5 + 32) = 0;
    }
    re::VideoAsset::updateAutoPlay((uint64_t)a2, *((unsigned __int8 *)a2 + 176), 0);
  }
  uint64_t v7 = a2[24];
  if (v7)
  {
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 1984));
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 2128));
    *(_DWORD *)(v7 + 22re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = -1;
    *(unsigned char *)(v7 + 2276) = 0;
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 2280));
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 2424));
    *(_DWORD *)(v7 + 2568) = -1;
    *(unsigned char *)(v7 + 25re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(_OWORD *)(v7 + 1968) = 0u;
    uint64_t v8 = v7 + 24;
    do
    {
      *(void *)uint64_t v8 = 0;
      ++*(_DWORD *)(v8 + 8);
      v8 += 72;
    }
    while (v8 != v7 + 168);
  }
  unint64_t v9 = (void *)a2[21];
  if (v9)
  {
    re::VideoColorManager::clear((re::VideoColorManager *)(v9 + 266));
    re::VideoPixelBufferTextures::invalidate((re::VideoPixelBufferTextures *)(v9 + 28));
    uint64_t v10 = (const void *)v9[27];
    if (v10)
    {
      CFRelease(v10);
      v9[27] = 0;
    }
    re::VideoPresentationQueue::clear((re::VideoPresentationQueue *)(v9 + 32));
  }
  return re::VideoAsset::cleanupVideoPlayerHelper(a2);
}

re *re::VideoAssetLoader::unloadAsset(re *this, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[23];
    if (v3)
    {
      id v4 = *(id *)v3;
      *(void *)uint64_t v3 = 0;

      uint64_t v6 = re::globalAllocators(v5)[2];
      uint64_t v7 = *(const void **)(v3 + 32);
      if (v7) {
        CFRelease(v7);
      }
      *(void *)(v3 + 32) = 0;

      this = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v3);
      a2[23] = 0;
    }
    uint64_t v8 = a2[24];
    if (v8)
    {
      unint64_t v9 = *(void **)(v8 + 16);
      *(void *)(v8 + 16) = 0;

      if (*(void *)v8) {
        re::destroyVideoReceiver((const void **)v8);
      }
      uint64_t v11 = 0;
      uint64_t v12 = re::globalAllocators(v10)[2];
      do
      {
        uint64_t v13 = v8 + v11;
        if (*(void *)(v8 + v11 + 2552)) {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v8 + v11 + 2552));
        }
        *(void *)(v8 + v11 + 2552) = 0;
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2504));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2488));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2472));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2456));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2440));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2424));
        v11 -= 144;
      }
      while (v11 != -288);
      for (uint64_t i = 0; i != -288; i -= 144)
      {
        uint64_t v15 = v8 + i;
        if (*(void *)(v8 + i + 2256)) {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v8 + i + 2256));
        }
        *(void *)(v8 + i + 2256) = 0;
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2208));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2192));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2176));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2160));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2144));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2128));
      }
      for (uint64_t j = 1072; j != -720; j -= 896)
        re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)(v8 + j));
      for (uint64_t k = 0; k != -144; k -= 72)
      {
        uint64_t v18 = v8 + k;
        *(void *)(v18 + 96) = 0;
        *(_DWORD *)(v18 + 104) = *(_DWORD *)(v8 + k + 104) + 1;
      }

      if (*(void *)v8) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)v8);
      }
      *(void *)uint64_t v8 = 0;
      this = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v8);
      a2[24] = 0;
    }
    uint64_t v19 = re::globalAllocators(this)[2];
    (*(void (**)(void *))*a2)(a2);
    __int16 v20 = *(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 40);
    return (re *)v20(v19, a2);
  }
  return this;
}

uint64_t re::VideoAssetLoader::isSupportedSourceExtension(re::VideoAssetLoader *this, const char *a2)
{
  return 0;
}

void re::VideoAssetLoader::makeSharedResourcePayload(re *a1@<X0>, uint64_t a2@<X1>, REVideoPayload **a3@<X8>)
{
  if (*(void *)(a2 + 184))
  {
    re::VideoPayload::makeWithProperties(*(unsigned __int8 *)(a2 + 24), *(unsigned int *)(a2 + 224), *(unsigned int *)(a2 + 240), *(unsigned __int8 *)(a2 + 931), *(unsigned __int8 *)(a2 + 248), &v7, *(float *)(a2 + 28), *(double *)(a2 + 216), *(double *)(a2 + 232));
    id v4 = v7;
    uint64_t v7 = 0;
    *a3 = v4;
  }
  else
  {
    uint64_t v5 = *re::assetTypesLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "VideoAssetLoader::makeSharedResourcePayload was unexpectedly called on an asset without playback data", v6, 2u);
    }
    *a3 = 0;
  }
}

uint64_t re::VideoAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  re::VideoPayload::dynamicCast(a2, &v31);
  if (!a3)
  {
    uint64_t v27 = *re::videoLogObjects(v5);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
LABEL_10:
      uint64_t v26 = 0;
      goto LABEL_11;
    }
    *(_WORD *)CMTime buf = 0;
    unint64_t v28 = "Invalid video asset to initialize with payload";
LABEL_16:
    _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, v28, buf, 2u);
    goto LABEL_10;
  }
  id v6 = v31;
  unsigned int v7 = [v6 diffuseSpillMapWidth];
  id v8 = v31;
  *(void *)(a3 + 216) = __PAIR64__([v8 diffuseSpillMapHeight], v7);

  id v9 = v31;
  unsigned int v10 = [v9 specularSpillMapWidth];
  id v11 = v31;
  *(void *)(a3 + 232) = __PAIR64__([v11 specularSpillMapHeight], v10);

  id v12 = v31;
  re::VideoAsset::setDiffuseSpillMapBlurSigma((re::VideoAsset *)a3, [v12 diffuseSpillBlurSigma]);

  id v13 = v31;
  re::VideoAsset::setSpecularSpillMapBlurSigma((re::VideoAsset *)a3, [v13 specularSpillBlurSigma]);

  id v14 = v31;
  *(unsigned char *)(a3 + 931) = [v14 desiredViewingMode];

  id v15 = v31;
  *(unsigned char *)(a3 + 248) = [v15 preventPlaybackUntilReady];

  uint64_t v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 24))(a1, a3, 0, 0);
  if ((v16 & 1) == 0)
  {
    uint64_t v27 = *re::assetTypesLogObjects(v16);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)CMTime buf = 0;
    unint64_t v28 = "VideoAsset::createRuntimeData failed unexpectedly";
    goto LABEL_16;
  }
  id v17 = v31;
  *(unsigned char *)(a3 + 24) = [v17 audioInputMode];

  id v18 = v31;
  [v18 reverbSendLevel];
  *(_DWORD *)(a3 + 28) = v19;

  CFIndex v21 = *re::assetTypesLogObjects(v20);
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
  if (v22)
  {
    int v23 = *(unsigned __int8 *)(a3 + 24);
    double v24 = *(float *)(a3 + 28);
    *(_DWORD *)CMTime buf = 67109376;
    int v33 = v23;
    __int16 v34 = 2048;
    double v35 = v24;
    _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_INFO, "recovered audio inputMode=%d, reverbSendLevel=%0.2f from video payload", buf, 0x12u);
  }
  uint64_t v25 = *(void *)(a3 + 192);
  if (v25)
  {
    uint64_t v26 = 1;
    *(unsigned char *)(v25 + 2600) = 1;
  }
  else
  {
    uint64_t v30 = *re::assetTypesLogObjects((re *)v22);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CMTime buf = 0;
      _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "VideoAsset without rendering data unexpectedly received an updated VideoPlayload", buf, 2u);
    }
    uint64_t v26 = 1;
  }
LABEL_11:

  return v26;
}

void sub_2334C90F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void re::VideoAssetLoader::resourceDidUpdate(int a1, uint64_t a2, id *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::VideoPayload::dynamicCast(this, &v21);
  id v4 = v21;
  *(unsigned char *)(a2 + 24) = [v4 audioInputMode];

  id v5 = v21;
  [v5 reverbSendLevel];
  *(_DWORD *)(a2 + 28) = v6;

  id v8 = *re::assetTypesLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v9 = *(unsigned __int8 *)(a2 + 24);
    double v10 = *(float *)(a2 + 28);
    *(_DWORD *)CMTime buf = 67109376;
    int v23 = v9;
    __int16 v24 = 2048;
    double v25 = v10;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_INFO, "recovered audio inputMode=%d, reverbSendLevel=%0.2f from video payload update", buf, 0x12u);
  }
  id v11 = v21;
  unsigned int v12 = [v11 diffuseSpillMapWidth];
  id v13 = v21;
  *(void *)(a2 + 216) = __PAIR64__([v13 diffuseSpillMapHeight], v12);

  id v14 = v21;
  unsigned int v15 = [v14 specularSpillMapWidth];
  id v16 = v21;
  *(void *)(a2 + 232) = __PAIR64__([v16 specularSpillMapHeight], v15);

  id v17 = v21;
  re::VideoAsset::setDiffuseSpillMapBlurSigma((re::VideoAsset *)a2, [v17 diffuseSpillBlurSigma]);

  id v18 = v21;
  re::VideoAsset::setSpecularSpillMapBlurSigma((re::VideoAsset *)a2, [v18 specularSpillBlurSigma]);

  id v19 = v21;
  *(unsigned char *)(a2 + 931) = [v19 desiredViewingMode];

  id v20 = v21;
  *(unsigned char *)(a2 + 248) = [v20 preventPlaybackUntilReady];
}

void sub_2334C9370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void re::VideoAssetLoader::setPayloadOptions(uint64_t a1, re::VideoAsset *a2, id *a3)
{
  re::VideoRequestOptions::dynamicCast(a3, &v6);
  id v5 = [*a3 receiverEndpoint];
  re::VideoAsset::setReceiverEndpoint(a2, v5);
}

void sub_2334C9424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *re::allocInfo_VideoAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A248))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A2E0, "VideoAsset");
    __cxa_guard_release(&qword_26AF7A248);
  }
  return &unk_26AF7A2E0;
}

void re::initInfo_VideoAsset(re *this, re::IntrospectionBase *a2)
{
  uint64_t v52 = 0x10D01A2978AEAALL;
  char v53 = "VideoAsset";
  re::StringID::destroyString((re::StringID *)&v52);
  *((_OWORD *)this + 2) = v47;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A240, memory_order_acquire)) {
    goto LABEL_2;
  }
  id v4 = (re *)__cxa_guard_acquire(&qword_26AF7A240);
  if (!v4) {
    goto LABEL_2;
  }
  id v5 = re::introspectionAllocator(v4);
  unsigned int v7 = introspect_REAudioInputMode(1, v6);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v8 = 1;
  *(void *)(v8 + 8) = "audioInputMode";
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 0x1800000001;
  *(_DWORD *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_26AF7A280 = v8;
  int v9 = re::introspectionAllocator((re *)v8);
  id v11 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v10);
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
  *(_DWORD *)uint64_t v12 = 1;
  *(void *)(v12 + 8) = "videoFileAssets";
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = 0x8000000002;
  *(_DWORD *)(v12 + 40) = 0;
  *(void *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 64) = 0;
  qword_26AF7A288 = v12;
  id v14 = re::introspectionAllocator((re *)v12);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A230, memory_order_acquire) & 1) == 0)
  {
    CFTypeRef v38 = (re *)__cxa_guard_acquire(&qword_26AF7A230);
    if (v38)
    {
      uint64_t v39 = re::introspectionAllocator(v38);
      BOOL v40 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 24, 8);
      *(_DWORD *)BOOL v40 = 1;
      *((void *)v40 + 1) = 0;
      *((void *)v40 + 2) = "Manual";
      qword_26AF7A268 = (uint64_t)v40;
      int v41 = re::introspectionAllocator(v40);
      char v42 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 24, 8);
      *(_DWORD *)char v42 = 1;
      *((void *)v42 + 1) = 1;
      *((void *)v42 + 2) = "AutoPlayOnce";
      qword_26AF7A270 = (uint64_t)v42;
      unint64_t v43 = re::introspectionAllocator(v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 24, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = 2;
      *(void *)(v44 + 16) = "AutoPlayAndLoop";
      qword_26AF7A278 = v44;
      __cxa_guard_release(&qword_26AF7A230);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A238))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7A298, "VideoAssetPlaybackMode", 1, 1, 1, 1);
    qword_26AF7A298 = (uint64_t)&unk_26E715E00;
    qword_26AF7A2D8 = (uint64_t)&re::introspect_VideoAssetPlaybackMode(BOOL)::enumTable;
    dword_26AF7A2A8 = 9;
    __cxa_guard_release(&qword_26AF7A238);
  }
  if (_MergedGlobals_80)
  {
LABEL_33:
    uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
    *(_DWORD *)uint64_t v37 = 1;
    *(void *)(v37 + 8) = "playbackMode";
    *(void *)(v37 + 16) = &qword_26AF7A298;
    *(void *)(v37 + 24) = 0;
    *(void *)(v37 + 32) = 0xB000000003;
    *(_DWORD *)(v37 + 40) = 0;
    *(void *)(v37 + 48) = 0;
    *(void *)(v37 + 56) = 0;
    *(_DWORD *)(v37 + 64) = 0;
    qword_26AF7A290 = v37;
    __cxa_guard_release(&qword_26AF7A240);
LABEL_2:
    *((void *)this + 2) = 0x3B000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 3;
    *((void *)this + 8) = &qword_26AF7A280;
    *((void *)this + 9) = re::internal::defaultConstruct<re::VideoAsset>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 10) = re::internal::defaultDestruct<re::VideoAsset>;
    *((void *)this + 13) = re::internal::defaultConstructV2<re::VideoAsset>;
    *((void *)this + 14) = re::internal::defaultDestructV2<re::VideoAsset>;
    re::IntrospectionRegistry::add(this, v3);
    long long v46 = v47;
    return;
  }
  _MergedGlobals_80 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7A298, v13);
  v48[0] = 0xB0BB7F15DC0CA4A6;
  v48[1] = (uint64_t)"VideoAssetPlaybackMode";
  uint64_t v52 = 0x31CD534126;
  char v53 = "uint8_t";
  unsigned int v15 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v52);
  if (v15)
  {
    uint64_t v16 = *v15;
    re::StringID::destroyString((re::StringID *)&v52);
    id v17 = (unsigned int *)qword_26AF7A2D8;
    v51[1] = v16;
    re::TypeBuilder::beginEnumType((uint64_t)&v52, v48, 1, 1, (uint64_t)v51);
    unint64_t v19 = *v17;
    if (v19)
    {
      for (unint64_t i = 0; i < v19; ++i)
      {
        uint64_t v21 = *(void *)(*((void *)v17 + 1) + 8 * i);
        if (*(_DWORD *)v21 == 1)
        {
          BOOL v22 = *(char **)(v21 + 16);
          if (v22)
          {
            uint64_t v23 = *v22;
            if (*v22)
            {
              char v24 = v22[1];
              if (v24)
              {
                double v25 = (unsigned __int8 *)(v22 + 2);
                do
                {
                  uint64_t v23 = 31 * v23 + v24;
                  int v26 = *v25++;
                  char v24 = v26;
                }
                while (v26);
              }
            }
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v27 = *(void *)(v21 + 8);
          *(void *)&v50.var0 = 2 * v23;
          v50.var1 = v22;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v52, v27, &v50);
          re::StringID::destroyString((re::StringID *)&v50);
          unint64_t v19 = *v17;
        }
      }
      if (v19)
      {
        for (unint64_t j = 0; j < v19; ++j)
        {
          uint64_t v29 = *(void *)(*((void *)v17 + 1) + 8 * j);
          if (*(_DWORD *)v29 == 2)
          {
            uint64_t v30 = *(char **)(v29 + 16);
            if (v30)
            {
              uint64_t v31 = *v30;
              if (*v30)
              {
                char v32 = v30[1];
                if (v32)
                {
                  int v33 = (unsigned __int8 *)(v30 + 2);
                  do
                  {
                    uint64_t v31 = 31 * v31 + v32;
                    int v34 = *v33++;
                    char v32 = v34;
                  }
                  while (v34);
                }
              }
            }
            else
            {
              uint64_t v31 = 0;
            }
            uint64_t v35 = *(void *)(v29 + 8);
            *(void *)&v50.var0 = 2 * v31;
            v50.var1 = v30;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v52, v35, &v50);
            re::StringID::destroyString((re::StringID *)&v50);
            unint64_t v19 = *v17;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v52, v36);
    xmmword_26AF7A2B8 = v49;
    re::StringID::destroyString((re::StringID *)v48);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v52);
  re::internal::assertLog((re::internal *)5, v45, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VideoAssetPlaybackMode");
  _os_crash();
  __break(1u);
}

void sub_2334C9B44(_Unwind_Exception *a1)
{
}

re::VideoAsset *re::internal::defaultConstruct<re::VideoAsset>(int a1, int a2, re::VideoAsset *this)
{
  return re::VideoAsset::VideoAsset(this);
}

uint64_t re::internal::defaultDestruct<re::VideoAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::VideoAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_2334C9C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334C9CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v10 = v9;

  a9.super_class = (Class)REVideoPlayerItemsLooper;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2334C9E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334C9F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2334CA010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::VideoAssetLoader::~VideoAssetLoader(re::VideoAssetLoader *this)
{
}

void *re::DynamicInlineArray<re::VideoAssetResourceData,10ul>::clear(void *result)
{
  uint64_t v1 = result;
  if (*result)
  {
    uint64_t v2 = 24 * *result;
    uint64_t v3 = result + 3;
    do
    {
      uint64_t v4 = *((unsigned int *)v3 + 2);
      if (v4 != -1) {
        double result = (void *)((uint64_t (*)(char *, void *))off_26E6D5470[v4])(&v5, v3);
      }
      *((_DWORD *)v3 + 2) = -1;
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  void *v1 = 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

uint64_t re::FixedInlineArray<re::VideoChannelTextureHandles,2ul>::FixedInlineArray(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(void *)(a1 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)&v4, a2, a2 + 288, a1);
  return a1;
}

void sub_2334CA1B4(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = v1 + v3;
    if (*(void *)(v1 + v3 + 272)) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v1 + v3 + 272));
    }
    *(void *)(v1 + v3 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 224));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 208));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 192));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 176));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 160));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 144));
    v3 -= 144;
    if (v3 == -288) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7), (re::TextureHandle *)(a2 + v7));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 16), (re::TextureHandle *)(a2 + v7 + 16));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 32), (re::TextureHandle *)(a2 + v7 + 32));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 48), (re::TextureHandle *)(a2 + v7 + 48));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 64), (re::TextureHandle *)(a2 + v7 + 64));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 80), (re::TextureHandle *)(a2 + v7 + 80));
    long long v9 = *(_OWORD *)(a2 + v7 + 96);
    *(_OWORD *)(v8 + 108) = *(_OWORD *)(a2 + v7 + 108);
    *(_OWORD *)(v8 + 96) = v9;
    re::VideoObject<re::VideoColorTransformBase>::setRef(v8 + 128, (const void **)(v8 + 128), *(CFTypeRef *)(a2 + v7 + 128));
    __int16 v10 = *(_WORD *)(a2 + v7 + 136);
    *(unsigned char *)(v8 + 138) = *(unsigned char *)(a2 + v7 + 138);
    *(_WORD *)(v8 + 136) = v10;
    v7 += 144;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::FixedInlineArray<re::VideoPresentationGroup,2ul>::FixedInlineArray(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = MEMORY[0x263F01090];
  do
  {
    uint64_t v3 = result + v1;
    uint64_t v4 = *(void *)(v2 + 16);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v2;
    *(void *)(v3 + 16) = v4;
    *(void *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 32) = 0;
    *(void *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    *(void *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    *(void *)(v3 + 144) = 0;
    *(_DWORD *)(v3 + 152) = 0;
    *(void *)(v3 + 208) = 0;
    *(_DWORD *)(v3 + 216) = 0;
    *(void *)(v3 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(_DWORD *)(v3 + 280) = 0;
    *(void *)(v3 + 304) = 0;
    *(_DWORD *)(v3 + 312) = 0;
    *(void *)(v3 + 336) = 0;
    *(_DWORD *)(v3 + 344) = 0;
    *(void *)(v3 + 400) = 0;
    *(_DWORD *)(v3 + 408) = 0;
    *(void *)(v3 + 432) = 0;
    *(_DWORD *)(v3 + 440) = 0;
    *(void *)(v3 + 496) = 0;
    *(_DWORD *)(v3 + 504) = 0;
    *(void *)(v3 + 544) = 0;
    *(_DWORD *)(v3 + 552) = 0;
    *(void *)(v3 + 576) = 0;
    *(unsigned char *)(v3 + 584) = 0;
    *(_WORD *)(v3 + 6re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(unsigned char *)(v3 + 674) = 0;
    *(unsigned char *)(v3 + 480) = 0;
    *(_OWORD *)(v3 + 464) = 0uLL;
    *(_OWORD *)(v3 + 592) = 0uLL;
    *(_OWORD *)(v3 + 608) = 0uLL;
    *(_OWORD *)(v3 + 624) = 0uLL;
    *(_DWORD *)(v3 + 676) = -1;
    *(void *)(v3 + 720) = 0;
    *(_DWORD *)(v3 + 728) = 0;
    *(void *)(v3 + 744) = 0;
    *(_DWORD *)(v3 + 752) = 0;
    *(void *)(v3 + 768) = 0;
    *(_DWORD *)(v3 + 776) = 0;
    *(void *)(v3 + 800) = 0;
    *(_DWORD *)(v3 + 808) = 0;
    *(void *)(v3 + 848) = 0;
    *(_DWORD *)(v3 + 856) = 0;
    *(unsigned char *)(v3 + 8re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(_DWORD *)(v3 + 696) = 0;
    *(_OWORD *)(result + v1 + 680) = 0uLL;
    *(void *)(v3 + 880) = 1;
    v1 += 896;
    *(unsigned char *)(v3 + 888) = 0;
  }
  while (v1 != 1792);
  return result;
}

uint64_t re::VideoAssetResourceData::create(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1> const&>(a1 + 8, a2);
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  return result;
}

void sub_2334CA458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 16);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_26E6D5470[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void re::VideoAssetResourceContext::pushResourceData(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 <= 9)
  {
    uint64_t v5 = a1 + 24 * v4;
    uint64_t v6 = *a2;
    *(unsigned char *)(v5 + 32) = 0;
    uint64_t v7 = v5 + 32;
    *(void *)(v7 - 8) = v6;
    *(_DWORD *)(v7 + 8) = -1;
    uint64_t v8 = *((unsigned int *)a2 + 4);
    if (v8 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_26E6D5490[v8])(&v9, v7, a2 + 1);
      *(_DWORD *)(v7 + 8) = v8;
    }
    ++*(void *)(a1 + 8);
    ++*(_DWORD *)(a1 + 16);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_2334CA548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_26E6D5470[v15])(&a12, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  os_unfair_lock_unlock(v12);
  _Unwind_Resume(a1);
}

void re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(const void **a1, CFTypeRef cf)
{
  unint64_t v4 = *a1;
  if (v4) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v4);
  }
  *a1 = cf;
  if (cf)
  {
    CFRetain(cf);
  }
}

void re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(const void *a1)
{
  if (a1)
  {
    CFRelease(a1);
  }
  else
  {
    uint64_t v5 = v1;
    uint64_t v6 = v2;
    uint64_t v3 = *re::videoLogObjects((re *)a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Video m_object is NULL", v4, 2u);
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6D5470[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_26E6D5480 + v4))(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  if (*a2) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(*a2);
  }
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, const void **a2, CFTypeRef *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 8);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26E6D5470[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(void *)uint64_t v4 = 0;
    re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v4, *a3);
    *(_DWORD *)(v4 + 8) = 0;
    return;
  }
  CFTypeRef v7 = *a3;
  re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(a2, v7);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, uint64_t a2, __int16 *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __int16 v6 = *a3;
      *(unsigned char *)(a2 + 2) = *((unsigned char *)a3 + 2);
      *(_WORD *)a2 = v6;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E6D5470[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  __int16 v7 = *a3;
  *(unsigned char *)(v4 + 2) = *((unsigned char *)a3 + 2);
  *(_WORD *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = 0;
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3 = *a3;
  *(unsigned char *)(a2 + 2) = *((unsigned char *)a3 + 2);
  *(_WORD *)a2 = v3;
}

void anonymous namespace'::dataChannelResourceStateChangedNotificationHandler(int a1, uint64_t a2, int a3, CFTypeRef cf)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a2)
  {
    CFRetain(cf);
    if (cf)
    {
      if (!*(void *)(a2 + 192))
      {
LABEL_16:
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(cf);
        return;
      }
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      int v27 = 0;
      CFTypeRef cfa = 0;
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v9 = *(void *)(VTable + 16);
      __int16 v7 = (re *)(VTable + 16);
      uint64_t v8 = v9;
      if (v9) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 0;
      }
      id v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v10 + 24);
      if (v11)
      {
        __int16 v7 = (re *)v11(cf, &cfa);
        int v12 = (int)v7;
        if (!v7)
        {
          if (MEMORY[0x263F00DF0]) {
            BOOL v13 = MEMORY[0x237DBAA60](cfa, *MEMORY[0x263F01640], *(void *)(MEMORY[0x263F01640] + 8)) != 0;
          }
          else {
            BOOL v13 = 0;
          }
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = *(uint64_t (**)(CFTypeRef))(v16 + 8);
          if (v17)
          {
            id v18 = (re *)v17(cf);
            switch(v18)
            {
              case 3:
                uint64_t v21 = *re::assetTypesLogObjects(v18);
                int v20 = 0;
                if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                {
LABEL_34:
                  if (cfa) {
                    CFRelease(cfa);
                  }
                  if (v20)
                  {
                    CFTypeRef v30 = 0;
                    re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v30, cf);
                    unint64_t v28 = 0;
                    CFTypeRef v23 = v30;
                    re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v28, v30);
                    int v29 = 0;
                    re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)&v28, v13, 3);
                    uint64_t v25 = *(void *)buf;
                    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)&v26, (uint64_t)&buf[8]);
                    if (v34 != -1) {
                      ((void (*)(char *, unsigned char *))off_26E6D5470[v34])(&v32, &buf[8]);
                    }
                    uint64_t v24 = a2 + 256;
                    int v34 = -1;
                    if (v29 != -1) {
                      ((void (*)(char *, const void **))off_26E6D5470[v29])(&v32, &v28);
                    }
                    if (v23) {
                      re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v23);
                    }
                    re::VideoAssetResourceContext::pushResourceData(v24, &v25);
                  }
LABEL_14:
                  if (v27 != -1) {
                    ((void (*)(unsigned char *, uint64_t *))off_26E6D5470[v27])(buf, &v26);
                  }
                  goto LABEL_16;
                }
                *(_DWORD *)CMTime buf = 134217984;
                *(void *)&uint8_t buf[4] = cf;
                _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Received resource(%p) state as kFigDataChannelResourceState_NotNeeded", buf, 0xCu);
                break;
              case 2:
                BOOL v22 = *re::assetTypesLogObjects(v18);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CMTime buf = 134217984;
                  *(void *)&uint8_t buf[4] = cf;
                  _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Received resource(%p) state as kFigDataChannelResourceState_FailedToLoad", buf, 0xCu);
                }
                break;
              case 1:
                unint64_t v19 = *re::assetTypesLogObjects(v18);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)CMTime buf = 134217984;
                  *(void *)&uint8_t buf[4] = cf;
                  _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Received resource(%p) state as kFigDataChannelResourceState_Ready", buf, 0xCu);
                }
                int v20 = 1;
                goto LABEL_34;
            }
          }
          int v20 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        int v12 = -12782;
      }
      uint64_t v14 = *re::assetTypesLogObjects(v7);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CMTime buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Error occured while getting a description fig tags of a resource - %d", buf, 8u);
      }
      goto LABEL_14;
    }
  }
}

void sub_2334CACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, int a14, int a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, uint64_t))off_26E6D5470[a24])(&a21, v25);
  }
  a24 = -1;
  if (a15 != -1) {
    ((void (*)(char *, char *))off_26E6D5470[a15])(&a21, &a13);
  }
  if (v26) {
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v26);
  }
  if (a11 != -1) {
    ((void (*)(char *, uint64_t *))off_26E6D5470[a11])(&a22, &a10);
  }
  re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v24);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6D5470[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6D54A0[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      *a3 = 0;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E6D5470[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = 0;
  *(void *)uint64_t v4 = *a3;
  *a3 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, uint64_t a2, __int16 *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __int16 v6 = *a3;
      *(unsigned char *)(a2 + 2) = *((unsigned char *)a3 + 2);
      *(_WORD *)a2 = v6;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E6D5470[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  __int16 v7 = *a3;
  *(unsigned char *)(v4 + 2) = *((unsigned char *)a3 + 2);
  *(_WORD *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

double re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::DynamicInlineArray<re::VideoObject<re::VideoFigDataChannelResourceBase>,5ul>::clear(uint64_t a1)
{
  uint64_t v2 = (const void **)(a1 + 16);
  if (*(void *)a1)
  {
    uint64_t v3 = 8 * *(void *)a1;
    do
    {
      if (*v2) {
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(*v2);
      }
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t *re::ShaderGraphAsset::assetType(re::ShaderGraphAsset *this)
{
  {
    re::ShaderGraphAsset::assetType(void)::type = (uint64_t)"ShaderGraph";
    qword_26879E740 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ShaderGraphAsset::assetType(void)::type);
  }
  return &re::ShaderGraphAsset::assetType(void)::type;
}

uint64_t re::ShaderGraphAsset::ShaderGraphAsset(uint64_t a1, id *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26E6D54C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = (re::DynamicString *)(a1 + 8);
  re::DynamicString::setCapacity(v6, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  re::ObjCObject::operator=((id *)(a1 + 40), a2);
  re::DynamicString::format((re::DynamicString *)"shadergraph_%s", (re::DynamicString *)&v8, a3);
  re::DynamicString::operator=(v6, (re::DynamicString *)&v8);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return a1;
}

double re::ShaderGraphAsset::getCustomUniformsArgument@<D0>(re::ShaderGraphAsset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (re::sg::CachedCompilationMaterial *)*((void *)this + 6);
  if (v2)
  {
    re::sg::CachedCompilationMaterial::getCustomUniformsArgument(v2, a2);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = "";
    *(_WORD *)(a2 + 16) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
    *(_DWORD *)(a2 + 32) = 1;
    *(void *)(a2 + 48) = "";
    *(_WORD *)(a2 + 60) = 0;
    *(_WORD *)(a2 + 100) = 256;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 85) = 0;
    *(unsigned char *)(a2 + 104) = 0;
  }
  return result;
}

void re::ShaderGraphAssetLoader::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(a2);
  uint64_t v7 = re::ServiceLocator::serviceOrNull<re::ResourceSharingService>(a2);
  if (v4) {
    BOOL v8 = *(void *)(v4 + 184) != 0;
  }
  else {
    BOOL v8 = 0;
  }
  *(unsigned char *)(a1 + 8) = v8;
  re::Defaults::BOOLValue((re::Defaults *)"decodeShaderGraphViaXPC", v6, v12);
  if (v12[0]) {
    BOOL v9 = v12[1] == 0;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  if (v5)
  {
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    void v11[2] = ___ZN2re22ShaderGraphAssetLoader4initERNS_14ServiceLocatorE_block_invoke;
    v11[3] = &__block_descriptor_40_e120__Result_re::Data__re::WrappedError__B____WrappedError____Data_____24__0_Data___8___v__Q_SharedPtr_re::SharedObject____16l;
    v11[4] = a1;
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 168))(v5, v11);
    if ((v10 & 1) == 0) {
      *(void *)(a1 + 24) = v5;
    }
  }
  else if ((v10 & 1) == 0)
  {
    *(void *)(a1 + 16) = v7;
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ResourceSharingService>(uint64_t a1)
{
  {
    re::introspect<re::ResourceSharingService>(void)::info = re::introspect_ResourceSharingService(0);
  }
  uint64_t v2 = re::introspect<re::ResourceSharingService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void sub_2334CB38C(_Unwind_Exception *a1)
{
}

void ___ZN2re22ShaderGraphAssetLoader4initERNS_14ServiceLocatorE_block_invoke(id *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v27[2] = *(id *)MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = *a1;
  uint64_t v7 = (void (**)(id, unint64_t, re::sg::CachedCompilationMaterial **))v5;
  id v8 = v6;
  if ([v8 bytes]
    && (id v9 = v8, v10 = [v9 bytes], (v11 = objc_msgSend(v9, "length")) != 0))
  {
    MurmurHash3_x64_128(v10, v11, 0, (unint64_t *)v27);
    unint64_t v12 = ((uint64_t)v27[1] + 64 * (uint64_t)v27[0] + ((unint64_t)v27[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v27[0];
  }
  else
  {
    unint64_t v12 = 0;
  }
  BOOL v13 = (void *)MEMORY[0x263F6BC70];
  id v14 = v8;
  id v26 = 0;
  uint64_t v15 = [v13 materialWithArchiveData:v14 error:&v26];
  id v16 = v26;
  id v17 = v15;
  v27[0] = v17;

  if (v16) {
    goto LABEL_17;
  }
  re::make::shared::object<re::sg::CachedCompilationMaterial,re::sg::Material &>((re *)&v25, v27);
  if (v7)
  {
    uint64_t v24 = v25;
    if (v25) {
      id v18 = (char *)v25 + 8;
    }
    v7[2](v7, v12, &v24);
    if (v24)
    {

      uint64_t v24 = 0;
    }
  }
  objc_msgSend(MEMORY[0x263EFF990], "dataWithLength:", 1024, v24);
  unint64_t v19 = (__CFData *)objc_claimAutoreleasedReturnValue();
  int v20 = v25;
  BOOL v21 = re::sg::CachedCompilationMaterial::encode(v25, v19);
  BOOL v22 = v21;
  if (v21)
  {
    CFTypeRef v23 = v19;
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v23;
    id v16 = 0;
  }
  else
  {
    id v16 = [MEMORY[0x263F087E8] errorWithDomain:@"Encoding Failure" code:0 userInfo:0];
  }

  if (v20) {
  if (!v22)
  }
  {
LABEL_17:
    id v16 = v16;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v16;
    id v17 = v27[0];
  }
}

void sub_2334CB604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {

  }
  if (v12) {
  _Unwind_Resume(a1);
  }
}

uint64_t re::ShaderGraphAssetLoader::registerAsset(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8) && !*(void *)(a2 + 48)) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t re::ShaderGraphAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(id *)(a3 + 40);

  if (v5)
  {
    id v7 = *(id *)(a3 + 40);

    if (v7)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)v7);
      id v9 = *(id *)(a3 + 40);
      (*(void (**)(uint64_t, const UInt8 *, uint64_t))(*(void *)a2 + 16))(a2, BytePtr, [v9 length]);
    }
  }
  else
  {
    uint64_t v10 = *re::assetTypesLogObjects(v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Serializing ShaderGraphAsset but no data to serialize (Data.isValid() returned false)", v12, 2u);
    }
  }
  return 1;
}

void sub_2334CB794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::ShaderGraphAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v56[7] = *MEMORY[0x263EF8340];
  uint64_t v53 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  int v52 = 0;
  long long v46 = 0;
  long long v47 = 0;
  uint64_t v45 = a3;
  int v48 = 0;
  if (re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v45, 0xFFFFFFFFFFFFFFFFLL))
  {
    re::Data::makeDataWithBytes(v46, v47, buf);
    re::ObjCObject::operator=((id *)(a2 + 40), (id *)buf);
  }
  id v7 = *(id *)(a2 + 40);
  id v44 = v7;
  if (!v7) {
    goto LABEL_47;
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    id v8 = *re::assetsLogObjects((re *)v7);
    uint64_t v9 = 1;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a2 + 16)) {
        uint64_t v10 = *(void *)(a2 + 24);
      }
      else {
        uint64_t v10 = a2 + 17;
      }
      *(_DWORD *)CMTime buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_INFO, "Bypassing shader graph material creation for asset (%s) because there's no render device available", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (a4)
  {
    a4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)buf);
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    if (a4)
    {
      if (*(_DWORD *)(a4 + 32) == 2) {
        a4 = *(void *)a4;
      }
      else {
        a4 = 0;
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = (re *)(*(void *(**)(id *__return_ptr))(*(void *)v11 + 48))(&v42);
    if (!(_BYTE)v42)
    {
      id v18 = (id)*re::assetsLogObjects(v12);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(a2 + 16)) {
          uint64_t v34 = *(void *)(a2 + 24);
        }
        else {
          uint64_t v34 = a2 + 17;
        }
        uint64_t v35 = re::WrappedError::localizedDescription(&v43);
        *(_DWORD *)CMTime buf = 136315394;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v35;
        _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Error while decoding %s via XPC: %s", buf, 0x16u);
      }

      goto LABEL_29;
    }
    BOOL v13 = (re *)v43;
    id v14 = re::globalAllocators(v13);
    uint64_t v15 = (re::sg::CachedCompilationMaterial *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 256, 8);
    *(void *)CMTime buf = v44;
    re::sg::CachedCompilationMaterial::CachedCompilationMaterial((uint64_t)v15, v13, (id *)buf);

    uint64_t v16 = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = v15;
    if (v16)
    {

      uint64_t v15 = *(re::sg::CachedCompilationMaterial **)(a2 + 48);
    }
    re::sg::CachedCompilationMaterial::getCustomUniformsArgument(v15, (uint64_t)buf);
    if (*(void *)buf < 0xFFFFFFFFFFFFFFFELL || (buf[0] & 1) != 0)
    {
      if (*(void *)buf > 1uLL || (id v17 = *(unsigned __int8 **)&buf[8]) == 0)
      {
        re::FixedArray<re::MetalTypeInfo>::deinit(v56);
        re::StringID::destroyString((re::StringID *)v55);
        re::StringID::destroyString((re::StringID *)buf);
        goto LABEL_46;
      }
    }
    else
    {
      id v17 = *(unsigned __int8 **)&buf[8];
    }
    int v19 = *v17;
    re::FixedArray<re::MetalTypeInfo>::deinit(v56);
    re::StringID::destroyString((re::StringID *)v55);
    re::StringID::destroyString((re::StringID *)buf);
    if (!v19)
    {
      BOOL v21 = *re::assetsLogObjects(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(a2 + 16)) {
          uint64_t v36 = *(void *)(a2 + 24);
        }
        else {
          uint64_t v36 = a2 + 17;
        }
        *(_DWORD *)CMTime buf = 136315138;
        *(void *)&uint8_t buf[4] = v36;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Error creating CachedCompilationMaterial %s", buf, 0xCu);
      }
LABEL_29:

      goto LABEL_30;
    }
LABEL_46:

LABEL_47:
    uint64_t v9 = 1;
    goto LABEL_48;
  }
LABEL_30:
  if ([v44 bytes]
    && (v22 = [v44 bytes], (uint64_t v23 = objc_msgSend(v44, "length")) != 0))
  {
    MurmurHash3_x64_128(v22, v23, 0, (unint64_t *)buf);
    uint64_t v24 = (*(void *)&buf[8] + (*(void *)buf << 6) + (*(void *)buf >> 2) - 0x61C8864680B583E9) ^ *(void *)buf;
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(a1 + 24);
  if (v25)
  {
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 3221225472;
    v41[2] = ___ZNK2re22ShaderGraphAssetLoader17createRuntimeDataEPvPNS_19SeekableInputStreamEPKNS_9HashTableINS_13DynamicStringENSt3__17variantIJS5_NS_4DataEmEEENS_4HashIS5_EENS_7EqualToIS5_EELb1ELb0EEE_block_invoke;
    v41[3] = &__block_descriptor_40_e62_v16__0__SharedObject_____ArcRefCount__isa_t__v____Allocator__8l;
    void v41[4] = a2;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v25 + 176))(v25, a4, v24, v41);
  }
  if (*(void *)(a2 + 48)) {
    goto LABEL_47;
  }
  id v26 = v44;
  id v40 = 0;
  int v27 = [MEMORY[0x263F6BC70] materialWithArchiveData:v26 error:&v40];
  id v28 = v40;
  id v29 = v27;
  id v42 = v29;

  if (v29)
  {
    re::make::shared::object<re::sg::CachedCompilationMaterial,re::sg::Material &>((re *)buf, &v42);
    uint64_t v31 = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = *(void *)buf;
    if (v31) {

    }
    goto LABEL_47;
  }
  char v32 = (id)*re::assetsLogObjects(v30);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v37 = *(void *)(a2 + 24);
    }
    else {
      uint64_t v37 = a2 + 17;
    }
    CFTypeRef v38 = [v28 debugDescription];
    if (v38)
    {
      uint64_t v39 = [v28 debugDescription];
    }
    else
    {
      uint64_t v39 = @"<nil>";
    }
    *(_DWORD *)CMTime buf = 136315394;
    *(void *)&uint8_t buf[4] = v37;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v39;
    _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "Failed to create shader graph material for asset (%s). Error: %@", buf, 0x16u);
    if (v38) {
  }
    }
  uint64_t v9 = 0;
LABEL_48:

  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&v45);
  return v9;
}

void sub_2334CBDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, ...)
{
  va_start(va, a10);
  uint64_t v15 = v10;

  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)va);
  _Unwind_Resume(a1);
}

void ___ZNK2re22ShaderGraphAssetLoader17createRuntimeDataEPvPNS_19SeekableInputStreamEPKNS_9HashTableINS_13DynamicStringENSt3__17variantIJS5_NS_4DataEmEEENS_4HashIS5_EENS_7EqualToIS5_EELb1ELb0EEE_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    id v4 = (id)(a2 + 8);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 48);
  *(void *)(v5 + 48) = a2;
  if (v6)
  {
  }
}

re *re::ShaderGraphAssetLoader::unloadAsset(re *this, void (***a2)(void))
{
  if (a2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    id v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return this;
}

uint64_t re::ShaderGraphAssetLoader::isSupportedSourceExtension(re::ShaderGraphAssetLoader *this, const char *a2)
{
  return 0;
}

void re::ShaderGraphAssetLoader::findDependencies(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t re::ShaderGraphAssetLoader::introspectionType(re::ShaderGraphAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A380, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A380))
  {
    qword_26AF7A378 = re::internal::getOrCreateInfo((re::internal *)"ShaderGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_ShaderGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ShaderGraphAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7A370, 0);
    __cxa_guard_release(&qword_26AF7A380);
  }
  return qword_26AF7A378;
}

uint64_t re::ShaderGraphAssetLoader::allocateSampleAsset(re::ShaderGraphAssetLoader *this)
{
  uint64_t v1 = re::globalAllocators(this);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 56, 8);
  id v4 = 0;
  re::ShaderGraphAsset::ShaderGraphAsset(v2, &v4, (uint64_t)"SampleAsset");

  return v2;
}

void sub_2334CC0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *re::allocInfo_ShaderGraphAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_81, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_81))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A388, "ShaderGraphAsset");
    __cxa_guard_release(&_MergedGlobals_81);
  }
  return &unk_26AF7A388;
}

void re::initInfo_ShaderGraphAsset(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xBA2EB1656F73304ELL;
  v10[1] = "ShaderGraphAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A368, memory_order_acquire) & 1) == 0)
  {
    id v4 = (re *)__cxa_guard_acquire(&qword_26AF7A368);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      id v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "graphIdentifier";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A360 = v8;
      __cxa_guard_release(&qword_26AF7A368);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7A360;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ShaderGraphAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ShaderGraphAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ShaderGraphAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ShaderGraphAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void sub_2334CC334(_Unwind_Exception *a1)
{
}

void *re::internal::defaultConstruct<re::ShaderGraphAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E6D54C0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  id v4 = (void *)(a3 + 8);
  double result = re::DynamicString::setCapacity(v4, 0);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ShaderGraphAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::ShaderGraphAsset>(uint64_t a1)
{
  *(void *)a1 = &unk_26E6D54C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = (void *)(a1 + 8);
  double result = re::DynamicString::setCapacity(v2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ShaderGraphAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void re::ShaderGraphAssetLoader::~ShaderGraphAssetLoader(re::ShaderGraphAssetLoader *this)
{
}

void re::ShaderGraphAsset::~ShaderGraphAsset(re::ShaderGraphAsset *this)
{
  re::ShaderGraphAsset::~ShaderGraphAsset(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26E6D54C0;
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {

    *((void *)this + 6) = 0;
  }

  re::DynamicString::deinit((re::ShaderGraphAsset *)((char *)this + 8));
}

void re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader(re::SeekableInputStreamBufferedReader *this)
{
  if (*((_DWORD *)this + 6))
  {
    (*(void (**)(void))(**(void **)this + 24))();
    *((_DWORD *)this + 6) = 0;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 32);
}

void re::make::shared::object<re::sg::CachedCompilationMaterial,re::sg::Material &>(re *a1, id *a2)
{
  id v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 256, 8);
  id v6 = *a2;
  re::sg::CachedCompilationMaterial::CachedCompilationMaterial(v5, &v6);
  *(void *)a1 = v5;
}

void sub_2334CC8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334CCA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2334CCBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334CCD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334CCE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::VideoPayload::makeWithProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, REVideoPayload **a6@<X8>, float a7@<S0>, double a8@<D1>, double a9@<D2>)
{
  id v18 = [REVideoPayload alloc];
  *(float *)&double v19 = a7;
  int v20 = [(REVideoPayload *)v18 initWithAudioInputMode:a1 reverbSendLevel:a2 diffuseSpillMapDimensions:a3 specularSpillMapDimensions:a4 diffuseSpillBlurSigma:a5 specularSpillBlurSigma:v19 desiredViewingMode:a8 preventPlaybackUntilReady:a9];
  *a6 = v20;
}

void re::VideoPayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    uint64_t v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_2334CCFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::VideoRequestOptions::makeWithReceiver(uint64_t *a1@<X0>, REVideoRequestOptions **a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v14 = 0;
  uint64_t v3 = *a1;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t v5 = (re *)(VTable + 16);
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, id *))(v8 + 8);
  if (v9)
  {
    uint64_t v5 = (re *)v9(v3, &v14);
    int v10 = (int)v5;
    if (!v5)
    {
      long long v11 = [REVideoRequestOptions alloc];
      uint64_t v12 = [(REVideoRequestOptions *)v11 initWithReceiverEndpoint:v14];
      *a2 = v12;

      goto LABEL_11;
    }
  }
  else
  {
    int v10 = -12782;
  }
  BOOL v13 = *re::assetTypesLogObjects(v5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)CMTime buf = 67109120;
    int v16 = v10;
    _os_log_fault_impl(&dword_233120000, v13, OS_LOG_TYPE_FAULT, "Failed to copy video receiver endpoint (error: %d)", buf, 8u);
  }
  *a2 = 0;
LABEL_11:
}

void sub_2334CD140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void re::VideoRequestOptions::dynamicCast(id *a1@<X0>, void *a2@<X8>)
{
  id v6 = *a1;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v4 = v6;
  if (isKindOfClass)
  {
    id v5 = v6;
    id v4 = v6;
  }
  else
  {
    id v5 = 0;
  }
  *a2 = v5;
}

void sub_2334CD1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::AssetHelper::registerDefaultAssetTypes(re::AssetManager *a1, uint64_t a2, __int16 a3)
{
  uint64_t v201 = *MEMORY[0x263EF8340];
  id v6 = (id *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  uint64_t v7 = (const re::RenderManager *)re::ServiceLocator::serviceOrNull<re::ColorManager>(a2);
  uint64_t v8 = re::ServiceLocator::serviceOrNull<re::VideoService>(a2);
  re::ImportGraphicsContext::createFromAvailableManagers((re::ImportGraphicsContext *)v6, v7, (re::ImportGraphicsContext *)v190);
  int v10 = re::globalAllocators(v9);
  long long v11 = (re::MeshDeformationAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 24, 8);
  *((void *)v11 + 1) = v6;
  *((void *)v11 + 2) = 0;
  *(void *)long long v11 = &unk_26E6CE650;
  uint64_t v12 = re::MeshDeformationAsset::assetType(v11);
  char v196 = &unk_26E6D5BB8;
  int v199 = &v196;
  v192[3] = v192;
  long long v191 = v11;
  v192[0] = &unk_26E6D5BB8;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v12, (uint64_t *)&v191);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v191);
  BOOL v13 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v196);
  id v14 = re::globalAllocators(v13);
  uint64_t v15 = (re::RenderGraphEmitterAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 16, 8);
  *(void *)uint64_t v15 = &unk_26E6CD8B0;
  *((void *)v15 + 1) = a2;
  int v16 = re::RenderGraphEmitterAsset::assetType(v15);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v15;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v16, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v17 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  id v18 = re::globalAllocators(v17);
  double v19 = (re::RenderGraphAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 16, 8);
  *(void *)double v19 = &unk_26E6D9868;
  *((void *)v19 + 1) = a2;
  int v20 = re::RenderGraphAsset::assetType(v19);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v19;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v20, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  BOOL v21 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v22 = re::globalAllocators(v21);
  uint64_t v23 = (re::FontAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 16, 8);
  *(void *)uint64_t v23 = &unk_26E6CE0E8;
  *((void *)v23 + 1) = a2;
  uint64_t v24 = re::FontAsset::assetType(v23);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v23;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v24, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v25 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  id v26 = re::globalAllocators(v25);
  int v27 = (re::ImageBasedLightAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26[2] + 32))(v26[2], 16, 8);
  *(void *)int v27 = &unk_26E6D92B8;
  *((void *)v27 + 1) = a2;
  id v28 = re::ImageBasedLightAsset::assetType(v27);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v27;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v28, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  id v29 = (re::FontLayoutAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  CFTypeRef v30 = re::FontLayoutAsset::assetType(v29);
  uint64_t v31 = re::globalAllocators((re *)v30);
  char v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31[2] + 32))(v31[2], 8, 8);
  *char v32 = &unk_26E6CE240;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v32;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v30, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v33 = re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType();
  uint64_t v34 = re::globalAllocators((re *)v33);
  uint64_t v35 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34[2] + 32))(v34[2], 8, 8);
  void *v35 = &unk_26E6D5648;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v35;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v33, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v36 = (re::CGPerspectiveContextAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v37 = re::CGPerspectiveContextAsset::assetType(v36);
  CFTypeRef v38 = re::globalAllocators((re *)v37);
  uint64_t v39 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38[2] + 32))(v38[2], 8, 8);
  *uint64_t v39 = &unk_26E6D4100;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v39;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v37, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  id v40 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v41 = re::globalAllocators(v40);
  id v42 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v41[2] + 32))(v41[2], 24, 8);
  id v43 = v42;
  v42[1] = 0;
  v42[2] = 0;
  void *v42 = &unk_26E6D5328;
  *((_DWORD *)v42 + 2) = (a3 & 0x100) == 0;
  if (v8) {
    v42[2] = v8;
  }
  id v44 = re::VideoAsset::assetType((re::VideoAsset *)v42);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v43;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v44, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v45 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  long long v46 = re::globalAllocators(v45);
  long long v47 = (re::VideoFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46[2] + 32))(v46[2], 8, 8);
  *(void *)long long v47 = &unk_26E6D6EB0;
  int v48 = re::VideoFileAsset::assetType(v47);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v47;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v48, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v49 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v50 = re::globalAllocators(v49);
  uint64_t v51 = (re::VFXAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v50[2] + 32))(v50[2], 16, 8);
  *(void *)uint64_t v51 = &unk_26E6CDB10;
  *((void *)v51 + 1) = a2;
  int v52 = re::VFXAsset::assetType(v51);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v51;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v52, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v53 = (re::VertexCacheAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v54 = re::VertexCacheAsset::assetType(v53);
  CFNumberRef v55 = re::globalAllocators((re *)v54);
  int v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55[2] + 32))(v55[2], 16, 8);
  if (v6) {
    id v57 = v6[23];
  }
  else {
    id v57 = 0;
  }
  *int v56 = &unk_26E6D88F0;
  id v58 = v57;
  v56[1] = v58;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v56;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v54, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);

  CFTypeRef v60 = re::globalAllocators(v59);
  uint64_t v61 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60[2] + 32))(v60[2], 152, 8);
  v61[3] = 0u;
  v61[4] = 0u;
  v61[5] = 0u;
  v61[6] = 0u;
  v61[7] = 0u;
  v61[8] = 0u;
  *((void *)v61 + 18) = 0;
  *(void *)uint64_t v61 = &unk_26E6CEA68;
  *((void *)v61 + 1) = a2;
  *((void *)v61 + 3) = 0;
  *((void *)v61 + 4) = 0;
  *((void *)v61 + 5) = &unk_26E6CEA28;
  *(_OWORD *)((char *)v61 + 56) = 0u;
  *(_OWORD *)((char *)v61 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *((void *)v61 + 11) = 0x7FFFFFFF00000000;
  *(_OWORD *)((char *)v61 + 104) = 0u;
  *(_OWORD *)((char *)v61 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0u;
  *((_DWORD *)v61 + 34) = 0;
  *((_DWORD *)v61 + 35) = 0x7FFFFFFF;
  *((void *)v61 + 2) = 0;
  __int16 v62 = re::ShaderLibraryAsset::assetType((re::ShaderLibraryAsset *)v61);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v61;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v62, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  unint64_t v63 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v64 = re::globalAllocators(v63);
  CFTypeRef v65 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v64[2] + 32))(v64[2], 32, 8);
  v65[1] = 0;
  v65[2] = 0;
  void *v65 = &unk_26E6D54E0;
  v65[3] = 0;
  re::ShaderGraphAssetLoader::init((uint64_t)v65, a2);
  uint64_t v67 = re::ShaderGraphAsset::assetType(v66);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v65;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v67, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  id v68 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v69 = re::globalAllocators(v68);
  char v189 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69[2] + 32))(v69[2], 56, 8);
  v189[2] = 0;
  v189[3] = 0;
  v189[5] = 0;
  v189[6] = 0;
  v189[4] = 0;
  *char v189 = (uint64_t)&unk_26E6D7728;
  v189[1] = a2;
  v189[2] = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  unint64_t v70 = (re::MaterialDefinitionAsset *)re::ServiceLocator::serviceOrNull<re::RenderManager>(v189[1]);
  v189[3] = (uint64_t)v70;
  unint64_t v71 = re::MaterialDefinitionAsset::assetType(v70);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v189;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v71, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  long long v72 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  unint64_t v73 = re::globalAllocators(v72);
  uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73[2] + 32))(v73[2], 104, 8);
  *(_OWORD *)(v74 + 16) = 0u;
  *(_OWORD *)(v74 + 32) = 0u;
  *(_OWORD *)(v74 + 48) = 0u;
  *(_OWORD *)(v74 + 64) = 0u;
  *(_OWORD *)(v74 + 80) = 0u;
  *(void *)(v74 + 96) = 0;
  *(void *)uint64_t v74 = &unk_26E6D3770;
  *(void *)(v74 + 8) = a2;
  *(void *)(v74 + 16) = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  unint64_t v75 = (re::MaterialAsset *)re::ServiceLocator::serviceOrNull<re::RenderManager>(*(void *)(v74 + 8));
  *(void *)(v74 + 24) = v75;
  unint64_t v76 = re::MaterialAsset::assetType(v75);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = (void *)v74;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v76, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  unint64_t v77 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  float v78 = re::globalAllocators(v77);
  float v79 = (re::AssetProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v78[2] + 32))(v78[2], 80, 8);
  re::TextureAssetProvider::TextureAssetProvider((uint64_t)v79, (uint64_t)a1, a2);
  BOOL v80 = re::AssetManager::registerAssetProvider(a1, v79);
  uint64_t v81 = re::globalAllocators((re *)v80);
  uint64_t v186 = v79;
  float v82 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81[2] + 32))(v81[2], 40, 8);
  re::BuiltinTextureAssetProvider::BuiltinTextureAssetProvider(v82, (uint64_t)a1, a2);
  id v83 = (id)re::AssetManager::registerAssetProvider(a1, v82);
  if (v6)
  {
    id v83 = v6[23];
    int v187 = v83;
  }
  else
  {
    int v187 = 0;
  }
  CMTimeValue v188 = v82;
  int v84 = re::globalAllocators((re *)v83);
  uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v84[2] + 32))(v84[2], 136, 8);
  char v86 = 0;
  *(void *)uint64_t v85 = &unk_26E6D3C48;
  *(void *)(v85 + 8) = 0;
  *(void *)(v85 + 16) = 0;
  *(void *)(v85 + 24) = 0;
  *(void *)(v85 + 40) = 0;
  *(void *)(v85 + 48) = 0;
  *(_DWORD *)(v85 + 56) = 65793;
  *(void *)(v85 + 80) = 0;
  *(_WORD *)(v85 + 88) = 0;
  *(void *)(v85 + 128) = 0;
  *(void *)(v85 + 104) = 0;
  *(void *)(v85 + 112) = 0;
  *(void *)(v85 + 96) = 0;
  *(_DWORD *)(v85 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  if ((a3 & 1) != 0 && v6) {
    char v86 = [v6[23] supportsSharedTextureHandles];
  }
  uint64_t v87 = re::ServiceLocator::serviceOrNull<re::DrawableQueueService>(a2);
  uint64_t v88 = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a2);
  uint64_t v89 = re::ServiceLocator::serviceOrNull<re::EntitlementService>(a2);
  re::TextureAssetLoader::init((uint64_t *)v85, (uint64_t)a1, (uint64_t)v6, (uint64_t)v190, v87, v88, v89, v86, 1);
  uint64_t v91 = re::TextureAsset::assetType(v90);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = (void *)v85;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v91, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v92 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v93 = re::globalAllocators(v92);
  uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v93[2] + 32))(v93[2], 312, 8);
  *(void *)(v94 + 32) = 0;
  *(void *)(v94 + 8) = 0;
  *(void *)(v94 + 16) = 0;
  *(void *)uint64_t v94 = &unk_26E6CDC88;
  *(_OWORD *)(v94 + 48) = 0u;
  *(_OWORD *)(v94 + 64) = 0u;
  *(_OWORD *)(v94 + 80) = 0u;
  *(_OWORD *)(v94 + 96) = 0u;
  *(_OWORD *)(v94 + 112) = 0u;
  *(_OWORD *)(v94 + 128) = 0u;
  *(_OWORD *)(v94 + 144) = 0u;
  *(_OWORD *)(v94 + 160) = 0u;
  *(_OWORD *)(v94 + 176) = 0u;
  *(_OWORD *)(v94 + 192) = 0u;
  *(_OWORD *)(v94 + 208) = 0u;
  *(_OWORD *)(v94 + 224) = 0u;
  *(_DWORD *)(v94 + 240) = 16842752;
  *(unsigned char *)(v94 + 244) = 1;
  *(_WORD *)(v94 + 249) = 0;
  *(_DWORD *)(v94 + 245) = 0;
  *(_DWORD *)(v94 + 252) = 1036831949;
  *(_DWORD *)(v94 + 256) = 16843008;
  *(unsigned char *)(v94 + 260) = 0;
  *(_OWORD *)(v94 + 296) = 0u;
  *(_OWORD *)(v94 + 264) = 0u;
  *(_OWORD *)(v94 + 280) = 0u;
  *(_DWORD *)(v94 + 300) = 0x7FFFFFFF;
  uint64_t v95 = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(a2);
  re::MeshAssetLoader::init(v94, a2, v95, a3 & 1);
  id v97 = re::MeshAsset::assetType(v96);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = (void *)v94;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v97, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  id v98 = (re::CollisionShapeAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  id v99 = re::CollisionShapeAsset::assetType(v98);
  id v100 = re::globalAllocators((re *)v99);
  CMTime v101 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v100[2] + 32))(v100[2], 8, 8);
  void *v101 = &unk_26E6D78F8;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v101;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v99, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v102 = (re::PhysicsMaterialAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  CMTime v103 = re::PhysicsMaterialAsset::assetType(v102);
  unint64_t v104 = re::globalAllocators((re *)v103);
  int v105 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v104[2] + 32))(v104[2], 8, 8);
  void *v105 = &unk_26E6D7A50;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v105;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v103, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v106 = (re::IndexedTriangleMeshAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v107 = re::IndexedTriangleMeshAsset::assetType(v106);
  uint64_t v108 = re::globalAllocators((re *)v107);
  int v109 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v108[2] + 32))(v108[2], 8, 8);
  *int v109 = &unk_26E6D7BA8;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v109;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v107, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v110 = re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType();
  int v111 = re::globalAllocators((re *)v110);
  uint64_t v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v111[2] + 32))(v111[2], 8, 8);
  *uint64_t v112 = &unk_26E6D57A0;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v112;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v110, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v113 = (re::AnimationLibraryAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v114 = re::AnimationLibraryAsset::assetType(v113);
  int v115 = re::globalAllocators((re *)v114);
  uint64_t v116 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v115[2] + 32))(v115[2], 8, 8);
  void *v116 = &unk_26E6D99F0;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v116;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v114, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v117 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v118 = re::globalAllocators((re *)v117);
  int v119 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v118[2] + 32))(v118[2], 8, 8);
  *int v119 = &unk_26E6D58F8;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v119;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v117, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v120 = (re::IKRigAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v121 = re::IKRigAsset::assetType(v120);
  uint64_t v122 = re::globalAllocators((re *)v121);
  int v123 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122[2] + 32))(v122[2], 8, 8);
  void *v123 = &unk_26E6D8498;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v123;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v121, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v124 = (re::RigAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v125 = re::RigAsset::assetType(v124);
  long long v126 = re::globalAllocators((re *)v125);
  char v127 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v126[2] + 32))(v126[2], 8, 8);
  *char v127 = &unk_26E6D9D18;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v127;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v125, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v128 = (re::RigGraphAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v129 = re::RigGraphAsset::assetType(v128);
  uint64_t v130 = re::globalAllocators((re *)v129);
  int v131 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v130[2] + 32))(v130[2], 8, 8);
  *int v131 = &unk_26E6D72F8;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v131;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v129, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v132 = (re::BlendShapeWeightsDefinitionAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  char v133 = re::BlendShapeWeightsDefinitionAsset::assetType(v132);
  long long v134 = re::globalAllocators((re *)v133);
  long long v135 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v134[2] + 32))(v134[2], 8, 8);
  *long long v135 = &unk_26E6D39C0;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v135;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v133, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  long long v136 = (re::SkeletonAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  __int16 v137 = re::SkeletonAsset::assetType(v136);
  char v138 = re::globalAllocators((re *)v137);
  int v139 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v138[2] + 32))(v138[2], 8, 8);
  *int v139 = &unk_26E6D8798;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v139;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v137, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  long long v140 = (re::SkeletalPoseDefinitionAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v141 = re::SkeletalPoseDefinitionAsset::assetType(v140);
  uint64_t v142 = re::globalAllocators((re *)v141);
  int v143 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v142[2] + 32))(v142[2], 8, 8);
  *int v143 = &unk_26E6D8F40;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v143;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v141, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v144 = (re::TimelineAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v145 = re::TimelineAsset::assetType(v144);
  uint64_t v146 = re::globalAllocators((re *)v145);
  int v147 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v146[2] + 32))(v146[2], 8, 8);
  *int v147 = &unk_26E6D9568;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v147;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v145, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  unint64_t v148 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  int v149 = re::globalAllocators((re *)v148);
  uint64_t v150 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v149[2] + 32))(v149[2], 8, 8);
  *uint64_t v150 = &unk_26E6D5A50;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v150;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v148, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v151 = (re::StateMachineAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  char v152 = re::StateMachineAsset::assetType(v151);
  uint64_t v153 = re::globalAllocators((re *)v152);
  char v154 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v153[2] + 32))(v153[2], 8, 8);
  void *v154 = &unk_26E6D7DF8;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v154;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v152, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  CMTime v155 = (re::StateParameterBlackboardAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v156 = re::StateParameterBlackboardAsset::assetType(v155);
  int v157 = re::globalAllocators((re *)v156);
  int v158 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v157[2] + 32))(v157[2], 8, 8);
  void *v158 = &unk_26E6CE430;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v158;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v156, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  int v159 = (re::SceneAsset *)re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(a2);
  if (v159)
  {
    uint64_t v160 = re::SceneAsset::assetType(v159);
    int v161 = re::globalAllocators((re *)v160);
    unint64_t v162 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v161[2] + 32))(v161[2], 8, 8);
    *unint64_t v162 = &unk_26E6D7070;
    float64x2_t v193 = &unk_26E6D5C38;
    float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
    __int16 v195 = &v193;
    uint64_t v200 = &v197;
    char v196 = v162;
    int v197 = &unk_26E6D5C38;
    long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
    re::AssetManager::registerAssetType((uint64_t)a1, (char **)v160, (uint64_t *)&v196);
    std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
    int v159 = (re::SceneAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  }
  int v163 = re::globalAllocators(v159);
  uint64_t v164 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v163[2] + 32))(v163[2], 56, 8);
  re::AudioFileAssetProvider::AudioFileAssetProvider((re::AudioFileAssetProvider *)v164, a1);
  re::AssetManager::registerAssetProvider(a1, (re::AssetProvider *)v164);
  unint64_t v165 = (re *)re::ServiceLocator::serviceOrNull<re::AudioSceneService>(a2);
  int v166 = re::globalAllocators(v165);
  uint64_t v167 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v166[2] + 32))(v166[2], 16, 8);
  *(void *)uint64_t v167 = &unk_26E6D9410;
  *((void *)v167 + 1) = v165;
  unint64_t v168 = re::AudioFileAsset::assetType(v167);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v167;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v168, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v169 = (re::AudioFileGroupAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v170 = re::AudioFileGroupAsset::assetType(v169);
  int v171 = re::globalAllocators((re *)v170);
  uint64_t v172 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v171[2] + 32))(v171[2], 32, 8);
  *uint64_t v172 = &unk_26E6D9700;
  v172[1] = a1;
  v172[2] = v167;
  v172[3] = v165;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v172;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v170, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v173 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  uint64_t v174 = re::globalAllocators(v173);
  int v175 = (re::AudioGeneratorAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v174[2] + 32))(v174[2], 8, 8);
  *(void *)int v175 = &unk_26E6D45A0;
  unint64_t v176 = re::AudioGeneratorAsset::assetType(v175);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v175;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v176, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  int v177 = (re *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  unsigned int v178 = re::globalAllocators(v177);
  unint64_t v179 = (re::AcousticMeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v178[2] + 32))(v178[2], 16, 8);
  *(void *)unint64_t v179 = &unk_26E6D5FD8;
  *((void *)v179 + 1) = 0;
  int v180 = re::AcousticMeshAsset::assetType(v179);
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v179;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v180, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  uint64_t v181 = (re::ARReferenceObjectAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  long long v182 = re::ARReferenceObjectAsset::assetType(v181);
  char v183 = re::globalAllocators((re *)v182);
  uint64_t v184 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v183[2] + 32))(v183[2], 16, 8);
  *uint64_t v184 = &unk_26E6D4918;
  v184[1] = 0;
  float64x2_t v193 = &unk_26E6D5C38;
  float64x2_t v194 = re::internal::AssetTypeRegistryHelper::deleter;
  __int16 v195 = &v193;
  uint64_t v200 = &v197;
  char v196 = v184;
  int v197 = &unk_26E6D5C38;
  long long v198 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v182, (uint64_t *)&v196);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v196);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v193);
  re::ShaderLibraryAssetLoader::preloadAssets((re::ShaderLibraryAssetLoader *)v61);
  re::TextureAssetLoader::preloadAssets(v85, a2);
  re::MaterialDefinitionLoader::preloadAssets((re::MaterialDefinitionLoader *)v189);
  re::MaterialAssetLoader::preloadAssets((re::MaterialAssetLoader *)v74);
  re::MeshAssetLoader::preloadAssets((float32x4_t *)v94);
  re::Defaults::BOOLValue((re::Defaults *)"blockUntilAssetsPreloaded", v185, (char *)&v196);
  if ((_BYTE)v196 && BYTE1(v196)) {
    re::AssetManager::waitForLoadQueueToComplete((uint64_t)a1, 0);
  }
  if (v164) {

  }
  if (v188) {
  if (v186)
  }
}

void sub_2334CF880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v16 - 136));
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100]((uint64_t *)va);

  if (a6) {
  if (a4)
  }

  _Unwind_Resume(a1);
}

uint64_t re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(uint64_t a1)
{
  {
    re::introspect<re::DirectResourceAssetTracker>(void)::info = re::introspect_DirectResourceAssetTracker(0);
  }
  uint64_t v2 = re::introspect<re::DirectResourceAssetTracker>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void sub_2334CFAEC(_Unwind_Exception *a1)
{
}

uint64_t re::ServiceLocator::serviceOrNull<re::AudioSceneService>(uint64_t a1)
{
  {
    re::introspect<re::AudioSceneService>(void)::info = re::introspect_AudioSceneService(0);
  }
  uint64_t v2 = re::introspect<re::AudioSceneService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void sub_2334CFBC8(_Unwind_Exception *a1)
{
}

void *re::AssetHelper::registerDefaultAssetCompilers(re *a1, uint64_t a2, char a3)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  id v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(void *)uint64_t v6 = &unk_26E6DF2D0;
  *(void *)(v6 + 8) = 0;
  *(_WORD *)(v6 + 24) = 257;
  *(unsigned char *)(v6 + 26) = 1;
  *(unsigned char *)(v6 + 40) = 0;
  uint64_t v7 = re::globalAllocators((re *)v6);
  uint64_t v118 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 16, 8);
  *(void *)uint64_t v118 = &unk_26E6E0B00;
  *((void *)v118 + 1) = 0;
  uint64_t v8 = re::globalAllocators(v118);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 48, 8);
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)uint64_t v9 = &unk_26E6DF428;
  *(void *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 24) = 257;
  *(unsigned char *)(v9 + 26) = 1;
  int v10 = re::globalAllocators((re *)v9);
  long long v11 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 16, 8);
  v11[1] = 0;
  uint64_t v12 = v11 + 1;
  int v115 = v11;
  id *v11 = &unk_26E6E11A0;
  BOOL v13 = re::globalAllocators((re *)v11);
  id v14 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 16, 8);
  v14[1] = 0;
  uint64_t v15 = v14 + 1;
  *id v14 = &unk_26E6DF3B0;
  uint64_t v16 = re::globalAllocators((re *)v14);
  uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 16, 8);
  void *v17 = &unk_26E6DF508;
  v17[1] = 0;
  int v117 = v17;
  id v18 = re::globalAllocators((re *)v17);
  double v19 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 24, 8);
  v19[1] = 0;
  int v20 = v19 + 1;
  id *v19 = &unk_26E6E0D58;
  v19[2] = 0;
  BOOL v21 = (re::ImportGraphicsContext *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  uint64_t v114 = v14;
  if (v21)
  {
    uint64_t v22 = v21;
    re::ImportGraphicsContext::createFromRenderManager(v21, (re::ImportGraphicsContext *)&v132);
    if (a3) {
      char v23 = [*((id *)v22 + 23) supportsSharedTextureHandles];
    }
    else {
      char v23 = 0;
    }
    re::TextureCompiler::init(v6, (uint64_t)&v132, v23);
    *((void *)v118 + 1) = a2;
    re::TextureCompiler::init(v9, (uint64_t)&v132, v23);
    id v126 = *((id *)v22 + 23);
    re::ObjCObject::operator=(v12, &v126);

    id v125 = *((id *)v22 + 23);
    re::ObjCObject::operator=(v15, &v125);

    v117[1] = v22;
    id v124 = *((id *)v22 + 23);
    re::ObjCObject::operator=(v20, &v124);
    v19[2] = (id)a2;
  }
  else if (re::ServiceLocator::serviceOrNull<re::RenderManager>(a2))
  {
    re::mtl::makeDefaultDevice(&v123);
    if (a3)
    {
      uint64_t v24 = (re::Bundle *)[v123 supportsSharedTextureHandles];
      char v25 = (char)v24;
    }
    else
    {
      char v25 = 0;
    }
    re::Bundle::testData(v24, &v122);
    re::Bundle::findFile((re::Bundle *)&v122, "default.metallib", (re::DynamicString *)&v132);
    if (v133) {
      id v26 = (re::ns *)v134;
    }
    else {
      id v26 = (re::ns *)((char *)&v133 + 1);
    }
    re::mtl::Device::makeLibraryWithFile(&v123, v26, &v121);
    int v27 = (char *)re::ServiceLocator::serviceOrNull<re::ColorManager>(a2);
    if (v27) {
      char v28 = *v27;
    }
    else {
      char v28 = 0;
    }
    id v127 = v123;
    uint64_t v128 = v121;
    int v129 = 16843009;
    char v130 = v28;
    int v131 = 0;
    re::TextureCompiler::init(v6, (uint64_t)&v127, v25);
    *((void *)v118 + 1) = a2;
    re::TextureCompiler::init(v9, (uint64_t)&v127, v25);
    id v120 = v123;
    re::ObjCObject::operator=(v12, &v120);

    id v119 = v123;
    re::ObjCObject::operator=(v20, &v119);
    v19[2] = (id)a2;

    if (v132 && (v133 & 1) != 0) {
      (*(void (**)(void))(*(void *)v132 + 40))();
    }
  }
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = (id)v6;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v118;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = (id)v9;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v115;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v114;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v117;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v19;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  id v29 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  CFTypeRef v30 = re::globalAllocators(v29);
  uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30[2] + 32))(v30[2], 8, 8);
  void *v31 = &unk_26E6DED18;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v31;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  char v32 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  int v33 = re::globalAllocators(v32);
  uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33[2] + 32))(v33[2], 8, 8);
  *uint64_t v34 = &unk_26E6D5D88;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v34;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v35 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v36 = re::globalAllocators(v35);
  uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36[2] + 32))(v36[2], 8, 8);
  *uint64_t v37 = &unk_26E6DF360;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v37;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  CFTypeRef v38 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v39 = re::globalAllocators(v38);
  id v40 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39[2] + 32))(v39[2], 8, 8);
  *id v40 = &unk_26E6D5DF0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v40;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  int v41 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v42 = re::globalAllocators(v41);
  id v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42[2] + 32))(v42[2], 8, 8);
  *id v43 = &unk_26E6D5E58;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v43;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  id v44 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v45 = re::globalAllocators(v44);
  long long v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45[2] + 32))(v45[2], 8, 8);
  *long long v46 = &unk_26E6E1218;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v46;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  long long v47 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  int v48 = re::globalAllocators(v47);
  uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48[2] + 32))(v48[2], 8, 8);
  void *v49 = &unk_26E6E1280;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v49;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v50 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v51 = re::globalAllocators(v50);
  int v52 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v51[2] + 32))(v51[2], 8, 8);
  void *v52 = &unk_26E6DF268;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v52;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v53 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v54 = re::globalAllocators(v53);
  CFNumberRef v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[2] + 32))(v54[2], 8, 8);
  *CFNumberRef v55 = &unk_26E6E1040;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v55;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  int v56 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v57 = re::globalAllocators(v56);
  id v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57[2] + 32))(v57[2], 8, 8);
  void *v58 = &unk_26E6DF6A0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v58;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  int v59 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  CFTypeRef v60 = re::globalAllocators(v59);
  uint64_t v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60[2] + 32))(v60[2], 8, 8);
  *uint64_t v61 = &unk_26E6DF708;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v61;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  __int16 v62 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  unint64_t v63 = re::globalAllocators(v62);
  int v64 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63[2] + 32))(v63[2], 8, 8);
  *int v64 = &unk_26E6DF4A0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v64;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  CFTypeRef v65 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  unsigned int v66 = re::globalAllocators(v65);
  uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66[2] + 32))(v66[2], 8, 8);
  void *v67 = &unk_26E6E10A8;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v67;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  id v68 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v69 = re::globalAllocators(v68);
  unint64_t v70 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69[2] + 32))(v69[2], 8, 8);
  void *v70 = &unk_26E6C2358;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v70;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  unint64_t v71 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  long long v72 = re::globalAllocators(v71);
  unint64_t v73 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72[2] + 32))(v72[2], 8, 8);
  *unint64_t v73 = &unk_26E6DF770;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v73;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v74 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  unint64_t v75 = re::globalAllocators(v74);
  unint64_t v76 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v75[2] + 32))(v75[2], 8, 8);
  *unint64_t v76 = &unk_26E6DF118;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v76;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  unint64_t v77 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  float v78 = re::globalAllocators(v77);
  float v79 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v78[2] + 32))(v78[2], 8, 8);
  *float v79 = &unk_26E6E0BF8;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v79;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  BOOL v80 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v81 = re::globalAllocators(v80);
  float v82 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81[2] + 32))(v81[2], 8, 8);
  *float v82 = &unk_26E6E0A98;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v82;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  id v83 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  int v84 = re::globalAllocators(v83);
  uint64_t v85 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v84[2] + 32))(v84[2], 16, 8);
  v85[1] = &unk_26E6E1218;
  *uint64_t v85 = &unk_26E6E0DC0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v85;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  char v86 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v87 = re::globalAllocators(v86);
  uint64_t v88 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v87[2] + 32))(v87[2], 16, 8);
  v88[1] = &unk_26E6E1280;
  *uint64_t v88 = &unk_26E6E0E40;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v88;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v89 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v90 = re::globalAllocators(v89);
  uint64_t v91 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v90[2] + 32))(v90[2], 16, 8);
  v91[1] = &unk_26E6DF4A0;
  *uint64_t v91 = &unk_26E6E0F40;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v91;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v92 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v93 = re::globalAllocators(v92);
  uint64_t v94 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v93[2] + 32))(v93[2], 24, 8);
  v94[1] = &unk_26E6DF508;
  v94[2] = 0;
  *uint64_t v94 = &unk_26E6E0FC0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v94;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v95 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v96 = re::globalAllocators(v95);
  id v97 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v96[2] + 32))(v96[2], 16, 8);
  v97[1] = &unk_26E6E1040;
  *id v97 = &unk_26E6E0EC0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v97;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  id v98 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  id v99 = re::globalAllocators(v98);
  id v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v99[2] + 32))(v99[2], 8, 8);
  *id v100 = &unk_26E6D5EF0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v100;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  CMTime v101 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  int v102 = re::globalAllocators(v101);
  CMTime v103 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v102[2] + 32))(v102[2], 8, 8);
  *CMTime v103 = &unk_26E6D46F8;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v103;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  unint64_t v104 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  int v105 = re::globalAllocators(v104);
  int v106 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v105[2] + 32))(v105[2], 8, 8);
  *int v106 = &unk_26E6D6148;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v106;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v107 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  uint64_t v108 = re::globalAllocators(v107);
  int v109 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v108[2] + 32))(v108[2], 8, 8);
  *int v109 = &unk_26E6D6E48;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v109;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  uint64_t v110 = (re *)std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
  int v111 = re::globalAllocators(v110);
  uint64_t v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v111[2] + 32))(v111[2], 8, 8);
  *uint64_t v112 = &unk_26E6E0CF0;
  id v127 = &unk_26E6D5CD8;
  uint64_t v128 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  int v131 = &v127;
  id v132 = v112;
  long long v135 = &v133;
  id v133 = &unk_26E6D5CD8;
  long long v134 = re::internal::AssetCompilerRegistryHelper::deleter;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v132);
  std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v132);
  return std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](&v127);
}

void sub_2334D1BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a26)
  {
    if (a27) {
      (*(void (**)(void))(*(void *)a26 + 40))();
    }
  }

  _Unwind_Resume(a1);
}

void re::AssetHelper::makeMutableMaterialMemoryAsset(uint64_t a1, uint64_t a2, re::AssetHandle *a3, uint64_t a4)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v7, a3);
  re::MaterialAsset::makeMutableMaterialMemoryAsset(a1, a2, (re::AssetHandle *)v7, 0, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void re::AssetHelper::makeMeshMemoryAsset(uint64_t a1, _anonymous_namespace_ *a2, int a3, int *a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 2008, (uint64_t)a2);
  MeshAssetDataWithGeomMeshArray = (re *)re::makeMeshAssetDataWithGeomMeshArray(a2, a3, 0, a4, (uint64_t)v15);
  LODWORD(a4) = v15[0];
  long long v11 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(MeshAssetDataWithGeomMeshArray)[2] + 32);
  if (a4)
  {
    uint64_t v12 = (re::MeshAsset *)v11();
    BOOL v13 = (re::MeshAsset *)re::MeshAsset::MeshAsset((uint64_t)v12, (uint64_t)&v16);
  }
  else
  {
    uint64_t v12 = (re::MeshAsset *)v11();
    re::MeshAsset::MeshAsset(v12);
  }
  id v14 = re::MeshAsset::assetType(v13);
  (*(void (**)(uint64_t, re::MeshAsset *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416))(a1, v12, v14, 0, a5, 0);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v15);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
}

void sub_2334D1E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)va);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t re::AssetHelper::makeTextureMemoryAsset(uint64_t a1, id *a2, uint64_t a3)
{
  v9[0] = 0;
  v10[0] = *a2;
  unsigned int v11 = 0;
  id v12 = 0;
  memset(&v13[12], 0, 13);
  *(_DWORD *)BOOL v13 = 16777473;
  v13[4] = 1;
  *(_DWORD *)&unsigned char v13[8] = 1;
  int v14 = 0;
  uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v9, 6, (long long *)v13);

  if (v11 != -1) {
    uint64_t v6 = (re::TextureAsset *)((uint64_t (*)(unsigned char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0
  }
                                                                     + v11))(v13, v10);
  uint64_t v7 = re::TextureAsset::assetType(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416))(a1, TextureAsset, v7, 0, a3, 0);
}

void re::TextureData::~TextureData(id *this)
{
  uint64_t v2 = *((unsigned int *)this + 22);
  if (v2 != -1) {
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0
  }
                                        + v2))(&v3, this + 1);
  *((_DWORD *)this + 22) = -1;
}

uint64_t re::AssetHelper::makeCollisionShapeAsset(re *a1, re *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = re::globalAllocators(a1);
  unsigned int v11 = (re *)re::convertToSerializable(a2, a3, a4, v10[2]);
  id v12 = re::globalAllocators(v11);
  BOOL v13 = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 16, 8);
  *BOOL v13 = v11;
  v13[1] = a2;
  int v14 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v13);
  uint64_t v15 = *(uint64_t (**)(re *, re **, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416);
  return v15(a1, v13, v14, 0, a5, 0);
}

uint64_t re::AssetHelper::makePhysicsMaterialAsset(re *a1, re::PhysicsMaterial *a2, uint64_t a3)
{
  uint64_t v6 = re::globalAllocators(a1);
  re::PhysicsMaterial::createGenericMaterial(a2, (re::Allocator *)v6[2]);
  uint64_t v8 = v7;
  uint64_t v9 = re::globalAllocators(v7);
  int v10 = (re::PhysicsMaterialAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 16, 8);
  *(void *)int v10 = v8;
  *((void *)v10 + 1) = a2;
  unsigned int v11 = re::PhysicsMaterialAsset::assetType(v10);
  id v12 = *(uint64_t (**)(re *, re::PhysicsMaterialAsset *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416);
  return v12(a1, v10, v11, 0, a3, 0);
}

uint64_t re::AssetHelper::makeIndexedTriangleMeshAsset(re *a1, re *a2, uint64_t a3)
{
  uint64_t v6 = re::globalAllocators(a1);
  uint64_t v8 = (re *)re::convertToSerializable(a2, (const re::IndexedTriangleMesh *)v6[2], v7);
  uint64_t v9 = re::globalAllocators(v8);
  int v10 = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 16, 8);
  re::PhysicsMaterialAsset *v10 = v8;
  v10[1] = a2;
  unsigned int v11 = re::IndexedTriangleMeshAsset::assetType((re::IndexedTriangleMeshAsset *)v10);
  id v12 = *(uint64_t (**)(re *, re **, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416);
  return v12(a1, v10, v11, 0, a3, 0);
}

re **re::AssetHelper::makeTimelineAsset(re *a1, uint64_t a2)
{
  id v4 = re::globalAllocators(a1);
  id v5 = (re *)re::internal::convertToAssetData((uint64_t)a1, a2, v4[2]);
  uint64_t v6 = re::globalAllocators(v5);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 24, 8);
  *double result = a1;
  result[1] = v5;
  result[2] = a1;
  return result;
}

re **re::AssetHelper::makeTimelineAsset(re::AssetHelper *this, re::TimelineAssetData *a2)
{
  char v3 = re::globalAllocators(this);
  id v5 = (re *)re::internal::convertToTimeline(this, (const re::TimelineAssetData *)v3[2], v4);
  uint64_t v6 = re::globalAllocators(v5);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 24, 8);
  *double result = v5;
  result[1] = this;
  result[2] = v5;
  return result;
}

uint64_t re::AssetHelper::makeTimelineAssetHandle(uint64_t *a1, re *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TimelineAsset = re::AssetHelper::makeTimelineAsset(a2, a3);
  uint64_t v9 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
  uint64_t v10 = *a1;
  if (a4)
  {
    unsigned int v11 = *(uint64_t (**)(uint64_t *, re **, uint64_t *, uint64_t, void, uint64_t, void))(v10 + 424);
    return v11(a1, TimelineAsset, v9, a4, 0, a5, 0);
  }
  else
  {
    BOOL v13 = *(uint64_t (**)(uint64_t *, re **, uint64_t *, void, uint64_t, void))(v10 + 416);
    return v13(a1, TimelineAsset, v9, 0, a5, 0);
  }
}

void *re::DynamicArray<re::MeshLodLevelInfo>::add(void *this, uint64_t *a2)
{
  char v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshLodLevelInfo>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 12 * v4;
  uint64_t v6 = *a2;
  *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v5 = v6;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

BOOL re::AssetHelper::readerToWriterStream(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v9, 1024);
    if (!v4) {
      break;
    }
    uint64_t v5 = (re *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a2 + 16))(a2, v9, v4);
    if (v5 != (re *)v4)
    {
      uint64_t v6 = *re::assetTypesLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "AssetHelper::readerToWriterStream: unable to write data", v8, 2u);
      }
      return v4 == 0;
    }
  }
  return v4 == 0;
}

uint64_t loadIBLTextureWithContentsOfFile(_anonymous_namespace_ *a1, re::ImportGraphicsContext *a2, id *a3, uint64_t a4, uint64_t a5)
{
  re::ImportGraphicsContext::createFromAvailableManagers(a2, 0, (re::ImportGraphicsContext *)v17);
  if (!v15)
  {
    if (!v14[0])
    {
      uint64_t TextureAsset = 0;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v15 != 1)
  {
    uint64_t result = std::__throw_bad_variant_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  uint64_t TextureAsset = 0;
  if (v14[3] && v14[0])
  {
LABEL_7:
    int v11 = *(_DWORD *)(a4 + 56);
    *(void *)((char *)v21 + 5) = 0;
    v21[0] = 0;
    int v18 = 16777473;
    char v19 = 1;
    int v20 = 1;
    int v22 = 0;
    uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v13, v11, (long long *)&v18);
  }
LABEL_9:

  if (v15 != -1) {
    ((void (*)(int *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0
  }
                                           + v15))(&v18, v14);

  return TextureAsset;
}

void sub_2334D27C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,id a24)
{
  _Unwind_Resume(a1);
}

unsigned char *re::AssetHelper::createDefaultImageBasedLightEngineAsset@<X0>(re::AssetHelper *this@<X0>, id *a2@<X1>, const re::AssetHandle *a3@<X8>)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  uint64_t v7 = re::AssetManager::parseAssetPath(this, "engine:studio_lighting_mrmode.reibl", 0, 0, (uint64_t)v82);
  uint64_t v79 = 0;
  BOOL v80 = 0;
  uint64_t v81 = 0;
  re::DynamicString::setCapacity(&v78, 0);
  re::AssetPath::filePathToAsset((re::AssetPath *)&v83, (re::DynamicString *)&v78, 1, 0);
  unint64_t v77 = &unk_26E6CA830;
  if (v79) {
    uint64_t v8 = v80;
  }
  else {
    uint64_t v8 = (re::IBLAssetCompiler *)((char *)&v79 + 1);
  }
  uint64_t v9 = re::IBLAssetCompiler::createFromJson(v8, (const re::IntrospectionBase *)&v77, (uint64_t)v72);
  if (v72[0])
  {
    uint64_t v10 = v73;
    *(void *)&long long v107 = 0;
    *((void *)&v107 + 1) = v109;
    uint64_t v108 = 488;
    v109[0] = 0;
    CMTime v103 = 0;
    unint64_t v104 = v106;
    uint64_t v105 = 488;
    v106[0] = 0;
    if (v79) {
      BOOL v13 = v80;
    }
    else {
      BOOL v13 = (re::PathBuffer *)((char *)&v79 + 1);
    }
    int v14 = (re *)re::path::dirname((re::path *)&v107, v13, v12);
    unsigned int v15 = v14;
    if (!v14 || !*(unsigned char *)v14)
    {
      int v20 = *re::assetsLogObjects(v14);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        if (v79) {
          BOOL v21 = v80;
        }
        else {
          BOOL v21 = (re::IBLAssetCompiler *)((char *)&v79 + 1);
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v21;
        _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Error loading .reibl file: unable to find directory of '%s'", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_101;
    }
    int v91 = 1;
    int v95 = 0;
    char v96 = 0;
    int v97 = 0;
    char v98 = 0;
    uint64_t v93 = 0;
    uint64_t v92 = 0;
    char v94 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    id v100 = 0;
    int v99 = 4;
    long long buf = 0x300000002uLL;
    id v16 = a2[23];
    id v71 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
    objc_msgSend(v71, sel_setStorageMode_, 0);
    unint64_t v17 = *((void *)v10 + 10);
    unint64_t v18 = v17 >> 1;
    if ((v17 & 1) == 0) {
      unint64_t v18 = v17 >> 1;
    }
    if (v18)
    {
      if (v17) {
        char v19 = (const char *)*((void *)v10 + 11);
      }
      else {
        char v19 = v10 + 81;
      }
      uint64_t v24 = (__CFString *)CFStringCreateWithCString(0, v19, 0x8000100u);
      re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&buf, v24);
      CFRelease(v24);
    }
    else
    {
      re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&buf, (__CFString *)*MEMORY[0x263F00230]);
    }
    re::AssetHandle::serializationString((re::AssetHandle *)v10, (re::DynamicString *)&v68);
    unint64_t v26 = v69 >> 1;
    if ((v69 & 1) == 0) {
      unint64_t v26 = v69 >> 1;
    }
    if (v26)
    {
      if (v69) {
        int v27 = v70;
      }
      else {
        int v27 = (char *)&v69 + 1;
      }
      char v28 = (_anonymous_namespace_ *)re::path::join(&v103, v15, v27, v25);
      id v29 = v28;
      if (v69) {
        CFTypeRef v30 = v70;
      }
      else {
        CFTypeRef v30 = (char *)&v69 + 1;
      }
      uint64_t v31 = (void *)loadIBLTextureWithContentsOfFile(v28, (re::ImportGraphicsContext *)a2, &v71, (uint64_t)&buf, (uint64_t)v30);
      if (!v31)
      {
        id v58 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v88) = 136315138;
          *(void *)((char *)&v88 + 4) = v29;
          _os_log_error_impl(&dword_233120000, v58, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture '%s'", (uint8_t *)&v88, 0xCu);
        }
        goto LABEL_95;
      }
      id v62 = v16;
      re::DynamicString::DynamicString((re::DynamicString *)&v88, (const re::DynamicString *)&v68);
      char v32 = v89;
      uint64_t v33 = BYTE8(v88) & 1;
      if (BYTE8(v88)) {
        uint64_t v34 = v89;
      }
      else {
        uint64_t v34 = (char *)&v88 + 9;
      }
      if (!strchr(v34, 58))
      {
        re::DynamicString::operator+((re::DynamicString *)v84, (uint64_t)&v88, (re::DynamicString *)v86);
        re::DynamicString::operator=((re::DynamicString *)&v88, (re::DynamicString *)v86);
        if (*(void *)v86)
        {
          if (v86[8]) {
            (*(void (**)(void))(**(void **)v86 + 40))();
          }
          *(_OWORD *)char v86 = 0u;
          long long v87 = 0u;
        }
        if (*(void *)v84 && (v84[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v84 + 40))();
        }
        char v32 = v89;
        uint64_t v33 = BYTE8(v88) & 1;
      }
      if (v33) {
        uint64_t v35 = v32;
      }
      else {
        uint64_t v35 = (char *)&v88 + 9;
      }
      re::AssetManager::assetHandle(this, v35, 1, 0, (uint64_t *)v86);
      uint64_t v36 = *((void *)v10 + 1);
      uint64_t v37 = *((void *)v10 + 2);
      *((void *)v10 + 1) = *(void *)&v86[8];
      *(void *)&v86[8] = v36;
      uint64_t v38 = *(void *)v10;
      *(void *)uint64_t v10 = 0;
      *(void *)uint64_t v10 = *(void *)v86;
      *((void *)v10 + 2) = v87;
      *(void *)char v86 = v38;
      *(void *)&long long v87 = v37;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v86);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v67, (const re::AssetHandle *)v10);
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)this, v31, (uint64_t)v67, 1);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v67);
      if (void)v88 && (BYTE8(v88)) {
        (*(void (**)(void))(*(void *)v88 + 40))();
      }
      id v16 = v62;
    }
    re::AssetHandle::serializationString((re::AssetHandle *)(v10 + 24), (re::DynamicString *)&v88);
    uint64_t v40 = *((void *)&v88 + 1) >> 1;
    if ((BYTE8(v88) & 1) == 0) {
      uint64_t v40 = BYTE8(v88) >> 1;
    }
    if (v40)
    {
      id v63 = v16;
      if (BYTE8(v88)) {
        int v41 = v89;
      }
      else {
        int v41 = (char *)&v88 + 9;
      }
      id v42 = (_anonymous_namespace_ *)re::path::join(&v103, v15, v41, v39);
      id v43 = v42;
      if (BYTE8(v88)) {
        id v44 = v89;
      }
      else {
        id v44 = (char *)&v88 + 9;
      }
      uint64_t v45 = (void *)loadIBLTextureWithContentsOfFile(v42, (re::ImportGraphicsContext *)a2, &v71, (uint64_t)&buf, (uint64_t)v44);
      if (!v45)
      {
        int v59 = *re::assetsLogObjects(0);
        id v16 = v63;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v86 = 136315138;
          *(void *)&v86[4] = v43;
          _os_log_error_impl(&dword_233120000, v59, OS_LOG_TYPE_ERROR, "Failed to load IBL diffuse texture '%s'", v86, 0xCu);
        }
        goto LABEL_92;
      }
      re::AssetManager::assetHandle(this, "engine:studio_lighting_mrmode_diffmap.ktx", 1, 0, (uint64_t *)v86);
      long long v46 = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)v86;
      *(_OWORD *)char v86 = v46;
      uint64_t v47 = *((void *)v10 + 5);
      *((void *)v10 + 5) = v87;
      *(void *)&long long v87 = v47;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v86);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v66, (const re::AssetHandle *)(v10 + 24));
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)this, v45, (uint64_t)v66, 1);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v66);
      id v16 = v63;
    }
    re::AssetHandle::serializationString((re::AssetHandle *)(v10 + 48), (re::DynamicString *)v86);
    uint64_t v49 = *(void *)&v86[8] >> 1;
    if ((v86[8] & 1) == 0) {
      uint64_t v49 = v86[8] >> 1;
    }
    if (v49)
    {
      if (v86[8]) {
        uint64_t v50 = (const char *)v87;
      }
      else {
        uint64_t v50 = (const char *)&v86[9];
      }
      uint64_t v51 = (_anonymous_namespace_ *)re::path::join(&v103, v15, v50, v48);
      int v52 = v51;
      if (v86[8]) {
        uint64_t v53 = (uint8_t *)v87;
      }
      else {
        uint64_t v53 = &v86[9];
      }
      uint64_t v54 = (id *)loadIBLTextureWithContentsOfFile(v51, (re::ImportGraphicsContext *)a2, &v71, (uint64_t)&buf, (uint64_t)v53);
      if (!v54)
      {
        CFTypeRef v60 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v84 = 136315138;
          *(void *)&v84[4] = v52;
          _os_log_error_impl(&dword_233120000, v60, OS_LOG_TYPE_ERROR, "Failed to load IBL specular texture '%s'", v84, 0xCu);
        }
        goto LABEL_89;
      }
      re::AssetManager::assetHandle(this, "engine:studio_lighting_mrmode_specmap.ktx", 1, 0, (uint64_t *)v84);
      long long v55 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v10 + 3) = *(_OWORD *)v84;
      *(_OWORD *)int v84 = v55;
      uint64_t v56 = *((void *)v10 + 8);
      *((void *)v10 + 8) = v85;
      uint64_t v85 = v56;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v84);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v65, (const re::AssetHandle *)(v10 + 48));
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)this, v54, (uint64_t)v65, 1);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v65);
      if (v54[31])
      {
        CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr((CFStringRef)v54[31], 0x8000100u);
        re::DynamicString::operator=((re::DynamicString *)(v10 + 72), (re::DynamicString *)v84);
        if (*(void *)v84)
        {
          if (v84[8]) {
            (*(void (**)(void))(**(void **)v84 + 40))();
          }
        }
      }
    }
    re::AssetManager::assetHandle(this, "engine:studio_lighting_mrmode.reibl", 1, 0, (uint64_t *)v84);
    *(_OWORD *)a3 = *(_OWORD *)v84;
    memset(v84, 0, sizeof(v84));
    *((void *)a3 + 2) = v85;
    uint64_t v85 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v84);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v64, a3);
    re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)this, v10, (uint64_t)v64, 1);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
LABEL_89:
    if (*(void *)v86 && (v86[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v86 + 40))();
    }
LABEL_92:
    if (void)v88 && (BYTE8(v88)) {
      (*(void (**)(void))(*(void *)v88 + 40))();
    }
LABEL_95:
    if (v68 && (v69 & 1) != 0) {
      (*(void (**)(void))(*(void *)v68 + 40))();
    }
    if (v71) {

    }
LABEL_101:
    if (v104 != v106) {
      (*(void (**)(const char *))(*(void *)v103 + 40))(v103);
    }
    if (*((unsigned char **)&v107 + 1) != v109) {
      (*(void (**)(void))(*(void *)v107 + 40))(v107);
    }
    goto LABEL_105;
  }
  int v22 = *re::assetsLogObjects(v9);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if (v75) {
      char v23 = *(unsigned char **)&v76[7];
    }
    else {
      char v23 = v76;
    }
    LODWORD(v107) = 136315138;
    *(void *)((char *)&v107 + 4) = v23;
    _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Failed to load .reibl source': %s", (uint8_t *)&v107, 0xCu);
  }
LABEL_105:
  if (!v72[0] && v74 && (v75 & 1) != 0) {
    (*(void (**)(void))(*(void *)v74 + 40))();
  }
  if (v78 && (v79 & 1) != 0) {
    (*(void (**)(void))(*v78 + 40))();
  }
  return re::Result<re::AssetPath,re::DetailedError>::~Result(v82);
}

void sub_2334D329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,id a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a55 && (a56 & 1) != 0) {
    (*(void (**)(void))(*(void *)a55 + 40))();
  }
  if (a59 && (a60 & 1) != 0) {
    (*(void (**)(void))(*(void *)a59 + 40))();
  }
  if (a23 && (a24 & 1) != 0) {
    (*(void (**)(void))(*(void *)a23 + 40))();
  }
  if (a27) {

  }
  if (STACK[0x218] != v72) {
    (*(void (**)(void))(*(void *)STACK[0x210] + 40))();
  }
  if (STACK[0x418] != v74) {
    (*(void (**)(void))(*(void *)STACK[0x410] + 40))();
  }
  if (!a28 && a31 && (a32 & 1) != 0) {
    (*(void (**)(void))(*(void *)a31 + 40))();
  }
  if (a36)
  {
    if (a37) {
      (*(void (**)(void))(*(void *)a36 + 40))();
    }
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result(&a40);
  re::AssetHandle::~AssetHandle(v71);
  _Unwind_Resume(a1);
}

void re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::~BasicAssetLoader()
{
}

re *re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::unloadAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::introspectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A408))
  {
    _MergedGlobals_82 = re::introspect_BlendShapeGroupDefinitionAsset(0);
    __cxa_guard_release(&qword_26AF7A408);
  }
  return _MergedGlobals_82;
}

void sub_2334D3564(_Unwind_Exception *a1)
{
}

re *re::internal::destroyPersistent<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::FixedArray<re::BlendShapeDefinition>::deinit((void *)v1 + 2);
    re::StringID::destroyString(v1);
    char v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

void re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::~BasicAssetLoader()
{
}

re *re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::unloadAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::introspectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A418))
  {
    qword_26AF7A410 = re::introspect_BlendTreeDefinitionAsset(0);
    __cxa_guard_release(&qword_26AF7A418);
  }
  return qword_26AF7A410;
}

void sub_2334D36A4(_Unwind_Exception *a1)
{
}

re *re::internal::destroyPersistent<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(re *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::~BasicAsset(v1);
    char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::~BasicAsset(uint64_t a1)
{
  return a1;
}

void re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::~BasicAssetLoader()
{
}

re *re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::unloadAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re *)"unloadAsset", 95, a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::introspectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A428))
  {
    qword_26AF7A420 = re::introspect_AnimationSceneAsset(0);
    __cxa_guard_release(&qword_26AF7A428);
  }
  return qword_26AF7A420;
}

void sub_2334D384C(_Unwind_Exception *a1)
{
}

re *re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::~BasicAssetLoader()
{
}

re *re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::unloadAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re *)"unloadAsset", 95, a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::introspectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A438))
  {
    qword_26AF7A430 = re::introspect_AssignedMeshDeformationAsset(0);
    __cxa_guard_release(&qword_26AF7A438);
  }
  return qword_26AF7A430;
}

void sub_2334D3990(_Unwind_Exception *a1)
{
}

re *re::internal::destroyPersistent<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshIdentifierAsset>::deinit(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::~__func()
{
}

void *std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E6D5BB8;
  return result;
}

void std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D5BB8;
}

re *std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::AssetLoader>((re *)"operator()", 204, *a2);
}

uint64_t std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

re *re::internal::AssetTypeRegistryHelper::deleter(re::internal::AssetTypeRegistryHelper *this, re::AssetLoader *a2)
{
  return re::internal::destroyPersistent<re::AssetLoader>((re *)"deleter", 141, (void (***)(void))this);
}

void std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::~__func()
{
}

void *std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E6D5C38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6D5C38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::target_type()
{
}

re *re::internal::AssetCompilerRegistryHelper::deleter(re *this, re::AssetCompiler *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::globalAllocators(this)[2];
    (**(void (***)(re *))v2)(v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, re *))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return this;
}

void std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::~__func()
{
}

void *std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E6D5CD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6D5CD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::target_type()
{
}

void re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::~BasicJsonCompiler()
{
}

re::DynamicString *re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::getCurrentCompiledAssetInfo@<X0>(_anonymous_namespace_ *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0x100000001;
  uint64_t v2 = (re::DynamicString *)(a2 + 1);
  uint64_t v3 = (const char *)re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetName;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::assetIntrospectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A448))
  {
    qword_26AF7A440 = re::introspect_AnimationScene(0);
    __cxa_guard_release(&qword_26AF7A448);
  }
  return qword_26AF7A440;
}

void sub_2334D3E2C(_Unwind_Exception *a1)
{
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  v2[0] = &re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetExtension;
  v2[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::compile(char *__s@<X1>, const re::IntrospectionBase *a2@<X3>, uint64_t a3@<X8>)
{
  *(_OWORD *)CFTypeRef v30 = 0u;
  long long v31 = 0u;
  uint64_t v35 = 0;
  char v32 = "";
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  char v36 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  uint64_t v6 = strrchr(__s, 46);
  if (!strcmp(v6 + 1, (const char *)re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetExtension))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A448, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF7A448))
    {
      qword_26AF7A440 = re::introspect_AnimationScene(0);
      __cxa_guard_release(&qword_26AF7A448);
    }
    SourceJson = (re *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)__s, v30, qword_26AF7A440, a2, (uint64_t)v27);
    if (v27[0])
    {
      uint64_t v10 = re::globalAllocators(SourceJson);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 112, 8);
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 88) = 0;
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(void *)(v11 + 32) = "";
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      *(void *)(v11 + 40) = 0;
      *(void *)(v11 + 96) = 0;
      *(void *)(v11 + 104) = 0;
      *(void *)(v11 + 8) = *(void *)&v30[8];
      *(void *)&v30[8] = 0;
      uint64_t v12 = *(void *)v11;
      *(void *)uint64_t v11 = 0;
      *(void *)uint64_t v11 = *(void *)v30;
      *(void *)(v11 + 16) = v31;
      *(void *)CFTypeRef v30 = v12;
      uint64_t v13 = *((void *)&v31 + 1);
      int v14 = v32;
      long long v31 = 0uLL;
      char v32 = "";
      uint64_t v15 = *(void *)(v11 + 24);
      uint64_t v16 = *(void *)(v11 + 32);
      *(void *)(v11 + 24) = v13;
      *(void *)(v11 + 32) = v14;
      *(void *)&long long v23 = v13 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
      *((void *)&v23 + 1) = v16;
      re::StringID::destroyString((re::StringID *)&v23);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v11 + 40, (uint64_t)v33);
      *(unsigned char *)(v11 + 80) = v36;
      uint64_t v17 = *(void *)(v11 + 96);
      uint64_t v18 = *(void *)(v11 + 104);
      *(void *)(v11 + 96) = v38;
      uint64_t v38 = v17;
      uint64_t v19 = *(void *)(v11 + 88);
      *(void *)(v11 + 88) = 0;
      *(void *)(v11 + 88) = v37;
      *(void *)(v11 + 104) = v39;
      uint64_t v37 = v19;
      uint64_t v39 = v18;
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + 8) = v11;
    }
    else
    {
      *(void *)&long long v23 = 100;
      *((void *)&v23 + 1) = re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)&v28);
      long long v20 = v24;
      *(_OWORD *)(a3 + 8) = v23;
      uint64_t v21 = v25;
      uint64_t v22 = v26;
      *(unsigned char *)a3 = 0;
      *(_OWORD *)(a3 + 24) = v20;
      *(void *)(a3 + 40) = v21;
      *(void *)(a3 + 48) = v22;
      if (!v27[0] && v28 && (v29 & 1) != 0) {
        (*(void (**)(void))(*(void *)v28 + 40))();
      }
    }
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v23, __s);
    long long v7 = v23;
    long long v8 = v24;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 200;
    *(void *)(a3 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v7;
    *(_OWORD *)(a3 + 40) = v8;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
  re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)v33);
  re::StringID::destroyString((re::StringID *)((char *)&v31 + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
}

void sub_2334D4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  __cxa_guard_abort(&qword_26AF7A448);
  re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset((uint64_t)va);
  _Unwind_Resume(a1);
}

re *re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::deleteAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re *)"deleteAsset", 66, a2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::~BasicJsonCompiler()
{
}

re::DynamicString *re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::getCurrentCompiledAssetInfo@<X0>(_anonymous_namespace_ *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0x100000001;
  uint64_t v2 = (re::DynamicString *)(a2 + 1);
  uint64_t v3 = (const char *)re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetName;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::assetIntrospectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A458, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A458))
  {
    qword_26AF7A450 = re::introspect_BlendShapeGroupDefinition(0);
    __cxa_guard_release(&qword_26AF7A458);
  }
  return qword_26AF7A450;
}

void sub_2334D4270(_Unwind_Exception *a1)
{
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  v2[0] = &re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetExtension;
  v2[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::compile(char *__s@<X1>, const re::IntrospectionBase *a2@<X3>, uint64_t a3@<X8>)
{
  *(void *)uint64_t v26 = 0;
  int v27 = "";
  HIDWORD(v29) = 0;
  memset(v28, 0, sizeof(v28));
  LOBYTE(v29) = 0;
  uint64_t v6 = strrchr(__s, 46);
  if (!strcmp(v6 + 1, (const char *)re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetExtension))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A458, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF7A458))
    {
      qword_26AF7A450 = re::introspect_BlendShapeGroupDefinition(0);
      __cxa_guard_release(&qword_26AF7A458);
    }
    SourceJson = (re *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)__s, v26, qword_26AF7A450, a2, (uint64_t)v23);
    if (v23[0])
    {
      uint64_t v10 = re::globalAllocators(SourceJson);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 48, 8);
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(void *)(v11 + 8) = "";
      uint64_t v12 = *(void *)v26;
      uint64_t v13 = v27;
      *(void *)uint64_t v26 = 0;
      int v27 = "";
      uint64_t v14 = *(void *)(v11 + 8);
      unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFFELL | *(void *)v11 & 1;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 16) = 0;
      *(unsigned char *)(v11 + 40) = 0;
      *(void *)(v11 + 8) = v13;
      *(void *)&long long v19 = v15;
      *((void *)&v19 + 1) = v14;
      *(void *)uint64_t v11 = v12;
      re::StringID::destroyString((re::StringID *)&v19);
      re::FixedArray<float>::operator=((uint64_t *)(v11 + 16), v28);
      *(void *)(v11 + 40) = v29;
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + 8) = v11;
    }
    else
    {
      *(void *)&long long v19 = 100;
      *((void *)&v19 + 1) = re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v24);
      long long v16 = v20;
      *(_OWORD *)(a3 + 8) = v19;
      uint64_t v17 = v21;
      uint64_t v18 = v22;
      *(unsigned char *)a3 = 0;
      *(_OWORD *)(a3 + 24) = v16;
      *(void *)(a3 + 40) = v17;
      *(void *)(a3 + 48) = v18;
      if (!v23[0] && v24 && (v25 & 1) != 0) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
    }
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v19, __s);
    long long v7 = v19;
    long long v8 = v20;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 200;
    *(void *)(a3 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v7;
    *(_OWORD *)(a3 + 40) = v8;
  }
  re::FixedArray<re::BlendShapeDefinition>::deinit(v28);
  re::StringID::destroyString((re::StringID *)v26);
}

void sub_2334D4520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  __cxa_guard_abort(&qword_26AF7A458);
  re::FixedArray<re::BlendShapeDefinition>::deinit(v13);
  re::StringID::destroyString((re::StringID *)va);
  _Unwind_Resume(a1);
}

re *re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::deleteAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(a2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::~BasicJsonCompiler()
{
}

re::DynamicString *re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::getCurrentCompiledAssetInfo@<X0>(_anonymous_namespace_ *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0x100000001;
  uint64_t v2 = (re::DynamicString *)(a2 + 1);
  uint64_t v3 = (const char *)re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetName;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::assetIntrospectionType()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A468))
  {
    qword_26AF7A460 = re::introspect_BlendTreeDefinition(0);
    __cxa_guard_release(&qword_26AF7A468);
  }
  return qword_26AF7A460;
}

void sub_2334D4628(_Unwind_Exception *a1)
{
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  v2[0] = &re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetExtension;
  v2[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v2);
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::compile@<X0>(char *__s@<X1>, const re::IntrospectionBase *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = __s;
  *(void *)CFTypeRef v30 = 0;
  uint64_t v31 = 0;
  int v33 = 0;
  uint64_t v32 = 0;
  uint64_t v52 = 0;
  memset(v34, 0, sizeof(v34));
  long long v36 = 0u;
  long long v37 = 0u;
  int v35 = 0;
  int v38 = 0;
  memset(v39, 0, sizeof(v39));
  long long v41 = 0u;
  memset(v42, 0, 28);
  long long v43 = 0u;
  long long v44 = 0u;
  int v40 = 0;
  int v45 = 0;
  int v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  int v51 = 0;
  uint64_t v6 = strrchr(__s, 46);
  if (strcmp(v6 + 1, (const char *)re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetExtension))
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v23, v4);
    long long v7 = v23;
    long long v8 = v24;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 200;
    *(void *)(a3 + 16) = re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v7;
    *(_OWORD *)(a3 + 40) = v8;
    goto LABEL_17;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A468, memory_order_acquire) & 1) == 0) {
    goto LABEL_42;
  }
  while (1)
  {
    SourceJson = (re *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)v4, v30, qword_26AF7A460, a2, (uint64_t)v27);
    if (!v27[0]) {
      break;
    }
    uint64_t v10 = re::globalAllocators(SourceJson);
    uint64_t v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 328, 8);
    *((void *)v4 + 40) = 0;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 14) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    a2 = (const re::IntrospectionBase *)(v4 + 80);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v4, (uint64_t)v30);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v4 + 40), (uint64_t)&v34[1]);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v4 + 80), (uint64_t)&v36 + 8);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v4 + 120), (uint64_t)&v39[1]);
    *((void *)v4 + 20) = *((void *)&v41 + 1);
    if (v4 != v30)
    {
      uint64_t v12 = *((void *)v4 + 21);
      if (v12 && v42[0] && v12 != v42[0])
      {
        re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
        goto LABEL_41;
      }
      *((void *)v4 + 21) = v42[0];
      v42[0] = v12;
      long long v13 = *((_OWORD *)v4 + 11);
      *((void *)v4 + 22) = v42[1];
      *((void *)v4 + 23) = v42[2];
      *(_OWORD *)&v42[1] = v13;
      uint64_t v14 = *((void *)v4 + 25);
      *((void *)v4 + 25) = v43;
      *(void *)&long long v43 = v14;
      ++LODWORD(v42[3]);
      ++*((_DWORD *)v4 + 48);
    }
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v4 + 208), (uint64_t)&v43 + 8);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v4 + 248), (uint64_t)&v46 + 8);
    if (v4 == v30) {
      goto LABEL_15;
    }
    uint64_t v16 = *((void *)v4 + 36);
    if (!v16 || !*((void *)&v49 + 1) || v16 == *((void *)&v49 + 1))
    {
      *((void *)v4 + 36) = *((void *)&v49 + 1);
      *((void *)&v49 + 1) = v16;
      long long v17 = *(_OWORD *)(v4 + 296);
      *(_OWORD *)(v4 + 296) = v50;
      long long v50 = v17;
      uint64_t v18 = *((void *)v4 + 40);
      *((void *)v4 + 40) = v52;
      uint64_t v52 = v18;
      ++v51;
      ++*((_DWORD *)v4 + 78);
LABEL_15:
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + 8) = v4;
      goto LABEL_17;
    }
LABEL_41:
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
LABEL_42:
    if (__cxa_guard_acquire(&qword_26AF7A468))
    {
      qword_26AF7A460 = re::introspect_BlendTreeDefinition(0);
      __cxa_guard_release(&qword_26AF7A468);
    }
  }
  *(void *)&long long v23 = 100;
  *((void *)&v23 + 1) = re::AssetErrorCategory(void)::instance;
  re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)&v28);
  long long v19 = v24;
  *(_OWORD *)(a3 + 8) = v23;
  uint64_t v20 = v25;
  uint64_t v21 = v26;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 24) = v19;
  *(void *)(a3 + 40) = v20;
  *(void *)(a3 + 48) = v21;
  if (!v27[0] && v28 && (v29 & 1) != 0) {
    (*(void (**)(void))(*(void *)v28 + 40))();
  }
LABEL_17:
  if (*((void *)&v49 + 1))
  {
    if (v52) {
      (*(void (**)(void))(**((void **)&v49 + 1) + 40))();
    }
    uint64_t v52 = 0;
    long long v50 = 0uLL;
    *((void *)&v49 + 1) = 0;
    ++v51;
  }
  if (*((void *)&v46 + 1))
  {
    if ((void)v49) {
      (*(void (**)(void))(**((void **)&v46 + 1) + 40))();
    }
    *(void *)&long long v49 = 0;
    long long v47 = 0uLL;
    *((void *)&v46 + 1) = 0;
    ++v48;
  }
  if (*((void *)&v43 + 1))
  {
    if ((void)v46) {
      (*(void (**)(void))(**((void **)&v43 + 1) + 40))();
    }
    *(void *)&long long v46 = 0;
    long long v44 = 0uLL;
    *((void *)&v43 + 1) = 0;
    ++v45;
  }
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v42);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v39[1]);
  if (*((void *)&v36 + 1))
  {
    if (v39[0]) {
      (*(void (**)(void))(**((void **)&v36 + 1) + 40))();
    }
    v39[0] = 0;
    long long v37 = 0uLL;
    *((void *)&v36 + 1) = 0;
    ++v38;
  }
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v34[1]);
  uint64_t result = *(void *)v30;
  if (*(void *)v30)
  {
    if (v34[0]) {
      return (*(uint64_t (**)(void))(**(void **)v30 + 40))();
    }
  }
  return result;
}

void sub_2334D4C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  __cxa_guard_abort(&qword_26AF7A468);
  re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::~BasicAsset((uint64_t)va);
  _Unwind_Resume(a1);
}

re *re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::deleteAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(a2);
}

void *re::DynamicArray<re::MeshAssetModel>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetModel>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetModel>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::MeshAssetSkeleton>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::allocInfo_AudioFileAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_83, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_83))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A4E8, "AudioFileAsset");
    __cxa_guard_release(&_MergedGlobals_83);
  }
  return &unk_26AF7A4E8;
}

void re::initInfo_AudioFileAsset(re *this, re::IntrospectionBase *a2)
{
  v58[0] = 0x5AD9D7EF0324A77CLL;
  v58[1] = "AudioFileAsset";
  re::StringID::destroyString((re::StringID *)v58);
  *((_OWORD *)this + 2) = v59;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A478, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A478);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::introspect_int((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "loopCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x6000000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A480 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "referenceLevel";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A488 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_uint64_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "lengthInFrames";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x8800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7A490 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "streaming";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6400000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7A498 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      long long v23 = introspect_REAudioInputMode(1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "inputMode";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x3400000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF7A4A0 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      int v27 = re::introspect_double((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "maximumAlignmentLatency";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x9000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF7A4A8 = v28;
      char v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "randomizeStart";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x6500000008;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF7A4B0 = v32;
      int v33 = re::introspectionAllocator((re *)v32);
      int v35 = introspect_REAudioNormalizationMode(1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "normalizationMode";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x6800000009;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF7A4B8 = v36;
      long long v37 = re::introspectionAllocator((re *)v36);
      uint64_t v39 = introspect_REAudioCalibrationMode(1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "calibrationMode";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x6C0000000ALL;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF7A4C0 = v40;
      long long v41 = re::introspectionAllocator((re *)v40);
      long long v43 = re::introspect_double((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "calibrationLevel";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0x700000000BLL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF7A4C8 = v44;
      int v45 = re::introspectionAllocator((re *)v44);
      long long v47 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "mixGroupName";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 32) = 0x380000000CLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF7A4D0 = v48;
      long long v49 = re::introspectionAllocator((re *)v48);
      int v51 = re::introspect_uint32_t((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + 8) = "layoutTag";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + 32) = 0x800000000DLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26AF7A4D8 = v52;
      uint64_t v53 = re::introspectionAllocator((re *)v52);
      long long v55 = re::introspect_double((re *)1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + 8) = "targetLUFS";
      *(void *)(v56 + 16) = v55;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + 32) = 0x780000000ELL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 48) = 0;
      *(void *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_26AF7A4E0 = v56;
      __cxa_guard_release(&qword_26AF7A478);
    }
  }
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((void *)this + 8) = &qword_26AF7A480;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioFileAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioFileAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AudioFileAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioFileAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v57 = v59;
}

void sub_2334D556C(_Unwind_Exception *a1)
{
}

re::AudioFileAsset *re::internal::defaultConstruct<re::AudioFileAsset>(int a1, int a2, re::AudioFileAsset *this)
{
  return re::AudioFileAsset::AudioFileAsset(this);
}

void re::internal::defaultDestruct<re::AudioFileAsset>(int a1, int a2, re::AudioFileAsset *this)
{
}

uint64_t re::introspect_AudioFileAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAsset>, this);
}

uint64_t re::AudioFileAsset::Impl::operator==(uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  if (result == *a2 || result && (uint64_t result = objc_msgSend((id)result, "isEqual:"), result))
  {
    uint64_t result = a1[1];
    if (result == a2[1] || result && (uint64_t result = objc_msgSend((id)result, "isEqual:"), result))
    {
      uint64_t result = a1[2];
      if (result == a2[2] || result && (uint64_t result = objc_msgSend((id)result, "isEqual:"), result))
      {
        uint64_t result = a1[4];
        if (result == a2[4])
        {
          return 1;
        }
        else if (result)
        {
          return objc_msgSend((id)result, "isEqual:");
        }
      }
    }
  }
  return result;
}

re::AudioFileAsset *re::AudioFileAsset::AudioFileAsset(re::AudioFileAsset *this)
{
  *(void *)this = &unk_26E6D5EC0;
  unint64_t v2 = (re::AudioFileAsset *)((char *)this + 16);
  *((_DWORD *)this + 12) = -1052770304;
  *((unsigned char *)this + 52) = 0;
  *((unsigned char *)this + 56) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_WORD *)this + 50) = 0;
  *((void *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_234377540;
  *((void *)this + 16) = 4294901760;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  *(_DWORD *)((char *)this + 151) = 0;
  uint64_t v4 = re::globalAllocators(v3);
  uint64_t v5 = (re::AudioFileAsset::Impl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 192, 8);
  *((void *)this + 1) = re::AudioFileAsset::Impl::Impl(v5);
  for (__long long buf = 0; __buf < 0x3E8; arc4random_buf(&__buf, 8uLL))
    ;
  *(void *)(*((void *)this + 1) + 24) = __buf;
  return this;
}

void sub_2334D57BC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 56)) {
    re::DynamicString::deinit((re::DynamicString *)(v1 + 64));
  }
  re::DynamicString::deinit(v2);
  _Unwind_Resume(a1);
}

unsigned char *re::AudioFileAsset::setConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 100) = *(unsigned char *)a2;
  uint64_t result = re::Optional<re::DynamicString>::operator=((unsigned char *)(a1 + 56), (unsigned __int8 *)(a2 + 32));
  *(unsigned char *)(a1 + 101) = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 96) = -*(char *)(a2 + 1);
  *(void *)(a1 + 112) = *(void *)(a2 + 16);
  *(void *)(a1 + 104) = *(void *)(a2 + 4);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = *(void *)(a2 + 24);
  if (*(unsigned char *)(a2 + 72)) {
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 76);
  }
  return result;
}

void re::AudioFileAsset::~AudioFileAsset(re::AudioFileAsset *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];

    *(void *)(v2 + 48) = &unk_26E714530;
    *(void *)(v2 + 48) = &unk_26E7144B8;
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(v2 + 80);

    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v2);
  }
  mach_port_name_t v4 = *((_DWORD *)this + 33);
  if (v4 + 1 >= 2)
  {
    uint64_t v5 = (re *)mach_port_deallocate(*MEMORY[0x263EF8960], v4);
    mach_error_t v6 = (int)v5;
    if (v5)
    {
      unint64_t v7 = (id)*re::audioLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315138;
        uint64_t v9 = mach_error_string(v6);
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAsset] Failed to deallocate mach port, with KERN error code: %s", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  if (*((unsigned char *)this + 56)) {
    re::DynamicString::deinit((re::AudioFileAsset *)((char *)this + 64));
  }
  re::DynamicString::deinit((re::AudioFileAsset *)((char *)this + 16));
}

{
  uint64_t vars8;

  re::AudioFileAsset::~AudioFileAsset(this);
  JUMPOUT(0x237DBCBD0);
}

void sub_2334D5A1C(_Unwind_Exception *a1)
{
  if (v1[56]) {
    re::DynamicString::deinit((re::DynamicString *)(v1 + 64));
  }
  re::DynamicString::deinit((re::DynamicString *)(v1 + 16));
  _Unwind_Resume(a1);
}

void re::AudioFileAsset::cloneFrom(re::AudioFileAsset *this, const re::AudioFileAsset *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  mach_port_name_t v4 = &off_268773000;
  while (1)
  {
    uint64_t v5 = (const re::IntrospectionBase *)v4[316];
    __buf[1] = 0;
    __buf[2] = &v12;
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "ok", "cloneFrom", 189, v12, v13, v14);
    _os_crash();
    __break(1u);
LABEL_10:
    mach_port_name_t v4 = &off_268773000;
    if (v11)
    {
      re::introspect<re::AudioFileAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AudioFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAsset>, 0);
      mach_port_name_t v4 = &off_268773000;
    }
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)a2 + 1);
  objc_storeStrong((id *)v7, *(id *)v8);
  objc_storeStrong((id *)(v7 + 8), *(id *)(v8 + 8));
  objc_storeStrong((id *)(v7 + 16), *(id *)(v8 + 16));
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  __buf[0] = 0;
  do
    arc4random_buf(__buf, 8uLL);
  while (__buf[0] < 0x3E8uLL);
  *(void *)(v7 + 24) = __buf[0];
  objc_storeStrong((id *)(v7 + 32), *(id *)(v8 + 32));
  if (*(void *)(v8 + 72))
  {
    uint64_t Detached = re::DataSeekableInputStream::CreateDetached((id *)(v8 + 48));
    re::DataSeekableInputStream::operator=(v7 + 48, Detached);
    uint64_t v10 = *(void *)(v8 + 160);
  }
  else
  {
    id v15 = 0;
    re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)__buf, &v15, 0, 0);
    re::DataSeekableInputStream::operator=(v7 + 48, (uint64_t)__buf);
    __buf[0] = &unk_26E714530;

    __buf[0] = &unk_26E7144B8;
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v17);

    uint64_t v10 = 0;
  }
  *(void *)(v7 + 160) = v10;
}

uint64_t *re::AudioFileAsset::assetType(re::AudioFileAsset *this)
{
  {
    re::AudioFileAsset::assetType(void)::type = (uint64_t)"AudioFile";
    qword_26879E760 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AudioFileAsset::assetType(void)::type);
  }
  return &re::AudioFileAsset::assetType(void)::type;
}

void *re::AudioFileAsset::supportedExtensions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  do
    uint64_t result = re::DynamicArray<re::TransitionCondition *>::add((void *)a1, &re::AudioFileAsset::supportedExtensions(void)::supportedExtensions[v3++]);
  while (v3 != 11);
  return result;
}

void sub_2334D5D78(_Unwind_Exception *a1)
{
  re::DynamicArray<unsigned long>::deinit(v1);
  _Unwind_Resume(a1);
}

BOOL re::AudioFileAsset::shouldSkipCompressionOnExport(re::AudioFileAsset *this)
{
  uint64_t v1 = (void *)**((void **)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = [v1 fileFormat];
  BOOL v3 = *(_DWORD *)([v2 streamDescription] + 8) != 1819304813;

  return v3;
}

void sub_2334D5DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL re::AudioFileAsset::prepareToLoadFrom(re::AudioFileAsset *this, const char *__s)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  mach_port_name_t v4 = (re::AudioFileAsset *)((char *)this + 16);
  *(void *)long long buf = __s;
  *(void *)&uint8_t buf[8] = strlen(__s);
  re::DynamicString::operator=(v4, (uint64_t)buf);
  uint64_t v5 = [NSString stringWithUTF8String:__s];
  if (v5)
  {
    uint64_t v6 = [NSURL fileURLWithPath:v5];
    if (v6)
    {
      objc_storeStrong((id *)(*((void *)this + 1) + 32), v6);
      id v17 = 0;
      uint64_t v7 = (void *)[objc_alloc(MEMORY[0x263EF9380]) initForReading:v6 error:&v17];
      uint64_t v8 = (re *)v17;
      uint64_t v9 = v8;
      BOOL v10 = v7 != 0;
      if (v7)
      {
        objc_storeStrong(*((id **)this + 1), v7);
        uint64_t v11 = [v7 processingFormat];
        uint64_t v12 = *((void *)this + 1);
        uint64_t v13 = *(void **)(v12 + 8);
        *(void *)(v12 + 8) = v11;

        *((void *)this + 17) = [v7 length];
      }
      else
      {
        uint64_t v14 = *re::audioLogObjects(v8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          if (*((unsigned char *)this + 24)) {
            uint64_t v16 = (char *)*((void *)this + 4);
          }
          else {
            uint64_t v16 = (char *)this + 25;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v9;
          _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Failed to load audio file at '%s'. Error = %@", buf, 0x16u);
        }
      }
    }
    else
    {
      BOOL v10 = 0;
    }
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_2334D5FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioFileAsset::loadBuffer(re::AudioFileAsset *this, AVAudioPCMBuffer *a2)
{
  mach_port_name_t v4 = a2;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = [(AVAudioPCMBuffer *)v4 format];
    int v8 = re::audio::layoutTagFromFormat(v6, v7);

    if (v8 != -65536)
    {
      objc_storeStrong((id *)(*((void *)this + 1) + 16), a2);
      uint64_t v9 = [(AVAudioPCMBuffer *)v5 format];
      uint64_t v10 = *((void *)this + 1);
      uint64_t v11 = *(void **)(v10 + 8);
      *(void *)(v10 + 8) = v9;

      uint64_t v12 = (re *)[(AVAudioPCMBuffer *)v5 frameLength];
      *((void *)this + 17) = v12;
      if (!v12)
      {
        uint64_t v13 = *re::audioLogObjects(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v14 = 0;
          _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "AudioFileAsset handed AVAudioPCMBuffer with frameLength=0", v14, 2u);
        }
      }
    }
  }
}

void sub_2334D60F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioFileAsset::markAsIncompleteLoad(re::AudioFileAsset *this)
{
  if (*((unsigned char *)this + 153)) {
    *(_WORD *)((char *)this + 153) = 256;
  }
  for (__long long buf = 0; __buf < 0x3E8; arc4random_buf(&__buf, 8uLL))
    ;
  *(void *)(*((void *)this + 1) + 24) = __buf;
}

uint64_t re::AudioFileAsset::createSharableFileBuffer(re::AudioFileAsset::Impl **this, re::SeekableInputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(re::SeekableInputStream *))(*(void *)a2 + 64))(a2);
  uint64_t result = re::AudioFileAsset::Impl::createIOSurface(this[1], v4);
  if (result)
  {
    uint64_t v6 = [*((id *)this[1] + 21) baseAddress];
    if (v6)
    {
      uint64_t v7 = (char *)v6;
      uint64_t result = (*(uint64_t (**)(re::SeekableInputStream *))(*(void *)a2 + 48))(a2);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(re::SeekableInputStream *, void))(*(void *)a2 + 56))(a2, 0);
        if (result)
        {
          uint64_t v14 = &unk_26E714DC0;
          id v15 = a2;
          uint64_t v16 = 0;
          int v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = (*(uint64_t (**)(re::SeekableInputStream *))(*(void *)a2 + 40))(a2);
          char v20 = 0;
          uint64_t Bytes = re::SeekableInputStreamReaderAdaptor::readBytes((re::SeekableInputStreamReaderAdaptor *)&v14, v7, v4);
          uint64_t v9 = this[1];
          *((void *)v9 + 5) = Bytes;
          xpc_object_t XPCObject = IOSurfaceCreateXPCObject(*((IOSurfaceRef *)v9 + 21));
          uint64_t v11 = this[1];
          uint64_t v12 = (void *)*((void *)v11 + 23);
          *((void *)v11 + 23) = XPCObject;

          if (v17) {
            (*(void (**)(re::SeekableInputStream *))(*(void *)v15 + 24))(v15);
          }
          return 1;
        }
      }
    }
    else
    {
      uint64_t v13 = *re::audioLogObjects(0);
      uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (result)
      {
        LOWORD(v14) = 0;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "[AudioFileAsset] [createSharableFileBuffer] surfaceBaseAddress is nil.", (uint8_t *)&v14, 2u);
        return 0;
      }
    }
  }
  return result;
}

void sub_2334D635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL re::AudioFileAsset::Impl::createIOSurface(re::AudioFileAsset::Impl *this, uint64_t a2)
{
  void v16[2] = *MEMORY[0x263EF8340];
  v15[0] = *MEMORY[0x263F0ED30];
  BOOL v3 = [NSNumber numberWithUnsignedLong:a2];
  v15[1] = *MEMORY[0x263F0EF30];
  v16[0] = v3;
  v16[1] = MEMORY[0x263EFFA80];
  CFDictionaryRef v4 = [NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];

  uint64_t v5 = IOSurfaceCreate(v4);
  if (v5)
  {
    uint64_t v6 = (const void *)objc_msgSend(NSString, "stringWithFormat:", @"%p: %s %llu", v5, "REKit_Audio_Asset:", *((void *)this + 3));
    IOSurfaceSetValue(v5, (CFStringRef)*MEMORY[0x263F0EE28], v6);
    uint64_t v7 = (re *)IOSurfaceSetOwnership();
    mach_error_t v8 = (int)v7;
    if (v7)
    {
      uint64_t v9 = (id)*re::audioLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v14 = mach_error_string(v8);
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "[AudioFileAsset] [createIOSurface] Failed to attribute IOSurface allocation: %s", buf, 0xCu);
      }
    }
    uint64_t v10 = (void *)*((void *)this + 21);
    *((void *)this + 21) = v5;
  }
  else
  {
    uint64_t v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "[AudioFileAsset] [createIOSurface] IOSurfaceCreate returned a NULL surface.", buf, 2u);
    }
  }

  return v5 != 0;
}

void sub_2334D659C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAsset::createSharablePCMBuffer(re::AudioFileAsset *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 1);
  BOOL v3 = (void *)v2[2];
  if (v3)
  {
    CFDictionaryRef v4 = v3;
  }
  else
  {
    if (!*v2 || !v2[1])
    {
      uint64_t v21 = (id)*re::audioLogObjects(this);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        long long v37 = [**((id **)this + 1) url];
        int v38 = [v37 lastPathComponent];
        uint64_t v39 = *(void **)(*((void *)this + 1) + 8);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v45 = (uint64_t)v38;
        __int16 v46 = 2112;
        long long v47 = v39;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "AudioFileAsset::createSharablePCMBuffer Failed to create buffer with audio file (%@) and audioFormat=%@", buf, 0x16u);
      }
      CFDictionaryRef v4 = 0;
      goto LABEL_35;
    }
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    [**((id **)this + 1) setFramePosition:0];
    uint64_t v14 = (re::audio *)objc_msgSend(objc_alloc(MEMORY[0x263EF93B0]), "initWithPCMFormat:frameCapacity:", *(void *)(*((void *)this + 1) + 8), objc_msgSend(**((id **)this + 1), "length"));
    id v15 = (void *)**((void **)this + 1);
    id v43 = 0;
    char v16 = [v15 readIntoBuffer:v14 error:&v43];
    id v17 = v43;
    uint64_t v18 = re::internal::enableSignposts(0, 0);
    if (v18)
    {
      [**((id **)this + 1) length];
      re::audio::pcmBufferSize(v14, v19);
      uint64_t v18 = kdebug_trace();
    }
    if (v16)
    {
      [(re::audio *)v14 setFrameLength:[(re::audio *)v14 frameCapacity]];
      CFDictionaryRef v4 = v14;
    }
    else
    {
      int v33 = (id)*re::audioLogObjects((re *)v18);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = [**((id **)this + 1) url];
        long long v41 = [v40 lastPathComponent];
        id v42 = [v17 description];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v45 = (uint64_t)v41;
        __int16 v46 = 2112;
        long long v47 = v42;
        _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "AudioFileAsset::createSharablePCMBuffer Failed to read audio file into buffer. (%@) %@", buf, 0x16u);
      }
      CFDictionaryRef v4 = 0;
    }

    if (!v4) {
      goto LABEL_35;
    }
  }
  uint64_t v5 = [(re::audio *)v4 format];
  uint64_t v6 = [v5 commonFormat];

  if (v6 != 1)
  {
    char v20 = (id)*re::audioLogObjects(v7);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v35 = [(re::audio *)v4 format];
      uint64_t v36 = [v35 commonFormat];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v45 = v36;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "AudioFileAsset::createSharablePCMBuffer Failed to share buffer with common format %lu", buf, 0xCu);
    }
    goto LABEL_35;
  }
  mach_error_t v8 = [(re::audio *)v4 format];
  if ([v8 channelCount] <= 1)
  {
  }
  else
  {
    uint64_t v9 = [(re::audio *)v4 format];
    int v10 = [v9 isInterleaved];

    if (v10)
    {
      uint64_t v12 = *re::audioLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v13 = "AudioFileAsset::createSharablePCMBuffer Failed to share multichannel buffer.Multichannel buffers must be n"
              "on-interleaved in order to be shared.";
LABEL_38:
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
  }
  if (!re::AudioFileAsset::Impl::createIOSurface(*((re::AudioFileAsset::Impl **)this + 1), 4 * *((void *)this + 17) * [*(id *)(*((void *)this + 1) + 8) channelCount]))goto LABEL_35; {
  uint64_t v22 = [*(id *)(*((void *)this + 1) + 168) baseAddress];
  }
  if (!v22)
  {
    uint64_t v12 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v13 = "[AudioFileAsset] [createSharablePCMBuffer] surfaceBaseAddress is nil.";
      goto LABEL_38;
    }
LABEL_35:
    uint64_t v32 = 0;
    goto LABEL_36;
  }
  long long v23 = v4;
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v25 = [(re::audio *)v23 format];
    BOOL v26 = i < [v25 channelCount];

    if (!v26) {
      break;
    }
    memcpy((void *)(v22 + 4 * [(re::audio *)v23 frameLength] * i), *(const void **)([(re::audio *)v23 floatChannelData] + 8 * i), 4 * [(re::audio *)v23 frameLength]);
  }

  xpc_object_t XPCObject = IOSurfaceCreateXPCObject(*(IOSurfaceRef *)(*((void *)this + 1) + 168));
  uint64_t v28 = *((void *)this + 1);
  char v29 = *(void **)(v28 + 176);
  *(void *)(v28 + 176) = XPCObject;

  uint64_t v30 = *((void *)this + 1);
  uint64_t v31 = *(void **)(v30 + 16);
  *(void *)(v30 + 16) = 0;

  uint64_t v32 = 1;
  CFDictionaryRef v4 = v23;
LABEL_36:

  return v32;
}

void sub_2334D6B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioFileAsset::completeLoad(re::AudioFileAsset *this, AudioSceneService *a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 153)) {
    return;
  }
  *(_WORD *)((char *)this + 153) = 1;
  if (a2)
  {
    LOWORD(v76) = 0;
    BYTE2(v76) = 0;
    *(void *)((char *)&v76 + 4) = 0;
    long long v77 = xmmword_234377550;
    v78[0] = 0;
    char v82 = 0;
    char v84 = 0;
    int CanStreamAudioFiles = re::audio::CanStreamAudioFiles(this);
    if (CanStreamAudioFiles) {
      LOBYTE(CanStreamAudioFiles) = *((unsigned char *)this + 100) != 0;
    }
    LOBYTE(v76) = CanStreamAudioFiles;
    uint64_t v5 = *((void *)this + 14);
    *(void *)((char *)&v76 + 4) = *((void *)this + 13);
    *(void *)&long long v77 = v5;
    re::Optional<re::DynamicString>::operator=(v78, (unsigned __int8 *)this + 56);
    BYTE1(v76) = *((_DWORD *)this + 24) == -1;
    *((void *)&v77 + 1) = *((void *)this + 15);
    id location = 0;
    int v75 = 0;
    uint64_t v6 = re::AudioFileAsset::audioFormat(this);
    uint64_t v7 = [v6 channelLayout];
    unint64_t v73 = v7;

    if (re::audio::CanStreamAudioFiles(v8)
      && *((unsigned char *)this + 100)
      && (uint64_t v9 = (void *)**((void **)this + 1)) != 0)
    {
      id v10 = v9;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        id v12 = **((id **)this + 1);
        unint64_t v13 = [v12 getReaderFileLength];
        unint64_t v14 = v13 / 0x64;
        if (v13 / 0x64 <= 0xC350) {
          unint64_t v14 = 50000;
        }
        if ((*((_DWORD *)this + 33) + 1) <= 1) {
          v14 += v13;
        }
        *((void *)this + 20) = v14;
      }
      else
      {
        BOOL v26 = [MEMORY[0x263F08850] defaultManager];
        id v27 = **((id **)this + 1);
        uint64_t v28 = [v27 url];
        char v29 = [v28 path];
        uint64_t v30 = [v26 attributesOfItemAtPath:v29 error:0];

        unint64_t v31 = [v30 fileSize];
        unint64_t v32 = v31 / 0x64;
        if (v31 / 0x64 <= 0xC350) {
          unint64_t v32 = 50000;
        }
        if ((*((_DWORD *)this + 33) + 1) <= 1) {
          v32 += v31;
        }
        *((void *)this + 20) = v32;
      }
    }
    else
    {
      id v15 = re::AudioFileAsset::audioFormat(this);
      BOOL v16 = v15 == 0;

      if (v16)
      {
        uint64_t v25 = *re::audioLogObjects(v17);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAsset] Cannot get bytesPerFrame from audio asset because audioFormat() is nil", buf, 2u);
        }
      }
      else
      {
        uint64_t v18 = re::AudioFileAsset::audioFormat(this);
        uint64_t v19 = *(unsigned int *)([v18 streamDescription] + 24);

        unint64_t v20 = *((void *)this + 17) * v19;
        unint64_t v21 = v20 / 0x64;
        if (v20 / 0x64 <= 0xC350) {
          unint64_t v21 = 50000;
        }
        unint64_t v22 = v21 + v20;
        if ((*((_DWORD *)this + 33) + 1) > 1) {
          unint64_t v22 = v21;
        }
        *((void *)this + 20) = v22;
      }
    }
    uint64_t v33 = *((void *)this + 1);
    if (!*(void *)v33)
    {
      if (*(void *)(v33 + 176))
      {
        unsigned int v35 = [*(id *)(v33 + 8) channelCount];
        uint64_t v36 = *((void *)this + 17);
        IOSurfaceRef v37 = IOSurfaceLookupFromXPCObject(*(xpc_object_t *)(*((void *)this + 1) + 176));
        uint64_t v38 = *((void *)this + 1);
        uint64_t v39 = *(void **)(v38 + 168);
        *(void *)(v38 + 168) = v37;

        AllocSize = (re *)IOSurfaceGetAllocSize(*(IOSurfaceRef *)(*((void *)this + 1) + 168));
        long long v41 = AllocSize;
        unint64_t v42 = 4 * v35 * v36;
        if ((unint64_t)AllocSize >= v42)
        {
          long long v59 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((void *)this + 1) + 168)) length:v42 freeWhenDone:0];
          id v72 = v59;
          objc_setAssociatedObject(v59, "FileAssetBufferKey", *(id *)(*((void *)this + 1) + 168), (void *)0x301);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<0ul,NSData * {__strong},NSData * {__strong}&>((uint64_t)&location, &location, &v72);
          uint64_t v60 = *(void *)(*((void *)this + 1) + 24);
          uint64_t v61 = re::AudioFileAsset::audioFormat(this);
          id v62 = (std::__shared_weak_count *)operator new(0xA0uLL);
          v62->__shared_owners_ = 0;
          v62->__shared_weak_owners_ = 0;
          v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6D5F88;
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v85, (uint64_t)&location);
          *(_OWORD *)long long buf = v76;
          *(_OWORD *)&uint8_t buf[16] = v77;
          uint8_t buf[32] = v78[0];
          if (v78[0]) {
            re::DynamicString::DynamicString((re::DynamicString *)&v89, (const re::DynamicString *)&v79);
          }
          char v91 = v82;
          if (v82) {
            int v92 = v83;
          }
          char v93 = v84;
          re::AudioAssetPayload::AudioAssetPayload((uint64_t)&v62[1], (uint64_t)&v85, (uint64_t)buf, *((_DWORD *)this + 33), v60, 0, v61);
          if (buf[32] && (void)v89)
          {
            if (BYTE8(v89)) {
              (*(void (**)(void, void))(*(void *)v89 + 40))(v89, v90);
            }
            long long v89 = 0u;
            long long v90 = 0u;
          }
          if (v86 != -1) {
            ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v86])(&v87, &v85);
          }

          uint64_t v63 = *(void *)(*((void *)this + 1) + 24);
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)long long buf = v63;
          *(void *)&uint8_t buf[8] = v62 + 1;
          *(void *)&uint8_t buf[16] = v62;
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:nn180100](v62);
          (*((void (**)(AudioSceneService *, unsigned char *))a2->var0 + 22))(a2, buf);
          if (*(void *)&buf[16]) {
            std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&buf[16]);
          }
          std::__shared_weak_count::__release_shared[abi:nn180100](v62);
        }
        else
        {
          id v43 = (id)*re::audioLogObjects(AllocSize);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            if (*((unsigned char *)this + 24)) {
              unint64_t v69 = (char *)*((void *)this + 4);
            }
            else {
              unint64_t v69 = (char *)this + 25;
            }
            int v70 = [*(id *)(*((void *)this + 1) + 8) channelCount];
            uint64_t v71 = *((void *)this + 17);
            *(_DWORD *)long long buf = 136315906;
            *(void *)&uint8_t buf[4] = v69;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v41;
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = v70;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v71;
            _os_log_error_impl(&dword_233120000, v43, OS_LOG_TYPE_ERROR, "AudioFileAsset::completeLoad buffer for asset '%s' is %lu bytes which is smaller than expected for %u channels, %llu frames of float32 pcm", buf, 0x26u);
          }
        }
        goto LABEL_88;
      }
      uint64_t v48 = *(void **)(v33 + 184);
      if (v48)
      {
        IOSurfaceRef v49 = IOSurfaceLookupFromXPCObject(v48);
        uint64_t v50 = *((void *)this + 1);
        int v51 = *(void **)(v50 + 168);
        *(void *)(v50 + 168) = v49;

        uint64_t v52 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((void *)this + 1) + 168)) length:*(void *)(*((void *)this + 1) + 40) freeWhenDone:0];
        id v72 = v52;
        objc_setAssociatedObject(v52, "FileAssetBufferKey", *(id *)(*((void *)this + 1) + 168), (void *)0x301);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<0ul,NSData * {__strong},NSData * {__strong}&>((uint64_t)&location, &location, &v72);
        *(void *)long long buf = *(void *)(*((void *)this + 1) + 24);
        std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(&v85, (uint64_t)&location, (uint64_t)&v76, (int *)this + 33, (uint64_t *)buf, &v73);
        uint64_t v53 = *(void *)(*((void *)this + 1) + 24);
        uint64_t v54 = v85;
        long long v55 = v86;
        if (v86)
        {
          atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)long long buf = v53;
          *(void *)&uint8_t buf[8] = v54;
          *(void *)&uint8_t buf[16] = v55;
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:nn180100](v55);
        }
        else
        {
          *(void *)long long buf = v53;
          *(void *)&uint8_t buf[8] = v85;
          *(void *)&uint8_t buf[16] = 0;
        }
        (*((void (**)(AudioSceneService *, unsigned char *))a2->var0 + 22))(a2, buf);
        if (*(void *)&buf[16]) {
          std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&buf[16]);
        }
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v55);
        }

        goto LABEL_88;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<1ul,AVAudioPCMBuffer * {__strong},AVAudioPCMBuffer * {__strong}&>((uint64_t)&location, &location, (id *)(v33 + 16));
      *(void *)long long buf = *(void *)(*((void *)this + 1) + 24);
      std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,void>(&v85, (uint64_t)&location, (uint64_t)&v76, (int *)this + 33, (uint64_t *)buf);
      uint64_t v67 = *(void *)(*((void *)this + 1) + 24);
      uint64_t v68 = v85;
      id v58 = v86;
      if (v86)
      {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)long long buf = v67;
        *(void *)&uint8_t buf[8] = v68;
        *(void *)&uint8_t buf[16] = v58;
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:nn180100](v58);
      }
      else
      {
        *(void *)long long buf = v67;
        *(void *)&uint8_t buf[8] = v85;
        *(void *)&uint8_t buf[16] = 0;
      }
      (*((void (**)(AudioSceneService *, unsigned char *))a2->var0 + 22))(a2, buf);
      goto LABEL_52;
    }
    int v34 = *(void **)(v33 + 32);
    if (v34)
    {
      if (v75 != -1)
      {
        if (v75 == 2)
        {
          objc_storeStrong(&location, v34);
LABEL_48:
          *(void *)long long buf = *(void *)(*((void *)this + 1) + 24);
          std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(&v85, (uint64_t)&location, (uint64_t)&v76, (int *)this + 33, (uint64_t *)buf, &v73);
          uint64_t v56 = *(void *)(*((void *)this + 1) + 24);
          uint64_t v57 = v85;
          id v58 = v86;
          if (v86)
          {
            atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            *(void *)long long buf = v56;
            *(void *)&uint8_t buf[8] = v57;
            *(void *)&uint8_t buf[16] = v58;
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:nn180100](v58);
          }
          else
          {
            *(void *)long long buf = v56;
            *(void *)&uint8_t buf[8] = v85;
            *(void *)&uint8_t buf[16] = 0;
          }
          (*((void (**)(AudioSceneService *, unsigned char *))a2->var0 + 22))(a2, buf);
LABEL_52:
          if (*(void *)&buf[16]) {
            std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&buf[16]);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v58);
          }
LABEL_88:

          if (v75 != -1) {
            ((void (*)(unsigned char *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v75])(buf, &location);
          }
          if (v78[0] && v79 && (v80 & 1) != 0) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 40))(v79, v81);
          }
          return;
        }
        ((void (*)(unsigned char *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v75])(buf, &location);
        int v34 = *(void **)(v33 + 32);
      }
      int v75 = -1;
      id location = v34;
      int v75 = 2;
      goto LABEL_48;
    }
    id v44 = *(id *)v33;
    uint64_t v45 = [v44 getBackingData];
    __int16 v46 = v45;
    if (v75 != -1)
    {
      if (!v75)
      {
        id v47 = location;
        id location = v45;

LABEL_72:
        *(void *)long long buf = *(void *)(*((void *)this + 1) + 24);
        std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(&v85, (uint64_t)&location, (uint64_t)&v76, (int *)this + 33, (uint64_t *)buf, &v73);
        uint64_t v64 = *(void *)(*((void *)this + 1) + 24);
        uint64_t v65 = v85;
        unsigned int v66 = v86;
        if (v86)
        {
          atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)long long buf = v64;
          *(void *)&uint8_t buf[8] = v65;
          *(void *)&uint8_t buf[16] = v66;
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:nn180100](v66);
        }
        else
        {
          *(void *)long long buf = v64;
          *(void *)&uint8_t buf[8] = v85;
          *(void *)&uint8_t buf[16] = 0;
        }
        (*((void (**)(AudioSceneService *, unsigned char *))a2->var0 + 22))(a2, buf);
        if (*(void *)&buf[16]) {
          std::__shared_weak_count::__release_shared[abi:nn180100](*(std::__shared_weak_count **)&buf[16]);
        }
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v66);
        }

        goto LABEL_88;
      }
      ((void (*)(unsigned char *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v75])(buf, &location);
    }
    id location = v46;
    int v75 = 0;
    goto LABEL_72;
  }
  long long v23 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    if (*((unsigned char *)this + 24)) {
      uint64_t v24 = (char *)*((void *)this + 4);
    }
    else {
      uint64_t v24 = (char *)this + 25;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "AudioFileAsset::completeLoad with no AudioSceneService '%s'", buf, 0xCu);
  }
}

void sub_2334D76C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:nn180100](a31);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v32);
  }

  if (a14 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[a14])(&a10, &a12);
  }
  if (a19 && a20 && (a21 & 1) != 0) {
    (*(void (**)(void))(*(void *)a20 + 40))();
  }
  _Unwind_Resume(a1);
}

id re::AudioFileAsset::audioFormat(re::AudioFileAsset *this)
{
  id v3 = *(id *)(*((void *)this + 1) + 8);
  if (v3)
  {
    CFDictionaryRef v4 = (void *)MEMORY[0x263EF9328];
    uint64_t v5 = *((unsigned int *)this + 32);
    if (v5 == -65536) {
      uint64_t v5 = re::audio::layoutTagFromFormat(*(re::audio **)(*((void *)this + 1) + 8), v2);
    }
    uint64_t v6 = [v4 layoutWithLayoutTag:v5];
    uint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x263EF9388]), "initWithStreamDescription:channelLayout:", objc_msgSend(v3, "streamDescription"), v6);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_2334D79E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::AudioFileAsset::sharableFileBuffer(re::AudioFileAsset *this)
{
  return *(id *)(*((void *)this + 1) + 184);
}

id re::AudioFileAsset::pcmBuffer(re::AudioFileAsset *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    id v3 = v2;
  }
  else if (*(void *)(v1 + 176))
  {
    id v5 = *(id *)(v1 + 8);
    uint64_t v6 = *((void *)this + 17);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((void *)this + 1) + 168));
    mach_error_t v8 = (re *)[v5 commonFormat];
    if (v8 == (re *)1
      && ([v5 channelCount] < 2
       || (mach_error_t v8 = (re *)[v5 isInterleaved], !v8)))
    {
      id v3 = (id)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v5 frameCapacity:v6];
      if (v3)
      {
        int v10 = 0;
        for (unint64_t i = 0; i < [v5 channelCount]; ++i)
        {
          memcpy(*(void **)([v3 floatChannelData] + 8 * i), &BaseAddress[4 * v10], 4 * v6);
          v10 += v6;
        }
        objc_msgSend(v3, "setFrameLength:", objc_msgSend(v3, "frameCapacity"));
      }
    }
    else
    {
      uint64_t v9 = *re::audioLogObjects(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unint64_t v13 = 0;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "can only create non-interleaved float AVAudioPCMBuffer from bytes", v13, 2u);
      }
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_2334D7BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id re::AudioFileAsset::localFileURL(re::AudioFileAsset *this)
{
  return *(id *)(*((void *)this + 1) + 32);
}

uint64_t re::AudioFileAsset::setMappedData(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v4 = *(void ***)(a1 + 8);
  id v5 = *v4;
  *CFDictionaryRef v4 = 0;

  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(v6 + 8);
  *(void *)(v6 + 8) = 0;

  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = 0;

  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void **)(v10 + 32);
  *(void *)(v10 + 32) = 0;

  uint64_t v12 = *(void *)(a1 + 8) + 48;
  return re::DataSeekableInputStream::operator=(v12, a2);
}

BOOL re::AudioFileAsset::makeMutableAndSetMappedData(re *a1, re::internal::AssetEntry **a2, void *a3)
{
  id v3 = a2[1];
  if (!v3 || (unsigned int v4 = atomic_load((unsigned int *)v3 + 176), v4 != 2))
  {
    uint64_t v19 = *re::audioLogObjects(a1);
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v20 = "AudioFileAsset::makeMutableAndSetData failing as it requires the handle to be loaded.";
    goto LABEL_18;
  }
  uint64_t v6 = a2[1];
  if (!v6)
  {
    uint64_t v10 = (uint64_t)re::AudioFileAsset::assetType(a1);
    goto LABEL_16;
  }
  uint64_t v9 = (uint64_t *)*((void *)v6 + 33);
  uint64_t v10 = (uint64_t)re::AudioFileAsset::assetType(a1);
  if (v9 != &re::AudioFileAsset::assetType(void)::type)
  {
LABEL_16:
    uint64_t v19 = *re::audioLogObjects((re *)v10);
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v20 = "AudioFileAsset::makeMutableAndSetData failing as it requires the handle to wrap an AudioFileAsset.";
    goto LABEL_18;
  }
  uint64_t v11 = a2[1];
  if (!v11
    || (uint64_t v10 = *((void *)v11 + 3)) == 0
    || (uint64_t v10 = re::AssetManager::convertToMutable((os_unfair_lock_s *)v10, (const re::AssetHandle *)a2), (v10 & 1) == 0))
  {
    uint64_t v19 = *re::audioLogObjects((re *)v10);
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v20 = "AudioFileAsset::makeMutableAndSetData failing as it could not convert the handle to mutable.";
LABEL_18:
    _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, v20, buf, 2u);
    return 0;
  }
  uint64_t v12 = a2[1];
  if (v12)
  {
    unsigned int v13 = atomic_load((unsigned int *)v12 + 176);
    if (v13 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
      ++*((_DWORD *)a2[1] + 65);
      uint64_t v14 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)a2);
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = a3;
        id v21 = v16;
        re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)buf, &v21, 0, 0);

        re::AudioFileAsset::setMappedData(v15, (uint64_t)buf);
        re::AudioFileAssetLoader::createRuntimeData(a1, v15);
        *(void *)long long buf = &unk_26E714530;

        *(void *)long long buf = &unk_26E7144B8;
        re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v23);

        id v17 = a2[1];
        *((unsigned char *)v17 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v17);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(a2[1]);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
  return 1;
}

void sub_2334D7EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(v24 + 32);
  _Unwind_Resume(a1);
}

uint64_t re::AudioAssetPayload::AudioAssetPayload(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, void *a7)
{
  id v13 = a6;
  id v14 = a7;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  long long v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 32) = v15;
  int v16 = *(unsigned __int8 *)(a3 + 32);
  *(unsigned char *)(a1 + 48) = v16;
  if (v16) {
    re::DynamicString::DynamicString((re::DynamicString *)(a1 + 56), (const re::DynamicString *)(a3 + 40));
  }
  int v17 = *(unsigned __int8 *)(a3 + 72);
  *(unsigned char *)(a1 + 88) = v17;
  if (v17) {
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a3 + 76);
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a3 + 80);
  *(_DWORD *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = v13;
  *(void *)(a1 + 128) = v14;
  return a1;
}

void sub_2334D7FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

re::DynamicString *re::AudioFileAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::AudioFileAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  id v3 = (re::AudioFileAsset *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(void *)a2 = 0x100000001;
  re::AudioFileAsset::assetType(v3);
  v5[0] = re::AudioFileAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::AudioFileAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

char **re::AudioFileAssetCompiler::assetIntrospectionType(re::AudioFileAssetCompiler *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::AudioFileAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AudioFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[316];
}

__n128 re::AudioFileAssetCompiler::compile@<Q0>(re::AudioFileAssetCompiler *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = re::globalAllocators(this);
  uint64_t v8 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 168, 8);
  uint64_t v9 = re::AudioFileAsset::AudioFileAsset(v8);
  if (re::AudioFileAsset::prepareToLoadFrom(v9, a2))
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  else
  {
    uint64_t v11 = re::internal::destroyPersistent<re::AudioFileAsset>(v8);
    __n128 result = v14;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 100;
    *(void *)(a3 + 16) = re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a3 + 24) = result;
    *(void *)(a3 + 40) = v12;
    *(void *)(a3 + 48) = v13;
  }
  return result;
}

re *re::internal::destroyPersistent<re::AudioFileAsset>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::AudioFileAsset::~AudioFileAsset(v1);
    int v3 = *(uint64_t (**)(uint64_t, re::AudioFileAsset *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

re *re::AudioFileAssetCompiler::deleteAsset(re::AudioFileAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::AudioFileAsset>(a2);
}

void re::AudioFileAssetCompiler::~AudioFileAssetCompiler(re::AudioFileAssetCompiler *this)
{
}

re::AudioFileAsset::Impl *re::AudioFileAsset::Impl::Impl(re::AudioFileAsset::Impl *this)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  id v3 = 0;
  re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)this + 48, &v3, 0, 0);

  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  return this;
}

void re::DataSeekableInputStream::~DataSeekableInputStream(id *this)
{
  *this = &unk_26E714530;

  *this = &unk_26E7144B8;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)(this + 4));
}

{
  uint64_t vars8;

  *this = &unk_26E714530;

  *this = &unk_26E7144B8;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)(this + 4));
  JUMPOUT(0x237DBCBD0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2334D8364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8nn180100IZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSA_SD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, id *a3)
{
  id result = *a3;
  *a2 = result;
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSA_SD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, id *a3)
{
  id result = *a3;
  *a2 = result;
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSA_SD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, id *a3)
{
  id result = *a3;
  *a2 = result;
  return result;
}

uint64_t std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(void *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, void **a6)
{
  uint64_t v12 = operator new(0xA0uLL);
  v12[1] = 0;
  char v12[2] = 0;
  void *v12 = &unk_26E6D5F88;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v24, a2);
  long long v13 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v13;
  char v18 = *(unsigned char *)(a3 + 32);
  if (v18) {
    re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)(a3 + 40));
  }
  if (*(unsigned char *)(a3 + 72)) {
    int v22 = *(_DWORD *)(a3 + 76);
  }
  char v23 = *(unsigned char *)(a3 + 80);
  uint64_t result = re::AudioAssetPayload::AudioAssetPayload((uint64_t)(v12 + 3), (uint64_t)v24, (uint64_t)v17, *a4, *a5, *a6, 0);
  if (v18)
  {
    uint64_t result = v19;
    if ((void)v19)
    {
      if (BYTE8(v19)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v19 + 40))(v19, v20, v15, v16);
      }
      long long v19 = 0u;
      long long v20 = 0u;
    }
  }
  if (v25 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v25])(&v26, v24);
  }
  *a1 = v12 + 3;
  a1[1] = v12;
  return result;
}

void sub_2334D8614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,int a22)
{
  if (a13 && a14 && (a15 & 1) != 0) {
    (*(void (**)(void))(*(void *)a14 + 40))();
  }
  if (a22 != -1) {
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[a22])(v23 - 65, &a20);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<re::AudioAssetPayload>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6D5F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::AudioAssetPayload>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E6D5F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::AudioAssetPayload>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    v2.n128_f64[0] = re::DynamicString::deinit((re::DynamicString *)(a1 + 80));
  }
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v3])(&v4, a1 + 24, v2);
  }
  *(_DWORD *)(a1 + 32) = -1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<0ul,NSData * {__strong},NSData * {__strong}&>(uint64_t a1, id *location, id *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != -1)
  {
    if (!v5)
    {
      objc_storeStrong(location, *a3);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v5])(&v6, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)a1 = *a3;
  *(_DWORD *)(a1 + 8) = 0;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<1ul,AVAudioPCMBuffer * {__strong},AVAudioPCMBuffer * {__strong}&>(uint64_t a1, id *location, id *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      objc_storeStrong(location, *a3);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v5])(&v6, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)a1 = *a3;
  *(_DWORD *)(a1 + 8) = 1;
}

uint64_t std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,void>(void *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5)
{
  uint64_t v10 = operator new(0xA0uLL);
  v10[1] = 0;
  void v10[2] = 0;
  void *v10 = &unk_26E6D5F88;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v22, a2);
  long long v11 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v11;
  char v16 = *(unsigned char *)(a3 + 32);
  if (v16) {
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)(a3 + 40));
  }
  if (*(unsigned char *)(a3 + 72)) {
    int v20 = *(_DWORD *)(a3 + 76);
  }
  char v21 = *(unsigned char *)(a3 + 80);
  uint64_t result = re::AudioAssetPayload::AudioAssetPayload((uint64_t)(v10 + 3), (uint64_t)v22, (uint64_t)v15, *a4, *a5, 0, 0);
  if (v16)
  {
    uint64_t result = v17;
    if ((void)v17)
    {
      if (BYTE8(v17)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v17 + 40))(v17, v18, v13, v14);
      }
      long long v17 = 0u;
      long long v18 = 0u;
    }
  }
  if (v23 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v23])(&v24, v22);
  }
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_2334D89F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16)
{
  if (a13 && a14 && (a15 & 1) != 0) {
    (*(void (**)(void))(*(void *)a14 + 40))();
  }
  uint64_t v19 = *(unsigned int *)(v17 - 64);
  if (v19 != -1) {
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v19])(v17 - 49, v17 - 72);
  }
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t re::AssetHandle::loadedAsset<re::AudioFileAsset>(re::AudioFileAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  re::AudioFileAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::AudioFileAsset::assetType(void)::type, 1);
}

void sub_2334D8D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334D8FFC(_Unwind_Exception *a1)
{
  char v6 = v5;

  _Unwind_Resume(a1);
}

id re::anonymous namespace'::decodeError(re::_anonymous_namespace_ *this, NSString *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __n128 v2 = this;
  uint64_t v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543362;
    long long v11 = v2;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "DrawableQueue payload decode error: %{public}@", buf, 0xCu);
  }
  char v4 = (void *)MEMORY[0x263F087E8];
  uint64_t v8 = *MEMORY[0x263F07F80];
  uint64_t v9 = v2;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  char v6 = [v4 errorWithDomain:*MEMORY[0x263F07F70] code:4864 userInfo:v5];

  return v6;
}

{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v12 = *MEMORY[0x263EF8340];
  __n128 v2 = this;
  uint64_t v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543362;
    long long v11 = v2;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Mesh payload decode error: %{public}@", buf, 0xCu);
  }
  char v4 = (void *)MEMORY[0x263F087E8];
  uint64_t v8 = *MEMORY[0x263F07F80];
  uint64_t v9 = v2;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  char v6 = [v4 errorWithDomain:*MEMORY[0x263F07F70] code:4864 userInfo:v5];

  return v6;
}

{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v12 = *MEMORY[0x263EF8340];
  __n128 v2 = this;
  uint64_t v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543362;
    long long v11 = v2;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Direct Resource payload decode error: %{public}@", buf, 0xCu);
  }
  char v4 = (void *)MEMORY[0x263F087E8];
  uint64_t v8 = *MEMORY[0x263F07F80];
  uint64_t v9 = v2;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  char v6 = [v4 errorWithDomain:*MEMORY[0x263F07F70] code:4864 userInfo:v5];

  return v6;
}

{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v12 = *MEMORY[0x263EF8340];
  __n128 v2 = this;
  uint64_t v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543362;
    long long v11 = v2;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Mesh payload decode error: %{public}@", buf, 0xCu);
  }
  char v4 = (void *)MEMORY[0x263F087E8];
  uint64_t v8 = *MEMORY[0x263F07F80];
  uint64_t v9 = v2;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  char v6 = [v4 errorWithDomain:*MEMORY[0x263F07F70] code:4864 userInfo:v5];

  return v6;
}

void sub_2334D917C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334D931C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::DrawableQueuePayload::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, REDrawableQueuePayload **a9@<X8>)
{
  v26[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v19, v18);
  if (a5)
  {
    int v20 = v19;
    uint64_t v21 = a5;
    do
    {
      uint64_t v22 = *a4++;
      *(void *)int v20 = v22;
      v20 += 8;
      --v21;
    }
    while (v21);
  }
  int v23 = [REDrawableQueuePayload alloc];
  char v24 = [MEMORY[0x263EFF8C0] arrayWithObjects:v19 count:a5];
  int v25 = [(REDrawableQueuePayload *)v23 initWithWidth:a1 height:a2 pixelFormat:a3 textureHandles:v24 allowPixelFormatConversion:a6 machSemaphore:a7 queueStateShmem:a8 queueStateLength:336];
  *a9 = v25;
}

void sub_2334D95A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::DrawableQueuePayload::drawableCount(id *this)
{
  uint64_t v1 = [*this textureHandles];
  uint64_t v2 = [v1 count];

  return v2;
}

void sub_2334D95F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::DrawableQueuePayload::textureHandle(id *this, int a2)
{
  uint64_t v3 = [*this textureHandles];
  char v4 = [v3 objectAtIndexedSubscript:a2];

  return v4;
}

void sub_2334D9650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *re::DrawableQueuePayload::mapQueueStateShmem(id *this)
{
  region = 0;
  uint64_t v1 = [*this queueStateShmem];
  size_t v2 = xpc_shmem_map(v1, &region);

  if (!v2) {
    return 0;
  }
  if (v2 > 0x14F) {
    return region;
  }
  re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "length >= sizeof(SharedRingBuffer)", "mapQueueStateShmem", 298);
  uint64_t result = (void *)_os_crash();
  __break(1u);
  return result;
}

void sub_2334D96FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::introspect_AcousticMeshAssetMeshType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A568, memory_order_acquire) & 1) == 0)
  {
    char v24 = (re *)__cxa_guard_acquire(&qword_26AF7A568);
    if (v24)
    {
      int v25 = re::introspectionAllocator(v24);
      char v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)char v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Empty";
      qword_26AF7A5A8 = (uint64_t)v26;
      id v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + 16) = "GeomMesh";
      qword_26AF7A5B0 = v28;
      __cxa_guard_release(&qword_26AF7A568);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A570, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A570))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7A5B8, "AcousticMeshAssetMeshType", 4, 4, 1, 1);
    qword_26AF7A5B8 = (uint64_t)&unk_26E715E00;
    qword_26AF7A5F8 = (uint64_t)&re::introspect_AcousticMeshAssetMeshType(BOOL)::enumTable;
    dword_26AF7A5C8 = 9;
    __cxa_guard_release(&qword_26AF7A570);
  }
  if ((_MergedGlobals_84 & 1) == 0)
  {
    _MergedGlobals_84 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7A5B8, a2);
    uint64_t v30 = 0x7DF6D808D13ABC8ELL;
    unint64_t v31 = "AcousticMeshAssetMeshType";
    v35[0] = 208862;
    v35[1] = "int";
    size_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v35);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v35);
      char v4 = (unsigned int *)qword_26AF7A5F8;
      v34[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v35, &v30, 1, 1, (uint64_t)v34);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v33.var0 = 2 * v10;
            v33.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v35, v14, &v33);
            re::StringID::destroyString((re::StringID *)&v33);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    int v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v33.var0 = 2 * v18;
              v33.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v35, v22, &v33);
              re::StringID::destroyString((re::StringID *)&v33);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v35, v23);
      xmmword_26AF7A5D8 = v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v35);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AcousticMeshAssetMeshType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void sub_2334D9AC0(_Unwind_Exception *a1)
{
}

void *re::allocInfo_AcousticMeshAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A578, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A578))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A600, "AcousticMeshAsset");
    __cxa_guard_release(&qword_26AF7A578);
  }
  return &unk_26AF7A600;
}

void re::initInfo_AcousticMeshAsset(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x7370B71E3F67FEC0;
  v9[1] = "AcousticMeshAsset";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A588, memory_order_acquire) & 1) == 0)
  {
    char v4 = (re *)__cxa_guard_acquire(&qword_26AF7A588);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_AcousticMeshAssetMeshType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "meshType";
      *(void *)(v7 + 16) = &qword_26AF7A5B8;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0x800000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7A580 = v7;
      __cxa_guard_release(&qword_26AF7A588);
    }
  }
  *((void *)this + 2) = 0x2F800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7A580;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AcousticMeshAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AcousticMeshAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AcousticMeshAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AcousticMeshAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void sub_2334D9D38(_Unwind_Exception *a1)
{
}

re::GeomMesh *re::internal::defaultConstruct<re::AcousticMeshAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E6D6118;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = re::GeomMesh::GeomMesh((re::GeomMesh *)(a3 + 16), 0);
  *(void *)(a3 + 752) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AcousticMeshAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a3 + 16));
}

re::GeomMesh *re::internal::defaultConstructV2<re::AcousticMeshAsset>(uint64_t a1)
{
  *(void *)a1 = &unk_26E6D6118;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t result = re::GeomMesh::GeomMesh((re::GeomMesh *)(a1 + 16), 0);
  *(void *)(a1 + 752) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AcousticMeshAsset>(uint64_t a1)
{
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 16));
}

void re::AcousticMeshAsset::~AcousticMeshAsset(id *this)
{
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(this + 2));
}

{
  uint64_t vars8;

  re::GeomMesh::~GeomMesh((re::GeomMesh *)(this + 2));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AcousticMeshAsset::assetType(re::AcousticMeshAsset *this)
{
  {
    re::AcousticMeshAsset::assetType(void)::type = (uint64_t)"AcousticMesh";
    qword_26879E780 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AcousticMeshAsset::assetType(void)::type);
  }
  return &re::AcousticMeshAsset::assetType(void)::type;
}

re::DynamicString *re::AcousticMeshAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::AcousticMeshAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = (re::AcousticMeshAsset *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(void *)a2 = 0x100000001;
  re::AcousticMeshAsset::assetType(v3);
  v5[0] = re::AcousticMeshAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::AcousticMeshAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

uint64_t re::AcousticMeshAssetCompiler::assetIntrospectionType(re::AcousticMeshAssetCompiler *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A5A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A5A0))
  {
    qword_26AF7A598 = re::internal::getOrCreateInfo((re::internal *)"AcousticMeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_AcousticMeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticMeshAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7A590, 0);
    __cxa_guard_release(&qword_26AF7A5A0);
  }
  return qword_26AF7A598;
}

void re::AcousticMeshAssetCompiler::getSupportedExtensions(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

__n128 re::AcousticMeshAssetCompiler::compile@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = v6;
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 100;
  *(void *)(a2 + 16) = re::AssetErrorCategory(void)::instance;
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  return result;
}

re *re::AcousticMeshAssetCompiler::deleteAsset(re::AcousticMeshAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::AcousticMeshAsset>(a2);
}

re *re::internal::destroyPersistent<re::AcousticMeshAsset>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];

    re::GeomMesh::~GeomMesh((re *)((char *)v1 + 16));
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

void re::AcousticMeshAssetLoader::~AcousticMeshAssetLoader(re::AcousticMeshAssetLoader *this)
{
}

uint64_t re::AcousticMeshAssetLoader::registerAsset()
{
  return 0;
}

uint64_t re::AcousticMeshAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return re::internal::writeGeomMeshToStream(a3 + 16, a2);
  }
  return 0;
}

BOOL re::AcousticMeshAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, const char *a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (!v3) {
    return 1;
  }
  if (v3 != 1) {
    return 0;
  }
  if (a3)
  {
    uint64_t v9 = &unk_26E714DC0;
    long long v10 = a3;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = (*(uint64_t (**)(const char *))(*(void *)a3 + 40))(a3);
    char v15 = 0;
    GeomMeshFromStreauint64_t m = re::internal::readGeomMeshFromStream((re::internal *)(a2 + 16), (re::GeomMesh *)&v9, v5);
    if (v12) {
      (*(void (**)(const char *))(*(void *)v10 + 24))(v10);
    }
    if (!GeomMeshFromStream) {
      return 0;
    }
  }
  uint64_t v7 = re::createMDLMeshFromGeomMesh((re *)(a2 + 16), (const re::GeomMesh *)re::AcousticMeshAsset::kMaterialAttributeName, a3);
  re::ObjCObject::operator=((void **)(a2 + 752), v7);

  return *(void *)(a2 + 752) != 0;
}

void sub_2334DA2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  _Unwind_Resume(exception_object);
}

re *re::AcousticMeshAssetLoader::unloadAsset(re::AcousticMeshAssetLoader *this, re *a2)
{
  if (a2) {
    return re::internal::destroyPersistent<re::AcousticMeshAsset>(a2);
  }
  return result;
}

uint64_t re::AcousticMeshAssetLoader::isSupportedSourceExtension(re::AcousticMeshAssetLoader *this, char *a2)
{
  uint64_t v2 = __p;
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  unsigned __int8 v3 = v7;
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = (void **)((char *)__p + v7);
  }
  else {
    uint64_t v4 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v2 = (void **)__p[0];
  }
  if (v2 != v4)
  {
    do
    {
      *(unsigned char *)uint64_t v2 = __tolower(*(char *)v2);
      uint64_t v2 = (void **)((char *)v2 + 1);
    }
    while (v2 != v4);
    unsigned __int8 v3 = v7;
  }
  if ((v3 & 0x80) != 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_2334DA3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::AcousticMeshAssetLoader::introspectionType(re::AcousticMeshAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A5A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A5A0))
  {
    qword_26AF7A598 = re::internal::getOrCreateInfo((re::internal *)"AcousticMeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_AcousticMeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticMeshAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7A590, 0);
    __cxa_guard_release(&qword_26AF7A5A0);
  }
  return qword_26AF7A598;
}

void re::AcousticMeshAssetCompiler::~AcousticMeshAssetCompiler(re::AcousticMeshAssetCompiler *this)
{
}

semaphore_t *re::LocklessRingBuffer::LocklessRingBuffer(semaphore_t *this)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *(void *)this = &unk_26E6D61C8;
  this[6] = 0;
  *((void *)this + 4) = 0;
  if (!semaphore_create(*MEMORY[0x263EF8960], this + 6, 0, 0)) {
    return this;
  }
  re::internal::assertLog((re::internal *)4, v2, "assertion failure: '%s' (%s:line %i) Failed to create mach semaphore!", "kr == 0", "LocklessRingBuffer", 22);
  __n128 result = (semaphore_t *)_os_crash();
  __break(1u);
  return result;
}

void re::LocklessRingBuffer::~LocklessRingBuffer(re::LocklessRingBuffer *this)
{
  *(void *)this = &unk_26E6D61C8;
  semaphore_t v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    semaphore_destroy(*MEMORY[0x263EF8960], v2);
    *((_DWORD *)this + 6) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::LocklessRingBuffer::~LocklessRingBuffer(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::LocklessRingBuffer::initializeIntoBuffer(re::LocklessRingBuffer *this, void *a2)
{
  *((void *)this + 4) = a2;
  atomic_fetch_add(re::g_GlobalCounter, 1u);
  uint64_t v3 = atomic_load((unsigned int *)re::g_GlobalCounter);
  uint64_t result = getpid();
  uint64_t v5 = 0;
  __n128 v6 = (uint64_t *)*((void *)this + 4);
  *__n128 v6 = v3 | (result << 32);
  atomic_store(0, (unint64_t *)v6 + 3);
  atomic_store(0, (unint64_t *)(*((void *)this + 4) + 16));
  atomic_store(0, (unsigned int *)(*((void *)this + 4) + 8));
  do
  {
    atomic_store(0, (unsigned int *)(*((void *)this + 4) + v5 + 32));
    atomic_store(0, (unint64_t *)(*((void *)this + 4) + v5 + 40));
    v5 += 16;
  }
  while (v5 != 48);
  return result;
}

BOOL re::LocklessRingBuffer::waitForSemaphoreSignal@<W0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  kern_return_t v7;

  if (a3)
  {
    LODWORD(a4) = vcvtmd_u64_f64(a2);
    unint64_t v5 = a4 | ((unint64_t)(int)((a2 - floor(a2)) * 1000000000.0) << 32);
    do
    {
      mach_timespec_t v6 = (mach_timespec_t)v5;
      unsigned __int8 v7 = semaphore_timedwait(*(_DWORD *)(a1 + 24), v6);
    }
    while (v7 == 14);
  }
  else
  {
    do
      unsigned __int8 v7 = MEMORY[0x237DBE500](*(unsigned int *)(a1 + 24));
    while (v7 == 14);
  }
  return v7 == 0;
}

uint64_t re::LocklessRingBuffer::writerAcquireBuffer(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v3 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 8));
  if (v3 != 1) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v7) = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0xFFFFFFFFLL;
  unint64_t v10 = -1;
  do
  {
    if (!atomic_load((unsigned int *)(*(void *)(a1 + 32) + v8 + 32)))
    {
      unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 32) + v8 + 40));
      uint64_t v9 = v12 >= v10 ? v9 : v7;
      if (v12 < v10) {
        unint64_t v10 = v12;
      }
    }
    v8 += 16;
    uint64_t v7 = (v7 + 1);
  }
  while (v8 != 48);
  while (1)
  {
    while (v9 == -1)
    {
      if (re::LocklessRingBuffer::waitForSemaphoreSignal(a1, *(double *)&a2, a3, v7))
      {
        LODWORD(v7) = 0;
        uint64_t v18 = 0;
        uint64_t v9 = 0xFFFFFFFFLL;
        unint64_t v19 = -1;
        do
        {
          if (!atomic_load((unsigned int *)(*(void *)(a1 + 32) + v18 + 32)))
          {
            unint64_t v21 = atomic_load((unint64_t *)(*(void *)(a1 + 32) + v18 + 40));
            uint64_t v9 = v21 >= v19 ? v9 : v7;
            if (v21 < v19) {
              unint64_t v19 = v21;
            }
          }
          v18 += 16;
          uint64_t v7 = (v7 + 1);
        }
        while (v18 != 48);
        if (v9 != -1) {
          continue;
        }
      }
      return 0xFFFFFFFFLL;
    }
    int v13 = 0;
    atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(a1 + 32) + 16 * (int)v9 + 32), (unsigned int *)&v13, 1u);
    if (!v13) {
      break;
    }
    LODWORD(v7) = 0;
    uint64_t v14 = 0;
    uint64_t v9 = 0xFFFFFFFFLL;
    unint64_t v15 = -1;
    do
    {
      if (!atomic_load((unsigned int *)(*(void *)(a1 + 32) + v14 + 32)))
      {
        unint64_t v17 = atomic_load((unint64_t *)(*(void *)(a1 + 32) + v14 + 40));
        if (v17 >= v15) {
          uint64_t v9 = v9;
        }
        else {
          uint64_t v9 = v7;
        }
        if (v17 < v15) {
          unint64_t v15 = v17;
        }
      }
      v14 += 16;
      uint64_t v7 = (v7 + 1);
    }
    while (v14 != 48);
  }
  do
    mach_timespec_t v22 = 0;
  while (semaphore_timedwait(*(_DWORD *)(a1 + 24), v22) == 14);
  unint64_t v23 = atomic_load((unint64_t *)(*(void *)(a1 + 32) + 24));
  atomic_store(v23 + 1, (unint64_t *)(*(void *)(a1 + 32) + 16 * (int)v9 + 40));
  unint64_t v24 = v23;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 32) + 24), &v24, v23 + 1);
  if (v24 != v23)
  {
    unint64_t v25 = v24;
    do
    {
      atomic_store(v24 + 1, (unint64_t *)(*(void *)(a1 + 32) + 16 * (int)v9 + 40));
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(a1 + 32) + 24), &v25, v24 + 1);
      BOOL v26 = v25 == v24;
      unint64_t v24 = v25;
    }
    while (!v26);
  }
  return v9;
}

uint64_t re::LocklessRingBuffer::writerReleaseBuffer(uint64_t this, uint64_t a2, int a3)
{
  unsigned int v3 = atomic_load((unsigned int *)(*(void *)(this + 32) + 16 * (int)a2 + 32));
  if (v3 == 1)
  {
    if (a3) {
      unsigned int v4 = 3;
    }
    else {
      unsigned int v4 = 2;
    }
    int v5 = 1;
    atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(this + 32) + 16 * (int)a2 + 32), (unsigned int *)&v5, v4);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Trying to release a buffer that is not in writing state!", "currState == BufferState::kWriting", "writerReleaseBuffer", 215);
    this = _os_crash();
    __break(1u);
  }
  return this;
}

uint64_t re::LocklessRingBuffer::getLatestReadableBufferIndex(re::LocklessRingBuffer *this)
{
  unsigned int v1 = 0;
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v4 = 0xFFFFFFFFLL;
  do
  {
    unsigned int v5 = atomic_load((unsigned int *)(*((void *)this + 4) + v2 + 32));
    if (v5 == 4)
    {
      unint64_t v6 = atomic_load((unint64_t *)(*((void *)this + 4) + v2 + 40));
      uint64_t v4 = v6 <= v3 ? v4 : v1;
      if (v6 > v3) {
        unint64_t v3 = v6;
      }
    }
    v2 += 16;
    ++v1;
  }
  while (v2 != 48);
  if (v4 >= 3)
  {
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v4 = 0xFFFFFFFFLL;
    do
    {
      unsigned int v10 = atomic_load((unsigned int *)(*((void *)this + 4) + v8 + 32));
      if ((v10 & 0xFFFFFFFE) == 2)
      {
        unint64_t v11 = atomic_load((unint64_t *)(*((void *)this + 4) + v8 + 40));
        BOOL v12 = v11 >= v9;
        if (v11 > v9) {
          unint64_t v9 = v11;
        }
        if (v12) {
          uint64_t v4 = v7;
        }
        else {
          uint64_t v4 = v4;
        }
      }
      v8 += 16;
      ++v7;
    }
    while (v8 != 48);
  }
  return v4;
}

uint64_t re::LocklessRingBuffer::readerAcquireBuffer(re::LocklessRingBuffer *this)
{
  unsigned int v1 = (re::LocklessRingBuffer *)atomic_load((unint64_t *)(*((void *)this + 4) + 16));
  if (v1)
  {
    if (v1 == this) {
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
  atomic_compare_exchange_strong((atomic_ullong *volatile)(*((void *)this + 4) + 16), (unint64_t *)&v1, (unint64_t)this);
  if (v1) {
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  unsigned int v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0xFFFFFFFFLL;
  do
  {
    unsigned int v6 = atomic_load((unsigned int *)(*((void *)this + 4) + v3 + 32));
    if (v6 == 2)
    {
      unint64_t v7 = atomic_load((unint64_t *)(*((void *)this + 4) + v3 + 40));
      uint64_t v5 = v7 <= v4 ? v5 : v2;
      if (v7 > v4) {
        unint64_t v4 = v7;
      }
    }
    v3 += 16;
    ++v2;
  }
  while (v3 != 48);
  while (v5 != -1)
  {
    int v8 = 2;
    atomic_compare_exchange_strong((atomic_uint *volatile)(*((void *)this + 4) + 16 * (int)v5 + 32), (unsigned int *)&v8, 4u);
    if (v8 == 2) {
      break;
    }
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v5 = 0xFFFFFFFFLL;
    do
    {
      unsigned int v12 = atomic_load((unsigned int *)(*((void *)this + 4) + v10 + 32));
      if (v12 == 2)
      {
        unint64_t v13 = atomic_load((unint64_t *)(*((void *)this + 4) + v10 + 40));
        if (v13 <= v11) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        if (v13 > v11) {
          unint64_t v11 = v13;
        }
      }
      v10 += 16;
      ++v9;
    }
    while (v10 != 48);
  }
  return v5;
}

uint64_t re::LocklessRingBuffer::readerAcquireAnyWrittenBuffer(re::LocklessRingBuffer *this)
{
  unsigned int v1 = (re::LocklessRingBuffer *)atomic_load((unint64_t *)(*((void *)this + 4) + 16));
  if (v1)
  {
    if (v1 == this) {
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
  atomic_compare_exchange_strong((atomic_ullong *volatile)(*((void *)this + 4) + 16), (unint64_t *)&v1, (unint64_t)this);
  if (v1) {
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0xFFFFFFFFLL;
  do
  {
    unsigned int v7 = atomic_load((unsigned int *)(*((void *)this + 4) + v3 + 32));
    if ((v7 & 0xFFFFFFFE) == 2)
    {
      unint64_t v8 = atomic_load((unint64_t *)(*((void *)this + 4) + v3 + 40));
      if (v8 >= v5)
      {
        unsigned int v4 = v7;
        uint64_t v6 = v2;
        unint64_t v5 = v8;
      }
    }
    v3 += 16;
    uint64_t v2 = (v2 + 1);
  }
  while (v3 != 48);
  while (v6 != -1)
  {
    unsigned int v9 = v4;
    if ((v4 & 0xFFFFFFFE) == 2)
    {
      unsigned int v9 = v4;
      atomic_compare_exchange_strong((atomic_uint *volatile)(*((void *)this + 4) + 16 * (int)v6 + 32), &v9, 4u);
      if (v9 == v4) {
        break;
      }
    }
    if (v9 - 4 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v6 = 0xFFFFFFFFLL;
      do
      {
        unsigned int v13 = atomic_load((unsigned int *)(*((void *)this + 4) + v11 + 32));
        if ((v13 & 0xFFFFFFFE) == 2)
        {
          unint64_t v14 = atomic_load((unint64_t *)(*((void *)this + 4) + v11 + 40));
          if (v14 >= v12)
          {
            unsigned int v4 = v13;
            uint64_t v6 = v10;
            unint64_t v12 = v14;
          }
        }
        v11 += 16;
        uint64_t v10 = (v10 + 1);
      }
      while (v11 != 48);
    }
  }
  return v6;
}

void re::LocklessRingBuffer::readerReleaseBuffer(re::LocklessRingBuffer *this, uint64_t a2)
{
  uint64_t v2 = (re::LocklessRingBuffer *)atomic_load((unint64_t *)(*((void *)this + 4) + 16));
  if (v2)
  {
    if (v2 != this) {
      return;
    }
  }
  else
  {
    atomic_compare_exchange_strong((atomic_ullong *volatile)(*((void *)this + 4) + 16), (unint64_t *)&v2, (unint64_t)this);
    if (v2) {
      return;
    }
  }
  unsigned int v3 = atomic_load((unsigned int *)(*((void *)this + 4) + 16 * (int)a2 + 32));
  if (v3 != 4)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Trying to free a buffer that is not in reading state!", "currState == BufferState::kReading", "readerReleaseBuffer", 389);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  int v4 = 4;
  atomic_compare_exchange_strong((atomic_uint *volatile)(*((void *)this + 4) + 16 * (int)a2 + 32), (unsigned int *)&v4, 0);
  if (v4 == 4)
  {
LABEL_12:
    JUMPOUT(0x237DBE4E0);
  }
}

unint64_t re::LocklessRingBuffer::readerReleaseAnyWrittenBuffer(unint64_t this)
{
  unint64_t v1 = this;
  unint64_t v2 = atomic_load((unint64_t *)(*(void *)(this + 32) + 16));
  if (v2)
  {
    if (v2 != this) {
      return this;
    }
  }
  else
  {
    atomic_compare_exchange_strong((atomic_ullong *volatile)(*(void *)(this + 32) + 16), &v2, this);
    if (v2) {
      return this;
    }
  }
  for (uint64_t i = 32; i != 80; i += 16)
  {
    unsigned int v4 = atomic_load((unsigned int *)(*(void *)(v1 + 32) + i));
    if (v4 == 2)
    {
      int v5 = 2;
      atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(v1 + 32) + i), (unsigned int *)&v5, 0);
      if (v5 == 2) {
        this = MEMORY[0x237DBE4E0](*(unsigned int *)(v1 + 24));
      }
    }
  }
  return this;
}

uint64_t re::TypeAvailabilityUtilities::checkAssetIsAvailableForMajorVersion(re::SceneAsset *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *((void *)a1 + 1);
  if (!v5)
  {
    re::SceneAsset::assetType(a1);
    goto LABEL_8;
  }
  unsigned int v7 = *(uint64_t **)(v5 + 264);
  if (v7 != re::SceneAsset::assetType(a1))
  {
LABEL_8:
    uint64_t v14 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1040), *(void *)(*((void *)a1 + 1) + 264));
    long long v17 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v14 + 112))(v14) + 32);
    v16[0] = 0;
  }
  uint64_t v8 = re::AssetHandle::asset<re::SceneAsset>(a1);
  __int16 v18 = 0;
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = *(void **)(v8 + 32);
    uint64_t v11 = 112 * v9;
    do
    {
      re::TypeAvailabilityUtilities::checkSceneEntityComponentsAreAvailableForMajorVersion(v10, a2, (unsigned char *)&v18 + 1, &v18);
      v10 += 14;
      v11 -= 112;
    }
    while (v11);
    BOOL v12 = (_BYTE)v18 == 0;
    BOOL v13 = HIBYTE(v18) != 0;
  }
  else
  {
    BOOL v13 = 0;
    BOOL v12 = 1;
  }
  return v12 & (v13 & a3 ^ 1u);
}

uint64_t re::AssetHandle::asset<re::SceneAsset>(re::SceneAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v2 = re::SceneAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unsigned int v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        unsigned int v7 = (char *)v6[18];
      }
      else {
        unsigned int v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::TypeAvailabilityUtilities::checkSceneEntityComponentsAreAvailableForMajorVersion(void *a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[6];
  if (v8)
  {
    uint64_t v9 = a1[8];
    uint64_t v10 = v9 + 24 * v8;
    do
    {
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v12 + 56))(buf);
        long long v29 = *(_OWORD *)buf;
        v28[0] = 0;
        {
          *a3 = 1;
          if (a2 <= 5)
          {
            uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 40))(*(void *)(v9 + 8));
            re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v28);
            uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
            unint64_t v15 = (re *)(*(uint64_t (**)(void *))(*v14 + 32))(v14);
            int v16 = (int)v15;
            if ((int)v15 < 2) {
              goto LABEL_17;
            }
            long long v17 = *re::assetsLogObjects(v15);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v18;
              _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
            }
            if (v16)
            {
              uint64_t v19 = 0;
              while (1)
              {
                if (v19)
                {
                  int v20 = *(_DWORD *)((*(uint64_t (**)(void *, uint64_t))(*v14 + 40))(v14, v19) + 16);
                  if (v20 == 10 || v20 == 6) {
                    break;
                  }
                }
                if (v16 == ++v19) {
                  goto LABEL_17;
                }
              }
              unint64_t v23 = re::StringID::StringID((re::StringID *)&v29, (const StringID *)v22);
              unint64_t v24 = *re::assetsLogObjects(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = *((void *)&v29 + 1);
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = 6;
                _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "\"%s\" can't be written for any targeted major versions prior to %lli", buf, 0x16u);
              }
              re::StringID::destroyString((re::StringID *)&v29);
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v28);
              *a4 = 1;
            }
            else
            {
LABEL_17:
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v28);
            }
          }
        }
      }
      v9 += 24;
    }
    while (v9 != v10);
  }
  uint64_t v25 = a1[11];
  if (v25)
  {
    uint64_t v26 = a1[13];
    uint64_t v27 = 112 * v25;
    do
    {
      re::TypeAvailabilityUtilities::checkSceneEntityComponentsAreAvailableForMajorVersion(v26, a2, a3, a4);
      v26 += 112;
      v27 -= 112;
    }
    while (v27);
  }
}

uint64_t anonymous namespace'::checkTypeIsAvailableForMajorVersion(re **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  if (!v34[0])
  {
    unint64_t v15 = re::StringID::StringID((re::StringID *)v41, (const StringID *)v14);
    int v16 = *re::assetsLogObjects(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = *(void *)&v41[8];
      _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Didn't perform availability check because introspection info for type \"%s\" isn't available.", buf, 0xCu);
    }
    re::StringID::destroyString((re::StringID *)v41);
    goto LABEL_21;
  }
  re::TypeInfo::TypeInfo((uint64_t)v32, (uint64_t)&v35);
  int v7 = *a3;
  uint64_t v6 = (unsigned int *)(a3 + 4);
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = (unsigned int *)(v33 + 64);
  }
  unsigned int v9 = *v8;
  uint64_t v10 = re::TypeInfo::name((re::TypeInfo *)v32);
  uint64_t v11 = v10[1];
  if (v9 < 0xFFFFFFFE)
  {
    if (v9 > re::TypeAvailabilityUtilities::convertToRealityKitRelease(a2))
    {
      long long v17 = (_anonymous_namespace_ *)re::TypeAvailabilityUtilities::convertToMajorVersion(v9);
      *(void *)&uint8_t v41[16] = 0;
      uint64_t v42 = 0;
      *(void *)&v41[8] = 0;
      re::DynamicString::setCapacity(v41, 0);
      __n128 DeploymentTargetFromVersion = re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"macOS", (unint64_t)v17);
      if (DeploymentTargetFromVersion.n128_i32[0] <= 0)
      {
        re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"iOS", (unint64_t)v17);
      }
      else
      {
        re::DynamicString::appendf((re::DynamicString *)v41, "macOS %i.%i.%i", DeploymentTargetFromVersion.n128_u32[0], DeploymentTargetFromVersion.n128_u32[1], DeploymentTargetFromVersion.n128_u32[2]);
        __n128 v19 = re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"iOS", (unint64_t)v17);
        if (v41[8]) {
          uint64_t v20 = *(void *)&v41[8] >> 1;
        }
        else {
          uint64_t v20 = v41[8] >> 1;
        }
        if (v20) {
          unint64_t v21 = ", ";
        }
        else {
          unint64_t v21 = "";
        }
        re::DynamicString::appendf((re::DynamicString *)v41, "%siOS %i.%i.%i", v21, v19.n128_u32[0], v19.n128_u32[1], v19.n128_u32[2]);
      }
      __n128 v23 = re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"visionOS", (unint64_t)v17);
      if (v23.n128_i32[0] >= 1)
      {
        if (v41[8]) {
          uint64_t v24 = *(void *)&v41[8] >> 1;
        }
        else {
          uint64_t v24 = v41[8] >> 1;
        }
        if (v24) {
          uint64_t v25 = ", ";
        }
        else {
          uint64_t v25 = "";
        }
        re::DynamicString::appendf((re::DynamicString *)v41, "%svisionOS %i.%i.%i", v25, v23.n128_u32[0], v23.n128_u32[1], v23.n128_u32[2]);
      }
      uint64_t v26 = *(void *)&v41[8] >> 1;
      if ((v41[8] & 1) == 0) {
        uint64_t v26 = v41[8] >> 1;
      }
      if (v26)
      {
        if (v41[8]) {
          uint64_t v27 = *(unsigned char **)&v41[16];
        }
        else {
          uint64_t v27 = &v41[9];
        }
        uint64_t v28 = (re *)re::DynamicString::format((re::DynamicString *)"\"%s\" is only available for %s or later.", (re::DynamicString *)buf, v11, v27);
      }
      else
      {
        uint64_t v28 = (re *)re::DynamicString::format((re::DynamicString *)"\"%s\" is not available for any platform.", (re::DynamicString *)buf, v11, v31);
      }
      long long v29 = *re::assetsLogObjects(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        if (buf[8]) {
          uint64_t v30 = v40;
        }
        else {
          uint64_t v30 = &buf[9];
        }
        *(_DWORD *)IOSurfaceRef v37 = 136315138;
        uint64_t v38 = v30;
        _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "%s", v37, 0xCu);
      }
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
      if (*(void *)v41 && (v41[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v41 + 40))();
      }
      goto LABEL_8;
    }
LABEL_21:
    uint64_t v13 = 1;
    goto LABEL_22;
  }
  uint64_t v12 = *re::assetsLogObjects((re *)v10);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long v41 = 136315394;
    *(void *)&void v41[4] = v11;
    *(_WORD *)&v41[12] = 1024;
    *(_DWORD *)&v41[14] = v9;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "\"%s\" has unsupported \"introducedInRelease\" value of %i", v41, 0x12u);
  }
LABEL_8:
  uint64_t v13 = 0;
LABEL_22:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  return v13;
}

uint64_t re::TypeAvailabilityUtilities::getSceneRequiredMajorVersion(re::SceneAsset *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (!v2)
  {
    re::SceneAsset::assetType(a1);
    return 0;
  }
  uint64_t v5 = *(uint64_t **)(v2 + 264);
  if (v5 != re::SceneAsset::assetType(a1)) {
    return 0;
  }
  uint64_t v6 = re::AssetHandle::asset<re::SceneAsset>(a1);
  uint64_t v7 = 2;
  uint64_t v13 = 2;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    unsigned int v9 = *(re **)(v6 + 32);
    uint64_t v10 = 112 * v8;
    do
    {
      unsigned int v9 = (re *)((char *)v9 + 112);
      v10 -= 112;
    }
    while (v10);
    uint64_t v7 = v13;
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  return v7;
}

void anonymous namespace'::getSceneRequiredVersion(re *a1, uint64_t *a2, uint64_t a3, re *a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 4))
  {
    uint64_t v8 = *((void *)a1 + 6);
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      uint64_t v10 = (void *)(*((void *)a1 + 8) + 8);
      do
      {
        if (*v10)
        {
          uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v10 + 40))(*v10);
          (*(void (**)(re **__return_ptr))(*(void *)v11 + 56))(v33);
          re::TypeRegistry::typeInfo(a4, v33, &v31);
          if ((_BYTE)v31)
          {
            uint64_t v13 = (re::TypeInfo *)re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v32);
            unsigned int v14 = *(_DWORD *)(v40 + 64);
            unint64_t v15 = re::TypeInfo::name(v13);
            uint64_t v16 = v15[1];
            if (v14 >= 0xFFFFFFFE)
            {
              long long v29 = *re::assetsLogObjects((re *)v15);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 136315394;
                uint64_t v35 = v16;
                __int16 v36 = 1024;
                unsigned int v37 = v14;
                uint64_t v25 = "\"%s\" has unsupported \"introducedInRelease\" value of %i";
                uint64_t v26 = buf;
                uint64_t v27 = v29;
                uint32_t v28 = 18;
LABEL_23:
                _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, v25, v26, v28);
              }
              goto LABEL_24;
            }
            (*(void (**)(uint8_t *__return_ptr))(*(void *)*v10 + 64))(buf);
            if (buf[0])
            {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)*v10 + 64))(&v30);
              unsigned int v14 = HIDWORD(v30);
            }
            if (v14 > re::TypeAvailabilityUtilities::convertToRealityKitRelease(*a2))
            {
              long long v17 = (re *)re::TypeAvailabilityUtilities::convertToMajorVersion(v14);
              *a2 = (uint64_t)v17;
              uint64_t v18 = *re::assetsLogObjects(v17);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                uint64_t v35 = v16;
                __int16 v36 = 1024;
                unsigned int v37 = v14;
                _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "%s auto updated the required reality file version to %i", buf, 0x12u);
              }
            }
          }
          else
          {
            __n128 v19 = *re::assetsLogObjects(v12);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = *(void *)((*(uint64_t (**)(void))(*(void *)*v10 + 40))() + 32);
              *(_DWORD *)uint64_t v38 = 136315138;
              uint64_t v39 = v20;
              _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "%s didn't return a TypeID", v38, 0xCu);
            }
          }
        }
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
    uint64_t v21 = *((void *)a1 + 11);
    if (v21)
    {
      uint64_t v22 = *((void *)a1 + 13);
      uint64_t v23 = 112 * v21;
      do
      {
        v22 += 112;
        v23 -= 112;
      }
      while (v23);
    }
  }
  else
  {
    uint64_t v24 = *re::assetsLogObjects(a1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v31 = 0;
      uint64_t v25 = "No Components initialized";
      uint64_t v26 = (uint8_t *)&v31;
      uint64_t v27 = v24;
      uint32_t v28 = 2;
      goto LABEL_23;
    }
LABEL_24:
    *a2 = 0;
  }
}

void re::TypeAvailabilityUtilities::isAssetAllowedInRealityFile(re::TypeAvailabilityUtilities *this@<X0>, uint64_t a2@<X8>)
{
  if (re::ShaderLibraryAsset::assetType(this) == (uint64_t *)this)
  {
    re::WrappedError::make((re::WrappedError *)@"RERealityFileWriterErrorDomain", (const __CFString *)0x13, (uint64_t)"ShaderLibraryAsset is not permitted in reality files.", &v6);
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    *(void *)(a2 + 8) = v5;

    char v4 = 0;
  }
  else
  {
    char v4 = 1;
  }
  *(unsigned char *)a2 = v4;
}

uint64_t anonymous namespace'::getTypeInitialRelease(re **a1)
{
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
  if (!v4[0] || (uint64_t v2 = *(unsigned int *)(v5 + 64), v2 >= 0xFFFFFFFE)) {
    uint64_t v2 = 0;
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
  return v2;
}

uint64_t re::TypeAvailabilityUtilities::getAssetInitialRelease(re::TypeAvailabilityUtilities *this, const re::AssetHandle *a2)
{
  uint64_t v2 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(*((void *)this + 1) + 24) + 1040), *(void *)(*((void *)this + 1) + 264));
  long long v4 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v2) + 32);
}

uint64_t re::TypeAvailabilityUtilities::convertToRealityKitRelease(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xD) {
    return result;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t re::TypeAvailabilityUtilities::convertToMajorVersion(int a1)
{
  uint64_t v1 = (a1 - 1);
  if (v1 < 0xD) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

uint64_t re::TypeAvailabilityUtilities::getVersionFromDeploymentTarget(_anonymous_namespace_ *a1, __n128 a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::toLowerCase((uint64_t)&v36);
  if (v37) {
    long long v4 = v39;
  }
  else {
    long long v4 = v38;
  }
  uint64_t v5 = buf[8] & 1;
  if (buf[8]) {
    char v6 = *(const char **)&v42[2];
  }
  else {
    char v6 = &buf[9];
  }
  int v7 = strcmp(v4, v6);
  uint64_t v8 = *(_anonymous_namespace_ **)buf;
  if (*(void *)buf && v5) {
    uint64_t v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
  }
  if (v7)
  {
LABEL_11:
    if (v37) {
      uint64_t v9 = v39;
    }
    else {
      uint64_t v9 = v38;
    }
    uint64_t v10 = buf[8] & 1;
    if (buf[8]) {
      uint64_t v11 = *(const char **)&v42[2];
    }
    else {
      uint64_t v11 = &buf[9];
    }
    int v12 = strcmp(v9, v11);
    uint64_t v13 = *(_anonymous_namespace_ **)buf;
    if (*(void *)buf && v10) {
      uint64_t v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
    }
    if (v12)
    {
LABEL_21:
      if (v37) {
        unsigned int v14 = v39;
      }
      else {
        unsigned int v14 = v38;
      }
      char v15 = buf[8];
      if (buf[8]) {
        uint64_t v16 = *(const char **)&v42[2];
      }
      else {
        uint64_t v16 = &buf[9];
      }
      long long v17 = (_anonymous_namespace_ *)strcmp(v14, v16);
      if (v17)
      {
        if (v37) {
          uint64_t v18 = v39;
        }
        else {
          uint64_t v18 = v38;
        }
        uint64_t v19 = v34 & 1;
        if (v34) {
          uint64_t v20 = *(const char **)&v35[7];
        }
        else {
          uint64_t v20 = v35;
        }
        int v21 = strcmp(v18, v20);
        if (v33 && v19) {
          (*(void (**)(void))(*(void *)v33 + 40))();
        }
        uint64_t v22 = *(_anonymous_namespace_ **)buf;
        if (*(void *)buf && (buf[8] & 1) != 0) {
          uint64_t v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
        }
        if (v21)
        {
          if (v37) {
            uint64_t v23 = v39;
          }
          else {
            uint64_t v23 = v38;
          }
          uint64_t v24 = buf[8] & 1;
          if (buf[8]) {
            uint64_t v25 = *(const char **)&v42[2];
          }
          else {
            uint64_t v25 = &buf[9];
          }
          int v26 = strcmp(v23, v25);
          uint64_t v22 = *(_anonymous_namespace_ **)buf;
          if (*(void *)buf && v24) {
            uint64_t v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
          }
          if (v26)
          {
LABEL_66:
            uint64_t v30 = *re::assetsLogObjects(v22);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315906;
              *(void *)&uint8_t buf[4] = a1;
              __int16 v41 = 1024;
              *(_DWORD *)uint64_t v42 = a2.n128_u32[0];
              *(_WORD *)&void v42[4] = 1024;
              *(_DWORD *)&v42[6] = a2.n128_u32[1];
              __int16 v43 = 1024;
              unsigned __int32 v44 = a2.n128_u32[2];
              _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Provided platform or version %s-%i.%i.%i is not valid or unsupported.", buf, 0x1Eu);
            }
            uint64_t v27 = 0;
            goto LABEL_85;
          }
        }
      }
      else
      {
        uint64_t v22 = *(_anonymous_namespace_ **)buf;
        if (*(void *)buf && (v15 & 1) != 0) {
          uint64_t v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
        }
      }
      if (a2.n128_u32[0] == 2)
      {
LABEL_64:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 1;
        uint64_t v29 = 12;
LABEL_82:
        if (v28) {
          uint64_t v27 = v29;
        }
        else {
          uint64_t v27 = v29 + 1;
        }
        goto LABEL_85;
      }
      if (a2.n128_u32[0] == 1)
      {
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 0;
        uint64_t v29 = 10;
        goto LABEL_82;
      }
      if (a2.n128_i32[0] > 2)
      {
LABEL_75:
        uint64_t v27 = 13;
        goto LABEL_85;
      }
      goto LABEL_66;
    }
    uint64_t v27 = 9;
    switch(a2.n128_u32[0])
    {
      case 0xDu:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 3;
        goto LABEL_57;
      case 0xEu:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 4;
        goto LABEL_77;
      case 0xFu:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 3;
        goto LABEL_79;
      case 0x10u:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 3;
        goto LABEL_81;
      case 0x11u:
        break;
      case 0x12u:
        goto LABEL_64;
      default:
        if (a2.n128_i32[0] > 18) {
          goto LABEL_75;
        }
        goto LABEL_21;
    }
  }
  else
  {
    uint64_t v27 = 9;
    switch(a2.n128_u32[0])
    {
      case 0xAu:
        if (a2.n128_u32[1] == 15)
        {
          BOOL v28 = (signed __int32)a2.n128_u32[2] <= 3;
LABEL_57:
          uint64_t v29 = 1;
          goto LABEL_82;
        }
        if (a2.n128_i32[1] <= 15) {
          goto LABEL_11;
        }
        uint64_t v27 = 2;
        break;
      case 0xBu:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 2;
LABEL_77:
        uint64_t v29 = 3;
        goto LABEL_82;
      case 0xCu:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 2;
LABEL_79:
        uint64_t v29 = 5;
        goto LABEL_82;
      case 0xDu:
        BOOL v28 = (signed __int32)a2.n128_u32[1] <= 2;
LABEL_81:
        uint64_t v29 = 7;
        goto LABEL_82;
      case 0xEu:
        break;
      case 0xFu:
        goto LABEL_64;
      default:
        if (a2.n128_i32[0] > 15) {
          goto LABEL_75;
        }
        goto LABEL_11;
    }
  }
LABEL_85:
  if (v36 && (v37 & 1) != 0) {
    (*(void (**)(void))(*(void *)v36 + 40))();
  }
  return v27;
}

__n128 re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::toLowerCase((uint64_t)v4);
  if (v47) {
    char v6 = v49;
  }
  else {
    char v6 = v48;
  }
  uint64_t v7 = buf[8] & 1;
  if (buf[8]) {
    uint64_t v8 = v51;
  }
  else {
    uint64_t v8 = (const char *)&buf[9];
  }
  int v9 = strcmp(v6, v8);
  uint64_t v10 = *(_anonymous_namespace_ **)buf;
  if (*(void *)buf && v7) {
    uint64_t v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
  }
  if (!v9)
  {
    int v44 = 0;
    memset(v43, 0, sizeof(v43));
    uint64_t v45 = 0x7FFFFFFFLL;
    uint64_t v37 = 1;
    *(_OWORD *)long long buf = xmmword_234377750;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 2;
    *(_OWORD *)long long buf = xmmword_234377760;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 3;
    *(_OWORD *)long long buf = xmmword_234377770;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 4;
    *(_OWORD *)long long buf = xmmword_234377780;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 5;
    *(_OWORD *)long long buf = xmmword_234377790;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 6;
    *(_OWORD *)long long buf = xmmword_2343777A0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 7;
    *(_OWORD *)long long buf = xmmword_2343776A0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 8;
    *(_OWORD *)long long buf = xmmword_2343777B0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 9;
    *(_OWORD *)long long buf = xmmword_2343776C0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 10;
    *(_OWORD *)long long buf = xmmword_2343776E0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 11;
    *(_OWORD *)long long buf = xmmword_2343776E0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 12;
    *(_OWORD *)long long buf = xmmword_2343776E0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    uint64_t v37 = 13;
    *(_OWORD *)long long buf = xmmword_2343777C0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    __int16 v31 = (uint64_t *)v43;
LABEL_59:
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(v31);
    goto LABEL_60;
  }
  if (v47) {
    uint64_t v11 = v49;
  }
  else {
    uint64_t v11 = v48;
  }
  uint64_t v12 = buf[8] & 1;
  if (buf[8]) {
    uint64_t v13 = v51;
  }
  else {
    uint64_t v13 = (const char *)&buf[9];
  }
  int v14 = strcmp(v11, v13);
  char v15 = *(_anonymous_namespace_ **)buf;
  if (*(void *)buf && v12) {
    char v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
  }
  if (!v14)
  {
    int v41 = 0;
    memset(v40, 0, sizeof(v40));
    uint64_t v42 = 0x7FFFFFFFLL;
    uint64_t v37 = 1;
    *(_OWORD *)long long buf = xmmword_2343776A0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 2;
    *(_OWORD *)long long buf = xmmword_2343776B0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 3;
    *(_OWORD *)long long buf = xmmword_2343776C0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 4;
    *(_OWORD *)long long buf = xmmword_2343776D0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 5;
    *(_OWORD *)long long buf = xmmword_2343776E0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 6;
    *(_OWORD *)long long buf = xmmword_2343776F0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 7;
    *(_OWORD *)long long buf = xmmword_234377700;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 8;
    *(_OWORD *)long long buf = xmmword_234377710;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 9;
    *(_OWORD *)long long buf = xmmword_234377720;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 10;
    *(_OWORD *)long long buf = xmmword_234377730;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 11;
    *(_OWORD *)long long buf = xmmword_234377730;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 12;
    *(_OWORD *)long long buf = xmmword_234377730;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    uint64_t v37 = 13;
    *(_OWORD *)long long buf = xmmword_234377740;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    __int16 v31 = (uint64_t *)v40;
    goto LABEL_59;
  }
  if (v47) {
    uint64_t v16 = v49;
  }
  else {
    uint64_t v16 = v48;
  }
  uint8_t v17 = buf[8];
  if (buf[8]) {
    uint64_t v18 = v51;
  }
  else {
    uint64_t v18 = (const char *)&buf[9];
  }
  uint64_t v19 = (_anonymous_namespace_ *)strcmp(v16, v18);
  if (!v19)
  {
    if (*(void *)buf && (v17 & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    goto LABEL_58;
  }
  if (v47) {
    uint64_t v20 = v49;
  }
  else {
    uint64_t v20 = v48;
  }
  uint64_t v21 = v38 & 1;
  if (v38) {
    uint64_t v22 = *(const char **)&v39[7];
  }
  else {
    uint64_t v22 = v39;
  }
  int v23 = strcmp(v20, v22);
  if (v37 && v21) {
    (*(void (**)(void))(*(void *)v37 + 40))();
  }
  uint64_t v24 = *(_anonymous_namespace_ **)buf;
  if (*(void *)buf && (buf[8] & 1) != 0) {
    uint64_t v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
  }
  if (!v23) {
    goto LABEL_58;
  }
  if (v47) {
    uint64_t v25 = v49;
  }
  else {
    uint64_t v25 = v48;
  }
  uint64_t v26 = buf[8] & 1;
  if (buf[8]) {
    uint64_t v27 = v51;
  }
  else {
    uint64_t v27 = (const char *)&buf[9];
  }
  int v28 = strcmp(v25, v27);
  uint64_t v29 = *(re **)buf;
  if (*(void *)buf && v26) {
    uint64_t v29 = (re *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
  }
  if (!v28)
  {
LABEL_58:
    int v35 = 0;
    memset(v34, 0, sizeof(v34));
    uint64_t v36 = 0x7FFFFFFFLL;
    uint64_t v37 = 10;
    *(_OWORD *)long long buf = xmmword_234361DE0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    uint64_t v37 = 11;
    *(_OWORD *)long long buf = xmmword_234377670;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    uint64_t v37 = 12;
    *(_OWORD *)long long buf = xmmword_234377680;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    uint64_t v37 = 13;
    *(_OWORD *)long long buf = xmmword_234377690;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    __int16 v31 = (uint64_t *)v34;
    goto LABEL_59;
  }
  uint64_t v30 = *re::assetsLogObjects(v29);
  __n128 v33 = 0u;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Provided platform (%s) is not valid or unsupported.", buf, 0xCu);
  }
LABEL_60:
  if (v46 && (v47 & 1) != 0) {
    (*(void (**)(void))(*(void *)v46 + 40))();
  }
  return v33;
}

__n128 anonymous namespace'::deploymentTargetForVersion(re *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((a2 - 1) >= 0xD)
  {
    char v6 = *re::assetsLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 67109378;
      v11[1] = a2;
      __int16 v12 = 2080;
      uint64_t v13 = a1;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Provided version (%i) is not matching any official %s release.", (uint8_t *)v11, 0x12u);
    }
  }
  result.n128_u64[0] = 0;
  if (*(void *)a3)
  {
    unint64_t v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    uint64_t v9 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(a3 + 24)));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(a3 + 16);
      if (*(void *)(v10 + 48 * v9 + 16) == a2)
      {
        return *(__n128 *)(v10 + 48 * v9 + 32);
      }
      else
      {
        while (1)
        {
          LODWORD(v9) = *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v10 + 48 * v9 + 16) == a2) {
            return *(__n128 *)(v10 + 48 * v9 + 32);
          }
        }
      }
    }
  }
  return result;
}

uint64_t _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_(uint64_t result, uint64_t *a2, _OWORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 48 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 48 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  __n128 result = _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE9addAsMoveEjmRKS1_OS2_(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE9addAsMoveEjmRKS1_OS2_(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(void *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v26, v13, v12);
          long long v15 = *(_OWORD *)v26;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v26[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v26[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE9addAsMoveEjmRKS1_OS2_(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 16);
              }
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v26);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  *(_OWORD *)(*(void *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 48 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 48;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::NetworkAssetSerializationManager::serializeAsset(uint64_t a1, _anonymous_namespace_ *a2, re **a3, re::DynamicArrayBufferedOutputStream *a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 40))
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v13);
    uint64_t v10 = re::NetworkAssetSerializationManager::internalSerializeAsset(a1, a2, (const re::IntrospectionBase *)a3, v14, a4, a5);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    return v10;
  }
  else
  {
    return re::NetworkAssetSerializationManager::internalSerializeAsset(a1, a2, (const re::IntrospectionBase *)a3, 0, a4, a5);
  }
}

uint64_t re::NetworkAssetSerializationManager::internalSerializeAsset(uint64_t a1, _anonymous_namespace_ *a2, const re::IntrospectionBase *a3, void *a4, re::DynamicArrayBufferedOutputStream *a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40))
  {
    re::StreamWriterCopyingOutputStream::StreamWriterCopyingOutputStream((uint64_t)v24, (uint64_t)a2);
    int v11 = *(re **)(a1 + 24);
    *((void *)v11 + 57) = a6;
    signed int v12 = re::serializeObject(v11, (re::NetworkOPACKSerializer *)v24, a5, a4, (uint64_t)v20);
    *(void *)(*(void *)(a1 + 24) + 456) = 0;
    if (v20[0])
    {
      re::StreamWriterCopyingOutputStream::Flush((re::StreamWriterCopyingOutputStream *)v24);
      if (v25)
      {
        if (v29) {
          (*(void (**)(void))(*(void *)v25 + 40))();
        }
        uint64_t v29 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v25 = 0;
        ++v28;
      }
      re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)v24);
      return 1;
    }
    uint64_t v16 = *re::assetsLogObjects(v12);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
      if (v22) {
        long long v19 = *(unsigned char **)&v23[7];
      }
      else {
        long long v19 = v23;
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v31 = v18;
      __int16 v32 = 2080;
      __n128 v33 = v19;
      _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Failed to serialize payload for asset. Type: \"%s\". Details: %s", buf, 0x16u);
    }
    if (!v20[0] && v21 && (v22 & 1) != 0) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    re::StreamWriterCopyingOutputStream::Flush((re::StreamWriterCopyingOutputStream *)v24);
    if (v25)
    {
      if (v29) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      uint64_t v29 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v25 = 0;
      ++v28;
    }
    re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)v24);
  }
  else
  {
    v24[1] = 0;
    _OWORD v24[2] = 0;
    v24[0] = a6;
    if (v14) {
      return 1;
    }
    uint64_t v17 = *re::assetsLogObjects((re *)v14);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Failed to serialize payload for asset", v20, 2u);
    }
  }
  return 0;
}

re::FixedArrayInputStream *re::NetworkAssetSerializationManager::deserializeAsset(re::NetworkAssetSerializationManager *this, AssetService *a2, const char **a3, re::AssetSerializationScheme *a4, const char *a5, uint64_t a6, unint64_t *a7)
{
  if (*((unsigned char *)this + 40))
  {
    uint64_t v14 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)a2[130].var0, (unint64_t)a3);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 112))(v14);
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v21);
    re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)&v19);
    uint64_t v16 = re::NetworkAssetSerializationManager::internalDeserializeAsset(this, a2, a3, (re::TypeInfo *)v20, a4, a5, a6, a7);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v21);
    return v16;
  }
  else
  {
    return re::NetworkAssetSerializationManager::internalDeserializeAsset(this, a2, a3, 0, a4, a5, a6, a7);
  }
}

re::FixedArrayInputStream *re::NetworkAssetSerializationManager::internalDeserializeAsset(re::NetworkAssetSerializationManager *this, AssetService *a2, const char **a3, re::TypeInfo *a4, re::AssetSerializationScheme *a5, const char *a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v16 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)a2[130].var0, (unint64_t)a3);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 112))(v16);
  if (*((unsigned char *)this + 40))
  {
    re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)&v28, a6, a7, -1);
    uint64_t v18 = (re::FixedArrayInputStream *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 120))(v16);
    uint64_t v19 = (re *)*((void *)this + 4);
    *((void *)v19 + 57) = a5;
    uint64_t v20 = re::deserializeObject(v19, (re::NetworkOPACKDeserializer *)&v28, v18, a4, (uint64_t)v33);
    *(void *)(*((void *)this + 4) + 456) = 0;
    int v21 = LOBYTE(v33[0]);
    if (LOBYTE(v33[0]))
    {
      *a8 = v32[4];
    }
    else
    {
      signed int v24 = *re::assetsLogObjects(v20);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = re::TypeInfo::name(a4)[1];
        *(_DWORD *)long long buf = 136315138;
        uint64_t v37 = v26;
        _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "Failed to deserialize asset for type \"%s\".", buf, 0xCu);
      }
    }
    if (!LOBYTE(v33[0]) && v34 && (v35 & 1) != 0) {
      (*(void (**)(void))(*(void *)v34 + 40))();
    }
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v28);
    if (!v21) {
      return 0;
    }
  }
  else
  {
    uint64_t v22 = v17;
    int v28 = &unk_26E7144B8;
    char v29 = 0;
    uint64_t v30 = a6;
    uint64_t v31 = a7;
    re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)v32, a6, a7, -1);
    var0 = a2[130].var0;
    v33[1] = 0;
    v33[2] = 0;
    v33[0] = (uint64_t)var0;
    v27[0] = 0;
    uint64_t v18 = (re::FixedArrayInputStream *)re::AssetUtilities::deserializeIntrospectedAsset((uint64_t)&v28, a3, v33, v22, (uint64_t)a5, 2, (uint64_t)v27);
    *a8 = v32[12];
    int v28 = &unk_26E7144B8;
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v32);
  }
  return v18;
}

void re::NetworkAssetSerializationManager::~NetworkAssetSerializationManager(re::NetworkAssetSerializationManager *this)
{
}

void *re::allocInfo_AudioLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_85, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_85))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7A6C8, "AudioLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_85);
  }
  return &unk_26AF7A6C8;
}

void re::initInfo_AudioLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0xB1F2D5B8ED8A952ALL;
  v21[1] = "AudioLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A680, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A680);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "framework";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x5800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A6A8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "resource";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x8000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A6B0 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "assetURL";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xA800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7A6B8 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v18 = re::introspect_AudioFileAssetConfiguration((re::IntrospectionBase **)1);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "configuration";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 12;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7A6C0 = v19;
      __cxa_guard_release(&qword_26AF7A680);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7A6A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AudioLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AudioLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AudioLoadDescriptorParameters>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AudioLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void sub_2334DDBF4(_Unwind_Exception *a1)
{
}

double re::internal::defaultConstruct<re::AudioLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 0;
  *(unsigned char *)(a3 + 2) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = xmmword_234377550;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 168) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AudioLoadDescriptorParameters>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (a3[168]) {
    double result = re::DynamicString::deinit((re::DynamicString *)(a3 + 176));
  }
  if (a3[128]) {
    double result = re::DynamicString::deinit((re::DynamicString *)(a3 + 136));
  }
  if (a3[88]) {
    double result = re::DynamicString::deinit((re::DynamicString *)(a3 + 96));
  }
  if (a3[32])
  {
    return re::DynamicString::deinit((re::DynamicString *)(a3 + 40));
  }
  return result;
}

double re::internal::defaultConstructV2<re::AudioLoadDescriptorParameters>(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_234377550;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AudioLoadDescriptorParameters>(unsigned char *a1)
{
  if (a1[168]) {
    double result = re::DynamicString::deinit((re::DynamicString *)(a1 + 176));
  }
  if (a1[128]) {
    double result = re::DynamicString::deinit((re::DynamicString *)(a1 + 136));
  }
  if (a1[88]) {
    double result = re::DynamicString::deinit((re::DynamicString *)(a1 + 96));
  }
  if (a1[32])
  {
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  }
  return result;
}

re::AudioFileAssetProvider *re::AudioFileAssetProvider::AudioFileAssetProvider(re::AudioFileAssetProvider *this, re::AssetManager *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E6D6268;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A6A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A6A0))
  {
    qword_26AF7A698 = re::internal::getOrCreateInfo((re::internal *)"AudioLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_AudioLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_AudioLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF7A688, 0);
    __cxa_guard_release(&qword_26AF7A6A0);
  }
  qword_26AF7A690 = qword_26AF7A698;
  if (a2)
  {
    *(_OWORD *)((char *)this + 24) = *((_OWORD *)a2 + 65);
    uint64_t v4 = *((void *)a2 + 155);
    *((void *)this + 5) = *((void *)a2 + 141);
    *((void *)this + 6) = v4;
  }
  return this;
}

void re::AudioFileAssetProvider::~AudioFileAssetProvider(re::AudioFileAssetProvider *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AudioFileAssetProvider::loadAssetWithPath(re::AudioFileAssetProvider *this, re::AudioFileAsset *a2, const re::DynamicString *a3, uint64_t a4)
{
  if (*(void *)(a4 + 8)) {
    int v7 = *(const char **)(a4 + 16);
  }
  else {
    int v7 = (const char *)(a4 + 9);
  }
  BOOL v8 = re::AudioFileAsset::prepareToLoadFrom(a3, v7);
  uint64_t v9 = *((void *)a2 + 3);
  uint64_t v10 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v8);
  uint64_t v11 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v9, (unint64_t)v10);
  uint64_t v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, const re::DynamicString *, void, void))(*(void *)v11 + 24))(v11, a3, 0, 0);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v13 = (re::AudioFileAsset *)re::DynamicString::setCapacity(&v20, 0);
  BYTE8(v24) = 0;
  char v25 = 0;
  *(void *)&long long v24 = a3;
  uint64_t v17 = (const char *)*re::AudioFileAsset::assetType(v13);
  *(void *)&long long v18 = strlen(v17);
  re::DynamicString::operator=((re::DynamicString *)&v20, (uint64_t)&v17);
  re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v20);
  char v14 = v25;
  long long v15 = v24;
  *(unsigned char *)this = 1;
  *((void *)this + 1) = v17;
  *((void *)this + 4) = v19;
  *((_OWORD *)this + 1) = v18;
  *(_OWORD *)((char *)this + 40) = v15;
  *((unsigned char *)this + 56) = v14;
  double result = v20;
  if (v20)
  {
    if (v21) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v20 + 40))();
    }
  }
  return result;
}

void sub_2334DE094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a16)
  {
    if (a17) {
      (*(void (**)(void))(*(void *)a16 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

void re::AudioFileAssetProvider::load(os_unfair_lock_s **this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    BOOL v8 = (const char *)*((void *)a2 + 2);
  }
  else {
    BOOL v8 = (char *)a2 + 9;
  }
  uint64_t v9 = (re::AudioFileAsset *)strcmp(v8, "AudioOptions");
  int v10 = (int)v9;
  uint64_t v11 = (const char *)*re::AudioFileAsset::assetType(v9);
  if (*((void *)a2 + 15)) {
    uint64_t v12 = (const char *)*((void *)a2 + 16);
  }
  else {
    uint64_t v12 = (char *)a2 + 121;
  }
  uint64_t v13 = (_anonymous_namespace_ *)strcmp(v12, v11);
  if (v10 | v13)
  {
    long long v18 = v41;
    long long v19 = v42;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v18;
    *(_OWORD *)(a3 + 24) = v19;
    return;
  }
  LOWORD(v41) = 0;
  BYTE2(v41) = 0;
  *(void *)((char *)&v41 + 4) = 0;
  long long v42 = xmmword_234377550;
  char v43 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v51 = 0;
  char v54 = 0;
  uint64_t Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::AudioLoadDescriptorParameters>(a2, (re::DynamicString **)&v41);
  if (Descriptor)
  {
    long long v15 = re::globalAllocators((re *)Descriptor);
    uint64_t v16 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 168, 8);
    re::AudioFileAsset::AudioFileAsset(v16);
    uint64_t v17 = (_anonymous_namespace_ *)re::AudioFileAsset::setConfiguration((uint64_t)v16, (uint64_t)&v41);
    if (v54)
    {
      re::AudioFileAssetProvider::loadAssetWithPath((re::AudioFileAssetProvider *)a3, (re::AudioFileAsset *)this, v16, (uint64_t)v55);
      goto LABEL_14;
    }
    if (v48 && v51)
    {
      uint64_t v23 = this[6];
      re::DynamicString::DynamicString((re::DynamicString *)v37, (const re::DynamicString *)&v49);
      re::BundleFilePathRegistry::findWithBundleID(v23, (uint64_t)v37, &v38);
      long long v24 = *(_anonymous_namespace_ **)&v37[0];
      if (*(void *)&v37[0])
      {
        if (BYTE8(v37[0])) {
          long long v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v37[0] + 40))();
        }
        memset(v37, 0, sizeof(v37));
      }
      if (v38)
      {
        long long v39 = 0u;
        long long v40 = 0u;
        re::DynamicString::setCapacity(&v39, 0);
        if (BYTE8(v52)) {
          char v25 = (const char *)v53;
        }
        else {
          char v25 = (char *)&v52 + 9;
        }
        if (re::Bundle::pathForResource(&v38, v25, (re::DynamicString *)&v39))
        {
          re::AudioFileAssetProvider::loadAssetWithPath((re::AudioFileAssetProvider *)a3, (re::AudioFileAsset *)this, v16, (uint64_t)&v39);
        }
        else
        {
          if (BYTE8(v52)) {
            char v29 = (char *)v53;
          }
          else {
            char v29 = (char *)&v52 + 9;
          }
          if (BYTE8(v49)) {
            uint64_t v30 = (char *)v50;
          }
          else {
            uint64_t v30 = (char *)&v49 + 9;
          }
          re::DynamicString::format((re::DynamicString *)"Bad request - Couldn't find file %s in bundle with path %s", (re::DynamicString *)&v34, v29, v30);
          long long v31 = v34;
          uint64_t v32 = v35;
          uint64_t v33 = v36;
          *(unsigned char *)a3 = 0;
          *(_OWORD *)(a3 + 8) = v31;
          *(void *)(a3 + 24) = v32;
          *(void *)(a3 + 32) = v33;
        }
        if (void)v39 && (BYTE8(v39)) {
          (*(void (**)(void))(*(void *)v39 + 40))();
        }
      }
      else
      {
        if (BYTE8(v49)) {
          uint64_t v26 = (char *)v50;
        }
        else {
          uint64_t v26 = (char *)&v49 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"Bad request - Couldn't find bundle with path %s", (re::DynamicString *)&v39, v26);
        long long v27 = v39;
        long long v28 = v40;
        *(unsigned char *)a3 = 0;
        *(_OWORD *)(a3 + 8) = v27;
        *(_OWORD *)(a3 + 24) = v28;
      }

      goto LABEL_14;
    }
    long long v20 = "Bad request - Couldn't load audio file without bundle path or asset URL";
  }
  else
  {
    long long v20 = "Failed to extract AudioSourceAsset parameters";
  }
  long long v21 = v39;
  long long v22 = v40;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v21;
  *(_OWORD *)(a3 + 24) = v22;
LABEL_14:
  if (v54 && v55[0])
  {
    if (v55[1]) {
      (*(void (**)(void))(*(void *)v55[0] + 40))();
    }
    memset(v55, 0, sizeof(v55));
  }
  if (v51 && (void)v52)
  {
    if (BYTE8(v52)) {
      (*(void (**)(void))(*(void *)v52 + 40))();
    }
    long long v52 = 0u;
    long long v53 = 0u;
  }
  if (v48 && (void)v49)
  {
    if (BYTE8(v49)) {
      (*(void (**)(void))(*(void *)v49 + 40))();
    }
    long long v49 = 0u;
    long long v50 = 0u;
  }
  if (v43 && v44 && (v45 & 1) != 0) {
    (*(void (**)(void))(*(void *)v44 + 40))();
  }
}

void sub_2334DE558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (a14)
  {
    if (a15) {
      (*(void (**)(void))(*(void *)a14 + 40))();
    }
  }

  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)va);
  _Unwind_Resume(a1);
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::AudioLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2)
{
  uint64_t v2 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A6A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v7 = __cxa_guard_acquire(&qword_26AF7A6A0);
    uint64_t v2 = a2;
    int v8 = v7;
    a1 = v5;
    if (v8)
    {
      qword_26AF7A698 = re::internal::getOrCreateInfo((re::internal *)"AudioLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_AudioLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_AudioLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF7A688, 0);
      __cxa_guard_release(&qword_26AF7A6A0);
      a1 = v5;
      uint64_t v2 = a2;
    }
  }
  uint64_t v3 = (re **)qword_26AF7A698;
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v3, v2, 0);
}

void re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters(re::AudioLoadDescriptorParameters *this)
{
  if (*((unsigned char *)this + 168)) {
    re::DynamicString::deinit((re::AudioLoadDescriptorParameters *)((char *)this + 176));
  }
  if (*((unsigned char *)this + 128)) {
    re::DynamicString::deinit((re::AudioLoadDescriptorParameters *)((char *)this + 136));
  }
  if (*((unsigned char *)this + 88)) {
    re::DynamicString::deinit((re::AudioLoadDescriptorParameters *)((char *)this + 96));
  }
  if (*((unsigned char *)this + 32)) {
    re::DynamicString::deinit((re::AudioLoadDescriptorParameters *)((char *)this + 40));
  }
}

void re::AudioFileAssetProvider::makeDescriptorWithBundle(void *a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = a1;
  int v8 = a2;
  LOWORD(v46) = 0;
  BYTE2(v46) = 0;
  *(void *)((char *)&v46 + 4) = 0;
  long long v47 = xmmword_234377550;
  v48[0] = 0;
  unsigned __int8 v52 = 0;
  unsigned __int8 v54 = 0;
  v55[0] = 0;
  v58[0] = 0;
  char v61 = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a4, 0);
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0u;
  *(void *)(a4 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a4 + 112), 0);
  long long v40 = "AudioOptions";
  uint64_t v41 = 12;
  int v10 = re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)&v40);
  uint64_t v11 = (const char *)*re::AudioFileAsset::assetType(v10);
  size_t v12 = strlen(v11);
  long long v40 = v11;
  uint64_t v41 = v12;
  re::DynamicString::operator=((re::DynamicString *)(a4 + 112), (uint64_t)&v40);
  id v13 = [v7 bundleIdentifier];
  char v14 = (_anonymous_namespace_ *)[v13 UTF8String];

  LOBYTE(v40) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)&v43);
  re::Optional<re::DynamicString>::operator=(v55, &v40);
  if (_BYTE)v40 && v41 && (v42) {
    (*(void (**)(void))(*(void *)v41 + 40))();
  }
  long long v15 = v8;
  uint64_t v16 = (_anonymous_namespace_ *)[(_anonymous_namespace_ *)v15 UTF8String];
  LOBYTE(v40) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)&v37);
  re::Optional<re::DynamicString>::operator=(v58, &v40);
  if (_BYTE)v40 && v41 && (v42) {
    (*(void (**)(void))(*(void *)v41 + 40))();
  }
  long long v17 = *((_OWORD *)a3 + 1);
  long long v46 = *(_OWORD *)a3;
  long long v47 = v17;
  re::Optional<re::DynamicString>::operator=(v48, a3 + 32);
  int v18 = v52;
  if (v52 || a3[72])
  {
    if (!v52 || a3[72])
    {
      if (!v52 && a3[72])
      {
        int v18 = 1;
        unsigned __int8 v52 = 1;
      }
      int v53 = *((_DWORD *)a3 + 19);
    }
    else
    {
      int v18 = 0;
      unsigned __int8 v52 = 0;
    }
  }
  else
  {
    int v18 = 0;
  }
  unsigned __int8 v54 = a3[80];
  v21[0] = v46;
  v21[1] = v47;
  char v22 = v48[0];
  if (v48[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v49);
    int v18 = v52;
  }
  char v25 = v18;
  if (v18) {
    int v26 = v53;
  }
  unsigned __int8 v27 = v54;
  unsigned __int8 v28 = v55[0];
  if (v55[0]) {
    re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)&v56);
  }
  unsigned __int8 v31 = v58[0];
  if (v58[0]) {
    re::DynamicString::DynamicString((re::DynamicString *)&v32, (const re::DynamicString *)&v59);
  }
  char v34 = v61;
  if (v61) {
    re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v62);
  }
  re::AssetLoadDescriptor::setIntrospectableData((char **)a4, (const re::IntrospectionBase *)qword_26AF7A690, (const re::IntrospectionBase **)v21, 0);
  if (v34 && (void)v35)
  {
    if (BYTE8(v35)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v35 + 40))(v35, v36, v19, v20);
    }
    long long v35 = 0u;
    long long v36 = 0u;
  }
  if (v31 && (void)v32)
  {
    if (BYTE8(v32)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v32 + 40))(v32, v33, v19, v20);
    }
    long long v32 = 0u;
    long long v33 = 0u;
  }
  if (v28 && (void)v29)
  {
    if (BYTE8(v29)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v29 + 40))(v29, v30, v19, v20);
    }
    long long v29 = 0u;
    long long v30 = 0u;
  }
  if (v22 && (void)v23)
  {
    if (BYTE8(v23)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v24, v19, v20);
    }
    long long v23 = 0u;
    long long v24 = 0u;
  }
  if (v37 && (v38 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v37 + 40))(v37, v39, v19, v20);
  }
  if (v43 && (v44 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v45, v19, v20);
  }
  if (v61 && (void)v62)
  {
    if (BYTE8(v62)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v62 + 40))(v62, v63, v19, v20);
    }
    long long v62 = 0u;
    long long v63 = 0u;
  }
  if (v58[0] && (void)v59)
  {
    if (BYTE8(v59)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v59 + 40))(v59, v60, v19, v20);
    }
    long long v59 = 0u;
    long long v60 = 0u;
  }
  if (v55[0] && (void)v56)
  {
    if (BYTE8(v56)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v56 + 40))(v56, v57, v19, v20);
    }
    long long v56 = 0u;
    long long v57 = 0u;
  }
  if (v48[0] && v49 && (v50 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v49 + 40))(v49, v51, v19, v20);
  }
}

void sub_2334DED5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a9);
  if (a36 && (a37 & 1) != 0) {
    (*(void (**)(void))(*(void *)a36 + 40))();
  }
  if (a45)
  {
    if (a46) {
      (*(void (**)(void))(*(void *)a45 + 40))();
    }
  }
  re::AssetLoadDescriptor::~AssetLoadDescriptor(v50);
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a49);

  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetProvider::makeDescriptorWithURL@<X0>(_anonymous_namespace_ *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  LOWORD(v34) = 0;
  BYTE2(v34) = 0;
  *(void *)((char *)&v34 + 4) = 0;
  long long v35 = xmmword_234377550;
  v36[0] = 0;
  unsigned __int8 v40 = 0;
  unsigned __int8 v42 = 0;
  char v43 = 0;
  char v46 = 0;
  v49[0] = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0u;
  *(void *)(a3 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a3 + 112), 0);
  unsigned __int8 v31 = "AudioOptions";
  uint64_t v32 = 12;
  id v7 = re::DynamicString::operator=((re::DynamicString *)a3, (uint64_t)&v31);
  int v8 = (const char *)*re::AudioFileAsset::assetType(v7);
  size_t v9 = strlen(v8);
  unsigned __int8 v31 = v8;
  uint64_t v32 = v9;
  re::DynamicString::operator=((re::DynamicString *)(a3 + 112), (uint64_t)&v31);
  LOBYTE(v31) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v32, a1);
  re::Optional<re::DynamicString>::operator=(v49, &v31);
  if (_BYTE)v31 && v32 && (v33) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
  long long v10 = *((_OWORD *)a2 + 1);
  long long v34 = *(_OWORD *)a2;
  long long v35 = v10;
  re::Optional<re::DynamicString>::operator=(v36, a2 + 32);
  int v11 = v40;
  if (v40 || a2[72])
  {
    if (!v40 || a2[72])
    {
      if (!v40 && a2[72])
      {
        int v11 = 1;
        unsigned __int8 v40 = 1;
      }
      int v41 = *((_DWORD *)a2 + 19);
    }
    else
    {
      int v11 = 0;
      unsigned __int8 v40 = 0;
    }
  }
  else
  {
    int v11 = 0;
  }
  unsigned __int8 v42 = a2[80];
  v15[0] = v34;
  v15[1] = v35;
  char v16 = v36[0];
  if (v36[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v37);
    int v11 = v40;
  }
  char v19 = v11;
  if (v11) {
    int v20 = v41;
  }
  unsigned __int8 v21 = v42;
  char v22 = v43;
  if (v43) {
    re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v44);
  }
  char v25 = v46;
  if (v46) {
    re::DynamicString::DynamicString((re::DynamicString *)&v26, (const re::DynamicString *)&v47);
  }
  unsigned __int8 v28 = v49[0];
  if (v49[0]) {
    re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)&v50);
  }
  uint64_t result = re::AssetLoadDescriptor::setIntrospectableData((char **)a3, (const re::IntrospectionBase *)qword_26AF7A690, (const re::IntrospectionBase **)v15, 0);
  if (v28)
  {
    uint64_t result = v29;
    if ((void)v29)
    {
      if (BYTE8(v29)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v29 + 40))(v29, v30, v13, v14);
      }
      long long v29 = 0u;
      long long v30 = 0u;
    }
  }
  if (v25)
  {
    uint64_t result = v26;
    if ((void)v26)
    {
      if (BYTE8(v26)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v27, v13, v14);
      }
      long long v26 = 0u;
      long long v27 = 0u;
    }
  }
  if (v22)
  {
    uint64_t result = v23;
    if ((void)v23)
    {
      if (BYTE8(v23)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v24, v13, v14);
      }
      long long v23 = 0u;
      long long v24 = 0u;
    }
  }
  if (v16)
  {
    uint64_t result = v17;
    if ((void)v17)
    {
      if (BYTE8(v17)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v17 + 40))(v17, v18, v13, v14);
      }
      long long v17 = 0u;
      long long v18 = 0u;
    }
  }
  if (v49[0])
  {
    uint64_t result = v50;
    if ((void)v50)
    {
      if (BYTE8(v50)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v50 + 40))(v50, v51, v13, v14);
      }
      long long v50 = 0u;
      long long v51 = 0u;
    }
  }
  if (v46)
  {
    uint64_t result = v47;
    if ((void)v47)
    {
      if (BYTE8(v47)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v47 + 40))(v47, v48, v13, v14);
      }
      long long v47 = 0u;
      long long v48 = 0u;
    }
  }
  if (v43)
  {
    uint64_t result = v44;
    if ((void)v44)
    {
      if (BYTE8(v44)) {
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v44 + 40))(v44, v45, v13, v14);
      }
      long long v44 = 0u;
      long long v45 = 0u;
    }
  }
  if (v36[0])
  {
    uint64_t result = v37;
    if (v37)
    {
      if (v38) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v37 + 40))(v37, v39, v13, v14);
      }
    }
  }
  return result;
}

void sub_2334DF32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a9);
  re::AssetLoadDescriptor::~AssetLoadDescriptor(v41);
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a41);
  _Unwind_Resume(a1);
}

__n128 re::AudioFileAssetProvider::resolveChild@<Q0>(re::AudioFileAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = v9;
  uint64_t v7 = v10;
  uint64_t v8 = v11;
  *(unsigned char *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  return result;
}

void *re::AudioFileAssetProvider::getDescription(re::AudioFileAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  LOWORD(v10) = 0;
  BYTE2(v10) = 0;
  HIDWORD(v10) = 0;
  int v11 = 0;
  long long v12 = xmmword_234377550;
  char v13 = 0;
  char v16 = 0;
  char v17 = 0;
  char v18 = 0;
  char v20 = 0;
  char v22 = 0;
  if (re::AssetLoadDescriptor::getIntrospectableData<re::AudioLoadDescriptorParameters>(a2, &v10))
  {
    if (v22)
    {
      re::DynamicString::operator=(a3, (re::DynamicString *)v23);
    }
    else if (v18 && v20)
    {
      re::DynamicString::operator+((re::DynamicString *)v19, "/", (re::DynamicString *)&v7);
      re::DynamicString::operator+((re::DynamicString *)&v7, (uint64_t)v21, (re::DynamicString *)v9);
      re::DynamicString::operator=(a3, (re::DynamicString *)v9);
      if (*(void *)&v9[0])
      {
        if (BYTE8(v9[0])) {
          (*(void (**)(void))(**(void **)&v9[0] + 40))();
        }
        memset(v9, 0, sizeof(v9));
      }
      if (v7 && (v8 & 1) != 0) {
        (*(void (**)(void))(*(void *)v7 + 40))();
      }
    }
    if ((_BYTE)v10) {
      uint64_t v4 = "streamedAsset";
    }
    else {
      uint64_t v4 = "preloadAsset";
    }
    if ((_BYTE)v10) {
      size_t v5 = 13;
    }
    else {
      size_t v5 = 12;
    }
    __n128 result = re::DynamicString::append(a3, v4, v5);
  }
  else
  {
    *(void *)&v9[0] = "mangled";
    *((void *)&v9[0] + 1) = 7;
    __n128 result = re::DynamicString::operator=(a3, (uint64_t)v9);
  }
  if (v22)
  {
    __n128 result = (void *)v23[0];
    if (v23[0])
    {
      if (v23[1]) {
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v23[0] + 40))();
      }
      memset(v23, 0, sizeof(v23));
    }
  }
  if (v20)
  {
    __n128 result = (void *)v21[0];
    if (v21[0])
    {
      if (v21[1]) {
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v21[0] + 40))();
      }
      memset(v21, 0, sizeof(v21));
    }
  }
  if (v18)
  {
    __n128 result = (void *)v19[0];
    if (v19[0])
    {
      if (v19[1]) {
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v19[0] + 40))();
      }
      memset(v19, 0, sizeof(v19));
    }
  }
  if (v13)
  {
    __n128 result = (void *)v14;
    if (v14)
    {
      if (v15) {
        return (void *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
      }
    }
  }
  return result;
}

void sub_2334DF674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)va);
  _Unwind_Resume(a1);
}

const char *re::AudioFileAssetProvider::schemeName(re::AudioFileAssetProvider *this)
{
  return "AudioOptions";
}

re::ecs2::ECSJSONSerializer *re::ecs2::ECSJSONSerializer::ECSJSONSerializer(re::ecs2::ECSJSONSerializer *this)
{
  *(void *)&v4.var0 = 0xE1F66B0F30BD1E9ELL;
  v4.var1 = "ECSJSONSerializer";
  uint64_t v2 = re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::Serializer((uint64_t)this, &v4, 13);
  *(void *)uint64_t v2 = &unk_26E6D44A0;
  *(_WORD *)(v2 + 336) = 1;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_DWORD *)(v2 + 376) = 0;
  *(void *)(v2 + 380) = 0x7FFFFFFFLL;
  *(void *)(v2 + 400) = 0;
  *(void *)(v2 + 408) = 0;
  *(void *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 416) = 0;
  *(void *)(v2 + 504) = 0;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_DWORD *)(v2 + 456) = 0;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_DWORD *)(v2 + 496) = 0;
  re::StringID::destroyString((re::StringID *)&v4);
  *(void *)this = &unk_26E6D6308;
  return this;
}

re::ecs2::ECSJSONDeserializer *re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer(re::ecs2::ECSJSONDeserializer *this, AssetService *a2)
{
  *(void *)&v7.var0 = 0x3373FC80C73C66A0;
  v7.var1 = "ECSJSONDeserializer";
  uint64_t v4 = re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::Serializer((uint64_t)this, &v7, 13);
  *(void *)uint64_t v4 = &unk_26E6CBD38;
  *(_WORD *)(v4 + 336) = 1;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_DWORD *)(v4 + 376) = 0;
  *(void *)(v4 + 380) = 0x7FFFFFFFLL;
  *(void *)(v4 + 400) = 0;
  *(void *)(v4 + 408) = 0;
  *(void *)(v4 + 392) = 0;
  *(_DWORD *)(v4 + 416) = 0;
  *(void *)(v4 + 504) = 0;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_DWORD *)(v4 + 456) = 0;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_DWORD *)(v4 + 496) = 0;
  re::StringID::destroyString((re::StringID *)&v7);
  *(void *)this = &unk_26E6D43F8;
  size_t v5 = re::DirectAssetDeserialize::DirectAssetDeserialize((re::ecs2::ECSJSONDeserializer *)((char *)this + 512), a2, 0);
  *((void *)this + 79) = 0;
  *((void *)this + 78) = 0;
  *((void *)this + 77) = v5;
  *((void *)this + 33) = (char *)this + 616;
  return this;
}

void *re::ecs2::ECSOPACKDeserializer::ECSOPACKDeserializer(void *a1, uint64_t a2)
{
  *(void *)&v7.var0 = 0x337AFDA7A6DC2A0CLL;
  v7.var1 = "ECSOPACKDeserializer";
  re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SerializerV2((uint64_t)a1, &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  *a1 = &unk_26E6D63D8;
  a1[56] = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  size_t v5 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v4);
  re::DirectAssetDeserialize::DirectAssetDeserialize((re::DirectAssetDeserialize *)(a1 + 57), v5, 0);
  a1[72] = 0;
  a1[71] = 0;
  a1[56] = a2;
  a1[70] = a1 + 57;
  a1[25] = a1 + 70;
  return a1;
}

void re::ecs2::ECSJSONSerializer::~ECSJSONSerializer(re::ecs2::ECSJSONSerializer *this)
{
  *(void *)this = &unk_26E6D44A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 472);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 432);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D44A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 472);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 432);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::ECSOPACKSerializer::~ECSOPACKSerializer(re::ecs2::ECSOPACKSerializer *this)
{
  *(void *)this = &unk_26E6C8CF8;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6C8CF8;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::ECSOPACKDeserializer::~ECSOPACKDeserializer(re::ecs2::ECSOPACKDeserializer *this)
{
  *(void *)this = &unk_26E6D63D8;
  *((void *)this + 57) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 464);
  *(void *)this = &unk_26E6C7278;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D63D8;
  *((void *)this + 57) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 464);
  *(void *)this = &unk_26E6C7278;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::Serializer(uint64_t a1, const StringID *a2, int a3)
{
  *(void *)a1 = &unk_26E6D4508;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::Encoder(a1 + 24, a3);
  *(void *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 324) = 0x7FFFFFFFLL;
  return a1;
}

uint64_t re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::Encoder(uint64_t result, int a2)
{
  *(void *)(result + 128) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 96) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(_DWORD *)(result + 136) = a2;
  *(void *)(result + 152) = 1024;
  *(unsigned char *)(result + 140) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A748, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = result;
    int v3 = __cxa_guard_acquire(&qword_26AF7A748);
    __n128 result = v5;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v2, (uint64_t)v6);
      if (v6[0]) {
        uint64_t v4 = v7;
      }
      else {
        uint64_t v4 = 0;
      }
      _MergedGlobals_86 = v4;
      __cxa_guard_release(&qword_26AF7A748);
      __n128 result = v5;
    }
  }
  if (_MergedGlobals_86) {
    *(void *)(result + 152) = _MergedGlobals_86;
  }
  return result;
}

BOOL re::AssetCompatibility::sceneAssetNeedsCopyForWriting(re::AssetCompatibility *this, uint64_t a2)
{
  v16[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_5;
  }
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2)
  {
    uint64_t v6 = *((void *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v6, 0);
  }
  uint64_t v7 = *((void *)this + 1);
  if (!v7 || (unsigned int v8 = atomic_load((unsigned int *)(v7 + 704)), v8 != 2))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "assetHandle.isLoaded()", "sceneAssetNeedsCopyForWriting", 318);
    _os_crash();
    __break(1u);
  }
  re::AssetHandle::serializableAsset(this, v16);
  if (a2 >= 5)
  {
    if ((unint64_t)a2 >= 9)
    {
      if ((unint64_t)a2 >= 0xC) {
        int v9 = 0;
      }
      else {
        int v9 = 3;
      }
    }
    else
    {
      int v9 = 2;
    }
  }
  else
  {
    int v9 = 1;
  }
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  v14[2] = ___ZN2re18AssetCompatibility29sceneAssetNeedsCopyForWritingERKNS_11AssetHandleEx_block_invoke;
  unint64_t v14[3] = &__block_descriptor_tmp_4;
  int v15 = v9;
  int v10 = v13;
  if (!v12[0]) {

  }
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v16);
  return v10 == 0;
}

uint64_t ___ZN2re18AssetCompatibility29sceneAssetNeedsCopyForWritingERKNS_11AssetHandleEx_block_invoke@<X0>(uint64_t result@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = result;
  if (a2[4])
  {
    uint64_t v6 = a2[6];
    if (v6)
    {
      uint64_t v7 = 24 * v6;
      uint64_t v8 = a2[8] + 8;
      do
      {
        __n128 result = *(void *)v8;
        if (*(void *)v8)
        {
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
          if ((result & 1) == 0)
          {
            __n128 result = (*(uint64_t (**)(void))(**(void **)v8 + 48))();
            if (result) {
              goto LABEL_18;
            }
          }
        }
        v8 += 24;
        v7 -= 24;
      }
      while (v7);
    }
  }
  unsigned int v9 = *(_DWORD *)(v4 + 32);
  if (v9)
  {
    uint64_t v10 = a2[6];
    if (v10)
    {
      int v11 = (uint64_t *)a2[8];
      uint64_t v12 = 24 * v10;
      while (1)
      {
        uint64_t v13 = *v11;
        uint64_t v14 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)result);
        __n128 result = re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v14, v13);
        if (result)
        {
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
          re::getDowngradeFunctions(v15, v9, (uint64_t)v18);
          uint64_t v16 = v18[2];
          __n128 result = v18[0];
          if (v18[0] && v18[4]) {
            __n128 result = (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
          }
          if (v16) {
            break;
          }
        }
        v11 += 3;
        v12 -= 24;
        if (!v12) {
          goto LABEL_17;
        }
      }
LABEL_18:
      char v17 = 0;
      goto LABEL_19;
    }
  }
LABEL_17:
  char v17 = 1;
LABEL_19:
  *a3 = 1;
  a3[8] = v17;
  return result;
}

void anonymous namespace'::walkEntityAssetData(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    for (uint64_t i = 112 * v4; i; i -= 112)
    {
      if ((_BYTE)v10)
      {
        if ((_BYTE)v11)
        {
          (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v6);
          if (*a3)
          {
            BOOL v8 = a3[8] == 0;
            goto LABEL_10;
          }
        }
        else
        {
          *a3 = v10;
          a3[8] = 0;
        }
      }
      else
      {
        *a3 = 0;
        id v9 = v11;
        id v11 = 0;
        *((void *)a3 + 1) = v9;
      }
      BOOL v8 = 1;
LABEL_10:
      if (!(_BYTE)v10) {

      }
      if (v8) {
        return;
      }
      v6 += 112;
    }
  }
  *a3 = 1;
  a3[8] = 1;
}

uint64_t *re::AssetCompatibility::sceneAssetCopyForWriting@<X0>(re::AssetCompatibility *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 1);
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  unsigned int v7 = atomic_load((unsigned int *)(v6 + 704));
  if (v7 != 2)
  {
    uint64_t v8 = *((void *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v8, 0);
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9 && (unsigned int v10 = atomic_load((unsigned int *)(v9 + 704)), v10 == 2))
  {
    re::AssetHandle::serializableAsset(this, &v32);
    uint64_t v11 = (uint64_t)v32;
    uint64_t v13 = re::globalAllocators(v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 40, 8);
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(void *)(v14 + 32) = 0;
    if (a2 >= 5)
    {
      if ((unint64_t)a2 >= 9)
      {
        if ((unint64_t)a2 >= 0xC) {
          int v15 = 0;
        }
        else {
          int v15 = 3;
        }
      }
      else
      {
        int v15 = 2;
      }
    }
    else
    {
      int v15 = 1;
    }
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 0x40000000;
    void v30[2] = ___ZN2re18AssetCompatibility24sceneAssetCopyForWritingERKNS_11AssetHandleEx_block_invoke;
    void v30[3] = &__block_descriptor_tmp_9;
    int v31 = v15;
    if (v28[0])
    {
      uint64_t v21 = *((void *)this + 1);
      if (v21) {
        uint64_t v22 = *(void *)(v21 + 24);
      }
      else {
        uint64_t v22 = 0;
      }
      long long v24 = re::SceneAsset::assetType(v20);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, uint64_t, void))(*(void *)v22 + 416))(v27, v22, v14, v24, 0, 2, 0);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v25, (const re::AssetHandle *)v27);
      *(unsigned char *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v25;
      long long v25 = 0uLL;
      *(void *)(a3 + 24) = v26;
      uint64_t v26 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    else
    {
      id v23 = v29;
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = v23;
    }
    if (!v28[0]) {

    }
    return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v32);
  }
  else
  {
    uint64_t v16 = re::AssetHandle::assetInfo(this);
    if (v16[17]) {
      char v17 = (char *)v16[18];
    }
    else {
      char v17 = (char *)v16 + 137;
    }
    re::DynamicString::format((re::DynamicString *)"Failed to load '%s'.", (re::DynamicString *)&v32, v17);
    uint64_t v18 = v27[0];
    v27[0] = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v18;

    __n128 result = v32;
    if (v32 && (v33 & 1) != 0) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v32 + 40))();
    }
  }
  return result;
}

void anonymous namespace'::makeError(__CFString *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = v3 >> 1;
  if ((v3 & 1) == 0) {
    unint64_t v4 = v3 >> 1;
  }
  if (v4)
  {
    if (v3) {
      uint64_t v5 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v5 = a2 + 9;
    }
    re::WrappedError::make((re::WrappedError *)@"REAssetCompatibilityErrorDomain", a1, v5, a3);
  }
  else
  {
    re::WrappedError::make((re::WrappedError *)@"REAssetCompatibilityErrorDomain", a1, 0, a3);
  }
}

void anonymous namespace'::sceneAssetDeepCopy(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = 112 * v3;
    do
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::add(a3, (uint64_t)v8);
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v8);
      v6 += 112;
      v7 -= 112;
    }
    while (v7);
  }
}

void ___ZN2re18AssetCompatibility24sceneAssetCopyForWritingERKNS_11AssetHandleEx_block_invoke(re::ecs2::ComponentTypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (**v14)(int *__return_ptr, uint64_t, void);
  int v15;
  unsigned char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  id v27;
  uint64_t v28;
  char v29;
  void *v30;
  int v31;
  unsigned char v32[14];
  __int16 v33;
  unsigned char v34[18];
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;

  unsigned __int8 v40 = *MEMORY[0x263EF8340];
  unsigned int v6 = *((_DWORD *)a1 + 8);
  if (v6 && (uint64_t v7 = *(void *)(a2 + 48)) != 0)
  {
    uint64_t v8 = *(uint64_t **)(a2 + 64);
    uint64_t v9 = &v8[3 * v7];
    while (1)
    {
      uint64_t v11 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v12 = re::ecs2::ComponentTypeRegistry::instance(a1);
      a1 = (re::ecs2::ComponentTypeRegistry *)re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v12, v11);
      if (a1)
      {
        uint64_t v13 = (*(uint64_t (**)(re::ecs2::ComponentTypeRegistry *))(*(void *)a1 + 48))(a1);
        re::getDowngradeFunctions(v13, v6, (uint64_t)&v35);
        if ((void)v36)
        {
          uint64_t v14 = (void (**)(int *__return_ptr, uint64_t, void))v37;
          while (1)
          {
            (*v14)(&v31, v10, 0);
            if (!(_BYTE)v31) {
              break;
            }
            if (++v14 == (void (**)(int *__return_ptr, uint64_t, void))(v37 + 8 * v36)) {
              goto LABEL_9;
            }
          }
          if (v32[12]) {
            uint64_t v16 = *(unsigned char **)&v34[4];
          }
          else {
            uint64_t v16 = &v32[13];
          }
          re::DynamicString::format((re::DynamicString *)"Downgrade function failed for component. %s", (re::DynamicString *)&v28, v16);
          uint64_t v3 = v30;
          long long v30 = 0;

          if (v28 && (v29 & 1) != 0) {
            (*(void (**)(void))(*(void *)v28 + 40))();
          }
          if (!(_BYTE)v31 && *(void *)&v32[4] && (v32[12] & 1) != 0) {
            (*(void (**)(void))(**(void **)&v32[4] + 40))();
          }
          int v15 = 0;
        }
        else
        {
LABEL_9:
          int v15 = 1;
        }
        a1 = (re::ecs2::ComponentTypeRegistry *)v35;
        if ((void)v35 && (void)v37) {
          a1 = (re::ecs2::ComponentTypeRegistry *)(*(uint64_t (**)(void))(*(void *)v35 + 40))();
        }
        if (!v15) {
          break;
        }
      }
      v8 += 3;
      if (v8 == v9) {
        goto LABEL_27;
      }
    }
    long long v27 = v3;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v27;
  }
  else
  {
LABEL_27:
    if (*(void *)(a2 + 32) && (int)*(void *)(a2 + 48) >= 1)
    {
      char v17 = *(void *)(a2 + 48) + 1;
      do
      {
        uint64_t v18 = (v17 - 2);
        char v19 = *(void *)(a2 + 48);
        if (v19 <= v18)
        {
          unsigned __int8 v28 = 0;
          char v38 = 0u;
          uint64_t v39 = 0u;
          long long v36 = 0u;
          uint64_t v37 = 0u;
          long long v35 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v31 = 136315906;
          *(void *)uint64_t v32 = "operator[]";
          *(_WORD *)&v32[8] = 1024;
          *(_DWORD *)&v32[10] = 789;
          char v33 = 2048;
          *(void *)uint64_t v34 = (v17 - 2);
          *(_WORD *)&unsigned char v34[8] = 2048;
          *(void *)&v34[10] = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_43:
          unsigned __int8 v28 = 0;
          char v38 = 0u;
          uint64_t v39 = 0u;
          long long v36 = 0u;
          uint64_t v37 = 0u;
          long long v35 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v31 = 136315906;
          *(void *)uint64_t v32 = "removeAt";
          *(_WORD *)&v32[8] = 1024;
          *(_DWORD *)&v32[10] = 931;
          char v33 = 2048;
          *(void *)uint64_t v34 = (v17 - 2);
          *(_WORD *)&unsigned char v34[8] = 2048;
          *(void *)&v34[10] = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        char v20 = *(void *)(a2 + 64) + 24 * v18;
        uint64_t v21 = *(void *)(v20 + 8);
        if (v21
          && ((*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v21) & 1) == 0
          && (*(unsigned int (**)(void))(**(void **)(v20 + 8) + 48))())
        {
          re::ecs2::ComponentHandleAssetData::release((re::DynamicString **)v20, *(re::Allocator **)(a2 + 32));
          *(void *)char v20 = 0;
          *(void *)(v20 + 8) = 0;
          *(unsigned char *)(v20 + 16) = 0;
          char v19 = *(void *)(a2 + 48);
          if (v19 <= v18) {
            goto LABEL_43;
          }
          uint64_t v22 = v19 - 1;
          if (v19 - 1 > v18)
          {
            id v23 = *(void *)(a2 + 64);
            long long v24 = v23 + 24 * v19;
            long long v25 = v23 + 24 * v18;
            uint64_t v26 = *(_OWORD *)(v24 - 24);
            *(unsigned char *)(v25 + 16) = *(unsigned char *)(v24 - 8);
            *(_OWORD *)long long v25 = v26;
            uint64_t v22 = *(void *)(a2 + 48) - 1;
          }
          *(void *)(a2 + 48) = v22;
          ++*(_DWORD *)(a2 + 56);
        }
        --v17;
      }
      while (v17 > 1);
    }
    *(unsigned char *)a3 = 1;
    *(unsigned char *)(a3 + 8) = 1;
  }
}

uint64_t *re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary@<X0>(re::AssetCompatibility *this@<X0>, const re::internal::AssetEntry *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (**v27)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *);
  _anonymous_namespace_ *v28;
  char v29;
  uint64_t v30;
  re::SceneAsset *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t **v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (**v45)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *);
  const re::IntrospectionBase **v46;
  void ***v47;
  char *v48;
  uint64_t **v49;
  uint64_t v50;
  int **v51;
  void *v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned char v57[16];
  void v58[2];
  void v59[2];
  uint64_t v60;
  int v61;
  void (**v62)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *);
  uint64_t v63;
  const re::IntrospectionBase **v64;
  int v65[2];
  int v66;
  char *v67;
  int *v68;
  uint64_t *v69;
  long long v70;
  uint64_t **v71;
  uint64_t v72;
  void v73[7];
  const re::IntrospectionBase **v74;
  void (**v75)(void **, int *);
  long long v76;
  void **v77;
  char *v78[7];

  v78[5] = *(char **)MEMORY[0x263EF8340];
  if ((unint64_t)a3 >= 0xC) {
    int v7 = 0;
  }
  else {
    int v7 = 3;
  }
  if ((unint64_t)a3 >= 9) {
    int v8 = v7;
  }
  else {
    int v8 = 2;
  }
  if (a3 >= 5) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 1;
  }
  uint64_t v10 = (uint64_t *)*((void *)this + 33);
  if (v10)
  {
    uint64_t v13 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)a2 + 130), (unint64_t)v10);
    uint64_t v14 = re::internal::AssetEntry::assetPointer(this);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 256))(v78, v13, v14);
    if (v78[0])
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 112))(v13);
      if (v15)
      {
        uint64_t v16 = (const re::IntrospectionBase *)v15;
        if (*(_DWORD *)(v15 + 16) == 8)
        {
          long long v62 = 0;
          v59[1] = 0;
          long long v60 = 0;
          v59[0] = 0;
          char v61 = 0;
          if (v9)
          {
            re::getDowngradeFunctions(v15, v9, (uint64_t)&v69);
            re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::operator=((uint64_t)v59, (uint64_t)&v69);
            if (v69)
            {
              if (v72) {
                (*(void (**)(void))(*v69 + 40))();
              }
            }
          }
          char v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v13 + 272))(v13, v78[0], a4);
          if (!v60 && (v17 & 1) == 0)
          {
            *(unsigned char *)a5 = 1;
            *(unsigned char *)(a5 + 8) = 0;
            goto LABEL_125;
          }
          if (v17)
          {
            unsigned __int8 v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v13 + 280))(v13, v78[0], a4);
            if (v28)
            {
              id v29 = 1;
              goto LABEL_48;
            }
          }
          else
          {
          }
          long long v30 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 120))(v13);
          if (!v30)
          {
            if (*((void *)this + 21)) {
              long long v36 = (char *)*((void *)this + 22);
            }
            else {
              long long v36 = (char *)this + 169;
            }
            re::DynamicString::format((re::DynamicString *)"Failed to allocate copy of AssetEntry '%s'.", (re::DynamicString *)&v69, v36);
            uint64_t v37 = v63;
            long long v63 = 0;
            *(unsigned char *)a5 = 0;
            *(void *)(a5 + 8) = v37;

            if (v69 && (v70 & 1) != 0) {
              (*(void (**)(void))(*v69 + 40))();
            }
LABEL_125:
            uint64_t v26 = (uint64_t *)v59[0];
            if (!v59[0]) {
              return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)v78);
            }
            long long v27 = v62;
            if (!v62) {
              return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)v78);
            }
            goto LABEL_127;
          }
          unsigned __int8 v28 = (_anonymous_namespace_ *)v30;
          id v29 = 0;
LABEL_48:
          unint64_t v69 = (uint64_t *)&unk_26E6D64A8;
          *(void *)&int v70 = a2;
          *((void *)&v70 + 1) = v10;
          uint64_t v71 = &v69;
          long long v77 = (void **)&v75;
          uint64_t v74 = (const re::IntrospectionBase **)v28;
          int v75 = (void (**)(void **, int *))&unk_26E6D64A8;
          long long v76 = v70;
          int v31 = (re::SceneAsset *)std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](&v69);
          if ((v29 & 1) == 0)
          {
            if (v10 == re::SceneAsset::assetType(v31))
            {
            }
            else
            {
              int v70 = 0uLL;
              {
                if (*((void *)this + 21)) {
                  uint64_t v32 = (char *)*((void *)this + 22);
                }
                else {
                  uint64_t v32 = (char *)this + 169;
                }
                re::DynamicString::format((re::DynamicString *)"Failed to perform introspection copy of AssetEntry '%s'.", (re::DynamicString *)&v69, v32);
                char v33 = v63;
                long long v63 = 0;
                *(unsigned char *)a5 = 0;
                *(void *)(a5 + 8) = v33;

                uint64_t v34 = v69;
                if (!v69 || (v70 & 1) == 0) {
                  goto LABEL_124;
                }
                long long v35 = (uint64_t **)*((void *)&v70 + 1);
LABEL_108:
                (*(void (**)(uint64_t *, uint64_t **))(*v34 + 40))(v34, v35);
LABEL_124:
                std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v74);
                goto LABEL_125;
              }
            }
            uint64_t v67 = 0;
            uint64_t v64 = 0;
            *(void *)uint64_t v65 = 0;
            long long v63 = 0;
            unsigned int v66 = 0;
            v58[0] = &unk_26E7147E8;
            v58[1] = &v63;
            if ((*(uint64_t (**)(uint64_t, void *, char *, void))(*(void *)v13 + 56))(v13, v58, v78[0], 0))
            {
              unint64_t v69 = (uint64_t *)&unk_26E7144B8;
              LOBYTE(v70) = 0;
              *((void *)&v70 + 1) = v67;
              uint64_t v71 = *(uint64_t ***)v65;
              re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)&v72, v67, v65[0], -1);
              if (*((void *)this + 14) == -1) {
                char v38 = 0;
              }
              else {
                char v38 = *((void *)this + 14);
              }
              re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v57, 2056, v38, (const char *)*v10);
              uint64_t v39 = (*(uint64_t (**)(uint64_t, const re::IntrospectionBase **, uint64_t **, void))(*(void *)v13 + 24))(v13, v74, &v69, 0);
              unsigned __int8 v40 = 0;
              if ((v39 & 1) == 0)
              {
                if (*((void *)this + 21)) {
                  int v41 = (char *)*((void *)this + 22);
                }
                else {
                  int v41 = (char *)this + 169;
                }
                re::DynamicString::format((re::DynamicString *)"Failed to deserialize asset blob of AssetEntry '%s'.", (re::DynamicString *)&v54, v41);
                unsigned __int8 v42 = v56;
                long long v56 = 0;
                *(unsigned char *)a5 = 0;
                *(void *)(a5 + 8) = v42;

                if (v54 && (v55 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v54 + 40))();
                }
                unsigned __int8 v40 = 1;
              }
              re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v57);
              unint64_t v69 = (uint64_t *)&unk_26E7144B8;
              re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v72);
            }
            else
            {
              if (*((void *)this + 21)) {
                char v43 = (char *)*((void *)this + 22);
              }
              else {
                char v43 = (char *)this + 169;
              }
              re::DynamicString::format((re::DynamicString *)"Failed to serialize asset blob of AssetEntry '%s'.", (re::DynamicString *)&v69, v43);
              long long v44 = v54;
              unsigned __int8 v54 = 0;
              *(unsigned char *)a5 = 0;
              *(void *)(a5 + 8) = v44;

              if (v69 && (v70 & 1) != 0) {
                (*(void (**)(void))(*v69 + 40))();
              }
              unsigned __int8 v40 = 1;
            }
            if (v63 && v67) {
              (*(void (**)(void))(*(void *)v63 + 40))();
            }
            if (v40) {
              goto LABEL_124;
            }
          }
          if (v60)
          {
            long long v45 = v62;
            while (1)
            {
              (*v45)(&v69, v74, a2);
              if (!(_BYTE)v69) {
                break;
              }
              if (++v45 == &v62[v60]) {
                goto LABEL_92;
              }
            }
            if (*((void *)this + 21)) {
              long long v48 = (char *)*((void *)this + 22);
            }
            else {
              long long v48 = (char *)this + 169;
            }
            if (BYTE8(v70)) {
              uint64_t v49 = v71;
            }
            else {
              uint64_t v49 = (uint64_t **)((char *)&v70 + 9);
            }
            re::DynamicString::format((re::DynamicString *)"Downgrade function failed for AssetHandle '%s': %s", (re::DynamicString *)&v63, v48, v49);
            long long v50 = v54;
            unsigned __int8 v54 = 0;
            *(unsigned char *)a5 = 0;
            *(void *)(a5 + 8) = v50;

            if (v63 && (v64 & 1) != 0) {
              (*(void (**)(void))(*(void *)v63 + 40))();
            }
            if ((_BYTE)v69) {
              goto LABEL_124;
            }
            uint64_t v34 = (uint64_t *)v70;
            if (!(void)v70 || (BYTE8(v70) & 1) == 0) {
              goto LABEL_124;
            }
            long long v35 = v71;
            goto LABEL_108;
          }
LABEL_92:
          LOBYTE(v63) = 1;
          char v46 = v74;
          uint64_t v74 = 0;
          uint64_t v64 = v46;
          if (v77)
          {
            if (v77 == (void **)&v75)
            {
              uint64_t v68 = v65;
              v75[3]((void **)&v75, v65);
              LOBYTE(v69) = v63;
              if (!(_BYTE)v63)
              {
                *(unsigned char *)a5 = 1;
                *(unsigned char *)(a5 + 8) = 0;
                goto LABEL_122;
              }
              char v46 = v64;
LABEL_111:
              uint64_t v64 = 0;
              *(void *)&int v70 = v46;
              if (v68)
              {
                if (v68 == v65)
                {
                  v73[0] = (char *)&v70 + 8;
                  (*(void (**)(int *, char *))(*(void *)v65 + 24))(v65, (char *)&v70 + 8);
                  int v53 = v69;
                  *(unsigned char *)a5 = 1;
                  *(unsigned char *)(a5 + 8) = v53;
                  if (!v53) {
                    goto LABEL_122;
                  }
                  char v46 = (const re::IntrospectionBase **)v70;
                  goto LABEL_116;
                }
                long long v51 = &v68;
                v73[0] = v68;
              }
              else
              {
                long long v51 = (int **)v73;
              }
              *long long v51 = 0;
              *(unsigned char *)a5 = 1;
              *(unsigned char *)(a5 + 8) = 1;
LABEL_116:
              *(void *)&int v70 = 0;
              *(void *)(a5 + 16) = v46;
              if (!v73[0])
              {
                unsigned __int8 v52 = (void *)(a5 + 48);
                goto LABEL_120;
              }
              if ((long long *)v73[0] != (long long *)((char *)&v70 + 8))
              {
                unsigned __int8 v52 = v73;
                *(void *)(a5 + 48) = v73[0];
LABEL_120:
                void *v52 = 0;
LABEL_121:
                std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v70);
                goto LABEL_122;
              }
              *(void *)(a5 + 48) = a5 + 24;
              (*(void (**)(char *))(*((void *)&v70 + 1) + 24))((char *)&v70 + 8);
              if ((_BYTE)v69) {
                goto LABEL_121;
              }
LABEL_122:
              if ((_BYTE)v63) {
                std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v64);
              }
              goto LABEL_124;
            }
            long long v47 = &v77;
            uint64_t v68 = (int *)v77;
          }
          else
          {
            long long v47 = (void ***)&v68;
          }
          *long long v47 = 0;
          LOBYTE(v69) = 1;
          goto LABEL_111;
        }
        if (*((void *)this + 21)) {
          long long v24 = (char *)*((void *)this + 22);
        }
        else {
          long long v24 = (char *)this + 169;
        }
        re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because its IntrospectionType is not a structure type.", (re::DynamicString *)&v69, v24);
        uint64_t v22 = 3;
      }
      else
      {
        if (*((void *)this + 21)) {
          id v23 = (char *)*((void *)this + 22);
        }
        else {
          id v23 = (char *)this + 169;
        }
        re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because its AssetLoader does not have an IntrospectionBase.", (re::DynamicString *)&v69, v23);
        uint64_t v22 = 2;
      }
    }
    else
    {
      if (*((void *)this + 21)) {
        uint64_t v21 = (char *)*((void *)this + 22);
      }
      else {
        uint64_t v21 = (char *)this + 169;
      }
      re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because it does not have an AssetPointer.", (re::DynamicString *)&v69, v21);
      uint64_t v22 = 1;
    }
    uint64_t v25 = v63;
    long long v63 = 0;
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 8) = v25;

    uint64_t v26 = v69;
    if (!v69 || (v70 & 1) == 0) {
      return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)v78);
    }
    long long v27 = (void (**)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *))*((void *)&v70 + 1);
LABEL_127:
    (*(void (**)(uint64_t *, void (**)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *)))(*v26 + 40))(v26, v27);
    return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)v78);
  }
  if (*((void *)this + 21)) {
    uint64_t v18 = (char *)*((void *)this + 22);
  }
  else {
    uint64_t v18 = (char *)this + 169;
  }
  re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because it does not have an AssetType.", (re::DynamicString *)&v69, v18);
  uint64_t v19 = v63;
  long long v63 = 0;
  *(unsigned char *)a5 = 0;
  *(void *)(a5 + 8) = v19;

  __n128 result = v69;
  if (v69 && (v70 & 1) != 0) {
    return (uint64_t *)(*(uint64_t (**)(void))(*v69 + 40))();
  }
  return result;
}

uint64_t re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)__n128 result = v3;
      *(void *)(result + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      __n128 result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessaryFromAssetHandle@<X0>(re::AssetCompatibility *this@<X0>, const re::AssetHandle *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (re::AssetCompatibility *)*((void *)this + 1);
  if (v6)
  {
    uint64_t v9 = (const re::internal::AssetEntry *)*((void *)v6 + 3);
    if (v9)
    {
      return re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(v6, v9, (uint64_t)a2, a3, a4);
    }
    uint64_t v12 = re::AssetHandle::assetInfo(this);
    if (v12[17]) {
      uint64_t v13 = (char *)v12[18];
    }
    else {
      uint64_t v13 = (char *)v12 + 137;
    }
    re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetHandle '%s' because it does not have an AssetService pointer.", (re::DynamicString *)&v15, v13);
    uint64_t v11 = 9;
  }
  else
  {
    uint64_t v11 = 8;
  }
  uint64_t v14 = v17;
  uint64_t v17 = 0;
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = v14;

  __n128 result = (uint64_t *)v15;
  if (v15 && (v16 & 1) != 0) {
    return (uint64_t *)(*(uint64_t (**)(void))(*(void *)v15 + 40))();
  }
  return result;
}

BOOL re::AssetCompatibility::isSceneAssetCompatibleWithVersion(re::AssetCompatibility *this, const re::AssetHandle *a2)
{
  v19[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    goto LABEL_18;
  }
  BOOL v4 = this;
  uint64_t v5 = *(uint64_t **)(v2 + 264);
  if (v5 != re::SceneAsset::assetType(this)) {
    goto LABEL_19;
  }
  uint64_t v7 = *((void *)v4 + 1);
  if (!v7)
  {
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = atomic_load((unsigned int *)(v7 + 704));
  if (v8 != 2)
  {
    uint64_t v9 = *((void *)v4 + 1);
LABEL_7:
    re::AssetHandle::loadNow(v9, 0);
  }
  uint64_t v10 = *((void *)v4 + 1);
  if (!v10 || (unsigned int v11 = atomic_load((unsigned int *)(v10 + 704)), v11 != 2))
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.isLoaded()", "isSceneAssetCompatibleWithVersion", 552);
    this = (re::AssetCompatibility *)_os_crash();
    __break(1u);
LABEL_18:
    re::SceneAsset::assetType(this);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.assetType() == SceneAsset::assetType()", "isSceneAssetCompatibleWithVersion", 548);
    _os_crash();
    __break(1u);
  }
  re::AssetHandle::serializableAsset(v4, v19);
  BOOL v12 = a2 == (const re::AssetHandle *)2;
  if ((unint64_t)a2 >= 2)
  {
    BOOL v13 = 1;
    if (v12)
    {
      v17[0] = MEMORY[0x263EF8330];
      v17[1] = 0x40000000;
      _OWORD v17[2] = ___ZN2re18AssetCompatibility33isSceneAssetCompatibleWithVersionERKNS_11AssetHandleEx_block_invoke;
      v17[3] = &__block_descriptor_tmp_23;
      char v18 = 1;
      BOOL v13 = (_BYTE)v16 != 0;
      if (!v15[0]) {
    }
      }
  }
  else
  {
    BOOL v13 = 0;
  }
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v19);
  return v13;
}

uint64_t ___ZN2re18AssetCompatibility33isSceneAssetCompatibleWithVersionERKNS_11AssetHandleEx_block_invoke@<X0>(uint64_t result@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  if (*(unsigned char *)(result + 32)
    && (__n128 result = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MaterialParameterBlockArrayComponent>(a2)) != 0
    && (uint64_t v4 = *(void *)(result + 48)) != 0)
  {
    uint64_t v5 = *(uint64_t **)(result + 64);
    uint64_t v6 = &v5[3 * v4];
    while (1)
    {
      uint64_t v7 = *v5;
      if (!*v5) {
        uint64_t v7 = v5[1];
      }
      uint64_t v8 = *(unsigned int *)(v7 + 336);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(_DWORD **)(v7 + 320);
        while ((*v10 & 0x80000000) == 0)
        {
          v10 += 80;
          if (v8 == ++v9)
          {
            LODWORD(v9) = *(_DWORD *)(v7 + 336);
            break;
          }
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      if (v8 != v9) {
        break;
      }
LABEL_24:
      v5 += 3;
      char v15 = 1;
      if (v5 == v6) {
        goto LABEL_28;
      }
    }
    uint64_t v11 = v9;
    uint64_t v12 = *(void *)(v7 + 320);
    while (*(unsigned __int8 *)(v12 + 320 * v11 + 32) != 192)
    {
      if (v8 <= (int)v9 + 1) {
        int v13 = v9 + 1;
      }
      else {
        int v13 = v8;
      }
      while (1)
      {
        uint64_t v11 = (v9 + 1);
        if (v13 - 1 == v9) {
          break;
        }
        __n128 result = *(unsigned int *)(v12 + 320 * v11);
        LODWORD(v9) = v9 + 1;
        int v14 = v11;
        if ((result & 0x80000000) != 0) {
          goto LABEL_23;
        }
      }
      int v14 = v13;
LABEL_23:
      LODWORD(v9) = v14;
      if (v8 == v14) {
        goto LABEL_24;
      }
    }
    char v15 = 0;
  }
  else
  {
    char v15 = 1;
  }
LABEL_28:
  *a3 = 1;
  a3[8] = v15;
  return result;
}

uint64_t *re::AssetCompatibility::sceneAssetCopyCompatibilityVariant(re::AssetCompatibility *this, uint64_t a2)
{
  uint64_t v23[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v4 = this;
  uint64_t v5 = *(uint64_t **)(v2 + 264);
  if (v5 != re::SceneAsset::assetType(this)) {
    goto LABEL_19;
  }
  uint64_t v7 = *((void *)v4 + 1);
  if (!v7)
  {
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = atomic_load((unsigned int *)(v7 + 704));
  if (v8 != 2)
  {
    uint64_t v9 = *((void *)v4 + 1);
LABEL_7:
    re::AssetHandle::loadNow(v9, 0);
  }
  uint64_t v10 = *((void *)v4 + 1);
  if (!v10 || (unsigned int v11 = atomic_load((unsigned int *)(v10 + 704)), v11 != 2))
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.isLoaded()", "sceneAssetCopyCompatibilityVariant", 587);
    this = (re::AssetCompatibility *)_os_crash();
    __break(1u);
LABEL_18:
    re::SceneAsset::assetType(this);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.assetType() == SceneAsset::assetType()", "sceneAssetCopyCompatibilityVariant", 583);
    _os_crash();
    __break(1u);
  }
  re::AssetHandle::serializableAsset(v4, v23);
  uint64_t v12 = v23[0];
  int v14 = re::globalAllocators(v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 40, 8);
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)(v15 + 32) = 0;
  if (a2 <= 2)
  {
    if (!v21[0]) {
  }
    }
  uint64_t v17 = *((void *)v4 + 1);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 24);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = re::SceneAsset::assetType(v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, void, uint64_t, void))(*(void *)v18 + 416))(v18, v15, v19, 0, 2, 0);
  return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v23);
}

uint64_t ___ZN2re18AssetCompatibility34sceneAssetCopyCompatibilityVariantERKNS_11AssetHandleEx_block_invoke@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MaterialParameterBlockArrayComponent>(a1);
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = *(void *)(result + 48);
    if (v5)
    {
      uint64_t v6 = *(uint64_t **)(result + 64);
      uint64_t v7 = &v6[3 * v5];
      do
      {
        uint64_t v8 = *v6;
        uint64_t v9 = *v6;
        if (!*v6) {
          uint64_t v9 = v6[1];
        }
        unsigned int v29 = 0;
        long long v27 = 0u;
        long long v28 = 0u;
        uint64_t v30 = 0x7FFFFFFFLL;
        uint64_t v10 = *(void *)(v9 + 304);
        if (v10)
        {
          uint64_t v11 = v9 + 304;
          unsigned int v12 = *(_DWORD *)(v9 + 332);
          if (v12 <= 3) {
            signed int v13 = 3;
          }
          else {
            signed int v13 = v12;
          }
          re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v27, v10, v13);
          re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy((uint64_t)&v27, v11);
          uint64_t v8 = *v6;
        }
        ++*((_DWORD *)v6 + 4);
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(v8 + 304);
        ++*(_DWORD *)(v8 + 400);
        ++*((_DWORD *)v6 + 4);
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(*v6 + 16);
        ++*((_DWORD *)v6 + 4);
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(*v6 + 160);
        unsigned int v14 = v29;
        if (v29)
        {
          uint64_t v15 = 0;
          id v16 = (_DWORD *)v28;
          while ((*v16 & 0x80000000) == 0)
          {
            v16 += 80;
            if (v29 == ++v15)
            {
              LODWORD(v15) = v29;
              break;
            }
          }
        }
        else
        {
          LODWORD(v15) = 0;
        }
        if (v29 != v15)
        {
          uint64_t v17 = v15;
          uint64_t v18 = v28;
          unsigned int v19 = v29;
          do
          {
            uint64_t v20 = v18 + 320 * v17;
            int v22 = *(unsigned __int8 *)(v20 + 32);
            uint64_t v21 = v20 + 32;
            if (v22 != 192)
            {
              id v23 = (StringID *)(v18 + 320 * v17 + 8);
              ++*((_DWORD *)v6 + 4);
              uint64_t v24 = *v6;
              *(_DWORD *)(v24 + 400) = *(_DWORD *)(*v6 + 400) + 1;
              re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v24 + 304, v23, v21);
              unsigned int v19 = v29;
              uint64_t v18 = v28;
            }
            if (v19 <= (int)v15 + 1) {
              unsigned int v25 = v15 + 1;
            }
            else {
              unsigned int v25 = v19;
            }
            while (1)
            {
              uint64_t v17 = (v15 + 1);
              if (v25 - 1 == v15) {
                break;
              }
              LODWORD(v15) = v15 + 1;
              unsigned int v26 = v17;
              if ((*(_DWORD *)(v18 + 320 * v17) & 0x80000000) != 0) {
                goto LABEL_28;
              }
            }
            unsigned int v26 = v25;
LABEL_28:
            LODWORD(v15) = v26;
          }
          while (v14 != v26);
        }
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v27);
        v6 += 3;
      }
      while (v6 != v7);
    }
    uint64_t result = (uint64_t)re::ecs2::Component::markDirty(v4);
  }
  *a2 = 1;
  a2[8] = 1;
  return result;
}

void anonymous namespace'::entityAssetDataDeepCopy(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = "";
  *(void *)(a3 + 32) = 0;
  uint64_t v6 = (re **)(a3 + 32);
  *(unsigned char *)(a3 + 24) = 1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(void *)a3 = *(void *)a2;
  *(_DWORD *)(a3 + 96) = 0;
  re::StringID::operator=((unint64_t *)(a3 + 8), (uint64_t *)(a2 + 8));
  *(unsigned char *)(a3 + 24) = *(unsigned char *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 48);
  *uint64_t v6 = a1;
  uint64_t v8 = (re::ecs2::ComponentTypeRegistry *)re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v6, 0);
  ++*(_DWORD *)(a3 + 56);
  if (*(void *)(a3 + 40) < v7) {
    uint64_t v8 = (re::ecs2::ComponentTypeRegistry *)re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v6, v7);
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)(a2 + 64);
    uint64_t v11 = &v10[3 * v9];
    do
    {
      unsigned int v12 = (char *)v10[1];
      if (v12)
      {
        uint64_t v13 = *v10;
        unsigned int v14 = re::ecs2::ComponentTypeRegistry::instance(v8);
        uint64_t v15 = *(uint64_t (**)(char *))(re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v14, v13)+ 8);
        if (v15)
        {
          uint64_t v16 = v15(v12);
          v25.n128_u64[0] = v13;
          v25.n128_u64[1] = v16;
          LOBYTE(v26) = 1;
        }
        else
        {
          uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)v12 + 40))(v12);
          uint64_t v18 = (re::Allocator *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17);
          unsigned int v19 = (const re::IntrospectionBase **)re::introspectionAllocPointer(a1, 0, v18);
          __n128 v25 = (__n128)(unint64_t)a1;
          uint64_t v26 = 0;
          v25.n128_u64[0] = v13;
          v25.n128_u64[1] = (unint64_t)v19;
          LOBYTE(v26) = 0;
        }
        re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)v6, &v25);
      }
      v10 += 3;
    }
    while (v10 != v11);
  }
  unint64_t v20 = *(void *)(a2 + 88);
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = a1;
  uint64_t v21 = a3 + 72;
  re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)v21, 0);
  ++*(_DWORD *)(v21 + 24);
  if (*(void *)(v21 + 8) < v20) {
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)v21, v20);
  }
  uint64_t v22 = *(void *)(a2 + 88);
  if (v22)
  {
    uint64_t v23 = *(void *)(a2 + 104);
    uint64_t v24 = 112 * v22;
    do
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::add(v21, (uint64_t)&v25);
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v25);
      v23 += 112;
      v24 -= 112;
    }
    while (v24);
  }
}

uint64_t re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MaterialParameterBlockArrayComponent>(void *a1)
{
  if (!a1[4]) {
    return 0;
  }
  uint64_t v1 = a1[6];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = a1[8] + 8;
  uint64_t v3 = 24 * v1;
  while (*(void *)(v2 - 8) != *((void *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                 + 3) >> 1)
  {
    v2 += 24;
    v3 -= 24;
    if (!v3) {
      return 0;
    }
  }
  return *(void *)v2;
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_47, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 40;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  int v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      int v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unsigned int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 320 * v10, 16);
  if (v12)
  {
    unsigned int v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_47, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), v8 + v6 + 32);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 320;
    }
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_47, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 320;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 320;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 320 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 320 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 320 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 320 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 320 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 320 * v9;
  *(_OWORD *)(v15 + 32) = *(_OWORD *)a5;
  long long v16 = *(_OWORD *)(a5 + 16);
  long long v17 = *(_OWORD *)(a5 + 32);
  long long v18 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v15 + 96) = v18;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = v17;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v15 + 112), (const re::AssetHandle *)(a5 + 80));
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(v15 + 136, a5 + 104);
  re::DynamicArray<BOOL>::DynamicArray(v15 + 240, (uint64_t *)(a5 + 208));
  *(unsigned char *)(v15 + 280) = *(unsigned char *)(a5 + 248);
  *(void *)(v15 + 288) = *(void *)(a5 + 256);
  long long v19 = *(_OWORD *)(a5 + 264);
  *(unsigned char *)(v15 + 312) = *(unsigned char *)(a5 + 280);
  *(_OWORD *)(v15 + 296) = v19;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    *(void *)(a1 + 288) = 0;
    re::DynamicArray<unsigned long>::deinit(a1 + 240);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 112));
  }
}

uint64_t re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = *(unsigned char *)a2;
  int v2 = *(unsigned __int8 *)(a2 + 1);
  *(unsigned char *)(result + 1) = v2;
  if (v2) {
    *(unsigned char *)(result + 2) = *(unsigned char *)(a2 + 2);
  }
  int v3 = *(unsigned __int8 *)(a2 + 3);
  *(unsigned char *)(result + 3) = v3;
  if (v3) {
    *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 4);
  }
  int v4 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(result + 8) = v4;
  if (v4) {
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  *(unsigned char *)(result + 16) = v5;
  if (v5) {
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  }
  int v6 = *(unsigned __int8 *)(a2 + 24);
  *(unsigned char *)(result + 24) = v6;
  if (v6) {
    *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  }
  int v7 = *(unsigned __int8 *)(a2 + 32);
  *(unsigned char *)(result + 32) = v7;
  if (v7) {
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  }
  int v8 = *(unsigned __int8 *)(a2 + 40);
  *(unsigned char *)(result + 40) = v8;
  if (v8) {
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  }
  int v9 = *(unsigned __int8 *)(a2 + 48);
  *(unsigned char *)(result + 48) = v9;
  if (v9) {
    *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  }
  int v10 = *(unsigned __int8 *)(a2 + 56);
  *(unsigned char *)(result + 56) = v10;
  if (v10) {
    *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  }
  int v11 = *(unsigned __int8 *)(a2 + 64);
  *(unsigned char *)(result + 64) = v11;
  if (v11) {
    *(_DWORD *)(result + 68) = *(_DWORD *)(a2 + 68);
  }
  int v12 = *(unsigned __int8 *)(a2 + 72);
  *(unsigned char *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v12;
  if (v12) {
    *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 76);
  }
  int v13 = *(unsigned __int8 *)(a2 + 80);
  *(unsigned char *)(result + 80) = v13;
  if (v13) {
    *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 84);
  }
  int v14 = *(unsigned __int8 *)(a2 + 88);
  *(unsigned char *)(result + 88) = v14;
  if (v14) {
    *(void *)(result + 96) = *(void *)(a2 + 96);
  }
  return result;
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0)
  {
    *a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 2));
    re::StringID::destroyString((re::StringID *)(a1 + 6));
  }
}

double re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 320;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E6D64A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6D64A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(a1 + 8) + 1040), *(void *)(a1 + 16))+ 16);
  return v1();
}

uint64_t std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::target_type()
{
}

void re::MeshAssetData::generateMetaData(re::MeshAssetData *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *((void *)this + 17) = 0;
  ++*((_DWORD *)this + 36);
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    unint64_t v3 = 0;
    unint64_t v4 = (re::MeshAssetData *)((char *)this + 120);
    do
    {
      if (*((void *)this + 2) <= v3)
      {
        memset(v17, 0, sizeof(v17));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = *((void *)this + 4);
      LODWORD(v17[0]) = 0;
      uint64_t v6 = v5 + (v3 << 9);
      uint64_t v7 = *(void *)(v6 + 168);
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v9 = *(void *)(v6 + 184);
        uint64_t v10 = v9 + 144 * v7;
        float v11 = 0.0;
        do
        {
          unint64_t v12 = *(void *)(v9 + 40);
          if (v12)
          {
            int v13 = 0;
            int v14 = *(int **)(v9 + 48);
            uint64_t v15 = 4 * v12;
            do
            {
              int v16 = *v14++;
              v8 += v16 - v13;
              int v13 = v16;
              v15 -= 4;
            }
            while (v15);
          }
          float v11 = v11 + (float)v12;
          v9 += 144;
        }
        while (v9 != v10);
        if (v11 > 0.0) {
          *(float *)long long v17 = (float)v8 / v11;
        }
      }
      re::DynamicArray<float>::add(v4, (float *)v17);
      ++v3;
    }
    while (v3 != v1);
  }
}

uint64_t re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(void *a1, unint64_t a2)
{
  if (a1[52] <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = *(void *)(a1[54] + 8 * a2);
  uint64_t v3 = a1[55] + 8;
  return re::DataArray<re::MeshModel>::tryGet(v3, v2);
}

void *re::allocInfo_MeshAssetBuffer(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A760, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A760))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7AED8, "MeshAssetBuffer");
    __cxa_guard_release(&qword_26AF7A760);
  }
  return &unk_26AF7AED8;
}

void re::initInfo_MeshAssetBuffer(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xBBFF8F97F37B7606;
  v22[1] = "MeshAssetBuffer";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A768, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A768);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A9A8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      float v11 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "data";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A9B0 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::mtl::introspect_VertexFormat((re::mtl *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "format";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7A9B8 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::mtl::introspect_VertexStepFunction((re::mtl *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "stepFunction";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4900000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7A9C0 = v20;
      __cxa_guard_release(&qword_26AF7A768);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7A9A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetBuffer>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetBuffer>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetBuffer>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetBuffer>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void *re::internal::defaultConstruct<re::MeshAssetBuffer>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  __n128 result = re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_WORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 256;
  return result;
}

double re::internal::defaultDestruct<re::MeshAssetBuffer>(uint64_t a1, uint64_t a2, re::DynamicString *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 32);
  return re::DynamicString::deinit(a3);
}

void *re::internal::defaultConstructV2<re::MeshAssetBuffer>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __n128 result = re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 256;
  return result;
}

double re::internal::defaultDestructV2<re::MeshAssetBuffer>(re::DynamicString *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 32);
  return re::DynamicString::deinit(a1);
}

void *re::allocInfo_MeshAssetPart(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A778, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A778))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7AF50, "MeshAssetPart");
    __cxa_guard_release(&qword_26AF7A778);
  }
  return &unk_26AF7AF50;
}

void re::initInfo_MeshAssetPart(re *this, re::IntrospectionBase *a2)
{
  v49[0] = 0xDD4C740759CEBEECLL;
  v49[1] = "MeshAssetPart";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A780, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A780);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBuffer>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "buffers";
      *(void *)(v6 + 16) = &qword_26AF7AA98;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7AE18 = v6;
      uint64_t v7 = re::introspectionAllocator((re *)v6);
      uint64_t v9 = re::introspect_uint32_t((re *)1, v8);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "indexCount";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7AE20 = v10;
      float v11 = re::introspectionAllocator((re *)v10);
      int v13 = re::mtl::introspect_IndexType((re::mtl *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "indexType";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x2C00000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF7AE28 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      long long v17 = re::introspect_uint32_t((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "vertexCount";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3000000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7AE30 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::introspect_uint16_t((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "materialIndex";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x3800000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF7AE38 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      __n128 v25 = re::introspect_uint32_t((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "preSplitVertexCount";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x3C00000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF7AE40 = v26;
      long long v27 = re::introspectionAllocator((re *)v26);
      unsigned int v29 = re::introspect_uint32_t((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "patchCount";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x4000000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF7AE48 = v30;
      int v31 = re::introspectionAllocator((re *)v30);
      char v33 = re::IntrospectionInfo<re::StringID>::get(1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "name";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x4800000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF7AE50 = v34;
      long long v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = re::introspect_AABB((re::IntrospectionBase **)1);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "boundingBox";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x6000000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF7AE58 = v37;
      char v38 = re::introspectionAllocator((re *)v37);
      uint64_t v39 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "orientedBoundingBox";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x800000000ALL;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF7AE60 = v40;
      int v41 = re::introspectionAllocator((re *)v40);
      uint64_t v42 = re::introspect_MeshPartFlags((re::IntrospectionBase **)1);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "renderFlags";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0xC00000000BLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF7AE68 = v43;
      long long v44 = re::introspectionAllocator((re *)v43);
      char v46 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "bufferAliases";
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0xC80000000CLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF7AE70 = v47;
      __cxa_guard_release(&qword_26AF7A780);
    }
  }
  *((void *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((void *)this + 8) = &qword_26AF7AE18;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetPart>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetPart>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetPart>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetPart>;
  re::IntrospectionRegistry::add(this, v3);
  long long v48 = v50;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBuffer>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8D0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A8D0);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AA98);
      qword_26AF7AA98 = (uint64_t)&unk_26E6D6528;
      __cxa_guard_release(&qword_26AF7A8D0);
    }
  }
  if ((_MergedGlobals_87 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7A770;
    if (qword_26AF7A770
      || (uint64_t v1 = re::allocInfo_MeshAssetBuffer(a1),
          qword_26AF7A770 = (uint64_t)v1,
          re::initInfo_MeshAssetBuffer((re *)v1, v2),
          (_MergedGlobals_87 & 1) == 0))
    {
      _MergedGlobals_87 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AA98, 0);
      qword_26AF7AAA8 = 0x2800000003;
      dword_26AF7AAB0 = v3;
      word_26AF7AAB4 = 0;
      *(void *)&xmmword_26AF7AAB8 = 0;
      *((void *)&xmmword_26AF7AAB8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AAC8 = (uint64_t)v1;
      qword_26AF7AAD0 = 0;
      qword_26AF7AA98 = (uint64_t)&unk_26E6D6528;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AA98, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AAB8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E6D65C0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    int v3 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    if (v3) {
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  uint64_t v8 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, v7);
  if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)v8;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized = 1;
    int v12 = *((_DWORD *)v8 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, 0);
    qword_268773A20 = 0x3000000007;
    dword_268773A28 = v12;
    word_268773A2C = 0;
    *(void *)&xmmword_268773A30 = 0;
    *((void *)&xmmword_268773A30 + 1) = 0xFFFFFFFFLL;
    qword_268773A40 = (uint64_t)v6;
    unk_268773A48 = 0;
    qword_268773A50 = v11;
    unk_268773A58 = 0;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E6D65C0;
    re::IntrospectionRegistry::add(v13, v14);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v19);
    if (BYTE8(v19)) {
      char v15 = v20;
    }
    else {
      char v15 = (char *)&v19 + 9;
    }
    if (void)v19 && (BYTE8(v19)) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    long long v16 = v6[2];
    long long v18 = *(_OWORD *)(v11 + 32);
    long long v19 = v16;
    xmmword_268773A30 = v17;
    re::StringID::destroyString((re::StringID *)v21);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::MeshAssetPart>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 44) = 1;
  *(_DWORD *)(a3 + 52) = 1;
  *(_WORD *)(a3 + 56) = -1;
  *(_DWORD *)(a3 + 60) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a3 + 80) = "";
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a3 + 96) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 112) = v3;
  *(unsigned char *)(a3 + 194) = 0;
  *(unsigned char *)(a3 + 196) = 0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(unsigned char *)(a3 + 192) = 0;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 236) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetPart>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a3 + 200));
  re::StringID::destroyString((re::StringID *)(a3 + 72));
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshAssetPart>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 52) = 1;
  *(_WORD *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a1 + 80) = "";
  *(void *)&long long v1 = 0x7F0000007FLL;
  *((void *)&v1 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 96) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 112) = v1;
  *(unsigned char *)(a1 + 194) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetPart>(uint64_t a1)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 200));
  re::StringID::destroyString((re::StringID *)(a1 + 72));
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a1);
}

void *re::allocInfo_SkinningInfluence(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A790, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A790))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7AFC8, "SkinningInfluence");
    __cxa_guard_release(&qword_26AF7A790);
  }
  return &unk_26AF7AFC8;
}

void re::initInfo_SkinningInfluence(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xA30D63E3F87A3C48;
  v14[1] = "SkinningInfluence";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A798, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A798);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_int((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "jointIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A940 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "weight";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A948 = v12;
      __cxa_guard_release(&qword_26AF7A798);
    }
  }
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7A940;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkinningInfluence>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkinningInfluence>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkinningInfluence>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkinningInfluence>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::allocInfo_MeshAssetSkinningData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A7A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B040, "MeshAssetSkinningData");
    __cxa_guard_release(&qword_26AF7A7A8);
  }
  return &unk_26AF7B040;
}

void re::initInfo_MeshAssetSkinningData(re *this, re::IntrospectionBase *a2)
{
  v23[0] = 0x8DB8D5870250C6FCLL;
  v23[1] = "MeshAssetSkinningData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7B0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A7B0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "skeletonIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A9E8 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::FixedArray<re::SkinningInfluence>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "skinningInfluences";
      *(void *)(v10 + 16) = &qword_26AF7AAD8;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7A9F0 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      long long v13 = re::IntrospectionInfo<re::FixedArray<int>>::get(1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "influenceEndIndices";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x2000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF7A9F8 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      long long v17 = re::IntrospectionInfo<re::FixedArray<int>>::get(1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "remappedJointIndices";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x3800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7AA00 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      uint64_t v20 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "geometryBindTransform";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000005;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF7AA08 = v21;
      __cxa_guard_release(&qword_26AF7A7B0);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF7A9E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetSkinningData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetSkinningData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetSkinningData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetSkinningData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

void re::IntrospectionInfo<re::FixedArray<re::SkinningInfluence>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8D8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A8D8);
    if (a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF7AAD8);
      qword_26AF7AAD8 = (uint64_t)&unk_26E6D6660;
      __cxa_guard_release(&qword_26AF7A8D8);
    }
  }
  if ((byte_26AF7A751 & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A7A0;
    if (qword_26AF7A7A0
      || (long long v1 = re::allocInfo_SkinningInfluence(a1),
          qword_26AF7A7A0 = (uint64_t)v1,
          re::initInfo_SkinningInfluence((re *)v1, v2),
          (byte_26AF7A751 & 1) == 0))
    {
      byte_26AF7A751 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AAD8, 0);
      qword_26AF7AAE8 = 0x1800000004;
      dword_26AF7AAF0 = v3;
      word_26AF7AAF4 = 0;
      *(void *)&xmmword_26AF7AAF8 = 0;
      *((void *)&xmmword_26AF7AAF8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AB08 = (uint64_t)v1;
      qword_26AF7AB10 = 0;
      qword_26AF7AAD8 = (uint64_t)&unk_26E6D6660;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AAD8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AAF8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::MeshAssetSkinningData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = -1;
  double result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0u;
  *(void *)(a3 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetSkinningData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 7);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 4);
  return re::FixedArray<CoreIKTransform>::deinit(a3 + 1);
}

double re::internal::defaultConstructV2<re::MeshAssetSkinningData>(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetSkinningData>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 7);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 4);
  return re::FixedArray<CoreIKTransform>::deinit(a1 + 1);
}

void *re::allocInfo_MeshAssetBlendShapeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A7C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B0B8, "MeshAssetBlendShapeData");
    __cxa_guard_release(&qword_26AF7A7C0);
  }
  return &unk_26AF7B0B8;
}

void re::initInfo_MeshAssetBlendShapeData(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x14975A1BFCD5F2BALL;
  v13[1] = "MeshAssetBlendShapeData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7C8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A7C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_BlendShapeGroupDefinition((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "blendShapeGroup";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7A950 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_uint16_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "meshPartIndex";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7A958 = v11;
      __cxa_guard_release(&qword_26AF7A7C8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7A950;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetBlendShapeData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetBlendShapeData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetBlendShapeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetBlendShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::MeshAssetBlendShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(_DWORD *)(a3 + 44) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::MeshAssetBlendShapeData>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((void *)a3 + 2);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::MeshAssetBlendShapeData>(uint64_t result)
{
  *(void *)double result = 0;
  *(void *)(result + 8) = "";
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetBlendShapeData>(re::StringID *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((void *)a1 + 2);
  re::StringID::destroyString(a1);
}

void *re::allocInfo_MeshAssetWrapDeformerData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A7D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B130, "MeshAssetWrapDeformerData");
    __cxa_guard_release(&qword_26AF7A7D8);
  }
  return &unk_26AF7B130;
}

void re::initInfo_MeshAssetWrapDeformerData(re *this, re::IntrospectionBase *a2)
{
  v24[0] = 0x7C3F1F58CCCB5ED2;
  v24[1] = "MeshAssetWrapDeformerData";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7E0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A7E0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "targetMeshInstanceName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7AA10 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "faceIndices";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7AA18 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v14 = re::IntrospectionInfo<re::FixedArray<re::Vector3<float>>>::get(1);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "faceCoordinates";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7AA20 = v15;
      long long v16 = re::introspectionAllocator((re *)v15);
      long long v17 = re::IntrospectionInfo<re::FixedArray<re::Vector3<float>>>::get(1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "offsets";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x5000000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7AA28 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      uint64_t v21 = re::introspect_uint16_t((re *)1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "meshPartIndex";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x6800000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF7AA30 = v22;
      __cxa_guard_release(&qword_26AF7A7E0);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF7AA10;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetWrapDeformerData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetWrapDeformerData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetWrapDeformerData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetWrapDeformerData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

double re::internal::defaultConstruct<re::MeshAssetWrapDeformerData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(void *)(a3 + 96) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetWrapDeformerData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 10);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 7);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 4);
  re::StringID::destroyString((re::StringID *)(a3 + 2));
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::MeshAssetWrapDeformerData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = "";
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetWrapDeformerData>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 10);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 7);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 4);
  re::StringID::destroyString((re::StringID *)(a1 + 2));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_MeshAssetContactDeformerTarget(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A7F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B1A8, "MeshAssetContactDeformerTarget");
    __cxa_guard_release(&qword_26AF7A7F0);
  }
  return &unk_26AF7B1A8;
}

void re::initInfo_MeshAssetContactDeformerTarget(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x12ECC0F162C64700;
  v18[1] = "MeshAssetContactDeformerTarget";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A7F8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A7F8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "jointIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A990 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "radius";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A998 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "heightMap";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7A9A0 = v16;
      __cxa_guard_release(&qword_26AF7A7F8);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF7A990;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetContactDeformerTarget>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetContactDeformerTarget>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetContactDeformerTarget>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetContactDeformerTarget>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::MeshAssetContactDeformerTarget>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetContactDeformerTarget>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a3 + 8));
}

void *re::internal::defaultConstructV2<re::MeshAssetContactDeformerTarget>(void *result)
{
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetContactDeformerTarget>(uint64_t a1)
{
  return re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 8));
}

void *re::allocInfo_MeshAssetContactDeformerData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A808, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A808))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B220, "MeshAssetContactDeformerData");
    __cxa_guard_release(&qword_26AF7A808);
  }
  return &unk_26AF7B220;
}

void re::initInfo_MeshAssetContactDeformerData(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x17FEA5E5144AA2B2;
  v12[1] = "MeshAssetContactDeformerData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A810, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A810);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::FixedArray<re::MeshAssetContactDeformerTarget>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "targets";
      *(void *)(v6 + 16) = &qword_26AF7AB18;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0x1000000001;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7A960 = v6;
      uint64_t v7 = re::introspectionAllocator((re *)v6);
      uint64_t v9 = re::introspect_uint16_t((re *)1, v8);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "meshPartIndex";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7A968 = v10;
      __cxa_guard_release(&qword_26AF7A810);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7A960;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetContactDeformerData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetContactDeformerData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetContactDeformerData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetContactDeformerData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::IntrospectionInfo<re::FixedArray<re::MeshAssetContactDeformerTarget>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8E0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A8E0);
    if (a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF7AB18);
      qword_26AF7AB18 = (uint64_t)&unk_26E6D66F8;
      __cxa_guard_release(&qword_26AF7A8E0);
    }
  }
  if ((byte_26AF7A752 & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A800;
    if (qword_26AF7A800
      || (long long v1 = re::allocInfo_MeshAssetContactDeformerTarget(a1),
          qword_26AF7A800 = (uint64_t)v1,
          re::initInfo_MeshAssetContactDeformerTarget((re *)v1, v2),
          (byte_26AF7A752 & 1) == 0))
    {
      byte_26AF7A752 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AB18, 0);
      qword_26AF7AB28 = 0x1800000004;
      dword_26AF7AB30 = v3;
      word_26AF7AB34 = 0;
      *(void *)&xmmword_26AF7AB38 = 0;
      *((void *)&xmmword_26AF7AB38 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AB48 = (uint64_t)v1;
      qword_26AF7AB50 = 0;
      qword_26AF7AB18 = (uint64_t)&unk_26E6D66F8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AB18, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AB38 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::MeshAssetContactDeformerData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::MeshAssetContactDeformerData>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((void *)a3 + 2);
  re::StringID::destroyString(a3);
}

void *re::internal::defaultConstructV2<re::MeshAssetContactDeformerData>(void *result)
{
  *double result = 0;
  result[1] = "";
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetContactDeformerData>(re::StringID *a1)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((void *)a1 + 2);
  re::StringID::destroyString(a1);
}

void *re::allocInfo_MeshAssetSmoothDeformerData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A820))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B298, "MeshAssetSmoothDeformerData");
    __cxa_guard_release(&qword_26AF7A820);
  }
  return &unk_26AF7B298;
}

void re::initInfo_MeshAssetSmoothDeformerData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xFF33CE7A6A0D541ALL;
  v14[1] = "MeshAssetSmoothDeformerData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A828, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A828);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "envelopeBufferName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A970 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "meshPartIndex";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A978 = v12;
      __cxa_guard_release(&qword_26AF7A828);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7A970;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetSmoothDeformerData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetSmoothDeformerData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetSmoothDeformerData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetSmoothDeformerData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::MeshAssetSmoothDeformerData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
}

void re::internal::defaultDestruct<re::MeshAssetSmoothDeformerData>(int a1, int a2, re::StringID *this)
{
}

void *re::internal::defaultConstructV2<re::MeshAssetSmoothDeformerData>(void *result)
{
  *double result = 0;
  result[1] = "";
  return result;
}

void *re::allocInfo_MeshAssetOffsetsDeformerData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A838, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A838))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B310, "MeshAssetOffsetsDeformerData");
    __cxa_guard_release(&qword_26AF7A838);
  }
  return &unk_26AF7B310;
}

void re::initInfo_MeshAssetOffsetsDeformerData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x574CE82AAD8A56F2;
  v14[1] = "MeshAssetOffsetsDeformerData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A840, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A840);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "envelopeBufferName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A980 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "meshPartIndex";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7A988 = v12;
      __cxa_guard_release(&qword_26AF7A840);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7A980;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetOffsetsDeformerData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetOffsetsDeformerData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetOffsetsDeformerData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetOffsetsDeformerData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::MeshAssetOffsetsDeformerData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
}

void re::internal::defaultDestruct<re::MeshAssetOffsetsDeformerData>(int a1, int a2, re::StringID *this)
{
}

void *re::internal::defaultConstructV2<re::MeshAssetOffsetsDeformerData>(void *result)
{
  *double result = 0;
  result[1] = "";
  return result;
}

void *re::allocInfo_MeshAssetSkeleton(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A850))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B388, "MeshAssetSkeleton");
    __cxa_guard_release(&qword_26AF7A850);
  }
  return &unk_26AF7B388;
}

void re::initInfo_MeshAssetSkeleton(re *this, re::IntrospectionBase *a2)
{
  v24[0] = 0xBA5A0A3EA9A0F4A0;
  v24[1] = "MeshAssetSkeleton";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A858, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A858);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7AA38 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "jointNames";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7AA40 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "parentIndices";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7AA48 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      uint64_t v18 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "localBindPoses";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x4000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7AA50 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v21 = re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(1);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "inverseBindPoses";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x5800000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF7AA58 = v22;
      __cxa_guard_release(&qword_26AF7A858);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF7AA38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetSkeleton>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetSkeleton>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetSkeleton>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetSkeleton>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

double re::internal::defaultConstruct<re::MeshAssetSkeleton>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetSkeleton>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 11);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 5);
  re::FixedArray<re::StringID>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::MeshAssetSkeleton>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetSkeleton>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 11);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 8);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 5);
  re::FixedArray<re::StringID>::deinit(a1 + 2);
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_MeshAssetMetaData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A868, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A868))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B400, "MeshAssetMetaData");
    __cxa_guard_release(&qword_26AF7A868);
  }
  return &unk_26AF7B400;
}

void re::initInfo_MeshAssetMetaData(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xBA5A09EF8224E2A4;
  v10[1] = "MeshAssetMetaData";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A878, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A878);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "averageSkinningInfluencesPerVertex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A870 = v8;
      __cxa_guard_release(&qword_26AF7A878);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7A870;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetMetaData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetMetaData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetMetaData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetMetaData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::internal::defaultConstruct<re::MeshAssetMetaData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetMetaData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::MeshAssetMetaData>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *re::allocInfo_MeshAssetModel(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A888))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B478, "MeshAssetModel");
    __cxa_guard_release(&qword_26AF7A888);
  }
  return &unk_26AF7B478;
}

void re::initInfo_MeshAssetModel(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0xCC420CE3DFC0E00CLL;
  v34[1] = "MeshAssetModel";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A890, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A890);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7AE78 = v8;
      long long v9 = re::introspectionAllocator((re *)v8);
      uint64_t v10 = re::introspect_AABB((re::IntrospectionBase **)1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "boundingBox";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7AE80 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "orientedBoundingBox";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x3000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF7AE88 = v14;
      long long v15 = (re *)re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkeleton>>::get(v15);
      uint64_t v16 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "skeletons";
      *(void *)(v16 + 16) = &qword_26AF7AB58;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xE800000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7AE90 = v16;
      long long v17 = (re *)re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBlendShapeData>>::get(v17);
      uint64_t v18 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "meshBlendShapeData";
      *(void *)(v18 + 16) = &qword_26AF7AB98;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x7000000005;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7AE98 = v18;
      uint64_t v19 = (re *)re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkinningData>>::get(v19);
      uint64_t v20 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "meshSkinningData";
      *(void *)(v20 + 16) = &qword_26AF7ABD8;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x9800000006;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7AEA0 = v20;
      uint64_t v21 = (re *)re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetPart>>::get(v21);
      uint64_t v22 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "meshParts";
      *(void *)(v22 + 16) = &qword_26AF7AC18;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0xC000000007;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF7AEA8 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      re::IntrospectionInfo<re::DynamicArray<re::MeshLodLevelInfo>>::get();
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "lodLevelInfos";
      *(void *)(v24 + 16) = &qword_26AF7AC58;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x11000000008;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF7AEB0 = v24;
      long long v25 = (re *)re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetContactDeformerData>>::get(v25);
      uint64_t v26 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "contactDeformerData";
      *(void *)(v26 + 16) = &qword_26AF7AC98;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x13800000009;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF7AEB8 = v26;
      long long v27 = (re *)re::introspectionAllocator((re *)v26);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSmoothDeformerData>>::get(v27);
      uint64_t v28 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "smoothDeformerData";
      *(void *)(v28 + 16) = &qword_26AF7ACD8;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1600000000ALL;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF7AEC0 = v28;
      unsigned int v29 = (re *)re::introspectionAllocator((re *)v28);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetWrapDeformerData>>::get(v29);
      uint64_t v30 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "wrapDeformerData";
      *(void *)(v30 + 16) = &qword_26AF7AD18;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x1880000000BLL;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF7AEC8 = v30;
      int v31 = (re *)re::introspectionAllocator((re *)v30);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetOffsetsDeformerData>>::get(v31);
      uint64_t v32 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "offsetsDeformerData";
      *(void *)(v32 + 16) = &qword_26AF7AD58;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1B00000000CLL;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF7AED0 = v32;
      __cxa_guard_release(&qword_26AF7A890);
    }
  }
  *((void *)this + 2) = 0x20000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((void *)this + 8) = &qword_26AF7AE78;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetModel>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetModel>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetModel>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetModel>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkeleton>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8E8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A8E8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AB58);
      qword_26AF7AB58 = (uint64_t)&unk_26E6D6790;
      __cxa_guard_release(&qword_26AF7A8E8);
    }
  }
  if ((byte_26AF7A753 & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A860;
    if (qword_26AF7A860
      || (long long v1 = re::allocInfo_MeshAssetSkeleton(a1),
          qword_26AF7A860 = (uint64_t)v1,
          re::initInfo_MeshAssetSkeleton((re *)v1, v2),
          (byte_26AF7A753 & 1) == 0))
    {
      byte_26AF7A753 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AB58, 0);
      qword_26AF7AB68 = 0x2800000003;
      dword_26AF7AB70 = v3;
      word_26AF7AB74 = 0;
      *(void *)&xmmword_26AF7AB78 = 0;
      *((void *)&xmmword_26AF7AB78 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AB88 = (uint64_t)v1;
      qword_26AF7AB90 = 0;
      qword_26AF7AB58 = (uint64_t)&unk_26E6D6790;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AB58, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AB78 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBlendShapeData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8F0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A8F0);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AB98);
      qword_26AF7AB98 = (uint64_t)&unk_26E6D6828;
      __cxa_guard_release(&qword_26AF7A8F0);
    }
  }
  if ((byte_26AF7A754 & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A7D0;
    if (qword_26AF7A7D0
      || (long long v1 = re::allocInfo_MeshAssetBlendShapeData(a1),
          qword_26AF7A7D0 = (uint64_t)v1,
          re::initInfo_MeshAssetBlendShapeData((re *)v1, v2),
          (byte_26AF7A754 & 1) == 0))
    {
      byte_26AF7A754 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AB98, 0);
      qword_26AF7ABA8 = 0x2800000003;
      dword_26AF7ABB0 = v3;
      word_26AF7ABB4 = 0;
      *(void *)&xmmword_26AF7ABB8 = 0;
      *((void *)&xmmword_26AF7ABB8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7ABC8 = (uint64_t)v1;
      qword_26AF7ABD0 = 0;
      qword_26AF7AB98 = (uint64_t)&unk_26E6D6828;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AB98, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7ABB8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkinningData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8F8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A8F8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7ABD8);
      qword_26AF7ABD8 = (uint64_t)&unk_26E6D68C0;
      __cxa_guard_release(&qword_26AF7A8F8);
    }
  }
  if ((byte_26AF7A755 & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A7B8;
    if (qword_26AF7A7B8
      || (long long v1 = re::allocInfo_MeshAssetSkinningData(a1),
          qword_26AF7A7B8 = (uint64_t)v1,
          re::initInfo_MeshAssetSkinningData((re *)v1, v2),
          (byte_26AF7A755 & 1) == 0))
    {
      byte_26AF7A755 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7ABD8, 0);
      qword_26AF7ABE8 = 0x2800000003;
      dword_26AF7ABF0 = v3;
      word_26AF7ABF4 = 0;
      *(void *)&xmmword_26AF7ABF8 = 0;
      *((void *)&xmmword_26AF7ABF8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AC08 = (uint64_t)v1;
      qword_26AF7AC10 = 0;
      qword_26AF7ABD8 = (uint64_t)&unk_26E6D68C0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7ABD8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7ABF8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetPart>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A900, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A900);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AC18);
      qword_26AF7AC18 = (uint64_t)&unk_26E6D6958;
      __cxa_guard_release(&qword_26AF7A900);
    }
  }
  if ((byte_26AF7A756 & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A788;
    if (qword_26AF7A788
      || (long long v1 = re::allocInfo_MeshAssetPart(a1),
          qword_26AF7A788 = (uint64_t)v1,
          re::initInfo_MeshAssetPart((re *)v1, v2),
          (byte_26AF7A756 & 1) == 0))
    {
      byte_26AF7A756 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AC18, 0);
      qword_26AF7AC28 = 0x2800000003;
      dword_26AF7AC30 = v3;
      word_26AF7AC34 = 0;
      *(void *)&xmmword_26AF7AC38 = 0;
      *((void *)&xmmword_26AF7AC38 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AC48 = (uint64_t)v1;
      qword_26AF7AC50 = 0;
      qword_26AF7AC18 = (uint64_t)&unk_26E6D6958;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AC18, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AC38 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshLodLevelInfo>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A908))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AC58);
    qword_26AF7AC58 = (uint64_t)&unk_26E6D69F0;
    __cxa_guard_release(&qword_26AF7A908);
  }
  if ((byte_26AF7A757 & 1) == 0)
  {
    uint64_t v0 = re::introspect_MeshLodLevelInfo((re::IntrospectionBase **)1);
    if ((byte_26AF7A757 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF7A757 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AC58, 0);
      qword_26AF7AC68 = 0x2800000003;
      dword_26AF7AC70 = v2;
      word_26AF7AC74 = 0;
      *(void *)&xmmword_26AF7AC78 = 0;
      *((void *)&xmmword_26AF7AC78 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AC88 = v1;
      qword_26AF7AC90 = 0;
      qword_26AF7AC58 = (uint64_t)&unk_26E6D69F0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF7AC58, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF7AC78 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetContactDeformerData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A910, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A910);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AC98);
      qword_26AF7AC98 = (uint64_t)&unk_26E6D6A88;
      __cxa_guard_release(&qword_26AF7A910);
    }
  }
  if ((byte_26AF7A758 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7A818;
    if (qword_26AF7A818
      || (uint64_t v1 = re::allocInfo_MeshAssetContactDeformerData(a1),
          qword_26AF7A818 = (uint64_t)v1,
          re::initInfo_MeshAssetContactDeformerData((re *)v1, v2),
          (byte_26AF7A758 & 1) == 0))
    {
      byte_26AF7A758 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AC98, 0);
      qword_26AF7ACA8 = 0x2800000003;
      dword_26AF7ACB0 = v3;
      word_26AF7ACB4 = 0;
      *(void *)&xmmword_26AF7ACB8 = 0;
      *((void *)&xmmword_26AF7ACB8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7ACC8 = (uint64_t)v1;
      qword_26AF7ACD0 = 0;
      qword_26AF7AC98 = (uint64_t)&unk_26E6D6A88;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AC98, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7ACB8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSmoothDeformerData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A918, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A918);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7ACD8);
      qword_26AF7ACD8 = (uint64_t)&unk_26E6D6B20;
      __cxa_guard_release(&qword_26AF7A918);
    }
  }
  if ((byte_26AF7A759 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7A830;
    if (qword_26AF7A830
      || (uint64_t v1 = re::allocInfo_MeshAssetSmoothDeformerData(a1),
          qword_26AF7A830 = (uint64_t)v1,
          re::initInfo_MeshAssetSmoothDeformerData((re *)v1, v2),
          (byte_26AF7A759 & 1) == 0))
    {
      byte_26AF7A759 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7ACD8, 0);
      qword_26AF7ACE8 = 0x2800000003;
      dword_26AF7ACF0 = v3;
      word_26AF7ACF4 = 0;
      *(void *)&xmmword_26AF7ACF8 = 0;
      *((void *)&xmmword_26AF7ACF8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AD08 = (uint64_t)v1;
      qword_26AF7AD10 = 0;
      qword_26AF7ACD8 = (uint64_t)&unk_26E6D6B20;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7ACD8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7ACF8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetWrapDeformerData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A920, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A920);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AD18);
      qword_26AF7AD18 = (uint64_t)&unk_26E6D6BB8;
      __cxa_guard_release(&qword_26AF7A920);
    }
  }
  if ((byte_26AF7A75A & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7A7E8;
    if (qword_26AF7A7E8
      || (uint64_t v1 = re::allocInfo_MeshAssetWrapDeformerData(a1),
          qword_26AF7A7E8 = (uint64_t)v1,
          re::initInfo_MeshAssetWrapDeformerData((re *)v1, v2),
          (byte_26AF7A75A & 1) == 0))
    {
      byte_26AF7A75A = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AD18, 0);
      qword_26AF7AD28 = 0x2800000003;
      dword_26AF7AD30 = v3;
      word_26AF7AD34 = 0;
      *(void *)&xmmword_26AF7AD38 = 0;
      *((void *)&xmmword_26AF7AD38 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AD48 = (uint64_t)v1;
      qword_26AF7AD50 = 0;
      qword_26AF7AD18 = (uint64_t)&unk_26E6D6BB8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AD18, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AD38 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetOffsetsDeformerData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A928, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A928);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AD58);
      qword_26AF7AD58 = (uint64_t)&unk_26E6D6C50;
      __cxa_guard_release(&qword_26AF7A928);
    }
  }
  if ((byte_26AF7A75B & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7A848;
    if (qword_26AF7A848
      || (uint64_t v1 = re::allocInfo_MeshAssetOffsetsDeformerData(a1),
          qword_26AF7A848 = (uint64_t)v1,
          re::initInfo_MeshAssetOffsetsDeformerData((re *)v1, v2),
          (byte_26AF7A75B & 1) == 0))
    {
      byte_26AF7A75B = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AD58, 0);
      qword_26AF7AD68 = 0x2800000003;
      dword_26AF7AD70 = v3;
      word_26AF7AD74 = 0;
      *(void *)&xmmword_26AF7AD78 = 0;
      *((void *)&xmmword_26AF7AD78 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AD88 = (uint64_t)v1;
      qword_26AF7AD90 = 0;
      qword_26AF7AD58 = (uint64_t)&unk_26E6D6C50;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AD58, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7AD78 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::MeshAssetModel>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)&long long v3 = 0x7F0000007FLL;
  *((void *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a3 + 16) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 32) = v3;
  *(void *)(a3 + 504) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 124) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_DWORD *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 216) = 0;
  *(_DWORD *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_DWORD *)(a3 + 296) = 0;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_DWORD *)(a3 + 336) = 0;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_DWORD *)(a3 + 376) = 0;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_DWORD *)(a3 + 416) = 0;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_DWORD *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_DWORD *)(a3 + 496) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetModel>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)a3 + 472);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)a3 + 432);
  re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)a3 + 392);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)a3 + 352);
  re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)a3 + 312);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a3 + 272);
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)a3 + 232);
  re::DynamicArray<re::MeshAssetPart>::deinit((uint64_t)a3 + 192);
  re::DynamicArray<re::MeshAssetSkinningData>::deinit((uint64_t)a3 + 152);
  re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)a3 + 112);
  re::StringID::destroyString(a3);
}

double re::internal::defaultConstructV2<re::MeshAssetModel>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = "";
  *(void *)&long long v1 = 0x7F0000007FLL;
  *((void *)&v1 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 16) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 32) = v1;
  *(void *)(a1 + 504) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetModel>(re::StringID *a1)
{
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)a1 + 472);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)a1 + 432);
  re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)a1 + 392);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)a1 + 352);
  re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)a1 + 312);
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 272);
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)a1 + 232);
  re::DynamicArray<re::MeshAssetPart>::deinit((uint64_t)a1 + 192);
  re::DynamicArray<re::MeshAssetSkinningData>::deinit((uint64_t)a1 + 152);
  re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)a1 + 112);
  re::StringID::destroyString(a1);
}

void *re::allocInfo_MeshAssetInstance(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A8A0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B4F0, "MeshAssetInstance");
    __cxa_guard_release(&qword_26AF7A8A0);
  }
  return &unk_26AF7B4F0;
}

void re::initInfo_MeshAssetInstance(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xBA5A09BFFA142D30;
  v20[1] = "MeshAssetInstance";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8A8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A8A8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7A9C8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v10 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "transform";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7A9D0 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "modelIndex";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x5000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7A9D8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v17 = re::introspect_MeshLodSelectOptions((re::IntrospectionBase **)1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "lodSelectOptions";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x5400000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7A9E0 = v18;
      __cxa_guard_release(&qword_26AF7A8A8);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7A9C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetInstance>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetInstance>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetInstance>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetInstance>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::MeshAssetInstance>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(unsigned char *)(a3 + 84) = 0;
  *(_DWORD *)(a3 + 88) = 1065353216;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetInstance>(int a1, int a2, re::StringID *this)
{
}

double re::internal::defaultConstructV2<re::MeshAssetInstance>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = "";
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return result;
}

void *re::allocInfo_MeshAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7A8B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B568, "MeshAssetData");
    __cxa_guard_release(&qword_26AF7A8B8);
  }
  return &unk_26AF7B568;
}

void re::initInfo_MeshAssetData(re *this, re::IntrospectionBase *a2)
{
  v32[0] = 0xDD4C740759C3D65ALL;
  v32[1] = "MeshAssetData";
  re::StringID::destroyString((re::StringID *)v32);
  *((_OWORD *)this + 2) = v33;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A8C0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7A8C0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetModel>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "models";
      *(void *)(v6 + 16) = &qword_26AF7AD98;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7AA60 = v6;
      uint64_t v7 = (re *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetInstance>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "instances";
      *(void *)(v8 + 16) = &qword_26AF7ADD8;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x2800000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7AA68 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkeleton>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "skeletons";
      *(void *)(v10 + 16) = &qword_26AF7AB58;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x5000000003;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7AA70 = v10;
      uint64_t v11 = (re *)re::introspectionAllocator((re *)v10);
      long long v12 = v11;
      long long v13 = (re *)qword_26AF7A880;
      if (!qword_26AF7A880)
      {
        long long v13 = (re *)re::allocInfo_MeshAssetMetaData(v11);
        qword_26AF7A880 = (uint64_t)v13;
        re::initInfo_MeshAssetMetaData(v13, v14);
      }
      uint64_t v15 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "meshAssetMetaData";
      *(void *)(v15 + 16) = v13;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x7800000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7AA78 = v15;
      uint64_t v16 = (re *)re::introspectionAllocator((re *)v15);
      uint64_t v17 = v16;
      uint64_t v18 = (re *)qword_26AF7A8C8;
      if (!qword_26AF7A8C8)
      {
        uint64_t v18 = (re *)re::allocInfo_MeshAssetData(v16);
        qword_26AF7A8C8 = (uint64_t)v18;
        re::initInfo_MeshAssetData(v18, v19);
      }
      uint64_t v20 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 64, 8);
      *(_DWORD *)uint64_t v20 = 6;
      *(void *)(v20 + 8) = 2;
      *(void *)(v20 + 16) = v18;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)0>;
      *(unsigned char *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(_DWORD *)(v20 + 56) = 0;
      qword_26AF7AA80 = v20;
      long long v21 = (re *)re::introspectionAllocator((re *)v20);
      uint64_t v22 = v21;
      long long v23 = (re *)qword_26AF7A8C8;
      if (!qword_26AF7A8C8)
      {
        long long v23 = (re *)re::allocInfo_MeshAssetData(v21);
        qword_26AF7A8C8 = (uint64_t)v23;
        re::initInfo_MeshAssetData(v23, v24);
      }
      uint64_t v25 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 64, 8);
      *(_DWORD *)uint64_t v25 = 6;
      *(void *)(v25 + 8) = 3;
      *(void *)(v25 + 16) = v23;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)1>;
      *(unsigned char *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(_DWORD *)(v25 + 56) = 0;
      qword_26AF7AA88 = v25;
      uint64_t v26 = (re *)re::introspectionAllocator((re *)v25);
      long long v27 = v26;
      uint64_t v28 = (re *)qword_26AF7A8C8;
      if (!qword_26AF7A8C8)
      {
        uint64_t v28 = (re *)re::allocInfo_MeshAssetData(v26);
        qword_26AF7A8C8 = (uint64_t)v28;
        re::initInfo_MeshAssetData(v28, v29);
      }
      uint64_t v30 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 64, 8);
      *(_DWORD *)uint64_t v30 = 6;
      *(void *)(v30 + 8) = 4;
      *(void *)(v30 + 16) = v28;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)2>;
      *(unsigned char *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(_DWORD *)(v30 + 56) = 0;
      qword_26AF7AA90 = v30;
      __cxa_guard_release(&qword_26AF7A8C0);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF7AA60;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v31 = v33;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetModel>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A930, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A930);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7AD98);
      qword_26AF7AD98 = (uint64_t)&unk_26E6D6CE8;
      __cxa_guard_release(&qword_26AF7A930);
    }
  }
  if ((byte_26AF7A75C & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A898;
    if (qword_26AF7A898
      || (long long v1 = re::allocInfo_MeshAssetModel(a1),
          qword_26AF7A898 = (uint64_t)v1,
          re::initInfo_MeshAssetModel((re *)v1, v2),
          (byte_26AF7A75C & 1) == 0))
    {
      byte_26AF7A75C = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7AD98, 0);
      qword_26AF7ADA8 = 0x2800000003;
      dword_26AF7ADB0 = v3;
      word_26AF7ADB4 = 0;
      *(void *)&xmmword_26AF7ADB8 = 0;
      *((void *)&xmmword_26AF7ADB8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7ADC8 = (uint64_t)v1;
      qword_26AF7ADD0 = 0;
      qword_26AF7AD98 = (uint64_t)&unk_26E6D6CE8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7AD98, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7ADB8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetInstance>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7A938, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7A938);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7ADD8);
      qword_26AF7ADD8 = (uint64_t)&unk_26E6D6D80;
      __cxa_guard_release(&qword_26AF7A938);
    }
  }
  if ((byte_26AF7A75D & 1) == 0)
  {
    long long v1 = (void *)qword_26AF7A8B0;
    if (qword_26AF7A8B0
      || (long long v1 = re::allocInfo_MeshAssetInstance(a1),
          qword_26AF7A8B0 = (uint64_t)v1,
          re::initInfo_MeshAssetInstance((re *)v1, v2),
          (byte_26AF7A75D & 1) == 0))
    {
      byte_26AF7A75D = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7ADD8, 0);
      qword_26AF7ADE8 = 0x2800000003;
      dword_26AF7ADF0 = v3;
      word_26AF7ADF4 = 0;
      *(void *)&xmmword_26AF7ADF8 = 0;
      *((void *)&xmmword_26AF7ADF8 + 1) = 0xFFFFFFFFLL;
      qword_26AF7AE08 = (uint64_t)v1;
      qword_26AF7AE10 = 0;
      qword_26AF7ADD8 = (uint64_t)&unk_26E6D6D80;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7ADD8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7ADF8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

uint64_t re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetModel>::operator=(a3, a2);
  re::DynamicArray<re::MeshAssetInstance>::operator=(a3 + 40, a2 + 5);
  uint64_t v5 = (uint64_t *)(a3 + 80);
  re::DynamicArray<re::MeshAssetSkeleton>::operator=(a3 + 80, a2 + 10);
  re::DynamicArray<float>::operator=(a3 + 120, a2 + 15);
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v8 + (v7 << 9);
    uint64_t v26 = v9;
    do
    {
      unint64_t v10 = *(void *)(a3 + 96);
      uint64_t v11 = *(void *)(v8 + 248);
      if (v11)
      {
        if (v10 == -1)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_22:
          re::internal::assertLog((re::internal *)7, v6, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v10, v10, v11);
          _os_crash();
          __break(1u);
        }
        unint64_t v12 = v10 + v11;
        if (__CFADD__(v10, v11)) {
          goto LABEL_22;
        }
        long long v13 = *(uint64_t **)(v8 + 264);
        if (v10 >= v12)
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton const*,re::MeshAssetSkeleton const*,re::MeshAssetSkeleton*>(*(uint64_t **)(v8 + 264), &v13[14 * v11], *(void *)(a3 + 112) + 112 * v10);
        }
        else
        {
          re::DynamicArray<re::MeshAssetSkeleton>::growCapacity(v5, v10 + v11);
          uint64_t v14 = *(void *)(a3 + 96);
          char v15 = &v13[14 * (v14 - v10)];
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton const*,re::MeshAssetSkeleton const*,re::MeshAssetSkeleton*>(v13, v15, *(void *)(a3 + 112) + 112 * v10);
          if (v14 - v10 != v11)
          {
            unint64_t v16 = 0;
            uint64_t v17 = *(void *)(a3 + 112) + 112 * *(void *)(a3 + 96);
            uint64_t v18 = 112 * v10 + 112 * v11 - 112 * v14;
            do
            {
              re::StringID::StringID((re::StringID *)(v17 + v16), (const StringID *)&v15[v16 / 8]);
              re::FixedArray<re::StringID>::FixedArray((unint64_t *)(v17 + v16 + 16), (uint64_t)&v15[v16 / 8 + 2]);
              re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v17 + v16 + 40), (uint64_t)&v15[v16 / 8 + 5]);
              re::FixedArray<re::GenericSRT<float>>::FixedArray((void *)(v17 + v16 + 64), (uint64_t)&v15[v16 / 8 + 8]);
              re::FixedArray<re::Matrix4x4<float>>::FixedArray((uint64_t *)(v17 + v16 + 88), (uint64_t)&v15[v16 / 8 + 11]);
              v16 += 112;
            }
            while (v18 != v16);
          }
          *(void *)(a3 + 96) = v12;
          uint64_t v9 = v26;
          uint64_t v5 = (uint64_t *)(a3 + 80);
        }
        ++*(_DWORD *)(a3 + 104);
      }
      uint64_t v19 = *(void *)(v8 + 168);
      if (v19)
      {
        uint64_t v20 = *(_DWORD **)(v8 + 184);
        uint64_t v21 = 144 * v19;
        do
        {
          *v20 += v10;
          v20 += 36;
          v21 -= 144;
        }
        while (v21);
      }
      v8 += 512;
    }
    while (v8 != v9);
    uint64_t v22 = *(void *)(a3 + 16);
    if (v22)
    {
      uint64_t v23 = v22 << 9;
      uint64_t v24 = *(void *)(a3 + 32) + 232;
      do
      {
        re::DynamicArray<re::MeshAssetSkeleton>::operator=(v24, v5);
        v24 += 512;
        v23 -= 512;
      }
      while (v23);
    }
  }
  return 1;
}

uint64_t re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)1>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  re::DynamicArray<re::MeshAssetModel>::operator=(a3, a2);
  re::DynamicArray<re::MeshAssetInstance>::operator=(a3 + 40, a2 + 5);
  re::DynamicArray<re::MeshAssetSkeleton>::operator=(a3 + 80, a2 + 10);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<float>::operator=(a3 + 120, a2 + 15);
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  int v25 = 1;
  long long v27 = 0;
  unint64_t v28 = 0;
  uint64_t v26 = 0;
  int v29 = 0;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    unsigned __int16 v7 = 0;
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v8 + (v6 << 9);
    do
    {
      uint64_t v10 = *(void *)(v8 + 208);
      if (v10)
      {
        uint64_t v11 = v10 << 8;
        unint64_t v12 = (unsigned __int16 *)(*(void *)(v8 + 224) + 56);
        do
        {
          unsigned int v13 = *v12;
          if (v13 == 0xFFFF)
          {
            unint64_t v14 = v28;
            unint64_t v15 = v24;
            if (v28 + 1 > 32 * v24)
            {
              re::BucketArray<unsigned short *,32ul>::setBucketsCapacity(&v23, (v28 + 32) >> 5);
              unint64_t v15 = v24;
            }
            if (v15 <= v14 >> 5)
            {
              uint64_t v30 = 0;
              long long v42 = 0u;
              long long v43 = 0u;
              long long v40 = 0u;
              long long v41 = 0u;
              long long v39 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v31 = 136315906;
              uint64_t v32 = "operator[]";
              __int16 v33 = 1024;
              int v34 = 858;
              __int16 v35 = 2048;
              unint64_t v36 = v14 >> 5;
              __int16 v37 = 2048;
              unint64_t v38 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            unint64_t v16 = v27;
            if (v25) {
              unint64_t v16 = &v26;
            }
            uint64_t v17 = v16[v14 >> 5];
            ++v28;
            ++v29;
            *(void *)(v17 + 8 * (v14 & 0x1F)) = v12;
          }
          else if (v13 > v7)
          {
            unsigned __int16 v7 = *v12;
          }
          v12 += 128;
          v11 -= 256;
        }
        while (v11);
      }
      v8 += 512;
    }
    while (v8 != v9);
  }
  else
  {
    unsigned __int16 v7 = 0;
  }
  unint64_t v18 = v28;
  if (v28)
  {
    unint64_t v19 = 0;
    __int16 v20 = v7 + 1;
    do
      **(_WORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v23, v19++) = v20;
    while (v18 != v19);
    unint64_t v21 = 0;
    do
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v23, v21++);
    while (v18 != v21);
  }
  while (v24)
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(&v23);
  if (v23 && (v25 & 1) == 0) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  return 1;
}

BOOL re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)2>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)a2;
  uint64_t v53 = *MEMORY[0x263EF8340];
  re::DynamicArray<re::MeshAssetModel>::operator=(a3, a2);
  re::DynamicArray<re::MeshAssetInstance>::operator=(a3 + 40, (uint64_t *)(v5 + 40));
  re::DynamicArray<re::MeshAssetSkeleton>::operator=(a3 + 80, (uint64_t *)(v5 + 80));
  uint64_t v6 = re::DynamicArray<float>::operator=(a3 + 120, (uint64_t *)(v5 + 120));
  uint64_t v7 = *(void *)(a3 + 16);
  if (!v7) {
    return 1;
  }
  uint64_t v8 = *(void **)(a3 + 32);
  long long v43 = &v8[64 * v7];
  while (1)
  {
    uint64_t v44 = *((unsigned int *)v8 + 52);
    if (*((_DWORD *)v8 + 52)) {
      break;
    }
LABEL_26:
    v8 += 64;
    if (v8 == v43)
    {
      uint64_t v25 = *(void *)(a3 + 16);
      if (v25)
      {
        uint64_t v26 = *(float32x4_t **)(a3 + 32);
        long long v27 = &v26[32 * v25];
        int32x4_t v45 = vdupq_n_s32(0x7F800000u);
        while (1)
        {
          if (v26[10].i64[1])
          {
            uint64_t v28 = v26[13].u32[0];
            if (v26[13].i32[0])
            {
              unint64_t v29 = 0;
              v30.i64[0] = 0x7F0000007FLL;
              v30.i64[1] = 0x7F0000007FLL;
              uint64_t v31 = 80;
              uint64_t v32 = 96;
              float32x4_t v33 = (float32x4_t)v45;
              while (v26[13].i64[0] > v29)
              {
                if (v26[10].i64[1] <= v29) {
                  goto LABEL_46;
                }
                float32x4_t v47 = v33;
                float32x4_t v49 = v30;
                re::AABB::transform((float32x4_t *)(v26[14].i64[0] + v32), (float32x4_t *)(v26[11].i64[1] + v31), (uint64_t)buf);
                float32x4_t v35 = v47;
                float32x4_t v34 = v49;
                v35.i32[3] = 0;
                float32x4_t v36 = *(float32x4_t *)buf;
                float32x4_t v37 = *(float32x4_t *)&buf[16];
                v36.i32[3] = 0;
                v34.i32[3] = 0;
                v37.i32[3] = 0;
                float32x4_t v33 = vminnmq_f32(v35, v36);
                float32x4_t v30 = vmaxnmq_f32(v34, v37);
                ++v29;
                v32 += 256;
                v31 += 144;
                if (v28 == v29) {
                  goto LABEL_37;
                }
              }
              long long v51 = 0u;
              long long v52 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_46:
              long long v51 = 0u;
              long long v52 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_47:
              long long v51 = 0u;
              long long v52 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v30.i64[0] = 0x7F0000007FLL;
            v30.i64[1] = 0x7F0000007FLL;
            float32x4_t v33 = (float32x4_t)v45;
LABEL_37:
            v26[1] = v33;
            void v26[2] = v30;
          }
          v26 += 32;
          if (v26 == v27) {
            return 1;
          }
        }
      }
      return 1;
    }
  }
  unint64_t v9 = 0;
  while (1)
  {
    unint64_t v10 = v8[26];
    if (v10 <= v9) {
      goto LABEL_43;
    }
    uint64_t v3 = v8[28];
    uint64_t v11 = (float32x4_t *)(v3 + (v9 << 8));
    float32x4_t v46 = v11[7];
    float32x4_t v48 = v11[6];
    uint32x4_t v12 = (uint32x4_t)vcgtq_f32(v48, v46);
    v12.i32[3] = v12.i32[2];
    if ((vmaxvq_u32(v12) & 0x80000000) != 0)
    {
      unint64_t v10 = v11[1].u64[0];
      unint64_t v13 = 0;
      if (v10)
      {
        uint64_t v5 = 8;
        while (v10 != v13)
        {
          unint64_t v14 = (void *)(v11[2].i64[0] + v5);
          if (*v14) {
            unint64_t v15 = (const char *)v14[1];
          }
          else {
            unint64_t v15 = (char *)v14 + 1;
          }
          uint64_t v6 = strcmp(v15, "vertexPosition");
          if (!v6)
          {
            unint64_t v13 = v13;
            goto LABEL_19;
          }
          ++v13;
          v5 += 80;
          if (v10 == v13) {
            goto LABEL_7;
          }
        }
        long long v51 = 0u;
        long long v52 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        long long v51 = 0u;
        long long v52 = 0u;
        memset(buf, 0, sizeof(buf));
        long long v39 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_44;
      }
LABEL_19:
      if (v13 != v10) {
        break;
      }
    }
LABEL_7:
    if (++v9 == v44) {
      goto LABEL_26;
    }
  }
  if (v10 <= v13) {
    goto LABEL_47;
  }
  uint64_t v16 = v11[2].i64[0];
  unint64_t v10 = *(void *)(v16 + 80 * v13 + 48);
  uint64_t v17 = v3 + (v9 << 8);
  unsigned int v19 = *(_DWORD *)(v17 + 48);
  uint64_t v5 = v17 + 48;
  unsigned int v18 = v19;
  if (v19 <= v10 / 0xC)
  {
    if (v18)
    {
      uint64_t v20 = *(void *)(v16 + 80 * v13 + 64);
      uint64_t v21 = v20 + 12 * v18;
      do
      {
        v22.i64[0] = *(void *)v20;
        float32x4_t v23 = v48;
        v23.i32[3] = 0;
        v22.i64[1] = *(unsigned int *)(v20 + 8);
        float32x4_t v48 = vminnmq_f32(v23, v22);
        v11[6] = v48;
        float32x4_t v24 = v46;
        v24.i32[3] = 0;
        float32x4_t v46 = vmaxnmq_f32(v24, v22);
        v11[7] = v46;
        v20 += 12;
      }
      while (v20 != v21);
    }
    goto LABEL_7;
  }
  long long v39 = *re::assetTypesLogObjects((re *)v6);
  BOOL result = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
LABEL_44:
  uint64_t v40 = v8[1];
  uint64_t v41 = *(void *)(v3 + (v9 << 8) + 80);
  int v42 = *(_DWORD *)v5;
  *(_DWORD *)long long buf = 136315906;
  *(void *)&uint8_t buf[4] = v40;
  *(_WORD *)&unsigned char buf[12] = 2080;
  *(void *)&buf[14] = v41;
  *(_WORD *)&unsigned char buf[22] = 1024;
  *(_DWORD *)&uint8_t buf[24] = v42;
  *(_WORD *)&buf[28] = 2048;
  *(void *)&buf[30] = v10;
  _os_log_error_impl(&dword_233120000, v39, OS_LOG_TYPE_ERROR, "Invalid vertex count in MeshAssetModel. Model: %s, Part: %s, Vertex Count: %u, Data Size: %lu", buf, 0x26u);
  return 0;
}

double re::internal::defaultConstruct<re::MeshAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::MeshAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)(a3 + 10));
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)(a3 + 5));
  return re::DynamicArray<re::MeshAssetModel>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshAssetData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::MeshAssetData>(void *a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)(a1 + 10));
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)(a1 + 5));
  return re::DynamicArray<re::MeshAssetModel>::deinit(a1);
}

uint64_t re::introspect_MeshAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshAssetData", (uint64_t (*)(re::internal *))re::allocInfo_MeshAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_MeshAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF7A8C8, this);
}

void *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetBuffer>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetBuffer>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBuffer>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetBuffer>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::MeshAssetBuffer>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetBuffer>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetBuffer>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  re::DynamicString::setCapacity(&v11, 0);
  *((void *)&v15 + 1) = 0;
  long long v14 = 0uLL;
  *((void *)&v13 + 1) = 0;
  LODWORD(v15) = 0;
  LOWORD(v16) = 256;
  v8.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add(a4, (uint64_t)&v11);
  if (*((void *)&v13 + 1))
  {
    if (*((void *)&v15 + 1)) {
      (*(void (**)(double))(**((void **)&v13 + 1) + 40))(v8.n128_f64[0]);
    }
    *((void *)&v15 + 1) = 0;
    long long v14 = 0uLL;
    *((void *)&v13 + 1) = 0;
    LODWORD(v15) = v15 + 1;
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(__n128))(*v11 + 40))(v8);
  }
  unint64_t v9 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 80 * *((void *)a4 + 2) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBuffer>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBuffer>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

void re::DynamicArray<re::MeshAssetBuffer>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 80 * a2;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (re::DynamicString *)(*((void *)v3 + 4) + v8);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v10 + 32);
      re::DynamicString::deinit(v10);
      ++v9;
      v8 += 80;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetBuffer>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 80 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 64) = 0;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        v6 += 80;
        *(_WORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 256;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::MeshAssetBuffer>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetBuffer>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetBuffer>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetBuffer>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 80 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 80;
        v11 -= 80;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 80 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, long long *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10 = (uint64_t)a1 + 200;
  uint64_t v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    long long v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  uint64_t v22 = 0x449AD97C4B77BED4;
  float32x4_t v23 = "_CompareFunc";
  long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      uint64_t v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(void *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  uint64_t v15 = v22;
  uint64_t v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (uint64_t v16 = *v28,
        uint64_t v22 = v14,
        float32x4_t v23 = v16,
        int v24 = -1,
        (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v27.var0 + 768, &v22)) == 0)|| !*(void *)v17)
  {
    long long v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    uint64_t v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::DynamicString>, 0);
  }
  long long v18 = *(_OWORD *)a3;
  long long v20 = *a4;
  long long v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

void *re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  uint64_t v10 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (re::DynamicString *)&v12);
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*v12 + 40))();
  }
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 20;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 80 * v10 + 16, *(void *)(a2 + 16) + 80 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 80 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 80 * v9 + 48), a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 80 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (re::DynamicString *)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 80 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 20;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::SkinningInfluence>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::SkinningInfluence>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::SkinningInfluence>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

void re::IntrospectionFixedArray<re::SkinningInfluence>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  re::FixedArray<re::SkinningInfluence>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 8;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::deinit(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::SkinningInfluence>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 8 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 8 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  return re::FixedArray<CoreIKTransform>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  re::FixedArray<re::SkinningInfluence>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 8 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void *re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::destroy(uint64_t a1, void *a2)
{
  return re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a2);
}

void re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 32;
    }
    while (a5 != v11);
  }
}

void *re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::deinit(uint64_t a1, void *a2)
{
  return re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = a3;
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(void *a1)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a1);
  return re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a1);
  re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 32 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetSkeleton>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetSkeleton>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetSkeleton>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  re::DynamicArray<re::MeshAssetSkeleton>::add(this, v10);
  if (*((void *)&v15 + 1))
  {
    if ((void)v16)
    {
      (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
      long long v16 = 0uLL;
    }
    *((void *)&v15 + 1) = 0;
  }
  if ((void)v14)
  {
    if (*((void *)&v14 + 1))
    {
      (*(void (**)(void))(*(void *)v14 + 40))();
      *((void *)&v14 + 1) = 0;
      *(void *)&long long v15 = 0;
    }
    *(void *)&long long v14 = 0;
  }
  if (*((void *)&v12 + 1))
  {
    if ((void)v13)
    {
      (*(void (**)(void))(**((void **)&v12 + 1) + 40))();
      long long v13 = 0uLL;
    }
    *((void *)&v12 + 1) = 0;
  }
  re::FixedArray<re::StringID>::deinit(&v11);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 112 * *((void *)this + 2) - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

void *re::DynamicArray<re::MeshAssetSkeleton>::add(void *this, uint64_t *a2)
{
  unint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetSkeleton>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = (unint64_t *)(v3[4] + 112 * v4);
  uint64_t v6 = *a2;
  *uint64_t v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  void v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  unint64_t v7 = a2[3];
  void v5[2] = a2[2];
  v5[3] = v7;
  a2[2] = 0;
  a2[3] = 0;
  unint64_t v8 = v5[4];
  v5[4] = a2[4];
  a2[4] = v8;
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0;
  unint64_t v9 = a2[6];
  v5[5] = a2[5];
  v5[6] = v9;
  a2[5] = 0;
  a2[6] = 0;
  unint64_t v10 = v5[7];
  v5[7] = a2[7];
  a2[7] = v10;
  v5[8] = 0;
  v5[9] = 0;
  v5[10] = 0;
  unint64_t v11 = a2[9];
  v5[8] = a2[8];
  v5[9] = v11;
  a2[8] = 0;
  a2[9] = 0;
  unint64_t v12 = v5[10];
  v5[10] = a2[10];
  a2[10] = v12;
  v5[11] = 0;
  v5[12] = 0;
  v5[13] = 0;
  unint64_t v13 = a2[12];
  v5[11] = a2[11];
  v5[12] = v13;
  a2[11] = 0;
  a2[12] = 0;
  unint64_t v14 = v5[13];
  v5[13] = a2[13];
  a2[13] = v14;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSkeleton>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSkeleton>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetSkeleton>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 112 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetBlendShapeData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  v10[1] = (uint64_t)"";
  re::DynamicArray<re::MeshAssetBlendShapeData>::add(this, v10);
  re::FixedArray<re::BlendShapeDefinition>::deinit(v11);
  re::StringID::destroyString((re::StringID *)v10);
  unint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 56 * *((void *)this + 2) - 56);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 56 * a3;
}

void *re::DynamicArray<re::MeshAssetBlendShapeData>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetBlendShapeData>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 56 * v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  uint64_t v7 = a2[3];
  *(void *)(v5 + 16) = a2[2];
  *(void *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v8 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = a2[4];
  a2[4] = v8;
  *(void *)(v5 + 40) = a2[5];
  *(_WORD *)(v5 + 48) = *((_WORD *)a2 + 24);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::MeshAssetBlendShapeData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetBlendShapeData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 56 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 56;
        v11 -= 56;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 56 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetSkinningData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetSkinningData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::MeshAssetSkinningData>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v11 = 0xFFFFFFFFLL;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  __n128 v8 = re::DynamicArray<re::MeshAssetSkinningData>::add(this, (uint64_t)&v11);
  if ((void)v15)
  {
    if (*((void *)&v15 + 1))
    {
      (*(void (**)(__n128))(*(void *)v15 + 40))(v8);
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
    }
    *(void *)&long long v15 = 0;
  }
  if (*((void *)&v13 + 1))
  {
    if ((void)v14)
    {
      (*(void (**)(__n128))(**((void **)&v13 + 1) + 40))(v8);
      long long v14 = 0uLL;
    }
    *((void *)&v13 + 1) = 0;
  }
  if ((void)v12 && *((void *)&v12 + 1)) {
    (*(void (**)(__n128))(*(void *)v12 + 40))(v8);
  }
  uint64_t v9 = (re::IntrospectionBase *)(*((void *)this + 4) + 144 * *((void *)this + 2) - 144);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 144 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 144 * a3;
}

void *re::DynamicArray<re::MeshAssetSkinningData>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 144 * a2 + 56;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (uint64_t *)(v3[4] + v8);
      re::FixedArray<CoreIKTransform>::deinit(v10);
      re::FixedArray<CoreIKTransform>::deinit(v10 - 3);
      uint64_t result = (void *)re::FixedArray<CoreIKTransform>::deinit(v10 - 6);
      ++v9;
      v8 += 144;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 144 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(_DWORD *)uint64_t v7 = -1;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0uLL;
        *(void *)(v7 + 136) = 0;
        v6 += 144;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSkinningData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSkinningData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetSkinningData>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 144 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 144;
        v11 -= 144;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 144 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 144 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetPart>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetPart>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetPart>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetPart>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetPart>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetPart>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetPart>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetPart>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetPart>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::MeshAssetPart>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::MeshAssetPart>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::MeshAssetPart>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetPart>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0uLL;
  uint64_t v16 = 0;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(v11, 0, sizeof(v11));
  BYTE12(v12) = 1;
  DWORD1(v13) = 1;
  WORD4(v13) = -1;
  long long v15 = "";
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + 1) = 0x7F0000007FLL;
  int32x4_t v17 = vdupq_n_s32(0x7F800000u);
  long long v18 = v8;
  uint64_t v24 = 0x7FFFFFFF00000000;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  re::DynamicArray<re::MeshAssetPart>::add(this, (uint64_t)v11);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v23[8]);
  re::StringID::destroyString((re::StringID *)((char *)&v14 + 8));
  re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)v11);
  uint64_t v9 = (re::IntrospectionBase *)(*((void *)this + 4) + (*((void *)this + 2) << 8) - 256);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetPart>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetPart>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 8);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 8);
}

void *re::DynamicArray<re::MeshAssetPart>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    unint64_t v10 = a2 << 8;
    unint64_t v11 = a2;
    do
    {
      uint64_t v12 = v3[4] + v10;
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v12 + 200));
      re::StringID::destroyString((re::StringID *)(v12 + 72));
      uint64_t result = (void *)re::DynamicArray<re::MeshAssetBuffer>::deinit(v12);
      ++v11;
      v10 += 256;
    }
    while (v11 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::MeshAssetPart>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = (v4 << 8) | 0x80;
      int32x4_t v7 = vdupq_n_s32(0x7F800000u);
      *(void *)&long long v8 = 0x7F0000007FLL;
      *((void *)&v8 + 1) = 0x7F0000007FLL;
      do
      {
        uint64_t v9 = v3[4] + v6;
        *(void *)(v9 - 96) = 0;
        *(void *)(v9 - re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
        *(void *)(v9 - 112) = 0;
        *(void *)(v9 - 128) = 0;
        *(_DWORD *)(v9 - 104) = 0;
        *(_DWORD *)(v9 - 88) = 0;
        *(unsigned char *)(v9 - 84) = 1;
        *(void *)(v9 - 80) = 0x100000000;
        *(_WORD *)(v9 - re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = -1;
        *(void *)(v9 - 68) = 0;
        *(void *)(v9 - 56) = 0;
        *(void *)(v9 - 48) = "";
        *(int32x4_t *)(v9 - 32) = v7;
        *(_OWORD *)(v9 - 16) = v8;
        *(unsigned char *)(v9 + 66) = 0;
        *(unsigned char *)(v9 + 68) = 0;
        *(_OWORD *)uint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        *(_OWORD *)(v9 + 32) = 0uLL;
        *(_OWORD *)(v9 + 48) = 0uLL;
        *(unsigned char *)(v9 + 64) = 0;
        *(_OWORD *)(v9 + 104) = 0uLL;
        *(_OWORD *)(v9 + 88) = 0uLL;
        *(_OWORD *)(v9 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0uLL;
        v6 += 256;
        *(_DWORD *)(v9 + 108) = 0x7FFFFFFF;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetPart>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetPart>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetPart>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetPart>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  long long v8 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetPart>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = v9 << 8;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 256;
        v11 -= 256;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 8);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 8);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshLodLevelInfo>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  int v11 = 0;
  uint64_t v10 = 0;
  re::DynamicArray<re::MeshLodLevelInfo>::add(this, &v10);
  long long v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 12 * *((void *)this + 2) - 12);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 12 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 12 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshLodLevelInfo>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 12 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 12;
        v11 -= 12;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 12 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 12 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetContactDeformerData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  memset(v11, 0, sizeof(v11));
  v10[1] = (uint64_t)"";
  re::DynamicArray<re::MeshAssetContactDeformerData>::add(this, v10);
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(v11);
  re::StringID::destroyString((re::StringID *)v10);
  long long v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 48 * *((void *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void *re::DynamicArray<re::MeshAssetContactDeformerData>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetContactDeformerData>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 48 * v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  uint64_t v7 = a2[3];
  *(void *)(v5 + 16) = a2[2];
  *(void *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v8 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = a2[4];
  a2[4] = v8;
  *(_WORD *)(v5 + 40) = *((_WORD *)a2 + 20);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::MeshAssetContactDeformerData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetContactDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  uint64_t v10[2] = 0;
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * *((void *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::MeshAssetSmoothDeformerData>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetSmoothDeformerData>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 24 * v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(_WORD *)(v5 + 16) = *((_WORD *)a2 + 8);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::MeshAssetSmoothDeformerData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetWrapDeformerData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v11[0] = 0;
  long long v15 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  v10[1] = (uint64_t)"";
  v11[1] = "";
  long long v16 = 0uLL;
  re::DynamicArray<re::MeshAssetWrapDeformerData>::add(this, v10);
  if ((void)v15)
  {
    if (*((void *)&v15 + 1))
    {
      (*(void (**)(void))(*(void *)v15 + 40))();
      *((void *)&v15 + 1) = 0;
      *(void *)&long long v16 = 0;
    }
    *(void *)&long long v15 = 0;
  }
  if (*((void *)&v13 + 1))
  {
    if ((void)v14)
    {
      (*(void (**)(void))(**((void **)&v13 + 1) + 40))();
      long long v14 = 0uLL;
    }
    *((void *)&v13 + 1) = 0;
  }
  if ((void)v12)
  {
    if (*((void *)&v12 + 1))
    {
      (*(void (**)(void))(*(void *)v12 + 40))();
      *((void *)&v12 + 1) = 0;
      *(void *)&long long v13 = 0;
    }
    *(void *)&long long v12 = 0;
  }
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 112 * *((void *)this + 2) - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

void *re::DynamicArray<re::MeshAssetWrapDeformerData>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetWrapDeformerData>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 112 * v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  uint64_t v7 = a2[2];
  *(void *)(v5 + 16) = *(void *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 16) = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 24) = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)"";
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  uint64_t v8 = a2[5];
  *(void *)(v5 + 32) = a2[4];
  *(void *)(v5 + 40) = v8;
  a2[4] = 0;
  a2[5] = 0;
  uint64_t v9 = *(void *)(v5 + 48);
  *(void *)(v5 + 48) = a2[6];
  a2[6] = v9;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  uint64_t v10 = a2[8];
  *(void *)(v5 + 56) = a2[7];
  *(void *)(v5 + 64) = v10;
  a2[7] = 0;
  a2[8] = 0;
  uint64_t v11 = *(void *)(v5 + 72);
  *(void *)(v5 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = a2[9];
  a2[9] = v11;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  uint64_t v12 = a2[11];
  *(void *)(v5 + 80) = a2[10];
  *(void *)(v5 + 88) = v12;
  a2[10] = 0;
  a2[11] = 0;
  uint64_t v13 = *(void *)(v5 + 96);
  *(void *)(v5 + 96) = a2[12];
  a2[12] = v13;
  *(_WORD *)(v5 + 104) = *((_WORD *)a2 + 52);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::MeshAssetWrapDeformerData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetWrapDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 112 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  uint64_t v10[2] = 0;
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * *((void *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetModel>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetModel>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetModel>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

void *re::IntrospectionDynamicArray<re::MeshAssetModel>::destroy(uint64_t a1, void *a2)
{
  return re::DynamicArray<re::MeshAssetModel>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetModel>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetModel>::deinit((void *)a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetModel>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetModel>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetModel>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetModel>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetModel>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetModel>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v31 = 0u;
  uint64_t v29 = 0;
  uint64_t v18 = 0;
  long long v19 = "";
  int32x4_t v20 = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v8 = 0x7F0000007FLL;
  *((void *)&v8 + 1) = 0x7F0000007FLL;
  long long v21 = v8;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v30, 0, sizeof(v30));
  LODWORD(v31) = 0;
  unint64_t v9 = *((void *)this + 2);
  if (v9 >= *((void *)this + 1))
  {
    re::DynamicArray<re::MeshAssetModel>::growCapacity(this, v9 + 1);
    unint64_t v9 = *((void *)this + 2);
  }
  re::MeshAssetModel::MeshAssetModel(*((void *)this + 4) + (v9 << 9), &v18);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)&v30[36]);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v30[31]);
  re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)&v30[26]);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v30[21]);
  re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)&v30[16]);
  if (v30[11])
  {
    if (v30[15]) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t, void, void, void))(*(void *)v30[11] + 40))(v30[11], v30[15], v10, v11, v12, v13, v14, v15, v18, v19, v20.i64[0], v20.i64[1], v21, *((void *)&v21 + 1), v22, *((void *)&v22 + 1), v23, *((void *)&v23 + 1), v24,
    }
        *((void *)&v24 + 1),
        v25,
        *((void *)&v25 + 1),
        *(void *)&v26[0],
        *((void *)&v26[0] + 1),
        *(void *)&v26[1],
        *((void *)&v26[1] + 1),
        v27,
        *((void *)&v27 + 1),
        v28,
        *((void *)&v28 + 1),
        v29,
        v30[0],
        v30[1],
        v30[2]);
    v30[15] = 0;
    memset(&v30[11], 0, 24);
    ++LODWORD(v30[14]);
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v30[6]);
  re::DynamicArray<re::MeshAssetPart>::deinit((uint64_t)&v30[1]);
  re::DynamicArray<re::MeshAssetSkinningData>::deinit((uint64_t)&v27 + 8);
  re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)v26);
  re::StringID::destroyString((re::StringID *)&v18);
  long long v16 = (re::IntrospectionBase *)(*((void *)this + 4) + (*((void *)this + 2) << 9) - 512);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v16);
  return v16;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetModel>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetModel>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 9);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 9);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetModel>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    re::ObjectHelper::destroy<re::MeshAssetModel>(*(re::StringID **)(a1 + 32), (re::StringID *)(*(void *)(a1 + 32) + (v8 << 9)));
  }
  else
  {
    re::DynamicArray<re::MeshAssetModel>::deinit((void *)a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetModel>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshAssetModel>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = *(char **)(a1 + 32);
      uint64_t v12 = v10 << 9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 512;
        v12 -= 512;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 9);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 9);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshAssetInstance>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetInstance>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshAssetInstance>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetInstance>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetInstance>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshAssetInstance>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshAssetInstance>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetInstance>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshAssetInstance>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetInstance>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  v10[0] = 0;
  long long v11 = 0u;
  v10[1] = (uint64_t)"";
  DWORD2(v15) = 1065353216;
  re::DynamicArray<re::MeshAssetInstance>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 96 * *((void *)this + 2) - 96);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetInstance>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetInstance>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 96 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 96 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetInstance>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetInstance>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetInstance>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 96 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::MeshAssetInstance>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    int v3 = *(re::StringID **)(a1 + 32);
    uint64_t v4 = 96 * v2;
    do
    {
      re::StringID::destroyString(v3);
      int v3 = (re::StringID *)((char *)v3 + 96);
      v4 -= 96;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 96 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshAssetModel>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetModel>::copy((void *)a1, (uint64_t)a2);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        re::ObjectHelper::destroy<re::MeshAssetModel>(*(re::StringID **)(a1 + 32), (re::StringID *)(*(void *)(a1 + 32) + (v6 << 9)));
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::MeshAssetModel>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetModel>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetInstance>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetInstance>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetInstance>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::MeshAssetInstance>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetInstance>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton const*,re::MeshAssetSkeleton const*,re::MeshAssetSkeleton*>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8), &v5[v6]);
      re::FixedArray<re::StringID>::operator=((unint64_t *)(a3 + v6 * 8 + 16), (uint64_t)&v5[v6 + 2]);
      re::FixedArray<unsigned int>::operator=((uint64_t *)(a3 + v6 * 8 + 40), (uint64_t)&v5[v6 + 5]);
      re::FixedArray<re::GenericSRT<float>>::operator=((void *)(a3 + v6 * 8 + 64), (uint64_t)&v5[v6 + 8]);
      uint64_t result = re::FixedArray<re::Matrix4x4<float>>::operator=((uint64_t *)(a3 + v6 * 8 + 88), (uint64_t)&v5[v6 + 11]);
      v6 += 14;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

void *re::BucketArray<unsigned short *,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<unsigned short *,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<unsigned short *,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  int v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        unint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          long long v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            long long v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::VideoFileAsset::assetType(re::VideoFileAsset *this)
{
  {
    re::VideoFileAsset::assetType(void)::type = (uint64_t)"VideoFile";
    qword_26879E7A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VideoFileAsset::assetType(void)::type);
  }
  return &re::VideoFileAsset::assetType(void)::type;
}

re::VideoFileAsset *re::VideoFileAsset::VideoFileAsset(re::VideoFileAsset *this)
{
  *(void *)this = &unk_26E6D6E18;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v2 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  int v3 = (re *)re::DynamicString::setCapacity(v2, 0);
  unint64_t v4 = re::globalAllocators(v3);
  unint64_t v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 32, 8);
  *unint64_t v5 = 0u;
  v5[1] = 0u;
  *((void *)this + 5) = v5;
  return this;
}

void sub_2334F4864(_Unwind_Exception *a1)
{
  re::DynamicString::deinit(v1);
  _Unwind_Resume(a1);
}

void re::VideoFileAsset::~VideoFileAsset(re::VideoFileAsset *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    int v3 = re::globalAllocators(this);
    uint64_t v4 = v3[2];
    unint64_t v5 = *(void (****)(void))(v2 + 24);
    if (v5)
    {
      uint64_t v6 = re::globalAllocators((re *)v3)[2];
      (**v5)(v5);
      (*(void (**)(uint64_t, void (***)(void)))(*(void *)v6 + 40))(v6, v5);
      *(void *)(v2 + 24) = 0;
    }
    id v7 = *(id *)v2;
    *(void *)uint64_t v2 = 0;

    if (*(unsigned char *)(v2 + 16))
    {
      int v8 = *(void **)(v2 + 8);
      if (v8)
      {
        unint64_t v9 = (const std::__fs::filesystem::path *)[v8 fileSystemRepresentation];
        remove(v9, v10);
      }
    }
    BOOL v11 = *(void **)(v2 + 8);
    *(void *)(v2 + 8) = 0;

    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v2);
  }
  re::DynamicString::deinit((re::VideoFileAsset *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::VideoFileAsset::~VideoFileAsset(this);
  JUMPOUT(0x237DBCBD0);
}

void sub_2334F4998(_Unwind_Exception *a1)
{
  re::DynamicString::deinit((re::DynamicString *)(v1 + 8));
  _Unwind_Resume(a1);
}

re::DynamicString *re::VideoFileAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::VideoFileAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v3 = (re::VideoFileAsset *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(void *)a2 = 0x100000001;
  re::VideoFileAsset::assetType(v3);
  v5[0] = re::VideoFileAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::VideoFileAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

uint64_t re::VideoFileAssetCompiler::assetIntrospectionType(re::VideoFileAssetCompiler *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B608, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B608))
  {
    qword_26AF7B600 = re::internal::getOrCreateInfo((re::internal *)"VideoFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_VideoFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VideoFileAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7B5F8, 0);
    __cxa_guard_release(&qword_26AF7B608);
  }
  return qword_26AF7B600;
}

void *re::VideoFileAssetCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  do
  {
    uint64_t result = re::DynamicArray<re::TransitionCondition *>::add((void *)a1, &v5);
    ++v3;
  }
  while (v3 != 5);
  return result;
}

void sub_2334F4B7C(_Unwind_Exception *a1)
{
  re::DynamicArray<unsigned long>::deinit(v1);
  _Unwind_Resume(a1);
}

void re::VideoFileAssetCompiler::compile(char *__s@<X1>, uint64_t a2@<X8>)
{
  id v7 = strrchr(__s, 46) + 1;
  if (!strcasecmp(v7, "mp4"))
  {
    int v8 = (id *)MEMORY[0x263EF9888];
  }
  else if (!strcasecmp(v7, "m4v"))
  {
    int v8 = (id *)MEMORY[0x263EF9858];
  }
  else if (!strcasecmp(v7, "3gp"))
  {
    int v8 = (id *)MEMORY[0x263EF9830];
  }
  else
  {
    if (strcasecmp(v7, "mov") && strcasecmp(v7, "qt")) {
      goto LABEL_12;
    }
    int v8 = (id *)MEMORY[0x263EF9898];
  }
  unint64_t v9 = (re *)*v8;
  if (v9)
  {
    unint64_t v10 = v9;
    BOOL v11 = re::globalAllocators(v9);
    unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 48, 8);
    re::VideoFileAsset::VideoFileAsset((re::VideoFileAsset *)v12);
    long long v22 = v10;
    *(void *)&long long v23 = [(re *)v22 UTF8String];
    *((void *)&v23 + 1) = strlen((const char *)v23);
    re::DynamicString::operator=((re::DynamicString *)(v12 + 1), (uint64_t)&v23);
    unint64_t v13 = NSURL;
    unint64_t v14 = [NSString stringWithUTF8String:__s];
    uint64_t v15 = [v13 fileURLWithPath:v14];
    uint64_t v16 = v12[5];
    int32x4_t v17 = *(void **)(v16 + 8);
    *(void *)(v16 + 8) = v15;

    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v12;
    uint64_t v18 = v22;
    goto LABEL_13;
  }
LABEL_12:
  re::DynamicString::format((re::DynamicString *)"Unsupported video file extension: %s", (re::DynamicString *)&v23, v7);
  uint64_t v18 = 0;
  long long v19 = v23;
  uint64_t v20 = v24;
  uint64_t v21 = v25;
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 100;
  *(void *)(a2 + 16) = re::AssetErrorCategory(void)::instance;
  *(_OWORD *)(a2 + 24) = v19;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v21;
LABEL_13:
}

void sub_2334F4D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

re *re::VideoFileAssetCompiler::deleteAsset(re::VideoFileAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::VideoFileAsset>(a2);
}

re *re::internal::destroyPersistent<re::VideoFileAsset>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::VideoFileAsset::~VideoFileAsset(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re::VideoFileAsset *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::VideoFileAssetLoader::introspectionType(re::VideoFileAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B608, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B608))
  {
    qword_26AF7B600 = re::internal::getOrCreateInfo((re::internal *)"VideoFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_VideoFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VideoFileAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7B5F8, 0);
    __cxa_guard_release(&qword_26AF7B608);
  }
  return qword_26AF7B600;
}

BOOL re::VideoFileAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 96))(&v31, a3);
  if ((_BYTE)v31)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 72))(a3);
    *(void *)(*(void *)(a2 + 40) + 24) = v5;
    if (v5) {
      return 1;
    }
  }
  else if (*(void *)(*(void *)(a2 + 40) + 24))
  {
    return 1;
  }
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v6 = a2 + 17;
  }
  id v7 = [NSString stringWithUTF8String:v6];
  if ([v7 isEqualToString:*MEMORY[0x263EF9888]])
  {
    int v8 = "mp4";
  }
  else if ([v7 isEqualToString:*MEMORY[0x263EF9858]])
  {
    int v8 = "m4v";
  }
  else if ([v7 isEqualToString:*MEMORY[0x263EF9830]])
  {
    int v8 = "3gp";
  }
  else
  {
    if (([v7 isEqualToString:*MEMORY[0x263EF9898]] & 1) == 0)
    {

      return 0;
    }
    int v8 = "mov";
  }

  unint64_t v9 = NSTemporaryDirectory();
  unint64_t v10 = [v9 stringByAppendingPathComponent:@"re_video"];

  id v11 = v10;
  re::DynamicString::format((re::DynamicString *)"%sXXXXXX.%s", (re::DynamicString *)&v31, [v11 UTF8String], v8);
  if (v32) {
    unint64_t v12 = v34;
  }
  else {
    unint64_t v12 = v33;
  }
  unint64_t v13 = (re *)mkstemps(v12, 4);
  int v14 = (int)v13;
  if (v13)
  {
    __nbyte_4[0] = 0;
    int __nbyte = 0;
    do
    {
      if (!(*(unsigned int (**)(uint64_t, const void **, int *))(*(void *)a3 + 16))(a3, __nbyte_4, &__nbyte))
      {
        uint64_t v21 = NSURL;
        if (v32) {
          long long v22 = v34;
        }
        else {
          long long v22 = v33;
        }
        long long v23 = [NSString stringWithUTF8String:v22];
        uint64_t v24 = [v21 fileURLWithPath:v23];
        uint64_t v25 = *(void *)(a2 + 40);
        uint64_t v26 = *(void **)(v25 + 8);
        *(void *)(v25 + 8) = v24;

        *(unsigned char *)(*(void *)(a2 + 40) + 16) = 1;
        close(v14);
        int v20 = 0;
        goto LABEL_32;
      }
      uint64_t v15 = (re *)__nbyte;
      uint64_t v16 = (re *)write(v14, __nbyte_4[0], __nbyte);
    }
    while (v16 == v15);
    int32x4_t v17 = *re::assetTypesLogObjects(v16);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    __int16 v28 = 0;
    uint64_t v18 = "Failed to write VideoFileAsset temporary file content";
    long long v19 = (uint8_t *)&v28;
    goto LABEL_40;
  }
  int32x4_t v17 = *re::assetTypesLogObjects(v13);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__nbyte_4[0]) = 0;
    uint64_t v18 = "Unable to create VideoFileAsset temporary file";
    long long v19 = (uint8_t *)__nbyte_4;
LABEL_40:
    _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, v18, v19, 2u);
  }
LABEL_27:
  int v20 = 1;
LABEL_32:
  if (v31)
  {
    if (v32) {
      (*(void (**)(void))(*(void *)v31 + 40))();
    }
  }

  return !v20;
}

void sub_2334F5224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a15)
  {
    if (a16) {
      (*(void (**)(void))(*(void *)a15 + 40))();
    }
  }

  _Unwind_Resume(a1);
}

uint64_t re::VideoFileAssetLoader::registerAsset(re *a1, uint64_t a2)
{
  v25[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a2 + 40);
  if (*v2) {
    return 0;
  }
  uint64_t v6 = v2[3];
  if (!v6) {
    goto LABEL_18;
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v6 + 96))(v23, v6);
  id v7 = NSURL;
  int v8 = [NSString stringWithUTF8String:v23[1]];
  unint64_t v9 = [v7 fileURLWithPath:v8];

  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v10 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v10 = a2 + 17;
  }
  id v11 = [NSString stringWithUTF8String:v10];
  if ([v11 isEqualToString:*MEMORY[0x263EF9888]])
  {
    unint64_t v12 = "video/mp4";
LABEL_16:

    uint64_t v24 = *MEMORY[0x263EFA280];
    unint64_t v13 = [NSString stringWithUTF8String:v12];
    v25[0] = v13;
    int v14 = [NSDictionary dictionaryWithObjects:v25 forKeys:&v24 count:1];

    id v15 = objc_alloc(MEMORY[0x263EFA8D0]);
    uint64_t v16 = [v15 initWithFileURL:v9 offset:v23[2] length:(*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6) options:v14];
    int32x4_t v17 = *(id **)(a2 + 40);
    id v11 = *v17;
    id *v17 = (id)v16;
    goto LABEL_17;
  }
  if ([v11 isEqualToString:*MEMORY[0x263EF9858]])
  {
    unint64_t v12 = "video/x-m4v";
    goto LABEL_16;
  }
  if ([v11 isEqualToString:*MEMORY[0x263EF9830]])
  {
    unint64_t v12 = "video/3gpp";
    goto LABEL_16;
  }
  if ([v11 isEqualToString:*MEMORY[0x263EF9898]])
  {
    unint64_t v12 = "video/quicktime";
    goto LABEL_16;
  }
  int v14 = v11;
LABEL_17:

  uint64_t v2 = *(void **)(a2 + 40);
  if (*v2) {
    return 0;
  }
LABEL_18:
  uint64_t v18 = v2[1];
  if (v18)
  {
    uint64_t v19 = [MEMORY[0x263EFA8D0] URLAssetWithURL:v18 options:0];
    int v20 = *(void ***)(a2 + 40);
    uint64_t v21 = *v20;
    *int v20 = (void *)v19;

    if (**(void **)(a2 + 40)) {
      return 0;
    }
  }
  long long v22 = *re::assetTypesLogObjects(a1);
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
    return 2;
  }
  LOWORD(v23[0]) = 0;
  uint64_t v3 = 2;
  _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "VideoFileAsset has no associated file", (uint8_t *)v23, 2u);
  return v3;
}

void sub_2334F5588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

re *re::VideoFileAssetLoader::unloadAsset(re::VideoFileAssetLoader *this, re *a2)
{
  return re::internal::destroyPersistent<re::VideoFileAsset>(a2);
}

BOOL re::VideoFileAssetLoader::isSupportedSourceExtension(re::VideoFileAssetLoader *this, const char *a2)
{
  uint64_t v3 = 0;
  do
  {
    if (!v4) {
      break;
    }
  }
  while (v3++ != 4);
  return v4 == 0;
}

BOOL re::VideoFileAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a3 + 40);
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    unint64_t v13 = &unk_26E714DC0;
    v14[0] = v5;
    v14[1] = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    char v18 = 0;
    BOOL v6 = re::AssetHelper::readerToWriterStream((uint64_t)&v13, a2);
    if (v15) {
      (*(void (**)(void))(*(void *)v14[0] + 24))(v14[0]);
    }
  }
  else
  {
    id v7 = *(void **)(v4 + 8);
    if (v7)
    {
      re::FileStreamReader::open((re::FileStreamReader *)[v7 fileSystemRepresentation], (uint64_t)&v13);
      if ((_BYTE)v13)
      {
        BOOL v6 = re::AssetHelper::readerToWriterStream((uint64_t)v14, a2);
      }
      else
      {
        uint64_t v10 = *re::assetTypesLogObjects(v8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          if (v16) {
            unint64_t v12 = (char *)v17;
          }
          else {
            unint64_t v12 = (char *)&v16 + 1;
          }
          *(_DWORD *)long long buf = 136315138;
          int v20 = v12;
          _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to write VideoFileAsset: %s", buf, 0xCu);
        }
        BOOL v6 = 0;
      }
      re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)&v13);
    }
    else
    {
      unint64_t v9 = *re::assetTypesLogObjects(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13) = 0;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Writing empty VideoFileAsset", (uint8_t *)&v13, 2u);
      }
      return 0;
    }
  }
  return v6;
}

void sub_2334F5830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *re::VideoFileAssetLoader::allocateSampleAsset(re::VideoFileAssetLoader *this)
{
  uint64_t v1 = dispatch_group_create();
  dispatch_group_enter(v1);
  uint64_t v2 = NSString;
  uint64_t v3 = [MEMORY[0x263F08C38] UUID];
  uint64_t v4 = [v3 UUIDString];
  uint64_t v5 = [v2 stringWithFormat:@"re_videosample%@.mp4", v4];

  BOOL v6 = NSURL;
  id v7 = NSTemporaryDirectory();
  int v8 = [v7 stringByAppendingPathComponent:v5];
  unint64_t v9 = [v6 fileURLWithPath:v8];

  uint64_t v10 = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke;
  block[3] = &unk_264BE2A20;
  id v11 = v9;
  id v23 = v11;
  unint64_t v12 = v1;
  uint64_t v24 = v12;
  dispatch_group_async(v12, v10, block);

  unint64_t v13 = (re *)dispatch_group_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
  int v14 = re::globalAllocators(v13);
  int v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 48, 8);
  re::VideoFileAsset::VideoFileAsset((re::VideoFileAsset *)v15);
  uint64_t v16 = (const char *)[(id)*MEMORY[0x263EF9888] UTF8String];
  size_t v17 = strlen(v16);
  v25[0] = v16;
  v25[1] = v17;
  re::DynamicString::operator=((re::DynamicString *)(v15 + 1), (uint64_t)v25);
  objc_storeStrong((id *)(v15[5] + 8), v9);
  *(unsigned char *)(v15[5] + 16) = 1;
  uint64_t v18 = [MEMORY[0x263EFA8D0] URLAssetWithURL:v11 options:0];
  uint64_t v19 = (void **)v15[5];
  int v20 = *v19;
  uint8_t *v19 = (void *)v18;

  return v15;
}

void sub_2334F5AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *MEMORY[0x263EF9888];
  id v23 = 0;
  uint64_t v4 = [MEMORY[0x263EFA518] assetWriterWithURL:v2 fileType:v3 error:&v23];
  id v15 = v23;
  uint64_t v5 = NSDictionary;
  BOOL v6 = [NSNumber numberWithInt:16];
  id v7 = [NSNumber numberWithInt:16];
  uint64_t v16 = objc_msgSend(v5, "dictionaryWithObjectsAndKeys:", *MEMORY[0x263EFA368], *MEMORY[0x263EFA338], v6, *MEMORY[0x263EFA458], v7, *MEMORY[0x263EFA3E8], 0);

  int v8 = [MEMORY[0x263EFA520] assetWriterInputWithMediaType:*MEMORY[0x263EF9D48] outputSettings:v16];
  unint64_t v9 = [MEMORY[0x263EFA530] assetWriterInputPixelBufferAdaptorWithAssetWriterInput:v8 sourcePixelBufferAttributes:0];
  [v4 addInput:v8];
  [v4 startWriting];
  long long v21 = *MEMORY[0x263F010E0];
  uint64_t v22 = *(void *)(MEMORY[0x263F010E0] + 16);
  [v4 startSessionAtSourceTime:&v21];
  int64_t v10 = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  do
  {
    do
    {
      unint64_t v12 = [v9 assetWriterInput];
      char v13 = [v12 isReadyForMoreMediaData];
    }
    while ((v13 & 1) == 0);
    memset(__b, 25 * v10, sizeof(__b));
    CVPixelBufferRef texture = 0;
    CVPixelBufferCreateWithBytes(v11, 0x10uLL, 0x10uLL, 0x18u, __b, 0x30uLL, 0, 0, 0, &texture);
    CVPixelBufferRef v14 = texture;
    CMTimeMake(&v19, v10, 10);
    [v9 appendPixelBuffer:v14 withPresentationTime:&v19];
    CVPixelBufferRelease(texture);
    ++v10;
  }
  while (v10 != 10);
  [v8 markAsFinished];
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  _OWORD v17[2] = ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke_2;
  v17[3] = &unk_264BE29F8;
  id v18 = *(id *)(a1 + 40);
  [v4 finishWritingWithCompletionHandler:v17];
}

void sub_2334F5DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke_2(uint64_t a1)
{
}

uint64_t re::VideoFileAssetLoader::shouldCompress(re::VideoFileAssetLoader *this, void *a2)
{
  return 0;
}

void *re::allocInfo_VideoFileAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B5F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B5F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B610, "VideoFileAsset");
    __cxa_guard_release(&qword_26AF7B5F0);
  }
  return &unk_26AF7B610;
}

void re::initInfo_VideoFileAsset(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xEC9982C10E198972;
  v10[1] = "VideoFileAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B5E8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B5E8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      id v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "avFileType";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      _MergedGlobals_88 = v8;
      __cxa_guard_release(&qword_26AF7B5E8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &_MergedGlobals_88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::VideoFileAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::VideoFileAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::VideoFileAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::VideoFileAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void sub_2334F60DC(_Unwind_Exception *a1)
{
}

re::VideoFileAsset *re::internal::defaultConstruct<re::VideoFileAsset>(int a1, int a2, re::VideoFileAsset *this)
{
  return re::VideoFileAsset::VideoFileAsset(this);
}

void re::internal::defaultDestruct<re::VideoFileAsset>(int a1, int a2, re::VideoFileAsset *this)
{
}

void re::VideoFileAssetCompiler::~VideoFileAssetCompiler(re::VideoFileAssetCompiler *this)
{
}

void re::VideoFileAssetLoader::~VideoFileAssetLoader(re::VideoFileAssetLoader *this)
{
}

uint64_t re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(_anonymous_namespace_ *a1, unint64_t a2, uint64_t a3, re::MeshAsset *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v8 = (uint64_t *)a1;
  uint64_t v184 = *MEMORY[0x263EF8340];
  if (!*(void *)a1)
  {
  }
  v8[1] = -1;
  re::FixedArray<CoreIKTransform>::deinit(v8 + 2);
  re::FixedArray<CoreIKTransform>::deinit(v8 + 5);
  int v141 = v8 + 8;
  re::FixedArray<CoreIKTransform>::deinit(v8 + 8);
  unint64_t v9 = (unint64_t)(v8 + 11);
  re::FixedArray<CoreIKTransform>::deinit(v8 + 11);
  re::FixedArray<CoreIKTransform>::deinit(v8 + 14);
  re::FixedArray<CoreIKTransform>::deinit(v8 + 17);
  re::FixedArray<CoreIKTransform>::deinit(v8 + 20);
  unint64_t v10 = (unint64_t)(v8 + 23);
  re::FixedArray<CoreIKTransform>::deinit(v8 + 23);
  uint64_t v136 = v8 + 26;
  re::FixedArray<CoreIKTransform>::deinit(v8 + 26);
  long long v11 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit(v8 + 29);
  unint64_t v148 = (re::MeshNameMap *)a5;
  unint64_t v14 = a5[33];
  unint64_t v144 = v14;
  uint64_t v130 = a6;
  int v131 = v8 + 11;
  __int16 v137 = v8 + 2;
  char v138 = v8 + 5;
  long long v134 = v8 + 20;
  long long v135 = v8 + 23;
  id v132 = v8 + 14;
  id v133 = v8 + 17;
  if (v14)
  {
    if (v14 >= 0x2E8BA2E8BA2E8BBLL)
    {
LABEL_184:
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 88, v14);
      _os_crash();
      __break(1u);
      goto LABEL_185;
    }
                                                           + 32))();
    if (!v12)
    {
LABEL_185:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_186;
    }
    uint64_t v16 = v12;
    unint64_t v17 = v14 - 1;
    if (v14 != 1)
    {
      uint64_t v16 = v12;
      do
      {
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((_DWORD *)v16 + 6) = 0;
        *((void *)v16 + 2) = 0;
        *((void *)v16 + 9) = 0;
        *((_OWORD *)v16 + 2) = 0uLL;
        *((_OWORD *)v16 + 3) = 0uLL;
        *((_DWORD *)v16 + 16) = 0;
        *((_DWORD *)v16 + 20) = -1;
        uint64_t v16 = (re::DeformerFeatureFlags *)((char *)v16 + 88);
        --v17;
      }
      while (v17);
    }
    char v154 = v12;
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((_DWORD *)v16 + 6) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 9) = 0;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    *((_DWORD *)v16 + 16) = 0;
    *((_DWORD *)v16 + 20) = -1;
  }
  else
  {
    char v154 = 0;
  }
  isSkinningAssignLoggingEnabled = (re *)re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(v12);
  int v163 = (int)isSkinningAssignLoggingEnabled;
  unint64_t v19 = a2;
  unint64_t v10 = *(void *)(a2 + 296);
  int v147 = v8;
  if (v10)
  {
    unint64_t v20 = 0;
    unint64_t v152 = *(void *)(a2 + 296);
    do
    {
      unint64_t v21 = *(void *)(v19 + 296);
      if (v21 <= v20) {
        goto LABEL_170;
      }
      uint64_t v22 = *(void *)(v19 + 312);
      uint64_t v23 = v22 + (v20 << 6);
      int v26 = *(unsigned __int8 *)(v23 + 56);
      uint64_t v25 = (unsigned char *)(v23 + 56);
      int v24 = v26;
      if (v26 == 1)
      {
        if (!v163) {
          goto LABEL_22;
        }
        uint64_t v34 = v22 + (v20 << 6);
        unsigned int v36 = *(_DWORD *)(v34 + 60);
        float32x4_t v35 = (unsigned __int32 *)(v34 + 60);
        if (*(void *)(v19 + 176) > (unint64_t)v36) {
          goto LABEL_22;
        }
        id v58 = *re::assetsLogObjects(isSkinningAssignLoggingEnabled);
        isSkinningAssignLoggingEnabled = (re *)os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
        if (isSkinningAssignLoggingEnabled)
        {
          unsigned __int32 v59 = *v35;
          buf[0].n128_u32[0] = 67109120;
          buf[0].n128_u32[1] = v59;
          char v32 = v58;
          float32x4_t v33 = "[DeformerLogging] Skeletal mesh pose has an invalid model space pose index: %u.";
          goto LABEL_55;
        }
      }
      else
      {
        if (v24)
        {
          if (!v163) {
            goto LABEL_52;
          }
          long long v56 = *re::assetsLogObjects(isSkinningAssignLoggingEnabled);
          isSkinningAssignLoggingEnabled = (re *)os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          if (!isSkinningAssignLoggingEnabled) {
            goto LABEL_52;
          }
          unsigned __int32 v57 = *v25;
          buf[0].n128_u32[0] = 67109120;
          buf[0].n128_u32[1] = v57;
          char v32 = v56;
          float32x4_t v33 = "[DeformerLogging] Skeletal mesh pose has an invalid skeletal pose type: %u.";
          goto LABEL_55;
        }
        if (!v163
          || (uint64_t v27 = v22 + (v20 << 6),
              unsigned int v29 = *(_DWORD *)(v27 + 60),
              __int16 v28 = (unsigned __int32 *)(v27 + 60),
              *(void *)(v19 + 136) > (unint64_t)v29))
        {
LABEL_22:
          re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v148, (unsigned __int8 *)(v22 + (v20 << 6)), buf);
          *(void *)uint64_t v170 = a4;
          *(void *)&v170[8] = v148;
          *(void *)&v170[16] = buf[0].n128_u64[0];
          uint64_t v173 = v181;
          uint64_t v174 = 0;
          re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)&v170[24], (uint64_t)&buf[0].n128_i64[1]);
          re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&buf[0].n128_i64[1]);
          *(void *)int v175 = v170;
          *(void *)&v175[8] = 0;
          unint64_t v19 = *(void *)&v170[16];
          if (!*(void *)&v170[16])
          {
LABEL_47:
            isSkinningAssignLoggingEnabled = (re *)re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v170[24]);
            unint64_t v19 = a2;
            unint64_t v10 = v152;
            goto LABEL_52;
          }
          unint64_t v37 = 0;
          int v158 = (_DWORD *)(v22 + (v20 << 6) + 60);
          unint64_t v38 = &v174;
          while (2)
          {
            buf[0].n128_u64[0] = v37;
            unsigned int v39 = (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)*v38 + 16))(*v38, buf);
            buf[0].n128_u64[0] = *(void *)&v175[8];
            uint64_t v40 = (*(uint64_t (**)(void, __n128 *))(**(void **)(*(void *)v175 + 56) + 16))(*(void *)(*(void *)v175 + 56), buf);
            uint64_t v41 = (void *)re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel((uint64_t **)v175);
            int v42 = v41;
            unint64_t v9 = WORD2(v40);
            uint64_t v43 = v41[22];
            if (v43 && *(void *)(v43 + 8) > (unint64_t)WORD2(v40))
            {
              if (*(void *)(a3 + 24) > (unint64_t)v39)
              {
                uint64_t v44 = *(void *)(a3 + 32);
                if (*(void *)(v44 + 24 * v39 + 8) > (unint64_t)WORD2(v40))
                {
                  unint64_t v10 = *(unsigned int *)(*(void *)(v44 + 24 * v39 + 16) + 4 * WORD2(v40));
                  if (v10 != -1)
                  {
                    int started = re::MeshNameMap::meshPartStartIndexForInstance(v148, v39);
                    unint64_t v47 = re::MeshNameMap::skinnedPartIndexForPartInstance(v148, started + WORD2(v40));
                    if (v144 <= v47) {
                      goto LABEL_182;
                    }
                    *((_DWORD *)v154 + 22 * v47 + 20) = v10;
                    if (*v25 == 1)
                    {
                      float32x4_t v48 = (void *)((char *)v154 + 88 * v47);
                    }
                    else
                    {
                      if (*v25) {
                        goto LABEL_188;
                      }
                      float32x4_t v48 = (void *)((char *)v154 + 88 * v47 + 40);
                    }
                    re::DynamicArray<int>::add(v48, v158);
LABEL_42:
                    unint64_t v37 = ++*(void *)&v175[8];
                    unint64_t v38 = (uint64_t *)(*(void *)v175 + 56);
                    if (*(unsigned char **)v175 == v170 && v37 == v19) {
                      goto LABEL_47;
                    }
                    continue;
                  }
                }
              }
              if (!v163) {
                goto LABEL_42;
              }
              uint64_t v53 = *re::assetsLogObjects((re *)v41);
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
                goto LABEL_42;
              }
              unint64_t v10 = v42[7];
              if (v10 <= WORD2(v40)) {
                goto LABEL_179;
              }
              unint64_t v54 = v42[1];
              unint64_t v55 = *(void *)(v42[8] + 560 * WORD2(v40) + 512);
              buf[0].n128_u32[0] = 136315394;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v54;
              buf[0].n128_u16[6] = 2080;
              *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v55;
              long long v51 = v53;
              long long v52 = "[DeformerLogging] Mesh Model[%s] Part[%s] has no assigned rig.";
            }
            else
            {
              if (!v163) {
                goto LABEL_42;
              }
              unint64_t v21 = *re::assetsLogObjects((re *)v41);
              if (!os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_INFO)) {
                goto LABEL_42;
              }
              unint64_t v10 = v42[7];
              if (v10 <= WORD2(v40)) {
                goto LABEL_169;
              }
              unint64_t v49 = v42[1];
              unint64_t v50 = *(void *)(v42[8] + 560 * WORD2(v40) + 512);
              buf[0].n128_u32[0] = 136315394;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v49;
              buf[0].n128_u16[6] = 2080;
              *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v50;
              long long v51 = v21;
              long long v52 = "[DeformerLogging] Mesh Model[%s] Part[%s] not skinned.";
            }
            break;
          }
          _os_log_impl(&dword_233120000, v51, OS_LOG_TYPE_INFO, v52, (uint8_t *)buf, 0x16u);
          goto LABEL_42;
        }
        float32x4_t v30 = *re::assetsLogObjects(isSkinningAssignLoggingEnabled);
        isSkinningAssignLoggingEnabled = (re *)os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
        if (isSkinningAssignLoggingEnabled)
        {
          unsigned __int32 v31 = *v28;
          buf[0].n128_u32[0] = 67109120;
          buf[0].n128_u32[1] = v31;
          char v32 = v30;
          float32x4_t v33 = "[DeformerLogging] Skeletal mesh pose has an invalid local space pose index: %u.";
LABEL_55:
          _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, v33, (uint8_t *)buf, 8u);
        }
      }
LABEL_52:
      ++v20;
      uint64_t v8 = v147;
    }
    while (v20 != v10);
  }
  long long v60 = v148;
  int v61 = *((_DWORD *)v148 + 54);
  unint64_t v10 = *((void *)v148 + 33);
  *(void *)&v172[2] = 0;
  memset(v170, 0, sizeof(v170));
  *(void *)&v169[2] = 0;
  memset(v167, 0, sizeof(v167));
  int v140 = v61;
  if (v61)
  {
    unint64_t v129 = v10;
    unint64_t v150 = 0;
    unint64_t v151 = 0;
    unsigned int v62 = 0;
    unint64_t v139 = 0;
    unint64_t v10 = v144;
    unint64_t v19 = *((void *)a4 + 117);
    unint64_t v20 = (unint64_t)v154;
    unint64_t v145 = v19;
    while (1)
    {
      unsigned int v146 = re::MeshNameMap::modelIndex(v60, v62);
      uint64_t v63 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(a4, v146);
      uint64_t v64 = re::MeshNameMap::meshPartStartIndexForInstance(v60, v62);
      int v155 = v64;
      uint64_t v65 = *(void *)(v63 + 176);
      unsigned int v142 = v62;
      if (v65)
      {
        unint64_t v66 = *(void *)(v65 + 8);
        uint64_t v153 = (void *)v63;
        if (v66 > *(void *)(v63 + 56))
        {
          if (v163)
          {
            uint64_t v67 = *re::assetsLogObjects((re *)v64);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              unint64_t v68 = v153[1];
              buf[0].n128_u32[0] = 136315138;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v68;
              _os_log_error_impl(&dword_233120000, v67, OS_LOG_TYPE_ERROR, "[DeformerLogging] Mesh Model[%s] has unexpected skinned part count", (uint8_t *)buf, 0xCu);
            }
          }
          goto LABEL_114;
        }
        uint64_t v69 = *(void *)(v65 + 8);
        if (v66) {
          break;
        }
      }
LABEL_114:
      unsigned int v62 = v142 + 1;
      if (v142 + 1 == v140)
      {
        unint64_t v9 = *(void *)&v170[16];
        unint64_t v98 = v150;
        unint64_t v14 = v151;
        unint64_t v10 = v129;
        goto LABEL_117;
      }
    }
    unint64_t v9 = 0;
    int v70 = v153;
    uint64_t v149 = *(void *)(v65 + 8);
    while (1)
    {
      uint64_t v71 = v70[22];
      if (v71 && *(void *)(v71 + 8) > v9) {
        unint64_t v72 = *(unsigned int *)(*(void *)(v71 + 16) + 72 * v9 + 4);
      }
      else {
        unint64_t v72 = 0xFFFFFFFFLL;
      }
      if (v19 > v72) {
        break;
      }
      if (v163)
      {
        unint64_t v21 = *re::assetsLogObjects((re *)v64);
        uint64_t v64 = os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_INFO);
        if (v64)
        {
          unint64_t v19 = v70[7];
          if (v19 <= v9) {
            goto LABEL_171;
          }
          unint64_t v86 = v70[1];
          unint64_t v87 = *(void *)(v70[8] + 560 * v9 + 512);
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v86;
          buf[0].n128_u16[6] = 2080;
          *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v87;
          _os_log_impl(&dword_233120000, (os_log_t)v21, OS_LOG_TYPE_INFO, "[DeformerLogging] Mesh Model[%s] Part[%s] has no skeleton.", (uint8_t *)buf, 0x16u);
          unint64_t v19 = v145;
        }
LABEL_87:
        uint64_t v69 = v149;
      }
LABEL_111:
      if (++v9 == v69) {
        goto LABEL_114;
      }
    }
    int __src = 0;
    unint64_t v73 = (_anonymous_namespace_ *)re::MeshNameMap::skinnedPartIndexForPartInstance(v60, v155 + (int)v9);
    int __src = (int)v73;
    unint64_t v74 = v73;
    if (v10 <= v73) {
      goto LABEL_168;
    }
    unsigned int v162 = v73;
    unint64_t v75 = v20 + 88 * v73;
    int v159 = *(_DWORD *)(v75 + 80);
    if (v159 == -1)
    {
      int v70 = v153;
      uint64_t v88 = v153[22];
      if (v88 && *(void *)(v88 + 32) > v72)
      {
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(*(void *)(v88 + 40) + 16 * v72), (uint64_t)buf);
        if (buf[0].n128_u8[0]) {
          unint64_t v89 = buf[1].n128_u64[0] >> 6;
        }
        else {
          unint64_t v89 = 0;
        }
        unint64_t v90 = v139;
        if (v139 <= v89) {
          unint64_t v90 = v89;
        }
        unint64_t v139 = v90;
        *(_DWORD *)int v175 = __src;
        *(void *)&v175[8] = v89;
        re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add((uint64_t)v167, (__n128 *)v175);
        uint64_t v64 = (uint64_t)re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(buf);
      }
      else
      {
        buf[0].n128_u32[0] = v73;
        buf[0].n128_u64[1] = 0;
        re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add((uint64_t)v167, buf);
      }
      goto LABEL_111;
    }
    uint64_t v157 = *(void *)&v172[2];
    unint64_t v76 = *(void *)&v170[16];
    if (!*(void *)&v170[16])
    {
LABEL_81:
      buf[0].n128_u64[0] = v75;
      buf[0].n128_u32[2] = v72;
      *(void *)&long long v182 = 0;
      *(void *)&long long v181 = 0;
      buf[1] = 0uLL;
      DWORD2(v181) = 0;
      re::DynamicArray<int>::setCapacity((__n128 *)buf[1].n128_u64, 1uLL);
      ++DWORD2(v181);
      char v84 = (_anonymous_namespace_ *)re::DynamicArray<float>::copy((__n128 *)buf[1].n128_u64, 0, (char *)&__src, 1);
      DWORD2(v182) = v146;
      if (v76 >= *(void *)&v170[8])
      {
        uint64_t v8 = v147;
        if (*(void *)&v170[8] < v76 + 1)
        {
          if (*(void *)v170)
          {
            unint64_t v91 = 8;
            if (*(void *)&v170[8]) {
              unint64_t v91 = 2 * *(void *)&v170[8];
            }
            if (v91 <= v76 + 1) {
              unint64_t v92 = v76 + 1;
            }
            else {
              unint64_t v92 = v91;
            }
            re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(v170, v92);
          }
          else
          {
            re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(v170, v76 + 1);
            ++*(_DWORD *)&v170[24];
          }
        }
        unint64_t v76 = *(void *)&v170[16];
        uint64_t v85 = *(void *)&v172[2];
      }
      else
      {
        uint64_t v8 = v147;
        uint64_t v85 = v157;
      }
      uint64_t v93 = v85 + (v76 << 6);
      unint64_t v94 = buf[0].n128_u64[0];
      *(_DWORD *)(v93 + 8) = buf[0].n128_u32[2];
      *(void *)uint64_t v93 = v94;
      *(void *)(v93 + 48) = 0;
      *(void *)(v93 + 24) = 0;
      *(void *)(v93 + 32) = 0;
      *(void *)(v93 + 16) = 0;
      *(_DWORD *)(v93 + 40) = 0;
      *(void *)(v93 + 16) = buf[1].n128_u64[0];
      buf[1].n128_u64[0] = 0;
      *(void *)(v93 + 24) = buf[1].n128_u64[1];
      buf[1].n128_u64[1] = 0;
      uint64_t v95 = *(void *)(v93 + 32);
      *(void *)(v93 + 32) = v181;
      *(void *)&long long v181 = v95;
      uint64_t v96 = *(void *)(v93 + 48);
      *(void *)(v93 + 48) = v182;
      *(void *)&long long v182 = v96;
      ++DWORD2(v181);
      ++*(_DWORD *)(v93 + 40);
      *(_DWORD *)(v93 + 56) = DWORD2(v182);
      *(void *)&v170[16] = v76 + 1;
      ++*(_DWORD *)&v170[24];
      uint64_t v64 = buf[1].n128_i64[0];
      unint64_t v19 = v145;
      uint64_t v69 = v149;
      if (buf[1].n128_u64[0] && v96) {
        uint64_t v64 = (*(uint64_t (**)(void))(*(void *)buf[1].n128_u64[0] + 40))();
      }
      unint64_t v20 = (unint64_t)v154;
      v150 += *((void *)v154 + 11 * v162 + 7);
      uint64_t v97 = *(void *)(v75 + 16);
      int v70 = v153;
      v151 += v97;
      unint64_t v10 = v144;
      long long v60 = v148;
      goto LABEL_111;
    }
    long long v77 = (char *)v154 + 88 * v73;
    uint64_t v78 = *(void *)(v75 + 16);
    uint64_t v79 = v77 + 56;
    uint64_t v160 = (const void **)(v77 + 72);
    char v80 = (void *)(*(void *)&v172[2] + 16);
    uint64_t v81 = *(void *)&v170[16] << 6;
    while (1)
    {
      uint64_t v82 = *(v80 - 2);
      if (*(void *)(v82 + 16) == v78)
      {
        unint64_t v73 = (_anonymous_namespace_ *)memcmp(*(const void **)(v82 + 32), *(const void **)(v75 + 32), 4 * v78);
        if (!v73)
        {
          uint64_t v83 = *(void *)(v82 + 56);
          if (v83 == *v79)
          {
            unint64_t v73 = (_anonymous_namespace_ *)memcmp(*(const void **)(v82 + 72), *v160, 4 * v83);
            if (!v73 && *(_DWORD *)(v82 + 80) == v159 && *((_DWORD *)v80 - 2) == v72) {
              break;
            }
          }
        }
      }
      v80 += 8;
      v81 -= 64;
      if (!v81) {
        goto LABEL_81;
      }
    }
    uint64_t v64 = (uint64_t)re::DynamicArray<int>::add(v80, &__src);
    unint64_t v10 = v144;
    unint64_t v19 = v145;
    int v70 = v153;
    unint64_t v20 = (unint64_t)v154;
    uint64_t v8 = v147;
    long long v60 = v148;
    goto LABEL_87;
  }
  unint64_t v9 = 0;
  unint64_t v139 = 0;
  unint64_t v14 = 0;
  unint64_t v98 = 0;
LABEL_117:
  re::FixedArray<int>::init<>(v136, *v8, v9 + 1);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v137, *v8, v10, &re::SkeletalPoseRigMappingData::kInvalidPoseRigMapIndex);
  uint64_t v100 = *v8;
  v8[29] = *v8;
  v8[30] = v10;
  if (v10)
  {
    if (v10 >> 61)
    {
LABEL_186:
      re::internal::assertLog((re::internal *)6, v99, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v10);
      _os_crash();
      __break(1u);
      goto LABEL_187;
    }
    unint64_t v19 = 8 * v10;
    uint64_t v101 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v100 + 32))(v100, 8 * v10, 4);
    v8[31] = (uint64_t)v101;
    if (!v101)
    {
LABEL_187:
      re::internal::assertLog((re::internal *)4, v102, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_188:
      re::internal::assertLog((re::internal *)4, v46, "assertion failure: '%s' (%s:line %i) Unexpected skeletal pose type.", "!\"Unreachable code\"", "rebuildMappingData", 280);
      _os_crash();
      __break(1u);
    }
    CMTime v103 = v101;
    if (v10 != 1)
    {
      v19 -= 8;
      bzero(v101, v19);
      CMTime v103 = (void *)((char *)v103 + v19);
    }
    *CMTime v103 = 0;
  }
  if (v9)
  {
    unint64_t v47 = 0;
    unsigned int v104 = 0;
    unint64_t v20 = *(void *)&v172[2];
    while (1)
    {
      if (v47 == v9) {
        goto LABEL_180;
      }
      unsigned int v105 = v104;
      unint64_t v10 = v20 + (v47 << 6);
      uint64_t v106 = re::MeshAsset::skeletonAtIndex(a4, *(unsigned int *)(v10 + 8));
      unint64_t v19 = v8[27];
      if (v19 <= v47) {
        goto LABEL_181;
      }
      uint64_t v107 = *(void *)(v106 + 24);
      *(_DWORD *)(v8[28] + 4 * v47) = v105;
      uint64_t v108 = *(void *)(v10 + 32);
      if (v108) {
        break;
      }
LABEL_132:
      unsigned int v104 = v105 + v107;
      if (++v47 == v9) {
        goto LABEL_135;
      }
    }
    int v109 = *(unsigned int **)(v10 + 48);
    uint64_t v110 = 4 * v108;
    while (1)
    {
      unint64_t v19 = *v109;
      unint64_t v10 = v8[3];
      if (v10 <= v19) {
        break;
      }
      *(_DWORD *)(v8[4] + 4 * v19) = v47;
      unint64_t v10 = v8[30];
      if (v10 <= v19) {
        goto LABEL_167;
      }
      *(void *)(v8[31] + 8 * v19) = v105 | (unint64_t)(v107 << 32);
      ++v109;
      v110 -= 4;
      if (!v110) {
        goto LABEL_132;
      }
    }
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v19;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_167:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v19;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_168:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    unint64_t v21 = v74;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v21;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_169:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v167 = 136315906;
    *(void *)&v167[4] = "operator[]";
    *(_WORD *)&v167[12] = 1024;
    *(_DWORD *)&v167[14] = 476;
    *(_WORD *)&v167[18] = 2048;
    *(void *)&v167[20] = v9;
    __int16 v168 = 2048;
    *(void *)int v169 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_170:
    *(void *)uint64_t v167 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v170 = 136315906;
    *(void *)&v170[4] = "operator[]";
    *(_WORD *)&v170[12] = 1024;
    *(_DWORD *)&v170[14] = 797;
    *(_WORD *)&v170[18] = 2048;
    *(void *)&v170[20] = v20;
    __int16 v171 = 2048;
    *(void *)uint64_t v172 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_171:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 476;
    __int16 v176 = 2048;
    unint64_t v177 = v9;
    __int16 v178 = 2048;
    unint64_t v179 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_172;
  }
  unsigned int v104 = 0;
LABEL_135:
  v8[32] = v139 + v104;
  unint64_t v19 = v8[27];
  if (v19 <= v9)
  {
LABEL_183:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v9;
    __int16 v178 = 2048;
    unint64_t v179 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_184;
  }
  unsigned int v164 = v104;
  *(_DWORD *)(v8[28] + 4 * v9) = v104;
  re::FixedArray<int>::init<>(v138, *v8, v98);
  re::FixedArray<int>::init<>(v141, *v8, v14);
  re::FixedArray<int>::init<>(v131, *v8, v9);
  re::FixedArray<re::Slice<unsigned int>>::init<>(v132, *v8, v9);
  re::FixedArray<re::Slice<unsigned int>>::init<>(v133, *v8, v9);
  re::FixedArray<int>::init<>(v134, *v8, v9);
  re::FixedArray<int>::init<>(v135, *v8, v9);
  if (v9)
  {
    unint64_t v111 = 0;
    unint64_t v19 = 0;
    uint64_t v112 = *(_DWORD **)&v172[2];
    uint64_t v113 = 8;
    while (v9 != v111)
    {
      unint64_t v114 = v9;
      unint64_t v9 = *(void *)v112;
      re::FixedArray<unsigned int>::copy(v138, v19, *(const void **)(*(void *)v112 + 72), *(void *)(*(void *)v112 + 56));
      re::FixedArray<unsigned int>::copy(v141, 0, *(const void **)(v9 + 32), *(void *)(v9 + 16));
      unint64_t v10 = v8[12];
      if (v10 <= v111) {
        goto LABEL_174;
      }
      *(_DWORD *)(v8[13] + 4 * v111) = *(_DWORD *)(v9 + 80);
      uint64_t v115 = re::FixedArray<unsigned int>::slice((uint64_t)v138, v19, *(void *)(v9 + 56));
      unint64_t v10 = v8[15];
      if (v10 <= v111) {
        goto LABEL_175;
      }
      int v117 = (void *)(v8[16] + v113);
      *(v117 - 1) = v115;
      *int v117 = v116;
      uint64_t v118 = re::FixedArray<unsigned int>::slice((uint64_t)v141, 0, *(void *)(v9 + 16));
      unint64_t v10 = v8[18];
      if (v10 <= v111) {
        goto LABEL_176;
      }
      id v120 = (void *)(v8[19] + v113);
      *(v120 - 1) = v118;
      void *v120 = v119;
      unint64_t v10 = v8[21];
      if (v10 <= v111) {
        goto LABEL_177;
      }
      *(_DWORD *)(v8[22] + 4 * v111) = v112[2];
      unint64_t v10 = v8[24];
      if (v10 <= v111) {
        goto LABEL_178;
      }
      *(_DWORD *)(v8[25] + 4 * v111) = v112[14];
      v19 += *(void *)(v9 + 56);
      ++v111;
      v112 += 16;
      v113 += 16;
      unint64_t v9 = v114;
      if (v114 == v111) {
        goto LABEL_145;
      }
    }
LABEL_173:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    unint64_t v111 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 789;
    __int16 v176 = 2048;
    unint64_t v177 = v9;
    __int16 v178 = 2048;
    unint64_t v179 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v111;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_175:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v111;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v111;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_177:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v111;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v111;
    __int16 v178 = 2048;
    unint64_t v179 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v167 = 136315906;
    *(void *)&v167[4] = "operator[]";
    *(_WORD *)&v167[12] = 1024;
    *(_DWORD *)&v167[14] = 476;
    *(_WORD *)&v167[18] = 2048;
    *(void *)&v167[20] = v9;
    __int16 v168 = 2048;
    *(void *)int v169 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    unint64_t v47 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 789;
    __int16 v176 = 2048;
    unint64_t v177 = v9;
    __int16 v178 = 2048;
    unint64_t v179 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_181:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v47;
    __int16 v178 = 2048;
    unint64_t v179 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_182:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    unint64_t v14 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v167 = 136315906;
    *(void *)&v167[4] = "operator[]";
    *(_WORD *)&v167[12] = 1024;
    *(_DWORD *)&v167[14] = 468;
    *(_WORD *)&v167[18] = 2048;
    *(void *)&v167[20] = v47;
    __int16 v168 = 2048;
    *(void *)int v169 = v144;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_183;
  }
LABEL_145:
  uint64_t v121 = *(void *)&v169[2];
  unint64_t v10 = v144;
  if (*(void *)&v167[16])
  {
    id v122 = *(unsigned int **)&v169[2];
    uint64_t v123 = *(void *)&v169[2] + 16 * *(void *)&v167[16];
    while (1)
    {
      unint64_t v21 = *v122;
      unint64_t v19 = v8[30];
      if (v19 <= v21) {
        break;
      }
      *(void *)(v8[31] + 8 * v21) = v164 | (*((void *)v122 + 1) << 32);
      v122 += 4;
      if (v122 == (unsigned int *)v123) {
        goto LABEL_149;
      }
    }
LABEL_172:
    uint64_t v166 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v181 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v175 = 136315906;
    *(void *)&v175[4] = "operator[]";
    *(_WORD *)&v175[12] = 1024;
    *(_DWORD *)&v175[14] = 468;
    __int16 v176 = 2048;
    unint64_t v177 = v21;
    __int16 v178 = 2048;
    unint64_t v179 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_173;
  }
LABEL_149:
  v8[1] = v130;
  if (*(void *)v167) {
    BOOL v124 = v121 == 0;
  }
  else {
    BOOL v124 = 1;
  }
  if (!v124) {
    (*(void (**)(void))(**(void **)v167 + 40))();
  }
  uint64_t result = *(void *)v170;
  if (*(void *)v170 && *(void *)&v172[2])
  {
    if (v9)
    {
      unint64_t v126 = v9 << 6;
      uint64_t v127 = *(void *)&v172[2] + 16;
      do
      {
        re::DynamicArray<unsigned long>::deinit(v127);
        v127 += 64;
        v126 -= 64;
      }
      while (v126);
      uint64_t result = *(void *)v170;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  if (v144)
  {
    uint64_t v128 = 0;
    do
    {
      re::DynamicArray<unsigned long>::deinit((uint64_t)v154 + v128 + 40);
      re::DynamicArray<unsigned long>::deinit((uint64_t)v154 + v128);
      v128 += 88;
    }
    while (88 * v144 != v128);
  }
  return result;
}

void re::FixedArray<re::Slice<unsigned int>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 16 * a3;
  BOOL v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    uint64_t v8 = (void *)((char *)v8 + v5 - 16);
  }
  *uint64_t v8 = 0;
  v8[1] = 0;
}

uint64_t re::FixedArray<unsigned int>::slice(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 + 1 <= a2)
  {
    uint64_t v6 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v7) = 136315906;
    *(void *)((char *)&v7 + 4) = "slice";
    WORD6(v7) = 1024;
    HIWORD(v7) = 502;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_6;
  }
  if (__CFADD__(a2, a3))
  {
LABEL_6:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array size = %zu", "!overflow", "slice", 508, a2, a3, v4, v6, v7);
    _os_crash();
    __break(1u);
LABEL_7:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, a2, a3, v4);
    _os_crash();
    __break(1u);
  }
  if (a2 + a3 > v4) {
    goto LABEL_7;
  }
  return *(void *)(a1 + 16) + 4 * a2;
}

uint64_t re::SkeletalPoseRigMappingData::poseRigMapIndex(re::SkeletalPoseRigMappingData *this, const re::MeshNameMap *a2, unsigned int a3, int a4)
{
  if (*((_DWORD *)a2 + 54) <= a3) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v7 = re::MeshNameMap::meshPartStartIndexForInstance(a2, a3) + a4;
  if (v7 >= re::MeshNameMap::meshPartStartIndexForInstance(a2, a3 + 1)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = re::MeshNameMap::skinnedPartIndexForPartInstance(a2, v7);
  if (result != -1)
  {
    if (*((void *)this + 3) <= (unint64_t)result)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(unsigned int *)(*((void *)this + 4) + 4 * result);
  }
  return result;
}

uint64_t re::SkeletalPoseRigMappingData::poseRigMapJointTransformCount(re::SkeletalPoseRigMappingData *this, unsigned int a2)
{
  unint64_t v2 = a2 + 1;
  unint64_t v3 = *((void *)this + 27);
  if (v3 <= v2) {
    return 0;
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (*(_DWORD *)(*((void *)this + 28) + 4 * v2) - *(_DWORD *)(*((void *)this + 28) + 4 * a2));
}

unint64_t re::SkeletalPoseRigMappingData::poseRigMapAbsoluteJointTransforms(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = (a2 + 1);
  unint64_t v4 = *(void *)(a1 + 216);
  if (v4 > v3)
  {
    if (v4 <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 224);
      unint64_t v6 = *(unsigned int *)(v5 + 4 * a2);
      unint64_t v7 = a3[1];
      if (v7 >= v6)
      {
        if (v7 >= *(unsigned int *)(v5 + 4 * v3)) {
          return *a3 + (v6 << 6);
        }
LABEL_10:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 242, v6, v7);
        _os_crash();
        __break(1u);
      }
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive <= size()", "range", 241, v6, v7);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  return 0;
}

uint64_t re::SkeletalPoseRigMappingData::jointTransformStartAndEndIndex(re::SkeletalPoseRigMappingData *this, unsigned int a2)
{
  if (*((void *)this + 30) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 31) + 8 * a2;
}

void *re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 6);
        long long v11 = v7;
        do
        {
          uint64_t v12 = *(void *)v8;
          *((_DWORD *)v11 + 2) = *(_DWORD *)(v8 + 8);
          void *v11 = v12;
          v11[6] = 0;
          v11[3] = 0;
          v11[4] = 0;
          void v11[2] = 0;
          *((_DWORD *)v11 + 10) = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          uint64_t v14 = *(void *)(v8 + 24);
          uint64_t v15 = v8 + 16;
          void v11[2] = v13;
          v11[3] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          uint64_t v16 = v11[4];
          v11[4] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[6];
          v11[6] = *(void *)(v15 + 32);
          *(void *)(v15 + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 10);
          *((_DWORD *)v11 + 14) = *(_DWORD *)(v15 + 40);
          re::DynamicArray<unsigned long>::deinit(v15);
          uint64_t v8 = v15 + 48;
          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::FixedArray<unsigned int>::copy(void *result, uint64_t a2, const void *a3, uint64_t a4)
{
  if (__CFADD__(a2, a4))
  {
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 362, result[1], a2, a4);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  if ((unint64_t)(a2 + a4) > result[1])
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Too much data to copy.", "requiredSize <= m_size", "copy", 363);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  if (a4)
  {
    unint64_t v4 = (void *)(result[2] + 4 * a2);
    return memmove(v4, a3, 4 * a4);
  }
  return result;
}

uint64_t re::AudioAssetLoadStrategy_Base::createRuntimeData(uint64_t a1, re::AudioFileAsset *a2, uint64_t a3, uint64_t a4, AudioSceneService *a5)
{
  id v9 = *(id *)(*((void *)a2 + 1) + 16);
  if (v9)
  {

LABEL_8:
    re::AudioFileAsset::completeLoad(a2, a5);
    return 1;
  }
  id v10 = *(id *)(*((void *)a2 + 1) + 176);

  if (v10) {
    goto LABEL_8;
  }
  if (!a3)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*((void *)a2 + 1) + 48) + 64))();
    uint64_t v12 = *((void *)a2 + 1);
    if (!v11)
    {
      id v14 = *(id *)(v12 + 184);

      if (v14) {
        goto LABEL_8;
      }
      uint64_t result = re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(v15, a2);
      if (result) {
        goto LABEL_8;
      }
      return result;
    }
    a3 = v12 + 48;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, re::AudioFileAsset *))(*(void *)a1 + 40))(a1, a3, a2)) {
    goto LABEL_8;
  }
  return 0;
}

uint64_t re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(re::AudioAssetLoadStrategy_Base *this, re::AudioFileAsset *a2)
{
  if (re::audio::CanStreamAudioFiles(this) && *((unsigned char *)a2 + 100))
  {
    uint64_t v3 = 50000;
    if ((*((_DWORD *)a2 + 33) + 1) < 2) {
      uint64_t v3 = 100000;
    }
    *((void *)a2 + 20) = v3;
  }
  else
  {
    unint64_t v4 = (void *)**((void **)a2 + 1);
    uint64_t result = v4;
    if (!result) {
      return result;
    }
    uint64_t v6 = (void *)result;
    objc_storeStrong(*((id **)a2 + 1), v4);
    unint64_t v7 = [v6 processingFormat];
    objc_storeStrong((id *)(*((void *)a2 + 1) + 8), v7);

    *((void *)a2 + 17) = [v6 length];
    uint64_t v8 = [v6 processingFormat];
    uint64_t v9 = *(unsigned int *)([v8 streamDescription] + 24);

    unint64_t v10 = *((void *)a2 + 17) * v9;
    unint64_t v11 = v10 / 0x64;
    if (v10 / 0x64 <= 0xC350) {
      unint64_t v11 = 50000;
    }
    unint64_t v12 = v11 + v10;
    if ((*((_DWORD *)a2 + 33) + 1) > 1) {
      unint64_t v12 = v11;
    }
    *((void *)a2 + 20) = v12;
  }
  return 1;
}

void sub_2334F8E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Base::resourceDidUpdate(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v6 = *a3;
  LOBYTE(v7[0]) = 0;
  char v8 = 0;
  re::AudioAssetLoadStrategy_Base::resourceDidUpdate((int)v6, a2, &v6, v4, v5, (uint64_t)v7);
  if (v8) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v7);
  }
}

void sub_2334F8F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&a11);
  }

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Base::resourceDidUpdate(int a1, uint64_t a2, id *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  re::AudioPayload::dynamicCast(this, &v101);
  if (!v101)
  {
    int v42 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Base] Cannot update shared AudioFileAsset with bad arguments.", buf, 2u);
    }
    goto LABEL_76;
  }
  id v9 = v101;
  *(unsigned char *)(a2 + 52) = [v9 inputMode];

  id v10 = v101;
  [v10 referenceLevel];
  *(_DWORD *)(a2 + 48) = v11;

  id v12 = v101;
  *(_DWORD *)(a2 + 96) = [v12 loopCount];

  id v13 = v101;
  *(unsigned char *)(a2 + 100) = [v13 streaming];

  id v14 = v101;
  *(_DWORD *)(a2 + 104) = [v14 normalizationMode];

  id v15 = v101;
  *(_DWORD *)(a2 + 108) = [v15 calibrationMode];

  id v16 = v101;
  [v16 calibrationLevel];
  *(void *)(a2 + 112) = v17;

  id v18 = v101;
  [v18 targetLUFS];
  *(void *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = v19;

  unint64_t v20 = [v101 mixGroupName];
  LOBYTE(v18) = v20 == 0;

  if ((v18 & 1) == 0)
  {
    id v21 = v101;
    id v22 = [v21 mixGroupName];
    uint64_t v23 = (_anonymous_namespace_ *)[v22 UTF8String];
    buf[0] = 1;
    *(void *)&v103[4] = *(void *)&v100[0];
    *(void *)&v103[28] = *((void *)&v100[1] + 1);
    *(_OWORD *)&v103[12] = *(_OWORD *)((char *)v100 + 8);
    memset(v100, 0, sizeof(v100));
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a2 + 56), buf);
    if (buf[0] && *(void *)&v103[4])
    {
      if (v103[12]) {
        (*(void (**)(void))(**(void **)&v103[4] + 40))();
      }
      memset(&v103[4], 0, 32);
    }
    if (*(void *)&v100[0])
    {
      if (BYTE8(v100[0])) {
        (*(void (**)(void))(**(void **)&v100[0] + 40))();
      }
      memset(v100, 0, sizeof(v100));
    }
  }
  int v24 = [v101 pcmBuffer];
  BOOL v25 = v24 == 0;

  if (!v25)
  {
    id v26 = v101;
    uint64_t v27 = [v26 pcmBuffer];
    objc_storeStrong((id *)(*(void *)(a2 + 8) + 176), v27);

    id v28 = v101;
    unsigned int v29 = [v28 format];
    objc_storeStrong((id *)(*(void *)(a2 + 8) + 8), v29);

    id v30 = v101;
    unsigned __int32 v31 = [v30 length];
    *(void *)(a2 + 136) = [v31 longLongValue];

    float32x4_t v33 = (id)*re::audioLogObjects(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      id v34 = *(id *)(*(void *)(a2 + 8) + 176);
      re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a2);
      float32x4_t v35 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
      uint64_t v36 = *(void *)(a2 + 136);
      int v37 = *(unsigned __int8 *)(a2 + 52);
      double v38 = *(float *)(a2 + 48);
      int v39 = *(_DWORD *)(a2 + 96);
      uint64_t v40 = (char *)v100 + 8;
      if (*(unsigned char *)(a2 + 56)) {
        uint64_t v40 = (unsigned char *)(a2 + 72);
      }
      if (*v40)
      {
        if (*(unsigned char *)(a2 + 56)) {
          long long v56 = (char **)(a2 + 80);
        }
        else {
          long long v56 = (char **)&v100[1];
        }
        uint64_t v41 = *v56;
      }
      else if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v41 = (char *)(a2 + 73);
      }
      else
      {
        uint64_t v41 = (char *)v100 + 9;
      }
      int v57 = *(unsigned __int8 *)(a2 + 100);
      int v58 = *(_DWORD *)(a2 + 104);
      int v59 = *(_DWORD *)(a2 + 108);
      uint64_t v60 = *(void *)(a2 + 112);
      uint64_t v61 = *(void *)(a2 + 120);
      *(_DWORD *)long long buf = 138415106;
      *(void *)CMTime v103 = v34;
      *(_WORD *)&v103[8] = 2112;
      *(void *)&v103[10] = v35;
      *(_WORD *)&unsigned char v103[18] = 2048;
      *(void *)&v103[20] = v36;
      *(_WORD *)&v103[28] = 1024;
      *(_DWORD *)&v103[30] = v37;
      *(_WORD *)&v103[34] = 2048;
      *(double *)&v103[36] = v38;
      *(_WORD *)&v103[44] = 1024;
      *(_DWORD *)unsigned int v104 = v39;
      *(_WORD *)&v104[4] = 2080;
      *(void *)&v104[6] = v41;
      *(_WORD *)unsigned int v105 = 1024;
      *(_DWORD *)&v105[2] = v57;
      *(_WORD *)&v105[6] = 1024;
      *(_DWORD *)&v105[8] = v58;
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = v59;
      *(_WORD *)uint64_t v106 = 2048;
      *(void *)&v106[2] = v60;
      __int16 v107 = 2048;
      uint64_t v108 = v61;
      _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Recovered pcm buffer asset with buffer=%@, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, targetLUFS=%0.2f from audio payload update.", buf, 0x66u);
      if (*(void *)&v100[0])
      {
        if (BYTE8(v100[0])) {
          (*(void (**)(void))(**(void **)&v100[0] + 40))();
        }
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  uint64_t v43 = [v101 filePath];
  BOOL v44 = v43 == 0;

  if (!v44)
  {
    id v45 = v101;
    id v46 = [v45 filePath];
    BOOL v47 = re::AudioFileAsset::prepareToLoadFrom((re::AudioFileAsset *)a2, (const char *)[v46 UTF8String]);

    if (!v47)
    {
      unint64_t v49 = (id)*re::audioLogObjects(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        id v96 = v101;
        id v97 = [v96 filePath];
        uint64_t v98 = [v97 UTF8String];
        *(_DWORD *)long long buf = 136315138;
        *(void *)CMTime v103 = v98;
        _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "Failed to load audio file at '%s'", buf, 0xCu);
      }
    }
    float32x4_t v33 = (id)*re::audioLogObjects(v48);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v50 = (_anonymous_namespace_ *)*(id *)(*(void *)(a2 + 8) + 32);
      int v51 = *(unsigned __int8 *)(a2 + 52);
      double v52 = *(float *)(a2 + 48);
      int v53 = *(_DWORD *)(a2 + 96);
      unint64_t v54 = (char *)v100 + 8;
      if (*(unsigned char *)(a2 + 56)) {
        unint64_t v54 = (unsigned char *)(a2 + 72);
      }
      if (*v54)
      {
        if (*(unsigned char *)(a2 + 56)) {
          uint64_t v82 = (char **)(a2 + 80);
        }
        else {
          uint64_t v82 = (char **)&v100[1];
        }
        unint64_t v55 = *v82;
      }
      else if (*(unsigned char *)(a2 + 56))
      {
        unint64_t v55 = (char *)(a2 + 73);
      }
      else
      {
        unint64_t v55 = (char *)v100 + 9;
      }
      int v83 = *(unsigned __int8 *)(a2 + 100);
      int v84 = *(_DWORD *)(a2 + 104);
      int v85 = *(_DWORD *)(a2 + 108);
      uint64_t v86 = *(void *)(a2 + 112);
      uint64_t v87 = *(void *)(a2 + 120);
      *(_DWORD *)long long buf = 138414594;
      *(void *)CMTime v103 = v50;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v51;
      *(_WORD *)&v103[14] = 2048;
      *(double *)&v103[16] = v52;
      *(_WORD *)&v103[24] = 1024;
      *(_DWORD *)&v103[26] = v53;
      *(_WORD *)&v103[30] = 2080;
      *(void *)&v103[32] = v55;
      *(_WORD *)&v103[40] = 1024;
      *(_DWORD *)&v103[42] = v83;
      *(_WORD *)unsigned int v104 = 1024;
      *(_DWORD *)&v104[2] = v84;
      *(_WORD *)&v104[6] = 1024;
      *(_DWORD *)&v104[8] = v85;
      *(_WORD *)&v104[12] = 2048;
      *(void *)unsigned int v105 = v86;
      *(_WORD *)&v105[8] = 2048;
      *(void *)&v105[10] = v87;
      _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Recovered file asset with path=%@, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, targetLUFS=%0.2f from audio payload update.", buf, 0x52u);
      if (*(void *)&v100[0] && (BYTE8(v100[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v100[0] + 40))();
      }
    }
    goto LABEL_71;
  }
  unsigned int v62 = [v101 fileBuffer];
  BOOL v63 = v62 == 0;

  if (!v63)
  {
    id v65 = v101;
    unint64_t v66 = [v65 fileBuffer];
    objc_storeStrong((id *)(*(void *)(a2 + 8) + 184), v66);

    id v67 = v101;
    unint64_t v68 = [v67 bufferSize];
    *(void *)(*(void *)(a2 + 8) + 40) = [v68 unsignedLongLongValue];

    id v69 = v101;
    int v70 = [v69 length];
    *(void *)(a2 + 136) = [v70 longLongValue];

    id v71 = v101;
    unint64_t v72 = [v71 format];
    objc_storeStrong((id *)(*(void *)(a2 + 8) + 8), v72);

    float32x4_t v33 = (id)*re::audioLogObjects(v73);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      id v99 = *(id *)(*(void *)(a2 + 8) + 184);
      uint64_t v74 = *(void *)(*(void *)(a2 + 8) + 40);
      re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a2);
      unint64_t v75 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
      uint64_t v76 = *(void *)(a2 + 136);
      int v77 = *(unsigned __int8 *)(a2 + 52);
      double v78 = *(float *)(a2 + 48);
      int v79 = *(_DWORD *)(a2 + 96);
      char v80 = (char *)v100 + 8;
      if (*(unsigned char *)(a2 + 56)) {
        char v80 = (unsigned char *)(a2 + 72);
      }
      if (*v80)
      {
        if (*(unsigned char *)(a2 + 56)) {
          unint64_t v89 = (char **)(a2 + 80);
        }
        else {
          unint64_t v89 = (char **)&v100[1];
        }
        uint64_t v81 = *v89;
      }
      else if (*(unsigned char *)(a2 + 56))
      {
        uint64_t v81 = (char *)(a2 + 73);
      }
      else
      {
        uint64_t v81 = (char *)v100 + 9;
      }
      int v90 = *(unsigned __int8 *)(a2 + 100);
      int v91 = *(_DWORD *)(a2 + 104);
      int v92 = *(_DWORD *)(a2 + 108);
      uint64_t v93 = *(void *)(a2 + 112);
      uint64_t v94 = *(void *)(a2 + 120);
      *(_DWORD *)long long buf = 138415362;
      *(void *)CMTime v103 = v99;
      *(_WORD *)&v103[8] = 2048;
      *(void *)&v103[10] = v74;
      *(_WORD *)&unsigned char v103[18] = 2112;
      *(void *)&v103[20] = v75;
      *(_WORD *)&v103[28] = 2048;
      *(void *)&v103[30] = v76;
      *(_WORD *)&v103[38] = 1024;
      *(_DWORD *)&v103[40] = v77;
      *(_WORD *)&v103[44] = 2048;
      *(double *)unsigned int v104 = v78;
      *(_WORD *)&v104[8] = 1024;
      *(_DWORD *)&v104[10] = v79;
      *(_WORD *)unsigned int v105 = 2080;
      *(void *)&v105[2] = v81;
      *(_WORD *)&v105[10] = 1024;
      *(_DWORD *)&v105[12] = v90;
      *(_WORD *)&v105[16] = 1024;
      *(_DWORD *)uint64_t v106 = v91;
      *(_WORD *)&v106[4] = 1024;
      *(_DWORD *)&v106[6] = v92;
      __int16 v107 = 2048;
      uint64_t v108 = v93;
      __int16 v109 = 2048;
      uint64_t v110 = v94;
      _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Recovered file buffer asset with buffer=%@, bufferSize=%zu, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, targetLUFS=%0.2f from audio payload update.", buf, 0x70u);
      if (*(void *)&v100[0] && (BYTE8(v100[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v100[0] + 40))();
      }
    }
    goto LABEL_71;
  }
  uint64_t v88 = *re::audioLogObjects(v64);
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v88, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Cannot update asset from payload that contains neither buffer nor file path.", buf, 2u);
  }
LABEL_72:
  if (!*(unsigned char *)(a6 + 32))
  {
LABEL_75:
    re::AudioFileAsset::markAsIncompleteLoad((re::AudioFileAsset *)a2);
LABEL_76:

    return;
  }
  uint64_t v95 = *(void *)(a6 + 24);
  if (v95)
  {
    (*(void (**)(uint64_t))(*(void *)v95 + 48))(v95);
    goto LABEL_75;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_2334F99B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

BOOL re::AudioAssetLoadStrategy_Base::createRuntimeDataWithSeekableInputStream(re::AudioAssetLoadStrategy_Base *this, re::SeekableInputStream *a2, re::AudioFileAsset *a3)
{
  if ((*(uint64_t (**)(void))(*(void *)(*((void *)a3 + 1) + 48) + 64))()) {
    *(void *)(*((void *)a3 + 1) + 160) = (*(uint64_t (**)(void))(*(void *)(*((void *)a3 + 1) + 48) + 40))();
  }
  uint64_t v5 = +[_REAudioFile audioFileWithStream:a2 ownsStream:0];
  id v6 = v5;
  if (v5)
  {
    unint64_t v7 = [v5 processingFormat];
    id v9 = (re *)re::audio::layoutTagFromFormat(v7, v8);
    *((_DWORD *)a3 + 32) = v9;
    BOOL v10 = v9 != -65536;
    if (v9 == -65536)
    {
      uint64_t v17 = *re::audioLogObjects(v9);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v19 = 0;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Failed to load embedded audio due to missing channel layout.", v19, 2u);
      }
    }
    else
    {
      if (!*((unsigned char *)a3 + 100)) {
        goto LABEL_11;
      }
      id v11 = v6;
      id v12 = v7;
      unint64_t v13 = (*(uint64_t (**)(re::SeekableInputStream *))(*(void *)a2 + 64))(a2);
      objc_storeStrong((id *)(*((void *)a3 + 1) + 8), v7);
      *((void *)a3 + 17) = [v11 getReaderFileLength];
      unint64_t v14 = v13 / 0x64;
      if (v13 / 0x64 <= 0xC350) {
        unint64_t v14 = 50000;
      }
      if ((*((_DWORD *)a3 + 33) + 1) <= 1) {
        v14 += v13;
      }
      *((void *)a3 + 20) = v14;
      char SharableFileBuffer = re::AudioFileAsset::createSharableFileBuffer((re::AudioFileAsset::Impl **)a3, a2);

      if ((SharableFileBuffer & 1) == 0) {
LABEL_11:
      }
        re::AudioAssetLoadStrategy_Base::decodeSeekableStreamIntoPCMBuffer(v9, a2, a3);
    }
  }
  else
  {
    id v16 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Failed to load embedded audio due to nil audio file.", buf, 2u);
    }
    BOOL v10 = 0;
  }

  return v10;
}

void sub_2334F9D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL re::AudioAssetLoadStrategy_Base::decodeSeekableStreamIntoPCMBuffer(re::AudioAssetLoadStrategy_Base *this, re::SeekableInputStream *a2, re::AudioFileAsset *a3)
{
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v12 = 0;
  char v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  re::audio::AudioFileAssetReader::init(&v12, a2, 0);
  uint64_t v5 = re::audio::AudioFileAssetReader::readFromData((re::audio::AudioFileAssetReader *)&v12);
  id v6 = v5;
  if (v5)
  {
    unint64_t v7 = [v5 format];
    objc_storeStrong((id *)(*((void *)a3 + 1) + 8), v7);

    *((void *)a3 + 17) = [v6 frameLength];
    objc_storeStrong((id *)(*((void *)a3 + 1) + 16), v6);
    unint64_t v9 = re::audio::pcmBufferSize((re::audio *)v6, v8);
    unint64_t v10 = v9 / 0x64;
    if (v9 / 0x64 <= 0xC350) {
      unint64_t v10 = 50000;
    }
    if ((*((_DWORD *)a3 + 33) + 1) <= 1) {
      v10 += v9;
    }
    *((void *)a3 + 20) = v10;
    if (re::internal::enableSignposts(0, 0))
    {
      (*(void (**)(re::SeekableInputStream *))(*(void *)a2 + 64))(a2);
      kdebug_trace();
    }
  }

  re::audio::AudioFileAssetReader::~AudioFileAssetReader((re::audio::AudioFileAssetReader *)&v12);
  return v6 != 0;
}

void sub_2334F9F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  re::audio::AudioFileAssetReader::~AudioFileAssetReader((re::audio::AudioFileAssetReader *)va);
  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Base::~AudioAssetLoadStrategy_Base(re::AudioAssetLoadStrategy_Base *this)
{
}

uint64_t *re::SceneAsset::assetType(re::SceneAsset *this)
{
  {
    re::SceneAsset::assetType(void)::type = (uint64_t)"Scene";
    qword_26879E7C8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::SceneAsset::assetType(void)::type);
  }
  return &re::SceneAsset::assetType(void)::type;
}

void re::ecs2::ComponentHandleAssetData::release(re::DynamicString **this, re::Allocator *a2)
{
  if (this[1])
  {
    uint64_t v4 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)this);
    uint64_t v5 = re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v4, (uint64_t)*this);
    if (v5)
    {
      if (*((unsigned char *)this + 16))
      {

        this[1] = 0;
      }
      else
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
        unint64_t v7 = this[1];
        re::introspectionReleasePointer(v7, (uint64_t)a2, 0, v6);
      }
    }
  }
}

void re::ecs2::EntityAssetData::~EntityAssetData(re::ecs2::EntityAssetData *this)
{
  unint64_t v2 = (re::Allocator **)((char *)this + 32);
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 8);
    uint64_t v5 = 24 * v3;
    do
    {
      re::ecs2::ComponentHandleAssetData::release((re::DynamicString **)v4, *v2);
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 16) = 0;
      v4 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)this + 72);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::EntityAssetData *)((char *)this + 8));
}

uint64_t re::SceneAssetLoader::registerAsset()
{
  return 0;
}

re *re::SceneAssetLoader::unloadAsset(re::SceneAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::SceneAsset>((re *)"unloadAsset", 92, a2);
}

re *re::internal::destroyPersistent<re::SceneAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::SceneAssetLoader::isSupportedSourceExtension(re::SceneAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "rescene") == 0;
}

char **re::SceneAssetLoader::introspectionType(re::SceneAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::SceneAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"SceneAsset", (uint64_t (*)(re::internal *))re::allocInfo_SceneAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SceneAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[334];
}

void *re::SceneAssetLoader::findRegistrationDependencies@<X0>(re::SceneAssetLoader *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t result = re::DynamicArray<re::AssetHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::ecs2::allocInfo_ComponentHandleAssetData(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B690, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B690))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B7C0, "ComponentHandleAssetData");
    __cxa_guard_release(&qword_26AF7B690);
  }
  return &unk_26AF7B7C0;
}

void re::ecs2::initInfo_ComponentHandleAssetData(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xE7C2365AE903F5AALL;
  v13[1] = "ComponentHandleAssetData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B698, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B698);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::IntrospectionInfo<re::ecs2::Component *>::get(1);
      char v8 = re::introspect_uint64_t((re *)1, v7);
      uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "component";
      *(void *)(v9 + 16) = v6;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 2;
      *(void *)(v9 + 48) = v8;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7B708 = v9;
      unint64_t v10 = re::introspectionAllocator((re *)v9);
      id v11 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 8, 4);
      void *v11 = 0x100000004;
      qword_26AF7B710 = (uint64_t)v11;
      __cxa_guard_release(&qword_26AF7B698);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7B708;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ComponentHandleAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ComponentHandleAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ComponentHandleAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ComponentHandleAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

uint64_t *re::IntrospectionInfo<re::ecs2::Component *>::get(int a1)
{
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v2 = re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v2) {
      return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
    }
    uint64_t v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
    if (re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized)
    {
LABEL_19:
      id v11 = re::introspectionSharedMutex(v5);
      std::__shared_mutex_base::unlock(v11);
      return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized = 1;
  uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info, 0);
  qword_268773A90 = 0x800000001;
  dword_268773A98 = 8;
  word_268773A9C = 0;
  *(void *)&xmmword_268773AA0 = 0;
  *((void *)&xmmword_268773AA0 + 1) = 0xFFFFFFFFLL;
  re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info = (uint64_t)&unk_26E6CDA08;
  qword_268773AB0 = v6;
  unk_268773AB8 = 0;
  re::IntrospectionRegistry::add(v7, v8);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
  if (BYTE8(v14)) {
    uint64_t v9 = v15;
  }
  else {
    uint64_t v9 = (char *)&v14 + 9;
  }
  if (void)v14 && (BYTE8(v14)) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  if (v16 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
  {
    long long v10 = v14;
  }
  else
  {
    long long v14 = *(_OWORD *)(v6 + 32);
    long long v10 = v13;
  }
  xmmword_268773AA0 = v10;
  re::StringID::destroyString((re::StringID *)&v16);
  if ((a1 & 1) == 0) {
    goto LABEL_19;
  }
  return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
}

void re::internal::defaultConstruct<re::ecs2::ComponentHandleAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::ComponentHandleAssetData>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

void *re::ecs2::allocInfo_EntityAssetData(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B6A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B838, "EntityAssetData");
    __cxa_guard_release(&qword_26AF7B6A8);
  }
  return &unk_26AF7B838;
}

void re::ecs2::initInfo_EntityAssetData(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x1BEB5EC469A7F3EELL;
  v22[1] = "EntityAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B6B0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "id";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7B718 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      id v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "name";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7B720 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "isSelfActive";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7B728 = v16;
      uint64_t v17 = (re::ecs2 *)re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::ComponentHandleAssetData>>::get(v17);
      uint64_t v18 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "components";
      *(void *)(v18 + 16) = &qword_26AF7B740;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x2000000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF7B730 = v18;
      uint64_t v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityAssetData>>::get();
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "children";
      *(void *)(v20 + 16) = &qword_26AF7B780;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7B738 = v20;
      __cxa_guard_release(&qword_26AF7B6B0);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF7B718;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::EntityAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::EntityAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EntityAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::EntityAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ComponentHandleAssetData>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6F8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF7B6F8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7B740);
      qword_26AF7B740 = (uint64_t)&unk_26E6D71C8;
      __cxa_guard_release(&qword_26AF7B6F8);
    }
  }
  if ((_MergedGlobals_89 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7B6A0;
    if (qword_26AF7B6A0
      || (uint64_t v1 = re::ecs2::allocInfo_ComponentHandleAssetData(a1),
          qword_26AF7B6A0 = (uint64_t)v1,
          re::ecs2::initInfo_ComponentHandleAssetData((re::ecs2 *)v1, v2),
          (_MergedGlobals_89 & 1) == 0))
    {
      _MergedGlobals_89 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7B740, 0);
      qword_26AF7B750 = 0x2800000003;
      dword_26AF7B758 = v3;
      word_26AF7B75C = 0;
      *(void *)&xmmword_26AF7B760 = 0;
      *((void *)&xmmword_26AF7B760 + 1) = 0xFFFFFFFFLL;
      qword_26AF7B770 = (uint64_t)v1;
      unk_26AF7B778 = 0;
      qword_26AF7B740 = (uint64_t)&unk_26E6D71C8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7B740, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      unint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7B760 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityAssetData>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B700, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF7B700);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7B780);
      qword_26AF7B780 = (uint64_t)&unk_26E6D7260;
      __cxa_guard_release(&qword_26AF7B700);
    }
  }
  if ((byte_26AF7B689 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7B6B8;
    if (qword_26AF7B6B8
      || (uint64_t v1 = re::ecs2::allocInfo_EntityAssetData(a1),
          qword_26AF7B6B8 = (uint64_t)v1,
          re::ecs2::initInfo_EntityAssetData((re::ecs2 *)v1, v2),
          (byte_26AF7B689 & 1) == 0))
    {
      byte_26AF7B689 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7B780, 0);
      qword_26AF7B790 = 0x2800000003;
      dword_26AF7B798 = v3;
      word_26AF7B79C = 0;
      *(void *)&xmmword_26AF7B7A0 = 0;
      *((void *)&xmmword_26AF7B7A0 + 1) = 0xFFFFFFFFLL;
      qword_26AF7B7B0 = (uint64_t)v1;
      unk_26AF7B7B8 = 0;
      qword_26AF7B780 = (uint64_t)&unk_26E6D7260;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7B780, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      unint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7B7A0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::EntityAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = "";
  *(unsigned char *)(a3 + 24) = 1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::EntityAssetData>(int a1, int a2, re::ecs2::EntityAssetData *this)
{
}

double re::internal::defaultConstructV2<re::ecs2::EntityAssetData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "";
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

void *re::ecs2::allocInfo_SceneAssetData(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B6C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B8B0, "SceneAssetData");
    __cxa_guard_release(&qword_26AF7B6C0);
  }
  return &unk_26AF7B8B0;
}

void re::ecs2::initInfo_SceneAssetData(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v8[0] = 0x79292AE943720F5CLL;
  v8[1] = "SceneAssetData";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B6D0);
    if (v4)
    {
      uint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityAssetData>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "entities";
      *(void *)(v6 + 16) = &qword_26AF7B780;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7B6C8 = v6;
      __cxa_guard_release(&qword_26AF7B6D0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7B6C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

void re::internal::defaultConstruct<re::ecs2::SceneAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::SceneAssetData>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::ecs2::introspect_SceneAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneAssetData", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneAssetData, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF7B6D8, this);
}

void *re::allocInfo_SceneAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B6E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7B928, "SceneAsset");
    __cxa_guard_release(&qword_26AF7B6E0);
  }
  return &unk_26AF7B928;
}

void re::initInfo_SceneAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x103693E25C6BC8;
  v11[1] = "SceneAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B6F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B6F0);
    if (v4)
    {
      uint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      long long v7 = (re::ecs2 *)qword_26AF7B6D8;
      if (!qword_26AF7B6D8)
      {
        long long v7 = (re::ecs2 *)re::ecs2::allocInfo_SceneAssetData(v5);
        qword_26AF7B6D8 = (uint64_t)v7;
        re::ecs2::initInfo_SceneAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "sceneAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7B6E8 = v9;
      __cxa_guard_release(&qword_26AF7B6F0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7B6E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SceneAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SceneAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SceneAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SceneAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::SceneAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::SceneAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SceneAsset>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_SceneAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneAsset", (uint64_t (*)(re::internal *))re::allocInfo_SceneAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SceneAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneAsset>, this);
}

void re::SceneAssetLoader::~SceneAssetLoader(re::SceneAssetLoader *this)
{
}

void *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    double result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::ComponentHandleAssetData>::resize((void *)a4, a5);
    }
  }
  else
  {
    double result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __n128 v10 = 0uLL;
  uint64_t v11 = 0;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(this, &v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * *((void *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::ecs2::ComponentHandleAssetData>::resize(void *result, unint64_t a2)
{
  int v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      uint64_t v6 = v5 + 24 * v4;
      uint64_t v7 = v5 + 24 * a2 - v6;
      if (v7 >= 1)
      {
        unint64_t v8 = v7 / 0x18uLL + 1;
        do
        {
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(unsigned char *)(v6 + 16) = 0;
          v6 += 24;
          --v8;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::ComponentHandleAssetData>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      __n128 v10 = *(char **)(a1 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v10 = 0u;
  uint64_t v12 = 1;
  uint64_t v11 = "";
  long long v13 = 0uLL;
  long long v14 = 0uLL;
  long long v15 = 0u;
  long long v16 = 0u;
  re::DynamicArray<re::ecs2::EntityAssetData>::add(a4, (uint64_t)&v10);
  re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v10);
  unint64_t v8 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 112 * *(void *)(a4 + 16) - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 112 * a3;
}

void re::DynamicArray<re::ecs2::EntityAssetData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 112 * a2;
    unint64_t v9 = a2;
    do
    {
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 112;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 112 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = "";
        *(unsigned char *)(v7 + 24) = 1;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        *(void *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        v6 += 112;
        *(_DWORD *)(v7 + 96) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::clear((re::ecs2::EntityAssetData *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::EntityAssetData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      long long v10 = *(char **)(a1 + 32);
      uint64_t v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

re::ecs2::EntityAssetData *re::DynamicArray<re::ecs2::EntityAssetData>::clear(re::ecs2::EntityAssetData *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2)
  {
    uint64_t result = (re::ecs2::EntityAssetData *)*((void *)result + 4);
    uint64_t v3 = 112 * v2;
    do
    {
      re::ecs2::EntityAssetData::~EntityAssetData(result);
      uint64_t result = (re::ecs2::EntityAssetData *)(v4 + 112);
      v3 -= 112;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 112 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t *re::RigGraphAsset::assetType(re::RigGraphAsset *this)
{
  {
    re::RigGraphAsset::assetType(void)::type = (uint64_t)"RigGraph";
    qword_26879E7E8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RigGraphAsset::assetType(void)::type);
  }
  return &re::RigGraphAsset::assetType(void)::type;
}

uint64_t *re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset@<X0>(re::RigGraphAsset *this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  uint64_t v7 = re::globalAllocators(this);
  uint64_t v8 = (__CFError *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 160, 8);
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  v125[0] = (CFErrorRef)&unk_26E6D7450;
  v125[3] = (CFErrorRef)v125;
  uint64_t v111 = v8;
  uint64_t v113 = (__CFError *)v112;
  v112[0] = &unk_26E6D7450;
  std::__function::__value_func<void ()(re::RigGraphAsset *)>::~__value_func[abi:nn180100](v125);
  if (!*((void *)this + 29))
  {
    v125[0] = 0;
    int v59 = "Source entity must have a skeletal pose";
LABEL_40:
    uint64_t v60 = 39;
LABEL_41:
    re::internal::makeError(v59, v60, v125);
    CFErrorRef v61 = v125[0];
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v61;
    return std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v111);
  }
  uint64_t v9 = *((void *)a2 + 22);
  if (!v9 || !*((void *)a2 + 29))
  {
    v125[0] = 0;
    int v59 = "Target entity must have a skeletal mesh";
    goto LABEL_40;
  }
  long long v10 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v9 + 32));
  if (!v10)
  {
    v125[0] = 0;
    int v59 = "Invalid skeletal mesh";
    uint64_t v60 = 21;
    goto LABEL_41;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (uint64_t)v111;
  re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)v12, 0);
  ++*(_DWORD *)(v12 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)(v12 + 40), 0);
  ++*(_DWORD *)(v12 + 64);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)(v12 + 80), 0);
  ++*(_DWORD *)(v12 + 104);
  int v13 = *((_DWORD *)v11 + 234);
  if (v13)
  {
    unint64_t v72 = this;
    unint64_t v73 = a2;
    id v71 = (_anonymous_namespace_ *)(v12 + 80);
    uint64_t v74 = a3;
    do
    {
      v92[0] = 0xF97D88DA606B5F84;
      v92[1] = (uint64_t)"retargetRigGraph";
      re::StringID::destroyString((re::StringID *)v92);
      v91[0] = 0;
      v91[1] = (uint64_t)"";
      v90[0] = 0;
      v90[1] = "";
      re::internal::RigGraphDefinitionBuilder::addNode((uint64_t)v125, v91, v90);
      re::StringID::destroyString((re::StringID *)v90);
      re::StringID::destroyString((re::StringID *)v91);
      *(void *)&v89.var0 = 0;
      v89.var1 = "";
      *(void *)&v105.var0 = 0;
      v105.var1 = "";
      uint64_t v106 = 0;
      __int16 v107 = "";
      v88[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v89, &v105, v88);
      re::StringID::destroyString((re::StringID *)&v106);
      re::StringID::destroyString((re::StringID *)&v105);
      re::StringID::destroyString((re::StringID *)&v89);
      *(void *)&v87.var0 = 0;
      v87.var1 = "";
      *(void *)&v99.var0 = 0;
      v99.var1 = "";
      uint64_t v100 = 0;
      id v101 = "";
      v86[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v87, &v99, v86);
      re::StringID::destroyString((re::StringID *)&v100);
      re::StringID::destroyString((re::StringID *)&v99);
      re::StringID::destroyString((re::StringID *)&v87);
      *(void *)&v85.var0 = 0;
      v85.var1 = "";
      *(void *)&v93.var0 = 0;
      v93.var1 = "";
      uint64_t v94 = 0;
      uint64_t v95 = "";
      v84[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v85, &v93, v84);
      re::StringID::destroyString((re::StringID *)&v94);
      re::StringID::destroyString((re::StringID *)&v93);
      re::StringID::destroyString((re::StringID *)&v85);
      *(void *)&v83.var0 = 0;
      v83.var1 = "";
      *(void *)unint64_t v139 = 0;
      *(void *)&v139[8] = "";
      *(void *)&v139[16] = 0;
      *(void *)&v139[24] = "";
      v82[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v83, (const StringID *)v139, v82);
      re::StringID::destroyString((re::StringID *)&v139[16]);
      re::StringID::destroyString((re::StringID *)v139);
      re::StringID::destroyString((re::StringID *)&v83);
      *(void *)&v81.var0 = 0;
      v81.var1 = "";
      *(void *)&v79.var0 = 0;
      v79.var1 = "";
      v80[0] = 0;
      v80[1] = "";
      v78[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphOutput(v125, &v81, &v79, v78);
      re::StringID::destroyString((re::StringID *)v80);
      re::StringID::destroyString((re::StringID *)&v79);
      re::StringID::destroyString((re::StringID *)&v81);
      *(CFErrorRef *)unint64_t v114 = v125[0];
      long long v31 = *(_OWORD *)&v125[1];
      v125[0] = 0;
      v125[1] = (CFErrorRef)"";
      *(_OWORD *)&v114[8] = v31;
      memset(&v125[2], 0, 24);
      *(_OWORD *)&v114[24] = *(_OWORD *)&v125[3];
      v116[0] = v126;
      v116[1] = v127;
      long long v126 = 0u;
      long long v127 = 0u;
      ++LODWORD(v125[5]);
      ++v128;
      LODWORD(v115) = 1;
      int v117 = 1;
      v118[0] = v129;
      long long v129 = 0u;
      v118[1] = v130;
      long long v130 = 0u;
      v120[0] = v132;
      v120[1] = v133;
      long long v132 = 0u;
      long long v133 = 0u;
      ++v131;
      ++v134;
      int v119 = 1;
      int v121 = 1;
      v122[0] = v135;
      long long v135 = 0u;
      v122[1] = v136;
      long long v136 = 0u;
      uint64_t v124 = v138;
      uint64_t v138 = 0;
      ++v137;
      int v123 = 1;
      re::DynamicArray<re::RigGraphDefinition>::add(v12, (uint64_t *)v114);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)v122 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((void *)v120 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v118 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v116 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v114[16]);
      re::StringID::destroyString((re::StringID *)v114);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v135 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((void *)&v132 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v129 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v126 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
      --v13;
    }
    while (v13);
    uint64_t v32 = *((void *)v11 + 52);
    if (v32)
    {
      float32x4_t v33 = (uint64_t *)*((void *)v11 + 54);
      unint64_t v75 = &v33[v32];
      uint64_t v76 = *((void *)v11 + 55) + 8;
      a3 = *((unsigned int *)v11 + 234);
      while (1)
      {
        uint64_t v34 = re::DataArray<re::MeshModel>::tryGet(v76, *v33);
        if (!v34)
        {
          v125[0] = 0;
          re::internal::makeError("Unable to get mesh model", 24, v125);
          BOOL v63 = (CFErrorRef *)v125[0];
          a3 = v74;
          goto LABEL_84;
        }
        uint64_t v35 = v34;
        int v77 = v33;
        uint64_t v36 = *(CFErrorRef **)(v34 + 56);
        if (v36) {
          break;
        }
LABEL_19:
        float32x4_t v33 = v77 + 1;
        if (v77 + 1 == v75) {
          goto LABEL_20;
        }
      }
      int v37 = 0;
      uint64_t v38 = 4;
      uint64_t v39 = 504;
      while (1)
      {
        unint64_t v40 = *(void *)(v35 + 56);
        if (v40 <= (unint64_t)v37) {
          break;
        }
        uint64_t v41 = *(void *)(v35 + 176);
        if (v41)
        {
          if (*(void *)(v41 + 8) > (unint64_t)v37)
          {
            uint64_t v42 = *(void *)(v41 + 16);
            unsigned int v43 = *(_DWORD *)(v42 + v38);
            if (v43 < a3)
            {
              uint64_t v44 = a3;
              uint64_t v45 = *(void *)(v35 + 64);
              id v46 = (const StringID *)re::MeshAsset::skeletonAtIndex(v11, *(unsigned int *)(v42 + v38));
              re::StringID::StringID((re::StringID *)v114, v46);
              LOBYTE(v125[0]) = 2;
              re::StringID::StringID((re::StringID *)&v125[1], (const StringID *)v35);
              BOOL v47 = (const StringID *)(v45 + v39);
              a3 = v44;
              re::StringID::StringID((re::StringID *)&v125[3], v47);
              re::StringID::StringID((re::StringID *)&v125[5], (const StringID *)v114);
              DWORD2(v126) = v43;
              re::DynamicArray<re::MeshRigGraphIndex>::add((_anonymous_namespace_ *)(v12 + 40), (uint64_t)v125);
              re::StringID::destroyString((re::StringID *)&v125[5]);
              re::StringID::destroyString((re::StringID *)&v125[3]);
              re::StringID::destroyString((re::StringID *)&v125[1]);
              re::StringID::destroyString((re::StringID *)v114);
            }
          }
        }
        int v37 = (CFErrorRef *)((char *)v37 + 1);
        v39 += 560;
        v38 += 72;
        if (v36 == v37) {
          goto LABEL_19;
        }
      }
      *(void *)&v105.var0 = 0;
      long long v126 = 0u;
      long long v127 = 0u;
      memset(v125, 0, sizeof(v125));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 476;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37;
      *(_WORD *)&v114[28] = 2048;
      *(void *)&v114[30] = v40;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_91;
    }
LABEL_20:
    *(void *)&v114[8] = 0;
    *(void *)unint64_t v114 = 0;
    *(_DWORD *)&v114[16] = 1;
    uint64_t v115 = 0;
    *(void *)&v114[24] = 0;
    *(void *)&v114[32] = 0;
    LODWORD(v116[0]) = 0;
    v105.var1 = 0;
    *(void *)&v105.var0 = 0;
    LODWORD(v106) = 1;
    unint64_t v109 = 0;
    __int16 v107 = 0;
    uint64_t v108 = 0;
    int v110 = 0;
    re::internal::RetargetRigGraphAssetBuilder::appendParentNamesAndIds((uint64_t)v72, (uint64_t)v114, (uint64_t)&v105);
    v99.var1 = 0;
    *(void *)&v99.var0 = 0;
    LODWORD(v100) = 1;
    uint64_t v103 = 0;
    id v101 = 0;
    uint64_t v102 = 0;
    int v104 = 0;
    *(void *)&v93.var0 = 0;
    v93.var1 = 0;
    LODWORD(v94) = 1;
    uint64_t v97 = 0;
    uint64_t v95 = 0;
    id v96 = 0;
    int v98 = 0;
    re::internal::RetargetRigGraphAssetBuilder::appendParentNamesAndIds((uint64_t)v73, (uint64_t)&v99, (uint64_t)&v93);
    if (v109)
    {
      float32x4_t v48 = 0;
      unint64_t v49 = -1;
      while (1)
      {
        unint64_t v50 = (void *)re::BucketArray<unsigned long long,5ul>::operator[]((uint64_t)&v105, (unint64_t)v48);
        if (v97)
        {
          unint64_t v51 = 0;
          var1 = v93.var1;
          int v53 = v96;
          if (v94) {
            int v53 = &v95;
          }
          while (1)
          {
            if (v93.var1 <= (char *)(v51 / 5))
            {
              *(void *)&v79.var0 = 0;
              long long v126 = 0u;
              long long v127 = 0u;
              memset(v125, 0, sizeof(v125));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)unint64_t v139 = 136315906;
              *(void *)&v139[4] = "operator[]";
              *(_WORD *)&v139[12] = 1024;
              *(_DWORD *)&v139[14] = 866;
              *(_WORD *)&v139[18] = 2048;
              *(void *)&v139[20] = v51 / 5;
              *(_WORD *)&v139[28] = 2048;
              *(void *)&v139[30] = var1;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            if (*(void *)&v53[v51 / 5][8 * v51 + -40 * (v51 / 5)] == *v50) {
              break;
            }
            if (v97 == ++v51) {
              goto LABEL_31;
            }
          }
        }
        else
        {
          unint64_t v51 = 0;
        }
        if (v51 != v97) {
          break;
        }
LABEL_31:
        float32x4_t v48 = (__CFError *)((char *)v48 + 1);
        ++v49;
        if ((unint64_t)v48 >= v109) {
          goto LABEL_32;
        }
      }
      if (v114[16]) {
        uint64_t v64 = (__CFError *)&v114[24];
      }
      else {
        uint64_t v64 = *(__CFError **)&v114[32];
      }
      v125[0] = v64;
      v125[1] = *(CFErrorRef *)&v114[8];
      v125[2] = v48;
      for (; v51; --v51)
        re::DynamicString::appendf((re::DynamicString *)v139, "relative[parent].");
      if (v48)
      {
        do
        {
          uint64_t v65 = *(void *)(re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v49) + 8);
          unint64_t v66 = (const char **)re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v49);
          re::DynamicString::appendf((re::DynamicString *)v139, "%.*s.", v65, *v66);
          --v49;
        }
        while (v49 != -1);
      }
    }
    else
    {
LABEL_32:
      unint64_t v54 = *(__CFError **)&v114[32];
      unint64_t v55 = v115;
      if (v114[16]) {
        unint64_t v54 = (__CFError *)&v114[24];
      }
      v125[0] = v54;
      v125[1] = *(CFErrorRef *)&v114[8];
      v125[2] = v115;
      if (v55)
      {
        unint64_t v56 = (unint64_t)v55 - 1;
        do
        {
          uint64_t v57 = *(void *)(re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v56) + 8);
          int v58 = (const char **)re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v56);
          re::DynamicString::appendf((re::DynamicString *)v139, "%.*s.", v57, *v58);
          --v56;
        }
        while (v56 != -1);
      }
    }
    re::BucketArray<unsigned long long,5ul>::deinit((uint64_t)&v93);
    a3 = v74;
    if (*(void *)&v93.var0 && (v94 & 1) == 0) {
      (*(void (**)(void))(**(void **)&v93.var0 + 40))();
    }
    re::BucketArray<re::StringSlice,5ul>::deinit((uint64_t)&v99);
    if (*(void *)&v99.var0 && (v100 & 1) == 0) {
      (*(void (**)(void))(**(void **)&v99.var0 + 40))();
    }
    re::BucketArray<unsigned long long,5ul>::deinit((uint64_t)&v105);
    if (*(void *)&v105.var0 && (v106 & 1) == 0) {
      (*(void (**)(void))(**(void **)&v105.var0 + 40))();
    }
    re::BucketArray<re::StringSlice,5ul>::deinit((uint64_t)v114);
    if (*(void *)v114 && (v114[16] & 1) == 0) {
      (*(void (**)(void))(**(void **)v114 + 40))();
    }
    if (v139[8]) {
      uint64_t v67 = *(void *)&v139[8] >> 1;
    }
    else {
      uint64_t v67 = v139[8] >> 1;
    }
    if (v67)
    {
      v125[0] = (CFErrorRef)0xFE85F7454D5070B4;
      v125[1] = (CFErrorRef)"sourceHierarchy";
      re::DynamicString::operator+((re::DynamicString *)v139, "SkeletalPose.skeletalPoses[0]", (re::DynamicString *)v114);
      re::StringID::StringID((re::StringID *)&v125[2], (const re::DynamicString *)v114);
      LODWORD(v125[4]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v71, (uint64_t *)v125);
      re::StringID::destroyString((re::StringID *)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
      if (*(void *)v114 && (v114[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v114 + 40))();
      }
      v125[0] = (CFErrorRef)0xEFC647C93FEC3E86;
      v125[1] = (CFErrorRef)"sourceModelToWorldTransform";
      re::DynamicString::operator+((re::DynamicString *)v139, "Transform.transform", (re::DynamicString *)v114);
      re::StringID::StringID((re::StringID *)&v125[2], (const re::DynamicString *)v114);
      LODWORD(v125[4]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v71, (uint64_t *)v125);
      re::StringID::destroyString((re::StringID *)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
      if (*(void *)v114 && (v114[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v114 + 40))();
      }
      v125[0] = (CFErrorRef)0x52855BF5A9F7771ALL;
      v125[1] = (CFErrorRef)"targetModelToWorldTransform";
      BOOL v63 = &v125[2];
      v125[2] = (CFErrorRef)0x7A8A31107D1B226;
      v125[3] = (CFErrorRef)"entity://Transform.transform";
      LODWORD(v125[4]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v71, (uint64_t *)v125);
      re::StringID::destroyString((re::StringID *)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
    }
    else
    {
      v125[0] = 0;
      re::internal::makeError("Unable to construct bind path to source entity", 46, v125);
      BOOL v63 = (CFErrorRef *)v125[0];
    }
    if (*(void *)v139 && (v139[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v139 + 40))();
    }
    if (v67)
    {
      unint64_t v68 = v111;
      id v69 = v113;
      uint64_t v111 = 0;
      v125[0] = v68;
      if (v113)
      {
        int v37 = &v125[1];
        if (v113 != (__CFError *)v112)
        {
          uint64_t v113 = 0;
          *(unsigned char *)uint64_t v74 = 1;
          v125[4] = v69;
          v125[0] = 0;
          *(void *)(v74 + 8) = v68;
LABEL_88:
          if (v69 == (__CFError *)&v125[1])
          {
LABEL_91:
            *(void *)(a3 + 40) = a3 + 16;
            (*((void (**)(CFErrorRef *))v125[1] + 3))(v37);
            goto LABEL_92;
          }
          *(void *)(v74 + 40) = v69;
          v125[4] = 0;
LABEL_92:
          std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v125);
          return std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v111);
        }
        v125[4] = (CFErrorRef)&v125[1];
        (*(void (**)(void))(v112[0] + 24))();
        CFErrorRef v70 = v125[0];
        id v69 = v125[4];
        *(unsigned char *)uint64_t v74 = 1;
        v125[0] = 0;
        *(void *)(v74 + 8) = v70;
        if (v69) {
          goto LABEL_88;
        }
      }
      else
      {
        *(unsigned char *)uint64_t v74 = 1;
        v125[4] = 0;
        v125[0] = 0;
        *(void *)(v74 + 8) = v68;
      }
      *(void *)(v74 + 40) = 0;
      goto LABEL_92;
    }
  }
  else
  {
    v125[0] = 0;
    re::internal::makeError("No skeleton to build retarget for", 33, v125);
    BOOL v63 = (CFErrorRef *)v125[0];
  }
LABEL_84:
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = v63;
  return std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v111);
}

void re::internal::makeError(char *cStr, uint64_t a2, CFErrorRef *a3)
{
  if (!*a3)
  {
    userInfoValues = (void *)CFStringCreateWithCString(0, cStr, 0x8000100u);
    unint64_t v4 = (const void *)*MEMORY[0x263EFFC48];
    *a3 = CFErrorCreateWithUserInfoKeysAndValues(0, @"RERigGraphAssetErrorDomain", 0, &v4, (const void *const *)&userInfoValues, 1);
    if (userInfoValues) {
      CFRelease(userInfoValues);
    }
  }
}

uint64_t re::AssetHandle::asset<re::MeshAsset>(re::MeshAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::MeshAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t *re::RigGraphAsset::createIKSolverRigGraphAsset@<X0>(re::RigGraphAsset *this@<X0>, const re::MeshAsset *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v7 = re::globalAllocators(v6);
  int v8 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 160, 8);
  *int v8 = 0u;
  v8[1] = 0u;
  void v8[2] = 0u;
  v8[3] = 0u;
  uint8_t v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  uint8_t v8[8] = 0u;
  v8[9] = 0u;
  *(void *)&v83[0] = &unk_26E6D74D0;
  *((void *)&v83[1] + 1) = v83;
  uint64_t v97 = v8;
  StringID v99 = v98;
  v98[0] = &unk_26E6D74D0;
  std::__function::__value_func<void ()(re::RigGraphAsset *)>::~__value_func[abi:nn180100](v83);
  uint64_t v9 = (uint64_t)v97;
  re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)v9, 0);
  v9 += 40;
  ++*(_DWORD *)(v9 - 16);
  re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)v9, 0);
  ++*(_DWORD *)(v9 + 24);
  uint64_t v40 = *((unsigned int *)a2 + 32);
  if (*((_DWORD *)a2 + 32))
  {
    uint64_t v36 = a3;
    unint64_t v10 = 0;
    uint64_t v38 = (_anonymous_namespace_ *)(v97 + 10);
    uint64_t v39 = (uint64_t)v97;
    unsigned int v43 = (_anonymous_namespace_ *)(v97 + 5);
    int v37 = a2;
    do
    {
      unint64_t v11 = *((void *)a2 + 4);
      if (v11 <= v10) {
        goto LABEL_58;
      }
      re::StringID::StringID((re::StringID *)&v70, (const StringID *)(*((void *)a2 + 5) + 16 * v10));
      unint64_t v11 = *((void *)a2 + 10);
      if (v11 <= v10) {
        goto LABEL_59;
      }
      re::StringID::StringID((re::StringID *)v69, (const StringID *)(*((void *)a2 + 11) + 16 * v10));
      re::StringID::StringID((re::StringID *)&v68, (const re::DynamicString *)v83);
      if (*(void *)&v83[0] && (BYTE8(v83[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v83[0] + 40))();
      }
      re::StringID::StringID((re::StringID *)&v67, (const re::DynamicString *)v83);
      if (*(void *)&v83[0] && (BYTE8(v83[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v83[0] + 40))();
      }
      re::StringID::StringID((re::StringID *)&v66, (const re::DynamicString *)v83);
      if (*(void *)&v83[0] && (BYTE8(v83[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v83[0] + 40))();
      }
      re::StringID::StringID((re::StringID *)&v65, (const re::DynamicString *)v83);
      if (*(void *)&v83[0] && (BYTE8(v83[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v83[0] + 40))();
      }
      re::StringID::StringID((re::StringID *)v64, &v68);
      re::StringID::destroyString((re::StringID *)v64);
      re::StringID::StringID((re::StringID *)v63, &v70);
      v62[0] = 0xA0DBB863F4861A8CLL;
      v62[1] = "IKParametersComponentSolverNode";
      re::internal::RigGraphDefinitionBuilder::addNode((uint64_t)v83, v63, v62);
      re::StringID::destroyString((re::StringID *)v62);
      re::StringID::destroyString((re::StringID *)v63);
      re::StringID::StringID((re::StringID *)&v61, &v67);
      *(void *)&v59.var0 = 0x2789F63FDC13D20;
      v59.var1 = "inHierarchy";
      v60[0] = 0x3C4B6E418F8AFE4ALL;
      v60[1] = "RigHierarchy";
      v58[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v83, &v61, &v59, v58);
      re::StringID::destroyString((re::StringID *)v60);
      re::StringID::destroyString((re::StringID *)&v59);
      re::StringID::destroyString((re::StringID *)&v61);
      re::StringID::StringID((re::StringID *)&v57, &v66);
      *(void *)&v55.var0 = 0x11F4B3FE87F3AF2ALL;
      v55.var1 = "inSolverRootModelSpaceTransform";
      v56[0] = 164778;
      v56[1] = "SRT";
      v54[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v83, &v57, &v55, v54);
      re::StringID::destroyString((re::StringID *)v56);
      re::StringID::destroyString((re::StringID *)&v55);
      re::StringID::destroyString((re::StringID *)&v57);
      *(void *)&v52.var0 = 0x4363292BB5C214F0;
      v52.var1 = "inSolverInstanceName";
      *(void *)&v53.var0 = 0x128749862;
      v53.var1 = "String";
      re::StringID::StringID((re::StringID *)v49, &v70);
      re::StringID::StringID((re::StringID *)&v51, (const re::DynamicString *)v72);
      if (*(void *)&v72[0] && (BYTE8(v72[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v72[0] + 40))();
      }
      re::StringID::StringID((re::StringID *)v107, (const StringID *)(v90 + 32 * *((void *)&v88 + 1) - 32));
      re::StringID::StringID((re::StringID *)&v107[16], &v53);
      re::StringID::StringID((re::StringID *)((char *)&v111 + 2), &v52);
      re::StringID::invalid((re::StringID *)&v113);
      re::StringID::invalid((re::StringID *)&v114);
      re::StringID::StringID((re::StringID *)v72, (const StringID *)v107);
      re::StringID::StringID((re::StringID *)&v72[1], (const StringID *)&v107[16]);
      re::StringID::StringID((re::StringID *)&v72[2], (const StringID *)((char *)&v111 + 2));
      re::StringID::StringID((re::StringID *)&v73, &v113);
      re::StringID::StringID((re::StringID *)&v74, &v114);
      re::StringID::StringID((re::StringID *)&v75, &v51);
      re::DynamicArray<re::RigGraphInputValue>::add((void *)&v93 + 1, (uint64_t *)v72);
      re::StringID::destroyString((re::StringID *)&v75);
      re::StringID::destroyString((re::StringID *)&v74);
      re::StringID::destroyString((re::StringID *)&v73);
      re::StringID::destroyString((re::StringID *)&v72[2]);
      re::StringID::destroyString((re::StringID *)&v72[1]);
      re::StringID::destroyString((re::StringID *)v72);
      re::StringID::destroyString((re::StringID *)&v114);
      re::StringID::destroyString((re::StringID *)&v113);
      re::StringID::destroyString((re::StringID *)((char *)&v111 + 2));
      re::StringID::destroyString((re::StringID *)&v107[16]);
      re::StringID::destroyString((re::StringID *)v107);
      re::StringID::destroyString((re::StringID *)&v51);
      re::StringID::destroyString((re::StringID *)v49);
      re::StringID::destroyString((re::StringID *)&v53);
      re::StringID::destroyString((re::StringID *)&v52);
      re::StringID::StringID((re::StringID *)&v48, &v65);
      *(void *)&v46.var0 = 0x51075CF812B0B50ELL;
      v46.var1 = "outHierarchy";
      v47[0] = 0x3C4B6E418F8AFE4ALL;
      v47[1] = "RigHierarchy";
      v45[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphOutput(v83, &v48, &v46, v45);
      re::StringID::destroyString((re::StringID *)v47);
      re::StringID::destroyString((re::StringID *)&v46);
      re::StringID::destroyString((re::StringID *)&v48);
      *(void *)&v72[0] = *(void *)&v83[0];
      long long v12 = *(_OWORD *)((char *)v83 + 8);
      *(void *)&v83[0] = 0;
      *((void *)&v83[0] + 1) = "";
      *(_OWORD *)((char *)v72 + 8) = v12;
      memset(&v83[1], 0, 24);
      *(_OWORD *)((char *)&v72[1] + 8) = *(_OWORD *)((char *)&v83[1] + 8);
      ++DWORD2(v83[2]);
      DWORD2(v72[2]) = 1;
      long long v73 = v84;
      long long v74 = v85;
      long long v84 = 0u;
      long long v85 = 0u;
      v76[0] = v87;
      long long v87 = 0u;
      v76[1] = v88;
      long long v88 = 0u;
      ++v86;
      ++v89;
      int v75 = 1;
      int v77 = 1;
      v78[0] = v90;
      v78[1] = v91;
      long long v90 = 0u;
      long long v91 = 0u;
      uint64_t v82 = v96;
      v80[0] = v93;
      long long v93 = 0u;
      v80[1] = v94;
      long long v94 = 0u;
      uint64_t v96 = 0;
      ++v92;
      ++v95;
      int v79 = 1;
      int v81 = 1;
      re::DynamicArray<re::RigGraphDefinition>::add(v39, (uint64_t *)v72);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)v80 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((void *)v78 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v76 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v73 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v72[1]);
      re::StringID::destroyString((re::StringID *)v72);
      re::StringID::StringID((re::StringID *)v72, &v66);
      *(void *)&v72[1] = 0x7A8A31107D1B226;
      *((void *)&v72[1] + 1) = "entity://Transform.transform";
      LODWORD(v72[2]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v38, (uint64_t *)v72);
      re::StringID::destroyString((re::StringID *)&v72[1]);
      re::StringID::destroyString((re::StringID *)v72);
      unint64_t v13 = *((void *)this + 117);
      if (v13)
      {
        uint64_t v14 = *((void *)this + 55);
        if (v14)
        {
          unint64_t v15 = *((void *)this + 52);
          if (*((unsigned char *)this + 952) ? *((void *)this + 52) : *((void *)this + 3))
          {
            unint64_t v11 = 0;
            uint64_t v41 = v14 + 8;
            while (v15 > v11)
            {
              unint64_t v42 = v11;
              uint64_t v17 = re::DataArray<re::MeshModel>::get(v41, *(void *)(*((void *)this + 54) + 8 * v11));
              uint64_t v18 = *(void *)(v17 + 176);
              if (v18)
              {
                uint64_t v19 = *(void *)(v18 + 8);
                if (v19)
                {
                  uint64_t v20 = v17;
                  unint64_t v21 = 0;
                  uint64_t v22 = 504;
                  uint64_t v23 = 4;
                  do
                  {
                    uint64_t v24 = *(void *)(v20 + 176);
                    if (v24 && *(void *)(v24 + 8) > v21) {
                      unint64_t v25 = *(unsigned int *)(*(void *)(v24 + 16) + v23);
                    }
                    else {
                      unint64_t v25 = 0xFFFFFFFFLL;
                    }
                    if (v13 > v25)
                    {
                      v107[0] = 2;
                      re::StringID::StringID((re::StringID *)&v107[8], (const StringID *)v20);
                      unint64_t v26 = *(void *)(v20 + 56);
                      if (v26 <= v21)
                      {
                        uint64_t v71 = 0;
                        long long v73 = 0u;
                        long long v74 = 0u;
                        memset(v72, 0, sizeof(v72));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)uint64_t v100 = 136315906;
                        *(void *)&v100[4] = "operator[]";
                        __int16 v101 = 1024;
                        int v102 = 476;
                        __int16 v103 = 2048;
                        unint64_t v104 = v21;
                        __int16 v105 = 2048;
                        unint64_t v106 = v26;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_49:
                        uint64_t v31 = v36;
                        *(unsigned char *)uint64_t v36 = 1;
                        *(void *)&v83[2] = 0;
                        *(void *)&v83[0] = 0;
                        *(void *)(v36 + 8) = v29;
LABEL_50:
                        *(void *)(v31 + 40) = 0;
                        goto LABEL_55;
                      }
                      re::StringID::StringID((re::StringID *)((char *)&v109 + 4), (const StringID *)(*(void *)(v20 + 64) + v22));
                      uint64_t v27 = (const StringID *)re::MeshAsset::skeletonAtIndex(this, v25);
                      re::StringID::StringID((re::StringID *)&v112, v27);
                      LODWORD(v113.var1) = v10;
                      re::DynamicArray<re::MeshRigGraphIndex>::add(v43, (uint64_t)v107);
                      re::StringID::destroyString((re::StringID *)&v112);
                      re::StringID::destroyString((re::StringID *)((char *)&v109 + 4));
                      re::StringID::destroyString((re::StringID *)&v107[8]);
                    }
                    ++v21;
                    v23 += 72;
                    v22 += 560;
                  }
                  while (v19 != v21);
                }
              }
              unint64_t v11 = v42 + 1;
              unint64_t v15 = *((void *)this + 52);
              if (*((unsigned char *)this + 952)) {
                unint64_t v28 = *((void *)this + 52);
              }
              else {
                unint64_t v28 = *((void *)this + 3);
              }
              if (v11 >= v28) {
                goto LABEL_43;
              }
            }
            *(void *)uint64_t v100 = 0;
            long long v73 = 0u;
            long long v74 = 0u;
            memset(v72, 0, sizeof(v72));
            unint64_t v10 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v107 = 136315906;
            *(void *)&v107[4] = "operator[]";
            *(_WORD *)&v107[12] = 1024;
            *(_DWORD *)&v107[14] = 797;
            __int16 v108 = 2048;
            unint64_t v109 = v11;
            __int16 v110 = 2048;
            unint64_t v111 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_58:
            *(void *)__int16 v107 = 0;
            long long v84 = 0u;
            long long v85 = 0u;
            memset(v83, 0, sizeof(v83));
            unint64_t v35 = v10;
            unint64_t v10 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v72[0]) = 136315906;
            *(void *)((char *)v72 + 4) = "operator[]";
            WORD6(v72[0]) = 1024;
            *(_DWORD *)((char *)v72 + 14) = 476;
            WORD1(v72[1]) = 2048;
            *(void *)((char *)&v72[1] + 4) = v35;
            WORD6(v72[1]) = 2048;
            *(void *)((char *)&v72[1] + 14) = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_59:
            *(void *)__int16 v107 = 0;
            long long v84 = 0u;
            long long v85 = 0u;
            memset(v83, 0, sizeof(v83));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v72[0]) = 136315906;
            *(void *)((char *)v72 + 4) = "operator[]";
            WORD6(v72[0]) = 1024;
            *(_DWORD *)((char *)v72 + 14) = 476;
            WORD1(v72[1]) = 2048;
            *(void *)((char *)&v72[1] + 4) = v10;
            WORD6(v72[1]) = 2048;
            *(void *)((char *)&v72[1] + 14) = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
        }
      }
LABEL_43:
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v93 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((void *)&v90 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v87 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v84 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v83[1]);
      re::StringID::destroyString((re::StringID *)v83);
      re::StringID::destroyString((re::StringID *)&v65);
      re::StringID::destroyString((re::StringID *)&v66);
      re::StringID::destroyString((re::StringID *)&v67);
      re::StringID::destroyString((re::StringID *)&v68);
      re::StringID::destroyString((re::StringID *)v69);
      re::StringID::destroyString((re::StringID *)&v70);
      ++v10;
      a2 = v37;
    }
    while (v10 != v40);
    unsigned int v29 = v97;
    id v30 = v99;
    uint64_t v97 = 0;
    *(void *)&v83[0] = v29;
    if (!v99) {
      goto LABEL_49;
    }
    uint64_t v31 = v36;
    if (v99 == v98)
    {
      *(void *)&v83[2] = (char *)v83 + 8;
      (*(void (**)(void))(v98[0] + 24))();
      uint64_t v33 = *(void *)&v83[0];
      id v30 = *(_OWORD **)&v83[2];
      *(unsigned char *)uint64_t v36 = 1;
      *(void *)&v83[0] = 0;
      *(void *)(v36 + 8) = v33;
      if (!v30) {
        goto LABEL_50;
      }
    }
    else
    {
      StringID v99 = 0;
      *(unsigned char *)uint64_t v36 = 1;
      *(void *)&v83[2] = v30;
      *(void *)&v83[0] = 0;
      *(void *)(v36 + 8) = v29;
    }
    if (v30 == (_OWORD *)((char *)v83 + 8))
    {
      *(void *)(v36 + 40) = v36 + 16;
      (*(void (**)(char *))(*((void *)&v83[0] + 1) + 24))((char *)v83 + 8);
    }
    else
    {
      *(void *)(v36 + 40) = v30;
      *(void *)&v83[2] = 0;
    }
LABEL_55:
    std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v83);
  }
  else
  {
    *(void *)&v83[0] = 0;
    re::internal::makeError("No solver to build execution graph for", 38, (CFErrorRef *)v83);
    uint64_t v32 = *(void *)&v83[0];
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = v32;
  }
  return std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v97);
}

void re::internal::RigGraphDefinitionBuilder::addNode(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  *a2 = 0;
  a2[1] = (uint64_t)"";
  uint64_t v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  *a3 = 0;
  a3[1] = "";
  re::DynamicArray<re::RigGraphNodeDescription>::add((void *)(a1 + 96), v5);
  re::StringID::destroyString((re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v5);
}

void re::internal::RigGraphDefinitionBuilder::addGraphInput(void *a1, const StringID *a2, const StringID *a3, unsigned char *a4)
{
  *(void *)&v27.var0 = 7118140;
  v27.var1 = "this";
  uint64_t v7 = a3 + 1;
  re::StringID::StringID((re::StringID *)&v28, a3 + 1);
  re::StringID::StringID((re::StringID *)&v29, a2);
  re::StringID::invalid((re::StringID *)&v30);
  re::StringID::invalid((re::StringID *)&v31);
  re::StringID::StringID((re::StringID *)&v22, (const StringID *)(a1[16] + 32 * a1[14] - 32));
  re::StringID::StringID((re::StringID *)&v23, v7);
  re::StringID::StringID((re::StringID *)&v24, a3);
  re::StringID::invalid((re::StringID *)&v25);
  re::StringID::invalid((re::StringID *)&v26);
  re::StringID::StringID((re::StringID *)v12, &v27);
  re::StringID::StringID((re::StringID *)v13, &v28);
  re::StringID::StringID((re::StringID *)v14, &v29);
  re::StringID::StringID((re::StringID *)v15, &v30);
  re::StringID::StringID((re::StringID *)v16, &v31);
  re::StringID::StringID((re::StringID *)v17, &v22);
  re::StringID::StringID((re::StringID *)v18, &v23);
  re::StringID::StringID((re::StringID *)v19, &v24);
  re::StringID::StringID((re::StringID *)v20, &v25);
  re::StringID::StringID((re::StringID *)v21, &v26);
  re::DynamicArray<re::RigGraphConnection>::add(a1 + 17, v12);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::StringID((re::StringID *)v12, &v22);
  re::StringID::StringID((re::StringID *)v13, &v23);
  re::StringID::StringID((re::StringID *)v14, &v24);
  re::StringID::StringID((re::StringID *)v15, &v25);
  re::StringID::StringID((re::StringID *)v16, &v26);
  re::StringID::StringID((re::StringID *)v17, a2);
  v11[0] = 0;
  v11[1] = "";
  if (*a4) {
    int v8 = (const StringID *)(a4 + 8);
  }
  else {
    int v8 = (const StringID *)v11;
  }
  re::StringID::StringID((re::StringID *)v18, v8);
  re::DynamicArray<re::RigGraphParameterProxy>::add(a1 + 2, v12);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)&v26);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v23);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)&v31);
  re::StringID::destroyString((re::StringID *)&v30);
  re::StringID::destroyString((re::StringID *)&v29);
  re::StringID::destroyString((re::StringID *)&v28);
  re::StringID::destroyString((re::StringID *)&v27);
}

void re::internal::RigGraphDefinitionBuilder::addGraphOutput(void *a1, const StringID *a2, const StringID *a3, unsigned char *a4)
{
  *(void *)&v27.var0 = 7118140;
  v27.var1 = "this";
  uint64_t v7 = a3 + 1;
  re::StringID::StringID((re::StringID *)&v28, a3 + 1);
  re::StringID::StringID((re::StringID *)&v29, a2);
  re::StringID::invalid((re::StringID *)&v30);
  re::StringID::invalid((re::StringID *)&v31);
  re::StringID::StringID((re::StringID *)&v22, (const StringID *)(a1[16] + 32 * a1[14] - 32));
  re::StringID::StringID((re::StringID *)&v23, v7);
  re::StringID::StringID((re::StringID *)&v24, a3);
  re::StringID::invalid((re::StringID *)&v25);
  re::StringID::invalid((re::StringID *)&v26);
  re::StringID::StringID((re::StringID *)v12, &v22);
  re::StringID::StringID((re::StringID *)v13, &v23);
  re::StringID::StringID((re::StringID *)v14, &v24);
  re::StringID::StringID((re::StringID *)v15, &v25);
  re::StringID::StringID((re::StringID *)v16, &v26);
  re::StringID::StringID((re::StringID *)v17, &v27);
  re::StringID::StringID((re::StringID *)v18, &v28);
  re::StringID::StringID((re::StringID *)v19, &v29);
  re::StringID::StringID((re::StringID *)v20, &v30);
  re::StringID::StringID((re::StringID *)v21, &v31);
  re::DynamicArray<re::RigGraphConnection>::add(a1 + 17, v12);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::StringID((re::StringID *)v12, &v22);
  re::StringID::StringID((re::StringID *)v13, &v23);
  re::StringID::StringID((re::StringID *)v14, &v24);
  re::StringID::StringID((re::StringID *)v15, &v25);
  re::StringID::StringID((re::StringID *)v16, &v26);
  re::StringID::StringID((re::StringID *)v17, a2);
  v11[0] = 0;
  v11[1] = "";
  if (*a4) {
    int v8 = (const StringID *)(a4 + 8);
  }
  else {
    int v8 = (const StringID *)v11;
  }
  re::StringID::StringID((re::StringID *)v18, v8);
  re::DynamicArray<re::RigGraphParameterProxy>::add(a1 + 7, v12);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)&v26);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v23);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)&v31);
  re::StringID::destroyString((re::StringID *)&v30);
  re::StringID::destroyString((re::StringID *)&v29);
  re::StringID::destroyString((re::StringID *)&v28);
  re::StringID::destroyString((re::StringID *)&v27);
}

uint64_t re::DynamicArray<re::RigGraphDefinition>::add(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t result = re::RigGraphDefinition::RigGraphDefinition(*(void *)(a1 + 32) + 216 * v5, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::RigGraphBoundInputParameterData>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(result, v10);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 40 * v5;
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(void *)(v11 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  uint64_t v13 = a2[2];
  *(void *)(v11 + 16) = *(void *)(v11 + 16) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(void *)(v11 + 16) = a2[2] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(void *)(v11 + 24) = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)"";
  *(_DWORD *)(v11 + 32) = *((_DWORD *)a2 + 8);
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::MeshRigGraphIndex>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(result, v10);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  unint64_t v11 = *((void *)v3 + 4) + (v5 << 6);
  *(unsigned char *)unint64_t v11 = *(unsigned char *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(v11 + 8) = *(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(void *)(v11 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(void *)(v11 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = "";
  uint64_t v13 = *(void *)(a2 + 24);
  *(void *)(v11 + 24) = *(void *)(v11 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(void *)(v11 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(void *)(v11 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = "";
  uint64_t v14 = *(void *)(a2 + 40);
  *(void *)(v11 + 40) = *(void *)(v11 + 40) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(void *)(v11 + 40) = *(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(void *)(v11 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = "";
  *(_DWORD *)(v11 + 56) = *(_DWORD *)(a2 + 56);
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RigGraphAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v47);
  v89[0] = 0;
  v89[1] = 0;
  int v90 = 1;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, (re::Allocator *)v47);
  v33[0] = 0;
  v33[1] = 0;
  int v34 = 1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  int v38 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  int v42 = 0;
  uint64_t v46 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  int v45 = 0;
  re::RigGraphCompilation::init((re::RigGraphCompilation *)v33, (re::Allocator *)v47);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = 216 * v3;
    while (1)
    {
      *(_DWORD *)StringID v53 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      *(void *)&v53[4] = 0x7FFFFFFFLL;
      StringID v48 = v47;
      uint64_t v49 = v4;
      uint64_t v50 = v89;
      re::RigGraphDefinitionValidator::validate((re::RigGraphDefinitionValidator *)&v48, (uint64_t)v70);
      if (!LOBYTE(v70[0])) {
        break;
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v51);
      v4 += 216;
      v5 -= 216;
      if (!v5) {
        goto LABEL_5;
      }
    }
    StringID v30 = *re::assetTypesLogObjects(v6);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      if (v72) {
        uint64_t v32 = v73;
      }
      else {
        uint64_t v32 = (char *)&v72 + 1;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v88 = v32;
      _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Could not validate RigGraphAssetDefinition: Error = %s", buf, 0xCu);
    }
    if (!LOBYTE(v70[0]) && v71 && (v72 & 1) != 0) {
      (*(void (**)(void))(*(void *)v71 + 40))();
    }
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v51);
    uint64_t v8 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v7 = *(re::Allocator **)a2;
    uint64_t v8 = 1;
    if (*(void *)a2)
    {
      long long v73 = 0;
      uint64_t v72 = 0;
      int v74 = 1;
      uint64_t v77 = 0;
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      int v78 = 0;
      uint64_t v81 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v86 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      int v82 = 0;
      int v85 = 0;
      v70[2] = 0;
      v70[0] = v7;
      v70[1] = 0;
      LOBYTE(v71) = 0;
      re::RigGraphCompilation::init((re::RigGraphCompilation *)&v72, v7);
      *(void *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = *(void *)a2;
      re::DynamicArray<re::RigGraphNode>::setCapacity((void *)(a2 + 120), 0);
      ++*(_DWORD *)(a2 + 144);
      if (*(void *)(a2 + 16))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          unint64_t v11 = (_anonymous_namespace_ *)re::RigGraphSystem::buildFromDefinition(*(void *)a2, (void *)(*(void *)(a2 + 32) + v9), (uint64_t)&v48);
          unint64_t v12 = *(void *)(a2 + 128);
          unint64_t v13 = *(void *)(a2 + 136);
          if (v13 >= v12)
          {
            unint64_t v14 = v13 + 1;
            if (v12 < v13 + 1)
            {
              if (*(void *)(a2 + 120))
              {
                uint64_t v15 = 2 * v12;
                BOOL v16 = v12 == 0;
                unint64_t v17 = 8;
                if (!v16) {
                  unint64_t v17 = v15;
                }
                if (v17 <= v14) {
                  unint64_t v18 = v14;
                }
                else {
                  unint64_t v18 = v17;
                }
                re::DynamicArray<re::RigGraphNode>::setCapacity((void *)(a2 + 120), v18);
              }
              else
              {
                re::DynamicArray<re::RigGraphNode>::setCapacity((void *)(a2 + 120), v14);
                ++*(_DWORD *)(a2 + 144);
              }
            }
            unint64_t v13 = *(void *)(a2 + 136);
          }
          uint64_t v19 = *(void *)(a2 + 152) + 200 * v13;
          *(void *)(v19 + 32) = 0;
          *(void *)(v19 + 8) = 0;
          *(void *)(v19 + 16) = 0;
          *(void *)uint64_t v19 = 0;
          *(_DWORD *)(v19 + 24) = 0;
          *(void *)uint64_t v19 = v48;
          StringID v48 = 0;
          *(void *)(v19 + 8) = v49;
          uint64_t v49 = 0;
          uint64_t v20 = *(void **)(v19 + 16);
          *(void *)(v19 + 16) = v50;
          uint64_t v50 = v20;
          uint64_t v21 = *(void *)(v19 + 32);
          *(void *)(v19 + 32) = *((void *)&v51 + 1);
          *((void *)&v51 + 1) = v21;
          LODWORD(v51) = v51 + 1;
          ++*(_DWORD *)(v19 + 24);
          *(void *)(v19 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
          *(void *)(v19 + 48) = 0;
          *(void *)(v19 + 56) = 0;
          *(void *)(v19 + 40) = 0;
          *(_DWORD *)(v19 + 64) = 0;
          *(void *)(v19 + 40) = v52;
          *(void *)&long long v52 = 0;
          *(void *)(v19 + 48) = *((void *)&v52 + 1);
          *((void *)&v52 + 1) = 0;
          uint64_t v22 = *(void *)(v19 + 56);
          *(void *)(v19 + 56) = *(void *)v53;
          *(void *)StringID v53 = v22;
          uint64_t v23 = *(void *)(v19 + 72);
          *(void *)(v19 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v54;
          uint64_t v54 = v23;
          ++*(_DWORD *)&v53[8];
          ++*(_DWORD *)(v19 + 64);
          *(void *)(v19 + 112) = 0;
          *(void *)(v19 + 88) = 0;
          *(void *)(v19 + 96) = 0;
          *(void *)(v19 + 80) = 0;
          *(_DWORD *)(v19 + 104) = 0;
          *(void *)(v19 + 80) = v55;
          uint64_t v55 = 0;
          *(void *)(v19 + 88) = v56;
          uint64_t v56 = 0;
          uint64_t v24 = *(void *)(v19 + 96);
          *(void *)(v19 + 96) = v57;
          uint64_t v57 = v24;
          uint64_t v25 = *(void *)(v19 + 112);
          *(void *)(v19 + 112) = v59;
          uint64_t v59 = v25;
          ++v58;
          ++*(_DWORD *)(v19 + 104);
          *(void *)(v19 + 152) = 0;
          *(void *)(v19 + 128) = 0;
          *(void *)(v19 + 136) = 0;
          *(void *)(v19 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
          *(_DWORD *)(v19 + 144) = 0;
          *(void *)(v19 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = v60;
          uint64_t v60 = 0;
          *(void *)(v19 + 128) = v61;
          uint64_t v61 = 0;
          uint64_t v26 = *(void *)(v19 + 136);
          *(void *)(v19 + 136) = v62;
          uint64_t v62 = v26;
          uint64_t v27 = *(void *)(v19 + 152);
          *(void *)(v19 + 152) = v64;
          uint64_t v64 = v27;
          ++v63;
          ++*(_DWORD *)(v19 + 144);
          *(void *)(v19 + 192) = 0;
          *(void *)(v19 + 168) = 0;
          *(void *)(v19 + 176) = 0;
          *(void *)(v19 + 160) = 0;
          *(_DWORD *)(v19 + 184) = 0;
          *(void *)(v19 + 160) = v65;
          uint64_t v65 = 0;
          *(void *)(v19 + 168) = v66;
          uint64_t v66 = 0;
          uint64_t v28 = *(void *)(v19 + 176);
          *(void *)(v19 + 176) = v67;
          uint64_t v67 = v28;
          uint64_t v29 = *(void *)(v19 + 192);
          *(void *)(v19 + 192) = v69;
          uint64_t v69 = v29;
          ++v68;
          ++*(_DWORD *)(v19 + 184);
          ++*(void *)(a2 + 136);
          ++*(_DWORD *)(a2 + 144);
          re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)&v65);
          re::DynamicArray<re::StringID>::deinit((uint64_t)&v60);
          re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)&v55);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v52);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v48);
          ++v10;
          v9 += 216;
        }
        while (v10 < *(void *)(a2 + 16));
      }
      re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v72);
      uint64_t v8 = 1;
    }
  }
  re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)v33);
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void, uint64_t))(*(void *)v89[0] + 40))(v89[0], v92);
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v47);
  return v8;
}

re *re::RigGraphAssetLoader::unloadAsset(re::RigGraphAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::RigGraphAsset>((re *)"unloadAsset", 678, a2);
}

BOOL re::RigGraphAssetLoader::isSupportedSourceExtension(re::RigGraphAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reriggraph") == 0;
}

uint64_t re::RigGraphAssetLoader::introspectionType(re::RigGraphAssetLoader *this)
{
  uint64_t v1 = &qword_268772000;
  {
    uint64_t v1 = &qword_268772000;
    if (v3)
    {
      re::introspect<re::RigGraphAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RigGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigGraphAsset>, 0);
      uint64_t v1 = &qword_268772000;
    }
  }
  return v1[88];
}

void *re::allocInfo_RigGraphBoundInputParameterDataV1(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B9A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7BBD8, "RigGraphBoundInputParameterDataV1");
    __cxa_guard_release(&qword_26AF7B9A8);
  }
  return &unk_26AF7BBD8;
}

void re::initInfo_RigGraphBoundInputParameterDataV1(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x43DF5FA6F6F04B48;
  v21[1] = "RigGraphBoundInputParameterDataV1";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B9B0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7BA90 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::introspect_RigGraphBindNodeType(v9, v10);
      uint64_t v11 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "bindNodeType";
      *(void *)(v11 + 16) = &qword_26AF7BB90;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7BA98 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::IntrospectionInfo<re::StringID>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "bindingPath";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7BAA0 = v15;
      BOOL v16 = re::introspectionAllocator((re *)v15);
      unint64_t v18 = re::introspect_uint32_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "rigGraphIndex";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x2800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF7BAA8 = v19;
      __cxa_guard_release(&qword_26AF7B9B0);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7BA90;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RigGraphBoundInputParameterDataV1>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RigGraphBoundInputParameterDataV1>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RigGraphBoundInputParameterDataV1>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RigGraphBoundInputParameterDataV1>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

re::StringID *re::internal::defaultConstruct<re::RigGraphBoundInputParameterDataV1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::invalid((re::StringID *)a3);
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = re::StringID::invalid((re::StringID *)(a3 + 24));
  *(_DWORD *)(a3 + 40) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphBoundInputParameterDataV1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphBoundInputParameterDataV1>(uint64_t a1)
{
  re::StringID::invalid((re::StringID *)a1);
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = re::StringID::invalid((re::StringID *)(a1 + 24));
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphBoundInputParameterDataV1>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_MeshRigGraphIndex(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B9C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7BC50, "MeshRigGraphIndex");
    __cxa_guard_release(&qword_26AF7B9C0);
  }
  return &unk_26AF7BC50;
}

void re::initInfo_MeshRigGraphIndex(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x26A8B32DA977788ELL;
  v17[1] = "MeshRigGraphIndex";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B9C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "meshIdentifier";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7BA48 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      unint64_t v10 = re::IntrospectionInfo<re::StringID>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "skeletonName";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7BA50 = v11;
      unint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "rigGraphIndex";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF7BA58 = v15;
      __cxa_guard_release(&qword_26AF7B9C8);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF7BA48;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshRigGraphIndex>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshRigGraphIndex>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshRigGraphIndex>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshRigGraphIndex>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::MeshRigGraphIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = "";
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = "";
  *(_DWORD *)(a3 + 56) = 0;
}

void re::internal::defaultDestruct<re::MeshRigGraphIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshRigGraphIndex>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = "";
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = "";
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshRigGraphIndex>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void re::introspect_RigGraphBindNodeType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF7B9D8);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Scene";
      qword_26AF7BA60 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Entity";
      qword_26AF7BA68 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "EcsService";
      qword_26AF7BA70 = v30;
      __cxa_guard_release(&qword_26AF7B9D8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B9E0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF7BB90, "RigGraphBindNodeType", 1, 1, 1, 1);
    qword_26AF7BB90 = (uint64_t)&unk_26E715E00;
    qword_26AF7BBD0 = (uint64_t)&re::introspect_RigGraphBindNodeType(BOOL)::enumTable;
    dword_26AF7BBA0 = 9;
    __cxa_guard_release(&qword_26AF7B9E0);
  }
  if ((_MergedGlobals_90 & 1) == 0)
  {
    _MergedGlobals_90 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF7BB90, a2);
    uint64_t v32 = 0xA871E7EADD22D22ELL;
    uint64_t v33 = "RigGraphBindNodeType";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF7BBD0;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF7BBB0 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RigGraphBindNodeType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_RigGraphBoundInputParameterData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7B9E8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7BCC8, "RigGraphBoundInputParameterData");
    __cxa_guard_release(&qword_26AF7B9E8);
  }
  return &unk_26AF7BCC8;
}

void re::initInfo_RigGraphBoundInputParameterData(re *this, re::IntrospectionBase *a2)
{
  v23[0] = 0x24087D919F4A9292;
  v23[1] = "RigGraphBoundInputParameterData";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7B9F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7B9F0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7BAB0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "bindingPath";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7BAB8 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_uint32_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "rigGraphIndex";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7BAC0 = v16;
      unint64_t v17 = (re *)re::introspectionAllocator((re *)v16);
      uint64_t v18 = v17;
      char v19 = (re *)qword_26AF7B9B8;
      if (!qword_26AF7B9B8)
      {
        char v19 = (re *)re::allocInfo_RigGraphBoundInputParameterDataV1(v17);
        qword_26AF7B9B8 = (uint64_t)v19;
        re::initInfo_RigGraphBoundInputParameterDataV1(v19, v20);
      }
      uint64_t v21 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 64, 8);
      *(_DWORD *)uint64_t v21 = 6;
      *(void *)(v21 + 8) = 2;
      *(void *)(v21 + 16) = v19;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = re::rigGraphBoundInputParameterDataUpgradeV1ToV2;
      *(unsigned char *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(_DWORD *)(v21 + 56) = 0;
      qword_26AF7BAC8 = v21;
      __cxa_guard_release(&qword_26AF7B9F0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7BAB0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RigGraphBoundInputParameterData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RigGraphBoundInputParameterData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RigGraphBoundInputParameterData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RigGraphBoundInputParameterData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

uint64_t re::rigGraphBoundInputParameterDataUpgradeV1ToV2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 32);
  re::DynamicString::find((re::DynamicString *)&v19, "scene://", 8, 0, (uint64_t)v22);
  if (!LOBYTE(v22[0]))
  {
    re::DynamicString::find((re::DynamicString *)&v19, "entity://", 9, 0, (uint64_t)&v17);
    if (!(_BYTE)v17)
    {
      re::DynamicString::find((re::DynamicString *)&v19, "service://", 10, 0, (uint64_t)v16);
      if (!v16[0])
      {
        unint64_t v6 = *(char *)(a2 + 16);
        if (v6 <= 2)
        {
          uint64_t v7 = off_264BE2A40[v6];
          size_t v8 = strlen(v7);
          re::DynamicString::insert((re::DynamicString *)&v19, 0, v7, v8);
        }
      }
    }
  }
  uint64_t v9 = re::StringID::operator=((unint64_t *)a3, (uint64_t *)a2);
  if (v20) {
    uint64_t v10 = *(const char **)&v21[7];
  }
  else {
    uint64_t v10 = v21;
  }
  uint64_t v17 = 0;
  uint64_t v18 = "";
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = "";
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v12;
  v22[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v22[1] = v14;
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)&v17);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 40);
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  return 1;
}

re::StringID *re::internal::defaultConstruct<re::RigGraphBoundInputParameterData>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  re::StringID::invalid((re::StringID *)a3);
  uint64_t result = re::StringID::invalid((re::StringID *)(a3 + 4));
  a3[8] = 0;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphBoundInputParameterData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphBoundInputParameterData>(_DWORD *a1)
{
  re::StringID::invalid((re::StringID *)a1);
  uint64_t result = re::StringID::invalid((re::StringID *)(a1 + 4));
  a1[8] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphBoundInputParameterData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_RigGraphAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BA00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7BD40, "RigGraphAssetData");
    __cxa_guard_release(&qword_26AF7BA00);
  }
  return &unk_26AF7BD40;
}

void re::initInfo_RigGraphAssetData(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0xFBB5838EDEC9EC38;
  v12[1] = "RigGraphAssetData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7BA08);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphDefinition>>::get();
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "rigGraphDefinitions";
      *(void *)(v6 + 16) = &qword_26AF7BAD0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF7BA78 = v6;
      uint64_t v7 = (re *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::DynamicArray<re::MeshRigGraphIndex>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "meshRigGraphs";
      *(void *)(v8 + 16) = &qword_26AF7BB10;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x2800000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7BA80 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphBoundInputParameterData>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "boundInputParameters";
      *(void *)(v10 + 16) = &qword_26AF7BB50;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x5000000003;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF7BA88 = v10;
      __cxa_guard_release(&qword_26AF7BA08);
    }
  }
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF7BA78;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RigGraphAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RigGraphAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RigGraphAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RigGraphAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphDefinition>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BA30))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7BAD0);
    qword_26AF7BAD0 = (uint64_t)&unk_26E6D7550;
    __cxa_guard_release(&qword_26AF7BA30);
  }
  if ((byte_26AF7B9A1 & 1) == 0)
  {
    uint64_t v0 = re::introspect_RigGraphDefinition((re::IntrospectionBase **)1);
    if ((byte_26AF7B9A1 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF7B9A1 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7BAD0, 0);
      qword_26AF7BAE0 = 0x2800000003;
      dword_26AF7BAE8 = v2;
      word_26AF7BAEC = 0;
      *(void *)&xmmword_26AF7BAF0 = 0;
      *((void *)&xmmword_26AF7BAF0 + 1) = 0xFFFFFFFFLL;
      qword_26AF7BB00 = v1;
      unk_26AF7BB08 = 0;
      qword_26AF7BAD0 = (uint64_t)&unk_26E6D7550;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF7BAD0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF7BAF0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshRigGraphIndex>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA38, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7BA38);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7BB10);
      qword_26AF7BB10 = (uint64_t)&unk_26E6D75E8;
      __cxa_guard_release(&qword_26AF7BA38);
    }
  }
  if ((byte_26AF7B9A2 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7B9D0;
    if (qword_26AF7B9D0
      || (uint64_t v1 = re::allocInfo_MeshRigGraphIndex(a1),
          qword_26AF7B9D0 = (uint64_t)v1,
          re::initInfo_MeshRigGraphIndex((re *)v1, v2),
          (byte_26AF7B9A2 & 1) == 0))
    {
      byte_26AF7B9A2 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7BB10, 0);
      qword_26AF7BB20 = 0x2800000003;
      dword_26AF7BB28 = v3;
      word_26AF7BB2C = 0;
      *(void *)&xmmword_26AF7BB30 = 0;
      *((void *)&xmmword_26AF7BB30 + 1) = 0xFFFFFFFFLL;
      qword_26AF7BB40 = (uint64_t)v1;
      unk_26AF7BB48 = 0;
      qword_26AF7BB10 = (uint64_t)&unk_26E6D75E8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7BB10, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7BB30 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphBoundInputParameterData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA40, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7BA40);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7BB50);
      qword_26AF7BB50 = (uint64_t)&unk_26E6D7680;
      __cxa_guard_release(&qword_26AF7BA40);
    }
  }
  if ((byte_26AF7B9A3 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF7B9F8;
    if (qword_26AF7B9F8
      || (uint64_t v1 = re::allocInfo_RigGraphBoundInputParameterData(a1),
          qword_26AF7B9F8 = (uint64_t)v1,
          re::initInfo_RigGraphBoundInputParameterData((re *)v1, v2),
          (byte_26AF7B9A3 & 1) == 0))
    {
      byte_26AF7B9A3 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7BB50, 0);
      qword_26AF7BB60 = 0x2800000003;
      dword_26AF7BB68 = v3;
      word_26AF7BB6C = 0;
      *(void *)&xmmword_26AF7BB70 = 0;
      *((void *)&xmmword_26AF7BB70 + 1) = 0xFFFFFFFFLL;
      qword_26AF7BB80 = (uint64_t)v1;
      unk_26AF7BB88 = 0;
      qword_26AF7BB50 = (uint64_t)&unk_26E6D7680;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7BB50, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7BB70 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::RigGraphAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RigGraphAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a3 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RigGraphAssetData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RigGraphAssetData>(uint64_t a1)
{
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a1 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a1);
}

void *re::allocInfo_RigGraphAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BA18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7BDB8, "RigGraphAsset");
    __cxa_guard_release(&qword_26AF7BA18);
  }
  return &unk_26AF7BDB8;
}

void re::initInfo_RigGraphAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x4D22379AE5FD16A4;
  v11[1] = "RigGraphAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BA28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7BA28);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF7BA10;
      if (!qword_26AF7BA10)
      {
        uint64_t v7 = (re *)re::allocInfo_RigGraphAssetData(v5);
        qword_26AF7BA10 = (uint64_t)v7;
        re::initInfo_RigGraphAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "rigGraphAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF7BA20 = v9;
      __cxa_guard_release(&qword_26AF7BA28);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7BA20;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RigGraphAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RigGraphAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RigGraphAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RigGraphAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::RigGraphAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(void *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RigGraphAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigGraphNode>::deinit(a3 + 120);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a3 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RigGraphAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RigGraphAsset>(uint64_t a1)
{
  re::DynamicArray<re::RigGraphNode>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a1 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a1);
}

uint64_t re::introspect_RigGraphAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigGraphAsset>, this);
}

void re::RigGraphAssetLoader::~RigGraphAssetLoader(re::RigGraphAssetLoader *this)
{
}

void *re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        long long v10 = &v8[5 * v9];
        long long v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          unint64_t *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *uint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          LOBYTE(v12) = v8[2];
          void v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          void v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = (uint64_t)"";
          void v8[2] = 0;
          *((_DWORD *)v11 + 8) = *((_DWORD *)v8 + 8);
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 5;
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

size_t re::internal::RetargetRigGraphAssetBuilder::appendParentNamesAndIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2 + 24;
  uint64_t v6 = a3 + 24;
  do
  {
    uint64_t v7 = *(const char **)(a1 + 280);
    size_t result = strlen(v7);
    size_t v9 = result;
    unint64_t v10 = *(void *)(a2 + 40);
    unint64_t v11 = *(void *)(a2 + 8);
    if (5 * v11 < v10 + 1)
    {
      size_t result = (size_t)re::BucketArray<re::StringSlice,5ul>::setBucketsCapacity((void *)a2, (v10 + 5) / 5);
      unint64_t v11 = *(void *)(a2 + 8);
    }
    if (v11 <= v10 / 5)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = *(void *)(a2 + 32);
    if (*(_DWORD *)(a2 + 16)) {
      uint64_t v12 = v20;
    }
    uint64_t v13 = *(void *)(v12 + 8 * (v10 / 5));
    ++*(void *)(a2 + 40);
    ++*(_DWORD *)(a2 + 48);
    uint64_t v14 = (const char **)(v13 + 16 * (v10 % 5));
    *uint64_t v14 = v7;
    v14[1] = (const char *)v9;
    uint64_t v15 = *(void *)(a1 + 296);
    unint64_t v16 = *(void *)(a3 + 40);
    unint64_t v17 = *(void *)(a3 + 8);
    if (5 * v17 < v16 + 1)
    {
      size_t result = (size_t)re::BucketArray<unsigned long long,5ul>::setBucketsCapacity((uint64_t *)a3, (v16 + 5) / 5);
      unint64_t v17 = *(void *)(a3 + 8);
    }
    if (v17 <= v16 / 5) {
      goto LABEL_16;
    }
    uint64_t v18 = *(void *)(a3 + 32);
    if (*(_DWORD *)(a3 + 16)) {
      uint64_t v18 = v6;
    }
    uint64_t v19 = *(void *)(v18 + 8 * (v16 / 5));
    ++*(void *)(a3 + 40);
    ++*(_DWORD *)(a3 + 48);
    *(void *)(v19 + 8 * (v16 % 5)) = v15;
    a1 = *(void *)(a1 + 24);
  }
  while (a1 && (*(unsigned char *)(a1 + 288) & 0x80) == 0);
  return result;
}

unint64_t re::BucketArray<unsigned long long,5ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 / 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 / 5)) + 8 * (a2 % 5);
}

uint64_t re::BucketArray<re::StringSlice,5ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::StringSlice,5ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::StringSlice,5ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (5 * a2 > result[5])
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 80, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<unsigned long long,5ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<unsigned long long,5ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned long long,5ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (5 * a2 > result[5])
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 40, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketSlice<re::StringSlice,5ul>::operator[](void *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, a2, v2);
    _os_crash();
    __break(1u);
  }
  else
  {
    unint64_t v3 = a2 / 5;
    unint64_t v4 = a1[1];
    if (v4 > a2 / 5) {
      return *(void *)(*a1 + 8 * v3) + 16 * (a2 % 5);
    }
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v4);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::BucketArray<unsigned long long,5ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<unsigned long long,5ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::StringSlice,5ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      if (*(void *)(a1 + 8) <= i / 5)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  else if (!*(void *)(a1 + 8))
  {
    goto LABEL_8;
  }
  do
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  while (*(void *)(a1 + 8));
LABEL_8:
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if ((v5 & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 40))(result, *(void *)(a1 + 32));
      int v5 = *(_DWORD *)(a1 + 16);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = (v5 | 1) + 2;
  }
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::internal::RigGraphDefinitionBuilder::RigGraphDefinitionBuilder(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  re::StringID::invalid((re::StringID *)a1);
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  uint64_t v6 = re::StringID::operator=((unint64_t *)a1, a3);
  v6[12] = a2;
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity(v6 + 12, 0);
  ++*(_DWORD *)(a1 + 120);
  *(void *)(a1 + 136) = a2;
  re::DynamicArray<re::RigGraphConnection>::setCapacity((void *)(a1 + 136), 0);
  ++*(_DWORD *)(a1 + 160);
  *(void *)(a1 + 16) = a2;
  re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((void *)(a1 + 16), 0);
  ++*(_DWORD *)(a1 + 40);
  *(void *)(a1 + 56) = a2;
  re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((void *)(a1 + 56), 0);
  ++*(_DWORD *)(a1 + 80);
  return a1;
}

uint64_t re::RigGraphDefinition::RigGraphDefinition(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t result = *a2 & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(void *)(result + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  uint64_t v3 = a2[3];
  *(void *)(result + 16) = a2[2];
  *(void *)(result + 24) = v3;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v4 = *(void *)(result + 32);
  *(void *)(result + 32) = a2[4];
  a2[4] = v4;
  uint64_t v5 = *(void *)(result + 48);
  *(void *)(result + 48) = a2[6];
  a2[6] = v5;
  ++*((_DWORD *)a2 + 10);
  ++*(_DWORD *)(result + 40);
  *(void *)(result + 88) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = 0;
  uint64_t v6 = a2[8];
  *(void *)(result + 56) = a2[7];
  *(void *)(result + 64) = v6;
  a2[7] = 0;
  a2[8] = 0;
  uint64_t v7 = *(void *)(result + 72);
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = a2[9];
  a2[9] = v7;
  uint64_t v8 = *(void *)(result + 88);
  *(void *)(result + 88) = a2[11];
  a2[11] = v8;
  ++*((_DWORD *)a2 + 20);
  ++*(_DWORD *)(result + 80);
  *(void *)(result + 128) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 96) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  uint64_t v9 = a2[13];
  *(void *)(result + 96) = a2[12];
  *(void *)(result + 104) = v9;
  a2[12] = 0;
  a2[13] = 0;
  uint64_t v10 = *(void *)(result + 112);
  *(void *)(result + 112) = a2[14];
  a2[14] = v10;
  uint64_t v11 = *(void *)(result + 128);
  *(void *)(result + 128) = a2[16];
  a2[16] = v11;
  ++*((_DWORD *)a2 + 30);
  ++*(_DWORD *)(result + 120);
  *(void *)(result + 168) = 0;
  *(void *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(void *)(result + 136) = 0;
  *(_DWORD *)(result + 160) = 0;
  uint64_t v12 = a2[18];
  *(void *)(result + 136) = a2[17];
  *(void *)(result + 144) = v12;
  a2[17] = 0;
  a2[18] = 0;
  uint64_t v13 = *(void *)(result + 152);
  *(void *)(result + 152) = a2[19];
  a2[19] = v13;
  uint64_t v14 = *(void *)(result + 168);
  *(void *)(result + 168) = a2[21];
  a2[21] = v14;
  ++*((_DWORD *)a2 + 40);
  ++*(_DWORD *)(result + 160);
  *(void *)(result + 208) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 176) = 0;
  *(_DWORD *)(result + 200) = 0;
  uint64_t v15 = a2[23];
  *(void *)(result + 176) = a2[22];
  *(void *)(result + 184) = v15;
  a2[22] = 0;
  a2[23] = 0;
  uint64_t v16 = *(void *)(result + 192);
  *(void *)(result + 192) = a2[24];
  a2[24] = v16;
  uint64_t v17 = *(void *)(result + 208);
  *(void *)(result + 208) = a2[26];
  a2[26] = v17;
  ++*((_DWORD *)a2 + 50);
  ++*(_DWORD *)(result + 200);
  return result;
}

void *re::DynamicArray<re::RigGraphDefinition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RigGraphDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xD8uLL))
        {
          uint64_t v2 = 216 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 216 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 216, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 216 * v9;
        do
        {
          re::RigGraphDefinition::RigGraphDefinition((uint64_t)&v7[v10 / 8], (uint64_t *)(v8 + v10));
          re::DynamicArray<re::RigGraphInputValue>::deinit(v8 + v10 + 176);
          re::DynamicArray<re::RigGraphConnection>::deinit((void *)(v8 + v10 + 136));
          re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(v8 + v10 + 96);
          re::DynamicArray<re::RigGraphParameterProxy>::deinit(v8 + v10 + 56);
          re::DynamicArray<re::RigGraphParameterProxy>::deinit(v8 + v10 + 16);
          re::StringID::destroyString((re::StringID *)(v8 + v10));
          v10 += 216;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 6);
        uint64_t v11 = v7;
        do
        {
          *(unsigned char *)uint64_t v11 = *(unsigned char *)v8;
          uint64_t v13 = (re::StringID *)(v8 + 8);
          char v12 = *(void *)(v8 + 8);
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | *(void *)(v8 + 8) & 1;
          v11[1] = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          void v11[2] = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = "";
          *(void *)(v8 + 8) = 0;
          uint64_t v15 = (re::StringID *)(v8 + 24);
          char v14 = *(void *)(v8 + 24);
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | *(void *)(v8 + 24) & 1;
          v11[3] = *(void *)(v8 + 24) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          v11[4] = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = "";
          *(void *)(v8 + 24) = 0;
          uint64_t v17 = *(void *)(v8 + 40);
          uint64_t v16 = v8 + 40;
          void v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          void v11[5] = *(void *)v16 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[6] = *(void *)(v16 + 8);
          *(void *)uint64_t v16 = 0;
          *(void *)(v16 + 8) = "";
          *((_DWORD *)v11 + 14) = *(_DWORD *)(v16 + 16);
          re::StringID::destroyString((re::StringID *)v16);
          re::StringID::destroyString(v15);
          re::StringID::destroyString(v13);
          uint64_t v8 = v16 + 24;
          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::~__func()
{
}

void *std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E6D7450;
  return result;
}

void std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D7450;
}

re *std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::RigGraphAsset>((re *)"operator()", 374, *a2);
}

uint64_t std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E6D74D0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6D74D0;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::RigGraphAsset>((re *)"operator()", 36, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

void *re::DynamicArray<re::RigGraphNode>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RigGraphNode>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC8uLL))
        {
          uint64_t v2 = 200 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 200 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 200 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::RigGraphNode::RigGraphNode(v11, v8);
          re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v8 + 160);
          re::DynamicArray<re::StringID>::deinit(v8 + 120);
          re::DynamicArray<re::RigGraphNodeChild>::deinit(v8 + 80);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(v8 + 40);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(v8);
          v8 += 200;
          v11 += 200;
          v10 -= 200;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RigGraphDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RigGraphDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RigGraphDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigGraphDefinition>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RigGraphDefinition>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphDefinition>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v19 = 0;
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  long long v16 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  long long v11 = 0uLL;
  DWORD2(v12) = 0;
  *(void *)&long long v12 = 0;
  uint64_t v19 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  LODWORD(v15[0]) = 0;
  memset((char *)v15 + 8, 0, 36);
  long long v16 = 0u;
  long long v17 = 0u;
  memset((char *)v18 + 8, 0, 36);
  LODWORD(v18[0]) = 0;
  re::DynamicArray<re::RigGraphDefinition>::add(a4, (uint64_t *)&v10);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v18[1]);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)&v16 + 1);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v15[1]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v13 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  uint64_t v8 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 216 * *(void *)(a4 + 16) - 216);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 216 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 216 * a3;
}

void re::DynamicArray<re::RigGraphDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 216 * a2;
    unint64_t v9 = a2;
    do
    {
      long long v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)v10 + 176);
      re::DynamicArray<re::RigGraphConnection>::deinit((void *)v10 + 17);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v10 + 96);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v10 + 56);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v10 + 16);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 216;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 216 * v4 + 208;
      do
      {
        uint64_t v7 = (void *)(*(void *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)(v7 - 26));
        *(v7 - 24) = 0;
        *(v7 - 23) = 0;
        *((_DWORD *)v7 - 42) = 0;
        *(v7 - 22) = 0;
        *uint64_t v7 = 0;
        *((_OWORD *)v7 - 10) = 0u;
        *((_OWORD *)v7 - 9) = 0u;
        *((_DWORD *)v7 - 32) = 0;
        *(_OWORD *)(v7 - 15) = 0u;
        *(_OWORD *)(v7 - 13) = 0u;
        *((_DWORD *)v7 - 22) = 0;
        *((_OWORD *)v7 - 5) = 0u;
        *((_OWORD *)v7 - 4) = 0u;
        *((_DWORD *)v7 - 12) = 0;
        *(_OWORD *)(v7 - 5) = 0u;
        *(_OWORD *)(v7 - 3) = 0u;
        v6 += 216;
        *((_DWORD *)v7 - 2) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 216 * v8;
      do
      {
        re::DynamicArray<re::RigGraphInputValue>::deinit(v10 + v9 + 176);
        re::DynamicArray<re::RigGraphConnection>::deinit((void *)(v10 + v9 + 136));
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(v10 + v9 + 96);
        re::DynamicArray<re::RigGraphParameterProxy>::deinit(v10 + v9 + 56);
        re::DynamicArray<re::RigGraphParameterProxy>::deinit(v10 + v9 + 16);
        re::StringID::destroyString((re::StringID *)(v10 + v9));
        v9 += 216;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphDefinition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RigGraphDefinition>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13)
    {
      long long v14 = *(char **)(a1 + 32);
      uint64_t v15 = 216 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 216;
        v15 -= 216;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 216 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 216 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshRigGraphIndex>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  v13[0] = 0;
  void v13[2] = 0;
  long long v10 = 0u;
  v12[0] = 0;
  uint64_t v11 = "";
  v12[1] = "";
  v13[1] = "";
  re::DynamicArray<re::MeshRigGraphIndex>::add(a4, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)((char *)&v10 + 8));
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)a4 + 4) + (*((void *)a4 + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

void re::DynamicArray<re::MeshRigGraphIndex>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = (a2 << 6) | 0x28;
    unint64_t v9 = a2;
    do
    {
      long long v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
      ++v9;
      v8 += 64;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = (v4 << 6) | 0x38;
      do
      {
        uint64_t v7 = (_DWORD *)(*(void *)(a1 + 32) + v6);
        *((unsigned char *)v7 - 56) = 0;
        *((void *)v7 - 6) = 0;
        *((void *)v7 - 5) = "";
        *((void *)v7 - 4) = 0;
        *((void *)v7 - 3) = "";
        *((void *)v7 - 2) = 0;
        *((void *)v7 - 1) = "";
        *uint64_t v7 = 0;
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      long long v10 = (re::StringID *)(*(void *)(a1 + 32) + 40);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
        long long v10 = (re::StringID *)((char *)v10 + 64);
        v9 -= 64;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = v12 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 6);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::RigGraphBoundInputParameterData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  re::StringID::invalid((re::StringID *)&v11);
  LODWORD(v12) = 0;
  re::DynamicArray<re::RigGraphBoundInputParameterData>::add(a4, (uint64_t *)&v10);
  re::StringID::destroyString((re::StringID *)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 40 * *((void *)a4 + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::RigGraphBoundInputParameterData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 40;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = (_DWORD *)(*(void *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)v7);
        re::StringID::invalid((re::StringID *)(v7 + 4));
        v7[8] = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 40 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 40;
        v10 -= 40;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 40 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::MaterialDefinitionAsset::~MaterialDefinitionAsset(re::MaterialDefinitionAsset *this)
{
  *(void *)this = &unk_26E6D7880;
  uint64_t v2 = (re::MaterialDefinitionFile *)*((void *)this + 278);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    re::MaterialDefinitionFile::~MaterialDefinitionFile(v2);
    (*(void (**)(uint64_t, re::MaterialDefinitionFile *))(*(void *)v3 + 40))(v3, v2);
  }
  re::FixedArray<re::DynamicString>::deinit((void *)this + 308);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 305);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 302);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 299);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 296);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 290);
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 284);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2232);
  re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionAsset *)((char *)this + 776));
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionAsset *)((char *)this + 752));
  uint64_t v4 = *((void *)this + 93);
  if (v4)
  {

    *((void *)this + 93) = 0;
  }
  re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionAsset *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::MaterialDefinitionAsset::~MaterialDefinitionAsset(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::MaterialDefinitionAsset::assetType(re::MaterialDefinitionAsset *this)
{
  {
    re::MaterialDefinitionAsset::assetType(void)::type = (uint64_t)"MaterialDefinition";
    qword_26879E808 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MaterialDefinitionAsset::assetType(void)::type);
  }
  return &re::MaterialDefinitionAsset::assetType(void)::type;
}

void *re::MaterialDefinitionAsset::setMergedFile(void *this, re::MaterialDefinitionFile *a2)
{
  uint64_t v2 = (re::MaterialDefinitionFile *)this[278];
  if (v2 != a2)
  {
    uint64_t v4 = this;
    if (v2)
    {
      uint64_t v5 = re::globalAllocators((re *)this)[2];
      re::MaterialDefinitionFile::~MaterialDefinitionFile(v2);
      this = (void *)(*(uint64_t (**)(uint64_t, re::MaterialDefinitionFile *))(*(void *)v5 + 40))(v5, v2);
    }
    v4[278] = a2;
  }
  return this;
}

uint64_t re::MaterialDefinitionAsset::getOriginalConstantParameterType(re::MaterialDefinitionAsset *this, const char *a2)
{
  uint64_t v2 = (char *)this + 2272;
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        uint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = v3;
  uint64_t result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v2, &v8);
  if (result) {
    return *(unsigned __int8 *)(result + 20);
  }
  return result;
}

uint64_t *re::MaterialDefinitionAsset::tryGetOriginalColorGamut3FParameterValue@<X0>(re::MaterialDefinitionAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = (char *)this + 2272;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v12 = v5;
  uint64_t result = (uint64_t *)re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v12);
  if (result && *((unsigned char *)result + 20) == 20)
  {
    uint64_t v10 = *result;
    unint64_t v11 = *((unsigned int *)result + 2) | ((unint64_t)*((unsigned __int8 *)result + 16) << 32);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 4) = v10;
    *(void *)(a3 + 12) = v11;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

uint64_t re::MaterialDefinitionAsset::tryGetOriginalColorGamut4FParameterValue@<X0>(re::MaterialDefinitionAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = (char *)this + 2272;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v5;
  uint64_t result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v10);
  if (result && *(unsigned char *)(result + 20) == 21)
  {
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 4) = *(_OWORD *)result;
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 16);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

uint64_t re::MaterialDefinitionAsset::tryGetParameterBinding(re::MaterialDefinitionAsset *this, const char *a2)
{
  uint64_t v3 = (char *)this + 2320;
  uint64_t v4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v3, (uint64_t)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v4;
}

void re::MaterialDefinitionLoader::preloadAssets(re::MaterialDefinitionLoader *this)
{
  (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 8))(&v4);
  long long v2 = *((_OWORD *)this + 2);
  *((_OWORD *)this + 2) = v4;
  long long v4 = v2;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = v5;
  uint64_t v5 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 352))()) {
    re::AssetHandle::loadAsync((re::MaterialDefinitionLoader *)((char *)this + 32));
  }
}

char **re::MaterialDefinitionLoader::introspectionType(re::MaterialDefinitionLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::MaterialDefinitionAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"MaterialDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialDefinitionAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[348];
}

uint64_t re::MaterialDefinitionLoader::registerAsset(re::MaterialDefinitionLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  int v8 = (re::AssetLoader *)v3;
  uint64_t v129 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(v3 + 16);
  if (!*(unsigned char *)(v6 + 2216))
  {
    if (*((void *)v4 + 10) == -1) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = *((void *)v4 + 10);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 64));
    re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v9, v23, v100);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 64));
    if (v100[0])
    {
      re::AssetManager::lookupLoadDescriptors((os_unfair_lock_s *)v9, (const re::AssetHandle *)((char *)&v101 + 4), v90);
      if (v90[0])
      {
        if (v92)
        {
          uint64_t v25 = (uint64_t *)v93;
          uint64_t v26 = 144 * v92;
          while (1)
          {
            re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)v25);
            re::DynamicArray<BOOL>::DynamicArray((uint64_t)v109, v25 + 4);
            re::DynamicArray<BOOL>::DynamicArray((uint64_t)v112, v25 + 9);
            re::DynamicString::DynamicString((re::DynamicString *)v115, (const re::DynamicString *)(v25 + 14));
            isEngineAssetuint64_t Descriptor = re::FrameworkAssetProvider::isEngineAssetDescriptor((re::FrameworkAssetProvider *)buf, v27);
            if (v115[0])
            {
              if (v115[1]) {
                (*(void (**)(void))(*(void *)v115[0] + 40))();
              }
              memset(v115, 0, 32);
            }
            if (v112[0])
            {
              if (v114) {
                (*(void (**)(void))(*(void *)v112[0] + 40))();
              }
              uint64_t v114 = 0;
              memset(v112, 0, sizeof(v112));
              ++v113;
            }
            if (v109[0])
            {
              if (v111) {
                (*(void (**)(void))(*(void *)v109[0] + 40))();
              }
              uint64_t v111 = 0;
              memset(v109, 0, sizeof(v109));
              ++v110;
            }
            long long v24 = *(re **)buf;
            if (*(void *)buf && (buf[8] & 1) != 0) {
              long long v24 = (re *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
            }
            if (isEngineAssetDescriptor) {
              break;
            }
            v25 += 18;
            v26 -= 144;
            if (!v26) {
              goto LABEL_45;
            }
          }
        }
        else
        {
LABEL_45:
          uint64_t v29 = *re::graphicsLogObjects(v24);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v30 = (char *)*((void *)v5 + 18);
            if ((*((unsigned char *)v5 + 136) & 1) == 0) {
              uint64_t v30 = (char *)v5 + 137;
            }
            if (*(unsigned char *)(v7 + 16)) {
              uint64_t v31 = *(void *)(v7 + 24);
            }
            else {
              uint64_t v31 = v7 + 17;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v30;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v31;
            _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, "[%s] [%s] Loading of non-engine MaterialDefinitions is deprecated. Please move to using our public material APIs, such as CustomMaterial or ShaderGraphMaterial.", buf, 0x16u);
          }
        }
        if (v90[0]) {
          re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v91);
        }
      }
      int v57 = v100[0];
      *(unsigned char *)(v7 + 2216) = 1;
      if (v57) {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v101 + 4));
      }
    }
    else
    {
      *(unsigned char *)(v7 + 2216) = 1;
    }
  }
  uint64_t v10 = (_anonymous_namespace_ *)*((void *)v8 + 3);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 2248);
  if (v11) {
    goto LABEL_8;
  }
  re::AssetLoader::internalFindAssetHandleFields(v8, (const re::IntrospectionBase **)v7, (uint64_t)buf);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 2232, (uint64_t)buf);
  if (*(void *)buf && v109[0]) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  uint64_t v11 = *(void *)(v7 + 2248);
  if (v11)
  {
LABEL_8:
    uint64_t v12 = *(re::AssetHandle ***)(v7 + 2264);
    uint64_t v13 = &v12[v11];
    int v14 = 0;
    int v15 = 0;
    do
    {
      long long v16 = *v12;
      uint64_t v17 = *((void *)*v12 + 1);
      if (v17)
      {
        unsigned int v18 = atomic_load((unsigned int *)(v17 + 704));
        if (v18 != 2)
        {
          if (v18 == 3) {
            return 2;
          }
          re::AssetHandle::loadAsync(*v12);
          uint64_t v20 = *((void *)v16 + 1);
          if (v20) {
            uint64_t v21 = *(uint64_t **)(v20 + 264);
          }
          else {
            uint64_t v21 = 0;
          }
          if (v21 == re::TextureAsset::assetType(v19)) {
            int v14 = 1;
          }
          else {
            int v15 = 1;
          }
        }
      }
      ++v12;
    }
    while (v12 != v13);
    if (v15) {
      return 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v32 = *(void *)(v7 + 2224);
  if (!v32)
  {
    FlattenedMaterialFile = re::makeFlattenedMaterialFile((re *)v9, (AssetService *)(v7 + 8), v4);
    if (!FlattenedMaterialFile) {
      return 2;
    }
    re::MaterialDefinitionAsset::setMergedFile((void *)v7, FlattenedMaterialFile);
    uint64_t v32 = *(void *)(v7 + 2224);
  }
  StringID v34 = (char *)v5 + 137;
  if (*((void *)v5 + 17)) {
    uint64_t v35 = *((void *)v5 + 18);
  }
  else {
    uint64_t v35 = (uint64_t)v5 + 137;
  }
  re::parseShaderParameterData((uint64_t)v10, v35, v32 + 144, (uint64_t)v90);
  re::makeMaterialDefinitionBuilder((uint64_t)v10);
  if (!buf[0])
  {
    uint64_t v37 = *re::assetTypesLogObjects(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      if (*((void *)v5 + 17)) {
        int v85 = (char *)*((void *)v5 + 18);
      }
      else {
        int v85 = (char *)v5 + 137;
      }
      if (buf[16]) {
        uint64_t v86 = v108;
      }
      else {
        uint64_t v86 = &buf[17];
      }
      *(_DWORD *)uint64_t v100 = 136315394;
      __int16 v101 = v85;
      __int16 v102 = 2080;
      __int16 v103 = v86;
      _os_log_error_impl(&dword_233120000, v37, OS_LOG_TYPE_ERROR, "Failed to prepare material definition builder '%s': %s.", v100, 0x16u);
    }
    uint64_t v22 = 2;
    goto LABEL_147;
  }
  re::MaterialDefinitionBuilder::operator=((uint64_t *)(v7 + 776), (uint64_t *)&buf[8]);
  re::AssetHandle::operator=(v7 + 752, (uint64_t *)(*(void *)(v7 + 2224) + 120));
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(v7 + 2272, v94);
  if (v95[0]) {
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v7 + 2320, v95);
  }
  if (!v14)
  {
    re::parseTextureParameterData(v10, *(void *)(v7 + 2224) + 144, (uint64_t)v100);
    uint64_t v38 = *(void *)(v7 + 2224);
    buildKeySetFromParameters<re::DynamicString>((_anonymous_namespace_ *)v124, v38 + 144);
    re::FixedArray<float>::operator=((uint64_t *)(v7 + 2368), (uint64_t *)v124);
    re::FixedArray<re::DynamicString>::deinit(v124);
    buildKeySetFromParameters<re::DynamicString>((_anonymous_namespace_ *)v124, v38 + 192);
    re::FixedArray<float>::operator=((uint64_t *)(v7 + 2392), (uint64_t *)v124);
    uint64_t v39 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::deinit(v124);
    unint64_t v97 = 0;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
    unint64_t v40 = *(unsigned int *)(v38 + 268);
    uint64_t v41 = *(unsigned int *)(v38 + 272);
    long long v88 = v5;
    uint64_t v42 = 0;
    if (v41)
    {
      long long v43 = (int *)(*(void *)(v38 + 256) + 8);
      while (1)
      {
        int v44 = *v43;
        v43 += 22;
        if (v44 < 0) {
          break;
        }
        if (v41 == ++v42)
        {
          LODWORD(v42) = *(_DWORD *)(v38 + 272);
          break;
        }
      }
    }
    if (v41 == v42)
    {
LABEL_83:
      re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v124, (uint64_t)&v96);
      re::FixedArray<re::DynamicString>::deinit(&v96);
      re::FixedArray<float>::operator=((uint64_t *)(v7 + 2416), (uint64_t *)v124);
      long long v51 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::deinit(v124);
      unint64_t v97 = 0;
      uint64_t v96 = 0;
      uint64_t v98 = 0;
      unint64_t v52 = *(unsigned int *)(v38 + 316);
      uint64_t v53 = *(unsigned int *)(v38 + 320);
      if (v53)
      {
        uint64_t v54 = 0;
        uint64_t v55 = (int *)(*(void *)(v38 + 304) + 8);
        while (1)
        {
          int v56 = *v55;
          v55 += 40;
          if (v56 < 0) {
            break;
          }
          if (v53 == ++v54)
          {
            LODWORD(v54) = *(_DWORD *)(v38 + 320);
            break;
          }
        }
      }
      else
      {
        LODWORD(v54) = 0;
      }
      if (v53 == v54)
      {
LABEL_106:
        re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v124, (uint64_t)&v96);
        re::FixedArray<re::DynamicString>::deinit(&v96);
        re::FixedArray<float>::operator=((uint64_t *)(v7 + 2440), (uint64_t *)v124);
        uint64_t v62 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::deinit(v124);
        unint64_t v97 = 0;
        uint64_t v96 = 0;
        uint64_t v98 = 0;
        unint64_t v63 = *(unsigned int *)(v38 + 364);
        uint64_t v64 = *(unsigned int *)(v38 + 368);
        if (v64)
        {
          uint64_t v65 = 0;
          uint64_t v66 = (int *)(*(void *)(v38 + 352) + 8);
          while (1)
          {
            int v67 = *v66;
            v66 += 38;
            if (v67 < 0) {
              break;
            }
            if (v64 == ++v65)
            {
              LODWORD(v65) = *(_DWORD *)(v38 + 368);
              break;
            }
          }
        }
        else
        {
          LODWORD(v65) = 0;
        }
        if (v64 == v65)
        {
LABEL_123:
          re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v124, (uint64_t)&v96);
          re::FixedArray<re::DynamicString>::deinit(&v96);
          re::FixedArray<float>::operator=((uint64_t *)(v7 + 2464), (uint64_t *)v124);
          re::FixedArray<re::DynamicString>::deinit(v124);
          re::MaterialDefinitionAsset::setMergedFile((void *)v7, 0);
          re::TextureParameterTable::operator=(v7 + 1368, (uint64_t *)v100);
          unsigned int v72 = v106;
          if (v106)
          {
            uint64_t v73 = 0;
            int v74 = (int *)(v105 + 8);
            while (1)
            {
              int v75 = *v74;
              v74 += 22;
              if (v75 < 0) {
                break;
              }
              if (v106 == ++v73)
              {
                LODWORD(v73) = v106;
                break;
              }
            }
          }
          else
          {
            LODWORD(v73) = 0;
          }
          if (v106 != v73)
          {
            uint64_t v76 = v73;
            uint64_t v77 = v105;
            do
            {
              re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(v7 + 2320, (re::DynamicString *)(v77 + 88 * v76 + 16), v77 + 88 * v76 + 48);
              uint64_t v77 = v105;
              if (v106 <= (int)v73 + 1) {
                unsigned int v78 = v73 + 1;
              }
              else {
                unsigned int v78 = v106;
              }
              int v79 = v73;
              while (1)
              {
                uint64_t v76 = (v79 + 1);
                if (v78 - 1 == v79) {
                  break;
                }
                ++v79;
                LODWORD(v73) = v76;
                if ((*(_DWORD *)(v105 + 88 * v76 + 8) & 0x80000000) != 0) {
                  goto LABEL_139;
                }
              }
              LODWORD(v73) = v78;
LABEL_139:
              ;
            }
            while (v72 != v73);
          }
          uint64_t v80 = *((void *)v10 + 3);
          re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((uint64_t)v89, (uint64_t *)(v7 + 776));
          re::MaterialManager::createMaterialDefinition(v80, (re::MaterialDefinitionBuilder *)v89, v124);
          uint64_t v81 = *(void *)(v7 + 744);
          *(void *)(v7 + 744) = *(void *)v124;
          *(void *)uint64_t v124 = v81;
          if (v81)
          {

            *(void *)uint64_t v124 = 0;
          }
          re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)v89);
          if (*(void *)(v7 + 744))
          {
            uint64_t v22 = 0;
          }
          else
          {
            long long v83 = *re::assetTypesLogObjects(v82);
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              if (*((void *)v88 + 17)) {
                long long v87 = (char *)*((void *)v88 + 18);
              }
              else {
                long long v87 = v34;
              }
              *(_DWORD *)uint64_t v124 = 136315138;
              *(void *)&v124[4] = v87;
              _os_log_error_impl(&dword_233120000, v83, OS_LOG_TYPE_ERROR, "Failed to prepare material definition '%s'", v124, 0xCu);
            }
            uint64_t v22 = 2;
          }
          re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v104);
          re::TextureParameterTable::~TextureParameterTable((re::TextureParameterTable *)v100);
          goto LABEL_147;
        }
        unsigned int v68 = 0;
        uint64_t v69 = v65;
        while (1)
        {
          uint64_t v47 = v68;
          unint64_t v48 = v97;
          if (v97 <= v68) {
            break;
          }
          re::DynamicString::operator=((re::DynamicString *)(v98 + 32 * v68), (re::DynamicString *)(*(void *)(v38 + 352) + 152 * v69 + 16));
          unsigned int v68 = v47 + 1;
          if (*(_DWORD *)(v38 + 368) <= (v65 + 1)) {
            int v70 = v65 + 1;
          }
          else {
            int v70 = *(_DWORD *)(v38 + 368);
          }
          while (1)
          {
            uint64_t v69 = (v65 + 1);
            if (v70 - 1 == v65) {
              break;
            }
            LODWORD(v65) = v65 + 1;
            int v71 = v69;
            if ((*(_DWORD *)(*(void *)(v38 + 352) + 152 * v69 + 8) & 0x80000000) != 0) {
              goto LABEL_122;
            }
          }
          int v71 = v70;
LABEL_122:
          LODWORD(v65) = v71;
          if (v64 == v71) {
            goto LABEL_123;
          }
        }
LABEL_167:
        uint64_t v99 = 0;
        long long v127 = 0u;
        long long v128 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        *(_OWORD *)uint64_t v124 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v116 = 136315906;
        int v117 = "operator[]";
        __int16 v118 = 1024;
        int v119 = 468;
        __int16 v120 = 2048;
        uint64_t v121 = v47;
        __int16 v122 = 2048;
        unint64_t v123 = v48;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unsigned int v58 = 0;
      uint64_t v59 = v54;
      while (1)
      {
        uint64_t v47 = v58;
        unint64_t v48 = v97;
        if (v97 <= v58) {
          break;
        }
        re::DynamicString::operator=((re::DynamicString *)(v98 + 32 * v58), (re::DynamicString *)(*(void *)(v38 + 304) + 160 * v59 + 16));
        unsigned int v58 = v47 + 1;
        if (*(_DWORD *)(v38 + 320) <= (v54 + 1)) {
          int v60 = v54 + 1;
        }
        else {
          int v60 = *(_DWORD *)(v38 + 320);
        }
        while (1)
        {
          uint64_t v59 = (v54 + 1);
          if (v60 - 1 == v54) {
            break;
          }
          LODWORD(v54) = v54 + 1;
          int v61 = v59;
          if ((*(_DWORD *)(*(void *)(v38 + 304) + 160 * v59 + 8) & 0x80000000) != 0) {
            goto LABEL_105;
          }
        }
        int v61 = v60;
LABEL_105:
        LODWORD(v54) = v61;
        if (v53 == v61) {
          goto LABEL_106;
        }
      }
    }
    else
    {
      unsigned int v45 = 0;
      uint64_t v46 = v42;
      while (1)
      {
        uint64_t v47 = v45;
        unint64_t v48 = v97;
        if (v97 <= v45) {
          break;
        }
        re::DynamicString::operator=((re::DynamicString *)(v98 + 32 * v45), (re::DynamicString *)(*(void *)(v38 + 256) + 88 * v46 + 16));
        unsigned int v45 = v47 + 1;
        if (*(_DWORD *)(v38 + 272) <= (v42 + 1)) {
          int v49 = v42 + 1;
        }
        else {
          int v49 = *(_DWORD *)(v38 + 272);
        }
        while (1)
        {
          uint64_t v46 = (v42 + 1);
          if (v49 - 1 == v42) {
            break;
          }
          LODWORD(v42) = v42 + 1;
          int v50 = v46;
          if ((*(_DWORD *)(*(void *)(v38 + 256) + 88 * v46 + 8) & 0x80000000) != 0) {
            goto LABEL_82;
          }
        }
        int v50 = v49;
LABEL_82:
        LODWORD(v42) = v50;
        if (v41 == v50) {
          goto LABEL_83;
        }
      }
      uint64_t v99 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      *(_OWORD *)uint64_t v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v116 = 136315906;
      int v117 = "operator[]";
      __int16 v118 = 1024;
      int v119 = 468;
      __int16 v120 = 2048;
      uint64_t v121 = v47;
      __int16 v122 = 2048;
      unint64_t v123 = v48;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v99 = 0;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    *(_OWORD *)uint64_t v124 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v116 = 136315906;
    int v117 = "operator[]";
    __int16 v118 = 1024;
    int v119 = 468;
    __int16 v120 = 2048;
    uint64_t v121 = v47;
    __int16 v122 = 2048;
    unint64_t v123 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_167;
  }
  uint64_t v22 = 1;
LABEL_147:
  if (buf[0])
  {
    re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)&buf[8]);
  }
  else if (*(void *)&buf[8] && (buf[16] & 1) != 0)
  {
    (*(void (**)(void))(**(void **)&buf[8] + 40))();
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v95);
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v94);
  re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)v90);
  return v22;
}

void *buildKeySetFromParameters<re::DynamicString>(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v4 = *(unsigned int *)(a2 + 28);
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 20;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 != v6)
  {
    unsigned int v9 = 0;
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = v9;
      unint64_t v12 = v17;
      if (v17 <= v9)
      {
        uint64_t v19 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v20 = 136315906;
        uint64_t v21 = "operator[]";
        __int16 v22 = 1024;
        int v23 = 468;
        __int16 v24 = 2048;
        uint64_t v25 = v11;
        __int16 v26 = 2048;
        unint64_t v27 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::DynamicString::operator=((re::DynamicString *)(v18 + 32 * v9), (re::DynamicString *)(*(void *)(a2 + 16) + 80 * v10 + 16));
      unsigned int v9 = v11 + 1;
      if (*(_DWORD *)(a2 + 32) <= (v6 + 1)) {
        int v13 = v6 + 1;
      }
      else {
        int v13 = *(_DWORD *)(a2 + 32);
      }
      while (1)
      {
        uint64_t v10 = (v6 + 1);
        if (v13 - 1 == v6) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        int v14 = v10;
        if ((*(_DWORD *)(*(void *)(a2 + 16) + 80 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      int v14 = v13;
LABEL_17:
      LODWORD(v6) = v14;
    }
    while (v5 != v14);
  }
  re::FixedArray<re::DynamicString>::FixedArray(a1, (uint64_t)&v16);
  return re::FixedArray<re::DynamicString>::deinit(&v16);
}

void re::MaterialDefinitionLoader::unregisterAsset(re::MaterialDefinitionLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4 = *((void *)a2 + 93);
  if (v4)
  {

    long long v5 = *((_OWORD *)a2 + 47);
    uint64_t v6 = *((void *)a2 + 96);
    *(_OWORD *)(a2 + 760) = 0u;
    *(_OWORD *)(a2 + 744) = 0u;
    long long v7 = v5;
    uint64_t v8 = v6;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  re::MaterialDefinitionBuilder::destroy((re::MaterialDefinitionBuilder *)(a2 + 776));
  *((void *)a2 + 281) = 0;
  ++*((_DWORD *)a2 + 564);
}

re *re::MaterialDefinitionLoader::unloadAsset(re::MaterialDefinitionLoader *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::MaterialDefinitionAsset>((re *)"unloadAsset", 307, a2);
}

re *re::internal::destroyPersistent<re::MaterialDefinitionAsset>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    long long v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::MaterialDefinitionLoader::isSupportedSourceExtension(re::MaterialDefinitionLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rematerialdefinition") || strcasecmp(a2, "hmmaterialdefinition") == 0;
}

void *re::MaterialDefinitionLoader::findDependencies@<X0>(re::MaterialDefinitionLoader *this@<X0>, const re::IntrospectionBase **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = (unint64_t)a2[281];
  if (!v5)
  {
    re::AssetLoader::internalFindAssetHandleFields(this, a2, (uint64_t)v11);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 279), (uint64_t)v11);
    this = (re::MaterialDefinitionLoader *)v11[0];
    if (v11[0] && v11[4]) {
      this = (re::MaterialDefinitionLoader *)(*(uint64_t (**)(void))(*(void *)v11[0] + 40))();
    }
    unint64_t v5 = (unint64_t)a2[281];
  }
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t result = re::DynamicArray<re::AssetHandle>::setCapacity((void *)a3, v5);
  ++*(_DWORD *)(a3 + 24);
  long long v7 = a2[281];
  if (v7)
  {
    uint64_t v8 = (re::AssetHandle **)a2[283];
    uint64_t v9 = 8 * (void)v7;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

double downgradeMaterialDefinitionAssetFromFall2023@<D0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return re::downgradeShaderParameterDataFromSpring2023((uint64_t)a1 + 152, a2);
}

void *re::allocInfo_MaterialDefinitionAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_91, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_91))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7BE50, "MaterialDefinitionAsset");
    __cxa_guard_release(&_MergedGlobals_91);
  }
  return &unk_26AF7BE50;
}

void re::initInfo_MaterialDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xD03B453A4494F22CLL;
  v11[1] = "MaterialDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BE38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7BE38);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MaterialDefinitionFile((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "definitionFile";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0x800000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7BE40 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 64, 8);
      *(_DWORD *)uint64_t v9 = 6;
      *(void *)(v9 + 8) = 1;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(unsigned char *)(v9 + 40) = 1;
      *(void *)(v9 + 48) = downgradeMaterialDefinitionAssetFromFall2023;
      *(_DWORD *)(v9 + 56) = 2;
      qword_26AF7BE48 = v9;
      __cxa_guard_release(&qword_26AF7BE38);
    }
  }
  *((void *)this + 2) = 0x9B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7BE40;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialDefinitionAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialDefinitionAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialDefinitionAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialDefinitionAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

re::MaterialDefinitionAsset *re::internal::defaultConstruct<re::MaterialDefinitionAsset>(int a1, int a2, re::MaterialDefinitionAsset *this)
{
  return re::MaterialDefinitionAsset::MaterialDefinitionAsset(this);
}

uint64_t re::internal::defaultDestruct<re::MaterialDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::MaterialDefinitionAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_MaterialDefinitionAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialDefinitionAsset>, this);
}

void re::MaterialDefinitionLoader::~MaterialDefinitionLoader(re::MaterialDefinitionLoader *this)
{
  *(void *)this = &unk_26E6D7728;
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionLoader *)((char *)this + 32));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D7728;
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionLoader *)((char *)this + 32));
  JUMPOUT(0x237DBCBD0);
}

void re::MaterialDefinitionFile::~MaterialDefinitionFile(re::MaterialDefinitionFile *this)
{
}

uint64_t re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(const re::DynamicString ***)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 104 * v4;
        do
        {
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(v3);
          v3 += 13;
          v5 -= 104;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(const re::DynamicString ***)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, const re::DynamicString **))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(const re::DynamicString **this)
{
}

double re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::DebugMapping>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 80 * v4;
        do
        {
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v3 + 4);
          re::DynamicString::deinit((re::DynamicString *)v3);
          v3 += 10;
          v5 -= 80;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(uint64_t **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 48));
  }
  return result;
}

uint64_t re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(const re::DynamicString ***)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = &v3[9 * v4];
        do
        {
          re::MaterialTechniqueGroupData::deinit(v3);
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v3 + 4));
          re::DynamicString::deinit((re::DynamicString *)v3);
          v3 += 9;
        }
        while (v3 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(const re::DynamicString ***)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, const re::DynamicString **))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MaterialTechniqueData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::MaterialTechniqueData **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 664 * v4;
        do
        {
          re::MaterialTechniqueData::~MaterialTechniqueData(v3);
          uint64_t v3 = (re::MaterialTechniqueData *)((char *)v3 + 664);
          v5 -= 664;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::MaterialTechniqueData **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::MaterialTechniqueData *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MaterialTechniqueData::~MaterialTechniqueData(re::MaterialTechniqueData *this)
{
  if (*((void *)this + 21)) {
    re::DynamicString::deinit((re::MaterialTechniqueData *)((char *)this + 168));
  }
  re::DynamicString::deinit((re::MaterialTechniqueData *)((char *)this + 168));
  re::AssetHandle::~AssetHandle((re::MaterialTechniqueData *)((char *)this + 144));
  if (*((void *)this + 14)) {
    re::DynamicString::deinit((re::MaterialTechniqueData *)((char *)this + 112));
  }
  re::DynamicString::deinit((re::MaterialTechniqueData *)((char *)this + 112));
  re::AssetHandle::~AssetHandle((re::MaterialTechniqueData *)((char *)this + 88));
  re::AssetHandle::~AssetHandle((re::MaterialTechniqueData *)((char *)this + 64));
  re::DynamicString::deinit((re::MaterialTechniqueData *)((char *)this + 32));
  re::DynamicString::deinit(this);
}

re::MaterialDefinitionAsset *re::MaterialDefinitionAsset::MaterialDefinitionAsset(re::MaterialDefinitionAsset *this)
{
  *(void *)this = &unk_26E6D7880;
  re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionAsset *)((char *)this + 8));
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((re::MaterialDefinitionAsset *)((char *)this + 776));
  *((unsigned char *)this + 2216) = 0;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_DWORD *)this + 5re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)((char *)this + 22re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0u;
  *(_OWORD *)((char *)this + 2280) = 0u;
  *(_OWORD *)((char *)this + 2292) = 0u;
  *(void *)((char *)this + 2308) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_DWORD *)this + 588) = 0;
  *(void *)((char *)this + 2356) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 148) = 0u;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 150) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((void *)this + 310) = 0;
  return this;
}

re::MaterialDefinitionFile *re::MaterialDefinitionFile::MaterialDefinitionFile(re::MaterialDefinitionFile *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 4, 0);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  re::DynamicString::setCapacity((void *)this + 8, 0);
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(void *)((char *)this + 180) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(void *)((char *)this + 228) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 0;
  *(void *)((char *)this + 2re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0x7FFFFFFFLL;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 0;
  *(void *)((char *)this + 3re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 92) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(void *)((char *)this + 3re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0x7FFFFFFFLL;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((void *)this + 50) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 4re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(void *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *(void *)((char *)this + 548) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 146) = 0;
  *((void *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  *(_OWORD *)((char *)this + 620) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *(void *)((char *)this + 6re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 168) = 0;
  *((void *)this + 83) = 0;
  *(_OWORD *)((char *)this + re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit((uint64_t)this + 648) = 0u;
  *(_OWORD *)((char *)this + 708) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(void *)((char *)this + 7re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0x7FFFFFFFLL;
  return this;
}

re::MaterialDefinitionBuilder *re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(re::MaterialDefinitionBuilder *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  re::DynamicString::setCapacity((void *)this + 4, 0);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = &unk_26E6D3970;
  *((void *)this + 25) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 108) = 0;
  *((void *)this + 55) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 3re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 2re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0u;
  *((_DWORD *)this + 116) = 1;
  *(_OWORD *)((char *)this + 4re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *((_DWORD *)this + 1re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 132) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((void *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *((_DWORD *)this + 146) = 0;
  *(_OWORD *)((char *)this + 5re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 1re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 42) = 0;
  *((void *)this + 103) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 7re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 41) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((void *)this + 90) = &unk_26E6D78A0;
  *(_OWORD *)((char *)this + 908) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 2re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 58) = 0u;
  *(void *)((char *)this + 1108) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 288) = 0;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 70) = 0u;
  *(void *)((char *)this + 1156) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 300) = 0;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *(void *)((char *)this + 1204) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0u;
  *(void *)((char *)this + 1252) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 3re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *(void *)((char *)this + 1300) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 352) = 0;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *(void *)((char *)this + 1412) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 89) = 0u;
  return this;
}

void re::TextureHandleTable::textureAt(re::TextureHandleTable *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)this + 11);
  if (v5 <= a2)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)int v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v13 = 136315906;
    *(void *)&v13[4] = "operator[]";
    __int16 v14 = 1024;
    int v15 = 789;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *((void *)this + 13);
  uint64_t v7 = v6 + 40 * a2;
  if (*(unsigned char *)(v7 + 32))
  {
    uint64_t v8 = v6 + 40 * a2;
    int v10 = *(unsigned __int8 *)(v8 + 16);
    uint64_t v9 = v8 + 16;
    if (!v10)
    {
      re::TextureHandle::metalTexture((os_unfair_lock_s **)v7, v13);
      uint64_t v11 = *(void **)v13;
      id v12 = objc_msgSend(v11, sel_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_, objc_msgSend(v11, sel_pixelFormat), objc_msgSend(v11, sel_textureType), 0, objc_msgSend(*(id *)v13, sel_mipmapLevelCount), 0, objc_msgSend(v11, sel_arrayLength), *(unsigned int *)(v6 + 40 * a2 + 33));
      LOBYTE(v20[0]) = 1;
      v20[1] = v12;
      re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(v9, v20);
      if (LOBYTE(v20[0]) && v20[1]) {

      }
      if (v11) {
    }
      }
    *a3 = *(id *)(v6 + 40 * a2 + 24);
  }
  else
  {
    re::TextureHandle::metalTexture((os_unfair_lock_s **)v7, a3);
  }
}

uint64_t re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(uint64_t a1, void **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v7 = *(void **)(a1 + 8);
      if (v7)
      {

        *(void *)(a1 + 8) = 0;
      }
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (v6)
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 8) = a2[1];
        a2[1] = 0;
      }
    }
  }
  return a1;
}

uint64_t *re::CollisionShapeAsset::assetType(re::CollisionShapeAsset *this)
{
  {
    re::CollisionShapeAsset::assetType(void)::type = (uint64_t)"CollisionShape";
    qword_26879E828 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::CollisionShapeAsset::assetType(void)::type);
  }
  return &re::CollisionShapeAsset::assetType(void)::type;
}

uint64_t *re::PhysicsMaterialAsset::assetType(re::PhysicsMaterialAsset *this)
{
  {
    re::PhysicsMaterialAsset::assetType(void)::type = (uint64_t)"PhysicsMaterial";
    qword_26879E848 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::PhysicsMaterialAsset::assetType(void)::type);
  }
  return &re::PhysicsMaterialAsset::assetType(void)::type;
}

uint64_t *re::IndexedTriangleMeshAsset::assetType(re::IndexedTriangleMeshAsset *this)
{
  {
    re::IndexedTriangleMeshAsset::assetType(void)::type = (uint64_t)"IndexedTriangleMesh";
    qword_26879E868 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::IndexedTriangleMeshAsset::assetType(void)::type);
  }
  return &re::IndexedTriangleMeshAsset::assetType(void)::type;
}

void *re::allocInfo_CollisionShapeAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BEE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BEE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C040, "CollisionShapeAsset");
    __cxa_guard_release(&qword_26AF7BEE0);
  }
  return &unk_26AF7C040;
}

void re::initInfo_CollisionShapeAsset(re *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v15 = 0x601D4512AD02B902;
  *((void *)&v15 + 1) = "CollisionShapeAsset";
  re::StringID::destroyString((re::StringID *)&v15);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BED8, memory_order_acquire) & 1) == 0)
  {
    BOOL v4 = (re *)__cxa_guard_acquire(&qword_26AF7BED8);
    if (v4)
    {
      BOOL v5 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF28, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF7BF28))
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF7BF80);
        __cxa_guard_release(&qword_26AF7BF28);
      }
      if ((_MergedGlobals_92 & 1) == 0)
      {
        _MergedGlobals_92 = 1;
        uint64_t v6 = re::introspect_CollisionShapeData((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7BF80, 0);
        qword_26AF7BF90 = 0x800000001;
        dword_26AF7BF98 = 8;
        word_26AF7BF9C = 0;
        *(void *)&xmmword_26AF7BFA0 = 0;
        *((void *)&xmmword_26AF7BFA0 + 1) = 0xFFFFFFFFLL;
        qword_26AF7BF80 = (uint64_t)&unk_26E6CDA08;
        qword_26AF7BFB0 = v6;
        unk_26AF7BFB8 = 0;
        re::IntrospectionRegistry::add(v7, v8);
        re::getPrettyTypeName((re *)&qword_26AF7BF80, (const re::IntrospectionBase *)&v15);
        if (BYTE8(v15)) {
          uint64_t v9 = v16;
        }
        else {
          uint64_t v9 = (char *)&v15 + 9;
        }
        if (void)v15 && (BYTE8(v15)) {
          (*(void (**)(void))(*(void *)v15 + 40))();
        }
        if (v17 >> 1 == 94623636 && (v18 == "char*" || !strcmp(v18, "char*")))
        {
          long long v10 = v15;
        }
        else
        {
          long long v15 = *(_OWORD *)(v6 + 32);
          long long v10 = v14;
        }
        xmmword_26AF7BFA0 = v10;
        re::StringID::destroyString((re::StringID *)&v17);
      }
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_data";
      *(void *)(v11 + 16) = &qword_26AF7BF80;
      *(void *)(v11 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v11 + 32) = 1;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7BED0 = v11;
      __cxa_guard_release(&qword_26AF7BED8);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7BED0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CollisionShapeAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CollisionShapeAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::CollisionShapeAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CollisionShapeAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v13;
}

void re::internal::defaultConstruct<re::CollisionShapeAsset>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

void *re::internal::defaultConstructV2<re::CollisionShapeAsset>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

void *re::allocInfo_PhysicsMaterialAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BEF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BEF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C0B8, "PhysicsMaterialAsset");
    __cxa_guard_release(&qword_26AF7BEF8);
  }
  return &unk_26AF7C0B8;
}

void re::initInfo_PhysicsMaterialAsset(re *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v17 = 0xD183AEF73ADBE44;
  *((void *)&v17 + 1) = "PhysicsMaterialAsset";
  re::StringID::destroyString((re::StringID *)&v17);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BEF0, memory_order_acquire) & 1) == 0)
  {
    BOOL v4 = (re *)__cxa_guard_acquire(&qword_26AF7BEF0);
    if (v4)
    {
      BOOL v5 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF30, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF7BF30))
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)qword_26AF7BFC0);
        __cxa_guard_release(&qword_26AF7BF30);
      }
      if ((byte_26AF7BEC9 & 1) == 0)
      {
        byte_26AF7BEC9 = 1;
        uint64_t v6 = re::introspect_PhysicsMaterial((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF7BFC0, 0);
        qword_26AF7BFD0 = 0x800000001;
        dword_26AF7BFD8 = 8;
        word_26AF7BFDC = 0;
        *(void *)&xmmword_26AF7BFE0 = 0;
        *((void *)&xmmword_26AF7BFE0 + 1) = 0xFFFFFFFFLL;
        qword_26AF7BFC0[0] = &unk_26E6CDA08;
        qword_26AF7BFF0 = v6;
        unk_26AF7BFF8 = 0;
        re::IntrospectionRegistry::add(v7, v8);
        re::getPrettyTypeName((re *)qword_26AF7BFC0, (const re::IntrospectionBase *)&v17);
        if (BYTE8(v17)) {
          uint64_t v9 = v18;
        }
        else {
          uint64_t v9 = (char *)&v17 + 9;
        }
        if (void)v17 && (BYTE8(v17)) {
          (*(void (**)(void))(*(void *)v17 + 40))();
        }
        if (v19 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
        {
          long long v10 = v17;
        }
        else
        {
          long long v17 = *(_OWORD *)(v6 + 32);
          long long v10 = v16;
        }
        xmmword_26AF7BFE0 = v10;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_data";
      *(void *)(v11 + 16) = qword_26AF7BFC0;
      *(void *)(v11 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v11 + 32) = 1;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7BF70 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 5;
      *(void *)(v13 + 8) = "m_material";
      *(void *)(v13 + 16) = "m_data";
      qword_26AF7BF78 = v13;
      __cxa_guard_release(&qword_26AF7BEF0);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7BF70;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PhysicsMaterialAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PhysicsMaterialAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PhysicsMaterialAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::PhysicsMaterialAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v15;
}

void re::internal::defaultConstruct<re::PhysicsMaterialAsset>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

void *re::internal::defaultConstructV2<re::PhysicsMaterialAsset>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

void *re::allocInfo_IndexedTriangleMeshAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BF18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C130, "IndexedTriangleMeshAsset");
    __cxa_guard_release(&qword_26AF7BF18);
  }
  return &unk_26AF7C130;
}

void re::initInfo_IndexedTriangleMeshAsset(re *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v15 = 0xA2432DB9E2F0D614;
  *((void *)&v15 + 1) = "IndexedTriangleMeshAsset";
  re::StringID::destroyString((re::StringID *)&v15);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF10, memory_order_acquire) & 1) == 0)
  {
    BOOL v4 = (re *)__cxa_guard_acquire(&qword_26AF7BF10);
    if (v4)
    {
      BOOL v5 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF38, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF7BF38))
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF7C000);
        __cxa_guard_release(&qword_26AF7BF38);
      }
      if ((byte_26AF7BECA & 1) == 0)
      {
        byte_26AF7BECA = 1;
        uint64_t v6 = re::introspect_IndexedTriangleMeshData((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C000, 0);
        qword_26AF7C010 = 0x800000001;
        dword_26AF7C018 = 8;
        word_26AF7C01C = 0;
        *(void *)&xmmword_26AF7C020 = 0;
        *((void *)&xmmword_26AF7C020 + 1) = 0xFFFFFFFFLL;
        qword_26AF7C000 = (uint64_t)&unk_26E6CDA08;
        qword_26AF7C030 = v6;
        unk_26AF7C038 = 0;
        re::IntrospectionRegistry::add(v7, v8);
        re::getPrettyTypeName((re *)&qword_26AF7C000, (const re::IntrospectionBase *)&v15);
        if (BYTE8(v15)) {
          uint64_t v9 = v16;
        }
        else {
          uint64_t v9 = (char *)&v15 + 9;
        }
        if (void)v15 && (BYTE8(v15)) {
          (*(void (**)(void))(*(void *)v15 + 40))();
        }
        if (v17 >> 1 == 94623636 && (v18 == "char*" || !strcmp(v18, "char*")))
        {
          long long v10 = v15;
        }
        else
        {
          long long v15 = *(_OWORD *)(v6 + 32);
          long long v10 = v14;
        }
        xmmword_26AF7C020 = v10;
        re::StringID::destroyString((re::StringID *)&v17);
      }
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_data";
      *(void *)(v11 + 16) = &qword_26AF7C000;
      *(void *)(v11 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v11 + 32) = 1;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7BF08 = v11;
      __cxa_guard_release(&qword_26AF7BF10);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7BF08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IndexedTriangleMeshAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IndexedTriangleMeshAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IndexedTriangleMeshAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IndexedTriangleMeshAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v13;
}

void re::internal::defaultConstruct<re::IndexedTriangleMeshAsset>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

void *re::internal::defaultConstructV2<re::IndexedTriangleMeshAsset>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

uint64_t re::CollisionShapeAssetLoader::introspectionType(re::CollisionShapeAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BF48))
  {
    qword_26AF7BF40 = re::internal::getOrCreateInfo((re::internal *)"CollisionShapeAsset", (uint64_t (*)(re::internal *))re::allocInfo_CollisionShapeAsset, (re::IntrospectionBase *(*)(void))re::initInfo_CollisionShapeAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7BEE8, 0);
    __cxa_guard_release(&qword_26AF7BF48);
  }
  return qword_26AF7BF40;
}

uint64_t re::CollisionShapeAssetLoader::registerAsset(re::CollisionShapeAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4 = *(void *)a2;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 8);
  if (v5 > 0xC) {
    goto LABEL_4;
  }
  if (((1 << v5) & 0x1B7E) != 0)
  {
    this = (re::CollisionShapeAssetLoader *)re::AssetLoader::registerAsset(this, a2, a3);
    uint64_t v7 = (uint64_t)this;
    if (!this) {
      goto LABEL_4;
    }
    return v7;
  }
  if (v5 != 7)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected collision shape type.", "!\"Unreachable code\"", "registerAsset", 133);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  uint64_t v10 = *(void *)(v4 + 24);
  if (!v10) {
    goto LABEL_4;
  }
  uint64_t v7 = 0;
  uint64_t v11 = (re::AssetHandle *)(*(void *)(v4 + 32) + 48);
  uint64_t v12 = 80 * v10;
  do
  {
    uint64_t v13 = *((void *)v11 + 1);
    if (!v13) {
      goto LABEL_16;
    }
    unsigned int v14 = atomic_load((unsigned int *)(v13 + 704));
    if (v14 == 3)
    {
      uint64_t v7 = 2;
      goto LABEL_18;
    }
    uint64_t v15 = *((void *)v11 + 1);
    if (!v15 || (unsigned int v16 = atomic_load((unsigned int *)(v15 + 704)), v16 != 2))
    {
LABEL_16:
      re::AssetHandle::loadAsync(v11);
      if (!v7) {
        uint64_t v7 = 1;
      }
    }
LABEL_18:
    uint64_t v11 = (re::AssetHandle *)((char *)v11 + 80);
    v12 -= 80;
  }
  while (v12);
  if (!v7)
  {
    if (*(void *)(v4 + 24))
    {
      uint64_t v17 = re::FixedArray<re::GeometricObjectData>::operator[](v4 + 16);
      uint64_t v18 = *(void *)(*(void *)(v17 + 56) + 24);
      if (*((void *)a3 + 13)) {
        unint64_t v19 = (char *)*((void *)a3 + 14);
      }
      else {
        unint64_t v19 = (char *)a3 + 105;
      }
      (*(void (**)(void *__return_ptr, void, char *))(*(void *)v18 + 8))(v23, *(void *)(*(void *)(v17 + 56) + 24), v19);
      uint64_t v20 = *(void *)(v4 + 24);
      if (v20)
      {
        uint64_t v21 = 80 * v20;
        uint64_t v22 = *(void *)(v4 + 32) + 48;
        do
        {
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v18 + 288))(v18, v23, v22);
          v22 += 80;
          v21 -= 80;
        }
        while (v21);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
    }
LABEL_4:
    if (*((void *)a2 + 1))
    {
      return 0;
    }
    else
    {
      uint64_t v8 = re::globalAllocators(this);
      return re::convertFromSerializable(*(re **)a2, (const re::CollisionShapeData *)(a2 + 8), (re::CollisionShape **)v8[2], (re::Allocator *)v8[2], 0);
    }
  }
  return v7;
}

uint64_t re::FixedArray<re::GeometricObjectData>::operator[](uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16);
}

uint64_t *re::CollisionShapeAssetLoader::unregisterAsset(re::CollisionShapeAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t result = re::globalAllocators(this);
  unsigned int v5 = (void (***)(void))a2[1];
  if (v5)
  {
    uint64_t v6 = result[2];
    (**v5)(a2[1]);
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v6 + 40))(v6, v5);
    a2[1] = 0;
  }
  return result;
}

uint64_t re::CollisionShapeAssetLoader::unloadAsset(re::CollisionShapeAssetLoader *this, void *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (void (***)(void))*a2;
  if (*a2)
  {
    uint64_t v5 = v3[2];
    (**v4)(*a2);
    int v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v5 + 40))(v5, v4);
    *a2 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)re::globalAllocators((re *)v3)[2] + 40);
  return v6();
}

BOOL re::CollisionShapeAssetLoader::isSupportedSourceExtension(re::CollisionShapeAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "recollisionshape") == 0;
}

uint64_t re::PhysicsMaterialAssetLoader::introspectionType(re::PhysicsMaterialAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BF58))
  {
    qword_26AF7BF50 = re::internal::getOrCreateInfo((re::internal *)"PhysicsMaterialAsset", (uint64_t (*)(re::internal *))re::allocInfo_PhysicsMaterialAsset, (re::IntrospectionBase *(*)(void))re::initInfo_PhysicsMaterialAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7BF00, 0);
    __cxa_guard_release(&qword_26AF7BF58);
  }
  return qword_26AF7BF50;
}

void *re::PhysicsMaterialAssetLoader::allocateSampleAsset(re::PhysicsMaterialAssetLoader *this)
{
  int v1 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, float, float, float))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                              + 16))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, 0.1, 0.5, 0.5);
  uint64_t v2 = re::globalAllocators(v1);
  int v3 = (re::Allocator *)v2[2];
  uint64_t v4 = re::globalAllocators((re *)v2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 16, 8);
  re::PhysicsMaterial::createGenericMaterial(v1, v3);
  *uint64_t v5 = v6;
  v5[1] = v1;
  return v5;
}

uint64_t re::PhysicsMaterialAssetLoader::unloadAsset(re::PhysicsMaterialAssetLoader *this, void *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = v3[2];
  uint64_t v5 = (void (***)(void))*a2;
  if (*a2)
  {
    (**v5)(*a2);
    int v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40))(v4, v5);
    *a2 = 0;
  }
  uint64_t v6 = (void (***)(void))a2[1];
  if (v6)
  {
    (**v6)(a2[1]);
    int v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40))(v4, v6);
    a2[1] = 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)re::globalAllocators((re *)v3)[2] + 40);
  return v7();
}

BOOL re::PhysicsMaterialAssetLoader::isSupportedSourceExtension(re::PhysicsMaterialAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "rephysicsmaterial") == 0;
}

uint64_t re::PhysicsMaterialAssetLoader::registerAsset(re::PhysicsMaterialAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  if (!a2[1])
  {
    uint64_t v4 = re::globalAllocators(this);
    a2[1] = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                             + 16))(re::PhysicsFactory::m_defaultFactory, v4[2], *(float *)(*a2 + 8), *(float *)(*a2 + 12), *(float *)(*a2 + 16));
  }
  return 0;
}

uint64_t re::IndexedTriangleMeshAssetLoader::introspectionType(re::IndexedTriangleMeshAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7BF68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7BF68))
  {
    qword_26AF7BF60 = re::internal::getOrCreateInfo((re::internal *)"IndexedTriangleMeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_IndexedTriangleMeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_IndexedTriangleMeshAsset, (void (*)(re::IntrospectionBase *))&unk_26AF7BF20, 0);
    __cxa_guard_release(&qword_26AF7BF68);
  }
  return qword_26AF7BF60;
}

uint64_t re::IndexedTriangleMeshAssetLoader::unloadAsset(re::IndexedTriangleMeshAssetLoader *this, uint64_t **a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = v3[2];
  uint64_t v5 = *a2;
  if (*a2)
  {
    re::FixedArray<CoreIKTransform>::deinit(v5 + 6);
    re::FixedArray<CoreIKTransform>::deinit(v5 + 3);
    re::FixedArray<CoreIKTransform>::deinit(v5);
    int v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 40))(v4, v5);
    *a2 = 0;
  }
  uint64_t v6 = a2[1];
  if (v6)
  {
    (*(void (**)(uint64_t *))*v6)(a2[1]);
    int v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 40))(v4, v6);
    a2[1] = 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)re::globalAllocators((re *)v3)[2] + 40);
  return v7();
}

BOOL re::IndexedTriangleMeshAssetLoader::isSupportedSourceExtension(re::IndexedTriangleMeshAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "recollisionmesh") == 0;
}

uint64_t re::IndexedTriangleMeshAssetLoader::createRuntimeData(re *a1, uint64_t *a2)
{
  if (!a2[1])
  {
    int v3 = re::globalAllocators(a1);
    a2[1] = re::convertFromSerializable(*a2, v3[2]);
  }
  return 1;
}

uint64_t *re::IndexedTriangleMeshAssetLoader::allocateSampleAsset(re::IndexedTriangleMeshAssetLoader *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v10[0] = xmmword_234378320;
  v10[1] = unk_234378330;
  void v10[2] = xmmword_234378340;
  uint64_t v10[3] = unk_234378350;
  uint64_t v8 = 0x3000300010000;
  int v9 = 131073;
  int v7 = 1;
  int v1 = (const re::IndexedTriangleMesh *)re::globalAllocators(this)[2];
  char v6 = 1;
  uint64_t v4 = re::convertToSerializable(v2, v1, v3);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(const re::IndexedTriangleMesh *, uint64_t, uint64_t))(*(void *)v1 + 32))(v1, 16, 8);
  *uint64_t result = v4;
  result[1] = (uint64_t)v2;
  return result;
}

void re::CollisionShapeAssetLoader::~CollisionShapeAssetLoader(re::CollisionShapeAssetLoader *this)
{
}

void re::PhysicsMaterialAssetLoader::~PhysicsMaterialAssetLoader(re::PhysicsMaterialAssetLoader *this)
{
}

void re::IndexedTriangleMeshAssetLoader::~IndexedTriangleMeshAssetLoader(re::IndexedTriangleMeshAssetLoader *this)
{
}

uint64_t re::Drawable::Drawable(uint64_t a1, id a2, uint64_t *a3, uint64_t a4, void *a5, int a6)
{
  *(void *)a1 = a4;
  *(_DWORD *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = a2;
  uint64_t v9 = *a3;
  *(void *)(a1 + 56) = 0;
  uint64_t v10 = (id *)(a1 + 56);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  if (*a5)
  {
    uint64_t v11 = (id *)(a1 + 64);
    re::IOSurfaceWrapper::SharedEvent::createSharedEvent(&v17);
    if (v10 != &v17)
    {
      id v12 = v17;
      id v17 = 0;
      id v13 = *v10;
      id *v10 = v12;
    }
    re::IOSurfaceWrapper::SharedEventListener::createSharedEventListenerWithQueue(a5, &v17);
    if (v11 != &v17)
    {
      id v14 = v17;
      id v17 = 0;
      id v15 = *v11;
      id *v11 = v14;
    }
  }
  return a1;
}

void re::Drawable::~Drawable(re::Drawable *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;

  int v3 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;

  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {

    *((void *)this + 2) = 0;
  }
}

void re::DrawableQueue::present(re::DrawableQueue *this, re::Drawable *a2, int a3)
{
  re::LocklessRingBuffer::writerReleaseBuffer(*((void *)this + 54), *((unsigned int *)a2 + 2), a3);
  if (*((unsigned char *)this + 46))
  {
    if (a3 && (char v6 = (const re::ecs2::Component *)*((void *)this + 50)) != 0)
    {
      *((_DWORD *)v6 + 7) = *((_DWORD *)a2 + 2);
      int v7 = (re::ecs2::NetworkComponent *)*((void *)this + 51);
      re::ecs2::NetworkComponent::markDirty(v7, v6);
    }
    else
    {
      atomic_load((unint64_t *)(*(void *)(*((void *)this + 54) + 32) + 16 * *((int *)a2 + 2) + 40));
      if (re::internal::enableSignposts(0, 0))
      {
        kdebug_trace();
      }
    }
  }
}

void re::DrawableQueue::checkAndGenerateMipmapsSynchronous(re::DrawableQueue *this, re::Drawable *a2)
{
  if (*((unsigned char *)this + 45))
  {
    uint64_t v3 = *((void *)this + 7);
    uint64_t v2 = (id *)((char *)this + 56);
    if (v3)
    {
      re::mtl::CommandQueue::makeCommandBuffer(v2, &v15);
      re::DynamicString::format((re::DynamicString *)"DrawableQueue MipmapGenCommandBuffer-%p", (re::DynamicString *)buf, a2);
      if (v12) {
        uint64_t v5 = *(re::ns **)&v13[7];
      }
      else {
        uint64_t v5 = (re::ns *)v13;
      }
      re::ns::String::String((re::ns::String *)&v14, v5);
      [v15 setLabel:v14];

      if (*(void *)buf && (v12 & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
      id v6 = v15;
      id v10 = v6;
      re::DrawableQueue::encodeMipmapsGenerationJob((uint64_t)v6, &v10, (uint64_t)a2);

      [v15 commit];
      [v15 waitUntilCompleted];
      re::mtl::CommandBuffer::error(&v15, buf);
      uint64_t v7 = *(void *)buf;

      if (v7)
      {
        uint64_t v9 = *re::graphicsLogObjects(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to generate mip-maps for the drawable texture!", buf, 2u);
        }
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) CommandQueue is not initialized!", "m_sharedCommandQueue.isValid()", "checkAndGenerateMipmapsSynchronous", 558);
      _os_crash();
      __break(1u);
    }
  }
}

void re::Drawable::reclaimFromClient(re::Drawable *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)this + 432);
  uint64_t v2 = *((int *)this + 2);
  unsigned int v3 = atomic_load((unsigned int *)(*(void *)(v1 + 32) + 16 * v2 + 32));
  if (v3 == 1)
  {
    uint64_t v4 = (atomic_uint *)(*(void *)(v1 + 32) + 16 * v2 + 32);
    int v5 = 1;
    atomic_compare_exchange_strong(v4, (unsigned int *)&v5, 0);
    if (v5 == 1)
    {
      uint64_t v7 = *re::graphicsLogObjects(this);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = *((_DWORD *)this + 2);
        v9[0] = 67109120;
        v9[1] = v8;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Reclaimed drawable with idx: %d which was in writing state. This is unsafe. Make sure to present the acquired drawable before it goes out of scope", (uint8_t *)v9, 8u);
      }
    }
  }
}

uint64_t re::DrawableQueue::DrawableQueue(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v8 + 16) = a4;
  *(void *)uint64_t v8 = &unk_26E6D7D00;
  long long v9 = *(_OWORD *)a2;
  *(void *)(v8 + 40) = *((void *)a2 + 2);
  *(_OWORD *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = v9;
  objc_initWeak((id *)(v8 + 48), 0);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = a3;
  uint64_t v10 = 72;
  do
  {
    uint64_t v11 = a1 + v10;
    *(void *)uint64_t v11 = 0;
    *(_DWORD *)(v11 + 8) = -1;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = 0;
    *(unsigned char *)(v11 + 48) = 0;
    v10 += 72;
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  }
  while (v11 + 72 != a1 + 288);
  *(_DWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 292) = 256;
  *(unsigned char *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = -1;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 3re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *(void *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 3re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0u;
  *(_DWORD *)(a1 + 392) = -1;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 425) = 0u;
  id v12 = *(id *)(a3 + 184);
  v60[0] = v12;
  if (*((unsigned char *)a2 + 22) && ([v12 supportsSharedTextureHandles] & 1) == 0)
  {
LABEL_48:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "!descriptor.shareable || device.supportsSharedTextureHandles()", "DrawableQueue", 97);
    _os_crash();
    __break(1u);
LABEL_49:
    __error();
    int v44 = __error();
    re::internal::assertLog((re::internal *)5, v45, "assertion failure: '%s' (%s:line %i) Failed to mmap for DrawableQueue: %{errno}d", "region != ((void *)-1)", "DrawableQueue", 152, *v44);
    _os_crash();
    __break(1u);
    goto LABEL_50;
  }
  *(unsigned char *)(a1 + 293) = 1;
  uint64_t v14 = a2[3];
  uint64_t v15 = (int)a2[2];
  uint64_t v58 = v15;
  uint64_t v59 = v14;
  uint64_t v57 = 0;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(v60, &v57, &v58, &v59);
  id v17 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  if ((objc_msgSend(v17, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v17, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v17, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v17, sel_setWidth_, *a2);
  objc_msgSend(v17, sel_setHeight_, a2[1]);
  objc_msgSend(v17, sel_setPixelFormat_, v15);
  uint64_t v46 = a3;
  if (*((unsigned char *)a2 + 20))
  {
    unsigned int v18 = 32 - __clz(*a2);
    unsigned int v19 = 32 - __clz(a2[1]);
    if (v18 <= v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = v18;
    }
  }
  else
  {
    uint64_t v20 = 1;
  }
  objc_msgSend(v17, sel_setMipmapLevelCount_, v20);
  objc_msgSend(v17, sel_setUsage_, v14);
  objc_msgSend(v17, sel_setStorageMode_, 0);
  signed int v21 = a2[4];
  if (v21 == 0xFFFF) {
    signed int v21 = 0;
  }
  objc_msgSend(v17, sel_setResourceOptions_, v21);
  uint64_t v22 = 0;
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v55 = 0;
    int v56 = 0;
    if (!*((unsigned char *)a2 + 22))
    {
      re::mtl::Device::makeTexture(v17, v60, &v49);
      NS::SharedPtr<MTL::Texture>::operator=(&v56, &v49);
      id v26 = v49;
      if (!v49) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    re::mtl::Device::makeSharedTexture(v17, v60, &v49);
    NS::SharedPtr<MTL::Texture>::operator=(&v56, &v49);
    if (v49) {

    }
    id v24 = objc_msgSend(v56, sel_newSharedTextureHandle);
    uint64_t v55 = [v24 ioSurface];
    if (v24)
    {
      id v26 = v24;
LABEL_22:
    }
LABEL_23:
    unint64_t v27 = v56;
    if (!v56)
    {
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) ", "texture.isValid()", "DrawableQueue", 142);
      _os_crash();
      __break(1u);
      goto LABEL_48;
    }
    re::DynamicString::format((re::DynamicString *)"DrawableQueueTexture-%p-%d", (re::DynamicString *)&v49, a1, i);
    if (v50) {
      long long v28 = v51;
    }
    else {
      long long v28 = (char *)&v50 + 1;
    }
    objc_msgSend(v27, sel_setLabel_, objc_msgSend(NSString, sel_stringWithCString_encoding_, v28, 4));
    if (v49 && (v50 & 1) != 0) {
      (*(void (**)(void))(*(void *)v49 + 40))();
    }
    id v48 = 0;
    re::Drawable::Drawable((uint64_t)&v49, v56, &v55, a1, &v48, i);
    uint64_t v29 = a1 + v22;
    *(void *)(v29 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v49;
    *(_DWORD *)(v29 + 80) = v50;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + v22 + 88), (void **)&v51);
    *(_OWORD *)(v29 + 96) = v52[0];
    *(_OWORD *)(v29 + 105) = *(_OWORD *)((char *)v52 + 9);
    re::ObjCObject::operator=((id *)(a1 + v22 + 128), &v53);
    re::ObjCObject::operator=((id *)(a1 + v22 + 136), &v54);
    re::Drawable::~Drawable((re::Drawable *)&v49);

    long long v30 = (re *)v56;
    if (v56) {

    }
    v22 += 72;
  }
  long long v31 = re::globalAllocators(v30);
  long long v32 = (semaphore_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31[2] + 32))(v31[2], 40, 8);
  uint64_t v33 = (re *)re::LocklessRingBuffer::LocklessRingBuffer(v32);
  uint64_t v34 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = v33;
  if (v34) {

  }
  if (*((unsigned char *)a2 + 22))
  {
    uint64_t v35 = mmap(0, 0x150uLL, 3, 4097, -1, 0);
    if (v35 == (void *)-1) {
      goto LABEL_49;
    }
    uint64_t v36 = v35;
    *(void *)(a1 + 416) = v35;
    uint64_t v37 = *(re::LocklessRingBuffer **)(a1 + 432);
LABEL_41:
    re::LocklessRingBuffer::initializeIntoBuffer(v37, v36);
    atomic_store(1u, (unsigned int *)(*(void *)(*(void *)(a1 + 432) + 32) + 8));
    *(unsigned char *)(a1 + 294) = 1;
    if (dyld_program_sdk_at_least())
    {
      *(unsigned char *)(a1 + 296) = 0;
      if (!v17) {
        goto LABEL_46;
      }
LABEL_45:
    }
    else
    {
      *(unsigned char *)(a1 + 296) = 1;
      uint64_t v42 = *(void *)(v46 + 64);
      int v56 = 0;
      id v47 = 0;
      re::Drawable::Drawable((uint64_t)&v49, *(id *)(v42 + 56), (uint64_t *)&v56, a1, &v47, 4);
      *(void *)(a1 + 304) = v49;
      *(_DWORD *)(a1 + 312) = v50;
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 320), (void **)&v51);
      *(_OWORD *)(a1 + 328) = v52[0];
      *(_OWORD *)(a1 + 337) = *(_OWORD *)((char *)v52 + 9);
      re::ObjCObject::operator=((id *)(a1 + 360), &v53);
      re::ObjCObject::operator=((id *)(a1 + 368), &v54);
      re::Drawable::~Drawable((re::Drawable *)&v49);

      if (v17) {
        goto LABEL_45;
      }
    }
LABEL_46:

    return a1;
  }
  uint64_t v38 = re::globalAllocators(v33);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38[2] + 32))(v38[2], 368, 16);
  *(_OWORD *)uint64_t v39 = 0u;
  *(_OWORD *)(v39 + 16) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_OWORD *)(v39 + 96) = 0u;
  *(_OWORD *)(v39 + 112) = 0u;
  *(_OWORD *)(v39 + 128) = 0u;
  *(_OWORD *)(v39 + 144) = 0u;
  *(_OWORD *)(v39 + 160) = 0u;
  *(_OWORD *)(v39 + 1re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0u;
  *(_OWORD *)(v39 + 192) = 0u;
  *(_OWORD *)(v39 + 208) = 0u;
  *(_OWORD *)(v39 + 2re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0u;
  *(_OWORD *)(v39 + 240) = 0u;
  *(_OWORD *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = 0u;
  *(_OWORD *)(v39 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v39 + 288) = 0u;
  *(_OWORD *)(v39 + 304) = 0u;
  *(_OWORD *)(v39 + 320) = 0u;
  *(_OWORD *)(v39 + 3re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0u;
  *(_OWORD *)(v39 + 352) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v39, 0);
  *(void *)uint64_t v39 = &unk_26E6D7DA0;
  *(_DWORD *)(v39 + 44) = 0;
  uint64_t v40 = *(void *)(a1 + 424);
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 424) = v39;
  if (!v40 || ((id)(v40 + 8), (uint64_t v39 = *(void *)(a1 + 424)) != 0))
  {
    uint64_t v37 = *(re::LocklessRingBuffer **)(a1 + 432);
    uint64_t v36 = (void *)(v39 + 32);
    goto LABEL_41;
  }
LABEL_50:
  re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) Failed to allocate memory for ring buffer", "m_localMem != nullptr", "DrawableQueue", 157);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::DrawableQueue *re::DrawableQueue::DrawableQueue(re::DrawableQueue *this, id *a2, id *a3, re::Allocator *a4)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  void v8[2] = a4;
  *uint64_t v8 = &unk_26E6D7D00;
  *((_DWORD *)this + 6) = [*a2 width];
  *((_DWORD *)this + 7) = [*a2 height];
  *((_DWORD *)this + 8) = [*a2 pixelFormat];
  *(void *)((char *)this + re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0xFFFF00000000;
  *((_DWORD *)this + 11) = 0x10000;
  objc_initWeak((id *)this + 6, 0);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a3;
  long long v9 = a3;
  uint64_t v10 = 72;
  do
  {
    uint64_t v11 = (char *)this + v10;
    *(void *)uint64_t v11 = 0;
    *((_DWORD *)v11 + 2) = -1;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    v11[48] = 0;
    v10 += 72;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
  }
  while (v11 + 72 != (char *)this + 288);
  *((_DWORD *)this + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *((unsigned char *)this + 296) = 0;
  *((void *)this + 38) = 0;
  *((_DWORD *)this + 78) = -1;
  *((void *)this + 40) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((unsigned char *)this + 352) = 0;
  *(_OWORD *)((char *)this + 3re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0u;
  *((_DWORD *)this + 98) = -1;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *(_OWORD *)((char *)this + 425) = 0u;
  *((_DWORD *)this + 73) = 256;
  if (([a3[23] supportsSharedTextureHandles] & 1) == 0)
  {
LABEL_33:
    re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "device.supportsSharedTextureHandles()", "DrawableQueue", 191);
    _os_crash();
    __break(1u);
LABEL_34:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "payload.drawableCount() == kQueueLength", "DrawableQueue", 192);
    _os_crash();
    __break(1u);
LABEL_35:
    re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "sharedSemaphore != 0", "DrawableQueue", 212);
    _os_crash();
    __break(1u);
LABEL_36:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Failed to map xpc_shmem for DrawableQueue", "m_sharedMem", "DrawableQueue", 215);
    _os_crash();
    __break(1u);
LABEL_37:
    uint64_t v29 = (re::AppleBuild *)__cxa_guard_acquire(&qword_26AF7C1B0);
    if (v29)
    {
      re::Defaults::BOOLValue((re::Defaults *)"allowSharingEyeTransformsViaDrawableQueue", v34, (char *)&v39);
      if ((_BYTE)v39) {
        char v35 = BYTE1(v39);
      }
      else {
        char v35 = 0;
      }
      _MergedGlobals_93 = v35;
      __cxa_guard_release(&qword_26AF7C1B0);
    }
    goto LABEL_22;
  }
  if (re::DrawableQueuePayload::drawableCount(a2) != 3) {
    goto LABEL_34;
  }
  uint64_t v14 = 0;
  for (uint64_t i = 0; i != 3; ++i)
  {
    v45[0] = 0;
    id v39 = objc_msgSend(v9[23], sel_newSharedTextureWithHandle_, re::DrawableQueuePayload::textureHandle(a2, i));
    NS::SharedPtr<MTL::Texture>::operator=(v45, &v39);
    if (v39) {

    }
    if (!v45[0])
    {
      re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "texture.isValid()", "DrawableQueue", 200);
      _os_crash();
      __break(1u);
LABEL_30:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "texture->width() == m_descriptor.width", "DrawableQueue", 201);
      _os_crash();
      __break(1u);
LABEL_31:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "texture->height() == m_descriptor.height", "DrawableQueue", 202);
      _os_crash();
      __break(1u);
LABEL_32:
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) ", "texture->pixelFormat() == (MTL::PixelFormat)m_descriptor.pixelFormat", "DrawableQueue", 203);
      _os_crash();
      __break(1u);
      goto LABEL_33;
    }
    if (objc_msgSend(v45[0], sel_width) != (id)*((unsigned int *)this + 6)) {
      goto LABEL_30;
    }
    if (objc_msgSend(v45[0], sel_height) != (id)*((unsigned int *)this + 7)) {
      goto LABEL_31;
    }
    if (objc_msgSend(v45[0], sel_pixelFormat) != (id)*((int *)this + 8)) {
      goto LABEL_32;
    }
    id v37 = 0;
    uint64_t v38 = 0;
    re::Drawable::Drawable((uint64_t)&v39, v45[0], &v38, (uint64_t)this, &v37, i);
    uint64_t v20 = (char *)this + v14;
    *((void *)v20 + 9) = v39;
    *((_DWORD *)v20 + 20) = v40;
    NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)this + v14 + 88), &v41);
    *((_OWORD *)v20 + 6) = v42[0];
    *(_OWORD *)(v20 + 105) = *(_OWORD *)((char *)v42 + 9);
    re::ObjCObject::operator=((id *)((char *)this + v14 + 128), &v43);
    re::ObjCObject::operator=((id *)((char *)this + v14 + 136), &v44);
    re::Drawable::~Drawable((re::Drawable *)&v39);

    if (v45[0]) {
    v14 += 72;
    }
  }
  int v21 = [*a2 machSemaphore];
  if (!v21) {
    goto LABEL_35;
  }
  int v23 = v21;
  id v24 = (re *)re::DrawableQueuePayload::mapQueueStateShmem(a2);
  *((void *)this + 52) = v24;
  if (!v24) {
    goto LABEL_36;
  }
  id v26 = re::globalAllocators(v24);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26[2] + 32))(v26[2], 40, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v27, 0);
  *(void *)uint64_t v27 = &unk_26E6D61C8;
  *(_DWORD *)(v27 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = v23;
  *(void *)(v27 + 32) = 0;
  uint64_t v28 = *((void *)this + 54);
  *((void *)this + 54) = v27;
  if (v28)
  {

    uint64_t v27 = *((void *)this + 54);
  }
  *(void *)(v27 + 32) = *((void *)this + 52);
  *((unsigned char *)this + 295) = 1;
  uint64_t v29 = (re::AppleBuild *)[*a2 allowPixelFormatConversion];
  *((unsigned char *)this + 296) = (_BYTE)v29;
  if (v29)
  {
    long long v30 = (id *)v9[8];
    v45[0] = 0;
    id v36 = 0;
    re::Drawable::Drawable((uint64_t)&v39, v30[7], (uint64_t *)v45, (uint64_t)this, &v36, 4);
    *((void *)this + 38) = v39;
    *((_DWORD *)this + 78) = v40;
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 40, &v41);
    *(_OWORD *)((char *)this + 328) = v42[0];
    *(_OWORD *)((char *)this + 337) = *(_OWORD *)((char *)v42 + 9);
    re::ObjCObject::operator=((id *)this + 45, &v43);
    re::ObjCObject::operator=((id *)this + 46, &v44);
    re::Drawable::~Drawable((re::Drawable *)&v39);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1B0, memory_order_acquire) & 1) == 0) {
    goto LABEL_37;
  }
LABEL_22:
  BOOL v32 = *re::AppleBuild::get(v29) == 1 && _MergedGlobals_93 != 0;
  *((unsigned char *)this + 440) = v32;
  return this;
}

int *re::AppleBuild::get(re::AppleBuild *this)
{
  {
    re::AppleBuild::get(void)::build = 0;
    re::AppleBuild::determineBuildType((re::AppleBuild *)&re::AppleBuild::get(void)::build);
  }
  return &re::AppleBuild::get(void)::build;
}

void re::DrawableQueue::~DrawableQueue(re::DrawableQueue *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6D7D00;
  if (*((unsigned char *)this + 294))
  {
    atomic_store(0, (unsigned int *)(*(void *)(*((void *)this + 54) + 32) + 8));
    *((unsigned char *)this + 294) = 0;
  }
  uint64_t v2 = *((void *)this + 54);
  if (v2)
  {

    *((void *)this + 54) = 0;
  }
  uint64_t v3 = *((void *)this + 53);
  if (v3)
  {

    *((void *)this + 53) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 52);
  if (v4)
  {
    int v5 = (re *)munmap(v4, 0x150uLL);
    if (v5)
    {
      id v6 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v11 = *__error();
        v12[0] = 67109120;
        v12[1] = v11;
        _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Failed to munmap shmem for DrawableQueue: %{errno}d", (uint8_t *)v12, 8u);
      }
    }
    *((void *)this + 52) = 0;
  }
  uint64_t v7 = *((void *)this + 54);
  if (v7)
  {

    *((void *)this + 54) = 0;
  }
  uint64_t v8 = *((void *)this + 53);
  if (v8)
  {

    *((void *)this + 53) = 0;
  }
  uint64_t v9 = *((void *)this + 51);
  if (v9)
  {

    *((void *)this + 51) = 0;
  }
  re::Drawable::~Drawable((re::DrawableQueue *)((char *)this + 304));
  uint64_t v10 = 216;
  do
  {
    re::Drawable::~Drawable((re::DrawableQueue *)((char *)this + v10));
    v10 -= 72;
  }
  while (v10);

  objc_destroyWeak((id *)this + 6);
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::DrawableQueue::~DrawableQueue(this);
  JUMPOUT(0x237DBCBD0);
}

void re::DrawableQueue::setActiveRealityRendererScene(re::DrawableQueue *this, uint64_t a2)
{
  int v2 = a2;
  uint64_t v8 = *MEMORY[0x263EF8340];
  *((void *)this + re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 47) = a2;
  uint64_t v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = v2;
    __int16 v6 = 2048;
    uint64_t v7 = this;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "DrawableQueue::setActiveRealityRendererScene %d for drawableQueue instance %p", (uint8_t *)v5, 0x12u);
  }
  if (!*((unsigned char *)this + 294))
  {
    atomic_store(1u, (unsigned int *)(*(void *)(*((void *)this + 54) + 32) + 8));
    *((unsigned char *)this + 294) = 1;
  }
}

void re::DrawableQueue::afterFrameUpdate(re::DrawableQueue *this)
{
  uint64_t v2 = *(void *)(re::RenderFrameBox::get(*(void *)(*((void *)this + 8) + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)
                 + 368) & 0xFFFFFFFFFFFFFFFLL;
  os_unfair_lock_lock((os_unfair_lock_t)this + 72);
  uint64_t v3 = 0;
  uint64_t v4 = (char *)this + 120;
  do
  {
    if (!*v4) {
      goto LABEL_7;
    }
    if (*((void *)v4 - 1))
    {
      if ((unint64_t)(v2 - *((void *)v4 - 2)) < 2) {
        goto LABEL_7;
      }
      *((void *)v4 - 1) = 0;
    }
    *uint64_t v4 = 0;
    re::LocklessRingBuffer::readerReleaseBuffer(*((re::LocklessRingBuffer **)this + 54), v3);
LABEL_7:
    ++v3;
    v4 += 72;
  }
  while (v3 != 3);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
  if (*((unsigned char *)this + 440))
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 6);
    if (WeakRetained)
    {
      __int16 v6 = WeakRetained;
      uint64_t v7 = (uint64_t)WeakRetained - 8;
      uint64_t v8 = atomic_load((unsigned int *)(*(void *)(*((void *)this + 54) + 32) + 12));
      uint64_t v9 = v8 ^ 1;
      re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix((uint64_t)WeakRetained - 8, 1, (uint64_t)&v18);
      long long v10 = v19;
      long long v11 = v20;
      long long v12 = v21;
      uint64_t v13 = (_OWORD *)(*(void *)(*((void *)this + 54) + 32) + (v9 << 7));
      v13[5] = v18;
      v13[6] = v10;
      v13[7] = v11;
      unsigned char v13[8] = v12;
      re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix(v7, 2, (uint64_t)&v18);
      long long v14 = v19;
      long long v15 = v20;
      long long v16 = v21;
      uint64_t v17 = (_OWORD *)(*(void *)(*((void *)this + 54) + 32) + (v9 << 7));
      v17[9] = v18;
      id v17[10] = v14;
      v17[11] = v15;
      v17[12] = v16;
      atomic_store(v9, (unsigned int *)(*(void *)(*((void *)this + 54) + 32) + 12));
    }
  }
}

uint64_t re::DrawableQueue::latestPresentableDrawable(re::DrawableQueue *this, re::RenderFrame *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v4 = *((unsigned __int8 *)this + 295);
  int v5 = (re::LocklessRingBuffer *)*((void *)this + 54);
  if (v4) {
    unsigned int v6 = re::LocklessRingBuffer::readerAcquireBuffer(v5);
  }
  else {
    unsigned int v6 = re::LocklessRingBuffer::readerAcquireAnyWrittenBuffer(v5);
  }
  unsigned int v7 = v6;
  uint64_t v8 = *(void *)(re::RenderFrameBox::get(*(void *)(*((void *)this + 8) + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)
                 + 368) & 0xFFFFFFFFFFFFFFFLL;
  if (v7 > 2)
  {
    if ((*((_DWORD *)this + 98) & 0x80000000) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)this + 72);
      unsigned int v7 = *((_DWORD *)this + 98);
      long long v10 = (char *)this + 72 * (int)v7;
      uint64_t v11 = *((void *)v10 + 14) + 1;
      *((void *)v10 + 13) = v8;
      *((void *)v10 + 14) = v11;
      os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 72);
    uint64_t v9 = (char *)this + 72 * v7;
    v9[120] = 1;
    *((void *)v9 + 13) = v8;
    *((void *)v9 + 14) = 1;
    *((_DWORD *)this + 98) = v7;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
    re::LocklessRingBuffer::readerReleaseAnyWrittenBuffer(*((void *)this + 54));
  }
  if (*((_DWORD *)this + 98) == -1)
  {
    if (*((unsigned char *)this + 296) && !*((unsigned char *)this + 292))
    {
      *((unsigned char *)this + 292) = 1;
      return (uint64_t)this + 304;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(*((void *)this + 54) + 32) + 16 * (int)v7 + 40));
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    if (v12 == *((void *)this + 48))
    {
      char v13 = 0;
    }
    else
    {
      *((void *)this + 48) = v12;
      char v13 = 1;
    }
    *((unsigned char *)this + 292) = v13;
    uint64_t v17 = re::globalAllocators((re *)(char *)this + 8)[2];
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v17 + 32))(v17, 32, 0);
    *(void *)uint64_t v15 = &unk_26E6D7D48;
    *(void *)(v15 + 8) = this;
    *(void *)(v15 + 16) = v8;
    *(_DWORD *)(v15 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = v7;
    uint64_t v18 = v15;
    re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((re::RenderFrame *)((char *)a2 + 3872), (uint64_t)v16);
    re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v16);
    return (uint64_t)this + 72 * *((int *)this + 98) + 72;
  }
}

uint64_t re::DrawableQueue::nextDrawable(uint64_t a1, uint64_t a2)
{
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (*(unsigned char *)a2)
  {
    double v4 = *(float *)(a2 + 4);
    char v5 = 1;
  }
  else
  {
    double v4 = 0.0;
    char v5 = 0;
  }
  unsigned int v6 = re::LocklessRingBuffer::writerAcquireBuffer(*(void *)(a1 + 432), *(uint64_t *)&v4, v5);
  BOOL v7 = re::internal::enableSignposts(0, 0);
  if (v6 < 3)
  {
    if (v7) {
      kdebug_trace();
    }
    return a1 + 72 * v6 + 72;
  }
  else
  {
    if (v7) {
      kdebug_trace();
    }
    return 0;
  }
}

void re::DrawableQueue::makeSharedResourcePayload(re::DrawableQueue *this@<X0>, REDrawableQueuePayload **a2@<X8>)
{
  uint64_t v10[3] = *MEMORY[0x263EF8340];
  if (([*(id *)(*((void *)this + 8) + 184) supportsSharedTextureHandles] & 1) == 0)
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "m_renderManager.renderDevice().supportsSharedTextureHandles()", "makeSharedResourcePayload", 532);
    _os_crash();
    __break(1u);
  }
  uint64_t v5 = 0;
  memset(v10, 0, 24);
  unsigned int v6 = (id *)((char *)this + 88);
  do
  {
    id v9 = objc_msgSend(*v6, sel_newSharedTextureHandle);
    NS::SharedPtr<MTL::Texture>::operator=((void **)&v10[v5], &v9);
    if (v9) {

    }
    ++v5;
    v6 += 9;
  }
  while (v5 != 3);
  re::DrawableQueuePayload::make(*((unsigned int *)this + 6), *((unsigned int *)this + 7), *((_DWORD *)this + 8), v10, 3, *((unsigned __int8 *)this + 296), *(unsigned int *)(*((void *)this + 54) + 24), *((void *)this + 52), a2);
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v8 = (void *)v10[i];
    if (v8)
    {

      v10[i] = 0;
    }
  }
}

void re::DrawableQueue::encodeMipmapsGenerationJob(uint64_t a1, id *a2, uint64_t a3)
{
  re::mtl::CommandBuffer::makeBlitCommandEncoder(a2, &v9);
  re::DynamicString::format((re::DynamicString *)"DrawableQueue MipmapGenEncoder-%p", (re::DynamicString *)&v5, a3);
  if (v6) {
    uint64_t v4 = *(re::ns **)&v7[7];
  }
  else {
    uint64_t v4 = (re::ns *)v7;
  }
  re::ns::String::String((re::ns::String *)&v8, v4);
  [v9 setLabel:v8];

  if (v5 && (v6 & 1) != 0) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  [v9 generateMipmapsForTexture:*(void *)(a3 + 16)];
  [v9 endEncoding];
}

id re::DrawableQueue::getLatestReadableUnSynchronizedMetalTexture@<X0>(re::LocklessRingBuffer **this@<X0>, uint64_t a2@<X8>)
{
  id result = (id)re::LocklessRingBuffer::getLatestReadableBufferIndex(this[54]);
  if (result <= 3)
  {
    id result = this[9 * result + 11];
    *(void *)(a2 + 8) = result;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *(unsigned char *)a2 = v5;
  return result;
}

void re::AppleBuild::determineBuildType(re::AppleBuild *this)
{
  memset(&__p, 0, sizeof(__p));
  if (os_variant_has_internal_diagnostics()) {
    unint64_t v2 = 2;
  }
  else {
    unint64_t v2 = 1;
  }
  std::string::append[abi:nn180100]<char const*,0>(&__p, "/AppleInternal", "");
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (v5) {
    BOOL v3 = v5 == 255;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    ++v2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v2 >= 2) {
    *(_DWORD *)this = 1;
  }
}

std::string *std::string::append[abi:nn180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    long long v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    long long v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size + v7 - v9, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v14 = this;
    if ((v6 & 0x80) != 0) {
      long long v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    uint64_t v15 = (char *)v14 + size;
    do
    {
      char v16 = *v4++;
      *v15++ = v16;
    }
    while (v4 != a3);
    unsigned char *v15 = 0;
    std::string::size_type v17 = size + v7;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:nn180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void *std::string::__init_with_size[abi:nn180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unint64_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    id result = operator new(v8 + 1);
    v7[1] = a4;
    void v7[2] = v9 | 0x8000000000000000;
    *unint64_t v7 = result;
    unint64_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v7 = v10;
    unint64_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)unint64_t v7 = 0;
  return result;
}

uint64_t re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::FrameCount)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 32) = 0;
  uint64_t result = re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::Function<void ()(re::FrameCount)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 40 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          *(void *)(v11 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = *(void *)(v8 + 24);
          *(void *)(v11 + 32) = 0;
          re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(v11, v8);
          re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(v8);
          v8 += 40;
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      uint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 32) = v4;
        *(void *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      unint64_t v8 = v6;
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 32) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 32))(*(void *)(a2 + 32));
    re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(a2);
  }
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      unint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        uint64_t v7 = v5;
        unint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          unint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          unint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::~Callable()
{
}

void re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 288));
  uint64_t v3 = *(int *)(a1 + 24);
  uint64_t v4 = v2 + 72 * (int)v3;
  uint64_t v5 = *(void *)(v4 + 112) - 1;
  *(void *)(v4 + 112) = v5;
  if (!v5 && *(_DWORD *)(v2 + 392) != v3)
  {
    *(unsigned char *)(v2 + 72 * (int)v3 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
    re::LocklessRingBuffer::readerReleaseBuffer(*(re::LocklessRingBuffer **)(v2 + 432), v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 288));
  atomic_load((unint64_t *)(*(void *)(*(void *)(v2 + 432) + 32) + 16 * *(int *)(a1 + 24) + 40));
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
}

uint64_t re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6D7D48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6D7D48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::size()
{
  return 32;
}

void re::DrawableQueue::LocalRingBuffer::~LocalRingBuffer(re::DrawableQueue::LocalRingBuffer *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SMAssetStateCommand::getIntParameter(re::SMAssetStateCommand *this, const re::StringID *a2, uint64_t *a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = 0;
  for (uint64_t i = (void *)*((void *)this + 4); !re::StringID::operator==(i, a2) || v7 >= *((void *)this + 7); i += 2)
  {
    if (v3 == ++v7) {
      return 0;
    }
  }
  *a3 = *(void *)(*((void *)this + 9) + 8 * v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getFloatParameter(re::SMAssetStateCommand *this, const re::StringID *a2, float *a3)
{
  uint64_t v3 = *((void *)this + 12);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = 0;
  for (uint64_t i = (void *)*((void *)this + 14); !re::StringID::operator==(i, a2) || v7 >= *((void *)this + 17); i += 2)
  {
    if (v3 == ++v7) {
      return 0;
    }
  }
  *a3 = *(float *)(*((void *)this + 19) + 4 * v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getDoubleParameter(re::SMAssetStateCommand *this, const re::StringID *a2, double *a3)
{
  uint64_t v3 = *((void *)this + 22);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = 0;
  for (uint64_t i = (void *)*((void *)this + 24); !re::StringID::operator==(i, a2) || v7 >= *((void *)this + 27); i += 2)
  {
    if (v3 == ++v7) {
      return 0;
    }
  }
  *a3 = *(double *)(*((void *)this + 29) + 8 * v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getBoolParameter(re::SMAssetStateCommand *this, const re::StringID *a2, BOOL *a3)
{
  uint64_t v3 = *((void *)this + 32);
  if (!v3) {
    return 0;
  }
  unint64_t v7 = 0;
  for (uint64_t i = (void *)*((void *)this + 34); !re::StringID::operator==(i, a2) || v7 >= *((void *)this + 37); i += 2)
  {
    if (v3 == ++v7) {
      return 0;
    }
  }
  *a3 = *(unsigned char *)(*((void *)this + 39) + v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getStringParameter(re::SMAssetStateCommand *this, const re::StringID *a2)
{
  uint64_t v2 = *((void *)this + 42);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = *((void *)this + 44);
  while (!re::StringID::operator==((void *)(v7 + v5), a2))
  {
    ++v6;
    v5 += 16;
    if (v2 == v6) {
      return 0;
    }
  }
  if (v6 < *((void *)this + 47)) {
    return *((void *)this + 49) + v5;
  }
  else {
    return 0;
  }
}

uint64_t *re::StateMachineAsset::assetType(re::StateMachineAsset *this)
{
  {
    re::StateMachineAsset::assetType(void)::type = (uint64_t)"StateMachine";
    qword_26879E888 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::StateMachineAsset::assetType(void)::type);
  }
  return &re::StateMachineAsset::assetType(void)::type;
}

re *re::StateMachineAsset::initWithInitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v6 = a2[2];
  re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, v6);
  ++*(_DWORD *)(a1 + 24);
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::StateMachineInitializationData>::operator=(a1, a2);
  unint64_t v8 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = v11 + 40 * v10;
    do
    {
      uint64_t v13 = *(void *)(v11 + 16);
      if (v13)
      {
        long long v14 = *(uint64_t **)(v11 + 32);
        uint64_t v15 = 8 * v13;
        do
        {
          if (!*(void *)(a1 + 88))
          {
            memset(v23, 0, sizeof(v23));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v16 = *v14++;
          std::string::size_type v17 = *(void **)(a1 + 96);
          uint64_t v18 = re::globalAllocators(result);
          uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 72, 8);
          *(void *)uint64_t v19 = &unk_26E6D7F50;
          uint64_t v20 = *(void *)(v16 + 8);
          *(void *)(v19 + 8) = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
          *(void *)(v19 + 8) = *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
          *(void *)(v19 + 16) = *(void *)(v16 + 16);
          *(void *)(v16 + 8) = 0;
          *(void *)(v16 + 16) = "";
          *(void *)(v19 + 56) = 0;
          *(_DWORD *)(v19 + 48) = 0;
          *(void *)(v19 + 32) = 0;
          *(void *)(v19 + 40) = 0;
          *(void *)(v19 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
          *(void *)(v19 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = *(void *)(v16 + 24);
          *(void *)(v16 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
          *(void *)(v19 + 32) = *(void *)(v16 + 32);
          *(void *)(v16 + 32) = 0;
          uint64_t v21 = *(void *)(v19 + 40);
          *(void *)(v19 + 40) = *(void *)(v16 + 40);
          *(void *)(v16 + 40) = v21;
          uint64_t v22 = *(void *)(v19 + 56);
          *(void *)(v19 + 56) = *(void *)(v16 + 56);
          *(void *)(v16 + 56) = v22;
          ++*(_DWORD *)(v16 + 48);
          ++*(_DWORD *)(v19 + 48);
          *(void *)(v19 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = *(void *)(v16 + 64);
          *(void *)&v23[0] = v19;
          uint64_t result = (re *)re::DynamicArray<re::TransitionCondition *>::add(v17, v23);
          v15 -= 8;
        }
        while (v15);
      }
      v11 += 40;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t re::DynamicArray<re::StateMachineInitializationData>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::StateMachineInitializationData>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::StateMachineInitializationData>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::StateMachineInitializationData>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void *re::StateMachineAsset::initWithInitData(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a2[2];
  re::DynamicArray<re::RenderGraphOutputData>::setCapacity(a1, v6);
  ++*((_DWORD *)a1 + 6);
  re::DynamicArray<re::StateMachineInitializationData>::operator=((uint64_t)a1, a2);
  re::DynamicArray<re::SMAssetStateGraphGroup>::operator=((uint64_t)a1 + 40, a3);
  return re::StateMachineAsset::createRuntimeData(a1);
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetStateGraphGroup>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetStateGraphGroup>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetStateGraphGroup>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void *re::StateMachineAsset::createRuntimeData(void *this)
{
  uint64_t v2 = this;
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (!this[2] || !this[11])
  {
    unint64_t v3 = this[7];
    if (v2[7])
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = v2[9] + 40 * v4;
        uint64_t v6 = *(void *)(v5 + 16);
        if (v6)
        {
          uint64_t v7 = *(void *)(v5 + 32);
          uint64_t v31 = v2[9] + 40 * v4;
          uint64_t v32 = v7 + 168 * v6;
          do
          {
            unint64_t v8 = re::globalAllocators((re *)this);
            unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 72, 8);
            *(void *)unint64_t v9 = &unk_26E6D7F50;
            this = re::StringID::StringID((re::StringID *)(v9 + 8), (const StringID *)(v7 + 40));
            *(void *)(v9 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
            *(_DWORD *)(v9 + 48) = 0;
            *(void *)(v9 + 32) = 0;
            *(void *)(v9 + 40) = 0;
            *(void *)(v9 + 56) = 0;
            *(void *)(v9 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
            if (*(unsigned char *)(v7 + 56))
            {
              uint64_t v10 = re::globalAllocators((re *)this);
              unint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 112, 8);
              *(void *)unint64_t v1 = &unk_26E6D7F80;
              *(void *)(v1 + 8) = 0;
              *(void *)(v1 + 16) = 0;
              *(void *)(v1 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
              *(_DWORD *)(v1 + 32) = 0;
              *(void *)(v1 + 80) = 0;
              *(_OWORD *)(v1 + 40) = 0u;
              *(_OWORD *)(v1 + 56) = 0u;
              *(_DWORD *)(v1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
              re::StringID::StringID((re::StringID *)(v1 + 88), (const StringID *)(v7 + 144));
              *(void *)(v1 + 104) = 0;
              float v11 = *(float *)(v7 + 160);
              if (v11 >= 0.0) {
                *(float *)(v1 + 104) = v11;
              }
              this = re::StateGraph::addAnyState((void *)v9, (re::StateMachineState *)v1);
            }
            uint64_t v12 = *(void *)(v7 + 16);
            if (v12)
            {
              unint64_t v1 = *(void *)(v7 + 32);
              unint64_t v13 = v1 + 104 * v12;
              do
              {
                re::DynamicArray<re::SMAssetStateTransition>::DynamicArray((uint64_t)&v33, (uint64_t *)v1);
                re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)&v35 + 8, (uint64_t *)(v1 + 40));
                long long v14 = re::StringID::StringID((re::StringID *)&v38, (const StringID *)(v1 + 80));
                float v39 = *(float *)(v1 + 96);
                uint64_t v15 = re::globalAllocators(v14);
                uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 112, 8);
                *(void *)uint64_t v16 = &unk_26E6D7F80;
                *(void *)(v16 + 8) = 0;
                *(void *)(v16 + 16) = 0;
                *(void *)(v16 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
                *(_DWORD *)(v16 + 32) = 0;
                *(void *)(v16 + 80) = 0;
                *(_OWORD *)(v16 + 40) = 0u;
                *(_OWORD *)(v16 + 56) = 0u;
                *(_DWORD *)(v16 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
                re::StringID::StringID((re::StringID *)(v16 + 88), &v38);
                *(void *)(v16 + 104) = 0;
                if (v39 >= 0.0) {
                  *(float *)(v16 + 104) = v39;
                }
                *(void *)int v40 = v16;
                re::DynamicArray<re::TransitionCondition *>::add((void *)(v9 + 24), v40);
                re::StringID::destroyString((re::StringID *)&v38);
                re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)&v35 + 1);
                this = (void *)re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v33);
                v1 += 104;
              }
              while (v1 != v13);
            }
            unint64_t v17 = v2[11];
            if (v17 <= v4)
            {
              long long v36 = 0u;
              long long v37 = 0u;
              long long v34 = 0u;
              long long v35 = 0u;
              long long v33 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)int v40 = 136315906;
              *(void *)&v40[4] = "operator[]";
              __int16 v41 = 1024;
              int v42 = 468;
              __int16 v43 = 2048;
              unint64_t v44 = v4;
              __int16 v45 = 2048;
              unint64_t v46 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_33;
            }
            unint64_t v1 = v2[12];
            unint64_t v18 = v1 + 40 * v4;
            unint64_t v21 = *(void *)(v18 + 16);
            uint64_t v20 = (uint64_t *)(v18 + 16);
            unint64_t v19 = v21;
            if (v21 >= *(v20 - 1))
            {
              this = re::DynamicArray<float *>::growCapacity((void *)(v1 + 40 * v4), v19 + 1);
              unint64_t v19 = *v20;
            }
            unint64_t v22 = v1 + 40 * v4;
            *(void *)(*(void *)(v22 + 32) + 8 * v19) = v9;
            *uint64_t v20 = v19 + 1;
            ++*(_DWORD *)(v22 + 24);
            v7 += 168;
          }
          while (v7 != v32);
          uint64_t v23 = v31;
          if (*(void *)(v31 + 16))
          {
            unint64_t v1 = 0;
            while (1)
            {
              unint64_t v9 = v2[11];
              if (v9 <= v4) {
                break;
              }
              uint64_t v24 = v2[12];
              unint64_t v9 = *(void *)(v24 + 40 * v4 + 16);
              if (v9 <= v1) {
                goto LABEL_34;
              }
              uint64_t v25 = *(void *)(v23 + 32);
              id v26 = *(re::StateGraph **)(*(void *)(v24 + 40 * v4 + 32) + 8 * v1);
              if (*(unsigned char *)(v25 + 168 * v1 + 56)) {
                this = (void *)re::StateMachineAsset::createStateTransitionsFromAssetData((uint64_t)v2, (void *)(v25 + 168 * v1 + 64), v26, v4);
              }
              uint64_t v27 = v25 + 168 * v1;
              uint64_t v28 = *(void *)(v27 + 16);
              if (v28)
              {
                uint64_t v29 = *(void *)(v27 + 32);
                uint64_t v30 = v29 + 104 * v28;
                do
                {
                  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray((uint64_t)&v33, (uint64_t *)v29);
                  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)&v35 + 8, (uint64_t *)(v29 + 40));
                  re::StringID::StringID((re::StringID *)&v38, (const StringID *)(v29 + 80));
                  float v39 = *(float *)(v29 + 96);
                  re::StateMachineAsset::createStateTransitionsFromAssetData((uint64_t)v2, &v33, v26, v4);
                  re::StringID::destroyString((re::StringID *)&v38);
                  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)&v35 + 1);
                  this = (void *)re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v33);
                  v29 += 104;
                }
                while (v29 != v30);
              }
              ++v1;
              uint64_t v23 = v31;
              if (v1 >= *(void *)(v31 + 16)) {
                goto LABEL_30;
              }
            }
LABEL_33:
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v33 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int v40 = 136315906;
            *(void *)&v40[4] = "operator[]";
            __int16 v41 = 1024;
            int v42 = 468;
            __int16 v43 = 2048;
            unint64_t v44 = v4;
            __int16 v45 = 2048;
            unint64_t v46 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_34:
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v33 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)int v40 = 136315906;
            *(void *)&v40[4] = "operator[]";
            __int16 v41 = 1024;
            int v42 = 789;
            __int16 v43 = 2048;
            unint64_t v44 = v1;
            __int16 v45 = 2048;
            unint64_t v46 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
        }
LABEL_30:
        ++v4;
      }
      while (v4 < v2[7]);
    }
  }
  return this;
}

uint64_t re::StateMachineAsset::createStateTransitionsFromAssetData(uint64_t result, void *a2, re::StateGraph *a3, unint64_t a4)
{
  uint64_t v4 = a2[2];
  if (v4)
  {
    uint64_t v7 = result;
    uint64_t v8 = a2[4];
    uint64_t v9 = v8 + 96 * v4;
    uint64_t v10 = (re::StringID *)(a2 + 10);
    do
    {
      if (*(void *)(v7 + 88) <= a4)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t result = re::StateGraph::createStateTransition(a3, *(void *)(v7 + 96) + 40 * a4, v10, (void *)(v8 + 56), (const re::StringID *)(v8 + 72), (StringID *)(v8 + 40), *(unsigned char *)(v8 + 92), *(float *)(v8 + 88));
      uint64_t v11 = *(void *)(v8 + 16);
      if (v11)
      {
        uint64_t v12 = *(void *)(v8 + 32);
        uint64_t v13 = 40 * v11;
        do
        {
          switch(*(unsigned char *)(v12 + 16))
          {
            case 1:
              uint64_t result = re::StateGraph::addIntTransitionCondition(a3, v10, (void *)(v8 + 40), (const StringID *)v12, *(unsigned char *)(v12 + 37), *(void *)(v12 + 24));
              break;
            case 2:
              uint64_t result = re::StateGraph::addFloatTransitionCondition(a3, v10, (void *)(v8 + 40), (const StringID *)v12, *(unsigned char *)(v12 + 37), *(float *)(v12 + 32));
              break;
            case 3:
              uint64_t result = re::StateGraph::addBoolTransitionCondition(a3, v10, (void *)(v8 + 40), (const StringID *)v12, *(unsigned char *)(v12 + 37), *(unsigned char *)(v12 + 36));
              break;
            case 4:
              uint64_t result = (uint64_t)re::StateGraph::addTriggerTransitionCondition(a3, v10, (const re::StringID *)(v8 + 40), (const StringID *)v12);
              break;
            default:
              break;
          }
          v12 += 40;
          v13 -= 40;
        }
        while (v13);
      }
      v8 += 96;
    }
    while (v8 != v9);
  }
  return result;
}

void *re::StateMachineAsset::getAllGraphs@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  unint64_t v3 = this[7];
  if (v3)
  {
    uint64_t v4 = this;
    int v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t v9 = v4[9] + 40 * i;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (unint64_t *)(v9 + 16);
      unint64_t v10 = v12;
      if (v12)
      {
        unint64_t v13 = 0;
        do
        {
          if (v4[11] <= i)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v14 = v4[12];
          if (*(void *)(v14 + 40 * i + 16) <= v13) {
            goto LABEL_23;
          }
          uint64_t v15 = *(void *)(*(void *)(v14 + 40 * i + 32) + 8 * v13);
          unint64_t v16 = *(void *)(a2 + 8);
          if (v7 >= v16)
          {
            unint64_t v17 = v7 + 1;
            if (v16 < v7 + 1)
            {
              if (*(void *)a2)
              {
                unint64_t v18 = 2 * v16;
                if (!v16) {
                  unint64_t v18 = 8;
                }
                if (v18 <= v17) {
                  unint64_t v19 = v7 + 1;
                }
                else {
                  unint64_t v19 = v18;
                }
                this = re::DynamicArray<float *>::setCapacity((void *)a2, v19);
                int v5 = *(_DWORD *)(a2 + 24);
              }
              else
              {
                this = re::DynamicArray<float *>::setCapacity((void *)a2, v17);
                int v5 = *(_DWORD *)(a2 + 24) + 1;
              }
            }
            unint64_t v7 = *(void *)(a2 + 16);
            uint64_t v6 = *(void *)(a2 + 32);
            unint64_t v10 = *v11;
          }
          *(void *)(v6 + 8 * v7++) = v15;
          *(void *)(a2 + 16) = v7;
          *(_DWORD *)(a2 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = ++v5;
          ++v13;
        }
        while (v13 < v10);
        unint64_t v3 = v4[7];
      }
    }
  }
  return this;
}

uint64_t re::StateMachineAsset::deinit(re::StateMachineAsset *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 12);
    uint64_t v4 = v3 + 40 * v2;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (v5)
      {
        uint64_t v6 = *(uint64_t **)(v3 + 32);
        uint64_t v7 = 8 * v5;
        do
        {
          uint64_t v8 = *v6++;
          re::internal::destroyPersistent<re::StateGraph>((re *)"deinit", 312, v8);
          v7 -= 8;
        }
        while (v7);
      }
      v3 += 40;
    }
    while (v3 != v4);
  }
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((void *)this + 10);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this);
  return re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 40);
}

re *re::internal::destroyPersistent<re::StateGraph>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::StateGraph::deinit((re::StateGraph *)a3);
    re::DynamicArray<unsigned long>::deinit(a3 + 24);
    re::StringID::destroyString((re::StringID *)(a3 + 8));
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::StateMachineAssetLoader::createRuntimeData(int a1, re::StateMachineAsset *this)
{
  return 1;
}

re *re::StateMachineAssetLoader::unloadAsset(re::StateMachineAssetLoader *this, re::StateMachineAsset *a2)
{
  return re::internal::destroyPersistent<re::StateMachineAsset>((re *)"unloadAsset", 335, a2);
}

re *re::internal::destroyPersistent<re::StateMachineAsset>(re *result, uint64_t a2, re::StateMachineAsset *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::StateMachineAsset::~StateMachineAsset(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::StateMachineAsset *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::StateMachineAssetLoader::isSupportedSourceExtension(re::StateMachineAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "restatemachine") == 0;
}

char **re::StateMachineAssetLoader::introspectionType(re::StateMachineAssetLoader *this)
{
  unint64_t v1 = &off_268773000;
  {
    unint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::StateMachineAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"StateMachineAsset", (uint64_t (*)(re::internal *))re::allocInfo_StateMachineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_StateMachineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StateMachineAsset>, 0);
      unint64_t v1 = &off_268773000;
    }
  }
  return v1[352];
}

void *re::allocInfo_StateMachineInitializationData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C1C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C608, "StateMachineInitializationData");
    __cxa_guard_release(&qword_26AF7C1C0);
  }
  return &unk_26AF7C608;
}

void re::initInfo_StateMachineInitializationData(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x8634B6D7058CB40;
  v18[1] = "StateMachineInitializationData";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C1C8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "layerName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C2F0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "stateGraphName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C2F8 = v12;
      unint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "initialStateName";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v16 + 32) = 0x2000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C300 = v16;
      __cxa_guard_release(&qword_26AF7C1C8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF7C2F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::StateMachineInitializationData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::StateMachineInitializationData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::StateMachineInitializationData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::StateMachineInitializationData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::StateMachineInitializationData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[2] = 0;
  a3[3] = "";
  a3[4] = 0;
  a3[5] = "";
}

void re::internal::defaultDestruct<re::StateMachineInitializationData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::StateMachineInitializationData>(void *result)
{
  *uint64_t result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  result[4] = 0;
  result[5] = "";
  return result;
}

void re::internal::defaultDestructV2<re::StateMachineInitializationData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_SMAssetTransitionCondition(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C1E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C680, "SMAssetTransitionCondition");
    __cxa_guard_release(&qword_26AF7C1E0);
  }
  return &unk_26AF7C680;
}

void re::initInfo_SMAssetTransitionCondition(re *this, re::IntrospectionBase *a2)
{
  v30[0] = 0xC3FB3DEF23D84D60;
  v30[1] = "SMAssetTransitionCondition";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C1D8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_TransitionConditionType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_type";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v8 + 32) = 0x1000000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C348 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_parameterName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v12 + 32) = 2;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C350 = v12;
      unint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_int64_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_intTestValue";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v16 + 32) = 0x1800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C358 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "m_floatTestValue";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C360 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "m_BOOLTestValue";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v24 + 32) = 0x2400000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C368 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::introspect_StateTransitionConditionOperator((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "m_operator";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v28 + 32) = 0x2500000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C370 = v28;
      __cxa_guard_release(&qword_26AF7C1D8);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF7C348;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetTransitionCondition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetTransitionCondition>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetTransitionCondition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetTransitionCondition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

void re::internal::defaultConstruct<re::SMAssetTransitionCondition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a3 + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = 0;
}

void re::internal::defaultDestruct<re::SMAssetTransitionCondition>(int a1, int a2, re::StringID *this)
{
}

uint64_t re::internal::defaultConstructV2<re::SMAssetTransitionCondition>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = "";
  *(unsigned char *)(result + 16) = 0;
  *(void *)(result + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(result + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = 0;
  return result;
}

void *re::allocInfo_SMAssetStateTransition(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C1F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C6F8, "SMAssetStateTransition");
    __cxa_guard_release(&qword_26AF7C1F8);
  }
  return &unk_26AF7C6F8;
}

void re::initInfo_SMAssetStateTransition(re *this, re::IntrospectionBase *a2)
{
  unint64_t v43 = 0xEE3C36B22D66D260;
  v44[0] = "SMAssetStateTransition";
  re::StringID::destroyString((re::StringID *)&v43);
  *((_OWORD *)this + 2) = v38;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C1F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C1F0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v8 + 32) = 0x2800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C378 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_toGraphName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v12 + 32) = 0x3800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C380 = v12;
      unint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_toStateName";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v16 + 32) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C388 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "m_transitionTime";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v20 + 32) = 0x5800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C390 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_StateTransitionInterruptionType((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "m_interruptionType";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v24 + 32) = 0x5C00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C398 = v24;
      uint64_t v25 = (re *)re::introspectionAllocator((re *)v24);
      id v26 = v25;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2A0, memory_order_acquire) & 1) == 0)
      {
        uint64_t v25 = (re *)__cxa_guard_acquire(&qword_26AF7C2A0);
        if (v25)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C3A8);
          qword_26AF7C3A8 = (uint64_t)&unk_26E6D7FD8;
          __cxa_guard_release(&qword_26AF7C2A0);
        }
      }
      if ((_MergedGlobals_94 & 1) == 0)
      {
        uint64_t v27 = (void *)qword_26AF7C1E8;
        if (qword_26AF7C1E8
          || (uint64_t v27 = re::allocInfo_SMAssetTransitionCondition(v25),
              qword_26AF7C1E8 = (uint64_t)v27,
              re::initInfo_SMAssetTransitionCondition((re *)v27, v28),
              (_MergedGlobals_94 & 1) == 0))
        {
          _MergedGlobals_94 = 1;
          int v29 = *((_DWORD *)v27 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C3A8, 0);
          qword_26AF7C3B8 = 0x2800000003;
          dword_26AF7C3C0 = v29;
          word_26AF7C3C4 = 0;
          *(void *)&xmmword_26AF7C3C8 = 0;
          *((void *)&xmmword_26AF7C3C8 + 1) = 0xFFFFFFFFLL;
          qword_26AF7C3D8 = (uint64_t)v27;
          qword_26AF7C3E0 = 0;
          qword_26AF7C3A8 = (uint64_t)&unk_26E6D7FD8;
          re::IntrospectionRegistry::add(v30, v31);
          re::getPrettyTypeName((re *)&qword_26AF7C3A8, (const re::IntrospectionBase *)&v43);
          if (v44[0]) {
            uint64_t v32 = (const char *)v44[1];
          }
          else {
            uint64_t v32 = (char *)v44 + 1;
          }
          if (v43 && (v44[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v43 + 40))();
          }
          long long v40 = *((_OWORD *)v27 + 2);
          long long v33 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v41);
          if (v33)
          {
            uint64_t v34 = *v33;
            *((void *)&v39 + 1) = v34;
          }
          else
          {
            long long v42 = v40;
            re::TypeBuilder::beginListType((uint64_t)&v43, v41, 1, 0x28uLL, 8uLL, &v42);
            re::TypeBuilder::setConstructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v43, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v43, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v43, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v35);
          }
          xmmword_26AF7C3C8 = v39;
          re::StringID::destroyString((re::StringID *)v41);
        }
      }
      uint64_t v36 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "m_conditions";
      *(void *)(v36 + 16) = &qword_26AF7C3A8;
      *(void *)(v36 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v36 + 32) = 6;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C3A0 = v36;
      __cxa_guard_release(&qword_26AF7C1F0);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF7C378;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetStateTransition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetStateTransition>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetStateTransition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetStateTransition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v37 = v38;
}

void re::internal::defaultConstruct<re::SMAssetStateTransition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = "";
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = "";
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a3 + 80) = "";
  *(_DWORD *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 92) = 0;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateTransition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 72));
  re::StringID::destroyString((re::StringID *)(a3 + 56));
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  return re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetStateTransition>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = "";
  *(void *)(result + 56) = 0;
  *(void *)(result + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = "";
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = "";
  *(_DWORD *)(result + 88) = 0;
  *(unsigned char *)(result + 92) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetStateTransition>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 72));
  re::StringID::destroyString((re::StringID *)(a1 + 56));
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  return re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a1);
}

void *re::allocInfo_SMAssetStateCommand(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C210))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C770, "SMAssetStateCommand");
    __cxa_guard_release(&qword_26AF7C210);
  }
  return &unk_26AF7C770;
}

void re::initInfo_SMAssetStateCommand(re *this, re::IntrospectionBase *a2)
{
  uint64_t v67 = 0x2258AF08EFF7D2A0;
  v68[0] = "SMAssetStateCommand";
  re::StringID::destroyString((re::StringID *)&v67);
  *((_OWORD *)this + 2) = v62;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C208, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C208);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_entityName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v8 + 32) = 0x19800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5A8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_REStateCommandID((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_commandType";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v12 + 32) = 0x19000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5B0 = v12;
      unint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_intParameterNames";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v16 + 32) = 3;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5B8 = v16;
      unint64_t v18 = re::introspectionAllocator((re *)v16);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF7C2A8))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C3E8);
        qword_26AF7C3E8 = (uint64_t)&unk_26E6D8070;
        __cxa_guard_release(&qword_26AF7C2A8);
      }
      if ((byte_26AF7C1B9 & 1) == 0)
      {
        long long v19 = re::introspect_int64_t((re *)1, v17);
        if ((byte_26AF7C1B9 & 1) == 0)
        {
          uint64_t v20 = (uint64_t)v19;
          byte_26AF7C1B9 = 1;
          int v21 = v19[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C3E8, 0);
          qword_26AF7C3F8 = 0x2800000003;
          dword_26AF7C400 = v21;
          word_26AF7C404 = 0;
          *(void *)&xmmword_26AF7C408 = 0;
          *((void *)&xmmword_26AF7C408 + 1) = 0xFFFFFFFFLL;
          qword_26AF7C418 = v20;
          qword_26AF7C420 = 0;
          qword_26AF7C3E8 = (uint64_t)&unk_26E6D8070;
          re::IntrospectionRegistry::add(v22, v23);
          re::getPrettyTypeName((re *)&qword_26AF7C3E8, (const re::IntrospectionBase *)&v67);
          if (v68[0]) {
            uint64_t v24 = (const char *)v68[1];
          }
          else {
            uint64_t v24 = (char *)v68 + 1;
          }
          if (v67 && (v68[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v67 + 40))();
          }
          long long v64 = *(_OWORD *)(v20 + 32);
          uint64_t v25 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v65);
          if (v25)
          {
            uint64_t v26 = *v25;
            *((void *)&v63 + 1) = v26;
          }
          else
          {
            long long v66 = v64;
            re::TypeBuilder::beginListType((uint64_t)&v67, v65, 1, 0x28uLL, 8uLL, &v66);
            re::TypeBuilder::setConstructor((uint64_t)&v67, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v67, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v67, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v67, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v67, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v67, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v67, v27);
          }
          xmmword_26AF7C408 = v63;
          re::StringID::destroyString((re::StringID *)v65);
        }
      }
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "m_intParameters";
      *(void *)(v28 + 16) = &qword_26AF7C3E8;
      *(void *)(v28 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v28 + 32) = 0x2800000004;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5C0 = v28;
      int v29 = re::introspectionAllocator((re *)v28);
      long long v31 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "m_floatParameterNames";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v32 + 32) = 0x5000000005;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5C8 = v32;
      long long v33 = re::introspectionAllocator((re *)v32);
      uint64_t v35 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "m_floatParameters";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v36 + 32) = 0x7800000006;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5D0 = v36;
      long long v37 = re::introspectionAllocator((re *)v36);
      long long v39 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "m_doubleParameterNames";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v40 + 32) = 0xA000000007;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5D8 = v40;
      __int16 v41 = re::introspectionAllocator((re *)v40);
      unint64_t v43 = re::IntrospectionInfo<re::DynamicArray<double>>::get(1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "m_doubleParameters";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v44 + 32) = 0xC800000008;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5E0 = v44;
      __int16 v45 = re::introspectionAllocator((re *)v44);
      uint64_t v47 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "m_BOOLParameterNames";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v48 + 32) = 0xF000000009;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5E8 = v48;
      id v49 = re::introspectionAllocator((re *)v48);
      long long v51 = re::IntrospectionInfo<re::DynamicArray<BOOL>>::get(1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + 8) = "m_BOOLParameters";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v52 + 32) = 0x1180000000ALL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5F0 = v52;
      id v53 = re::introspectionAllocator((re *)v52);
      uint64_t v55 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + 8) = "m_stringParameterNames";
      *(void *)(v56 + 16) = v55;
      *(void *)(v56 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v56 + 32) = 0x1400000000BLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 48) = 0;
      *(void *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C5F8 = v56;
      uint64_t v57 = re::introspectionAllocator((re *)v56);
      uint64_t v59 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v58);
      uint64_t v60 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *(void *)(v60 + 8) = "m_stringParameters";
      *(void *)(v60 + 16) = v59;
      *(void *)(v60 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v60 + 32) = 0x1680000000CLL;
      *(_DWORD *)(v60 + 40) = 0;
      *(void *)(v60 + 48) = 0;
      *(void *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C600 = v60;
      __cxa_guard_release(&qword_26AF7C208);
    }
  }
  *((void *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((void *)this + 8) = &qword_26AF7C5A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetStateCommand>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetStateCommand>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetStateCommand>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetStateCommand>;
  re::IntrospectionRegistry::add(this, v3);
  long long v61 = v62;
}

double re::internal::defaultConstruct<re::SMAssetStateCommand>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 392) = 0;
  *(unsigned char *)(a3 + 400) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_DWORD *)(a3 + 2re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 2re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_DWORD *)(a3 + 344) = 0;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_DWORD *)(a3 + re::DynamicArray<re::MaterialTechniqueData>::deinit((uint64_t)this + 384) = 0;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(void *)(a3 + 408) = 0;
  *(void *)(a3 + 416) = "";
  return result;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateCommand>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 408));
  re::DynamicArray<re::StringID>::deinit(a3 + 360);
  re::DynamicArray<re::StringID>::deinit(a3 + 320);
  re::DynamicArray<unsigned long>::deinit(a3 + 280);
  re::DynamicArray<re::StringID>::deinit(a3 + 240);
  re::DynamicArray<unsigned long>::deinit(a3 + 200);
  re::DynamicArray<re::StringID>::deinit(a3 + 160);
  re::DynamicArray<unsigned long>::deinit(a3 + 120);
  re::DynamicArray<re::StringID>::deinit(a3 + 80);
  re::DynamicArray<unsigned long>::deinit(a3 + 40);
  return re::DynamicArray<re::StringID>::deinit(a3);
}

double re::internal::defaultConstructV2<re::SMAssetStateCommand>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 2re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 2re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<re::MaterialTechniqueData>::deinit((uint64_t)this + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = "";
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetStateCommand>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 408));
  re::DynamicArray<re::StringID>::deinit(a1 + 360);
  re::DynamicArray<re::StringID>::deinit(a1 + 320);
  re::DynamicArray<unsigned long>::deinit(a1 + 280);
  re::DynamicArray<re::StringID>::deinit(a1 + 240);
  re::DynamicArray<unsigned long>::deinit(a1 + 200);
  re::DynamicArray<re::StringID>::deinit(a1 + 160);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  re::DynamicArray<re::StringID>::deinit(a1 + 80);
  re::DynamicArray<unsigned long>::deinit(a1 + 40);
  return re::DynamicArray<re::StringID>::deinit(a1);
}

void *re::allocInfo_SMAssetState(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C228))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C7E8, "SMAssetState");
    __cxa_guard_release(&qword_26AF7C228);
  }
  return &unk_26AF7C7E8;
}

void re::initInfo_SMAssetState(re *this, re::IntrospectionBase *a2)
{
  uint64_t v43 = 0x3C56069A78F8FAF6;
  uint64_t v44 = "SMAssetState";
  re::StringID::destroyString((re::StringID *)&v43);
  *((_OWORD *)this + 2) = v38;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C220, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C220);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v8 + 32) = 0x5000000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C308 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_totalExitTime";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v12 + 32) = 0x6000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C310 = v12;
      unint64_t v13 = (re *)re::introspectionAllocator((re *)v12);
      uint64_t v14 = v13;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2B0, memory_order_acquire) & 1) == 0)
      {
        unint64_t v13 = (re *)__cxa_guard_acquire(&qword_26AF7C2B0);
        if (v13)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C428);
          qword_26AF7C428 = (uint64_t)&unk_26E6D8108;
          __cxa_guard_release(&qword_26AF7C2B0);
        }
      }
      if ((byte_26AF7C1BA & 1) == 0)
      {
        uint64_t v15 = (void *)qword_26AF7C200;
        if (qword_26AF7C200
          || (uint64_t v15 = re::allocInfo_SMAssetStateTransition(v13),
              qword_26AF7C200 = (uint64_t)v15,
              re::initInfo_SMAssetStateTransition((re *)v15, v16),
              (byte_26AF7C1BA & 1) == 0))
        {
          byte_26AF7C1BA = 1;
          int v17 = *((_DWORD *)v15 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C428, 0);
          qword_26AF7C438 = 0x2800000003;
          dword_26AF7C440 = v17;
          word_26AF7C444 = 0;
          *(void *)&xmmword_26AF7C448 = 0;
          *((void *)&xmmword_26AF7C448 + 1) = 0xFFFFFFFFLL;
          qword_26AF7C458 = (uint64_t)v15;
          qword_26AF7C460 = 0;
          qword_26AF7C428 = (uint64_t)&unk_26E6D8108;
          re::IntrospectionRegistry::add(v18, v19);
          re::getPrettyTypeName((re *)&qword_26AF7C428, (const re::IntrospectionBase *)&v43);
          if (v44) {
            uint64_t v20 = v45;
          }
          else {
            uint64_t v20 = (char *)&v44 + 1;
          }
          if (v43 && (v44 & 1) != 0) {
            (*(void (**)(void))(*(void *)v43 + 40))();
          }
          long long v40 = *((_OWORD *)v15 + 2);
          int v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v41);
          if (v21)
          {
            uint64_t v22 = *v21;
            *((void *)&v39 + 1) = v22;
          }
          else
          {
            long long v42 = v40;
            re::TypeBuilder::beginListType((uint64_t)&v43, v41, 1, 0x28uLL, 8uLL, &v42);
            re::TypeBuilder::setConstructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v43, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v43, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v43, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v23);
          }
          xmmword_26AF7C448 = v39;
          re::StringID::destroyString((re::StringID *)v41);
        }
      }
      uint64_t v24 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "m_transitions";
      *(void *)(v24 + 16) = &qword_26AF7C428;
      *(void *)(v24 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v24 + 32) = 3;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C318 = v24;
      uint64_t v25 = (re *)re::introspectionAllocator((re *)v24);
      uint64_t v26 = v25;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2B8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v25 = (re *)__cxa_guard_acquire(&qword_26AF7C2B8);
        if (v25)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C468);
          qword_26AF7C468 = (uint64_t)&unk_26E6D81A0;
          __cxa_guard_release(&qword_26AF7C2B8);
        }
      }
      if ((byte_26AF7C1BB & 1) == 0)
      {
        uint64_t v27 = (void *)qword_26AF7C218;
        if (qword_26AF7C218
          || (uint64_t v27 = re::allocInfo_SMAssetStateCommand(v25),
              qword_26AF7C218 = (uint64_t)v27,
              re::initInfo_SMAssetStateCommand((re *)v27, v28),
              (byte_26AF7C1BB & 1) == 0))
        {
          byte_26AF7C1BB = 1;
          int v29 = *((_DWORD *)v27 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C468, 0);
          qword_26AF7C478 = 0x2800000003;
          dword_26AF7C480 = v29;
          word_26AF7C484 = 0;
          *(void *)&xmmword_26AF7C488 = 0;
          *((void *)&xmmword_26AF7C488 + 1) = 0xFFFFFFFFLL;
          qword_26AF7C498 = (uint64_t)v27;
          qword_26AF7C4A0 = 0;
          qword_26AF7C468 = (uint64_t)&unk_26E6D81A0;
          re::IntrospectionRegistry::add(v30, v31);
          re::getPrettyTypeName((re *)&qword_26AF7C468, (const re::IntrospectionBase *)&v43);
          if (v44) {
            uint64_t v32 = v45;
          }
          else {
            uint64_t v32 = (char *)&v44 + 1;
          }
          if (v43 && (v44 & 1) != 0) {
            (*(void (**)(void))(*(void *)v43 + 40))();
          }
          long long v40 = *((_OWORD *)v27 + 2);
          long long v33 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v41);
          if (v33)
          {
            uint64_t v34 = *v33;
            *((void *)&v39 + 1) = v34;
          }
          else
          {
            long long v42 = v40;
            re::TypeBuilder::beginListType((uint64_t)&v43, v41, 1, 0x28uLL, 8uLL, &v42);
            re::TypeBuilder::setConstructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v43, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v43, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v43, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v43, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v35);
          }
          xmmword_26AF7C488 = v39;
          re::StringID::destroyString((re::StringID *)v41);
        }
      }
      uint64_t v36 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "m_commands";
      *(void *)(v36 + 16) = &qword_26AF7C468;
      *(void *)(v36 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v36 + 32) = 0x2800000004;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C320 = v36;
      __cxa_guard_release(&qword_26AF7C220);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7C308;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetState>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetState>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetState>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v37 = v38;
}

double re::internal::defaultConstruct<re::SMAssetState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a3 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = "";
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SMAssetState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 80));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(a3 + 40));
  return re::DynamicArray<re::SMAssetStateTransition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::SMAssetState>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = "";
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetState>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 80));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(a1 + 40));
  return re::DynamicArray<re::SMAssetStateTransition>::deinit(a1);
}

void *re::allocInfo_SMAssetStateGraph(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C240))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C860, "SMAssetStateGraph");
    __cxa_guard_release(&qword_26AF7C240);
  }
  return &unk_26AF7C860;
}

void re::initInfo_SMAssetStateGraph(re *this, re::IntrospectionBase *a2)
{
  uint64_t v36 = 0x4E16780EA9971126;
  v37[0] = "SMAssetStateGraph";
  re::StringID::destroyString((re::StringID *)&v36);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C238, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C238);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v8 + 32) = 0x2800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C328 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_hasAnyState";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v12 + 32) = 0x3800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C330 = v12;
      unint64_t v13 = (re *)re::introspectionAllocator((re *)v12);
      uint64_t v14 = v13;
      uint64_t v15 = (re *)qword_26AF7C230;
      if (!qword_26AF7C230)
      {
        uint64_t v15 = (re *)re::allocInfo_SMAssetState(v13);
        qword_26AF7C230 = (uint64_t)v15;
        re::initInfo_SMAssetState(v15, v16);
      }
      uint64_t v17 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "m_anyState";
      *(void *)(v17 + 16) = v15;
      *(void *)(v17 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v17 + 32) = 0x4000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C338 = v17;
      unint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      long long v19 = v18;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2C0, memory_order_acquire) & 1) == 0)
      {
        unint64_t v18 = (re *)__cxa_guard_acquire(&qword_26AF7C2C0);
        if (v18)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C4A8);
          qword_26AF7C4A8 = (uint64_t)&unk_26E6D8238;
          __cxa_guard_release(&qword_26AF7C2C0);
        }
      }
      if ((byte_26AF7C1BC & 1) == 0)
      {
        uint64_t v20 = (void *)qword_26AF7C230;
        if (qword_26AF7C230
          || (uint64_t v20 = re::allocInfo_SMAssetState(v18),
              qword_26AF7C230 = (uint64_t)v20,
              re::initInfo_SMAssetState((re *)v20, v21),
              (byte_26AF7C1BC & 1) == 0))
        {
          byte_26AF7C1BC = 1;
          int v22 = *((_DWORD *)v20 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C4A8, 0);
          qword_26AF7C4B8 = 0x2800000003;
          dword_26AF7C4C0 = v22;
          word_26AF7C4C4 = 0;
          *(void *)&xmmword_26AF7C4C8 = 0;
          *((void *)&xmmword_26AF7C4C8 + 1) = 0xFFFFFFFFLL;
          qword_26AF7C4D8 = (uint64_t)v20;
          qword_26AF7C4E0 = 0;
          qword_26AF7C4A8 = (uint64_t)&unk_26E6D8238;
          re::IntrospectionRegistry::add(v23, v24);
          re::getPrettyTypeName((re *)&qword_26AF7C4A8, (const re::IntrospectionBase *)&v36);
          if (v37[0]) {
            uint64_t v25 = (const char *)v37[1];
          }
          else {
            uint64_t v25 = (char *)v37 + 1;
          }
          if (v36 && (v37[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v36 + 40))();
          }
          long long v33 = *((_OWORD *)v20 + 2);
          uint64_t v26 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
          if (v26)
          {
            uint64_t v27 = *v26;
            *((void *)&v32 + 1) = v27;
          }
          else
          {
            long long v35 = v33;
            re::TypeBuilder::beginListType((uint64_t)&v36, v34, 1, 0x28uLL, 8uLL, &v35);
            re::TypeBuilder::setConstructor((uint64_t)&v36, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v36, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v36, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v36, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v36, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v36, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v36, v28);
          }
          xmmword_26AF7C4C8 = v32;
          re::StringID::destroyString((re::StringID *)v34);
        }
      }
      uint64_t v29 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "m_states";
      *(void *)(v29 + 16) = &qword_26AF7C4A8;
      *(void *)(v29 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v29 + 32) = 4;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C340 = v29;
      __cxa_guard_release(&qword_26AF7C238);
    }
  }
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7C328;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetStateGraph>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetStateGraph>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetStateGraph>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetStateGraph>;
  re::IntrospectionRegistry::add(this, v3);
  long long v30 = v31;
}

double re::internal::defaultConstruct<re::SMAssetStateGraph>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = "";
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_DWORD *)(a3 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_DWORD *)(a3 + 128) = 0;
  *(void *)(a3 + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = "";
  *(_DWORD *)(a3 + 160) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateGraph>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (uint64_t)(a3 + 8);
  re::StringID::destroyString((re::StringID *)(a3 + 18));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(a3 + 13);
  re::DynamicArray<re::SMAssetStateTransition>::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 5));
  return re::DynamicArray<re::SMAssetState>::deinit((uint64_t)a3);
}

double re::internal::defaultConstructV2<re::SMAssetStateGraph>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = "";
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = "";
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetStateGraph>(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 8);
  re::StringID::destroyString((re::StringID *)(a1 + 18));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(a1 + 13);
  re::DynamicArray<re::SMAssetStateTransition>::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 5));
  return re::DynamicArray<re::SMAssetState>::deinit((uint64_t)a1);
}

void *re::allocInfo_SMAssetStateGraphGroup(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C250, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C250))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C8D8, "SMAssetStateGraphGroup");
    __cxa_guard_release(&qword_26AF7C250);
  }
  return &unk_26AF7C8D8;
}

void re::initInfo_SMAssetStateGraphGroup(re *this, re::IntrospectionBase *a2)
{
  v8[0] = 0xEE39C57C083FC358;
  v8[1] = "SMAssetStateGraphGroup";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C260, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C260);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraph>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "stateGraphs";
      *(void *)(v6 + 16) = &qword_26AF7C4E8;
      *(void *)(v6 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C258 = v6;
      __cxa_guard_release(&qword_26AF7C260);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7C258;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetStateGraphGroup>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetStateGraphGroup>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetStateGraphGroup>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetStateGraphGroup>;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

void re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraph>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2C8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7C2C8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C4E8);
      qword_26AF7C4E8 = (uint64_t)&unk_26E6D82D0;
      __cxa_guard_release(&qword_26AF7C2C8);
    }
  }
  if ((byte_26AF7C1BD & 1) == 0)
  {
    unint64_t v1 = (void *)qword_26AF7C248;
    if (qword_26AF7C248
      || (unint64_t v1 = re::allocInfo_SMAssetStateGraph(a1),
          qword_26AF7C248 = (uint64_t)v1,
          re::initInfo_SMAssetStateGraph((re *)v1, v2),
          (byte_26AF7C1BD & 1) == 0))
    {
      byte_26AF7C1BD = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C4E8, 0);
      qword_26AF7C4F8 = 0x2800000003;
      dword_26AF7C500 = v3;
      word_26AF7C504 = 0;
      *(void *)&xmmword_26AF7C508 = 0;
      *((void *)&xmmword_26AF7C508 + 1) = 0xFFFFFFFFLL;
      qword_26AF7C518 = (uint64_t)v1;
      qword_26AF7C520 = 0;
      qword_26AF7C4E8 = (uint64_t)&unk_26E6D82D0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7C4E8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7C508 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::SMAssetStateGraphGroup>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateGraphGroup>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::SMAssetStateGraph>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetStateGraphGroup>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_DWORD *)(result + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  return result;
}

void *re::allocInfo_SMAssetStateGraphGroupCollection(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C270))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C950, "SMAssetStateGraphGroupCollection");
    __cxa_guard_release(&qword_26AF7C270);
  }
  return &unk_26AF7C950;
}

void re::initInfo_SMAssetStateGraphGroupCollection(re *this, re::IntrospectionBase *a2)
{
  v8[0] = 0x9807B33386548AD4;
  v8[1] = "SMAssetStateGraphGroupCollection";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C280, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C280);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraphGroup>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "stateGraphGroups";
      *(void *)(v6 + 16) = &qword_26AF7C528;
      *(void *)(v6 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C278 = v6;
      __cxa_guard_release(&qword_26AF7C280);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF7C278;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SMAssetStateGraphGroupCollection>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SMAssetStateGraphGroupCollection>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SMAssetStateGraphGroupCollection>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SMAssetStateGraphGroupCollection>;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

void re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraphGroup>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2D0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7C2D0);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C528);
      qword_26AF7C528 = (uint64_t)&unk_26E6D8368;
      __cxa_guard_release(&qword_26AF7C2D0);
    }
  }
  if ((byte_26AF7C1BE & 1) == 0)
  {
    unint64_t v1 = (void *)qword_26AF7C268;
    if (qword_26AF7C268
      || (unint64_t v1 = re::allocInfo_SMAssetStateGraphGroup(a1),
          qword_26AF7C268 = (uint64_t)v1,
          re::initInfo_SMAssetStateGraphGroup((re *)v1, v2),
          (byte_26AF7C1BE & 1) == 0))
    {
      byte_26AF7C1BE = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C528, 0);
      qword_26AF7C538 = 0x2800000003;
      dword_26AF7C540 = v3;
      word_26AF7C544 = 0;
      *(void *)&xmmword_26AF7C548 = 0;
      *((void *)&xmmword_26AF7C548 + 1) = 0xFFFFFFFFLL;
      qword_26AF7C558 = (uint64_t)v1;
      qword_26AF7C560 = 0;
      qword_26AF7C528 = (uint64_t)&unk_26E6D8368;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7C528, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7C548 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::SMAssetStateGraphGroupCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateGraphGroupCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetStateGraphGroupCollection>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_DWORD *)(result + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  return result;
}

void *re::allocInfo_StateMachineAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C290, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7C290))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7C9C8, "StateMachineAsset");
    __cxa_guard_release(&qword_26AF7C290);
  }
  return &unk_26AF7C9C8;
}

void re::initInfo_StateMachineAsset(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x1BF3F5A4A26CA3F4;
  v13[1] = "StateMachineAsset";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C298, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7C298);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::StateMachineInitializationData>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "stateMachineInitializationData";
      *(void *)(v6 + 16) = &qword_26AF7C568;
      *(void *)(v6 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C2E0 = v6;
      long long v7 = (re *)re::introspectionAllocator((re *)v6);
      uint64_t v8 = v7;
      uint64_t v9 = (re *)qword_26AF7C288;
      if (!qword_26AF7C288)
      {
        uint64_t v9 = (re *)re::allocInfo_SMAssetStateGraphGroupCollection(v7);
        qword_26AF7C288 = (uint64_t)v9;
        re::initInfo_SMAssetStateGraphGroupCollection(v9, v10);
      }
      uint64_t v11 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "assetStateGraphs";
      *(void *)(v11 + 16) = v9;
      *(void *)(v11 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
      qword_26AF7C2E8 = v11;
      __cxa_guard_release(&qword_26AF7C298);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF7C2E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::StateMachineAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::StateMachineAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::StateMachineAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::StateMachineAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::DynamicArray<re::StateMachineInitializationData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7C2D8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF7C2D8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7C568);
      qword_26AF7C568 = (uint64_t)&unk_26E6D8400;
      __cxa_guard_release(&qword_26AF7C2D8);
    }
  }
  if ((byte_26AF7C1BF & 1) == 0)
  {
    unint64_t v1 = (void *)qword_26AF7C1D0;
    if (qword_26AF7C1D0
      || (unint64_t v1 = re::allocInfo_StateMachineInitializationData(a1),
          qword_26AF7C1D0 = (uint64_t)v1,
          re::initInfo_StateMachineInitializationData((re *)v1, v2),
          (byte_26AF7C1BF & 1) == 0))
    {
      byte_26AF7C1BF = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7C568, 0);
      qword_26AF7C578 = 0x2800000003;
      dword_26AF7C580 = v3;
      word_26AF7C584 = 0;
      *(void *)&xmmword_26AF7C588 = 0;
      *((void *)&xmmword_26AF7C588 + 1) = 0xFFFFFFFFLL;
      qword_26AF7C598 = (uint64_t)v1;
      qword_26AF7C5A0 = 0;
      qword_26AF7C568 = (uint64_t)&unk_26E6D8400;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF7C568, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF7C588 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::StateMachineAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a3 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::StateMachineAsset>(int a1, int a2, re::StateMachineAsset *this)
{
}

double re::internal::defaultConstructV2<re::StateMachineAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t re::introspect_StateMachineAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineAsset", (uint64_t (*)(re::internal *))re::allocInfo_StateMachineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_StateMachineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StateMachineAsset>, this);
}

void re::StateMachineAssetLoader::~StateMachineAssetLoader(re::StateMachineAssetLoader *this)
{
}

void re::StateGraph::~StateGraph(re::StateGraph *this)
{
}

{
  uint64_t vars8;

  re::StateGraph::deinit(this);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  re::StringID::destroyString((re::StateGraph *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

void re::StateMachineState::~StateMachineState(re::StateMachineState *this)
{
  re::StateMachineState::~StateMachineState(this);
  JUMPOUT(0x237DBCBD0);
}

{
  char *v2;

  *(void *)this = &unk_26E6D7F80;
  uint64_t v2 = (char *)this + 8;
  re::StateMachineState::deinit(this);
  re::StringID::destroyString((re::StateMachineState *)((char *)this + 88));
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetStateTransition>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateTransition>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateTransition *,re::SMAssetStateTransition *,re::SMAssetStateTransition *>((uint64_t)&v17, *(void *)(a2 + 32), *(void *)(a2 + 32) + 96 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v11 = a1[4];
      uint64_t v12 = 96 * v9;
      uint64_t v13 = 96 * v4;
      do
      {
        uint64_t v14 = v11 + v12;
        re::DynamicArray<re::SMAssetTransitionCondition>::DynamicArray(v11 + v12, (uint64_t *)(v10 + v12));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 40), (const StringID *)(v10 + v12 + 40));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 56), (const StringID *)(v10 + v12 + 56));
        uint64_t result = (uint64_t)re::StringID::StringID((re::StringID *)(v11 + v12 + 72), (const StringID *)(v10 + v12 + 72));
        int v15 = *(_DWORD *)(v10 + v12 + 88);
        *(unsigned char *)(v14 + 92) = *(unsigned char *)(v10 + v12 + 92);
        *(_DWORD *)(v14 + 88) = v15;
        v13 -= 96;
        v10 += 96;
        v11 += 96;
      }
      while (v12 != v13);
    }
  }
  else
  {
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateTransition *,re::SMAssetStateTransition *,re::SMAssetStateTransition *>((uint64_t)&v16, *(void *)(a2 + 32), *(void *)(a2 + 32) + 96 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 96 * v4;
      uint64_t v8 = 96 * v6 - 96 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v7 + 72));
        re::StringID::destroyString((re::StringID *)(v7 + 56));
        re::StringID::destroyString((re::StringID *)(v7 + 40));
        uint64_t result = re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v7);
        v7 += 96;
        v8 -= 96;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

void *re::DynamicArray<re::SMAssetStateTransition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x60uLL))
        {
          uint64_t v2 = 96 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            uint64_t v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SMAssetStateTransition>(v5[4], v5[4] + 96 * v5[2], v7);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::SMAssetStateTransition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetStateTransition>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v5 + v6;
      uint64_t v8 = a3 + v6;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)uint64_t v8 = 0;
      *(_DWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
      uint64_t v9 = *(void *)(v5 + v6 + 8);
      *(void *)uint64_t v8 = *(void *)(v5 + v6);
      *(void *)(v8 + 8) = v9;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      uint64_t v10 = *(void *)(a3 + v6 + 16);
      *(void *)(v8 + 16) = *(void *)(v5 + v6 + 16);
      *(void *)(v7 + 16) = v10;
      uint64_t v11 = *(void *)(a3 + v6 + 32);
      *(void *)(v8 + 32) = *(void *)(v5 + v6 + 32);
      *(void *)(v7 + 32) = v11;
      *(_DWORD *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = *(_DWORD *)(v5 + v6 + 24) + 1;
      *(_DWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = *(_DWORD *)(a3 + v6 + 24) + 1;
      uint64_t v12 = (re::StringID *)(v5 + v6 + 40);
      LOBYTE(v11) = *(void *)v12;
      *(void *)(v8 + 40) = *(void *)(a3 + v6 + 40) & 0xFFFFFFFFFFFFFFFELL | *(void *)v12 & 1;
      *(void *)(v8 + 40) = *(void *)v12 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      *(void *)(v8 + 48) = *(void *)(v5 + v6 + 48);
      *(void *)(v7 + 48) = "";
      *(void *)uint64_t v12 = 0;
      uint64_t v13 = (re::StringID *)(v5 + v6 + 56);
      LOBYTE(v11) = *(void *)v13;
      *(void *)(v8 + 56) = *(void *)(a3 + v6 + 56) & 0xFFFFFFFFFFFFFFFELL | *(void *)v13 & 1;
      *(void *)(v8 + 56) = *(void *)v13 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      *(void *)(v8 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = *(void *)(v5 + v6 + 64);
      *(void *)(v7 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = "";
      *(void *)uint64_t v13 = 0;
      uint64_t v14 = (re::StringID *)(v5 + v6 + 72);
      LOBYTE(v11) = *(void *)v14;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *(void *)(a3 + v6 + 72) & 0xFFFFFFFFFFFFFFFELL | *(void *)v14 & 1;
      *(void *)(v8 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *(void *)v14 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      *(void *)(v8 + 80) = *(void *)(v5 + v6 + 80);
      *(void *)(v7 + 80) = "";
      *(void *)uint64_t v14 = 0;
      LODWORD(v11) = *(_DWORD *)(v5 + v6 + 88);
      *(unsigned char *)(v8 + 92) = *(unsigned char *)(v5 + v6 + 92);
      *(_DWORD *)(v8 + 88) = v11;
      re::StringID::destroyString(v14);
      re::StringID::destroyString(v13);
      re::StringID::destroyString(v12);
      uint64_t result = re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v5 + v6);
      v6 += 96;
    }
    while (v7 + 96 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetTransitionCondition>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 40);
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateTransition *,re::SMAssetStateTransition *,re::SMAssetStateTransition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    re::DynamicArray<re::SMAssetTransitionCondition>::operator=(a4 + v7, (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 40), (uint64_t *)(a2 + v7 + 40));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 56), (uint64_t *)(a2 + v7 + 56));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 72), (uint64_t *)(a2 + v7 + 72));
    int v10 = *(_DWORD *)(a2 + v7 + 88);
    *(unsigned char *)(v8 + 92) = *(unsigned char *)(a2 + v7 + 92);
    *(_DWORD *)(v8 + 88) = v10;
    v7 += 96;
  }
  while (v9 + 96 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetTransitionCondition>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetTransitionCondition>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetTransitionCondition>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetTransitionCondition>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::SMAssetTransitionCondition>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(a1, *(void *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 40 * a1[2], a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = 5 * v8;
      uint64_t v10 = *(void *)(a2 + 32) + 8 * v9;
      uint64_t v11 = (re::StringID *)(a1[4] + 8 * v9);
      uint64_t v12 = 40 * v4 - 8 * v9;
      do
      {
        uint64_t v13 = re::StringID::StringID(v11, (const StringID *)v10);
        long long v14 = *(_OWORD *)(v10 + 16);
        *(void *)((char *)v13 + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = *(void *)(v10 + 30);
        *((_OWORD *)v13 + 1) = v14;
        v10 += 40;
        uint64_t v11 = (re::StringID *)((char *)v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 40 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = (re::StringID *)(a1[4] + 40 * v4);
      uint64_t v7 = 40 * v5 - 40 * v4;
      do
      {
        re::StringID::destroyString(v6);
        uint64_t v6 = (re::StringID *)((char *)v6 + 40);
        v7 -= 40;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::SMAssetTransitionCondition>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    uint64_t v4 = 40 * v2;
    do
    {
      re::StringID::destroyString(v3);
      uint64_t v3 = (re::StringID *)((char *)v3 + 40);
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[5 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          unint64_t *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          unint64_t *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *uint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          long long v13 = *((_OWORD *)v8 + 1);
          *(unint64_t *)((char *)v11 + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = *(uint64_t *)((char *)v8 + 30);
          *((_OWORD *)v11 + 1) = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 5;
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v4);
      long long v6 = *(_OWORD *)(v4 + 16);
      *(void *)(a3 + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = *(void *)(v4 + 30);
      *(_OWORD *)(a3 + 16) = v6;
      v4 += 40;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::SMAssetTransitionCondition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetTransitionCondition>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetStateCommand>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateCommand>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateCommand *,re::SMAssetStateCommand *,re::SMAssetStateCommand *>((uint64_t)&v7, *(void *)(a2 + 32), *(void *)(a2 + 32) + 424 * a1[2], a1[4]);
    uint64_t result = (uint64_t)re::ObjectHelper::copyConstruct<re::SMAssetStateCommand>((re::StringID *)(a1[4] + 424 * a1[2]), *(void *)(a2 + 32) + 424 * a1[2], *(void *)(a2 + 32) + 424 * v4);
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateCommand *,re::SMAssetStateCommand *,re::SMAssetStateCommand *>((uint64_t)&v6, *(void *)(a2 + 32), *(void *)(a2 + 32) + 424 * v4, a1[4]);
    uint64_t result = re::ObjectHelper::destroy<re::SMAssetStateCommand>(a1[4] + 424 * v4, a1[4] + 424 * a1[2]);
  }
  a1[2] = v4;
  return result;
}

void *re::DynamicArray<re::SMAssetStateCommand>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x1A8uLL))
        {
          uint64_t v2 = 424 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 424 * a2, 8);
          if (result)
          {
            uint64_t v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SMAssetStateCommand>(v5[4], v5[4] + 424 * v5[2], v7);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 424, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::SMAssetStateCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetStateCommand>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      re::SMAssetStateCommand::SMAssetStateCommand(a3 + v6, v5 + v6);
      re::StringID::destroyString((re::StringID *)(v5 + v6 + 408));
      re::DynamicArray<re::StringID>::deinit(v5 + v6 + 360);
      re::DynamicArray<re::StringID>::deinit(v5 + v6 + 320);
      re::DynamicArray<unsigned long>::deinit(v5 + v6 + 280);
      re::DynamicArray<re::StringID>::deinit(v5 + v6 + 240);
      re::DynamicArray<unsigned long>::deinit(v5 + v6 + 200);
      re::DynamicArray<re::StringID>::deinit(v5 + v6 + 160);
      re::DynamicArray<unsigned long>::deinit(v5 + v6 + 120);
      re::DynamicArray<re::StringID>::deinit(v5 + v6 + 80);
      re::DynamicArray<unsigned long>::deinit(v5 + v6 + 40);
      uint64_t result = re::DynamicArray<re::StringID>::deinit(v5 + v6);
      v6 += 424;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

uint64_t re::SMAssetStateCommand::SMAssetStateCommand(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + 8) = v2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(result + 16);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v3;
  uint64_t v4 = *(void *)(result + 32);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(result + 56);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v6;
  uint64_t v7 = *(void *)(result + 72);
  *(void *)(result + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(void *)(result + 112) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(result + 88) = v8;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v9 = *(void *)(result + 96);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v9;
  uint64_t v10 = *(void *)(result + 112);
  *(void *)(result + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  *(void *)(result + 152) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *(void *)(result + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(_DWORD *)(result + 144) = 0;
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(result + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = *(void *)(a2 + 120);
  *(void *)(result + 128) = v11;
  *(void *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v12 = *(void *)(result + 136);
  *(void *)(result + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = *(void *)(a2 + 136);
  *(void *)(a2 + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = v12;
  uint64_t v13 = *(void *)(result + 152);
  *(void *)(result + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 144);
  *(void *)(result + 192) = 0;
  *(void *)(result + 168) = 0;
  *(void *)(result + 1re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0;
  *(void *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  uint64_t v14 = *(void *)(a2 + 168);
  *(void *)(result + 160) = *(void *)(a2 + 160);
  *(void *)(result + 168) = v14;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v15 = *(void *)(result + 176);
  *(void *)(result + 1re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = *(void *)(a2 + 176);
  *(void *)(a2 + 1re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = v15;
  uint64_t v16 = *(void *)(result + 192);
  *(void *)(result + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = v16;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(result + 184);
  *(void *)(result + 232) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 200) = 0;
  *(_DWORD *)(result + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(result + 200) = *(void *)(a2 + 200);
  *(void *)(result + 208) = v17;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  uint64_t v18 = *(void *)(result + 216);
  *(void *)(result + 216) = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = v18;
  uint64_t v19 = *(void *)(result + 232);
  *(void *)(result + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = v19;
  ++*(_DWORD *)(a2 + 224);
  ++*(_DWORD *)(result + 224);
  *(void *)(result + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 248) = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = 0;
  *(void *)(result + 240) = 0;
  *(_DWORD *)(result + 2re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  uint64_t v20 = *(void *)(a2 + 248);
  *(void *)(result + 240) = *(void *)(a2 + 240);
  *(void *)(result + 248) = v20;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  uint64_t v21 = *(void *)(result + 256);
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 256) = v21;
  uint64_t v22 = *(void *)(result + 272);
  *(void *)(result + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = *(void *)(a2 + 272);
  *(void *)(a2 + 2re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v22;
  ++*(_DWORD *)(a2 + 264);
  ++*(_DWORD *)(result + 264);
  *(void *)(result + 312) = 0;
  *(void *)(result + 288) = 0;
  *(void *)(result + 296) = 0;
  *(void *)(result + 280) = 0;
  *(_DWORD *)(result + 304) = 0;
  uint64_t v23 = *(void *)(a2 + 288);
  *(void *)(result + 280) = *(void *)(a2 + 280);
  *(void *)(result + 288) = v23;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  uint64_t v24 = *(void *)(result + 296);
  *(void *)(result + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = v24;
  uint64_t v25 = *(void *)(result + 312);
  *(void *)(result + 312) = *(void *)(a2 + 312);
  *(void *)(a2 + 312) = v25;
  ++*(_DWORD *)(a2 + 304);
  ++*(_DWORD *)(result + 304);
  *(void *)(result + 352) = 0;
  *(void *)(result + 328) = 0;
  *(void *)(result + 3re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *(void *)(result + 320) = 0;
  *(_DWORD *)(result + 344) = 0;
  uint64_t v26 = *(void *)(a2 + 328);
  *(void *)(result + 320) = *(void *)(a2 + 320);
  *(void *)(result + 328) = v26;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  uint64_t v27 = *(void *)(result + 336);
  *(void *)(result + 3re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = *(void *)(a2 + 336);
  *(void *)(a2 + 3re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = v27;
  uint64_t v28 = *(void *)(result + 352);
  *(void *)(result + 352) = *(void *)(a2 + 352);
  *(void *)(a2 + 352) = v28;
  ++*(_DWORD *)(a2 + 344);
  ++*(_DWORD *)(result + 344);
  *(void *)(result + 392) = 0;
  *(void *)(result + 368) = 0;
  *(void *)(result + 3re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = 0;
  *(void *)(result + 360) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::MaterialTechniqueData>::deinit((uint64_t)this + 384) = 0;
  uint64_t v29 = *(void *)(a2 + 368);
  *(void *)(result + 360) = *(void *)(a2 + 360);
  *(void *)(result + 368) = v29;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  uint64_t v30 = *(void *)(result + 376);
  *(void *)(result + 3re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = *(void *)(a2 + 376);
  *(void *)(a2 + 3re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76) = v30;
  uint64_t v31 = *(void *)(result + 392);
  *(void *)(result + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = v31;
  ++*(_DWORD *)(a2 + 384);
  ++*(_DWORD *)(result + 384);
  *(unsigned char *)(result + 400) = *(unsigned char *)(a2 + 400);
  uint64_t v32 = *(void *)(a2 + 408);
  *(void *)(result + 408) = *(void *)(result + 408) & 0xFFFFFFFFFFFFFFFELL | v32 & 1;
  *(void *)(result + 408) = *(void *)(a2 + 408) & 0xFFFFFFFFFFFFFFFELL | v32 & 1;
  *(void *)(result + 416) = *(void *)(a2 + 416);
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 416) = "";
  return result;
}

uint64_t re::ObjectHelper::destroy<re::SMAssetStateCommand>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 408));
      re::DynamicArray<re::StringID>::deinit(v3 + 360);
      re::DynamicArray<re::StringID>::deinit(v3 + 320);
      re::DynamicArray<unsigned long>::deinit(v3 + 280);
      re::DynamicArray<re::StringID>::deinit(v3 + 240);
      re::DynamicArray<unsigned long>::deinit(v3 + 200);
      re::DynamicArray<re::StringID>::deinit(v3 + 160);
      re::DynamicArray<unsigned long>::deinit(v3 + 120);
      re::DynamicArray<re::StringID>::deinit(v3 + 80);
      re::DynamicArray<unsigned long>::deinit(v3 + 40);
      uint64_t result = re::DynamicArray<re::StringID>::deinit(v3);
      v3 += 424;
    }
    while (v3 != a2);
  }
  return result;
}

re::StringID *re::ObjectHelper::copyConstruct<re::SMAssetStateCommand>(re::StringID *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6, (uint64_t *)(a2 + v6));
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v5 + v6 + 40, (uint64_t *)(a2 + v6 + 40));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 80, (uint64_t *)(a2 + v6 + 80));
      re::DynamicArray<float>::DynamicArray((uint64_t)v5 + v6 + 120, (uint64_t *)(a2 + v6 + 120));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 160, (uint64_t *)(a2 + v6 + 160));
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v5 + v6 + 200, (uint64_t *)(a2 + v6 + 200));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 240, (uint64_t *)(a2 + v6 + 240));
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)v5 + v6 + 280, (uint64_t *)(a2 + v6 + 280));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 320, (uint64_t *)(a2 + v6 + 320));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 360, (uint64_t *)(a2 + v6 + 360));
      *((unsigned char *)v5 + v6 + 400) = *(unsigned char *)(a2 + v6 + 400);
      uint64_t result = re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 408), (const StringID *)(a2 + v6 + 408));
      v6 += 424;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateCommand *,re::SMAssetStateCommand *,re::SMAssetStateCommand *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    re::DynamicArray<re::StringID>::operator=(a4, (uint64_t *)v5);
    re::DynamicArray<unsigned long long>::operator=(a4 + 40, (uint64_t *)(v5 + 40));
    re::DynamicArray<re::StringID>::operator=(a4 + 80, (uint64_t *)(v5 + 80));
    re::DynamicArray<float>::operator=(a4 + 120, (uint64_t *)(v5 + 120));
    re::DynamicArray<re::StringID>::operator=(a4 + 160, (uint64_t *)(v5 + 160));
    re::DynamicArray<unsigned long long>::operator=(a4 + 200, (uint64_t *)(v5 + 200));
    re::DynamicArray<re::StringID>::operator=(a4 + 240, (uint64_t *)(v5 + 240));
    re::DynamicArray<BOOL>::operator=(a4 + 280, (uint64_t *)(v5 + 280));
    re::DynamicArray<re::StringID>::operator=(a4 + 320, (uint64_t *)(v5 + 320));
    re::DynamicArray<re::StringID>::operator=(a4 + 360, (uint64_t *)(v5 + 360));
    *(unsigned char *)(a4 + 400) = *(unsigned char *)(v5 + 400);
    re::StringID::operator=((unint64_t *)(a4 + 408), (uint64_t *)(v5 + 408));
    a4 += 424;
    v5 += 424;
  }
  while (v5 != v6);
  return v6;
}

void *re::DynamicArray<re::SMAssetStateCommand>::deinit(void *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    uint64_t result = (void *)result[4];
    if (result)
    {
      re::ObjectHelper::destroy<re::SMAssetStateCommand>((uint64_t)result, (uint64_t)&result[53 * v1[2]]);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[4]);
    }
    v1[4] = 0;
    v1[1] = 0;
    v1[2] = 0;
    void *v1 = 0;
    ++*((_DWORD *)v1 + 6);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 96 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 72));
          re::StringID::destroyString((re::StringID *)(v3 + 56));
          re::StringID::destroyString((re::StringID *)(v3 + 40));
          re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v3);
          v3 += 96;
          v5 -= 96;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::DynamicArray<re::SMAssetStateGraph>::deinit(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 168 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 18));
          re::DynamicArray<re::SMAssetStateCommand>::deinit(v3 + 13);
          re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)(v3 + 8));
          re::StringID::destroyString((re::StringID *)(v3 + 5));
          re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v3);
          v3 += 21;
          v5 -= 168;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetState>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 104 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 80));
          re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(v3 + 40));
          re::DynamicArray<re::SMAssetStateTransition>::deinit(v3);
          v3 += 104;
          v5 -= 104;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::StateMachineInitializationData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::StateMachineInitializationData *,re::StateMachineInitializationData *,re::StateMachineInitializationData *>(*(unint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 48 * *(void *)(a1 + 16)), *(unint64_t **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 48 * v8;
      uint64_t v12 = 48 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 16), (const StringID *)(v9 + v11 + 16));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 32), (const StringID *)(v9 + v11 + 32));
        v9 += 48;
        v12 -= 48;
        v10 += 48;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::StateMachineInitializationData *,re::StateMachineInitializationData *,re::StateMachineInitializationData *>(*(unint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 48 * v4), *(unint64_t **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = *(void *)(a1 + 32) + 48 * v4;
      uint64_t v7 = 48 * v5 - 48 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 32));
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 16) = v4;
}

void re::DynamicArray<re::StateMachineInitializationData>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 48 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 32));
      re::StringID::destroyString((re::StringID *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::StateMachineInitializationData *,re::StateMachineInitializationData *,re::StateMachineInitializationData *>(unint64_t *result, uint64_t *a2, unint64_t *a3)
{
  if (result != (unint64_t *)a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      re::StringID::operator=(a3, v5);
      re::StringID::operator=(a3 + 2, v5 + 2);
      uint64_t result = re::StringID::operator=(a3 + 4, v5 + 4);
      v5 += 6;
      a3 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::FixedArray<re::DynamicArray<re::StateGraph *>>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)(result + 32) = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)uint64_t result = 0;
      *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
      result += 40;
      --v6;
    }
    while (v6);
  }
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,0>(*(void *)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * a1[2]), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 5 * v9;
      uint64_t v11 = (uint64_t *)(*(void *)(a2 + 32) + 8 * v10);
      uint64_t result = a1[4] + 8 * v10;
      uint64_t v12 = 40 * v4 - 8 * v10;
      do
      {
        uint64_t v13 = re::DynamicArray<re::SMAssetStateGraph>::DynamicArray(result, v11);
        v11 += 5;
        uint64_t result = v13 + 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,0>(*(void *)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * v4), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 40 * v4;
      uint64_t v8 = 40 * v6 - 40 * v4;
      do
      {
        uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::deinit(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 40 * v2;
    do
    {
      uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::deinit(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void *re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 40 * v9;
        uint64_t v11 = v7 + 4;
        do
        {
          void *v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 4) = *(void *)v8;
          *(v11 - 3) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 2);
          *(v11 - 2) = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          uint64_t v14 = *v11;
          void *v11 = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<re::SMAssetStateGraph>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      if (v5 != (uint64_t *)a3)
      {
        uint64_t v6 = *v5;
        if (*(void *)a3)
        {
          if (v6)
          {
            uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::copy((void *)a3, (uint64_t)v5);
            ++*(_DWORD *)(a3 + 24);
          }
          else
          {
            uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::clear(a3);
          }
        }
        else if (v6)
        {
          unint64_t v7 = v5[2];
          *(void *)a3 = v6;
          re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a3, v7);
          ++*(_DWORD *)(a3 + 24);
          uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::copy((void *)a3, (uint64_t)v5);
        }
      }
      v5 += 5;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateGraph>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateGraph *,re::SMAssetStateGraph *,re::SMAssetStateGraph *>((uint64_t)&v17, *(void *)(a2 + 32), *(void *)(a2 + 32) + 168 * a1[2], a1[4]);
    uint64_t v10 = a1[2];
    if (v10 != v4)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = a1[4];
      uint64_t v13 = 168 * v10;
      uint64_t v14 = 168 * v4;
      do
      {
        uint64_t v15 = v12 + v13;
        re::DynamicArray<re::SMAssetState>::DynamicArray(v12 + v13, (uint64_t *)(v11 + v13));
        re::StringID::StringID((re::StringID *)(v12 + v13 + 40), (const StringID *)(v11 + v13 + 40));
        *(unsigned char *)(v15 + 56) = *(unsigned char *)(v11 + v13 + 56);
        re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v12 + v13 + 64, (uint64_t *)(v11 + v13 + 64));
        re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v12 + v13 + 104, (uint64_t *)(v11 + v13 + 104));
        uint64_t result = (uint64_t)re::StringID::StringID((re::StringID *)(v12 + v13 + 144), (const StringID *)(v11 + v13 + 144));
        *(_DWORD *)(v15 + 160) = *(_DWORD *)(v11 + v13 + 160);
        v14 -= 168;
        v11 += 168;
        v12 += 168;
      }
      while (v13 != v14);
    }
  }
  else
  {
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateGraph *,re::SMAssetStateGraph *,re::SMAssetStateGraph *>((uint64_t)&v16, *(void *)(a2 + 32), *(void *)(a2 + 32) + 168 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4];
      uint64_t v8 = 168 * v4;
      uint64_t v9 = 168 * v6;
      do
      {
        re::StringID::destroyString((re::StringID *)(v7 + v8 + 144));
        re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(v7 + v8 + 104));
        re::DynamicArray<re::SMAssetStateTransition>::deinit(v7 + v8 + 64);
        re::StringID::destroyString((re::StringID *)(v7 + v8 + 40));
        uint64_t result = re::DynamicArray<re::SMAssetState>::deinit(v7 + v8);
        v9 -= 168;
        v7 += 168;
      }
      while (v8 != v9);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(result + 32);
    uint64_t v4 = 168 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 18));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v3 + 13);
      re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)(v3 + 8));
      re::StringID::destroyString((re::StringID *)(v3 + 5));
      uint64_t result = re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v3);
      v3 += 21;
      v4 -= 168;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void *re::DynamicArray<re::SMAssetStateGraph>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::SMAssetStateGraph>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA8uLL))
        {
          uint64_t v2 = 168 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 168 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 168, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 168 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::SMAssetStateGraph>(v8, v11);
          v8 += 168;
          v11 += 168;
          v10 -= 168;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetStateGraph>(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v3;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  ++*(_DWORD *)(a1 + 24);
  ++*(_DWORD *)(a2 + 24);
  uint64_t v6 = (re::StringID *)(a1 + 40);
  LOBYTE(v3) = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a2 + 40) = *(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(void *)(a2 + 40) = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = "";
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a1 + 56);
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a2 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = *(void *)(a1 + 64);
  *(void *)(a1 + re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64) = 0;
  *(void *)(a2 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v8;
  *(void *)(a1 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v10;
  ++*(_DWORD *)(a1 + 88);
  ++*(_DWORD *)(a2 + 88);
  *(void *)(a2 + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = 0;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 128) = 0;
  uint64_t v11 = (void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 112);
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  *(void *)(a2 + 112) = v12;
  *(void *)(a1 + 112) = 0;
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a2 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = *(void *)(a1 + 120);
  *(void *)(a1 + re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120) = v13;
  uint64_t v14 = *(void *)(a2 + 136);
  *(void *)(a2 + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = *(void *)(a1 + 136);
  *(void *)(a1 + 1re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36) = v14;
  ++*(_DWORD *)(a1 + 128);
  ++*(_DWORD *)(a2 + 128);
  uint64_t v16 = *(void *)(a1 + 144);
  uint64_t v15 = (re::StringID *)(a1 + 144);
  *(void *)(a2 + 144) = *(void *)(a2 + 144) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(void *)(a2 + 144) = *(void *)v15 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(void *)(a2 + 152) = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = "";
  *(void *)uint64_t v15 = 0;
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 160);
  re::StringID::destroyString(v15);
  re::DynamicArray<re::SMAssetStateCommand>::deinit(v11);
  re::DynamicArray<re::SMAssetStateTransition>::deinit(v7);
  re::StringID::destroyString(v6);
  return re::DynamicArray<re::SMAssetState>::deinit(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateGraph *,re::SMAssetStateGraph *,re::SMAssetStateGraph *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    re::DynamicArray<re::SMAssetState>::operator=(a4, (uint64_t *)v5);
    re::StringID::operator=((unint64_t *)(a4 + 40), (uint64_t *)(v5 + 40));
    *(unsigned char *)(a4 + 56) = *(unsigned char *)(v5 + 56);
    re::DynamicArray<re::SMAssetStateTransition>::operator=(a4 + 64, (uint64_t *)(v5 + 64));
    re::DynamicArray<re::SMAssetStateCommand>::operator=(a4 + 104, (uint64_t *)(v5 + 104));
    re::StringID::operator=((unint64_t *)(a4 + 144), (uint64_t *)(v5 + 144));
    *(_DWORD *)(a4 + 160) = *(_DWORD *)(v5 + 160);
    a4 += 168;
    v5 += 168;
  }
  while (v5 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetState>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetState>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetState>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::SMAssetState>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetState>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetState>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetState>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetState *,re::SMAssetState *,re::SMAssetState *>((uint64_t)&v15, *(void *)(a2 + 32), *(void *)(a2 + 32) + 104 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v11 = a1[4];
      uint64_t v12 = 104 * v9;
      uint64_t v13 = 104 * v4;
      do
      {
        re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v11 + v12, (uint64_t *)(v10 + v12));
        re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v11 + v12 + 40, (uint64_t *)(v10 + v12 + 40));
        uint64_t result = (uint64_t)re::StringID::StringID((re::StringID *)(v11 + v12 + 80), (const StringID *)(v10 + v12 + 80));
        *(_DWORD *)(v11 + v12 + 96) = *(_DWORD *)(v10 + v12 + 96);
        v13 -= 104;
        v10 += 104;
        v11 += 104;
      }
      while (v12 != v13);
    }
  }
  else
  {
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetState *,re::SMAssetState *,re::SMAssetState *>((uint64_t)&v14, *(void *)(a2 + 32), *(void *)(a2 + 32) + 104 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 104 * v4;
      uint64_t v8 = -104 * v4 + 104 * v6;
      do
      {
        re::StringID::destroyString((re::StringID *)(v7 + 80));
        re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(v7 + 40));
        uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::deinit(v7);
        v7 += 104;
        v8 -= 104;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetState>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 104 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 80));
      re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(v3 + 40));
      uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::deinit(v3);
      v3 += 104;
      v4 -= 104;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void *re::DynamicArray<re::SMAssetState>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x68uLL))
        {
          uint64_t v2 = 104 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 104 * a2, 8);
          if (result)
          {
            uint64_t v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SMAssetState>(v5[4], v5[4] + 104 * v5[2], v7);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 104, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::SMAssetState>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetState>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3 + 48;
    do
    {
      *(void *)(v5 - 16) = 0;
      *(void *)(v5 - 40) = 0;
      *(void *)(v5 - 32) = 0;
      *(void *)(v5 - 48) = 0;
      *(_DWORD *)(v5 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
      uint64_t v6 = *(void *)(v4 + 8);
      *(void *)(v5 - 48) = *(void *)v4;
      *(void *)(v5 - 40) = v6;
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      uint64_t v7 = *(void *)(v5 - 32);
      *(void *)(v5 - 32) = *(void *)(v4 + 16);
      *(void *)(v4 + 16) = v7;
      uint64_t v8 = *(void *)(v5 - 16);
      *(void *)(v5 - 16) = *(void *)(v4 + 32);
      *(void *)(v4 + 32) = v8;
      ++*(_DWORD *)(v4 + 24);
      ++*(_DWORD *)(v5 - 24);
      *(void *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
      *(void *)(v5 - 8) = 0;
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(_DWORD *)(v5 + 16) = 0;
      *(void *)(v5 - 8) = *(void *)(v4 + 40);
      *(void *)(v4 + 40) = 0;
      *(void *)uint64_t v5 = *(void *)(v4 + 48);
      *(void *)(v4 + 48) = 0;
      uint64_t v9 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = *(void *)(v4 + 56);
      *(void *)(v4 + 56) = v9;
      uint64_t v10 = *(void *)(v5 + 24);
      *(void *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = *(void *)(v4 + 72);
      *(void *)(v4 + re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72) = v10;
      ++*(_DWORD *)(v4 + 64);
      ++*(_DWORD *)(v5 + 16);
      LOBYTE(v10) = *(void *)(v4 + 80);
      *(void *)(v5 + 32) = *(void *)(v5 + 32) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v4 + 80) & 1;
      *(void *)(v5 + 32) = *(void *)(v4 + 80) & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
      *(void *)(v5 + 40) = *(void *)(v4 + 88);
      *(void *)(v4 + 88) = "";
      *(void *)(v4 + 80) = 0;
      *(_DWORD *)(v5 + 48) = *(_DWORD *)(v4 + 96);
      re::StringID::destroyString((re::StringID *)(v4 + 80));
      re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)(v4 + 40));
      uint64_t result = re::DynamicArray<re::SMAssetStateTransition>::deinit(v4);
      v5 += 104;
      v4 += 104;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetState *,re::SMAssetState *,re::SMAssetState *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    re::DynamicArray<re::SMAssetStateTransition>::operator=(a4, (uint64_t *)v5);
    re::DynamicArray<re::SMAssetStateCommand>::operator=(a4 + 40, (uint64_t *)(v5 + 40));
    re::StringID::operator=((unint64_t *)(a4 + 80), (uint64_t *)(v5 + 80));
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(v5 + 96);
    a4 += 104;
    v5 += 104;
  }
  while (v5 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetStateTransition>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetStateTransition>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::SMAssetStateTransition>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetStateTransition>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateCommand>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetStateCommand>::copy((void *)a1, (uint64_t)a2);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        re::ObjectHelper::destroy<re::SMAssetStateCommand>(*(void *)(a1 + 32), *(void *)(a1 + 32) + 424 * v6);
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::SMAssetStateCommand>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetStateCommand>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 96 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 72));
      re::StringID::destroyString((re::StringID *)(v3 + 56));
      re::StringID::destroyString((re::StringID *)(v3 + 40));
      uint64_t result = re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v3);
      v3 += 96;
      v4 -= 96;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::DynamicArray<re::SMAssetState>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SMAssetState>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetState>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SMAssetStateGraph>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetStateGraph>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::StateMachineAsset::~StateMachineAsset(re::StateMachineAsset *this)
{
}

void *re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::SMAssetTransitionCondition>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  memset(&v12[2], 0, 24);
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = *((void *)this + 4) + 40 * v8;
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = "";
  v12[0] = 0;
  v12[1] = "";
  *(_OWORD *)(v9 + 16) = *(_OWORD *)&v12[2];
  *(void *)(v9 + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = *(void *)((char *)&v12[3] + 6);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)v12);
  unint64_t v10 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * *((void *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::SMAssetTransitionCondition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      re::StringID::destroyString((re::StringID *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 40;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 8) = "";
        *(unsigned char *)(v7 + 16) = 0;
        *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::SMAssetTransitionCondition>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::SMAssetTransitionCondition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}