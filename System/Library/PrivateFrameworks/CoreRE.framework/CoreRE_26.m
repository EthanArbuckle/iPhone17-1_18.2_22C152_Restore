void re::internal::defaultConstruct<re::IntrospectionRenameMemberAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionRenameMemberAttribute>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void *re::allocInfo_IntrospectionComplexVersioningAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E288))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BD40, "IntrospectionComplexVersioningAttribute");
    __cxa_guard_release(&qword_26AF9E288);
  }
  return &unk_26879BD40;
}

void re::initInfo_IntrospectionComplexVersioningAttribute(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x151FCB3FE48E5DBALL;
  v18[1] = "IntrospectionComplexVersioningAttribute";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E290, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E290);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      v6 = v5;
      v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E5B0 = v9;
      v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "previousInfo";
      *(void *)(v12 + 16) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E5B8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_size_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "version";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9E5C0 = v16;
      __cxa_guard_release(&qword_26AF9E290);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF9E5B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionComplexVersioningAttribute>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionComplexVersioningAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionComplexVersioningAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionComplexVersioningAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

uint64_t re::internal::defaultConstruct<re::IntrospectionComplexVersioningAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 1;
  *(void *)(a3 + 24) = 0;
  uint64_t result = re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 16);
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionComplexVersioningAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 16);
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionComplexVersioningAttribute>(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 24) = 0;
  uint64_t result = re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 16);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionComplexVersioningAttribute>(uint64_t a1)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 16);
}

void *re::allocInfo_IntrospectionCreateBindPointAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E2A0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BDB8, "IntrospectionCreateBindPointAttribute");
    __cxa_guard_release(&qword_26AF9E2A0);
  }
  return &unk_26879BDB8;
}

void re::initInfo_IntrospectionCreateBindPointAttribute(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x5F39BBB1873362C0;
  v11[1] = "IntrospectionCreateBindPointAttribute";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2B0, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E2B0);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      v6 = v5;
      v7 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        v7 = (re *)re::allocInfo_IntrospectionStructureAttribute(v5);
        qword_26AF9E208 = (uint64_t)v7;
        re::initInfo_IntrospectionStructureAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionStructureAttribute";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E2A8 = v9;
      __cxa_guard_release(&qword_26AF9E2B0);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF9E2A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionCreateBindPointAttribute>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionCreateBindPointAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionCreateBindPointAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionCreateBindPointAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::IntrospectionCreateBindPointAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionCreateBindPointAttribute>(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  return result;
}

void *re::allocInfo_IntrospectionStructure(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E2C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BE30, "IntrospectionStructure");
    __cxa_guard_release(&qword_26AF9E2C0);
  }
  return &unk_26879BE30;
}

void re::initInfo_IntrospectionStructure(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x14D39C8D0D949830;
  v18[1] = "IntrospectionStructure";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2C8, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E2C8);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      v6 = v5;
      v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionBase";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E5C8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<char const*>::get((uint64_t)v10, v11);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "name";
      *(void *)(v12 + 16) = &qword_26AF9E680;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E5D0 = v12;
      v13 = (re *)re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::IntrospectionStructureAttribute const* const*>::get(v13);
      v15 = re::introspect_uint32_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "structureAttributes";
      *(void *)(v16 + 16) = &qword_26AF9E740;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4000000002;
      *(_DWORD *)(v16 + 40) = 1;
      *(void *)(v16 + 48) = v15;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 56;
      qword_26AF9E5D8 = v16;
      __cxa_guard_release(&qword_26AF9E2C8);
    }
  }
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF9E5C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionStructure>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionStructure>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionStructure>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionStructure>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::IntrospectionInfo<re::IntrospectionStructureAttribute const* const*>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E408, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF9E408);
    if (a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E740);
      __cxa_guard_release(&qword_26AF9E408);
    }
  }
  if ((byte_26AF9E0A3 & 1) == 0)
  {
    byte_26AF9E0A3 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E410, memory_order_acquire) & 1) == 0)
    {
      a1 = (re *)__cxa_guard_acquire(&qword_26AF9E410);
      if (a1)
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E780);
        __cxa_guard_release(&qword_26AF9E410);
      }
    }
    if ((byte_26AF9E0A4 & 1) == 0)
    {
      byte_26AF9E0A4 = 1;
      v1 = (re *)qword_26AF9E208;
      if (!qword_26AF9E208)
      {
        v1 = (re *)re::allocInfo_IntrospectionStructureAttribute(a1);
        qword_26AF9E208 = (uint64_t)v1;
        re::initInfo_IntrospectionStructureAttribute(v1, v2);
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E780, 0);
      qword_26AF9E790 = 0x800000001;
      dword_26AF9E798 = 8;
      word_26AF9E79C = 0;
      *(void *)&xmmword_26AF9E7A0 = 0;
      *((void *)&xmmword_26AF9E7A0 + 1) = 0xFFFFFFFFLL;
      qword_26AF9E780 = (uint64_t)&unk_26E6CDA08;
      qword_26AF9E7B0 = (uint64_t)v1;
      unk_26AF9E7B8 = 0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF9E780, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        v5 = v12;
      }
      else {
        v5 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v6 = v11;
      }
      else
      {
        long long v11 = *((_OWORD *)v1 + 2);
        long long v6 = v10;
      }
      xmmword_26AF9E7A0 = v6;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E740, 0);
    qword_26AF9E750 = 0x800000001;
    dword_26AF9E758 = 8;
    word_26AF9E75C = 0;
    *(void *)&xmmword_26AF9E760 = 0;
    *((void *)&xmmword_26AF9E760 + 1) = 0xFFFFFFFFLL;
    qword_26AF9E740 = (uint64_t)&unk_26E6CDA08;
    qword_26AF9E770 = (uint64_t)&qword_26AF9E780;
    unk_26AF9E778 = 0;
    re::IntrospectionRegistry::add(v7, v8);
    re::getPrettyTypeName((re *)&qword_26AF9E740, (const re::IntrospectionBase *)&v11);
    if (BYTE8(v11)) {
      uint64_t v9 = v12;
    }
    else {
      uint64_t v9 = (char *)&v11 + 9;
    }
    if (void)v11 && (BYTE8(v11)) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      xmmword_26AF9E760 = v11;
    }
    else
    {
      long long v11 = xmmword_26AF9E7A0;
      xmmword_26AF9E760 = v10;
    }
    re::StringID::destroyString((re::StringID *)&v13);
  }
}

double re::internal::defaultConstruct<re::IntrospectionStructure>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 22) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v3 = &unk_26E715EC0;
  *(void *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(void *)(v3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionStructure>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionStructure>(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 22) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v1 = &unk_26E715EC0;
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(void *)(v1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionStructure>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void re::introspect_IntrospectionEnumAttributeType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2D8, memory_order_acquire) & 1) == 0)
  {
    v24 = (re *)__cxa_guard_acquire(&qword_26AF9E2D8);
    if (v24)
    {
      v25 = re::introspectionAllocator(v24);
      v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)v26 = 1;
      *((void *)v26 + 1) = 1;
      *((void *)v26 + 2) = "Value";
      qword_26AF9E4D0 = (uint64_t)v26;
      v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 2;
      *(void *)(v28 + 16) = "ValueRename";
      qword_26AF9E4D8 = v28;
      __cxa_guard_release(&qword_26AF9E2D8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E2E0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9E910, "IntrospectionEnumAttributeType", 4, 4, 1, 1);
    qword_26AF9E910 = (uint64_t)&unk_26E715E00;
    qword_26AF9E950 = (uint64_t)&re::introspect_IntrospectionEnumAttributeType(BOOL)::enumTable;
    dword_26AF9E920 = 9;
    __cxa_guard_release(&qword_26AF9E2E0);
  }
  if ((byte_26AF9E09D & 1) == 0)
  {
    byte_26AF9E09D = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9E910, a2);
    uint64_t v30 = 0xB7843CC4D7E65C34;
    v31 = "IntrospectionEnumAttributeType";
    v34[0] = 208862;
    v34[1] = "int";
    v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      v4 = (unsigned int *)qword_26AF9E950;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF9E930 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionEnumAttributeType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspectionTable_IntrospectionEnumAttribute(re *this)
{
  if ((byte_26AF9E09E & 1) == 0)
  {
    byte_26AF9E09E = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2E8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v1 = (re *)__cxa_guard_acquire(&qword_26AF9E2E8);
      if (v1)
      {
        qword_26AF9E9A0 = (uint64_t)"IntrospectionEnumValue";
        v2 = (re *)qword_26AF9E318;
        if (!qword_26AF9E318)
        {
          v2 = (re *)re::allocInfo_IntrospectionEnumValue(v1);
          qword_26AF9E318 = (uint64_t)v2;
          re::initInfo_IntrospectionEnumValue(v2, v3);
        }
        qword_26AF9E9A8 = (uint64_t)v2;
        qword_26AF9E9B0 = 0;
        qword_26AF9E9B8 = 1;
        dword_26AF9E9C0 = 0;
        qword_26AF9E9C8 = (uint64_t)"IntrospectionEnumValueRename";
        v4 = (re *)qword_26AF9E330;
        if (!qword_26AF9E330)
        {
          v4 = (re *)re::allocInfo_IntrospectionEnumValueRename(v1);
          qword_26AF9E330 = (uint64_t)v4;
          re::initInfo_IntrospectionEnumValueRename(v4, v5);
        }
        qword_26AF9E9D0 = (uint64_t)v4;
        qword_26AF9E9D8 = 0;
        qword_26AF9E9E0 = 2;
        dword_26AF9E9E8 = 0;
        __cxa_guard_release(&qword_26AF9E2E8);
      }
    }
    dword_26AF9E4E0 = 2;
    qword_26AF9E4E8 = (uint64_t)&qword_26AF9E9A0;
  }
}

void *re::allocInfo_IntrospectionEnumAttribute(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E2F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BEA8, "IntrospectionEnumAttribute");
    __cxa_guard_release(&qword_26AF9E2F0);
  }
  return &unk_26879BEA8;
}

void re::initInfo_IntrospectionEnumAttribute(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xDB2C4E827F1D1580;
  v11[1] = "IntrospectionEnumAttribute";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E2F8, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E2F8);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_IntrospectionEnumAttributeType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v7 = 3;
      *(void *)(v7 + 8) = &qword_26AF9E910;
      *(void *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = 0;
      qword_26AF9E4F0 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspectionTable_IntrospectionEnumAttribute(v8);
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 16, 8);
      *(_DWORD *)uint64_t v9 = 2;
      *(void *)(v9 + 8) = &dword_26AF9E4E0;
      qword_26AF9E4F8 = v9;
      __cxa_guard_release(&qword_26AF9E2F8);
    }
  }
  *((void *)this + 2) = 0x400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF9E4F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumAttribute>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumAttribute>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumAttribute>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::IntrospectionEnumAttribute>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
}

_DWORD *re::internal::defaultConstructV2<re::IntrospectionEnumAttribute>(_DWORD *result)
{
  *double result = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnumValue(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E308))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BF20, "IntrospectionEnumValue");
    __cxa_guard_release(&qword_26AF9E308);
  }
  return &unk_26879BF20;
}

void re::initInfo_IntrospectionEnumValue(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x14D386891822472ALL;
  v18[1] = "IntrospectionEnumValue";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E310, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E310);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF9E300;
      if (!qword_26AF9E300)
      {
        uint64_t v7 = (re *)re::allocInfo_IntrospectionEnumAttribute(v5);
        qword_26AF9E300 = (uint64_t)v7;
        re::initInfo_IntrospectionEnumAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionEnumAttribute";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E5E0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_uint64_t((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "value";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF9E5E8 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<char const*>::get((uint64_t)v14, v15);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "name";
      *(void *)(v16 + 16) = &qword_26AF9E680;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9E5F0 = v16;
      __cxa_guard_release(&qword_26AF9E310);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF9E5E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumValue>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumValue>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumValue>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumValue>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::IntrospectionEnumValue>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionEnumValue>(uint64_t result)
{
  *(_DWORD *)double result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnumValueRename(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E320))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879BF98, "IntrospectionEnumValueRename");
    __cxa_guard_release(&qword_26AF9E320);
  }
  return &unk_26879BF98;
}

void re::initInfo_IntrospectionEnumValueRename(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xC1C966A0A2370666;
  v18[1] = "IntrospectionEnumValueRename";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E328, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E328);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF9E300;
      if (!qword_26AF9E300)
      {
        uint64_t v7 = (re *)re::allocInfo_IntrospectionEnumAttribute(v5);
        qword_26AF9E300 = (uint64_t)v7;
        re::initInfo_IntrospectionEnumAttribute(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionEnumAttribute";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E5F8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_uint64_t((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "newValue";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF9E600 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<char const*>::get((uint64_t)v14, v15);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "oldName";
      *(void *)(v16 + 16) = &qword_26AF9E680;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9E608 = v16;
      __cxa_guard_release(&qword_26AF9E328);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF9E5F8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumValueRename>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumValueRename>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumValueRename>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumValueRename>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::IntrospectionEnumValueRename>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionEnumValueRename>(uint64_t result)
{
  *(_DWORD *)double result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnumTable(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E338, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E338))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879C010, "IntrospectionEnumTable");
    __cxa_guard_release(&qword_26AF9E338);
  }
  return &unk_26879C010;
}

void re::initInfo_IntrospectionEnumTable(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x14D3868917E99BE4;
  v10[1] = "IntrospectionEnumTable";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E348, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E348);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::IntrospectionEnumAttribute const* const*>::get(v5);
      uint64_t v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "enumTable";
      *(void *)(v8 + 16) = &qword_26AF9E7C0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 1;
      *(void *)(v8 + 48) = v7;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF9E340 = v8;
      __cxa_guard_release(&qword_26AF9E348);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF9E340;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumTable>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumTable>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumTable>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumTable>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::IntrospectionInfo<re::IntrospectionEnumAttribute const* const*>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E418, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF9E418);
    if (a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E7C0);
      __cxa_guard_release(&qword_26AF9E418);
    }
  }
  if ((byte_26AF9E0A5 & 1) == 0)
  {
    byte_26AF9E0A5 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E420, memory_order_acquire) & 1) == 0)
    {
      a1 = (re *)__cxa_guard_acquire(&qword_26AF9E420);
      if (a1)
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E800);
        __cxa_guard_release(&qword_26AF9E420);
      }
    }
    if ((byte_26AF9E0A6 & 1) == 0)
    {
      byte_26AF9E0A6 = 1;
      uint64_t v1 = (re *)qword_26AF9E300;
      if (!qword_26AF9E300)
      {
        uint64_t v1 = (re *)re::allocInfo_IntrospectionEnumAttribute(a1);
        qword_26AF9E300 = (uint64_t)v1;
        re::initInfo_IntrospectionEnumAttribute(v1, v2);
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E800, 0);
      qword_26AF9E810 = 0x800000001;
      dword_26AF9E818 = 8;
      word_26AF9E81C = 0;
      *(void *)&xmmword_26AF9E820 = 0;
      *((void *)&xmmword_26AF9E820 + 1) = 0xFFFFFFFFLL;
      qword_26AF9E800 = (uint64_t)&unk_26E6CDA08;
      qword_26AF9E830 = (uint64_t)v1;
      unk_26AF9E838 = 0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF9E800, (const re::IntrospectionBase *)&v11);
      if (BYTE8(v11)) {
        v5 = v12;
      }
      else {
        v5 = (char *)&v11 + 9;
      }
      if (void)v11 && (BYTE8(v11)) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        long long v6 = v11;
      }
      else
      {
        long long v11 = *((_OWORD *)v1 + 2);
        long long v6 = v10;
      }
      xmmword_26AF9E820 = v6;
      re::StringID::destroyString((re::StringID *)&v13);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E7C0, 0);
    qword_26AF9E7D0 = 0x800000001;
    dword_26AF9E7D8 = 8;
    word_26AF9E7DC = 0;
    *(void *)&xmmword_26AF9E7E0 = 0;
    *((void *)&xmmword_26AF9E7E0 + 1) = 0xFFFFFFFFLL;
    qword_26AF9E7C0 = (uint64_t)&unk_26E6CDA08;
    qword_26AF9E7F0 = (uint64_t)&qword_26AF9E800;
    unk_26AF9E7F8 = 0;
    re::IntrospectionRegistry::add(v7, v8);
    re::getPrettyTypeName((re *)&qword_26AF9E7C0, (const re::IntrospectionBase *)&v11);
    if (BYTE8(v11)) {
      long long v9 = v12;
    }
    else {
      long long v9 = (char *)&v11 + 9;
    }
    if (void)v11 && (BYTE8(v11)) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      xmmword_26AF9E7E0 = v11;
    }
    else
    {
      long long v11 = xmmword_26AF9E820;
      xmmword_26AF9E7E0 = v10;
    }
    re::StringID::destroyString((re::StringID *)&v13);
  }
}

void re::internal::defaultConstruct<re::IntrospectionEnumTable>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionEnumTable>(uint64_t result)
{
  *(_DWORD *)double result = 0;
  *(void *)(result + 8) = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnum(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E358))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879C088, "IntrospectionEnum");
    __cxa_guard_release(&qword_26AF9E358);
  }
  return &unk_26879C088;
}

void re::initInfo_IntrospectionEnum(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xAF6C477EF8F24678;
  v13[1] = "IntrospectionEnum";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E360, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E360);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF9E0E0;
      if (!qword_26AF9E0E0)
      {
        uint64_t v7 = (re *)re::allocInfo_IntrospectionBasic(v5);
        qword_26AF9E0E0 = (uint64_t)v7;
        re::initInfo_IntrospectionBasic(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionBasic";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E500 = v9;
      long long v10 = (re *)re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::IntrospectionEnumTable const*>::get(v10);
      uint64_t v11 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "enumTable";
      *(void *)(v11 + 16) = &qword_26AF9E840;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x4000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9E508 = v11;
      __cxa_guard_release(&qword_26AF9E360);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF9E500;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnum>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnum>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnum>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnum>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::IntrospectionEnumTable const*>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E428, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF9E428);
    if (a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF9E840);
      __cxa_guard_release(&qword_26AF9E428);
    }
  }
  if ((byte_26AF9E0A7 & 1) == 0)
  {
    byte_26AF9E0A7 = 1;
    uint64_t v1 = (re *)qword_26AF9E350;
    if (!qword_26AF9E350)
    {
      uint64_t v1 = (re *)re::allocInfo_IntrospectionEnumTable(a1);
      qword_26AF9E350 = (uint64_t)v1;
      re::initInfo_IntrospectionEnumTable(v1, v2);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9E840, 0);
    qword_26AF9E850 = 0x800000001;
    dword_26AF9E858 = 8;
    word_26AF9E85C = 0;
    *(void *)&xmmword_26AF9E860 = 0;
    *((void *)&xmmword_26AF9E860 + 1) = 0xFFFFFFFFLL;
    qword_26AF9E840 = (uint64_t)&unk_26E6CDA08;
    qword_26AF9E870 = (uint64_t)v1;
    unk_26AF9E878 = 0;
    re::IntrospectionRegistry::add(v3, v4);
    re::getPrettyTypeName((re *)&qword_26AF9E840, (const re::IntrospectionBase *)&v8);
    if (BYTE8(v8)) {
      v5 = v9;
    }
    else {
      v5 = (char *)&v8 + 9;
    }
    if (void)v8 && (BYTE8(v8)) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    if (v10 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v6 = v8;
    }
    else
    {
      long long v8 = *((_OWORD *)v1 + 2);
      long long v6 = v7;
    }
    xmmword_26AF9E860 = v6;
    re::StringID::destroyString((re::StringID *)&v10);
  }
}

double re::internal::defaultConstruct<re::IntrospectionEnum>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 22) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)uint64_t v3 = &unk_26E715E00;
  *(void *)(v3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionEnum>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionEnum>(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 22) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(v1 + 40) = 0xFFFFFFFFLL;
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)uint64_t v1 = &unk_26E715E00;
  *(void *)(v1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionEnum>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionStringID(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E370, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E370))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879C100, "IntrospectionStringID");
    __cxa_guard_release(&qword_26AF9E370);
  }
  return &unk_26879C100;
}

void re::initInfo_IntrospectionStringID(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x8EE0D4EDE1F434ELL;
  v11[1] = "IntrospectionStringID";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E380, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E380);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionBase";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E378 = v9;
      __cxa_guard_release(&qword_26AF9E380);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF9E378;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionStringID>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionStringID>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionStringID>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionStringID>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::IntrospectionStringID>(int a1, int a2, ArcSharedObject *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_DWORD *)(v3 + 24) = 8;
  *(_WORD *)(v3 + 28) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v3 = &unk_26E715E80;
  *(void *)&double result = 0x100000000ALL;
  *(void *)(v3 + 16) = 0x100000000ALL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionStringID>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionStringID>(ArcSharedObject *a1)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_DWORD *)(v1 + 24) = 8;
  *(_WORD *)(v1 + 28) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v1 = &unk_26E715E80;
  *(void *)&double result = 0x100000000ALL;
  *(void *)(v1 + 16) = 0x100000000ALL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionStringID>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionCallbackSerializer(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E390, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E390))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879C178, "IntrospectionCallbackSerializer");
    __cxa_guard_release(&qword_26AF9E390);
  }
  return &unk_26879C178;
}

void re::initInfo_IntrospectionCallbackSerializer(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xE6B7F5AA71E05564;
  v11[1] = "IntrospectionCallbackSerializer";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3A0, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E3A0);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionBase";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E398 = v9;
      __cxa_guard_release(&qword_26AF9E3A0);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF9E398;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionCallbackSerializer>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionCallbackSerializer>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionCallbackSerializer>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionCallbackSerializer>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::IntrospectionCallbackSerializer>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 22) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0xFFFFFFFFLL;
  *(void *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(void *)uint64_t v3 = &unk_26E715E40;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionCallbackSerializer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionCallbackSerializer>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 22) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xFFFFFFFFLL;
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(void *)uint64_t v1 = &unk_26E715E40;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionCallbackSerializer>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionOptionalBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E3B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879C1F0, "IntrospectionOptionalBase");
    __cxa_guard_release(&qword_26AF9E3B0);
  }
  return &unk_26879C1F0;
}

void re::initInfo_IntrospectionOptionalBase(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x9A8DDE13626C7318;
  v14[1] = "IntrospectionOptionalBase";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3B8, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E3B8);
    if (v4)
    {
      v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      long long v7 = (re *)qword_26AF9E0C8;
      if (!qword_26AF9E0C8)
      {
        long long v7 = (re *)re::allocInfo_IntrospectionBase(v5);
        qword_26AF9E0C8 = (uint64_t)v7;
        re::initInfo_IntrospectionBase(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "IntrospectionBase";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF9E510 = v9;
      long long v10 = (re *)re::introspectionAllocator((re *)v9);
      re::introspect_IntrospectionBasePointer(v10, v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "valueInfo";
      *(void *)(v12 + 16) = &qword_26AF9EA48;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9E518 = v12;
      __cxa_guard_release(&qword_26AF9E3B8);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF9E510;
  *((void *)this + 9) = re::internal::defaultConstruct<re::IntrospectionOptionalBase>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::IntrospectionOptionalBase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionOptionalBase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionOptionalBase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

re::IntrospectionOptionalBase *re::internal::defaultConstruct<re::IntrospectionOptionalBase>(int a1, int a2, re::IntrospectionOptionalBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::IntrospectionOptionalBase::IntrospectionOptionalBase(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionOptionalBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::IntrospectionOptionalBase *re::internal::defaultConstructV2<re::IntrospectionOptionalBase>(re::IntrospectionOptionalBase *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::IntrospectionOptionalBase::IntrospectionOptionalBase(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionOptionalBase>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void re::introspect_IntrospectionType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3C8, memory_order_acquire) & 1) == 0)
  {
    v24 = (re *)__cxa_guard_acquire(&qword_26AF9E3C8);
    if (v24)
    {
      v25 = re::introspectionAllocator(v24);
      v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Basic";
      qword_26AF9E9F0 = (uint64_t)v26;
      v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Pointer";
      qword_26AF9E9F8 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "CStyleArray";
      qword_26AF9EA00 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      StringID v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)StringID v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "DynamicArray";
      qword_26AF9EA08 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((void *)v34 + 1) = 5;
      *((void *)v34 + 2) = "DataArray";
      qword_26AF9EA10 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((void *)v36 + 1) = 6;
      *((void *)v36 + 2) = "DynamicString";
      qword_26AF9EA18 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((void *)v38 + 1) = 7;
      *((void *)v38 + 2) = "HashTable";
      qword_26AF9EA20 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((void *)v40 + 1) = 8;
      *((void *)v40 + 2) = "Structure";
      qword_26AF9EA28 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *((void *)v42 + 1) = 9;
      *((void *)v42 + 2) = "Enum";
      qword_26AF9EA30 = (uint64_t)v42;
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((void *)v44 + 1) = 10;
      *((void *)v44 + 2) = "StringID";
      qword_26AF9EA38 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 24, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = 11;
      *(void *)(v46 + 16) = "CallbackSerializer";
      qword_26AF9EA40 = v46;
      __cxa_guard_release(&qword_26AF9E3C8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E3D0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9E958, "IntrospectionType", 4, 4, 1, 1);
    qword_26AF9E958 = (uint64_t)&unk_26E715E00;
    qword_26AF9E998 = (uint64_t)&re::introspect_IntrospectionType(BOOL)::enumTable;
    dword_26AF9E968 = 9;
    __cxa_guard_release(&qword_26AF9E3D0);
  }
  if ((byte_26AF9E09F & 1) == 0)
  {
    byte_26AF9E09F = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9E958, a2);
    uint64_t v48 = 0xAF6C477EF9003AEALL;
    v49 = "IntrospectionType";
    v52[0] = 208862;
    v52[1] = "int";
    v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v52);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v52);
      v4 = (unsigned int *)qword_26AF9E998;
      v51[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v52, &v48, 1, 1, (uint64_t)v51);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v50.var0 = 2 * v10;
            v50.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v52, v14, &v50);
            re::StringID::destroyString((re::StringID *)&v50);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v50.var0 = 2 * v18;
              v50.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v52, v22, &v50);
              re::StringID::destroyString((re::StringID *)&v50);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v52, v23);
      xmmword_26AF9E978 = (__int128)v50;
      re::StringID::destroyString((re::StringID *)&v48);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v52);
      re::internal::assertLog((re::internal *)5, v47, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionType", v48, v49);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_PersistedSchema(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9E3D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26879C268, "PersistedSchema");
    __cxa_guard_release(&qword_26AF9E3D8);
  }
  return &unk_26879C268;
}

void re::initInfo_PersistedSchema(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xE30C31A82622B1A8;
  v10[1] = "PersistedSchema";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9E3E8, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF9E3E8);
    if (v4)
    {
      v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "types";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF9E3E0 = v8;
      __cxa_guard_release(&qword_26AF9E3E8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF9E3E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PersistedSchema>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PersistedSchema>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PersistedSchema>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::PersistedSchema>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E7202E0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    int v3 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    }
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  unint64_t v6 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  long long v7 = re::IntrospectionInfo<re::IntrospectionBase const*>::get((re *)1);
  if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v8 = re::introspectionSharedMutex((re *)v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    uint64_t v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized = 1;
    int v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, 0);
    qword_2687964C8 = 0x3000000007;
    dword_2687964D0 = v11;
    word_2687964D4 = 0;
    *(void *)&xmmword_2687964D8 = 0;
    *((void *)&xmmword_2687964D8 + 1) = 0xFFFFFFFFLL;
    qword_2687964E8 = (uint64_t)v6;
    unk_2687964F0 = 0;
    qword_2687964F8 = v10;
    unk_268796500 = 0;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E7202E0;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v18);
    if (BYTE8(v18)) {
      uint64_t v14 = v19;
    }
    else {
      uint64_t v14 = (char *)&v18 + 9;
    }
    if (void)v18 && (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    long long v15 = v6[2];
    long long v17 = *(_OWORD *)(v10 + 32);
    long long v18 = v15;
    xmmword_2687964D8 = v16;
    re::StringID::destroyString((re::StringID *)v20);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::PersistedSchema>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 36) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::PersistedSchema>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3);
}

double re::internal::defaultConstructV2<re::PersistedSchema>(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::introspect_PersistedSchema(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, this);
}

void std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

__n128 std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_26E720250;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E720250;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  if (*(_DWORD *)(a2 + 16) == 11
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 8);
    __n128 result = **a3;
    uint64_t v11 = result;
    if (result)
    {
      unsigned int v5 = *(_DWORD *)(result + 16);
      BOOL v6 = v5 > 0xA;
      int v7 = (1 << v5) & 0x441;
      if (v6 || v7 == 0)
      {
        re::getPrettyTypeName((re *)result, (const re::IntrospectionBase *)&v9);
        if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v4, (uint64_t)&v9))
        {
          re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew(v4, (re::DynamicString *)&v9, &v11);
          re::DynamicArray<re::TransitionCondition *>::add(*(void **)(v3 + 16), &v11);
        }
        __n128 result = v9;
        if (v9)
        {
          if (v10) {
            return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
  }
  return result;
}

uint64_t *re::IntrospectionInfo<re::IntrospectionBase const*>::get(re *a1)
{
  int v1 = (int)a1;
  {
    if (a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info);
    }
  }
  if (v1)
  {
    if (re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v2 = re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v2) {
      return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
    }
    uint64_t v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
    if (re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized)
    {
LABEL_21:
      uint64_t v11 = re::introspectionSharedMutex(a1);
      std::__shared_mutex_base::unlock(v11);
      return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized = 1;
  unsigned int v5 = (re *)qword_26AF9E0C8;
  if (!qword_26AF9E0C8)
  {
    unsigned int v5 = (re *)re::allocInfo_IntrospectionBase(a1);
    qword_26AF9E0C8 = (uint64_t)v5;
    re::initInfo_IntrospectionBase(v5, v6);
  }
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info, 0);
  qword_268796428 = 0x800000001;
  dword_268796430 = 8;
  word_268796434 = 0;
  *(void *)&xmmword_268796438 = 0;
  *((void *)&xmmword_268796438 + 1) = 0xFFFFFFFFLL;
  re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info = (uint64_t)&unk_26E6CDA08;
  qword_268796448 = (uint64_t)v5;
  unk_268796450 = 0;
  re::IntrospectionRegistry::add(v7, v8);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
  if (BYTE8(v14)) {
    uint64_t v9 = v15;
  }
  else {
    uint64_t v9 = (char *)&v14 + 9;
  }
  if (void)v14 && (BYTE8(v14)) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  if (v16 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
  {
    long long v10 = v14;
  }
  else
  {
    long long v14 = *((_OWORD *)v5 + 2);
    long long v10 = v13;
  }
  xmmword_268796438 = v10;
  re::StringID::destroyString((re::StringID *)&v16);
  if ((v1 & 1) == 0) {
    goto LABEL_21;
  }
  return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
}

void std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

__n128 std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_26E720298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E720298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (**(unsigned char **)(result + 16)) {
    BOOL v3 = *(_DWORD *)(a2 + 16) == 11;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3
  {
    uint64_t v4 = result;
    unsigned int v5 = *a3;
    BOOL v6 = *(re::PersistedSchema **)(result + 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)(*a3)[1]);
    unint64_t v7 = v14 >> 1;
    if ((v14 & 1) == 0) {
      unint64_t v7 = v14 >> 1;
    }
    if (v7)
    {
      if (v14) {
        uint64_t v8 = v15;
      }
      else {
        uint64_t v8 = (char *)&v14 + 1;
      }
      uint64_t v9 = re::PersistedSchema::introspectionInfo(v6, v8);
      if (v9)
      {
        uint64_t v10 = v9;
        re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v5);
        uint64_t *v5 = v10;
      }
      else
      {
        uint64_t v11 = *re::foundationSerializationLogObjects(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if (v14) {
            uint64_t v12 = v15;
          }
          else {
            uint64_t v12 = (char *)&v14 + 1;
          }
          *(_DWORD *)buf = 136315138;
          long long v17 = (char *)v12;
          _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Unknown type name '%s'", buf, 0xCu);
        }
        **(unsigned char **)(v4 + 16) = 0;
      }
    }
    else
    {
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v5);
      uint64_t *v5 = 0;
    }
    __n128 result = v13;
    if (v13)
    {
      if (v14) {
        return (*(uint64_t (**)(void))(*(void *)v13 + 40))();
      }
    }
  }
  return result;
}

re::IntrospectionDataArrayBase *re::IntrospectionDataArrayBase::IntrospectionDataArrayBase(re::IntrospectionDataArrayBase *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  void *v2 = &unk_26E715D40;
  *((void *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(v2 + 6));
  return this;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, long long *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10 = (uint64_t)a1 + 200;
  uint64_t v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    uint64_t v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  uint64_t v22 = 0x449AD97C4B77BED4;
  uint64_t v23 = "_CompareFunc";
  uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      uint64_t v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(void *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  uint64_t v15 = v22;
  uint64_t v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (unint64_t v16 = *v28,
        uint64_t v22 = v14,
        uint64_t v23 = v16,
        int v24 = -1,
        (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v27.var0 + 768, &v22)) == 0)|| !*(void *)v17)
  {
    long long v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    long long v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::DynamicString>, 0);
  }
  long long v18 = *(_OWORD *)a3;
  long long v20 = *a4;
  long long v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

void *re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  uint64_t v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 56 * v10 + 16, *(void *)(a2 + 16) + 56 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

uint64_t re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 14;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_21, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void *re::internal::SharedObjectGraph::beginObject(void *result, uint64_t a2, long long *a3)
{
  uint64_t v12 = a2;
  if (*(unsigned char *)result)
  {
    uint64_t v4 = result;
    unsigned int v11 = result[9];
    int v8 = -1;
    __int16 v10 = 0;
    uint64_t v6 = a2;
    long long v7 = *a3;
    BOOL v9 = result[19] == 0;
    re::DynamicArray<re::internal::SharedObjectGraph::Entry>::add((_anonymous_namespace_ *)(result + 7), (uint64_t)&v6);
    if (a2) {
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addNew<unsigned int &>((uint64_t)(v4 + 1), &v12, &v11);
    }
    if (*((unsigned char *)v4 + 1))
    {
      uint64_t v5 = v4[19];
      if (v5) {
        re::internal::SharedObjectGraph::addChild(v4, *(_DWORD *)(v4[21] + 4 * v5 - 4), v11);
      }
    }
    return re::DynamicArray<int>::add(v4 + 17, &v11);
  }
  return result;
}

__n128 re::DynamicArray<re::internal::SharedObjectGraph::Entry>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::internal::SharedObjectGraph::Entry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (_OWORD *)(*((void *)this + 4) + 32 * v4);
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  _OWORD *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addNew<unsigned int &>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

void *re::internal::SharedObjectGraph::addChild(void *this, unsigned int a2, unsigned int a3)
{
  if (this[9] <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = this;
  uint64_t v5 = this[11] + 32 * a2;
  uint64_t v6 = *(unsigned int *)(v5 + 24);
  unint64_t v7 = this[14];
  *(_DWORD *)(v5 + 24) = v7;
  unint64_t v8 = this[13];
  if (v7 >= v8)
  {
    unint64_t v9 = v7 + 1;
    if (v8 < v7 + 1)
    {
      if (this[12])
      {
        unint64_t v10 = 2 * v8;
        if (!v8) {
          unint64_t v10 = 8;
        }
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        this = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(this + 12, v11);
      }
      else
      {
        this = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v4 + 12, v9);
        ++*((_DWORD *)v4 + 30);
      }
    }
    unint64_t v7 = v4[14];
  }
  *(void *)(v4[16] + 8 * v7) = a3 | (unint64_t)(v6 << 32);
  ++v4[14];
  ++*((_DWORD *)v4 + 30);
  return this;
}

uint64_t re::internal::SharedObjectGraph::object(re::internal::SharedObjectGraph *this, unsigned int a2)
{
  if (!*(unsigned char *)this) {
    return 0;
  }
  if (*((void *)this + 9) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 11) + 32 * a2);
}

double re::internal::SharedObjectGraph::typeID@<D0>(re::internal::SharedObjectGraph *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)this)
  {
    if (*((void *)this + 9) <= (unint64_t)a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v3 = *(_OWORD *)(*((void *)this + 11) + 32 * a2 + 8);
    *(_OWORD *)a3 = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)&long long v3 = 0xFFFFFFFFLL;
    *(void *)(a3 + 8) = 0xFFFFFFFFLL;
  }
  return *(double *)&v3;
}

void *re::internal::SharedObjectGraph::addReference(void *this, unsigned int a2)
{
  if (*(unsigned char *)this)
  {
    if (*((unsigned char *)this + 1)) {
      return re::internal::SharedObjectGraph::addChild(this, *(_DWORD *)(this[21] + 4 * this[19] - 4), a2);
    }
  }
  return this;
}

re::internal::SharedObjectGraph *re::internal::SharedObjectGraph::markAndSweep(re::internal::SharedObjectGraph *this, re::Allocator *a2, void *a3)
{
  if (*(unsigned char *)this)
  {
    long long v3 = this;
    unint64_t v4 = *((void *)this + 9);
    if (v4)
    {
      uint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        if (*(unsigned char *)(*((void *)v3 + 11) + 32 * v7 + 28))
        {
          this = re::internal::SharedObjectGraph::mark(v3, v8 - 1);
          unint64_t v4 = *((void *)v3 + 9);
        }
        uint64_t v7 = v8;
        BOOL v9 = v4 > v8++;
      }
      while (v9);
      if (v4)
      {
        uint64_t v10 = 0;
        unsigned int v11 = 1;
        do
        {
          uint64_t v12 = *((void *)v3 + 11) + 32 * v10;
          if (*(void *)v12) {
            BOOL v13 = *(unsigned char *)(v12 + 29) == 0;
          }
          else {
            BOOL v13 = 0;
          }
          if (v13)
          {
            this = *(re::internal::SharedObjectGraph **)(v12 + 8);
            if (this)
            {
              re::TypeRegistry::typeInfo(this, (re **)(v12 + 8), v14);
              re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v15);
              re::TypeInfo::releaseInstance((re::TypeInfo *)v16, *(void **)v12, a2, a3);
              this = re::internal::SharedObjectGraph::mark(v3, v11 - 1);
              unint64_t v4 = *((void *)v3 + 9);
            }
          }
          uint64_t v10 = v11;
          BOOL v9 = v4 > v11++;
        }
        while (v9);
      }
    }
  }
  return this;
}

re::internal::SharedObjectGraph *re::internal::SharedObjectGraph::mark(re::internal::SharedObjectGraph *this, unsigned int a2)
{
  if (*((void *)this + 9) <= (unint64_t)a2) {
    goto LABEL_16;
  }
  uint64_t v2 = this;
  uint64_t v3 = *((void *)this + 11);
  if (*(void *)(v3 + 32 * a2))
  {
    uint64_t v4 = v3 + 32 * a2;
    if (!*(unsigned char *)(v4 + 29) || *(unsigned char *)(v4 + 30) == 0)
    {
      *(unsigned char *)(v4 + 29) = 1;
      *(unsigned char *)(v4 + 30) = 1;
      unint64_t v6 = *(unsigned int *)(v4 + 24);
      if (v6 != -1)
      {
        unint64_t v7 = *((void *)this + 14);
        while (v7 > v6)
        {
          this = (re::internal::SharedObjectGraph *)re::internal::SharedObjectGraph::mark(v2, *(_DWORD *)(*((void *)v2 + 16) + 8 * v6));
          unint64_t v7 = *((void *)v2 + 14);
          if (v7 <= v6) {
            goto LABEL_15;
          }
          unint64_t v6 = *(unsigned int *)(*((void *)v2 + 16) + 8 * v6 + 4);
          if (v6 == -1) {
            return this;
          }
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  return this;
}

void *re::DynamicArray<re::internal::SharedObjectGraph::Entry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unsigned int v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 32 * v9;
        unsigned int v11 = v7;
        do
        {
          long long v12 = *v8;
          long long v13 = v8[1];
          v8 += 2;
          _OWORD *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
        unsigned int v8 = (long long *)v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    char v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_21, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::PropertyBagHelper::copyToIntrospectedData(id *a1, re *a2, re::DynamicString **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  v31[0] = a5;
  v31[1] = a6;
  v31[2] = a4;
  id v9 = *a1;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v12 = *a1;
    uint64_t v13 = [v12 objectForKey:@"type"];
    char v14 = (void *)v13;
    if (v13 && (objc_opt_class(), uint64_t v13 = objc_opt_isKindOfClass(), (v13 & 1) != 0))
    {
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v27);
      if (v28) {
        uint64_t v15 = v30;
      }
      else {
        uint64_t v15 = v29;
      }
      int v16 = strcmp(v15, (const char *)[v14 UTF8String]);
      long long v17 = v27;
      if (v27 && (v28 & 1) != 0) {
        long long v17 = (re *)(*(uint64_t (**)(void))(*(void *)v27 + 40))();
      }
      if (!v16)
      {
        v25 = [v12 objectForKey:@"value"];
        if (v25)
        {
        }
        else
        {
          long long v26 = *re::foundationSerializationLogObjects(0);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v27) = 0;
            _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "PropertyBagReader; property bag missing value.",
              (uint8_t *)&v27,
              2u);
          }
          uint64_t Value = 0;
        }

        goto LABEL_24;
      }
      long long v18 = *re::foundationSerializationLogObjects(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = v18;
        re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v27);
        if (v28) {
          long long v20 = v30;
        }
        else {
          long long v20 = v29;
        }
        *(_DWORD *)buf = 136315138;
        v33 = v20;
        _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "PropertyBagReader; property bag is wrong type, expecting '%s'.",
          buf,
          0xCu);

        if (v27 && (v28 & 1) != 0) {
          (*(void (**)(void))(*(void *)v27 + 40))();
        }
      }
    }
    else
    {
      uint64_t v23 = *re::foundationSerializationLogObjects((re *)v13);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v27) = 0;
        _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing property bag type.",
          (uint8_t *)&v27,
          2u);
      }
    }
    uint64_t Value = 0;
LABEL_24:

    return Value;
  }
  long long v21 = *re::foundationSerializationLogObjects(v11);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v27) = 0;
    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSDictionary.",
      (uint8_t *)&v27,
      2u);
  }
  return 0;
}

uint64_t anonymous namespace'::PropertyBagReader::readValue(_anonymous_namespace_::PropertyBagReader *this, objc_object *a2, const re::IntrospectionBase *a3, re::DynamicString **a4)
{
  uint64_t v256 = *MEMORY[0x263EF8340];
  unsigned int v7 = a2;
  long long v8 = v7;
  switch(*((_DWORD *)a3 + 4))
  {
    case 0:
      id v9 = v7;
      objc_opt_class();
      uint64_t isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) == 0)
      {
        v101 = *re::foundationSerializationLogObjects((re *)isKindOfClass);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
        {
          v184 = v101;
          re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
          v185 = (__src[8] & 1) != 0 ? *(unsigned char **)&__src[16] : &__src[9];
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v185;
          _os_log_error_impl(&dword_233120000, v184, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSNumber for '%s'.",
            (uint8_t *)&buf,
            0xCu);

          if (*(void *)__src)
          {
            if (__src[8]) {
              (*(void (**)(void))(**(void **)__src + 40))();
            }
          }
        }
        char LinearArray = 0;
LABEL_202:

        goto LABEL_225;
      }
      uint64_t v11 = v9;
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v221);
      }
      if (re::introspect<BOOL>(void)::info == (_UNKNOWN *)a3)
      {
        char v136 = [(objc_object *)v11 BOOLValue];
      }
      else
      {
        {
          re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v222);
        }
        if ((const re::IntrospectionBase *)re::introspect<char>(void)::info == a3)
        {
          char v136 = [(objc_object *)v11 charValue];
        }
        else
        {
          {
            re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v223);
          }
          if ((const re::IntrospectionBase *)re::introspect<double>(void)::info == a3)
          {
            [(objc_object *)v11 doubleValue];
            *(void *)__src = v157;
            goto LABEL_200;
          }
          {
            re::introspect<float>(void)::info = re::introspect_float(0, v224);
          }
          if (re::introspect<float>(void)::info == (_UNKNOWN *)a3)
          {
            [(objc_object *)v11 floatValue];
            *(_DWORD *)__src = v161;
            goto LABEL_200;
          }
          {
            re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v225);
          }
          if ((const re::IntrospectionBase *)re::introspect<short>(void)::info == a3)
          {
            __int16 v187 = [(objc_object *)v11 shortValue];
LABEL_266:
            *(_WORD *)__src = v187;
            goto LABEL_200;
          }
          {
            re::introspect<int>(void)::info = re::introspect_int(0, v226);
          }
          if (re::introspect<int>(void)::info == (_UNKNOWN *)a3)
          {
            int v189 = [(objc_object *)v11 intValue];
LABEL_270:
            *(_DWORD *)__src = v189;
            goto LABEL_200;
          }
          {
            re::introspect<long>(void)::info = (uint64_t)re::introspect_long(0, v227);
          }
          if ((const re::IntrospectionBase *)re::introspect<long>(void)::info == a3)
          {
            uint64_t v195 = [(objc_object *)v11 longValue];
LABEL_294:
            *(void *)__src = v195;
            goto LABEL_200;
          }
          if ((const re::IntrospectionBase *)re::introspect<unsigned long>() == a3)
          {
LABEL_291:
            uint64_t v195 = [(objc_object *)v11 unsignedLongLongValue];
            goto LABEL_294;
          }
          if (re::introspect<long long>() == (char *)a3)
          {
            uint64_t v195 = [(objc_object *)v11 longLongValue];
            goto LABEL_294;
          }
          if (re::introspect<unsigned char>() != (char *)a3)
          {
            if ((const re::IntrospectionBase *)re::introspect<unsigned short>() != a3)
            {
              if (re::introspect<unsigned int>() != (char **)a3)
              {
                id v12 = (re *)re::introspect<unsigned long long>();
                if (v12 != a3)
                {
                  uint64_t v13 = *re::foundationSerializationLogObjects(v12);
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                  {
                    v214 = v13;
                    re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
                    if (__src[8]) {
                      v215 = *(unsigned char **)&__src[16];
                    }
                    else {
                      v215 = &__src[9];
                    }
                    LODWORD(buf) = 136315138;
                    *(void *)((char *)&buf + 4) = v215;
                    _os_log_error_impl(&dword_233120000, v214, OS_LOG_TYPE_ERROR, "PropertyBagWriter; unhandled type '%s'.",
                      (uint8_t *)&buf,
                      0xCu);

                    if (*(void *)__src && (__src[8] & 1) != 0) {
                      (*(void (**)(void))(**(void **)__src + 40))();
                    }
                  }
                  char LinearArray = 0;
LABEL_201:

                  goto LABEL_202;
                }
                goto LABEL_291;
              }
              int v189 = [(objc_object *)v11 unsignedIntValue];
              goto LABEL_270;
            }
            __int16 v187 = [(objc_object *)v11 unsignedShortValue];
            goto LABEL_266;
          }
          char v136 = [(objc_object *)v11 unsignedCharValue];
        }
      }
      __src[0] = v136;
LABEL_200:
      memcpy(a4, __src, *((int *)a3 + 5));
      char LinearArray = 1;
      goto LABEL_201;
    case 1:
      uint64_t v15 = v7;
      uint64_t v47 = *((void *)a3 + 6);
      if (*(_DWORD *)(v47 + 16) != 8) {
        goto LABEL_48;
      }
      uint64_t v48 = *(unsigned int *)(v47 + 56);
      if (!v48) {
        goto LABEL_48;
      }
      uint64_t v49 = 0;
      StringID v50 = *(void **)(v47 + 64);
      do
      {
        uint64_t v51 = v50[v49];
        if (*(_DWORD *)v51 == 2)
        {
          if (*a4)
          {
            re::introspectionReleasePointer(*a4, *(void *)this, *((void *)this + 2), *((void *)a3 + 6));
            *a4 = 0;
            uint64_t v48 = *(unsigned int *)(v47 + 56);
            StringID v50 = *(void **)(v47 + 64);
          }
          v147 = (_DWORD *)*v50;
          if (*(_DWORD *)*v50 != 3)
          {
            v148 = (_DWORD **)(v50 + 1);
            uint64_t v149 = v48 - 1;
            do
            {
              v150 = *v148++;
              v147 = v150;
              --v149;
            }
            while (*v150 != 3);
          }
LABEL_190:
          char LinearArray = PointerPolymorphic;
          goto LABEL_224;
        }
        ++v49;
      }
      while (v48 != v49);
LABEL_48:
      v52 = [MEMORY[0x263EFF9D0] null];

      if (v52 == v15)
      {
        if (*a4)
        {
          re::introspectionReleasePointer(*a4, *(void *)this, *((void *)this + 2), *((void *)a3 + 6));
          *a4 = 0;
        }
        goto LABEL_171;
      }
      uint64_t v53 = *((void *)a3 + 6);
      {
        re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v220);
      }
      v54 = *a4;
      if (v53 != re::introspect<char>(void)::info)
      {
        if (!v54) {
          v54 = re::introspectionAllocPointer(*(re **)this, *((_anonymous_namespace_ **)this + 2), *((re::Allocator **)a3 + 6));
        }
        if ((Value & 1) == 0)
        {
          v56 = *re::foundationSerializationLogObjects(Value);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            v196 = v56;
            re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
            v197 = (__src[8] & 1) != 0 ? *(unsigned char **)&__src[16] : &__src[9];
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v197;
            _os_log_error_impl(&dword_233120000, v196, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read pointer target of type '%s'.",
              (uint8_t *)&buf,
              0xCu);

            if (*(void *)__src)
            {
              if (__src[8]) {
                (*(void (**)(void))(**(void **)__src + 40))();
              }
            }
          }
          re::introspectionReleasePointer(v54, *(void *)this, *((void *)this + 2), *((void *)a3 + 6));
          goto LABEL_223;
        }
LABEL_170:
        *a4 = v54;
LABEL_171:
        char LinearArray = 1;
        goto LABEL_224;
      }
      if (v54)
      {
        re::introspectionReleasePointer(v54, *(void *)this, *((void *)this + 2), *((void *)a3 + 6));
        *a4 = 0;
      }
      objc_opt_class();
      uint64_t v128 = objc_opt_isKindOfClass();
      if ((v128 & 1) == 0)
      {
        v155 = *re::foundationSerializationLogObjects((re *)v128);
        if (!os_log_type_enabled(v155, OS_LOG_TYPE_ERROR)) {
          goto LABEL_223;
        }
        v103 = v155;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if (__src[8]) {
          v156 = *(unsigned char **)&__src[16];
        }
        else {
          v156 = &__src[9];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v156;
        v105 = "PropertyBagReader; expected NSString for pointer '%s'.";
        goto LABEL_141;
      }
      v129 = v15;
      v130 = (re *)[(objc_object *)v129 lengthOfBytesUsingEncoding:4];
      uint64_t v131 = v130 + 1;
      uint64_t v132 = v131 << 31 >> 31;
      if (v132 == v131 && (v132 & 0x8000000000000000) == 0)
      {
        uint64_t v133 = *(void *)this;
        size_t v134 = v132 & 0x1FFFFFFFFLL;
        v54 = (re::IntrospectionBase *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v133 + 32))(v133, v132 & 0x1FFFFFFFFLL, 0);
        v135 = v129;
        memcpy(v54, (const void *)[(objc_object *)v135 UTF8String], v134);

        goto LABEL_170;
      }
      v159 = *re::foundationSerializationLogObjects(v130);
      if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__src = 0;
        _os_log_error_impl(&dword_233120000, v159, OS_LOG_TYPE_ERROR, "PropertyBagReader; string length overflowed.",
          __src,
          2u);
      }

      goto LABEL_223;
    case 2:
      uint64_t v15 = v7;
      objc_opt_class();
      uint64_t v57 = objc_opt_isKindOfClass();
      if (v57)
      {
        long long v17 = v15;
        v58 = (re *)*((int *)a3 + 16);
        v59 = (re *)[(objc_object *)v17 count];
        if (v59 == v58)
        {
          long long v26 = (const re::IntrospectionBase *)*((void *)a3 + 6);
          StringID v27 = this;
          char v28 = (NSArray *)v17;
          v25 = (char *)a4;
          goto LABEL_59;
        }
        v126 = *re::foundationSerializationLogObjects(v59);
        if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
        {
          v190 = v126;
          re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
          v191 = (__src[8] & 1) != 0 ? *(unsigned char **)&__src[16] : &__src[9];
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v191;
          _os_log_error_impl(&dword_233120000, v190, OS_LOG_TYPE_ERROR, "PropertyBagReader; array incorrect size for '%s'.",
            (uint8_t *)&buf,
            0xCu);

          if (*(void *)__src)
          {
            if (__src[8]) {
              (*(void (**)(void))(**(void **)__src + 40))();
            }
          }
        }
        goto LABEL_160;
      }
      v113 = *re::foundationSerializationLogObjects((re *)v57);
      if (!os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
        goto LABEL_223;
      }
      v103 = v113;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if (__src[8]) {
        v114 = *(unsigned char **)&__src[16];
      }
      else {
        v114 = &__src[9];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v114;
      v105 = "PropertyBagReader; expected NSArray for '%s'.";
      goto LABEL_141;
    case 3:
      uint64_t v15 = v7;
      objc_opt_class();
      uint64_t v60 = objc_opt_isKindOfClass();
      if (v60)
      {
        v61 = v15;
        (*(void (**)(const re::IntrospectionBase *, void, void, re::DynamicString **, NSUInteger))(*(void *)a3 + 72))(a3, *(void *)this, *((void *)this + 2), a4, [(NSArray *)v61 count]);
        if ([(NSArray *)v61 count])
        {
          v62 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, re::DynamicString **, void))(*(void *)a3 + 96))(a3, a4, 0);
        }
        else
        {
          char LinearArray = 1;
        }

        goto LABEL_224;
      }
      v115 = *re::foundationSerializationLogObjects((re *)v60);
      if (!os_log_type_enabled(v115, OS_LOG_TYPE_ERROR)) {
        goto LABEL_223;
      }
      v103 = v115;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if (__src[8]) {
        v116 = *(unsigned char **)&__src[16];
      }
      else {
        v116 = &__src[9];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v116;
      v105 = "PropertyBagReader; expected NSArray for '%s'.";
      goto LABEL_141;
    case 4:
      uint64_t v15 = v7;
      objc_opt_class();
      uint64_t v16 = objc_opt_isKindOfClass();
      if ((v16 & 1) == 0)
      {
        v102 = *re::foundationSerializationLogObjects((re *)v16);
        if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR)) {
          goto LABEL_223;
        }
        v103 = v102;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if (__src[8]) {
          v104 = *(unsigned char **)&__src[16];
        }
        else {
          v104 = &__src[9];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v104;
        v105 = "PropertyBagReader; expected NSArray for '%s'.";
        goto LABEL_141;
      }
      long long v17 = v15;
      if (((*(uint64_t (**)(const re::IntrospectionBase *, re::DynamicString **))(*(void *)a3 + 88))(a3, a4) & 1) == 0)
      {
        uint64_t v18 = *(void *)this;
        uint64_t v19 = v8;
        uint64_t v20 = *((void *)this + 2);
        uint64_t v21 = [(objc_object *)v17 count];
        uint64_t v22 = v20;
        long long v8 = v19;
        (*(void (**)(const re::IntrospectionBase *, re::DynamicString **, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 64))(a3, a4, v18, v22, v21);
      }
      uint64_t v23 = (*(uint64_t (**)(const re::IntrospectionBase *, re::DynamicString **))(*(void *)a3 + 80))(a3, a4);
      int v24 = (re *)[(objc_object *)v17 count];
      if ((re *)v23 == v24)
      {
        if (![(objc_object *)v17 count]) {
          goto LABEL_183;
        }
        v25 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, re::DynamicString **, void))(*(void *)a3 + 96))(a3, a4, 0);
        long long v26 = (const re::IntrospectionBase *)*((void *)a3 + 6);
        StringID v27 = this;
        char v28 = (NSArray *)v17;
LABEL_59:
        goto LABEL_219;
      }
      v31 = *re::foundationSerializationLogObjects(v24);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        goto LABEL_160;
      }
      *(_WORD *)__src = 0;
      StringID v32 = "PropertyBagReader; cannot resize existing fixed array.";
      goto LABEL_158;
    case 5:
      uint64_t v15 = v7;
      objc_opt_class();
      uint64_t v29 = objc_opt_isKindOfClass();
      if ((v29 & 1) == 0)
      {
        v106 = *re::foundationSerializationLogObjects((re *)v29);
        if (!os_log_type_enabled(v106, OS_LOG_TYPE_ERROR)) {
          goto LABEL_223;
        }
        v103 = v106;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if (__src[8]) {
          v107 = *(unsigned char **)&__src[16];
        }
        else {
          v107 = &__src[9];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v107;
        v105 = "PropertyBagReader; expected NSArray for '%s'.";
        goto LABEL_141;
      }
      long long v17 = v15;
      uint64_t v30 = (re *)(*(uint64_t (**)(const re::IntrospectionBase *, re::DynamicString **))(*(void *)a3 + 80))(a3, a4);
      if (!v30)
      {
        if (![(objc_object *)v17 count])
        {
LABEL_183:
          char LinearArray = 1;
          goto LABEL_219;
        }
        v137 = v8;
        uint64_t v138 = 0;
        while (1)
        {
          v139 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, void, void, re::DynamicString **))(*(void *)a3 + 72))(a3, *(void *)this, *((void *)this + 2), a4);
          v140 = [(objc_object *)v17 objectAtIndex:v138];
          if ((v141 & 1) == 0) {
            break;
          }

          if ([(objc_object *)v17 count] <= (unint64_t)++v138)
          {
            char LinearArray = 1;
LABEL_218:
            long long v8 = v137;
            goto LABEL_219;
          }
        }
        v158 = *re::foundationSerializationLogObjects(v141);
        if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__src = 67109120;
          *(_DWORD *)&__src[4] = v138;
          _os_log_error_impl(&dword_233120000, v158, OS_LOG_TYPE_ERROR, "PropertyBagReader; dynamic array failed to read [%d].",
            __src,
            8u);
        }

        char LinearArray = 0;
        goto LABEL_218;
      }
      v31 = *re::foundationSerializationLogObjects(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__src = 0;
        StringID v32 = "PropertyBagReader; cannot read into existing data array.";
LABEL_158:
        _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, v32, __src, 2u);
      }
LABEL_160:
      char LinearArray = 0;
LABEL_219:

      goto LABEL_224;
    case 6:
      objc_opt_class();
      uint64_t v63 = objc_opt_isKindOfClass();
      if (v63)
      {
        *(void *)__src = [(objc_object *)v8 UTF8String];
        *(void *)&__src[8] = strlen(*(const char **)__src);
        re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)__src);
        goto LABEL_148;
      }
      v117 = *re::foundationSerializationLogObjects((re *)v63);
      if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
        goto LABEL_135;
      }
      v109 = v117;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if (__src[8]) {
        v186 = *(unsigned char **)&__src[16];
      }
      else {
        v186 = &__src[9];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v186;
      v111 = "PropertyBagReader; expected NSString for string '%s'.";
      goto LABEL_261;
    case 7:
      uint64_t v15 = v7;
      objc_opt_class();
      uint64_t v64 = objc_opt_isKindOfClass();
      if (v64)
      {
        v238 = v8;
        v65 = v15;
        (*(void (**)(const re::IntrospectionBase *, re::DynamicString **))(*(void *)a3 + 88))(a3, a4);
        (*(void (**)(const re::IntrospectionBase *, re::DynamicString **, uint64_t))(*(void *)a3 + 72))(a3, a4, [(objc_object *)v65 count]);
        uint64_t v66 = (*(uint64_t (**)(void, void, void))(**((void **)this + 1) + 32))(*((void *)this + 1), *(int *)(*((void *)a3 + 6) + 20), 0);
        *(void *)__src = &unk_26E720368;
        *(void *)&__src[8] = this;
        v251 = __src;
        v247 = (char *)&v245 + 8;
        *(void *)&long long v245 = v66;
        *((void *)&v245 + 1) = &unk_26E720368;
        v246 = this;
        std::__function::__value_func<void ()(unsigned char *)>::~__value_func[abi:nn180100](__src);
        long long buf = 0u;
        long long v253 = 0u;
        long long v254 = 0u;
        long long v255 = 0u;
        v67 = v65;
        uint64_t v68 = [(objc_object *)v67 countByEnumeratingWithState:&buf objects:__src count:16];
        if (v68)
        {
          uint64_t v69 = v68;
          v240 = a4;
          uint64_t v242 = *(void *)v253;
          v236 = v15;
          while (1)
          {
            for (uint64_t i = 0; i != v69; ++i)
            {
              if (*(void *)v253 != v242) {
                objc_enumerationMutation(v67);
              }
              v71 = *(objc_object **)(*((void *)&buf + 1) + 8 * i);
              v72 = [(objc_object *)v67 objectForKeyedSubscript:v71];
              v73 = *(re **)this;
              v74 = (re::Allocator *)*((void *)a3 + 6);
              re::introspectionCallConstructor(*((_anonymous_namespace_ **)this + 2), (uint64_t)v74, v245);
              re::introspectionInitElement(v73, v75, v74, (re::IntrospectionBase *)v245);
              if ((v76 & 1) == 0)
              {
                v151 = *re::foundationSerializationLogObjects(v76);
                if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v248 = 0;
                  _os_log_error_impl(&dword_233120000, v151, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read hash table key",
                    v248,
                    2u);
                }
                (*(void (**)(const re::IntrospectionBase *, void))(*(void *)a3 + 112))(a3, v245);
LABEL_196:

                char LinearArray = 0;
                uint64_t v15 = v236;
LABEL_197:

                std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v245);
                long long v8 = v238;
                goto LABEL_224;
              }
              v77 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, void, void, re::DynamicString **, void))(*(void *)a3 + 96))(a3, *(void *)this, *((void *)this + 2), v240, v245);
              (*(void (**)(const re::IntrospectionBase *, void))(*(void *)a3 + 112))(a3, v245);
              if ((v78 & 1) == 0)
              {
                v152 = *re::foundationSerializationLogObjects(v78);
                if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v248 = 0;
                  _os_log_error_impl(&dword_233120000, v152, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read hash table value",
                    v248,
                    2u);
                }
                goto LABEL_196;
              }
            }
            uint64_t v69 = [(objc_object *)v67 countByEnumeratingWithState:&buf objects:__src count:16];
            char LinearArray = 1;
            uint64_t v15 = v236;
            if (!v69) {
              goto LABEL_197;
            }
          }
        }
        char LinearArray = 1;
        goto LABEL_197;
      }
      v118 = *re::foundationSerializationLogObjects((re *)v64);
      if (!os_log_type_enabled(v118, OS_LOG_TYPE_ERROR)) {
        goto LABEL_223;
      }
      v103 = v118;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if (__src[8]) {
        v119 = *(unsigned char **)&__src[16];
      }
      else {
        v119 = &__src[9];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v119;
      v105 = "PropertyBagReader; expected NSDictionary for hash table '%s'.";
LABEL_141:
      _os_log_error_impl(&dword_233120000, v103, OS_LOG_TYPE_ERROR, v105, (uint8_t *)&buf, 0xCu);

      goto LABEL_142;
    case 8:
      uint64_t v15 = v7;
      unint64_t v87 = *((unsigned int *)a3 + 14);
      if (!v87) {
        goto LABEL_92;
      }
      uint64_t v88 = 0;
      BOOL v89 = 1;
      do
      {
        uint64_t v90 = *(void *)(*((void *)a3 + 8) + 8 * v88);
        if (*(_DWORD *)v90 == 4 && (*(unsigned char *)(v90 + 4) & 1) != 0) {
          break;
        }
        BOOL v89 = ++v88 < v87;
      }
      while (v87 != v88);
      if (v89)
      {
        Structureint Member = re::introspectionFirstStructureMember(a3, v86);
        if (StructureMember)
        {
          goto LABEL_190;
        }
        v153 = *re::foundationSerializationLogObjects(0);
        if (!os_log_type_enabled(v153, OS_LOG_TYPE_ERROR)) {
          goto LABEL_223;
        }
        v123 = v153;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if (__src[8]) {
          v154 = *(unsigned char **)&__src[16];
        }
        else {
          v154 = &__src[9];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v154;
        v125 = "PropertyBagReader; expected member in for struct '%s'.";
      }
      else
      {
LABEL_92:
        objc_opt_class();
        uint64_t v93 = objc_opt_isKindOfClass();
        if (v93)
        {
          long long v17 = v15;
          uint64_t v94 = [(objc_object *)v17 objectForKey:@"type"];
          v95 = (void *)v94;
          if (v94 && (objc_opt_class(), uint64_t v94 = objc_opt_isKindOfClass(), (v94 & 1) != 0))
          {
            v239 = v8;
            v96 = v95;
            re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
            if (__src[8]) {
              v97 = *(const char **)&__src[16];
            }
            else {
              v97 = &__src[9];
            }
            v243 = v96;
            int v98 = strcmp(v97, (const char *)[v96 UTF8String]);
            v99 = *(re **)__src;
            if (*(void *)__src && (__src[8] & 1) != 0) {
              v99 = (re *)(*(uint64_t (**)(void))(**(void **)__src + 40))();
            }
            if (v98)
            {
              v100 = *re::foundationSerializationLogObjects(v99);
              v95 = v243;
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                v198 = v100;
                re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
                if (__src[8]) {
                  v199 = *(unsigned char **)&__src[16];
                }
                else {
                  v199 = &__src[9];
                }
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v199;
                _os_log_error_impl(&dword_233120000, v198, OS_LOG_TYPE_ERROR, "PropertyBagReader; struct is wrong type '%s'.",
                  (uint8_t *)&buf,
                  0xCu);

                long long v8 = v239;
                if (*(void *)__src && (__src[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)__src + 40))();
                }
                char LinearArray = 0;
                v95 = v243;
              }
              else
              {
                char LinearArray = 0;
                long long v8 = v239;
              }
            }
            else
            {
              uint64_t v162 = [(objc_object *)v17 objectForKey:@"value"];
              v95 = v243;
              v235 = (void *)v162;
              if (v162)
              {
                v163 = (void *)v162;
                objc_opt_class();
                uint64_t v162 = objc_opt_isKindOfClass();
                if (v162)
                {
                  long long v254 = 0u;
                  long long v255 = 0u;
                  long long buf = 0u;
                  long long v253 = 0u;
                  obunint64_t j = v163;
                  uint64_t v229 = [obj countByEnumeratingWithState:&buf objects:__src count:16];
                  if (!v229)
                  {
                    char LinearArray = 1;
LABEL_305:
                    long long v8 = v239;
                    goto LABEL_331;
                  }
                  uint64_t v230 = *(void *)v253;
                  long long v8 = v239;
                  v241 = a4;
                  v234 = v17;
LABEL_231:
                  uint64_t v164 = 0;
                  while (1)
                  {
                    if (*(void *)v253 != v230) {
                      objc_enumerationMutation(obj);
                    }
                    v165 = *(void **)(*((void *)&buf + 1) + 8 * v164);
                    objc_opt_class();
                    uint64_t v166 = objc_opt_isKindOfClass();
                    if ((v166 & 1) == 0)
                    {
                      v206 = *re::foundationSerializationLogObjects((re *)v166);
                      if (!os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
                      {
                        char LinearArray = 0;
                        long long v17 = v234;
                        goto LABEL_331;
                      }
                      v216 = v206;
                      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v245);
                      if (BYTE8(v245)) {
                        v217 = v246;
                      }
                      else {
                        v217 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v245 + 9);
                      }
                      *(_DWORD *)v248 = 136315138;
                      v249 = v217;
                      _os_log_error_impl(&dword_233120000, v216, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSDictionary for member '%s'.",
                        v248,
                        0xCu);

                      if (void)v245 && (BYTE8(v245)) {
                        (*(void (**)(void))(*(void *)v245 + 40))();
                      }
                      char LinearArray = 0;
                      long long v8 = v239;
LABEL_334:
                      long long v17 = v234;
                      goto LABEL_330;
                    }
                    id v237 = v165;
                    uint64_t v167 = [v237 objectForKey:@"name"];
                    v168 = (void *)v167;
                    if (!v167 || (objc_opt_class(), uint64_t v167 = objc_opt_isKindOfClass(), (v167 & 1) == 0))
                    {
                      v200 = *re::foundationSerializationLogObjects((re *)v167);
                      long long v17 = v234;
                      if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
                      {
                        v212 = v200;
                        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v245);
                        if (BYTE8(v245)) {
                          v213 = v246;
                        }
                        else {
                          v213 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v245 + 9);
                        }
                        *(_DWORD *)v248 = 136315138;
                        v249 = v213;
                        _os_log_error_impl(&dword_233120000, v212, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing member name '%s'.",
                          v248,
                          0xCu);

                        if (void)v245 && (BYTE8(v245)) {
                          (*(void (**)(void))(*(void *)v245 + 40))();
                        }
                        long long v17 = v234;
                        v95 = v243;
                      }

                      char LinearArray = 0;
                      goto LABEL_305;
                    }
                    uint64_t v233 = v164;
                    *(_DWORD *)v244 = 0;
                    id v169 = v168;
                    v170 = (const re::IntrospectionStructure *)[v169 UTF8String];
                    *(_DWORD *)v244 = 0;
                    uint64_t IntrospectionMemberByNameRecursive = re::getIntrospectionMemberByNameRecursive(a3, v170, v244, v171);
                    long long v17 = v234;
                    if (!IntrospectionMemberByNameRecursive) {
                      break;
                    }
                    v173 = (re **)IntrospectionMemberByNameRecursive;
                    uint64_t v174 = *(int *)v244;
                    uint64_t v175 = [v237 objectForKey:@"type"];
                    v228 = (void *)v175;
                    if (!v175
                      || (v176 = (void *)v175, objc_opt_class(), uint64_t v175 = objc_opt_isKindOfClass(), (v175 & 1) == 0))
                    {
                      v201 = *re::foundationSerializationLogObjects((re *)v175);
                      if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
                      {
                        v202 = v201;
                        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v245);
                        if (BYTE8(v245)) {
                          v203 = v246;
                        }
                        else {
                          v203 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v245 + 9);
                        }
                        *(_DWORD *)v248 = 136315138;
                        v249 = v203;
                        _os_log_error_impl(&dword_233120000, v202, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing member type '%s'.",
                          v248,
                          0xCu);

                        if (void)v245 && (BYTE8(v245)) {
                          (*(void (**)(void))(*(void *)v245 + 40))();
                        }
                        long long v17 = v234;
                      }
LABEL_328:

                      goto LABEL_329;
                    }
                    re::getPrettyTypeName(v173[2], (const re::IntrospectionBase *)&v245);
                    id v232 = v176;
                    v177 = (const char *)[v232 UTF8String];
                    uint64_t v178 = BYTE8(v245) & 1;
                    if (BYTE8(v245)) {
                      v179 = (const char *)v246;
                    }
                    else {
                      v179 = (char *)&v245 + 9;
                    }
                    int v180 = strcmp(v179, v177);
                    v181 = (re *)v245;
                    if ((void)v245 && v178) {
                      v181 = (re *)(*(uint64_t (**)(void))(*(void *)v245 + 40))();
                    }
                    if (v180)
                    {
                      v211 = *re::foundationSerializationLogObjects(v181);
                      long long v17 = v234;
                      if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
                      {
                        v218 = v211;
                        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v245);
                        if (BYTE8(v245)) {
                          v219 = v246;
                        }
                        else {
                          v219 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v245 + 9);
                        }
                        *(_DWORD *)v248 = 136315138;
                        v249 = v219;
                        _os_log_error_impl(&dword_233120000, v218, OS_LOG_TYPE_ERROR, "PropertyBagReader; member is wrong type '%s'.",
                          v248,
                          0xCu);

                        if (void)v245 && (BYTE8(v245)) {
                          (*(void (**)(void))(*(void *)v245 + 40))();
                        }
                        long long v17 = v234;
                      }
                      goto LABEL_328;
                    }
                    v182 = [v237 objectForKey:@"value"];

                    long long v8 = v239;
                    if (!Member)
                    {
                      char LinearArray = 0;
                      goto LABEL_334;
                    }
                    uint64_t v164 = v233 + 1;
                    long long v17 = v234;
                    v95 = v243;
                    if (v229 == v233 + 1)
                    {
                      char LinearArray = 1;
                      uint64_t v229 = [obj countByEnumeratingWithState:&buf objects:__src count:16];
                      if (!v229)
                      {
LABEL_331:

                        goto LABEL_332;
                      }
                      goto LABEL_231;
                    }
                  }
                  v207 = *re::foundationSerializationLogObjects(0);
                  if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                  {
                    id v208 = v169;
                    v209 = v207;
                    uint64_t v210 = [v208 UTF8String];
                    LODWORD(v245) = 136315138;
                    *(void *)((char *)&v245 + 4) = v210;
                    _os_log_error_impl(&dword_233120000, v209, OS_LOG_TYPE_ERROR, "PropertyBagReader; unknown member name '%s'.",
                      (uint8_t *)&v245,
                      0xCu);
                  }
LABEL_329:

                  char LinearArray = 0;
                  long long v8 = v239;
LABEL_330:
                  v95 = v243;
                  goto LABEL_331;
                }
              }
              v188 = *re::foundationSerializationLogObjects((re *)v162);
              if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
              {
                v204 = v188;
                re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
                if (__src[8]) {
                  v205 = *(unsigned char **)&__src[16];
                }
                else {
                  v205 = &__src[9];
                }
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v205;
                _os_log_error_impl(&dword_233120000, v204, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing struct value '%s'.",
                  (uint8_t *)&buf,
                  0xCu);

                if (*(void *)__src && (__src[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)__src + 40))();
                }
                char LinearArray = 0;
                long long v8 = v239;
                v95 = v243;
              }
              else
              {
                char LinearArray = 0;
                long long v8 = v239;
              }
LABEL_332:
            }
          }
          else
          {
            v127 = *re::foundationSerializationLogObjects((re *)v94);
            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
            {
              v192 = v95;
              v193 = v127;
              re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
              if (__src[8]) {
                v194 = *(unsigned char **)&__src[16];
              }
              else {
                v194 = &__src[9];
              }
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = v194;
              _os_log_error_impl(&dword_233120000, v193, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing struct type '%s'.",
                (uint8_t *)&buf,
                0xCu);

              if (*(void *)__src && (__src[8] & 1) != 0) {
                (*(void (**)(void))(**(void **)__src + 40))();
              }
              char LinearArray = 0;
              v95 = v192;
            }
            else
            {
              char LinearArray = 0;
            }
          }

          goto LABEL_219;
        }
        v122 = *re::foundationSerializationLogObjects((re *)v93);
        if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR)) {
          goto LABEL_223;
        }
        v123 = v122;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if (__src[8]) {
          v124 = *(unsigned char **)&__src[16];
        }
        else {
          v124 = &__src[9];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v124;
        v125 = "PropertyBagReader; expected NSDictionary for struct '%s'.";
      }
      _os_log_error_impl(&dword_233120000, v123, OS_LOG_TYPE_ERROR, v125, (uint8_t *)&buf, 0xCu);

LABEL_142:
      if (*(void *)__src && (__src[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)__src + 40))();
      }
LABEL_223:
      char LinearArray = 0;
LABEL_224:

      goto LABEL_225;
    case 9:
      id v9 = v7;
      objc_opt_class();
      uint64_t v79 = objc_opt_isKindOfClass();
      char LinearArray = v79;
      if (v79)
      {
        v80 = v9;
        v81 = (unsigned int *)*((void *)a3 + 8);
        uint64_t v11 = v80;
        IntrospectionEnumValueWithVersioning = re::getIntrospectionEnumValueWithVersioning(v81, (char *)[(objc_object *)v11 UTF8String], (uint64_t)&buf);
        if ((_BYTE)buf)
        {
          memcpy(a4, (char *)&buf + 8, *((int *)a3 + 5));
        }
        else
        {
          v142 = *re::foundationSerializationLogObjects((re *)IntrospectionEnumValueWithVersioning);
          if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
          {
            v143 = v11;
            v144 = v142;
            uint64_t v145 = [(objc_object *)v143 UTF8String];
            uint64_t v146 = *((void *)a3 + 6);
            *(_DWORD *)__src = 136315394;
            *(void *)&__src[4] = v145;
            *(_WORD *)&__src[12] = 2080;
            *(void *)&__src[14] = v146;
            _os_log_error_impl(&dword_233120000, v144, OS_LOG_TYPE_ERROR, "PropertyBagReader; unexpected enum '%s' type for '%s' - skipping.",
              __src,
              0x16u);
          }
        }
        goto LABEL_201;
      }
      v120 = *re::foundationSerializationLogObjects((re *)v79);
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        uint64_t v121 = *((void *)a3 + 6);
        *(_DWORD *)__src = 136315138;
        *(void *)&__src[4] = v121;
        _os_log_error_impl(&dword_233120000, v120, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSString for enum '%s'.",
          __src,
          0xCu);
      }
      goto LABEL_202;
    case 0xA:
      objc_opt_class();
      uint64_t v33 = objc_opt_isKindOfClass();
      if (v33)
      {
        uint64_t v34 = (_anonymous_namespace_ *)[(objc_object *)v8 UTF8String];
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = "";
        long long v35 = buf;
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = "";
        v36 = *a4;
        v37 = a4[1];
        *(_OWORD *)a4 = v35;
        *(void *)__src = v35 & 0xFFFFFFFFFFFFFFFELL | v36 & 1;
        *(void *)&__src[8] = v37;
        re::StringID::destroyString((re::StringID *)__src);
        re::StringID::destroyString((re::StringID *)&buf);
        goto LABEL_148;
      }
      v108 = *re::foundationSerializationLogObjects((re *)v33);
      if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
      {
        v109 = v108;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if (__src[8]) {
          v110 = *(unsigned char **)&__src[16];
        }
        else {
          v110 = &__src[9];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v110;
        v111 = "PropertyBagReader; expected NSString for stringid '%s'.";
LABEL_261:
        _os_log_error_impl(&dword_233120000, v109, OS_LOG_TYPE_ERROR, v111, (uint8_t *)&buf, 0xCu);

LABEL_262:
        if (*(void *)__src && (__src[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)__src + 40))();
        }
      }
      goto LABEL_135;
    case 0xB:
      objc_opt_class();
      uint64_t v38 = objc_opt_isKindOfClass();
      if ((v38 & 1) == 0)
      {
        v40 = *re::foundationSerializationLogObjects((re *)v38);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          goto LABEL_135;
        }
        uint64_t v112 = *((void *)a3 + 6);
        *(_DWORD *)__src = 136315138;
        *(void *)&__src[4] = v112;
        v42 = "PropertyBagReader; expected NSString for callback '%s'.";
        goto LABEL_123;
      }
      v39 = (re *)(*((uint64_t (**)(void, void, const re::IntrospectionBase *, re::DynamicString **, uint64_t))a3
                   + 10))(*(void *)this, *((void *)this + 2), a3, a4, [(objc_object *)v8 UTF8String]);
      if (v39) {
        goto LABEL_148;
      }
      v40 = *re::foundationSerializationLogObjects(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *((void *)a3 + 6);
        *(_DWORD *)__src = 136315138;
        *(void *)&__src[4] = v41;
        v42 = "PropertyBagReader; failed to read type '%s' using callback.";
LABEL_123:
        _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, v42, __src, 0xCu);
      }
LABEL_135:
      char LinearArray = 0;
LABEL_225:

      return LinearArray & 1;
    case 0xD:
      v43 = [MEMORY[0x263EFF9D0] null];

      v44 = *(void (**)(const re::IntrospectionBase *, re::DynamicString **, uint64_t))(*(void *)a3 + 64);
      if (v43 == v8)
      {
        v44(a3, a4, 0);
LABEL_148:
        char LinearArray = 1;
      }
      else
      {
        v44(a3, a4, 1);
        v45 = (const re::IntrospectionBase *)*((void *)a3 + 6);
        uint64_t v46 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, re::DynamicString **))(*(void *)a3 + 72))(a3, a4);
      }
      goto LABEL_225;
    default:
      v83 = *re::foundationSerializationLogObjects((re *)v7);
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        goto LABEL_135;
      }
      v84 = v83;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if (__src[8]) {
        v85 = *(unsigned char **)&__src[16];
      }
      else {
        v85 = &__src[9];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v85;
      _os_log_error_impl(&dword_233120000, v84, OS_LOG_TYPE_ERROR, "PropertyBagReader; unhandled introspection type '%s'.",
        (uint8_t *)&buf,
        0xCu);

      goto LABEL_262;
  }
}

uint64_t re::introspect<unsigned long>()
{
  v0 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    if (v2)
    {
      re::introspect<unsigned long>(void)::info = (uint64_t)re::introspect_size_t(0, v3);
      v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    }
  }
  return v0[145];
}

char *re::introspect<unsigned char>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[371];
}

uint64_t re::introspect<unsigned short>()
{
  v0 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    if (v2)
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v3);
      v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    }
  }
  return v0[147];
}

uint64_t re::introspect<unsigned long long>()
{
  v0 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    if (v2)
    {
      re::introspect<unsigned long long>(void)::info = (uint64_t)re::introspect_uint64_t(0, v3);
      v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    }
  }
  return v0[149];
}

uint64_t anonymous namespace'::PropertyBagReader::readPointerPolymorphic(re **a1, void *a2, re::DynamicString **a3, _anonymous_namespace_ *a4, re::DynamicString *a5, int a6, uint64_t a7, int a8)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t v16 = v15;
  if (!a4)
  {
    uint64_t v30 = *re::foundationSerializationLogObjects(v15);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      v31 = "PropertyBagReader; invalid polymorphic data.";
LABEL_23:
      _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, v31, buf, 2u);
    }
LABEL_24:
    uint64_t v29 = 0;
    goto LABEL_25;
  }
  if (!a7)
  {
    uint64_t v30 = *re::foundationSerializationLogObjects(v15);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      v31 = "PropertyBagReader; invalid polymorphic type data.";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  long long v17 = [MEMORY[0x263EFF9D0] null];

  if (v17 != v16)
  {
    objc_opt_class();
    uint64_t isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      uint64_t v47 = v16;
      uint64_t v19 = [(objc_object *)v47 objectForKey:@"type"];
      uint64_t v20 = (void *)v19;
      if (v19 && (objc_opt_class(), uint64_t v19 = objc_opt_isKindOfClass(), (v19 & 1) != 0))
      {
        id v21 = v20;
        IntrospectionPolymorphicTypeByPrettyType = (re *)re::getIntrospectionPolymorphicTypeByPrettyType(a4, (const char *)[v21 UTF8String]);
        if (!IntrospectionPolymorphicTypeByPrettyType)
        {
          uint64_t v34 = *re::foundationSerializationLogObjects(0);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            id v35 = v21;
            v36 = v34;
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = [v35 UTF8String];
            _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to find polymorphic type '%s'.",
              buf,
              0xCu);
          }
          goto LABEL_27;
        }
        uint64_t v23 = IntrospectionPolymorphicTypeByPrettyType;
        int v24 = (re::Allocator *)*((void *)IntrospectionPolymorphicTypeByPrettyType + 1);
        if (v24)
        {
          v25 = re::introspectionAllocPointer(*a1, a1[2], v24);
          if (Value)
          {
            StringID v27 = (re::IntrospectionBase *)((char *)v25 - *((int *)v23 + 8));
            if (a8) {
              char v28 = a5;
            }
            else {
              char v28 = v27;
            }
            memcpy((char *)v28 + a6, (char *)v23 + 24, *(int *)(a7 + 20));
            *a3 = v27;
            uint64_t v29 = 1;
            goto LABEL_28;
          }
          v42 = v25;
          v43 = *re::foundationSerializationLogObjects(Value);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            v44 = (re *)*((void *)v23 + 1);
            v45 = v43;
            re::getPrettyTypeName(v44, (const re::IntrospectionBase *)buf);
            uint64_t v46 = (buf[8] & 1) != 0 ? v49 : &buf[9];
            *(_DWORD *)StringID v50 = 136315138;
            uint64_t v51 = v46;
            _os_log_error_impl(&dword_233120000, v45, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read polymorphic pointer target of type '%s'.",
              v50,
              0xCu);

            if (*(void *)buf)
            {
              if (buf[8]) {
                (*(void (**)(void))(**(void **)buf + 40))();
              }
            }
          }
          re::introspectionReleasePointer(v42, (uint64_t)*a1, (uint64_t)a1[2], *((void *)v23 + 1));
LABEL_27:
          uint64_t v29 = 0;
LABEL_28:

          goto LABEL_25;
        }
        v37 = *re::foundationSerializationLogObjects(IntrospectionPolymorphicTypeByPrettyType);
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        uint64_t v38 = *(void *)v23;
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v38;
        v39 = "PropertyBagReader; invlaid polymorphic info '%s'.";
        v40 = v37;
        uint32_t v41 = 12;
      }
      else
      {
        uint64_t v33 = *re::foundationSerializationLogObjects((re *)v19);
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_WORD *)long long buf = 0;
        v39 = "PropertyBagReader; missing polymorphic type.";
        v40 = v33;
        uint32_t v41 = 2;
      }
      _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);
      goto LABEL_27;
    }
    uint64_t v30 = *re::foundationSerializationLogObjects((re *)isKindOfClass);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_WORD *)long long buf = 0;
    v31 = "PropertyBagReader; expected NSDictionary for polymorphic type.";
    goto LABEL_23;
  }
  if (*a3)
  {
    re::introspectionReleasePointer(*a3, (uint64_t)*a1, (uint64_t)a1[2], a7);
    *a3 = 0;
  }
  uint64_t v29 = 1;
LABEL_25:

  return v29;
}

uint64_t anonymous namespace'::PropertyBagReader::readLinearArray(_anonymous_namespace_::PropertyBagReader *this, NSArray *a2, const re::IntrospectionBase *a3, char *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unsigned int v7 = a2;
  if ([(NSArray *)v7 count])
  {
    uint64_t v8 = 0;
    while (1)
    {
      id v9 = &a4[*((int *)a3 + 5) * (uint64_t)(int)v8];
      uint64_t v10 = [(NSArray *)v7 objectAtIndex:v8];
      if ((Value & 1) == 0) {
        break;
      }

      if ([(NSArray *)v7 count] <= ++v8) {
        goto LABEL_5;
      }
    }
    uint64_t v13 = *re::foundationSerializationLogObjects(Value);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = v13;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v17);
      if (v18) {
        uint64_t v16 = *(unsigned char **)&v19[7];
      }
      else {
        uint64_t v16 = v19;
      }
      *(_DWORD *)long long buf = 136315394;
      id v21 = v16;
      __int16 v22 = 1024;
      int v23 = v8;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read %s[%d].",
        buf,
        0x12u);

      if (v17 && (v18 & 1) != 0) {
        (*(void (**)(void))(*(void *)v17 + 40))();
      }
    }

    uint64_t v12 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v12 = 1;
  }

  return v12;
}

void std::__function::__func<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720368;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 8) + 40))(*(void *)(*(void *)(a1 + 8) + 8), *a2);
}

void *std::__function::__value_func<void ()(unsigned char *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(unsigned char *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(unsigned char *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

uint64_t std::function<void ()(unsigned char *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v8);
  }
  unint64_t v4 = (_anonymous_namespace_::PropertyBagReader *)std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t anonymous namespace'::PropertyBagReader::readMember(_anonymous_namespace_::PropertyBagReader *this, objc_object *a2, const re::IntrospectionMember *a3, re::DynamicString *a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned int v7 = a2;
  uint64_t v8 = v7;
  switch(*((_DWORD *)a3 + 10))
  {
    case 0:
    case 3:
      if (Value) {
        goto LABEL_3;
      }
      StringID v32 = *re::foundationSerializationLogObjects(Value);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      uint64_t v33 = *((void *)a3 + 1);
      *(_DWORD *)__src = 136315138;
      *(void *)&__src[4] = v33;
      uint64_t v13 = "PropertyBagReader; failed to read target for member '%s'.";
      goto LABEL_42;
    case 1:
      uint64_t v16 = v7;
      uint64_t v17 = (void *)((char *)a4 + *((int *)a3 + 9));
      objc_opt_class();
      uint64_t isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) == 0)
      {
        objc_opt_class();
        uint64_t v34 = objc_opt_isKindOfClass();
        if ((v34 & 1) == 0)
        {
          v42 = *re::foundationSerializationLogObjects((re *)v34);
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
            goto LABEL_40;
          }
          uint64_t v46 = *((void *)a3 + 1);
          *(_DWORD *)__src = 136315138;
          *(void *)&__src[4] = v46;
          v44 = "PropertyBagReader; expected NSArray for array '%s'.";
          goto LABEL_33;
        }
        id v35 = v16;
        unint64_t v36 = [(objc_object *)v35 count];
        if (v36 >> 31)
        {
          v37 = *re::foundationSerializationLogObjects((re *)v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v38 = *((void *)a3 + 1);
            *(_DWORD *)__src = 136315138;
            *(void *)&__src[4] = v38;
            v39 = "PropertyBagReader; array too big '%s'.";
LABEL_52:
            _os_log_error_impl(&dword_233120000, v37, OS_LOG_TYPE_ERROR, v39, __src, 0xCu);
          }
        }
        else
        {
          uint64_t v47 = (re *)[(objc_object *)v35 count];
          *(void *)__src = v47;
          if (*((_DWORD *)a3 + 10) == 1)
          {
            uint64_t v48 = *((void *)a3 + 6);
            if (v48)
            {
              memcpy((char *)a4 + *((int *)a3 + 16), __src, *(int *)(v48 + 20));
              re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)__src, *(const re::IntrospectionBase **)(*((void *)a3 + 2) + 48), [(objc_object *)v35 count]);
              re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)v56, (const re::IntrospectionBase *)__src);
              if (v49)
              {
                re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)v56);
                re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)__src);

                goto LABEL_3;
              }
              uint64_t v53 = *re::foundationSerializationLogObjects(v49);
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                uint64_t v55 = *((void *)a3 + 1);
                *(_DWORD *)long long buf = 136315138;
                uint64_t v58 = v55;
                _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read array data for member '%s'.",
                  buf,
                  0xCu);
              }
              re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)v56);
              re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)__src);
              goto LABEL_39;
            }
          }
          v37 = *re::foundationSerializationLogObjects(v47);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v54 = *((void *)a3 + 1);
            *(_DWORD *)__src = 136315138;
            *(void *)&__src[4] = v54;
            v39 = "PropertyBagReader; failed to set array size '%s'.";
            goto LABEL_52;
          }
        }
LABEL_39:

        goto LABEL_40;
      }
      *(void *)__src = 0;
      if (*((_DWORD *)a3 + 10) == 1)
      {
        uint64_t v19 = *((void *)a3 + 6);
        if (v19)
        {
          memcpy((char *)a4 + *((int *)a3 + 16), __src, *(int *)(v19 + 20));
          *uint64_t v17 = 0;

LABEL_3:
          uint64_t v10 = 1;
          goto LABEL_45;
        }
      }
      v42 = *re::foundationSerializationLogObjects((re *)isKindOfClass);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *((void *)a3 + 1);
        *(_DWORD *)__src = 136315138;
        *(void *)&__src[4] = v43;
        v44 = "PropertyBagReader; failed to set array size '%s'.";
LABEL_33:
        _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, v44, __src, 0xCu);
      }
LABEL_40:

      StringID v32 = *re::foundationSerializationLogObjects(v50);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = *((void *)a3 + 1);
        *(_DWORD *)__src = 136315138;
        *(void *)&__src[4] = v51;
        uint64_t v13 = "PropertyBagReader; failed to read polymorphic member '%s'.";
LABEL_42:
        char v14 = v32;
        uint32_t v15 = 12;
LABEL_43:
        _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v13, __src, v15);
      }
LABEL_44:
      uint64_t v10 = 0;
LABEL_45:

      return v10;
    case 2:
      uint64_t v20 = v7;
      id v21 = v20;
      uint64_t v22 = *((void *)a3 + 2);
      if (*(_DWORD *)(v22 + 16) == 1)
      {
        uint64_t v23 = *(void *)(v22 + 48);
        if (*(_DWORD *)(v23 + 16) == 8)
        {
          uint64_t v24 = *(_anonymous_namespace_ ****)(v23 + 64);
          v25 = *v24;
          if (*(_DWORD *)*v24 != 2)
          {
            uint64_t v26 = *(unsigned int *)(v23 + 56);
            StringID v27 = v24 + 1;
            uint64_t v28 = v26 - 1;
            do
            {
              uint64_t v29 = *v27++;
              v25 = v29;
              --v28;
            }
            while (*(_DWORD *)v29 != 2);
          }
          uint64_t v10 = 1;

          if (PointerPolymorphic) {
            goto LABEL_45;
          }
LABEL_29:
          StringID v32 = *re::foundationSerializationLogObjects(v31);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            goto LABEL_44;
          }
          uint64_t v45 = *((void *)a3 + 1);
          *(_DWORD *)__src = 136315138;
          *(void *)&__src[4] = v45;
          uint64_t v13 = "PropertyBagReader; failed to read polymorphic member '%s'.";
          goto LABEL_42;
        }
        v40 = *re::foundationSerializationLogObjects((re *)v20);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          goto LABEL_29;
        }
        *(_WORD *)__src = 0;
        uint32_t v41 = "PropertyBagReader; polymorphic member needs to point to structure.";
      }
      else
      {
        v40 = *re::foundationSerializationLogObjects((re *)v20);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        *(_WORD *)__src = 0;
        uint32_t v41 = "PropertyBagReader; polymorphic member needs to be pointer.";
      }
      _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, v41, __src, 2u);
      goto LABEL_28;
    default:
      uint64_t v11 = *re::foundationSerializationLogObjects((re *)v7);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      int v12 = *((_DWORD *)a3 + 10);
      *(_DWORD *)__src = 67109120;
      *(_DWORD *)&__src[4] = v12;
      uint64_t v13 = "PropertyBagReader; unknown member type '%d'.";
      char v14 = v11;
      uint32_t v15 = 8;
      goto LABEL_43;
  }
}

uint64_t anonymous namespace'::BinarySerializer::serialize(_anonymous_namespace_ *a1, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3, uint64_t a4, uint64_t a5)
{
  v23[0] = a1;
  v23[1] = a5;
  long long v24 = 0u;
  long long v25 = 0u;
  unsigned int v26 = 0;
  uint64_t v27 = 0x7FFFFFFFLL;
  uint64_t v28 = a4;
  *((void *)&v29 + 1) = 0;
  long long v30 = 0uLL;
  re::DynamicString::setCapacity(&v29, 0);
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::init((uint64_t)&v24, a5, 3);
  *(void *)&long long v29 = a5;
  re::DynamicString::setCapacity(&v29, 0);
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
  unint64_t v9 = v10 ^ (v10 >> 31);
  LODWORD(v10) = v24;
  if ((void)v24)
  {
    unint64_t v10 = v9 % DWORD2(v25);
    uint64_t v11 = *(unsigned int *)(*((void *)&v24 + 1) + 4 * v10);
    if (v11 != 0x7FFFFFFF)
    {
      if (*(const re::IntrospectionBase ***)(v25 + 32 * v11 + 16) == a3) {
        goto LABEL_9;
      }
      while (1)
      {
        uint64_t v11 = *(_DWORD *)(v25 + 32 * v11 + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          break;
        }
        if (*(const re::IntrospectionBase ***)(v25 + 32 * v11 + 16) == a3) {
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v12 = v27;
  if (v27 == 0x7FFFFFFF)
  {
    uint64_t v12 = v26;
    unsigned int v13 = v26;
    if (v26 == DWORD2(v25))
    {
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::setCapacity((uint64_t)&v24, 2 * HIDWORD(v25));
      unsigned int v13 = v26;
      LODWORD(v10) = v9 % DWORD2(v25);
    }
    unsigned int v26 = v13 + 1;
    uint64_t v14 = v25;
    int v15 = *(_DWORD *)(v25 + 32 * v12 + 8);
  }
  else
  {
    uint64_t v14 = v25;
    int v15 = *(_DWORD *)(v25 + 32 * v27 + 8);
    LODWORD(v27) = v15 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
  *(_DWORD *)(v25 + 32 * v12 + 8) = *(_DWORD *)(v25 + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v24 + 1)
                                                                                             + 4 * v10);
  *(void *)(v25 + 32 * v12) = v9;
  *(void *)(v25 + 32 * v12 + 16) = a3;
  *(_DWORD *)(v25 + 32 * v12 + 24) = 0;
  *(_DWORD *)(*((void *)&v24 + 1) + 4 * v10) = v12;
  ++HIDWORD(v25);
  ++HIDWORD(v27);
LABEL_9:
  if (v16)
  {
    v22[0] = 69;
    uint64_t v17 = 1;
    char v18 = (re *)(*(uint64_t (**)(_anonymous_namespace_ *, uint8_t *, uint64_t))(*(void *)a1 + 16))(a1, v22, 1);
    if (v18 == (re *)1) {
      goto LABEL_15;
    }
    uint64_t v19 = *re::foundationSerializationLogObjects(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v22 = 0;
      uint64_t v20 = "Binary Serialization; failed to write end of file tag.";
LABEL_25:
      _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, v20, v22, 2u);
    }
  }
  else
  {
    uint64_t v19 = *re::foundationSerializationLogObjects((re *)v16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v22 = 0;
      uint64_t v20 = "Binary Serialization; failed to write body serialization.";
      goto LABEL_25;
    }
  }
  uint64_t v17 = 0;
LABEL_15:
  if ((void)v29)
  {
    if (BYTE8(v29)) {
      (*(void (**)(void))(*(void *)v29 + 40))();
    }
    long long v29 = 0u;
    long long v30 = 0u;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v24);
  return v17;
}

uint64_t re::serializeBinaryToBuffer(const re::IntrospectionBase *a1, const re::IntrospectionBase **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v20 = &unk_26E714838;
  int v21 = 0;
  {
    uint64_t v17 = 0;
    goto LABEL_6;
  }
  uint64_t v14 = v21;
  *a7 = v21;
  if (!v14)
  {
    uint64_t v17 = 0;
    *a6 = 0;
    return v17;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a4 + 32))(a4, v14, 0);
  *a6 = v15;
  uint64_t v16 = *a7;
  v19[0] = &unk_26E714D80;
  v19[1] = v15;
  v19[2] = v16;
  v19[3] = 0;
  if ((v17 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 40))(a4, *a6);
LABEL_6:
    *a6 = 0;
    *a7 = 0;
  }
  return v17;
}

uint64_t anonymous namespace'::BinarySerializer::write(_anonymous_namespace_::BinarySerializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3)
{
  v97[2] = *MEMORY[0x263EF8340];
  if (!a3)
  {
    unint64_t v10 = *re::foundationSerializationLogObjects(this);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    LOWORD(v87) = 0;
    unint64_t v9 = "Binary Serialization; target memory is empty (FATAL, INTERNAL).";
LABEL_99:
    v61 = (uint8_t *)&v87;
LABEL_100:
    v71 = v10;
    uint32_t v72 = 2;
LABEL_101:
    _os_log_error_impl(&dword_233120000, v71, OS_LOG_TYPE_ERROR, v9, v61, v72);
    return 0;
  }
  long long v5 = this;
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
    case 9:
      unint64_t v6 = (re *)(*(uint64_t (**)(void))(**(void **)this + 16))();
      if (v6 == (re *)*((int *)a2 + 5)) {
        return 1;
      }
      unsigned int v7 = *re::foundationSerializationLogObjects(v6);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      uint64_t v8 = *((void *)a2 + 6);
      LODWORD(v87) = 136315138;
      *(void *)((char *)&v87 + 4) = v8;
      unint64_t v9 = "Binary Serialization; failed to write basic type '%s'.";
      goto LABEL_96;
    case 1:
      unsigned int v13 = *a3;
      re::PolymorphicData::makeWithPointer(*((void *)a2 + 6), *a3, &v87);
    case 2:
      uint64_t v15 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      unint64_t v16 = *((int *)a2 + 16);
    case 3:
      LODWORD(v87) = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 88))(a2, a3);
      uint64_t v17 = (re *)(*(uint64_t (**)(void, long long *, uint64_t))(**(void **)v5 + 16))(*(void *)v5, &v87, 4);
      if (v17 == (re *)4)
      {
        if (!v87) {
          return 1;
        }
        goto LABEL_18;
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v17);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v9 = "Binary Serialization; failed to write dynamic array length.";
      goto LABEL_71;
    case 4:
      LODWORD(v87) = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 80))(a2, a3);
      char v18 = (re *)(*(uint64_t (**)(void, long long *, uint64_t))(**(void **)v5 + 16))(*(void *)v5, &v87, 4);
      if (v18 == (re *)4)
      {
        if (!v87) {
          return 1;
        }
LABEL_18:
        uint64_t v19 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, void))(*(void *)a2 + 104))(a2, a3, 0);
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v18);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v9 = "Binary Serialization; failed to write fixed array length.";
LABEL_71:
      v61 = buf;
      goto LABEL_100;
    case 5:
      *(_DWORD *)long long buf = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 80))(a2, a3);
      uint64_t v20 = (re *)(*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)v5 + 16))(*(void *)v5, buf, 4);
      if (v20 != (re *)4)
      {
        unint64_t v10 = *re::foundationSerializationLogObjects(v20);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        LOWORD(v87) = 0;
        unint64_t v9 = "Binary Serialization; failed to write data array length.";
        goto LABEL_99;
      }
      *(void *)&long long v87 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 88))(a2, a3);
      *((void *)&v87 + 1) = v21;
      while (1)
      {
        uint64_t v22 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 96))(a2, a3);
        if ((void)v87 == v22 && WORD4(v87) == (unsigned __int16)v23 && WORD5(v87) == HIWORD(v23)) {
          return 1;
        }
        long long v24 = (const re::IntrospectionBase *)*((void *)a2 + 6);
        long long v25 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, long long *))(*(void *)a2 + 104))(a2, &v87);
        if ((v26 & 1) == 0) {
          break;
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v87);
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v26);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      LOWORD(__dst[0]) = 0;
      unint64_t v9 = "Binary Serialization; failed to write data array item.";
      v61 = (uint8_t *)__dst;
      goto LABEL_100;
    case 6:
      uint64_t v27 = *(void *)this;
      if ((_BYTE)a3[1]) {
        uint64_t v28 = (const char *)a3[2];
      }
      else {
        uint64_t v28 = (char *)a3 + 9;
      }
      size_t v62 = strlen(v28);
      LODWORD(v87) = v62;
      uint64_t v63 = (re *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v27 + 16))(v27, &v87, 4);
      if (v63 == (re *)4)
      {
        uint64_t v64 = (re *)(*(uint64_t (**)(uint64_t, const char *, size_t))(*(void *)v27 + 16))(v27, v28, v62);
        if (v64 == (re *)v62) {
          return 1;
        }
      }
      else
      {
        uint64_t v69 = *re::foundationSerializationLogObjects(v63);
        uint64_t v64 = (re *)os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
        if (v64)
        {
          LOWORD(v87) = 0;
          _os_log_error_impl(&dword_233120000, v69, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to write string length.",
            (uint8_t *)&v87,
            2u);
        }
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v64);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      LOWORD(v87) = 0;
      unint64_t v9 = "Binary Serialization; failed to write dynamic string.";
      goto LABEL_99;
    case 7:
      *(_DWORD *)long long buf = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 80))(a2, a3);
      long long v29 = (re *)(*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)v5 + 16))(*(void *)v5, buf, 4);
      if (v29 == (re *)4)
      {
        *(void *)&long long v87 = &unk_26E7203B0;
        *((void *)&v87 + 1) = v5;
        uint64_t v88 = a2;
        BOOL v89 = &v87;
        char v30 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, long long *))(*(void *)a2 + 104))(a2, a3, &v87);
        v31 = (re *)std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](&v87);
        if (v30) {
          return 1;
        }
        unint64_t v10 = *re::foundationSerializationLogObjects(v31);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v87) = 0;
          unint64_t v9 = "Binary Serialization; failed to iterate over hash table keys.";
          goto LABEL_99;
        }
        return 0;
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v29);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      LOWORD(v87) = 0;
      unint64_t v9 = "Binary Serialization; failed to write hash table length.";
      goto LABEL_99;
    case 8:
      if (!*((_DWORD *)a2 + 14)) {
        return 1;
      }
      unint64_t v32 = 0;
      break;
    case 0xA:
      re::StringID::StringID((re::StringID *)&v87, (const StringID *)a3);
      uint64_t v49 = *(void *)v5;
      uint64_t v50 = *((void *)&v87 + 1);
      size_t v51 = strlen(*((const char **)&v87 + 1));
      *(_DWORD *)long long buf = v51;
      uint64_t v52 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v49 + 16))(v49, buf, 4);
      if (v52 == (re *)4)
      {
        BOOL v11 = (*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(void *)v49 + 16))(v49, v50, v51) == v51;
      }
      else
      {
        v65 = *re::foundationSerializationLogObjects(v52);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_233120000, v65, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to write string length.",
            buf,
            2u);
        }
        BOOL v11 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v87);
      return v11;
    case 0xB:
      uint64_t v53 = *((void *)this + 10);
      if (v53)
      {
        *((void *)this + 10) = 1;
        uint64_t v54 = (unsigned char *)*((void *)this + 11);
      }
      else
      {
        *((unsigned char *)this + 80) = v53 & 1;
        uint64_t v54 = (char *)this + 81;
      }
      unsigned char *v54 = 0;
      uint64_t v66 = (re *)(*((uint64_t (**)(void, const re::IntrospectionBase *, const re::IntrospectionBase **, char *))a2
                   + 9))(*((void *)this + 8), a2, a3, (char *)this + 72);
      if ((v66 & 1) == 0)
      {
        unsigned int v7 = *re::foundationSerializationLogObjects(v66);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        uint64_t v70 = *((void *)a2 + 6);
        LODWORD(v87) = 136315138;
        *(void *)((char *)&v87 + 4) = v70;
        unint64_t v9 = "Binary Serialization; failed to write type '%s' using serialization callback.";
LABEL_96:
        v61 = (uint8_t *)&v87;
        v71 = v7;
        goto LABEL_97;
      }
      uint64_t v67 = *(void *)v5;
      if (*((unsigned char *)v5 + 80)) {
        uint64_t v68 = (const char *)*((void *)v5 + 11);
      }
      else {
        uint64_t v68 = (char *)v5 + 81;
      }
      size_t v73 = strlen(v68);
      LODWORD(v87) = v73;
      v74 = (re *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v67 + 16))(v67, &v87, 4);
      if (v74 == (re *)4) {
        return (*(uint64_t (**)(uint64_t, const char *, size_t))(*(void *)v67 + 16))(v67, v68, v73) == v73;
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v74);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v87) = 0;
        unint64_t v9 = "Binary Serialization; failed to write string length.";
        goto LABEL_99;
      }
      return 0;
    case 0xD:
      buf[0] = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 56))(a2, a3);
      uint64_t v58 = (re *)(*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)v5 + 16))(*(void *)v5, buf, 1);
      if (v58 == (re *)1)
      {
        if (!buf[0]) {
          return 1;
        }
        v59 = (const re::IntrospectionBase *)*((void *)a2 + 6);
        uint64_t v60 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)a2 + 80))(a2, a3);
      }
      unint64_t v10 = *re::foundationSerializationLogObjects(v58);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      LOWORD(v87) = 0;
      unint64_t v9 = "Binary Serialization; failed to write optional value.";
      goto LABEL_99;
    default:
      uint64_t v55 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        v56 = v55;
        re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v87);
        uint64_t v57 = (BYTE8(v87) & 1) != 0 ? v88 : (const re::IntrospectionBase *)((char *)&v87 + 9);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v57;
        _os_log_error_impl(&dword_233120000, v56, OS_LOG_TYPE_ERROR, "Binary Serialization; unhandled introspection type '%s'.",
          buf,
          0xCu);

        if ((void)v87)
        {
          if (BYTE8(v87)) {
            (*(void (**)(void))(*(void *)v87 + 40))();
          }
        }
      }
      return 0;
  }
  while (1)
  {
    uint64_t v33 = *(void *)(*((void *)a2 + 8) + 8 * v32);
    if (*(_DWORD *)v33 == 1) {
      break;
    }
LABEL_50:
    ++v32;
    BOOL v11 = 1;
    if (v32 >= *((unsigned int *)a2 + 14)) {
      return v11;
    }
  }
  switch(*(_DWORD *)(v33 + 40))
  {
    case 0:
    case 3:
      if (this) {
        goto LABEL_50;
      }
      int v75 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      uint64_t v77 = *(void *)(v33 + 8);
      LODWORD(v87) = 136315138;
      *(void *)((char *)&v87 + 4) = v77;
      unint64_t v9 = "Binary Serialization; failed to write target for member '%s'.";
      goto LABEL_121;
    case 1:
      uint64_t v34 = *(void *)(v33 + 48);
      if (!v34)
      {
        int v75 = *re::foundationSerializationLogObjects(this);
        if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        uint64_t v78 = *(void *)(v33 + 8);
        LODWORD(v87) = 136315138;
        *(void *)((char *)&v87 + 4) = v78;
        unint64_t v9 = "Binary Serialization; failed to get array length for member '%s'.";
        goto LABEL_121;
      }
      id v35 = (char *)a3 + *(int *)(v33 + 64);
      __dst[0] = 0;
      unint64_t v36 = (re *)memcpy(__dst, v35, *(int *)(v34 + 20));
      if (HIDWORD(__dst[0]))
      {
        int v75 = *re::foundationSerializationLogObjects(v36);
        if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        uint64_t v81 = *(void *)(v33 + 8);
        LODWORD(v87) = 136315138;
        *(void *)((char *)&v87 + 4) = v81;
        unint64_t v9 = "Binary Serialization; array too big for member '%s'.";
        goto LABEL_121;
      }
      int v85 = __dst[0];
      v37 = (re *)(*(uint64_t (**)(void, int *, uint64_t))(**(void **)v5 + 16))(*(void *)v5, &v85, 4);
      if (v37 != (re *)4)
      {
        int v75 = *re::foundationSerializationLogObjects(v37);
        if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        uint64_t v82 = *(void *)(v33 + 8);
        LODWORD(v87) = 136315138;
        *(void *)((char *)&v87 + 4) = v82;
        unint64_t v9 = "Binary Serialization; failed to write member array length for member '%s'.";
LABEL_121:
        v61 = (uint8_t *)&v87;
        v71 = v75;
LABEL_97:
        uint32_t v72 = 12;
        goto LABEL_101;
      }
      uint64_t v38 = *(void *)(v33 + 16);
      uint64_t v84 = 0;
      if (v85) {
        v39 = (char *)a3 + *(int *)(v33 + 36);
      }
      else {
        v39 = (char *)&v84;
      }
      re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v87, *(const re::IntrospectionBase **)(v38 + 48), v85);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)buf, 0);
      uint64_t v92 = 0x800000001;
      int v93 = 8;
      __int16 v94 = 0;
      uint64_t v95 = 0;
      uint64_t v96 = 0xFFFFFFFFLL;
      *(void *)long long buf = &unk_26E6CDA08;
      v97[0] = &v87;
      v97[1] = 0;
      *(void *)long long buf = &unk_26E6CDA08;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v97);
      *(void *)long long buf = &unk_26E6DECE0;
      objc_destructInstance(&buf[8]);
      *(void *)&long long v87 = &unk_26E6C2018;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&v90);
      *(void *)&long long v87 = &unk_26E6DECE0;
      this = (_anonymous_namespace_::BinarySerializer *)objc_destructInstance((char *)&v87 + 8);
      if (v48) {
        goto LABEL_50;
      }
      int v75 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        uint64_t v83 = *(void *)(v33 + 8);
        LODWORD(v87) = 136315138;
        *(void *)((char *)&v87 + 4) = v83;
        unint64_t v9 = "Binary Serialization; failed to write array data for member '%s'.";
        goto LABEL_121;
      }
      return 0;
    case 2:
      uint64_t v40 = *(void *)(*(void *)(v33 + 16) + 48);
      uint32_t v41 = *(void **)(v40 + 64);
      v42 = (_DWORD *)*v41;
      if (*(_DWORD *)*v41 != 2)
      {
        uint64_t v43 = (_DWORD **)(v41 + 1);
        uint64_t v44 = *(unsigned int *)(v40 + 56) - 1;
        do
        {
          uint64_t v45 = *v43++;
          v42 = v45;
          --v44;
        }
        while (*v45 != 2);
      }
      uint64_t v46 = *(char **)((char *)a3 + *(int *)(v33 + 36));
      uint64_t v47 = *(void *)(v33 + 48);
      *(void *)&long long v87 = (char *)a3 + *(int *)(v33 + 64);
      *((void *)&v87 + 1) = v47;
      uint64_t v88 = (const re::IntrospectionBase *)*((void *)v42 + 1);
      if (this) {
        goto LABEL_50;
      }
      int v75 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      uint64_t v80 = *(void *)(v33 + 8);
      LODWORD(v87) = 136315138;
      *(void *)((char *)&v87 + 4) = v80;
      unint64_t v9 = "Binary Serialization; failed to find polymorphic member '%s'.";
      goto LABEL_121;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "write", 212);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233EC5BB4);
  }
}

uint64_t anonymous namespace'::BinarySerializer::writePointer(_anonymous_namespace_::BinarySerializer *this, const re::IntrospectionBase *a2, char *a3, re::PolymorphicData *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  __s = a3;
  if (a3)
  {
    uint64_t v8 = (char *)this + 16;
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
    unint64_t v10 = v9 ^ (v9 >> 31);
    if (*((void *)this + 2))
    {
      uint64_t v11 = *(unsigned int *)(*((void *)this + 3) + 4 * (v10 % *((unsigned int *)this + 10)));
      if (v11 != 0x7FFFFFFF)
      {
        uint64_t v30 = *((void *)this + 4);
        if (*(char **)(v30 + 32 * v11 + 16) == a3)
        {
LABEL_32:
          uint64_t v32 = *(void *)this;
          buf[0] = 82;
          uint64_t v33 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v32 + 16))(v32, buf, 1);
          if (v33 != (re *)1)
          {
            uint64_t v19 = *re::foundationSerializationLogObjects(v33);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              uint64_t v20 = "Binary Serialization; failed to write reference tag.";
              goto LABEL_51;
            }
            return 0;
          }
          uint64_t v34 = (re *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)this + 16))(*(void *)this, v30 + 32 * v11 + 24, 4);
          if (v34 != (re *)4)
          {
            uint64_t v19 = *re::foundationSerializationLogObjects(v34);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              uint64_t v20 = "Binary Serialization; failed to write reference tag index.";
              goto LABEL_51;
            }
            return 0;
          }
          return 1;
        }
        while (1)
        {
          int v31 = *(_DWORD *)(v30 + 32 * v11 + 8);
          uint64_t v11 = v31 & 0x7FFFFFFF;
          if ((v31 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(char **)(v30 + 32 * v11 + 16) == a3) {
            goto LABEL_32;
          }
        }
      }
      unint64_t v12 = *((unsigned int *)this + 10);
      *(_DWORD *)long long buf = *((_DWORD *)this + 11);
      unint64_t v13 = v10 % v12;
      uint64_t v14 = *(unsigned int *)(*((void *)this + 3) + 4 * (v10 % v12));
      if (v14 != 0x7FFFFFFF)
      {
        uint64_t v15 = *((void *)this + 4);
        if (*(char **)(v15 + 32 * v14 + 16) == a3)
        {
LABEL_14:
          uint64_t v21 = *(void *)this;
          buf[0] = 73;
          uint64_t v22 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v21 + 16))(v21, buf, 1);
          if (v22 != (re *)1)
          {
            uint64_t v19 = *re::foundationSerializationLogObjects(v22);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              uint64_t v20 = "Binary Serialization; failed to write inline object tag.";
              goto LABEL_51;
            }
            return 0;
          }
          {
            if (v22)
            {
              re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v47);
            }
          }
          if ((const re::IntrospectionBase *)re::introspect<char>(void)::info == a2)
          {
            size_t v36 = strlen(__s);
            if (HIDWORD(v36))
            {
              uint64_t v19 = *re::foundationSerializationLogObjects((re *)v36);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                uint64_t v20 = "Binary Serialization; string too long.";
                goto LABEL_51;
              }
              return 0;
            }
            *(_DWORD *)long long buf = v36;
            v37 = (re *)(*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)this + 16))(*(void *)this, buf, 4);
            if (v37 == (re *)4)
            {
              uint64_t v38 = (re *)(*(uint64_t (**)(void, char *, void))(**(void **)this + 16))(*(void *)this, __s, *(unsigned int *)buf);
              if (v38 == (re *)*(unsigned int *)buf) {
                return 1;
              }
              uint64_t v19 = *re::foundationSerializationLogObjects(v38);
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                return 0;
              }
              LOWORD(__dst[0]) = 0;
              uint64_t v20 = "Binary Serialization; failed to write string.";
            }
            else
            {
              uint64_t v19 = *re::foundationSerializationLogObjects(v37);
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                return 0;
              }
              LOWORD(__dst[0]) = 0;
              uint64_t v20 = "Binary Serialization; failed to write string length.";
            }
            v39 = (uint8_t *)__dst;
            goto LABEL_52;
          }
          if (a4)
          {
            unsigned int v23 = (unsigned int *)*((void *)a4 + 2);
            if (v23)
            {
              long long v24 = *(const void **)a4;
              if (*(void *)a4 && (uint64_t v25 = *((void *)a4 + 1)) != 0)
              {
                unsigned int v26 = __s;
                __dst[0] = 0;
                uint64_t v27 = (re *)memcpy(__dst, v24, *(int *)(v25 + 20));
                uint64_t v28 = *v23;
                if (v28)
                {
                  long long v29 = (int *)(*((void *)v23 + 1) + 32);
                  while (*((void *)v29 - 1) != __dst[0])
                  {
                    v29 += 10;
                    if (!--v28) {
                      goto LABEL_25;
                    }
                  }
                  uint64_t v43 = (re *)(*(uint64_t (**)(void, void *, uint64_t))(**(void **)this + 16))(*(void *)this, __dst, 8);
                  if (v43 != (re *)8)
                  {
                    uint64_t v45 = *re::foundationSerializationLogObjects(v43);
                    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                      return 0;
                    }
                    uint64_t v46 = *((void *)v29 - 4);
                    *(_DWORD *)long long buf = 136315138;
                    uint64_t v51 = v46;
                    uint64_t v20 = "Binary Serialization; failed to write type for polymorphic type '%s'.";
                    v39 = buf;
                    uint64_t v40 = v45;
                    uint32_t v41 = 12;
                    goto LABEL_53;
                  }
                  if ((v44 & 1) == 0)
                  {
                    uint64_t v19 = *re::foundationSerializationLogObjects(v44);
                    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                      return 0;
                    }
                    *(_WORD *)long long buf = 0;
                    uint64_t v20 = "Binary Serialization; failed to write pointer dereferenced target.";
                    goto LABEL_51;
                  }
                  return 1;
                }
LABEL_25:
                uint64_t v19 = *re::foundationSerializationLogObjects(v27);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  uint64_t v20 = "Binary Serialization; failed to find polymorphic type.";
                  goto LABEL_51;
                }
              }
              else
              {
                uint64_t v19 = *re::foundationSerializationLogObjects(v22);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  uint64_t v20 = "Binary Serialization; invalid polymorphic data.";
                  goto LABEL_51;
                }
              }
              return 0;
            }
          }
          if ((v35 & 1) == 0)
          {
            uint64_t v19 = *re::foundationSerializationLogObjects(v35);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              uint64_t v20 = "Binary Serialization; failed to write pointer dereferenced target.";
              goto LABEL_51;
            }
            return 0;
          }
          return 1;
        }
        while (1)
        {
          uint64_t v14 = *(_DWORD *)(v15 + 32 * v14 + 8) & 0x7FFFFFFF;
          if (v14 == 0x7FFFFFFF) {
            break;
          }
          if (*(char **)(v15 + 32 * v14 + 16) == a3) {
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      LODWORD(v13) = 0;
      *(_DWORD *)long long buf = *((_DWORD *)this + 11);
    }
    re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>((uint64_t)v8, v13, v10, &__s, buf);
    ++*((_DWORD *)this + 14);
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)this;
  buf[0] = 78;
  uint64_t v17 = 1;
  char v18 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, re::PolymorphicData *))(*(void *)v16 + 16))(v16, buf, 1, a4);
  if (v18 != (re *)1)
  {
    uint64_t v19 = *re::foundationSerializationLogObjects(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v20 = "Binary Serialization; failed to write NULL tag.";
LABEL_51:
      v39 = buf;
LABEL_52:
      uint64_t v40 = v19;
      uint32_t v41 = 2;
LABEL_53:
      _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, v20, v39, v41);
    }
    return 0;
  }
  return v17;
}

BOOL anonymous namespace'::BinarySerializer::writeLinearArray(_anonymous_namespace_::BinarySerializer *this, const re::IntrospectionBase *a2, unint64_t a3, char *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v8 = *((_DWORD *)a2 + 4);
  if (v8) {
    BOOL v9 = v8 == 9;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    unint64_t v10 = (re *)(*(uint64_t (**)(void))(**(void **)this + 16))();
    if (v10 != (re *)(*((int *)a2 + 5) * a3))
    {
      uint64_t v11 = *re::foundationSerializationLogObjects(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *((void *)a2 + 6);
        *(_DWORD *)uint64_t v20 = 136315138;
        *(void *)&v20[4] = v17;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to fast write array of basic type '%s'.",
          v20,
          0xCu);
      }
      return 0;
    }
    return 1;
  }
  if (!a3) {
    return 1;
  }
  if (v13)
  {
    unint64_t v14 = 0;
    while (a3 - 1 != v14)
    {
      if ((v13 & 1) == 0)
      {
        BOOL v12 = v14 >= a3;
        goto LABEL_18;
      }
    }
    return 1;
  }
  BOOL v12 = 0;
  LODWORD(v14) = 0;
LABEL_18:
  uint64_t v15 = *re::foundationSerializationLogObjects((re *)v13);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    char v18 = v15;
    re::getPrettyTypeName(a2, (const re::IntrospectionBase *)v20);
    if (v20[8]) {
      uint64_t v19 = v21;
    }
    else {
      uint64_t v19 = &v20[9];
    }
    *(_DWORD *)long long buf = 136315394;
    unsigned int v23 = v19;
    __int16 v24 = 1024;
    int v25 = v14;
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to write %s[%d].",
      buf,
      0x12u);

    if (*(void *)v20 && (v20[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v20 + 40))();
    }
  }
  return v12;
}

void std::__function::__func<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E7203B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7203B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, const re::IntrospectionBase ***a2, const re::IntrospectionBase ***a3)
{
  unint64_t v4 = *a3;
  long long v5 = *(_anonymous_namespace_::BinarySerializer **)(a1 + 8);
  if ((v6 & 1) == 0)
  {
    BOOL v9 = *re::foundationSerializationLogObjects((re *)v6);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v13 = 0;
    unint64_t v10 = "Binary Serialization; failed to write hash table key.";
    uint64_t v11 = (uint8_t *)&v13;
LABEL_9:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
    return 0;
  }
  if (v7) {
    return 1;
  }
  BOOL v9 = *re::foundationSerializationLogObjects((re *)v7);
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __int16 v12 = 0;
    unint64_t v10 = "Binary Serialization; failed to write hash table value.";
    uint64_t v11 = (uint8_t *)&v12;
    goto LABEL_9;
  }
  return result;
}

uint64_t *re::foundationSerializationLogObjects(re *this)
{
  {
    re::foundationSerializationLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Foundation.Serialization");
  }
  return &re::foundationSerializationLogObjects(void)::logObjects;
}

uint64_t re::legacyTypeRegistry(re *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      int v1 = &dword_2687A1000;
    }
  }
  return *((void *)v1 + 283);
}

uint64_t **anonymous namespace'::loadLegacyTypeRegistry(_anonymous_namespace_ *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  re::Bundle::reResourcesFramework((uint64_t)&buf);
  if ((_BYTE)buf) {
    int v1 = (void *)*((void *)&buf + 1);
  }
  else {
    int v1 = 0;
  }
  id v2 = v1;
  id location = v2;
  if ((_BYTE)buf)
  {

    id v2 = location;
  }
  id v48 = v2;
  if (v48)
  {
    File = (_anonymous_namespace_ *)re::Bundle::findFile((re::Bundle *)&v48, "RealityKit-Schema-Fall2020.reschema", (re::DynamicString *)&buf);
    uint64_t v4 = *((void *)&buf + 1) >> 1;
    if ((BYTE8(buf) & 1) == 0) {
      uint64_t v4 = BYTE8(buf) >> 1;
    }
    if (v4)
    {
      uint64_t v5 = buf;
      uint64_t v6 = v53;
      *(void *)&long long buf = 0;
      uint64_t v53 = 0;
      *(void *)&long long v50 = v6;
      *((void *)&v50 + 1) = v54;
      *(void *)&long long v49 = v5;
      *((void *)&v49 + 1) = *((void *)&buf + 1);
    }
    else
    {
      long long v49 = 0u;
      long long v50 = 0u;
      re::DynamicString::setCapacity(&v49, 0);
      if (void)buf && (BYTE8(buf)) {
        (*(void (**)(void))(*(void *)buf + 40))();
      }
    }
  }
  else
  {
    long long v49 = 0u;
    long long v50 = 0u;
    re::DynamicString::setCapacity(&v49, 0);
  }

  uint64_t v8 = BYTE8(v49) & 1;
  uint64_t v9 = *((void *)&v49 + 1) >> 1;
  uint64_t v10 = BYTE8(v49) >> 1;
  if (BYTE8(v49)) {
    uint64_t v11 = *((void *)&v49 + 1) >> 1;
  }
  else {
    uint64_t v11 = BYTE8(v49) >> 1;
  }
  if (!v11)
  {
    re::Bundle::coreREFramework(&buf);
    re::ObjCObject::operator=(&location, (id *)&buf);

    id v47 = location;
    if (v47)
    {
      __int16 v12 = (_anonymous_namespace_ *)re::Bundle::findFile((re::Bundle *)&v47, "RealityKit-Schema-Fall2020.reschema", (re::DynamicString *)&buf);
      uint64_t v13 = *((void *)&buf + 1) >> 1;
      if ((BYTE8(buf) & 1) == 0) {
        uint64_t v13 = BYTE8(buf) >> 1;
      }
      if (v13)
      {
        uint64_t v14 = buf;
        uint64_t v15 = v53;
        *(void *)&long long buf = 0;
        uint64_t v53 = 0;
        *(void *)&long long v43 = v15;
        *((void *)&v43 + 1) = v54;
        *(void *)&long long v42 = v14;
        *((void *)&v42 + 1) = *((void *)&buf + 1);
      }
      else
      {
        long long v42 = 0u;
        long long v43 = 0u;
        re::DynamicString::setCapacity(&v42, 0);
        if (void)buf && (BYTE8(buf)) {
          (*(void (**)(void))(*(void *)buf + 40))();
        }
      }
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
      re::DynamicString::setCapacity(&v42, 0);
    }
    re::DynamicString::operator=((re::DynamicString *)&v49, (re::DynamicString *)&v42);
    if ((void)v42)
    {
      if (BYTE8(v42)) {
        (*(void (**)(void))(*(void *)v42 + 40))();
      }
      long long v42 = 0u;
      long long v43 = 0u;
    }

    uint64_t v8 = BYTE8(v49) & 1;
    uint64_t v9 = *((void *)&v49 + 1) >> 1;
    uint64_t v10 = BYTE8(v49) >> 1;
  }
  if (v8) {
    uint64_t v16 = v9;
  }
  else {
    uint64_t v16 = v10;
  }
  if (!v16)
  {
    re::Bundle::reTestsDataFramework((uint64_t)&buf);
    *(void *)&long long v42 = 0;
    if ((_BYTE)buf) {
      uint64_t v17 = (id *)&buf + 1;
    }
    else {
      uint64_t v17 = (id *)&v42;
    }
    re::ObjCObject::operator=(&location, v17);

    if ((_BYTE)buf) {
    id v46 = location;
    }
    if (v46)
    {
      char v18 = (_anonymous_namespace_ *)re::Bundle::findFile((re::Bundle *)&v46, "RealityKit-Schema-Fall2020.reschema", (re::DynamicString *)&buf);
      uint64_t v19 = *((void *)&buf + 1) >> 1;
      if ((BYTE8(buf) & 1) == 0) {
        uint64_t v19 = BYTE8(buf) >> 1;
      }
      if (v19)
      {
        uint64_t v20 = buf;
        uint64_t v21 = v53;
        *(void *)&long long buf = 0;
        uint64_t v53 = 0;
        *(void *)&long long v43 = v21;
        *((void *)&v43 + 1) = v54;
        *(void *)&long long v42 = v20;
        *((void *)&v42 + 1) = *((void *)&buf + 1);
      }
      else
      {
        long long v42 = 0u;
        long long v43 = 0u;
        re::DynamicString::setCapacity(&v42, 0);
        if (void)buf && (BYTE8(buf)) {
          (*(void (**)(void))(*(void *)buf + 40))();
        }
      }
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
      re::DynamicString::setCapacity(&v42, 0);
    }
    re::DynamicString::operator=((re::DynamicString *)&v49, (re::DynamicString *)&v42);
    if ((void)v42)
    {
      if (BYTE8(v42)) {
        (*(void (**)(void))(*(void *)v42 + 40))();
      }
      long long v42 = 0u;
      long long v43 = 0u;
    }
  }
  if (!location)
  {
    int v31 = *re::foundationSerializationLogObjects(v7);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_64;
    }
    LOWORD(buf) = 0;
    uint64_t v32 = "Failed to read type registry from bundle. Bundle not found.";
LABEL_92:
    _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buf, 2u);
    goto LABEL_64;
  }
  uint64_t v22 = *((void *)&v49 + 1) >> 1;
  if ((BYTE8(v49) & 1) == 0) {
    uint64_t v22 = BYTE8(v49) >> 1;
  }
  if (v22)
  {
    if (BYTE8(v49)) {
      unint64_t v23 = v50;
    }
    else {
      unint64_t v23 = (unint64_t)&v49 | 9;
    }
    re::Data::makeDataWithContentsOfFile(v23, 0, (uint64_t)v44);
    if (!v44[0])
    {
      uint64_t v33 = *re::foundationSerializationLogObjects(v24);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = re::WrappedError::localizedDescription(&v45);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v41;
        _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Failed to read type registry from bundle. %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v30 = 0;
      goto LABEL_83;
    }
    LOBYTE(v53) = 0;
    *(void *)&long long buf = &unk_26E6DEB60;
    *((void *)&buf + 1) = "PersistedSchemaAllocator";
    memset(v55, 0, sizeof(v55));
    int v56 = 0;
    uint64_t v57 = 0x7FFFFFFFLL;
    uint64_t v25 = [v45 bytes];
    uint64_t v26 = [v45 length];
    *(void *)&long long v58 = &unk_26E7150B0;
    *((void *)&v58 + 1) = v25;
    uint64_t v59 = v26;
    uint64_t v60 = 0;
    if ((_BYTE)v42)
    {
      uint64_t v28 = re::internal::typeRegistryAllocator(v27);
      if (TypeRegistry)
      {
        uint64_t v30 = (uint64_t **)TypeRegistry;
        goto LABEL_81;
      }
      v39 = *re::foundationSerializationLogObjects(0);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
LABEL_80:
        uint64_t v30 = 0;
LABEL_81:
        if (!(_BYTE)v42 && *((void *)&v42 + 1) && (v43 & 1) != 0) {
          (*(void (**)(void))(**((void **)&v42 + 1) + 40))();
        }
        re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)&buf);
LABEL_83:

        goto LABEL_84;
      }
      LOWORD(v58) = 0;
      size_t v36 = "Failed to read type registry from bundle.";
      v37 = v39;
      uint32_t v38 = 2;
    }
    else
    {
      uint64_t v34 = *re::foundationSerializationLogObjects(v27);
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      if (v43) {
        id v35 = (char *)*((void *)&v43 + 1);
      }
      else {
        id v35 = (char *)&v43 + 1;
      }
      LODWORD(v58) = 136315138;
      *(void *)((char *)&v58 + 4) = v35;
      size_t v36 = "Failed to read type registry from bundle. %s";
      v37 = v34;
      uint32_t v38 = 12;
    }
    _os_log_error_impl(&dword_233120000, v37, OS_LOG_TYPE_ERROR, v36, (uint8_t *)&v58, v38);
    goto LABEL_80;
  }
  int v31 = *re::foundationSerializationLogObjects(v7);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    uint64_t v32 = "Failed to read type registry from bundle. Schema file not found.";
    goto LABEL_92;
  }
LABEL_64:
  uint64_t v30 = 0;
LABEL_84:
  if (void)v49 && (BYTE8(v49)) {
    (*(void (**)(void))(*(void *)v49 + 40))();
  }

  return v30;
}

BOOL re::scanForCopy(uint64_t a1, uint64_t *a2, void *a3)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v5 = a1;
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *a3;
      if (!*a3) {
        break;
      }
      switch(*(_DWORD *)(v8 + 16))
      {
        case 0:
        case 9:
          *a3 = 0;
          goto LABEL_14;
        case 2:
          uint64_t v10 = *a2;
          unsigned int v11 = -1;
          do
          {
            v10 += *(int *)(*(void *)(v8 + 48) + 20);
            *a2 = v10;
            ++v11;
          }
          while (v11 < *(_DWORD *)(*(void *)(v5 + 16) + 4 * v6));
          goto LABEL_12;
        case 3:
        case 4:
          a1 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)v8 + 96))(*a3, *a2, *(unsigned int *)(*(void *)(v5 + 16) + 4 * v6));
          *a2 = a1;
LABEL_12:
          uint64_t v12 = *(void *)(v8 + 48);
          goto LABEL_13;
        case 8:
          unsigned int v13 = *(_DWORD *)(*(void *)(v5 + 16) + 4 * v6);
          break;
        default:
          *a3 = 0;
          uint64_t v9 = *re::foundationSerializationLogObjects((re *)a1);
          a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (a1)
          {
            v20[0] = 0;
            _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Connection source type isn't supported.", (uint8_t *)v20, 2u);
          }
          goto LABEL_14;
      }
      while (1)
      {
        unsigned int v14 = *(_DWORD *)(v8 + 56);
        if (v13 < v14) {
          break;
        }
        if (v14)
        {
          uint64_t v15 = *(void **)(v8 + 64);
          uint64_t v16 = *(unsigned int *)(v8 + 56);
          while (1)
          {
            uint64_t v17 = (_DWORD *)*v15;
            if (*(_DWORD *)*v15 == 1 && v17[10] == 3) {
              break;
            }
            ++v15;
            if (!--v16) {
              goto LABEL_14;
            }
          }
          uint64_t v8 = *((void *)v17 + 2);
          v13 -= v14;
          if (v8) {
            continue;
          }
        }
        goto LABEL_14;
      }
      uint64_t v18 = *(void *)(*(void *)(v8 + 64) + 8 * v13);
      *a2 += *(int *)(v18 + 36);
      uint64_t v12 = *(void *)(v18 + 16);
LABEL_13:
      *a3 = v12;
LABEL_14:
      uint64_t v6 = ++v7;
    }
    while (*(void *)(v5 + 8) > (unint64_t)v7);
  }
  return *a3 != 0;
}

uint64_t anonymous namespace'::DeepCopier::write(_anonymous_namespace_::DeepCopier *this, const re::IntrospectionBase *a2, char *a3, const re::IntrospectionBase **a4)
{
  uint64_t v6 = a2;
  unsigned int v7 = (uint64_t *)this;
  v94[4] = *MEMORY[0x263EF8340];
  while (1)
  {
    int v8 = *((_DWORD *)v6 + 4);
    if (v8 != 13) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 56))(v6, a3);
    (*(void (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, uint64_t))(*(void *)v6 + 64))(v6, a4, v9);
    if (!v9) {
      return 1;
    }
    uint64_t v10 = (const re::IntrospectionBase *)*((void *)v6 + 6);
    a3 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 80))(v6, a3);
    this = (_anonymous_namespace_::DeepCopier *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)v6 + 72))(v6, a4);
    a4 = (const re::IntrospectionBase **)this;
    uint64_t v6 = v10;
  }
  switch(v8)
  {
    case 0:
    case 9:
      memcpy(a4, a3, *((int *)v6 + 5));
      return 1;
    case 1:
      unsigned int v14 = *(const re::IntrospectionBase **)a3;
      re::PolymorphicData::makeWithPointer(*((void *)v6 + 6), v14, &__src);
      if (v92)
      {
        if (*a4)
        {
          re::PolymorphicData::makeWithPointer(*((void *)v6 + 6), *a4, buf);
          memmove(*(void **)buf, (const void *)__src, *(int *)(*((void *)&__src + 1) + 20));
        }
        return 1;
      }
      if (!v14)
      {
        if (*a4)
        {
          re::introspectionReleasePointer(*a4, *v7, v7[2], *((void *)v6 + 6));
          *a4 = 0;
        }
        return 1;
      }
      uint64_t v57 = *((void *)v6 + 6);
      uint64_t v58 = re::introspect<char>();
      uint64_t v59 = *a4;
      if (v57 == v58)
      {
        if (v59)
        {
          re::introspectionReleasePointer(*a4, *v7, v7[2], *((void *)v6 + 6));
          *a4 = 0;
        }
        v71 = (re *)strlen((const char *)v14);
        size_t v72 = (size_t)v71 + 1;
        uint64_t v73 = v71 == (re *)-1;
        BOOL v75 = v73 << 63 >> 63 != v73 || v73 << 63 >> 63 == -1;
        if (v75)
        {
          v76 = *re::foundationSerializationLogObjects(v71);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_233120000, v76, OS_LOG_TYPE_ERROR, "DeepCopier; string length overflowed.",
              buf,
              2u);
          }
        }
        else
        {
          uint64_t v80 = (void *)(*(uint64_t (**)(uint64_t, size_t, void))(*(void *)*v7 + 32))(*v7, v72, 0);
          memcpy(v80, v14, v72);
          *a4 = (const re::IntrospectionBase *)v80;
        }
        return !v75;
      }
      if (!v59) {
        uint64_t v59 = re::introspectionAllocPointer((re *)*v7, (_anonymous_namespace_ *)v7[2], *((re::Allocator **)v6 + 6));
      }
      if (v60)
      {
        *a4 = v59;
        return 1;
      }
      uint64_t v77 = *re::foundationSerializationLogObjects(v60);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_233120000, v77, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write pointer dereferenced target.",
          buf,
          2u);
      }
      re::introspectionReleasePointer(v59, *v7, v7[2], *((void *)v6 + 6));
      return 0;
    case 2:
      uint64_t v15 = (const re::IntrospectionBase *)*((void *)v6 + 6);
      unint64_t v16 = *((int *)v6 + 16);
      uint64_t v17 = (_anonymous_namespace_::DeepCopier *)v7;
      uint64_t v18 = a3;
      uint64_t v19 = (char *)a4;
      goto LABEL_23;
    case 3:
      uint64_t v20 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 88))(v6, a3);
      (*(void (**)(const re::IntrospectionBase *, uint64_t, uint64_t, const re::IntrospectionBase **, uint64_t))(*(void *)v6 + 72))(v6, *v7, v7[2], a4, v20);
      if (v20) {
        goto LABEL_22;
      }
      return 1;
    case 4:
      uint64_t v20 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 80))(v6, a3);
      (*(void (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 64))(v6, a4, *v7, v7[2], v20);
      if (!v20) {
        return 1;
      }
LABEL_22:
      uint64_t v21 = (*(uint64_t (**)(const re::IntrospectionBase *, char *, void))(*(void *)v6 + 104))(v6, a3, 0);
      uint64_t v22 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, void))(*(void *)v6 + 96))(v6, a4, 0);
      uint64_t v15 = (const re::IntrospectionBase *)*((void *)v6 + 6);
      uint64_t v19 = (char *)v22;
      uint64_t v17 = (_anonymous_namespace_::DeepCopier *)v7;
      unint64_t v16 = v20;
      uint64_t v18 = (char *)v21;
LABEL_23:
    case 5:
      __int16 v24 = (re *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(void *)v6 + 80))(v6, a4);
      if (v24)
      {
        uint64_t v25 = *re::foundationSerializationLogObjects(v24);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        LOWORD(__src) = 0;
        uint64_t v26 = "DeepCopier; cannot read into existing data array.";
        p_src = (uint8_t *)&__src;
      }
      else
      {
        *(void *)&long long __src = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 88))(v6, a3);
        *((void *)&__src + 1) = v61;
        while (1)
        {
          uint64_t v62 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 96))(v6, a3);
          if ((void)__src == v62 && WORD4(__src) == (unsigned __int16)v63 && WORD5(__src) == HIWORD(v63)) {
            return 1;
          }
          uint64_t v64 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, long long *))(*(void *)v6 + 104))(v6, &__src);
          v65 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, uint64_t, uint64_t, const re::IntrospectionBase **))(*(void *)v6 + 72))(v6, *v7, v7[2], a4);
          if ((v66 & 1) == 0) {
            break;
          }
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&__src);
        }
        uint64_t v25 = *re::foundationSerializationLogObjects(v66);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v26 = "DeepCopier; failed to write data array item.";
        p_src = buf;
      }
      int v56 = v25;
      uint32_t v67 = 2;
      goto LABEL_96;
    case 6:
      re::DynamicString::operator=((re::DynamicString *)a4, (re::DynamicString *)a3);
      return 1;
    case 7:
      *(void *)long long buf = a4;
      uint64_t v28 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(void *)v6 + 80))(v6, a3);
      (*(void (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, uint64_t))(*(void *)v6 + 72))(v6, a4, v28);
      long long v29 = operator new(0x20uLL);
      *long long v29 = &unk_26E7203F8;
      v29[1] = v6;
      v29[2] = v7;
      v29[3] = buf;
      int v93 = v29;
      uint64_t v30 = (*(uint64_t (**)(const re::IntrospectionBase *, char *, long long *))(*(void *)v6 + 104))(v6, a3, &__src);
      int v31 = (re *)std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](&__src);
      if ((v30 & 1) == 0)
      {
        uint64_t v32 = *re::foundationSerializationLogObjects(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__src) = 0;
          _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "DeepCopier; failed to iterate over hash table keys.",
            (uint8_t *)&__src,
            2u);
        }
      }
      return v30;
    case 8:
      if (!*((_DWORD *)v6 + 14)) {
        return 1;
      }
      uint64_t v33 = 0;
      break;
    case 10:
      re::StringID::operator=((unint64_t *)a4, (uint64_t *)a3);
      return 1;
    case 11:
      uint64_t v53 = (re *)(*((uint64_t (**)(uint64_t, uint64_t, const re::IntrospectionBase *, char *, const re::IntrospectionBase **))v6
                   + 11))(*v7, v7[2], v6, a3, a4);
      if (v53) {
        return 1;
      }
      uint64_t v54 = *re::foundationSerializationLogObjects(v53);
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      uint64_t v55 = *((void *)v6 + 6);
      LODWORD(__src) = 136315138;
      *(void *)((char *)&__src + 4) = v55;
      uint64_t v26 = "DeepCopier; failed to write type '%s' using serialization callback.";
      p_src = (uint8_t *)&__src;
      int v56 = v54;
      goto LABEL_95;
    default:
      unsigned int v11 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = v11;
        re::getPrettyTypeName(v6, (const re::IntrospectionBase *)&__src);
        unsigned int v13 = (BYTE8(__src) & 1) != 0 ? v92 : (long long *)((char *)&__src + 9);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "DeepCopier; unhandled type '%s'.", buf, 0xCu);

        if ((void)__src)
        {
          if (BYTE8(__src)) {
            (*(void (**)(void))(*(void *)__src + 40))();
          }
        }
      }
      return 0;
  }
  while (1)
  {
    uint64_t v34 = *(void *)(*((void *)v6 + 8) + 8 * v33);
    if (*(_DWORD *)v34 == 1) {
      break;
    }
LABEL_50:
    if (++v33 >= (unint64_t)*((unsigned int *)v6 + 14)) {
      return 1;
    }
  }
  switch(*(_DWORD *)(v34 + 40))
  {
    case 0:
    case 3:
      if (this) {
        goto LABEL_50;
      }
      uint64_t v68 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      uint64_t v70 = *(void *)(v34 + 8);
      LODWORD(__src) = 136315138;
      *(void *)((char *)&__src + 4) = v70;
      uint64_t v26 = "DeepCopier; failed to write target for member '%s'.";
      goto LABEL_94;
    case 1:
      uint64_t v35 = *(void *)(v34 + 48);
      if (!v35)
      {
        uint64_t v68 = *re::foundationSerializationLogObjects(this);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          uint64_t v78 = *(void *)(v34 + 8);
          LODWORD(__src) = 136315138;
          *(void *)((char *)&__src + 4) = v78;
          uint64_t v26 = "DeepCopier; failed to get array length for member '%s'.";
          goto LABEL_94;
        }
        return 0;
      }
      uint64_t v36 = *(int *)(v34 + 64);
      uint64_t __dst = 0;
      size_t v37 = *(int *)(v35 + 20);
      memcpy(&__dst, &a3[v36], v37);
      uint64_t v38 = __dst;
      *(void *)&long long __src = __dst;
      memcpy((char *)a4 + v36, &__src, v37);
      re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&__src, *(const re::IntrospectionBase **)(*(void *)(v34 + 16) + 48), v38);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)buf, 0);
      uint64_t v85 = 0x800000001;
      int v86 = 8;
      __int16 v87 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = 0xFFFFFFFFLL;
      *(void *)long long buf = &unk_26E6CDA08;
      v90[0] = &__src;
      v90[1] = 0;
      char v40 = (char)v39;
      if ((v39 & 1) == 0)
      {
        uint64_t v41 = *re::foundationSerializationLogObjects(v39);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          uint64_t v52 = *(void *)(v34 + 8);
          *(_DWORD *)uint64_t v82 = 136315138;
          uint64_t v83 = v52;
          _os_log_error_impl(&dword_233120000, v41, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write array data for member '%s'.",
            v82,
            0xCu);
        }
      }
      *(void *)long long buf = &unk_26E6CDA08;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v90);
      *(void *)long long buf = &unk_26E6DECE0;
      objc_destructInstance(&buf[8]);
      *(void *)&long long __src = &unk_26E6C2018;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v94);
      *(void *)&long long __src = &unk_26E6DECE0;
      this = (_anonymous_namespace_::DeepCopier *)objc_destructInstance((char *)&__src + 8);
      if ((v40 & 1) == 0) {
        return 0;
      }
      goto LABEL_50;
    case 2:
      uint64_t v42 = *(void *)(*(void *)(v34 + 16) + 48);
      long long v43 = *(void **)(v42 + 64);
      uint64_t v44 = (_DWORD *)*v43;
      if (*(_DWORD *)*v43 != 2)
      {
        id v45 = (_DWORD **)(v43 + 1);
        uint64_t v46 = *(unsigned int *)(v42 + 56) - 1;
        do
        {
          id v47 = *v45++;
          uint64_t v44 = v47;
          --v46;
        }
        while (*v47 != 2);
      }
      uint64_t v48 = *(int *)(v34 + 36);
      long long v49 = *(char **)&a3[v48];
      uint64_t v50 = *(void *)(v34 + 48);
      *(void *)&long long __src = &a3[*(int *)(v34 + 64)];
      *((void *)&__src + 1) = v50;
      uint64_t v92 = (_OWORD *)*((void *)v44 + 1);
      if (v51)
      {
        this = (_anonymous_namespace_::DeepCopier *)memmove((char *)a4 + *(int *)(v34 + 64), (const void *)__src, *(int *)(*((void *)&__src + 1) + 20));
        goto LABEL_50;
      }
      uint64_t v68 = *re::foundationSerializationLogObjects((re *)v51);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        uint64_t v79 = *(void *)(v34 + 8);
        LODWORD(__src) = 136315138;
        *(void *)((char *)&__src + 4) = v79;
        uint64_t v26 = "DeepCopier; failed to find polymorphic member '%s'.";
LABEL_94:
        p_src = (uint8_t *)&__src;
        int v56 = v68;
LABEL_95:
        uint32_t v67 = 12;
LABEL_96:
        _os_log_error_impl(&dword_233120000, v56, OS_LOG_TYPE_ERROR, v26, p_src, v67);
      }
      return 0;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "writeStructure", 353);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233EC7F20);
  }
}

BOOL anonymous namespace'::DeepCopier::writePolymorphicPointer(_anonymous_namespace_::DeepCopier *this, re::PolymorphicData *a2, char *a3, re::DynamicString **a4)
{
  uint64_t v5 = *((void *)a2 + 1);
  if (!v5 || !*((void *)a2 + 2))
  {
    unint64_t v16 = *re::foundationSerializationLogObjects(this);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(__dst[0]) = 0;
    uint64_t v18 = "DeepCopier; invalid polymorphic data.";
LABEL_15:
    uint64_t v19 = (uint8_t *)__dst;
LABEL_16:
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v18, v19, 2u);
    return 0;
  }
  uint64_t v9 = *a4;
  if (*a4)
  {
    re::introspectionReleasePointer(v9, *(void *)this, *((void *)this + 2), v5);
    *a4 = 0;
  }
  if (!a3) {
    return 1;
  }
  uint64_t v10 = *(const void **)a2;
  if (!*(void *)a2)
  {
    unint64_t v16 = *re::foundationSerializationLogObjects(v9);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(__dst[0]) = 0;
    uint64_t v18 = "DeepCopier; invalid polymorphic data type.";
    goto LABEL_15;
  }
  uint64_t v11 = *((void *)a2 + 1);
  __dst[0] = 0;
  uint64_t v12 = (re *)memcpy(__dst, v10, *(int *)(v11 + 20));
  unsigned int v13 = (unsigned int *)*((void *)a2 + 2);
  uint64_t v14 = *v13;
  if (!v14)
  {
LABEL_11:
    unint64_t v16 = *re::foundationSerializationLogObjects(v12);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)__int16 v24 = 0;
    uint64_t v18 = "DeepCopier; failed to find polymorphic type.";
    uint64_t v19 = v24;
    goto LABEL_16;
  }
  uint64_t v15 = (int *)(*((void *)v13 + 1) + 32);
  while (*((void *)v15 - 1) != __dst[0])
  {
    v15 += 10;
    if (!--v14) {
      goto LABEL_11;
    }
  }
  uint64_t v20 = &a3[*v15];
  uint64_t v21 = re::introspectionAllocPointer(*(re **)this, *((_anonymous_namespace_ **)this + 2), *((re::Allocator **)v15 - 3));
  if (v22)
  {
    *a4 = (re::IntrospectionBase *)((char *)v21 - *v15);
    return 1;
  }
  unint64_t v23 = *re::foundationSerializationLogObjects(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int16 v24 = 0;
    _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write pointer dereferenced target.",
      v24,
      2u);
  }
  re::introspectionReleasePointer(v21, *(void *)this, *((void *)this + 2), *((void *)v15 - 3));
  return 0;
}

uint64_t re::introspect<char>()
{
  v0 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    if (v2)
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v3);
      v0 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    }
  }
  return v0[72];
}

BOOL anonymous namespace'::DeepCopier::writeLinearArray(_anonymous_namespace_::DeepCopier *this, const re::IntrospectionBase *a2, unint64_t a3, char *a4, char *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v9 = *((_DWORD *)a2 + 4);
  if (v9) {
    BOOL v10 = v9 == 9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    memcpy(a5, a4, *((int *)a2 + 5) * a3);
    return 1;
  }
  if (!a3) {
    return 1;
  }
  if (v14)
  {
    unint64_t v15 = 0;
    while (a3 - 1 != v15)
    {
      ++v15;
      if ((v14 & 1) == 0)
      {
        BOOL v11 = v15 >= a3;
        goto LABEL_16;
      }
    }
    return 1;
  }
  BOOL v11 = 0;
  LODWORD(v15) = 0;
LABEL_16:
  unint64_t v16 = *re::foundationSerializationLogObjects((re *)v14);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = v16;
    re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v19);
    if (v20) {
      uint64_t v18 = *(unsigned char **)&v21[7];
    }
    else {
      uint64_t v18 = v21;
    }
    *(_DWORD *)long long buf = 136315394;
    unint64_t v23 = v18;
    __int16 v24 = 1024;
    int v25 = v15;
    _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write %s[%d].", buf, 0x12u);

    if (v19 && (v20 & 1) != 0) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
  }
  return v11;
}

void std::__function::__func<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_26E7203F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7203F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, void *a2, char **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *(_anonymous_namespace_::DeepCopier **)(a1 + 16);
  uint64_t v6 = (const re::IntrospectionBase **)(*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), *(void *)v5, *((void *)v5 + 2), **(void **)(a1 + 24), *a2);
  uint64_t v8 = v7;
  if ((v7 & 1) == 0)
  {
    int v9 = *re::foundationSerializationLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write hash table value.",
        (uint8_t *)v11,
        2u);
    }
  }
  return v8;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, (unsigned char *)a2, a3);
      break;
    case 1:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((re::snapshot::Encoder *)a1, (const char **)a2, a3);
      break;
    case 2:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((re::snapshot::Encoder *)a1, (char *)a2, a3);
      break;
    case 3:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (void *)a3);
      break;
    case 4:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (void *)a3);
      break;
    case 5:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (void *)a3);
      break;
    case 6:
      unint64_t v4 = *(void *)(a2 + 8);
      BOOL v5 = (v4 & 1) == 0;
      if (v4) {
        uint64_t v6 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v6 = (const char *)(a2 + 9);
      }
      size_t v7 = v4 >> 1;
      size_t v8 = v4 >> 1;
      if (v5) {
        size_t v9 = v8;
      }
      else {
        size_t v9 = v7;
      }
      goto LABEL_36;
    case 7:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (void *)a3);
      break;
    case 8:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((re::snapshot::Encoder *)a1, a2, a3);
      break;
    case 9:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, (char *)a2, a3);
      break;
    case 0xA:
      BOOL v10 = *(const char **)(a2 + 8);
      size_t v9 = strlen(v10);
      a1 = v3;
      uint64_t v6 = v10;
LABEL_36:
      re::snapshot::EncoderRaw::serializeString(a1, v6, v9);
      break;
    case 0xB:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((_anonymous_namespace_ *)a1, a2, a3);
      break;
    case 0xD:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (void *)a3);
      break;
    default:
      return;
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, unsigned char *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
    case 2:
    case 6:
      LOBYTE(__src) = *a2;
      size_t v3 = 1;
      goto LABEL_11;
    case 3:
    case 7:
      LOWORD(__src) = *(_WORD *)a2;
      size_t v3 = 2;
      goto LABEL_11;
    case 4:
    case 8:
      LODWORD(__src) = *(_DWORD *)a2;
      goto LABEL_8;
    case 5:
    case 9:
      uint64_t __src = *(void *)a2;
      goto LABEL_10;
    case 0xA:
      LODWORD(__src) = *(_DWORD *)a2;
LABEL_8:
      size_t v3 = 4;
      goto LABEL_11;
    case 0xB:
      uint64_t __src = *(void *)a2;
LABEL_10:
      size_t v3 = 8;
LABEL_11:
      __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, v3);
      break;
    default:
      __n128 result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, char *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      char v6 = *a2;
      p_src = (__int16 *)&v6;
      size_t v4 = 1;
      goto LABEL_7;
    case 2:
      __int16 v7 = *(_WORD *)a2;
      p_src = &v7;
      size_t v4 = 2;
      goto LABEL_7;
    case 4:
      int v8 = *(_DWORD *)a2;
      p_src = (__int16 *)&v8;
      size_t v4 = 4;
      goto LABEL_7;
    case 8:
      uint64_t __src = *(void *)a2;
      p_src = (__int16 *)&__src;
      size_t v4 = 8;
LABEL_7:
      __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, p_src, v4);
      break;
    default:
      __n128 result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(re::snapshot::Encoder *this, const char **a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F060, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F060))
  {
    _MergedGlobals_487 = re::introspect<char>();
    __cxa_guard_release(&qword_26AF9F060);
  }
  char v6 = *a2;
  uint64_t v7 = *(void *)(a3 + 48);
  if (v7 == _MergedGlobals_487)
  {
    if (v6) {
      size_t v15 = strlen(v6);
    }
    else {
      size_t v15 = 0;
    }
    return re::snapshot::EncoderRaw::serializeString((unsigned int *)this, v6, v15);
  }
  else
  {
    if (v6)
    {
      re::PolymorphicData::makeWithPointer(v7, (const re::IntrospectionBase *)v6, &__src);
      int v8 = v22;
      if (!v22 || !__src || !v21) {
        goto LABEL_26;
      }
      uint64_t __dst = 0;
      size_t v9 = (re *)memcpy(&__dst, __src, *(int *)(v21 + 20));
      uint64_t v10 = *v8;
      if (!v10)
      {
LABEL_11:
        unsigned int v13 = *re::foundationSerializationLogObjects(v9);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Snapshot writer: failed to find polymorphic type.", v19, 2u);
        }
        return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &re::snapshot::EncoderRaw::beginPointer(void const*,unsigned long long)::tags, 1uLL);
      }
      uint64_t v11 = __dst;
      uint64_t v12 = (void *)(*((void *)v8 + 1) + 24);
      while (*v12 != __dst)
      {
        v12 += 5;
        if (!--v10) {
          goto LABEL_11;
        }
      }
      uint64_t v7 = *(v12 - 2);
      if (__dst)
      {
        uint64_t v16 = *((unsigned int *)this + 2);
        if (v16 + 9 > (unint64_t)*((unsigned int *)this + 3))
        {
          uint64_t v18 = __dst;
          if (!re::snapshot::Encoder::grow(this, v16 + 9)) {
            goto LABEL_27;
          }
          uint64_t v16 = *((unsigned int *)this + 2);
          uint64_t v11 = v18;
        }
        *(unsigned char *)(*(void *)this + v16) = 2;
        unsigned int v17 = *((_DWORD *)this + 2) + 1;
        *((_DWORD *)this + 2) = v17;
        *(void *)(*(void *)this + v17) = v11;
        *((_DWORD *)this + 2) += 8;
      }
      else
      {
LABEL_26:
        re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &unk_2344156E1, 1uLL);
      }
LABEL_27:
      return (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(this, v6, v7);
    }
    return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &re::snapshot::EncoderRaw::beginPointer(void const*,unsigned long long)::tags, 1uLL);
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, void *a3)
{
  char __src = (*(uint64_t (**)(void *))(*a3 + 56))(a3);
  __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 1uLL);
  if (__src)
  {
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
    return (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v7, a3[6]);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t __src;

  char v6 = a3[6];
  uint64_t v7 = (*(uint64_t (**)(void *))(*a3 + 88))(a3);
  int v8 = v7;
  size_t v9 = *(_DWORD *)(v6 + 16);
  if (v9) {
    uint64_t v10 = v9 == 9;
  }
  else {
    uint64_t v10 = 1;
  }
  if (v10 || *(unsigned char *)(v6 + 28))
  {
    char __src = v7 * *(int *)(v6 + 20);
    __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      uint64_t v12 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 104))(a3, a2, 0);
      return re::snapshot::Encoder::writeRaw<true>(a1, v12, v8 * *(int *)(v6 + 20));
    }
  }
  else
  {
    char __src = v7;
    __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        __n128 result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v14, v6);
      }
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t __src;

  char v6 = a3[6];
  uint64_t v7 = (*(uint64_t (**)(void *))(*a3 + 80))(a3);
  int v8 = v7;
  size_t v9 = *(_DWORD *)(v6 + 16);
  if (v9) {
    uint64_t v10 = v9 == 9;
  }
  else {
    uint64_t v10 = 1;
  }
  if (v10 || *(unsigned char *)(v6 + 28))
  {
    char __src = v7 * *(int *)(v6 + 20);
    __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      uint64_t v12 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 104))(a3, a2, 0);
      return re::snapshot::Encoder::writeRaw<true>(a1, v12, v8 * *(int *)(v6 + 20));
    }
  }
  else
  {
    char __src = v7;
    __n128 result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        __n128 result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v14, v6);
      }
    }
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(re::snapshot::Encoder *this, char *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  int v7 = *(_DWORD *)(v6 + 16);
  if (v7) {
    BOOL v8 = v7 == 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || *(unsigned char *)(v6 + 28))
  {
    uint64_t __src = *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64);
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &__src, 8uLL);
    return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, a2, *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64));
  }
  else
  {
    uint64_t __src = *(int *)(a3 + 64);
    __n128 result = re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &__src, 8uLL);
    if (*(int *)(a3 + 64) >= 1)
    {
      int v10 = 0;
      do
      {
        __n128 result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(this, a2, v6);
        a2 += *(int *)(v6 + 20);
        ++v10;
      }
      while (v10 < *(_DWORD *)(a3 + 64));
    }
  }
  return result;
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v11 = (*(int (**)(void *))(*a3 + 80))(a3);
  re::snapshot::Encoder::writeRaw<true>(a1, &v11, 8uLL);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
  uint64_t v12 = v7;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 96))(a3, a2);
    if (v11 == result && (unsigned __int16)v12 == (unsigned __int16)v9 && WORD1(v12) == HIWORD(v9)) {
      break;
    }
    uint64_t v10 = (*(uint64_t (**)(void *, uint64_t *))(*a3 + 104))(a3, &v11);
    re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v10, v6);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
  }
  return result;
}

void *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, void *a3)
{
  __src[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void *))(*a3 + 80))(a3);
  uint64_t v7 = a3[6];
  uint64_t v8 = a3[8];
  __src[0] = v6;
  re::snapshot::Encoder::writeRaw<true>(a1, __src, 8uLL);
  unsigned int v9 = operator new(0x20uLL);
  *unsigned int v9 = &unk_26E720440;
  v9[1] = a1;
  v9[2] = v7;
  v9[3] = v8;
  __src[3] = v9;
  (*(void (**)(void *, uint64_t, void *))(*a3 + 104))(a3, a2, __src);
  return std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](__src);
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderRaw>::write(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t **))(a3 + 72))(*((void *)a1 + 9), a3, a2, &v10) & 1) == 0)
  {
    if (v11)
    {
      unint64_t v11 = 1;
      uint64_t v6 = v12;
    }
    else
    {
      LOBYTE(v11) = v11 & 1;
      uint64_t v6 = (char *)&v11 + 1;
    }
    unsigned char *v6 = 0;
  }
  if (v11) {
    uint64_t v7 = v12;
  }
  else {
    uint64_t v7 = (char *)&v11 + 1;
  }
  if (v11) {
    size_t v8 = v11 >> 1;
  }
  else {
    size_t v8 = v11 >> 1;
  }
  re::snapshot::EncoderRaw::serializeString((unsigned int *)a1, v7, v8);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (v11) {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::write(re::snapshot::Encoder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 56))
  {
    BOOL v5 = this;
    for (unint64_t i = 0; i < *(unsigned int *)(a3 + 56); ++i)
    {
      uint64_t v7 = *(void *)(*(void *)(a3 + 64) + 8 * i);
      if (*(_DWORD *)v7 == 1)
      {
        switch(*(_DWORD *)(v7 + 40))
        {
          case 0:
          case 3:
            this = (re::snapshot::Encoder *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, a2 + *(int *)(v7 + 36), *(void *)(v7 + 16));
            break;
          case 1:
            size_t v8 = *(uint8_t **)(a2 + *(int *)(v7 + 36));
            uint64_t v9 = *(void *)(v7 + 16);
            if (v8)
            {
              uint64_t v10 = *(void *)(v7 + 48);
              if (!v10)
              {
                re::snapshot::Encoder::error(v5, "Snapshot writer failed to get array length for member '%s' in %s.", *(const char **)(v7 + 8), *(const char **)(a3 + 48));
                *(void *)long long buf = 0;
                re::snapshot::Encoder::writeRaw<true>((unsigned int *)v5, buf, 8uLL);
                return;
              }
              unint64_t v11 = (const void *)(a2 + *(int *)(v7 + 64));
              uint64_t __dst = 0;
              memcpy(&__dst, v11, *(int *)(v10 + 20));
              uint64_t v12 = *(void *)(v9 + 48);
              uint64_t v13 = __dst;
              if (*(_DWORD *)(v12 + 16))
              {
                *(void *)long long buf = __dst;
                this = (re::snapshot::Encoder *)re::snapshot::Encoder::writeRaw<true>((unsigned int *)v5, buf, 8uLL);
                if (v13)
                {
                  uint64_t v14 = *(void *)(v9 + 48);
                  do
                  {
                    this = (re::snapshot::Encoder *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, v8, v14);
                    uint64_t v14 = *(void *)(v9 + 48);
                    v8 += *(int *)(v14 + 20);
                    --v13;
                  }
                  while (v13);
                }
                break;
              }
              *(void *)long long buf = __dst * *(int *)(v12 + 20);
              re::snapshot::Encoder::writeRaw<true>((unsigned int *)v5, buf, 8uLL);
              size_t v19 = v13 * *(int *)(*(void *)(v9 + 48) + 20);
              uint64_t v18 = (unsigned int *)v5;
              unsigned int v17 = v8;
            }
            else
            {
              *(void *)long long buf = 0;
              unsigned int v17 = buf;
              uint64_t v18 = (unsigned int *)v5;
              size_t v19 = 8;
            }
            this = (re::snapshot::Encoder *)re::snapshot::Encoder::writeRaw<true>(v18, v17, v19);
            break;
          case 2:
            size_t v15 = *re::foundationSerializationLogObjects(this);
            this = (re::snapshot::Encoder *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
            if (this)
            {
              uint64_t v16 = *(void *)(a3 + 48);
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v16;
              _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Snapshot writer: polymorphic inline types currently unhandled (type = %s)", buf, 0xCu);
            }
            break;
          default:
            break;
        }
      }
    }
  }
}

uint64_t re::snapshot::Encoder::error(re::snapshot::Encoder *this, const char *__format, ...)
{
  va_start(va, __format);
  size_t v3 = (re::snapshot::Encoder *)((char *)this + 32);
  unint64_t v4 = *((void *)this + 5);
  if (v4) {
    unint64_t v5 = v4 >> 1;
  }
  else {
    unint64_t v5 = v4 >> 1;
  }
  if (v5) {
    re::DynamicString::append((re::snapshot::Encoder *)((char *)this + 32), "\n", 1uLL);
  }
  return re::DynamicString::vappendf(v3, __format, va);
}

unsigned int *re::snapshot::EncoderRaw::serializeString(unsigned int *this, const char *__src, size_t __len)
{
  unint64_t v5 = this;
  uint64_t v6 = this[2];
  unint64_t v7 = __len + v6 + 8;
  if (v7 > this[3])
  {
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v7);
    if (!this) {
      return this;
    }
    uint64_t v6 = v5[2];
  }
  *(void *)(*(void *)v5 + v6) = __len;
  unsigned int v8 = v5[2] + 8;
  v5[2] = v8;
  if (__len)
  {
    this = (unsigned int *)memmove((void *)(*(void *)v5 + v8), __src, __len);
    unsigned int v8 = v5[2];
  }
  v5[2] = v8 + __len;
  return this;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *result, uint64_t a2, uint64_t a3)
{
  size_t v3 = result;
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, (int *)a2, a3);
      break;
    case 1:
      uint64_t result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, (const char **)a2, a3);
      break;
    case 2:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((re::snapshot::EncoderOPACK *)result, (char *)a2, a3);
      break;
    case 3:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((uint64_t)result, a2, (void *)a3);
      break;
    case 4:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((uint64_t)result, a2, (void *)a3);
      break;
    case 5:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, a2, (void *)a3);
      break;
    case 6:
      unint64_t v4 = *(void *)(a2 + 8);
      BOOL v5 = (v4 & 1) == 0;
      if (v4) {
        uint64_t v6 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v6 = (const char *)(a2 + 9);
      }
      size_t v7 = v4 >> 1;
      size_t v8 = v4 >> 1;
      if (v5) {
        size_t v9 = v8;
      }
      else {
        size_t v9 = v7;
      }
      goto LABEL_36;
    case 7:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, a2, (void *)a3);
      break;
    case 8:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, a2, a3);
      break;
    case 9:
      uint64_t result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, (uint64_t *)a2, a3);
      break;
    case 0xA:
      uint64_t v10 = *(const char **)(a2 + 8);
      size_t v9 = strlen(v10);
      uint64_t result = v3;
      uint64_t v6 = v10;
LABEL_36:
      uint64_t result = re::snapshot::EncoderOPACK::serializeString(result, v6, v9);
      break;
    case 0xB:
      uint64_t result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((_anonymous_namespace_ *)result, a2, a3);
      break;
    case 0xD:
      uint64_t result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((re::snapshot::EncoderOPACK *)result, a2, (void *)a3);
      break;
    default:
      return result;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, int *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
      int v5 = *(unsigned __int8 *)a2;
      return re::snapshot::EncoderOPACK::operator<<(a1, v5);
    case 2:
      int v6 = *(char *)a2;
      return re::snapshot::EncoderOPACK::writeInteger(a1, v6);
    case 3:
      int v7 = *(__int16 *)a2;
      goto LABEL_13;
    case 4:
      int v8 = *a2;
      goto LABEL_17;
    case 5:
    case 9:
      uint64_t v3 = *(void *)a2;
      goto LABEL_21;
    case 6:
      int v7 = *(unsigned __int8 *)a2;
LABEL_13:
      return re::snapshot::EncoderOPACK::writeInteger(a1, v7);
    case 7:
      int v8 = *(unsigned __int16 *)a2;
LABEL_17:
      uint64_t result = re::snapshot::EncoderOPACK::writeInteger(a1, v8);
      break;
    case 8:
      uint64_t v3 = *a2;
LABEL_21:
      uint64_t result = re::snapshot::EncoderOPACK::writeInteger(a1, v3);
      break;
    case 0xA:
      float v9 = *(float *)a2;
      uint64_t result = re::snapshot::EncoderOPACK::operator<<(a1, v9);
      break;
    case 0xB:
      double v10 = *(double *)a2;
      uint64_t result = re::snapshot::EncoderOPACK::operator<<(a1, v10);
      break;
    default:
      uint64_t result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, uint64_t *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      int v3 = *(unsigned __int8 *)a2;
      uint64_t result = re::snapshot::EncoderOPACK::writeInteger(a1, v3);
      break;
    case 2:
      int v5 = *(unsigned __int16 *)a2;
      uint64_t result = re::snapshot::EncoderOPACK::writeInteger(a1, v5);
      break;
    case 4:
      uint64_t v6 = *(unsigned int *)a2;
      goto LABEL_11;
    case 8:
      uint64_t v6 = *a2;
LABEL_11:
      uint64_t result = re::snapshot::EncoderOPACK::writeInteger(a1, v6);
      break;
    default:
      uint64_t result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, const char **a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F070, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F070))
  {
    qword_26AF9F068 = re::introspect<char>();
    __cxa_guard_release(&qword_26AF9F070);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(a3 + 48);
  if (v7 == qword_26AF9F068)
  {
    if (v6) {
      size_t v15 = strlen(v6);
    }
    else {
      size_t v15 = 0;
    }
    return (uint64_t)re::snapshot::EncoderOPACK::serializeString(a1, v6, v15);
  }
  else
  {
    if (v6)
    {
      re::PolymorphicData::makeWithPointer(v7, (const re::IntrospectionBase *)v6, &__src);
      uint64_t v8 = 0;
      float v9 = v19;
      if (v19 && __src && v18)
      {
        uint64_t __dst = 0;
        double v10 = (re *)memcpy(&__dst, __src, *(int *)(v18 + 20));
        uint64_t v11 = *v9;
        if (!v11)
        {
LABEL_11:
          uint64_t v13 = *re::foundationSerializationLogObjects(v10);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v16 = 0;
            _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Snapshot writer: failed to find polymorphic type.", v16, 2u);
          }
          return re::snapshot::EncoderOPACK::beginPointer((re::snapshot::EncoderOPACK *)a1, 0, 0);
        }
        uint64_t v8 = __dst;
        uint64_t v12 = (void *)(*((void *)v9 + 1) + 24);
        while (*v12 != __dst)
        {
          v12 += 5;
          if (!--v11) {
            goto LABEL_11;
          }
        }
        uint64_t v7 = *(v12 - 2);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t result = re::snapshot::EncoderOPACK::beginPointer((re::snapshot::EncoderOPACK *)a1, v6, v8);
    if (result)
    {
      return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v6, v7);
    }
  }
  return result;
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(re::snapshot::EncoderOPACK *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a3 + 56))(a3);
  int v7 = v6;
  uint64_t result = re::snapshot::EncoderOPACK::beginOptional(a1, v6);
  if (v7)
  {
    uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
    uint64_t v10 = a3[6];
    return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v9, v10);
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(re::snapshot::EncoderOPACK *this, char *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  int v7 = *(_DWORD *)(v6 + 16);
  if (v7) {
    BOOL v8 = v7 == 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8
    || (*(unsigned char *)(v6 + 28) ? (BOOL v12 = *(unsigned char *)(v6 + 29) == 0) : (BOOL v12 = 1), !v12 && (*((unsigned char *)this + 64) & 4) != 0))
  {
    unint64_t v9 = *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64);
    re::snapshot::EncoderOPACK::beginData((unsigned int *)this, v9, v9);
    size_t v10 = *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64);
    return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, a2, v10);
  }
  else
  {
    re::snapshot::EncoderOPACK::beginArray((unsigned int *)this, *(int *)(a3 + 64));
    int v13 = *(_DWORD *)(a3 + 64);
    if (v13 >= 1)
    {
      for (int i = 0; i < v13; ++i)
      {
        re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(this, a2, v6);
        a2 += *(int *)(v6 + 20);
        int v13 = *(_DWORD *)(a3 + 64);
      }
    }
    return re::snapshot::EncoderOPACK::endArray((unsigned int *)this, v13);
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[6];
  unint64_t v7 = (*(uint64_t (**)(void *))(*a3 + 88))(a3);
  unint64_t v8 = v7;
  int v9 = *(_DWORD *)(v6 + 16);
  if (v9) {
    BOOL v10 = v9 == 9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10
    || (*(unsigned char *)(v6 + 28) ? (BOOL v14 = *(unsigned char *)(v6 + 29) == 0) : (BOOL v14 = 1), !v14 && (*(unsigned char *)(a1 + 64) & 4) != 0))
  {
    uint64_t result = re::snapshot::EncoderOPACK::beginData((unsigned int *)a1, v7 * *(int *)(v6 + 20), v7 * *(int *)(v6 + 20));
    if (v8)
    {
      BOOL v12 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 104))(a3, a2, 0);
      size_t v13 = v8 * *(int *)(v6 + 20);
      return re::snapshot::Encoder::writeRaw<true>((unsigned int *)a1, v12, v13);
    }
  }
  else
  {
    re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, v7);
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v16, v6);
      }
    }
    return re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v8);
  }
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  size_t v13;
  BOOL v14;
  uint64_t i;
  uint64_t v16;
  uint64_t vars8;

  uint64_t v6 = a3[6];
  unint64_t v7 = (*(uint64_t (**)(void *))(*a3 + 80))(a3);
  unint64_t v8 = v7;
  int v9 = *(_DWORD *)(v6 + 16);
  if (v9) {
    BOOL v10 = v9 == 9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10
    || (*(unsigned char *)(v6 + 28) ? (BOOL v14 = *(unsigned char *)(v6 + 29) == 0) : (BOOL v14 = 1), !v14 && (*(unsigned char *)(a1 + 64) & 4) != 0))
  {
    uint64_t result = re::snapshot::EncoderOPACK::beginData((unsigned int *)a1, v7 * *(int *)(v6 + 20), v7 * *(int *)(v6 + 20));
    if (v8)
    {
      BOOL v12 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 104))(a3, a2, 0);
      size_t v13 = v8 * *(int *)(v6 + 20);
      return re::snapshot::Encoder::writeRaw<true>((unsigned int *)a1, v12, v13);
    }
  }
  else
  {
    re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, v7);
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v16, v6);
      }
    }
    return re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v8);
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[6];
  unint64_t v7 = (*(int (**)(void *))(*a3 + 80))(a3);
  re::snapshot::EncoderOPACK::beginArray(a1, v7);
  uint64_t v13 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
  uint64_t v14 = v8;
  while (1)
  {
    uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 96))(a3, a2);
    if (v13 == v9 && (unsigned __int16)v14 == (unsigned __int16)v10 && WORD1(v14) == HIWORD(v10)) {
      break;
    }
    uint64_t v11 = (*(uint64_t (**)(void *, uint64_t *))(*a3 + 104))(a3, &v13);
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v11, v6);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
  }
  return re::snapshot::EncoderOPACK::endArray(a1, v7);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void v11[5];

  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void *))(*a3 + 80))(a3);
  unint64_t v7 = a3[6];
  uint64_t v8 = a3[8];
  re::snapshot::EncoderOPACK::beginDictionary(a1, v6);
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_26E720488;
  v9[1] = a1;
  v9[2] = v7;
  v9[3] = v8;
  v11[3] = v9;
  (*(void (**)(void *, uint64_t, void *))(*a3 + 104))(a3, a2, v11);
  std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](v11);
  return re::snapshot::EncoderOPACK::endArray(a1, v6);
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = 0;
  BOOL v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t **))(a3 + 72))(*((void *)a1 + 9), a3, a2, &v10) & 1) == 0)
  {
    if (v11)
    {
      unint64_t v11 = 1;
      uint64_t v6 = v12;
    }
    else
    {
      LOBYTE(v11) = v11 & 1;
      uint64_t v6 = (char *)&v11 + 1;
    }
    unsigned char *v6 = 0;
  }
  if (v11) {
    unint64_t v7 = v12;
  }
  else {
    unint64_t v7 = (char *)&v11 + 1;
  }
  if (v11) {
    size_t v8 = v11 >> 1;
  }
  else {
    size_t v8 = v11 >> 1;
  }
  re::snapshot::EncoderOPACK::serializeString((unsigned int *)a1, v7, v8);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (v11) {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::snapshot::EncoderOPACK::beginObject(a1);
  if (!*(_DWORD *)(a3 + 56)) {
    return re::snapshot::EncoderOPACK::endObject(a1);
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)(a3 + 64) + 8 * v6);
    if (*(_DWORD *)v7 == 1) {
      break;
    }
LABEL_6:
    if (++v6 >= (unint64_t)*(unsigned int *)(a3 + 56)) {
      return re::snapshot::EncoderOPACK::endObject(a1);
    }
  }
  size_t v8 = re::snapshot::EncoderOPACK::writeInteger(a1, *(_DWORD *)(v7 + 32));
  switch(*(_DWORD *)(v7 + 40))
  {
    case 0:
    case 3:
      re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, a2 + *(int *)(v7 + 36), *(void *)(v7 + 16));
      goto LABEL_6;
    case 1:
      uint64_t v9 = *(char **)(a2 + *(int *)(v7 + 36));
      uint64_t v10 = *(void *)(v7 + 16);
      if (!v9)
      {
        if (*(_DWORD *)(*(void *)(v10 + 48) + 16)) {
          re::snapshot::EncoderOPACK::beginArray(a1, 0);
        }
        else {
          re::snapshot::EncoderOPACK::beginData(a1, 0, 0);
        }
        goto LABEL_6;
      }
      uint64_t v11 = *(void *)(v7 + 48);
      if (v11)
      {
        BOOL v12 = (const void *)(a2 + *(int *)(v7 + 64));
        *(void *)uint64_t __dst = 0;
        memcpy(__dst, v12, *(int *)(v11 + 20));
        uint64_t v13 = *(void *)(v10 + 48);
        unint64_t v14 = *(void *)__dst;
        if (*(_DWORD *)(v13 + 16))
        {
          re::snapshot::EncoderOPACK::beginArray(a1, *(unint64_t *)__dst);
          if (v14)
          {
            uint64_t v15 = *(void *)(v10 + 48);
            unint64_t v16 = v14;
            do
            {
              re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v9, v15);
              uint64_t v15 = *(void *)(v10 + 48);
              v9 += *(int *)(v15 + 20);
              --v16;
            }
            while (v16);
          }
          re::snapshot::EncoderOPACK::endArray(a1, v14);
        }
        else
        {
          re::snapshot::EncoderOPACK::beginData(a1, *(void *)__dst * *(int *)(v13 + 20), *(void *)__dst * *(int *)(v13 + 20));
          re::snapshot::Encoder::writeRaw<true>(a1, v9, v14 * *(int *)(*(void *)(v10 + 48) + 20));
        }
        goto LABEL_6;
      }
      re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer failed to get array length for member '%s' in %s.", *(const char **)(v7 + 8), *(const char **)(a3 + 48));
      return re::snapshot::EncoderOPACK::beginArray(a1, 0);
    case 2:
      unsigned int v17 = *re::foundationSerializationLogObjects((re *)v8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a3 + 48);
        *(_DWORD *)uint64_t __dst = 136315138;
        *(void *)&__dst[4] = v18;
        _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Snapshot writer: polymorphic inline types currently unhandled (type = %s)", __dst, 0xCu);
      }
      goto LABEL_6;
    default:
      goto LABEL_6;
  }
}

unsigned int *re::snapshot::EncoderOPACK::operator<<(unsigned int *this, int a2)
{
  int v2 = this;
  if (a2) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  uint64_t v4 = this[2];
  if (v4 < this[3]) {
    goto LABEL_5;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 1);
  if (this)
  {
    LODWORD(v4) = v2[2];
LABEL_5:
    uint64_t v5 = *(void *)v2;
    v2[2] = v4 + 1;
    *(unsigned char *)(v5 + v4) = v3;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::operator<<(unsigned int *this, float a2)
{
  char v3 = this;
  uint64_t v4 = this[2];
  if (v4 + 5 <= (unint64_t)this[3]) {
    goto LABEL_2;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 5);
  if (this)
  {
    uint64_t v4 = v3[2];
LABEL_2:
    uint64_t v5 = *(void *)v3;
    v3[2] = v4 + 1;
    *(unsigned char *)(v5 + v4) = 53;
    *(float *)(*(void *)v3 + v3[2]) = a2;
    v3[2] += 4;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::operator<<(unsigned int *this, double a2)
{
  char v3 = this;
  uint64_t v4 = this[2];
  if (v4 + 9 <= (unint64_t)this[3]) {
    goto LABEL_2;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 9);
  if (this)
  {
    uint64_t v4 = v3[2];
LABEL_2:
    uint64_t v5 = *(void *)v3;
    v3[2] = v4 + 1;
    *(unsigned char *)(v5 + v4) = 54;
    *(double *)(*(void *)v3 + v3[2]) = a2;
    v3[2] += 8;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::beginArray(unsigned int *this, unint64_t a2)
{
  char v3 = this;
  if (a2 < 0xF)
  {
    uint64_t v6 = this[2];
    if (v6 >= this[3])
    {
      this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + 1);
      if (!this) {
        return this;
      }
      LODWORD(v6) = v3[2];
    }
    uint64_t v7 = *(void *)v3;
    v3[2] = v6 + 1;
    *(unsigned char *)(v7 + v6) = a2 - 48;
    return this;
  }
  uint64_t v4 = this[2];
  if (v4 >= this[3])
  {
    if (!re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 1)) {
      goto LABEL_4;
    }
    LODWORD(v4) = v3[2];
  }
  uint64_t v5 = *(void *)v3;
  v3[2] = v4 + 1;
  *(unsigned char *)(v5 + v4) = -33;
LABEL_4:
  return re::snapshot::EncoderOPACK::writeInteger(v3, a2);
}

unsigned int *re::snapshot::EncoderOPACK::endArray(unsigned int *this, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    int v2 = this;
    uint64_t v3 = this[2];
    if (v3 < this[3])
    {
LABEL_3:
      uint64_t v4 = *(void *)v2;
      v2[2] = v3 + 1;
      *(unsigned char *)(v4 + v3) = 3;
      return this;
    }
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 1);
    if (this)
    {
      LODWORD(v3) = v2[2];
      goto LABEL_3;
    }
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::beginDictionary(unsigned int *this, unint64_t a2)
{
  int v2 = this;
  if (a2 < 0xF)
  {
    char v5 = a2 - 32;
    uint64_t v3 = this[2];
    uint64_t v4 = this + 2;
    if (v3 < this[3]) {
      goto LABEL_5;
    }
    char v7 = a2 - 32;
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 1);
    if (this)
    {
LABEL_9:
      LODWORD(v3) = *v4;
      char v5 = v7;
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v3 = this[2];
    uint64_t v4 = this + 2;
    if (v3 < this[3])
    {
      char v5 = -17;
LABEL_5:
      uint64_t v6 = *(void *)v2;
      v2[2] = v3 + 1;
      *(unsigned char *)(v6 + v3) = v5;
      return this;
    }
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 1);
    if (this)
    {
      char v7 = -17;
      goto LABEL_9;
    }
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::serializeString(unsigned int *this, const char *__src, size_t __len)
{
  char v5 = this;
  uint64_t v6 = this[2];
  if (__len > 0x20)
  {
    if (__len > 0xFF)
    {
      unint64_t v12 = this[3];
      size_t v13 = v6 + __len;
      if (__len >> 16)
      {
        unint64_t v15 = v13 + 5;
        if (v13 + 5 > v12)
        {
          this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v15);
          if (!this) {
            return this;
          }
        }
        if (HIDWORD(__len))
        {
          re::internal::assertLog((re::internal *)5, v15, "assertion failure: '%s' (%s:line %i) len %zu exceeds uint32_t capacity", "!overflow", "serializeString", 92, __len);
          this = (unsigned int *)_os_crash();
          __break(1u);
          return this;
        }
        uint64_t v16 = *(void *)v5;
        uint64_t v17 = v5[2];
        v5[2] = v17 + 1;
        *(unsigned char *)(v16 + v17) = 99;
        *(_DWORD *)(*(void *)v5 + v5[2]) = __len;
        uint64_t v11 = v5[2] + 4;
      }
      else
      {
        if (v13 + 3 > v12)
        {
          this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v13 + 3);
          if (!this) {
            return this;
          }
          uint64_t v6 = v5[2];
        }
        uint64_t v14 = *(void *)v5;
        v5[2] = v6 + 1;
        *(unsigned char *)(v14 + v6) = 98;
        *(_WORD *)(*(void *)v5 + v5[2]) = __len;
        uint64_t v11 = v5[2] + 2;
      }
    }
    else
    {
      unint64_t v9 = v6 + __len + 2;
      if (v9 > this[3])
      {
        this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v9);
        if (!this) {
          return this;
        }
        uint64_t v6 = v5[2];
      }
      uint64_t v10 = *(void *)v5;
      v5[2] = v6 + 1;
      *(unsigned char *)(v10 + v6) = 97;
      *(unsigned char *)(*(void *)v5 + v5[2]) = __len;
      uint64_t v11 = v5[2] + 1;
    }
    v5[2] = v11;
    size_t v8 = (void *)(*(void *)v5 + v11);
    goto LABEL_15;
  }
  if (v6 + __len < this[3])
  {
LABEL_3:
    uint64_t v7 = *(void *)v5;
    v5[2] = v6 + 1;
    *(unsigned char *)(v7 + v6) = __len + 64;
    if (!__len)
    {
LABEL_16:
      v5[2] += __len;
      return this;
    }
    size_t v8 = (void *)(*(void *)v5 + v5[2]);
LABEL_15:
    this = (unsigned int *)memmove(v8, __src, __len);
    goto LABEL_16;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + __len + 1);
  if (this)
  {
    uint64_t v6 = v5[2];
    goto LABEL_3;
  }
  return this;
}

BOOL re::snapshot::EncoderOPACK::beginPointer(re::snapshot::EncoderOPACK *this, const void *a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      re::snapshot::EncoderOPACK::beginDictionary((unsigned int *)this, 1uLL);
      re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, a3);
    }
  }
  else
  {
    uint64_t v6 = *((unsigned int *)this + 2);
    if (v6 >= *((_DWORD *)this + 3))
    {
      if (!re::snapshot::Encoder::grow(this, v6 + 1)) {
        return a2 != 0;
      }
      LODWORD(v6) = *((_DWORD *)this + 2);
    }
    uint64_t v7 = *(void *)this;
    *((_DWORD *)this + 2) = v6 + 1;
    *(unsigned char *)(v7 + v6) = 4;
  }
  return a2 != 0;
}

uint64_t re::snapshot::EncoderOPACK::beginOptional(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *((unsigned int *)this + 2);
    if (v4 >= *((_DWORD *)this + 3))
    {
      if (!re::snapshot::Encoder::grow(this, v4 + 1)) {
        return a2;
      }
      LODWORD(v4) = *((_DWORD *)this + 2);
    }
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + v4) = 4;
  }
  return a2;
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1, a2, a3);
      break;
    case 1:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (const char **)a2, a3);
      break;
    case 2:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::Decoder *)a1, a2, a3);
      break;
    case 3:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t)a1, (uint64_t)a2, (void *)a3);
      break;
    case 4:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (uint64_t)a2, (void *)a3);
      break;
    case 5:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 6:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, a2);
      break;
    case 7:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::Decoder *)a1, (uint64_t)a2, (void *)a3);
      break;
    case 8:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::Decoder *)a1, (uint64_t)a2, a3);
      break;
    case 9:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1, a2, a3);
      break;
    case 0xA:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (uint64_t *)a2);
      break;
    case 0xB:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((_anonymous_namespace_ *)a1, (uint64_t)a2, a3);
      break;
    case 0xD:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (uint64_t)a2, a3);
      break;
    default:
      return;
  }
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
      return re::snapshot::DecoderRaw::operator>><BOOL>(a1, a2);
    case 2:
      return re::snapshot::DecoderRaw::operator>><signed char>(a1, a2);
    case 3:
      return re::snapshot::DecoderRaw::operator>><short>(a1, a2);
    case 4:
      goto LABEL_14;
    case 5:
      return re::snapshot::DecoderRaw::operator>><long long>(a1, a2);
    case 6:
      return re::snapshot::DecoderRaw::operator>><signed char>(a1, a2);
    case 7:
      return re::snapshot::DecoderRaw::operator>><unsigned short>(a1, a2);
    case 8:
LABEL_14:
      uint64_t result = re::snapshot::DecoderRaw::operator>><unsigned int>(a1, a2);
      break;
    case 9:
      uint64_t result = re::snapshot::DecoderRaw::operator>><unsigned long long>(a1, a2);
      break;
    case 0xA:
      uint64_t result = re::snapshot::DecoderRaw::operator>><float>(a1, a2);
      break;
    case 0xB:
      uint64_t result = re::snapshot::DecoderRaw::operator>><double>(a1, a2);
      break;
    default:
      uint64_t result = re::snapshot::Decoder::error((const char **)a1, "unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

{
  uint64_t *result;
  uint64_t vars8;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      uint64_t result = re::snapshot::DecoderRaw::operator>><signed char>(a1, a2);
      break;
    case 2:
      uint64_t result = re::snapshot::DecoderRaw::operator>><unsigned short>(a1, a2);
      break;
    case 4:
      uint64_t result = re::snapshot::DecoderRaw::operator>><unsigned int>(a1, a2);
      break;
    case 8:
      uint64_t result = re::snapshot::DecoderRaw::operator>><unsigned long long>(a1, a2);
      break;
    default:
      uint64_t result = re::snapshot::Decoder::error((const char **)a1, "unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *this, const char **a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F080))
  {
    qword_26AF9F078 = re::introspect<char>();
    __cxa_guard_release(&qword_26AF9F080);
  }
  uint64_t v6 = *(void *)(a3 + 48);
  if (v6 == qword_26AF9F078)
  {
    uint64_t __src = 0;
    if (!re::snapshot::DecoderRaw::beginString(this, (unint64_t *)&__src)) {
      return;
    }
    uint64_t v18 = (char *)*a2;
    size_t v19 = __src;
    if (*a2)
    {
      if (__src && (void *)strlen(*a2) == __src) {
        goto LABEL_26;
      }
      (*(void (**)(void, char *))(**((void **)this + 6) + 40))(*((void *)this + 6), v18);
      *a2 = 0;
    }
    if (!v19) {
      return;
    }
    uint64_t v18 = (char *)(*(uint64_t (**)(void, unsigned char *, void))(**((void **)this + 6) + 32))(*((void *)this + 6), v19 + 1, 0);
    *a2 = v18;
    if (!v18)
    {
      re::snapshot::Decoder::error((const char **)this, "C String of %zu bytes");
      return;
    }
LABEL_26:
    re::snapshot::Decoder::readRaw(this, v18, (size_t)v19);
    v19[(void)*a2] = 0;
    return;
  }
  uint64_t v7 = (char *)*((void *)this + 2);
  size_t v8 = (char *)*((void *)this + 3);
  if (v8 == v7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining");
  }
  else
  {
    int v9 = *v7;
    *((void *)this + 2) = v7 + 1;
    if (v9 != 1)
    {
      if (v9 != 2) {
        return;
      }
      unint64_t v10 = v8 - (v7 + 1);
      if (v10 <= 7)
      {
        re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v10);
      }
      else
      {
        uint64_t v11 = *(void *)(v7 + 1);
        *((void *)this + 2) = v7 + 9;
        if (*(_DWORD *)(v6 + 16) == 8 && v11 != 0)
        {
          uint64_t v13 = *(unsigned int *)(v6 + 56);
          if (v13)
          {
            uint64_t v14 = *(_DWORD ***)(v6 + 64);
            unint64_t v15 = v14;
            uint64_t v16 = *(unsigned int *)(v6 + 56);
            do
            {
              uint64_t v17 = (_DWORD *)*v15;
              if (*(_DWORD *)*v15 == 2) {
                goto LABEL_16;
              }
              ++v15;
              --v16;
            }
            while (v16);
            uint64_t v17 = 0;
LABEL_16:
            while (**v14 != 3)
            {
              ++v14;
              if (!--v13) {
                goto LABEL_30;
              }
            }
            if (v17)
            {
              if (*a2)
              {
                re::PolymorphicData::makeWithPointer(v6, (const re::IntrospectionBase *)*a2, &__src);
                if (!v27 || !__src || !v26 || (uint64_t __dst = 0, memcpy(&__dst, __src, *(int *)(v26 + 20)), v11 != __dst))
                {
                  re::introspectionReleasePointer((re::DynamicString *)*a2, *((void *)this + 6), *((void *)this + 5), v6);
                  *a2 = 0;
                }
              }
              uint64_t v21 = *(void *)(*((void *)v17 + 1) + 8);
              if (*(void *)(v21 + 24) == v11)
              {
                uint64_t v22 = 0;
              }
              else
              {
                uint64_t v22 = 0;
                unint64_t v23 = (uint64_t *)(v21 + 64);
                do
                {
                  ++v22;
                  uint64_t v24 = *v23;
                  v23 += 5;
                }
                while (v24 != v11);
              }
              uint64_t v6 = *(void *)(v21 + 40 * v22 + 8);
            }
          }
        }
      }
    }
LABEL_30:
    if (*a2
      || (char v20 = re::introspectionAllocPointer(*((re **)this + 6), *((_anonymous_namespace_ **)this + 5), (re::Allocator *)v6), (*a2 = (const char *)v20) != 0))
    {
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this);
    }
    else
    {
      re::snapshot::Decoder::error((const char **)this, "allocation failure: %d bytes");
    }
  }
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = re::snapshot::DecoderRaw::beginOptional(a1);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 64);
  if (v6)
  {
    v7(a3, a2, 1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
    return re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1);
  }
  else
  {
    return ((uint64_t (*)(uint64_t, uint64_t, void))v7)(a3, a2, 0);
  }
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *a1, uint64_t *a2)
{
  unint64_t v14 = 0;
  BOOL v4 = re::snapshot::DecoderRaw::beginString(a1, &v14);
  if (v4)
  {
    size_t v5 = v14;
    BOOL v6 = (const char *)*((void *)a1 + 2);
    unint64_t v7 = *((void *)a1 + 3) - (void)v6;
    if (v7 >= v14) {
      unint64_t v7 = v14;
    }
    *((void *)a1 + 2) = &v6[v7];
    uint64_t v12 = 0;
    uint64_t v13 = "";
    uint64_t v8 = v12;
    int v9 = v13;
    uint64_t v12 = 0;
    uint64_t v13 = "";
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = v8;
    a2[1] = (uint64_t)v9;
    v15[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    v15[1] = v11;
    re::StringID::destroyString((re::StringID *)v15);
    re::StringID::destroyString((re::StringID *)&v12);
  }
}

BOOL re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *a1, void *a2)
{
  unint64_t v7 = 0;
  BOOL result = re::snapshot::DecoderRaw::beginString(a1, &v7);
  if (result)
  {
    size_t v5 = v7;
    re::DynamicString::resize(a2, v7, 0);
    if (a2[1]) {
      BOOL v6 = (void *)a2[2];
    }
    else {
      BOOL v6 = (char *)a2 + 9;
    }
    return re::snapshot::Decoder::readRaw(a1, v6, v5);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::Decoder *this, char *__dst, uint64_t a3)
{
  BOOL v4 = __dst;
  uint64_t v6 = *(void *)(a3 + 48);
  unint64_t v15 = 0;
  if (*(unsigned char *)(v6 + 28))
  {
    unint64_t v7 = (size_t *)*((void *)this + 2);
    unint64_t v8 = *((void *)this + 3) - (void)v7;
    if (v8 > 7)
    {
      size_t v9 = *v7;
      *((void *)this + 2) = v7 + 1;
      int v10 = *(_DWORD *)(v6 + 20);
      if (v9 % v10) {
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "C Array element size mismatch: expected multiple of %d, got %zu");
      }
      if (v9 / v10 != *(_DWORD *)(a3 + 64)) {
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "C Array size mismatch: expected %d, got %zu");
      }
      return re::snapshot::Decoder::readRaw(this, __dst, v9);
    }
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v8);
  }
  uint64_t result = re::snapshot::DecoderRaw::beginArray(this, &v15);
  if (result)
  {
    unint64_t v12 = v15;
    if (v15 == *(_DWORD *)(a3 + 64))
    {
      int v13 = 0;
      if (v15)
      {
        unint64_t v14 = v15;
        do
        {
          if (v13 < *(_DWORD *)(a3 + 64))
          {
            uint64_t result = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this);
            v4 += *(int *)(v6 + 20);
            ++v13;
          }
          --v14;
        }
        while (v14);
      }
      if (v12 != v13) {
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "size mismatch: expected %zu, got %d");
      }
    }
    else
    {
      return (uint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected C Array size: expected %d, got %zu");
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t this, uint64_t a2, void *a3)
{
  size_t v5 = (re::snapshot::Decoder *)this;
  uint64_t v6 = a3[6];
  if (*(unsigned char *)(v6 + 28))
  {
    unint64_t v7 = *(size_t **)(this + 16);
    unint64_t v8 = *(void *)(this + 24) - (void)v7;
    if (v8 > 7)
    {
      size_t v11 = *v7;
      size_t v9 = v7 + 1;
      size_t v10 = v11;
      *(void *)(this + 16) = v9;
      if (v11 % *(int *)(v6 + 20))
      {
        *(void *)(this + 16) = (char *)v9 + v10;
      }
      else
      {
        this = (*(uint64_t (**)(void *, void, void, uint64_t))(*a3 + 72))(a3, *(void *)(this + 48), *(void *)(this + 40), a2);
        if (v10)
        {
          uint64_t v16 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 96))(a3, a2, 0);
          return re::snapshot::Decoder::readRaw(v5, v16, v10);
        }
      }
      return this;
    }
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v8);
  }
  unint64_t v17 = 0;
  this = re::snapshot::DecoderRaw::beginArray(v5, &v17);
  if (this)
  {
    unint64_t v12 = v17;
    this = (*(uint64_t (**)(void *, void, void, uint64_t, unint64_t))(*a3 + 72))(a3, *((void *)v5 + 6), *((void *)v5 + 5), a2, v17);
    int v13 = 0;
    if (v12)
    {
      unint64_t v14 = v12;
      do
      {
        if (v12 > v13)
        {
          uint64_t v15 = v13++;
          (*(void (**)(void *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v15);
          this = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(v5);
        }
        --v14;
      }
      while (v14);
    }
    if (v12 != v13) {
      return (uint64_t)re::snapshot::Decoder::error((const char **)v5, "count mismatch: expected %zu, got %d", v12, v13);
    }
  }
  return this;
}

unint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *this, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[6];
  if (*(unsigned char *)(v6 + 28))
  {
    unint64_t v7 = (size_t *)*((void *)this + 2);
    unint64_t v8 = *((void *)this + 3) - (void)v7;
    if (v8 > 7)
    {
      size_t v9 = *v7;
      *((void *)this + 2) = v7 + 1;
      unint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
      if ((result & 1) == 0) {
        unint64_t result = (*(uint64_t (**)(void *, uint64_t, void, void, size_t))(*a3 + 64))(a3, a2, *((void *)this + 6), *((void *)this + 5), v9 / *(int *)(v6 + 20));
      }
      unint64_t v11 = *(int *)(v6 + 20);
      size_t v12 = v9 / v11;
      if (v9 % v11)
      {
        *((void *)this + 2) += v9;
      }
      else
      {
        unint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
        if (v12 == result)
        {
          if (v9)
          {
            uint64_t v18 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 96))(a3, a2, 0);
            return re::snapshot::Decoder::readRaw(this, v18, v9);
          }
        }
        else
        {
          (*(void (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
          return (unint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected data size reading FixedArray: expected %zu, got %zu");
        }
      }
      return result;
    }
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v8);
  }
  unint64_t v19 = 0;
  unint64_t result = re::snapshot::DecoderRaw::beginArray(this, &v19);
  if (result)
  {
    char v13 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
    unint64_t v14 = v19;
    if ((v13 & 1) == 0) {
      (*(void (**)(void *, uint64_t, void, void, unint64_t))(*a3 + 64))(a3, a2, *((void *)this + 6), *((void *)this + 5), v19);
    }
    unint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
    if (result == v14)
    {
      int v15 = 0;
      if (v14)
      {
        unint64_t v16 = v14;
        do
        {
          unint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
          if (result > v15)
          {
            uint64_t v17 = v15++;
            (*(void (**)(void *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v17);
            unint64_t result = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this);
          }
          --v16;
        }
        while (v16);
      }
      if (v14 != v15) {
        return (unint64_t)re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d");
      }
    }
    else
    {
      (*(void (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
      return (unint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected FixedArray size: expected %zu, got %zu");
    }
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 80))(a3))
  {
    return re::snapshot::Decoder::error((const char **)a1, "cannot read into existing DataArray");
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t result = (uint64_t *)re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)a1, &v8);
    if (result)
    {
      for (i = v8; i; unint64_t result = (uint64_t *)re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1))
      {
        --i;
        (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)a3 + 72))(a3, *(void *)(a1 + 48), *(void *)(a1 + 40), a2);
      }
    }
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::Decoder *this, uint64_t a2, void *a3)
{
  __space[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v7 = *((void *)this + 3);
  if ((unint64_t)(v7 - (void)v6) <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v7 - (void)v6);
    uint64_t v9 = 0;
    unint64_t v8 = (void *)*((void *)this + 2);
    uint64_t v7 = *((void *)this + 3);
  }
  else
  {
    uint64_t v10 = *v6;
    unint64_t v8 = v6 + 1;
    uint64_t v9 = v10;
    *((void *)this + 2) = v8;
  }
  unint64_t v11 = v7 - (void)v8;
  if (v11 < 2 * v9) {
    return re::snapshot::Decoder::error((const char **)this, "overrun in beginDictionary: size is %zu, but only %zu bytes remaining", v9, v11);
  }
  uint64_t v13 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
  if (v9 != -1) {
    uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a3 + 72))(a3, a2, v9);
  }
  unint64_t v14 = (re::Allocator *)a3[6];
  size_t v15 = *((int *)v14 + 6);
  size_t v16 = *((_DWORD *)v14 + 5) + (int)v15 - 1;
  __space[0] = v16;
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v22 - v17;
  bzero((char *)&v22 - v17, v16);
  __ptr = v18;
  unint64_t result = (uint64_t *)std::align(v15, v16, &__ptr, __space);
  for (__ptr = result; v9; unint64_t result = (uint64_t *)(*(uint64_t (**)(void *, void *))(*a3 + 112))(a3, __ptr))
  {
    --v9;
    unint64_t v19 = (re *)*((void *)this + 6);
    char v20 = (re::IntrospectionBase *)__ptr;
    re::introspectionCallConstructor(*((_anonymous_namespace_ **)this + 5), (uint64_t)v14, (uint64_t)__ptr);
    re::introspectionInitElement(v19, v21, v14, v20);
    re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this);
    (*(void (**)(void *, void, void, uint64_t, void *))(*a3 + 96))(a3, *((void *)this + 6), *((void *)this + 5), a2, __ptr);
    re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  size_t v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  unint64_t v14 = 0;
  if (re::snapshot::DecoderRaw::beginString(a1, &v14))
  {
    size_t v6 = v14;
    re::DynamicString::resize(&v10, v14, 0);
    if (v11) {
      uint64_t v7 = v12;
    }
    else {
      uint64_t v7 = (char *)&v11 + 1;
    }
    re::snapshot::Decoder::readRaw(a1, v7, v6);
  }
  if (v11) {
    unint64_t v8 = v12;
  }
  else {
    unint64_t v8 = (char *)&v11 + 1;
  }
  (*(void (**)(void, void, uint64_t, uint64_t, char *))(a3 + 80))(*((void *)a1 + 6), *((void *)a1 + 5), a3, a2, v8);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (v11) {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::Decoder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(unsigned int *)(a3 + 56);
  if (v3)
  {
    uint64_t v4 = a3;
    size_t v6 = this;
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(v4 + 64) + 8 * v7);
      if (*(_DWORD *)v8 == 1) {
        break;
      }
LABEL_60:
      if (++v7 >= v3) {
        return;
      }
    }
    switch(*(_DWORD *)(v8 + 40))
    {
      case 0:
      case 3:
        this = (re::snapshot::Decoder *)re::snapshot::Reader<re::snapshot::DecoderRaw>::read(v6);
        goto LABEL_59;
      case 1:
        uint64_t v9 = *(int *)(v8 + 36);
        uint64_t v10 = *(void *)(v8 + 16);
        uint64_t __dst = 0;
        unint64_t v46 = 0;
        uint64_t v44 = v9;
        if (*(void *)(a2 + v9))
        {
          uint64_t v11 = *(void *)(v8 + 48);
          if (v11) {
            memcpy(&__dst, (const void *)(a2 + *(int *)(v8 + 64)), *(int *)(v11 + 20));
          }
        }
        if (!*(_DWORD *)(*(void *)(v10 + 48) + 16))
        {
          unint64_t v19 = (size_t *)*((void *)v6 + 2);
          unint64_t v20 = *((void *)v6 + 3) - (void)v19;
          if (v20 <= 7)
          {
            this = (re::snapshot::Decoder *)re::snapshot::Decoder::error((const char **)v6, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v20);
          }
          else
          {
            size_t v21 = *v19;
            *((void *)v6 + 2) = v19 + 1;
            int v22 = *(_DWORD *)(*(void *)(v10 + 48) + 20);
            unint64_t v23 = v21 / v22;
            if (v21 % v22)
            {
              re::snapshot::Decoder::error((const char **)v6, "invalid array data, data size = %zu, element size = %u");
              return;
            }
            uint64_t v24 = *(void **)(a2 + v44);
            if (v24 && v23 != __dst)
            {
              (*(void (**)(void))(**((void **)v6 + 6) + 40))(*((void *)v6 + 6));
              uint64_t v24 = 0;
              *(void *)(a2 + v44) = 0;
            }
            if (v21)
            {
              if (!v24)
              {
                uint64_t v24 = (void *)(*(uint64_t (**)(void, size_t, void))(**((void **)v6 + 6) + 32))(*((void *)v6 + 6), v21, 0);
                *(void *)(a2 + v44) = v24;
                if (!v24)
                {
                  re::snapshot::Decoder::error((const char **)v6, "allocation failure, array with size: %zu bytes");
                  return;
                }
              }
            }
            *(void *)&long long buf = v23;
            if (*(_DWORD *)(v8 + 40) == 1)
            {
              uint64_t v25 = *(void *)(v8 + 48);
              if (v25)
              {
                memcpy((void *)(a2 + *(int *)(v8 + 64)), &buf, *(int *)(v25 + 20));
                uint64_t v24 = *(void **)(a2 + v44);
              }
            }
            this = (re::snapshot::Decoder *)re::snapshot::Decoder::readRaw(v6, v24, v21);
          }
          goto LABEL_59;
        }
        this = (re::snapshot::Decoder *)re::snapshot::DecoderRaw::beginArray(v6, &v46);
        if (!this) {
          goto LABEL_59;
        }
        uint64_t v43 = v4;
        uint64_t v12 = v44;
        uint64_t v13 = *(void *)(a2 + v44);
        unint64_t v14 = v46;
        if (!v13) {
          goto LABEL_44;
        }
        uint64_t v15 = __dst;
        if (__dst != v46)
        {
          uint64_t v48 = 0;
          switch(*(_DWORD *)(*(void *)(v10 + 48) + 16))
          {
            case 3:
              size_t v16 = &unk_26E7205F0;
              goto LABEL_38;
            case 4:
              size_t v16 = &unk_26E720638;
              goto LABEL_38;
            case 5:
              size_t v16 = &unk_26E720680;
              goto LABEL_38;
            case 6:
              uint64_t v26 = &unk_26E720560;
              goto LABEL_36;
            case 7:
              size_t v16 = &unk_26E7206C8;
              goto LABEL_38;
            case 8:
              *(void *)&long long buf = &unk_26E7204D0;
              *((void *)&buf + 1) = v6;
              uint64_t v50 = v10;
              goto LABEL_39;
            case 0xA:
              uint64_t v26 = &unk_26E7205A8;
LABEL_36:
              *(void *)&long long buf = v26;
              goto LABEL_39;
            case 0xD:
              size_t v16 = &unk_26E720518;
LABEL_38:
              *(void *)&long long buf = v16;
              *((void *)&buf + 1) = v10;
LABEL_39:
              p_long long buf = &buf;
              std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](&buf, v47);
              std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](&buf);
              if (v15 && v48)
              {
                for (uint64_t i = 0; i != v15; ++i)
                  std::function<void ()(void *)>::operator()((uint64_t)v47, *(void *)(a2 + v44) + *(int *)(*(void *)(v10 + 48) + 20) * (uint64_t)(int)i);
              }
              break;
            default:
              break;
          }
          (*(void (**)(void, void))(**((void **)v6 + 6) + 40))(*((void *)v6 + 6), *(void *)(a2 + v44));
          *(void *)(a2 + v44) = 0;
          this = (re::snapshot::Decoder *)std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v47);
          uint64_t v13 = *(void *)(a2 + v44);
LABEL_44:
          if (v13) {
            BOOL v28 = 1;
          }
          else {
            BOOL v28 = v14 == 0;
          }
          if (!v28)
          {
            uint64_t v29 = (*(uint64_t (**)(void, unint64_t, void))(**((void **)v6 + 6) + 32))(*((void *)v6 + 6), v14 * *(int *)(*(void *)(v10 + 48) + 20), 0);
            *(void *)(a2 + v44) = v29;
            if (!v29)
            {
              re::snapshot::Decoder::error((const char **)v6, "allocation failure, array with size: %zu %d byte elements");
              return;
            }
            uint64_t v30 = 0;
            do
            {
              uint64_t v31 = *(void *)(a2 + v12);
              uint64_t v32 = *(int **)(v10 + 48);
              uint64_t v33 = a2;
              uint64_t v34 = v31 + v32[5] * (uint64_t)(int)v30;
              uint64_t v35 = (re *)*((void *)v6 + 6);
              re::introspectionCallConstructor(*((_anonymous_namespace_ **)v6 + 5), (uint64_t)v32, v34);
              uint64_t v36 = (re::IntrospectionBase *)v34;
              a2 = v33;
              uint64_t v12 = v44;
              this = re::introspectionInitElement(v35, v37, (re::Allocator *)v32, v36);
              ++v30;
            }
            while (v14 != v30);
          }
        }
        *(void *)&long long buf = v14;
        if (*(_DWORD *)(v8 + 40) == 1)
        {
          uint64_t v38 = *(void *)(v8 + 48);
          if (v38) {
            this = (re::snapshot::Decoder *)memcpy((void *)(a2 + *(int *)(v8 + 64)), &buf, *(int *)(v38 + 20));
          }
        }
        uint64_t v39 = *(void *)(a2 + v12);
        unint64_t v40 = v14 - 1;
        unint64_t v46 = v14 - 1;
        uint64_t v4 = v43;
        if (v14)
        {
          unint64_t v41 = 0;
          do
          {
            if (v41 < v14)
            {
              this = (re::snapshot::Decoder *)re::snapshot::Reader<re::snapshot::DecoderRaw>::read(v6);
              v39 += *(int *)(*(void *)(v10 + 48) + 20);
              unint64_t v40 = v46;
            }
            unint64_t v42 = v40--;
            unint64_t v46 = v40;
            ++v41;
          }
          while (v42);
        }
LABEL_59:
        *((_DWORD *)v6 + 8) = 0;
        unint64_t v3 = *(unsigned int *)(v4 + 56);
        goto LABEL_60;
      case 2:
        uint64_t v17 = *re::foundationSerializationLogObjects(this);
        this = (re::snapshot::Decoder *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          uint64_t v18 = *(void *)(v4 + 48);
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v18;
          _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Snapshot reader: polymorphic inline types currently unhandled (type = %s)", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_59;
      default:
        goto LABEL_59;
    }
  }
}

uint64_t *re::snapshot::DecoderRaw::operator>><signed char>(uint64_t *result, unsigned char *a2)
{
  int v2 = (unsigned char *)result[2];
  if ((unsigned char *)result[3] == v2) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
  }
  *a2 = *v2;
  ++result[2];
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><short>(uint64_t *result, _WORD *a2)
{
  int v2 = (_WORD *)result[2];
  unint64_t v3 = result[3] - (void)v2;
  if (v3 <= 1) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 2uLL, v3);
  }
  *a2 = *v2;
  result[2] += 2;
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><long long>(uint64_t *result, void *a2)
{
  int v2 = (void *)result[2];
  unint64_t v3 = result[3] - (void)v2;
  if (v3 <= 7) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v3);
  }
  *a2 = *v2;
  result[2] += 8;
  return result;
}

uint64_t *re::snapshot::Decoder::error(const char **this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  uint64_t v4 = (re *)re::DynamicString::vassignf((re::DynamicString *)&v10, a2, va);
  size_t v5 = *re::foundationSerializationLogObjects(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = this[7];
    if (!v7) {
      uint64_t v7 = "<unknown>";
    }
    int v8 = *((_DWORD *)this + 8);
    if (v11) {
      uint64_t v9 = v12;
    }
    else {
      uint64_t v9 = (char *)&v11 + 1;
    }
    *(_DWORD *)long long buf = 136315650;
    uint64_t v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 2080;
    unint64_t v19 = v9;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Snapshot reader (%s:%d): %s", buf, 0x1Cu);
  }
  this[2] = this[3];
  *((unsigned char *)this + 36) = 1;
  uint64_t result = v10;
  if (v10)
  {
    if (v11) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

BOOL re::snapshot::DecoderRaw::beginArray(re::snapshot::DecoderRaw *this, unint64_t *a2)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 2);
  unint64_t v5 = *((void *)this + 3) - (void)v4;
  if (v5 <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
    unint64_t v6 = *a2;
    uint64_t v7 = *((void *)this + 2);
  }
  else
  {
    unint64_t v6 = *v4;
    *a2 = *v4;
    uint64_t v7 = *((void *)this + 2) + 8;
    *((void *)this + 2) = v7;
  }
  unint64_t v8 = *((void *)this + 3) - v7;
  if (v8 < v6) {
    re::snapshot::Decoder::error((const char **)this, "overrun in beginArray: size is %zu, but only %zu bytes remaining", v6, v8);
  }
  return v8 >= v6;
}

BOOL re::snapshot::DecoderRaw::beginString(re::snapshot::DecoderRaw *this, unint64_t *a2)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 2);
  unint64_t v5 = *((void *)this + 3) - (void)v4;
  if (v5 <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
    unint64_t v6 = *a2;
    uint64_t v7 = *((void *)this + 2);
  }
  else
  {
    unint64_t v6 = *v4;
    *a2 = *v4;
    uint64_t v7 = *((void *)this + 2) + 8;
    *((void *)this + 2) = v7;
  }
  unint64_t v8 = *((void *)this + 3) - v7;
  if (v8 < v6) {
    re::snapshot::Decoder::error((const char **)this, "overrun in beginString: size is %zu, but only %zu bytes remaining", v6, v8);
  }
  return v8 >= v6;
}

BOOL re::snapshot::DecoderRaw::beginOptional(re::snapshot::DecoderRaw *this)
{
  int v1 = (unsigned __int8 *)*((void *)this + 2);
  if (*((unsigned __int8 **)this + 3) == v1)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
    return 0;
  }
  else
  {
    int v2 = *v1;
    *((void *)this + 2) = v1 + 1;
    return v2 != 0;
  }
}

BOOL re::snapshot::Reader<re::snapshot::DecoderRaw>::apply(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, a2, a3);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    re::snapshot::Decoder::error((const char **)a1, "failed to consume input: %zu vs %zu", v4 - *(void *)a1, *(void *)(a1 + 8));
  }
  int v5 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36)) {
    re::snapshot::Decoder::logInput((re::snapshot::Decoder *)a1);
  }
  return v5 == 0;
}

void re::snapshot::Decoder::logInput(re::snapshot::Decoder *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v2 = *re::foundationSerializationLogObjects(this);
  unint64_t v3 = (_anonymous_namespace_ *)os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 1);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_INFO, "Snapshot reader data is %zu bytes", buf, 0xCu);
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    int v6 = 0;
    do
    {
      if (v5 >= 0x100) {
        uint64_t v7 = 256;
      }
      else {
        uint64_t v7 = v5;
      }
      *(_OWORD *)long long buf = 0u;
      long long v22 = 0u;
      re::DynamicString::setCapacity(buf, 0);
      unint64_t v8 = (re *)re::DynamicString::resize(buf, 3 * v7, 0);
      if (v7)
      {
        unint64_t v10 = 0;
        unint64_t v11 = v6;
        do
        {
          unint64_t v12 = *((void *)this + 1);
          if (v12 <= v11)
          {
            re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v12);
            _os_crash();
            __break(1u);
LABEL_23:
            re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v15);
            _os_crash();
            __break(1u);
          }
          char v13 = re::snapshot::Decoder::logInput(void)const::chars[(unint64_t)*(unsigned __int8 *)(*(void *)this + v11) >> 4];
          *(unsigned char *)re::DynamicString::operator[]((uint64_t)buf, v10) = v13;
          unint64_t v15 = *((void *)this + 1);
          if (v15 <= v11) {
            goto LABEL_23;
          }
          char v16 = re::snapshot::Decoder::logInput(void)const::chars[*(unsigned char *)(*(void *)this + v11) & 0xF];
          *(unsigned char *)re::DynamicString::operator[]((uint64_t)buf, v10 + 1) = v16;
          unint64_t v8 = (re *)re::DynamicString::operator[]((uint64_t)buf, v10 + 2);
          *(unsigned char *)unint64_t v8 = 32;
          v10 += 3;
          ++v11;
        }
        while (3 * v7 != v10);
      }
      int v17 = *re::foundationSerializationLogObjects(v8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        __int16 v18 = &buf[9];
        if (buf[8]) {
          __int16 v18 = (uint8_t *)v22;
        }
        *(_DWORD *)unint64_t v19 = 136315138;
        uint64_t v20 = v18;
        _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_INFO, "Snapshot reader data = %s", v19, 0xCu);
      }
      unint64_t v3 = *(_anonymous_namespace_ **)buf;
      if (*(void *)buf)
      {
        if (buf[8]) {
          unint64_t v3 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
        }
      }
      v6 += v7;
      v5 -= v7;
    }
    while (*((void *)this + 1) > (unint64_t)v6);
  }
}

void re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t *a1, float *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, a2, a3);
      break;
    case 1:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (const char **)a2, a3);
      break;
    case 2:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((const char **)a1, (char *)a2, a3);
      break;
    case 3:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (uint64_t)a2, (void *)a3);
      break;
    case 4:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (uint64_t)a2, (void *)a3);
      break;
    case 5:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 6:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, a2);
      break;
    case 7:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((_anonymous_namespace_ **)a1, (uint64_t)a2, (void *)a3);
      break;
    case 8:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 9:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, a2, a3);
      break;
    case 0xA:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (uint64_t *)a2);
      break;
    case 0xB:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((_anonymous_namespace_ *)a1, (uint64_t)a2, a3);
      break;
    case 0xD:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t)a1, (uint64_t)a2, a3);
      break;
    default:
      return;
  }
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t *a1, float *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
      uint64_t result = re::snapshot::DecoderOPACK::operator>>(a1, a2);
      break;
    case 2:
    case 6:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(unsigned char *)a2 = (_BYTE)result;
      break;
    case 3:
    case 7:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(_WORD *)a2 = (_WORD)result;
      break;
    case 4:
    case 8:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(_DWORD *)a2 = result;
      break;
    case 5:
    case 9:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(void *)a2 = result;
      break;
    case 0xA:
      uint64_t result = re::snapshot::DecoderOPACK::operator>>(a1, a2);
      break;
    case 0xB:
      uint64_t result = re::snapshot::DecoderOPACK::operator>>(a1, (double *)a2);
      break;
    default:
      uint64_t result = re::snapshot::Decoder::error((const char **)a1, "unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *a1, unsigned char *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *a2 = (_BYTE)result;
      break;
    case 2:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *(_WORD *)a2 = (_WORD)result;
      break;
    case 4:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *(_DWORD *)a2 = result;
      break;
    case 8:
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *(void *)a2 = result;
      break;
    default:
      uint64_t result = re::snapshot::Decoder::error((const char **)a1, "unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

void re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *this, const char **a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F090))
  {
    qword_26AF9F088 = re::introspect<char>();
    __cxa_guard_release(&qword_26AF9F090);
  }
  uint64_t v6 = *(void *)(a3 + 48);
  if (v6 == qword_26AF9F088)
  {
    uint64_t __src = 0;
    if (!re::snapshot::DecoderOPACK::beginString(this, (unint64_t *)&__src)) {
      return;
    }
    uint64_t v9 = (char *)*a2;
    unint64_t v10 = __src;
    if (*a2)
    {
      if (__src && (void *)strlen(*a2) == __src) {
        goto LABEL_14;
      }
      (*(void (**)(void, char *))(**((void **)this + 6) + 40))(*((void *)this + 6), v9);
      *a2 = 0;
    }
    if (!v10) {
      return;
    }
    uint64_t v9 = (char *)(*(uint64_t (**)(void, unsigned char *, void))(**((void **)this + 6) + 32))(*((void *)this + 6), v10 + 1, 0);
    *a2 = v9;
    if (!v9)
    {
      re::snapshot::Decoder::error((const char **)this, "C String of %zu bytes");
      return;
    }
LABEL_14:
    re::snapshot::Decoder::readRaw(this, v9, (size_t)v10);
    v10[(void)*a2] = 0;
    return;
  }
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 2);
  if ((unint64_t)v7 < *((void *)this + 3))
  {
    int v8 = *v7;
    if (v8 == 225)
    {
      *((void *)this + 2) = v7 + 1;
      uint64_t Integer = re::snapshot::DecoderOPACK::readInteger(this, 0);
      if (*(_DWORD *)(v6 + 16) == 8 && Integer != 0)
      {
        uint64_t v13 = *(unsigned int *)(v6 + 56);
        if (v13)
        {
          uint64_t v14 = Integer;
          unint64_t v15 = *(_DWORD ***)(v6 + 64);
          char v16 = v15;
          uint64_t v17 = *(unsigned int *)(v6 + 56);
          do
          {
            __int16 v18 = (_DWORD *)*v16;
            if (*(_DWORD *)*v16 == 2) {
              goto LABEL_24;
            }
            ++v16;
            --v17;
          }
          while (v17);
          __int16 v18 = 0;
LABEL_24:
          while (**v15 != 3)
          {
            ++v15;
            if (!--v13) {
              goto LABEL_41;
            }
          }
          if (v18)
          {
            if (*a2)
            {
              re::PolymorphicData::makeWithPointer(v6, (const re::IntrospectionBase *)*a2, &__src);
              uint64_t v19 = 0;
              if (v27 && __src && v26)
              {
                uint64_t __dst = 0;
                memcpy(&__dst, __src, *(int *)(v26 + 20));
                uint64_t v19 = __dst;
              }
              if (v14 != v19)
              {
                re::introspectionReleasePointer((re::DynamicString *)*a2, *((void *)this + 6), *((void *)this + 5), v6);
                *a2 = 0;
              }
            }
            uint64_t v20 = *(void *)(*((void *)v18 + 1) + 8);
            if (*(void *)(v20 + 24) == v14)
            {
              uint64_t v21 = 0;
            }
            else
            {
              uint64_t v21 = 0;
              long long v22 = (uint64_t *)(v20 + 64);
              do
              {
                ++v21;
                uint64_t v23 = *v22;
                v22 += 5;
              }
              while (v23 != v14);
            }
            uint64_t v6 = *(void *)(v20 + 40 * v21 + 8);
          }
        }
      }
    }
    else if (v8 == 4)
    {
      *((void *)this + 2) = v7 + 1;
      return;
    }
LABEL_41:
    if (*a2
      || (uint64_t v24 = re::introspectionAllocPointer(*((re **)this + 6), *((_anonymous_namespace_ **)this + 5), (re::Allocator *)v6), (*a2 = (const char *)v24) != 0))
    {
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this);
    }
    else
    {
      re::snapshot::Decoder::error((const char **)this, "allocation failure: %d bytes");
    }
  }
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(unsigned char **)(a1 + 16);
  if ((unint64_t)v5 >= *(void *)(a1 + 24))
  {
LABEL_4:
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64);
    return v7(a3, a2, 0);
  }
  if (*v5 == 4)
  {
    *(void *)(a1 + 16) = v5 + 1;
    goto LABEL_4;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 64))(a3, a2, 1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, a2);
  return re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1);
}

void re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *a1, uint64_t *a2)
{
  unint64_t v14 = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString(a1, &v14);
  if (v4)
  {
    size_t v5 = v14;
    uint64_t v6 = (const char *)*((void *)a1 + 2);
    unint64_t v7 = *((void *)a1 + 3) - (void)v6;
    if (v7 >= v14) {
      unint64_t v7 = v14;
    }
    *((void *)a1 + 2) = &v6[v7];
    uint64_t v12 = 0;
    uint64_t v13 = "";
    uint64_t v8 = v12;
    uint64_t v9 = v13;
    uint64_t v12 = 0;
    uint64_t v13 = "";
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    *a2 = v8;
    a2[1] = (uint64_t)v9;
    v15[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    v15[1] = v11;
    re::StringID::destroyString((re::StringID *)v15);
    re::StringID::destroyString((re::StringID *)&v12);
  }
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *a1, void *a2)
{
  unint64_t v7 = 0;
  uint64_t result = re::snapshot::DecoderOPACK::beginString(a1, &v7);
  if (result)
  {
    size_t v5 = v7;
    re::DynamicString::resize(a2, v7, 0);
    if (a2[1]) {
      uint64_t v6 = (void *)a2[2];
    }
    else {
      uint64_t v6 = (char *)a2 + 9;
    }
    return re::snapshot::Decoder::readRaw(a1, v6, v5);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(const char **this, char *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  size_t __len = 0;
  if (*(unsigned char *)(v6 + 28)
    && re::snapshot::DecoderOPACK::beginData((re::snapshot::DecoderOPACK *)this, &__len, 1))
  {
    size_t v7 = __len;
    int v8 = *(_DWORD *)(v6 + 20);
    if (__len % v8)
    {
      return (uint64_t)re::snapshot::Decoder::error(this, "C Array element size mismatch: expected multiple of %d, got %zu");
    }
    else if (__len / v8 == *(_DWORD *)(a3 + 64))
    {
      return re::snapshot::Decoder::readRaw((re::snapshot::Decoder *)this, a2, v7);
    }
    else
    {
      return (uint64_t)re::snapshot::Decoder::error(this, "C Array size mismatch: expected %d, got %zu");
    }
  }
  else
  {
    uint64_t result = re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)this, &__len);
    if (result)
    {
      size_t v10 = __len;
      if (__len == *(_DWORD *)(a3 + 64))
      {
        uint64_t result = re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)this, &__len);
        int v11 = 0;
        if ((result & 1) == 0)
        {
          do
          {
            if (v11 >= *(_DWORD *)(a3 + 64))
            {
              uint64_t v12 = (unsigned __int8 *)this[2];
              if (v12 >= (unsigned __int8 *)this[3])
              {
                int v13 = 0;
              }
              else
              {
                this[2] = (const char *)(v12 + 1);
                int v13 = *v12;
              }
              re::snapshot::DecoderOPACK::skip((uint64_t *)this, v13);
            }
            else
            {
              re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this);
              a2 += *(int *)(v6 + 20);
              ++v11;
            }
            uint64_t result = re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)this, &__len);
          }
          while (!result);
        }
        if (v10 != v11) {
          return (uint64_t)re::snapshot::Decoder::error(this, "size mismatch: expected %zu, got %d");
        }
      }
      else
      {
        return (uint64_t)re::snapshot::Decoder::error(this, "unexpected C Array size: expected %d, got %zu");
      }
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *this, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[6];
  unint64_t v15 = 0;
  if (*(unsigned char *)(v6 + 28) && (uint64_t result = re::snapshot::DecoderOPACK::beginData(this, &v15, 1), result))
  {
    size_t v8 = v15;
    if (v15 % *(int *)(v6 + 20))
    {
      *((void *)this + 2) += v15;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void *, void, void, uint64_t))(*a3 + 72))(a3, *((void *)this + 6), *((void *)this + 5), a2);
      if (v8)
      {
        unint64_t v14 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 96))(a3, a2, 0);
        return re::snapshot::Decoder::readRaw(this, v14, v8);
      }
    }
  }
  else
  {
    uint64_t result = re::snapshot::DecoderOPACK::beginArray(this, &v15);
    if (result)
    {
      unint64_t v9 = v15;
      (*(void (**)(void *, void, void, uint64_t, unint64_t))(*a3 + 72))(a3, *((void *)this + 6), *((void *)this + 5), a2, v15);
      uint64_t result = re::snapshot::DecoderOPACK::endArray(this, &v15);
      int v10 = 0;
      if ((result & 1) == 0)
      {
        do
        {
          if (v9 <= v10)
          {
            uint64_t v12 = (unsigned __int8 *)*((void *)this + 2);
            if ((unint64_t)v12 >= *((void *)this + 3))
            {
              int v13 = 0;
            }
            else
            {
              *((void *)this + 2) = v12 + 1;
              int v13 = *v12;
            }
            re::snapshot::DecoderOPACK::skip((uint64_t *)this, v13);
          }
          else
          {
            uint64_t v11 = v10++;
            (*(void (**)(void *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v11);
            re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this);
          }
          uint64_t result = re::snapshot::DecoderOPACK::endArray(this, &v15);
        }
        while (!result);
      }
      if (v9 != v10) {
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d", v9, v10);
      }
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  size_t v8;
  unint64_t v9;
  size_t v10;
  char v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  void *v17;
  unint64_t v18;
  uint64_t vars8;

  uint64_t v6 = a3[6];
  __int16 v18 = 0;
  if (*(unsigned char *)(v6 + 28) && re::snapshot::DecoderOPACK::beginData(this, &v18, 1))
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
    size_t v8 = v18;
    if ((result & 1) == 0) {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, void, unint64_t))(*a3 + 64))(a3, a2, *((void *)this + 6), *((void *)this + 5), v18 / *(int *)(v6 + 20));
    }
    unint64_t v9 = *(int *)(v6 + 20);
    int v10 = v8 / v9;
    if (v8 % v9)
    {
      *((void *)this + 2) += v8;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
      if (v10 == result)
      {
        if (v8)
        {
          uint64_t v17 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a3 + 96))(a3, a2, 0);
          return re::snapshot::Decoder::readRaw(this, v17, v8);
        }
      }
      else
      {
        (*(void (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected data size reading FixedArray: expected %zu, got %zu");
      }
    }
  }
  else
  {
    uint64_t result = re::snapshot::DecoderOPACK::beginArray(this, &v18);
    if (result)
    {
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
      uint64_t v12 = v18;
      if ((v11 & 1) == 0) {
        (*(void (**)(void *, uint64_t, void, void, unint64_t))(*a3 + 64))(a3, a2, *((void *)this + 6), *((void *)this + 5), v18);
      }
      if ((*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2) == v12)
      {
        uint64_t result = re::snapshot::DecoderOPACK::endArray(this, &v18);
        int v13 = 0;
        if ((result & 1) == 0)
        {
          do
          {
            if ((*(uint64_t (**)(void *, uint64_t))(*a3 + 80))(a3, a2) <= (unint64_t)v13)
            {
              unint64_t v15 = (unsigned __int8 *)*((void *)this + 2);
              if ((unint64_t)v15 >= *((void *)this + 3))
              {
                char v16 = 0;
              }
              else
              {
                *((void *)this + 2) = v15 + 1;
                char v16 = *v15;
              }
              re::snapshot::DecoderOPACK::skip((uint64_t *)this, v16);
            }
            else
            {
              unint64_t v14 = v13++;
              (*(void (**)(void *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v14);
              re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this);
            }
            uint64_t result = re::snapshot::DecoderOPACK::endArray(this, &v18);
          }
          while (!result);
        }
        if (v12 != v13) {
          return (uint64_t)re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d");
        }
      }
      else
      {
        (*(void (**)(void *, uint64_t))(*a3 + 80))(a3, a2);
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected FixedArray size: expected %zu, got %zu");
      }
    }
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 80))(a3))
  {
    return re::snapshot::Decoder::error((const char **)a1, "cannot read into existing DataArray");
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)a1, &v11);
    if (result)
    {
      unint64_t v7 = v11;
      uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &v11);
      if ((result & 1) == 0)
      {
        unint64_t v8 = 0;
        do
        {
          if (v8 >= v7)
          {
            unint64_t v9 = *(unsigned __int8 **)(a1 + 16);
            if ((unint64_t)v9 >= *(void *)(a1 + 24))
            {
              int v10 = 0;
            }
            else
            {
              *(void *)(a1 + 16) = v9 + 1;
              int v10 = *v9;
            }
            re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v10);
          }
          else
          {
            (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)a3 + 72))(a3, *(void *)(a1 + 48), *(void *)(a1 + 40), a2);
            re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1);
          }
          uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &v11);
          ++v8;
        }
        while (!result);
      }
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t j;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re *v41;
  re::IntrospectionBase *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int Integer;
  size_t v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  size_t v53;
  uint64_t __dst;
  size_t __len;
  char *v56;
  unsigned char buf[18];
  uint64_t v58;
  uint64_t v59;

  unint64_t v3 = a3;
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v56 = *(char **)(a3 + 48);
  uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)a1, (const char **)&v56);
  if (result)
  {
    if (*(_DWORD *)(v3 + 56))
    {
      unint64_t v7 = 0;
      while (1)
      {
        unint64_t v8 = *(void *)(*(void *)(v3 + 64) + 8 * v7);
        if (*(_DWORD *)v8 == 1) {
          break;
        }
LABEL_72:
        if (++v7 >= (unint64_t)*(unsigned int *)(v3 + 56)) {
          return re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, v56);
        }
      }
      unint64_t v9 = *(_DWORD *)(v8 + 32);
      for (uint64_t i = *(unsigned int *)(a1 + 32); (int)i < v9; *(_DWORD *)(a1 + 32) = i)
      {
        unint64_t v11 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v11 >= *(void *)(a1 + 24))
        {
          uint64_t v12 = 0;
        }
        else
        {
          *(void *)(a1 + 16) = v11 + 1;
          uint64_t v12 = *v11;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v12);
        int v13 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v13 >= *(void *)(a1 + 24) || (unint64_t v14 = *v13, v14 == 3))
        {
          uint64_t i = 0x7FFFFFFFLL;
          *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
          break;
        }
        if ((v14 - 7) > 0x28)
        {
          uint64_t i = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(void *)(a1 + 16) = v13 + 1;
          uint64_t i = (v14 - 8);
        }
      }
      if (i != v9)
      {
        unint64_t v15 = *re::foundationSerializationLogObjects((re *)i);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          char v16 = *(_DWORD *)(v8 + 32);
          uint64_t v17 = *(void *)(v3 + 48);
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v17;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_INFO, "Snapshot reader: no field for tag %d in %s", buf, 0x12u);
        }
        goto LABEL_72;
      }
      switch(*(_DWORD *)(v8 + 40))
      {
        case 0:
        case 3:
          re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1);
          goto LABEL_68;
        case 1:
          __int16 v18 = *(int *)(v8 + 36);
          uint64_t v19 = *(void *)(v8 + 16);
          uint64_t __dst = 0;
          size_t __len = 0;
          if (*(void *)(a2 + v18))
          {
            uint64_t v20 = *(void *)(v8 + 48);
            if (v20) {
              memcpy(&__dst, (const void *)(a2 + *(int *)(v8 + 64)), *(int *)(v20 + 20));
            }
          }
          if (!*(_DWORD *)(*(void *)(v19 + 48) + 16))
          {
            if (re::snapshot::DecoderOPACK::beginData((re::snapshot::DecoderOPACK *)a1, &__len, 0))
            {
              uint64_t v25 = v18;
              uint64_t v26 = __len;
              uint64_t v27 = *(_DWORD *)(*(void *)(v19 + 48) + 20);
              BOOL v28 = __len / v27;
              if (__len % v27) {
                return re::snapshot::Decoder::error((const char **)a1, "invalid array data, data size = %zu, element size = %u");
              }
              uint64_t v29 = *(void **)(a2 + v25);
              if (v29 && v28 != __dst)
              {
                (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
                uint64_t v29 = 0;
                *(void *)(a2 + v25) = 0;
              }
              if (v26)
              {
                if (!v29)
                {
                  uint64_t v29 = (void *)(*(uint64_t (**)(void, size_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v26, 0);
                  *(void *)(a2 + v25) = v29;
                  if (!v29) {
                    return re::snapshot::Decoder::error((const char **)a1, "allocation failure, array with size: %zu bytes");
                  }
                }
              }
              *(void *)long long buf = v28;
              if (*(_DWORD *)(v8 + 40) == 1)
              {
                uint64_t v30 = *(void *)(v8 + 48);
                if (v30)
                {
                  memcpy((void *)(a2 + *(int *)(v8 + 64)), buf, *(int *)(v30 + 20));
                  uint64_t v29 = *(void **)(a2 + v25);
                }
              }
              re::snapshot::Decoder::readRaw((re::snapshot::Decoder *)a1, v29, v26);
            }
            goto LABEL_68;
          }
          if (!re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)a1, &__len)) {
            goto LABEL_68;
          }
          uint64_t v52 = v3;
          uint64_t v21 = *(void *)(a2 + v18);
          uint64_t v53 = __len;
          if (!v21) {
            goto LABEL_57;
          }
          long long v22 = __dst;
          if (__dst != __len)
          {
            uint64_t v58 = 0;
            switch(*(_DWORD *)(*(void *)(v19 + 48) + 16))
            {
              case 3:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},void>(buf, v19);
                goto LABEL_52;
              case 4:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},void>(buf, v19);
                goto LABEL_52;
              case 5:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},void>(buf, v19);
                goto LABEL_52;
              case 6:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},void>(buf);
                goto LABEL_52;
              case 7:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},void>(buf, v19);
                goto LABEL_52;
              case 8:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},void>(buf, a1, v19);
                goto LABEL_52;
              case 0xA:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},void>(buf);
                goto LABEL_52;
              case 0xD:
                std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},void>(buf, v19);
LABEL_52:
                if (v22 && v58)
                {
                  for (unint64_t j = 0; j != v22; ++j)
                    std::function<void ()(void *)>::operator()((uint64_t)buf, *(void *)(a2 + v18) + *(int *)(*(void *)(v19 + 48) + 20) * (uint64_t)(int)j);
                }
                break;
              default:
                break;
            }
            (*(void (**)(void, void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), *(void *)(a2 + v18));
            *(void *)(a2 + v18) = 0;
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](buf);
            uint64_t v21 = *(void *)(a2 + v18);
LABEL_57:
            if (v21) {
              uint64_t v32 = 1;
            }
            else {
              uint64_t v32 = v53 == 0;
            }
            if (!v32)
            {
              uint64_t v33 = (*(uint64_t (**)(void, size_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v53 * *(int *)(*(void *)(v19 + 48) + 20), 0);
              *(void *)(a2 + v18) = v33;
              if (!v33) {
                return re::snapshot::Decoder::error((const char **)a1, "allocation failure, array with size: %zu %d byte elements");
              }
              uint64_t v34 = 0;
              do
              {
                uint64_t v35 = *(void *)(a2 + v18);
                uint64_t v36 = *(int **)(v19 + 48);
                int v37 = v19;
                uint64_t v38 = v18;
                uint64_t v39 = a2;
                unint64_t v40 = v35 + v36[5] * (uint64_t)(int)v34;
                unint64_t v41 = *(re **)(a1 + 48);
                re::introspectionCallConstructor(*(_anonymous_namespace_ **)(a1 + 40), (uint64_t)v36, v40);
                unint64_t v42 = (re::IntrospectionBase *)v40;
                a2 = v39;
                __int16 v18 = v38;
                uint64_t v19 = v37;
                re::introspectionInitElement(v41, v43, (re::Allocator *)v36, v42);
                ++v34;
              }
              while (v53 != v34);
            }
          }
          *(void *)long long buf = v53;
          if (*(_DWORD *)(v8 + 40) == 1)
          {
            uint64_t v44 = *(void *)(v8 + 48);
            if (v44) {
              memcpy((void *)(a2 + *(int *)(v8 + 64)), buf, *(int *)(v44 + 20));
            }
          }
          id v45 = *(void *)(a2 + v18);
          unint64_t v3 = v52;
          if (!re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &__len))
          {
            long long v49 = 0;
            do
            {
              if (v49 >= v53)
              {
                uint64_t v50 = *(unsigned __int8 **)(a1 + 16);
                if ((unint64_t)v50 >= *(void *)(a1 + 24))
                {
                  BOOL v51 = 0;
                }
                else
                {
                  *(void *)(a1 + 16) = v50 + 1;
                  BOOL v51 = *v50;
                }
                re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v51);
              }
              else
              {
                re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1);
                v45 += *(int *)(*(void *)(v19 + 48) + 20);
              }
              ++v49;
            }
            while (!re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &__len));
          }
LABEL_68:
          unint64_t v46 = *(unsigned __int8 **)(a1 + 16);
          if ((unint64_t)v46 >= *(void *)(a1 + 24) || (id v47 = *v46, v47 == 3))
          {
            uint64_t Integer = 0x7FFFFFFF;
          }
          else if ((v47 - 7) > 0x28)
          {
            uint64_t Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
          }
          else
          {
            *(void *)(a1 + 16) = v46 + 1;
            uint64_t Integer = v47 - 8;
          }
          *(_DWORD *)(a1 + 32) = Integer;
          goto LABEL_72;
        case 2:
          uint64_t v23 = *re::foundationSerializationLogObjects((re *)i);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = *(void *)(v3 + 48);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v24;
            _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Snapshot reader: polymorphic inline types currently unhandled (type = %s)", buf, 0xCu);
          }
          goto LABEL_68;
        default:
          goto LABEL_68;
      }
    }
    return re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, v56);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(_anonymous_namespace_ **a1, uint64_t a2, void *a3)
{
  v18[1] = *MEMORY[0x263EF8340];
  v18[0] = 0;
  uint64_t result = re::snapshot::DecoderOPACK::beginDictionary((re::snapshot::DecoderOPACK *)a1, v18);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 88))(a3, a2);
    if (v18[0] != -1) {
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*a3 + 72))(a3, a2);
    }
    unint64_t v8 = (re::Allocator *)a3[6];
    size_t v9 = *((int *)v8 + 6);
    size_t v10 = *((_DWORD *)v8 + 5) + (int)v9 - 1;
    size_t __space = v10;
    MEMORY[0x270FA5388](v7);
    uint64_t v12 = (char *)&__ptr - v11;
    bzero((char *)&__ptr - v11, v10);
    __ptr = v12;
    __ptr = std::align(v9, v10, &__ptr, &__space);
    uint64_t result = re::snapshot::DecoderOPACK::endDictionary((re::snapshot::DecoderOPACK *)a1, v18);
    if ((result & 1) == 0)
    {
      do
      {
        int v13 = a1[6];
        unint64_t v14 = (re::IntrospectionBase *)__ptr;
        re::introspectionCallConstructor(a1[5], (uint64_t)v8, (uint64_t)__ptr);
        re::introspectionInitElement(v13, v15, v8, v14);
        re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1);
        (*(void (**)(void *, _anonymous_namespace_ *, _anonymous_namespace_ *, uint64_t, void *))(*a3 + 96))(a3, a1[6], a1[5], a2, __ptr);
        re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1);
        (*(void (**)(void *, void *))(*a3 + 112))(a3, __ptr);
        uint64_t result = re::snapshot::DecoderOPACK::endDictionary((re::snapshot::DecoderOPACK *)a1, v18);
      }
      while (!result);
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  unint64_t v14 = 0;
  if (re::snapshot::DecoderOPACK::beginString(a1, &v14))
  {
    size_t v6 = v14;
    re::DynamicString::resize(&v10, v14, 0);
    if (v11) {
      uint64_t v7 = v12;
    }
    else {
      uint64_t v7 = (char *)&v11 + 1;
    }
    re::snapshot::Decoder::readRaw(a1, v7, v6);
  }
  if (v11) {
    unint64_t v8 = v12;
  }
  else {
    unint64_t v8 = (char *)&v11 + 1;
  }
  (*(void (**)(void, void, uint64_t, uint64_t, char *))(a3 + 80))(*((void *)a1 + 6), *((void *)a1 + 5), a3, a2, v8);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (v11) {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

uint64_t *re::snapshot::DecoderOPACK::operator>>(uint64_t *result, unsigned char *a2)
{
  int v2 = (unsigned __int8 *)result[2];
  if ((unint64_t)v2 >= result[3])
  {
    int v3 = 0;
  }
  else
  {
    result[2] = (uint64_t)(v2 + 1);
    int v3 = *v2;
    if (v3 == 1)
    {
      *a2 = 1;
      return result;
    }
    if (v3 == 2)
    {
      *a2 = 0;
      return result;
    }
  }
  return re::snapshot::Decoder::error((const char **)result, "expected BOOL, found tag %x", v3);
}

uint64_t *re::snapshot::DecoderOPACK::operator>>(uint64_t *result, float *a2)
{
  int v3 = (unsigned __int8 *)result[2];
  unint64_t v2 = result[3];
  if ((unint64_t)v3 >= v2) {
    return re::snapshot::Decoder::error((const char **)result, "expected float, found tag %x");
  }
  size_t v5 = (float *)(v3 + 1);
  result[2] = (uint64_t)(v3 + 1);
  int v6 = *v3;
  if (v6 != 54)
  {
    if (v6 == 53)
    {
      if (v2 - (unint64_t)v5 <= 3) {
        return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining");
      }
      *a2 = *v5;
      result[2] += 4;
      return result;
    }
    return re::snapshot::Decoder::error((const char **)result, "expected float, found tag %x");
  }
  unint64_t v7 = v2 - (void)v5;
  if (v7 <= 7)
  {
    uint64_t result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v7);
    float v9 = 0.0;
  }
  else
  {
    double v8 = *(double *)(v3 + 1);
    result[2] = (uint64_t)(v3 + 9);
    float v9 = v8;
  }
  *a2 = v9;
  return result;
}

uint64_t *re::snapshot::DecoderOPACK::operator>>(uint64_t *result, double *a2)
{
  int v3 = (unsigned __int8 *)result[2];
  unint64_t v2 = result[3];
  if ((unint64_t)v3 >= v2) {
    return re::snapshot::Decoder::error((const char **)result, "expected double, found tag %x");
  }
  size_t v5 = (double *)(v3 + 1);
  result[2] = (uint64_t)(v3 + 1);
  int v6 = *v3;
  if (v6 != 53)
  {
    if (v6 == 54)
    {
      if (v2 - (unint64_t)v5 <= 7) {
        return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining");
      }
      *a2 = *v5;
      result[2] += 8;
      return result;
    }
    return re::snapshot::Decoder::error((const char **)result, "expected double, found tag %x");
  }
  unint64_t v7 = v2 - (void)v5;
  if (v7 <= 3)
  {
    uint64_t result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v7);
    double v9 = 0.0;
  }
  else
  {
    float v8 = *(float *)(v3 + 1);
    result[2] = (uint64_t)(v3 + 5);
    double v9 = v8;
  }
  *a2 = v9;
  return result;
}

uint64_t re::snapshot::DecoderOPACK::beginData(re::snapshot::DecoderOPACK *this, unint64_t *a2, int a3)
{
  uint64_t v4 = (unsigned __int8 *)*((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  if ((unint64_t)v4 >= v3)
  {
    if (a3)
    {
LABEL_7:
      uint64_t v9 = 0;
      *((void *)this + 2) = v4 - 1;
    }
    else
    {
LABEL_28:
      re::snapshot::Decoder::error((const char **)this, "expected data, found tag %x");
      return 0;
    }
  }
  else
  {
    int v6 = v4 + 1;
    *((void *)this + 2) = v4 + 1;
    int v7 = *v4;
    switch(*v4)
    {
      case 0x91u:
        if ((unsigned __int8 *)v3 != v6)
        {
          unint64_t v8 = v4[1];
          int v6 = v4 + 2;
          goto LABEL_14;
        }
        re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
        goto LABEL_23;
      case 0x92u:
        unint64_t v10 = v3 - (void)v6;
        if (v10 > 1)
        {
          unint64_t v8 = *(unsigned __int16 *)(v4 + 1);
          int v6 = v4 + 3;
          goto LABEL_14;
        }
        uint64_t v11 = 2;
        goto LABEL_22;
      case 0x93u:
        unint64_t v10 = v3 - (void)v6;
        if (v10 > 3)
        {
          unint64_t v8 = *(unsigned int *)(v4 + 1);
          int v6 = v4 + 5;
          goto LABEL_14;
        }
        uint64_t v11 = 4;
        goto LABEL_22;
      case 0x94u:
        unint64_t v10 = v3 - (void)v6;
        if (v10 > 7)
        {
          unint64_t v8 = *(void *)(v4 + 1);
          int v6 = v4 + 9;
LABEL_14:
          *((void *)this + 2) = v6;
          goto LABEL_15;
        }
        uint64_t v11 = 8;
LABEL_22:
        re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", v11, v10);
LABEL_23:
        *a2 = 0;
        goto LABEL_24;
      default:
        if ((v7 + 111) <= 0xDEu)
        {
          ++v4;
          if (!a3) {
            goto LABEL_28;
          }
          goto LABEL_7;
        }
        unint64_t v8 = (v7 - 112);
LABEL_15:
        *a2 = v8;
        if (v3 - (unint64_t)v6 < v8)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun in data: size = %zu, only %zu bytes left");
          return 0;
        }
LABEL_24:
        uint64_t v9 = 1;
        break;
    }
  }
  return v9;
}

uint64_t re::snapshot::DecoderOPACK::beginArray(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if ((unint64_t)v3 >= v4) {
    goto LABEL_9;
  }
  int v6 = v3 + 1;
  *((void *)this + 2) = v3 + 1;
  int v7 = *v3;
  if ((v7 + 48) <= 0xEu)
  {
    unint64_t v8 = (v7 - 208);
    *a2 = v8;
    if (v4 - (unint64_t)v6 < v8) {
      goto LABEL_7;
    }
    return 1;
  }
  if (v7 != 223)
  {
LABEL_9:
    re::snapshot::Decoder::error((const char **)this, "expected array, found tag %x");
    return 0;
  }
  unint64_t Integer = re::snapshot::DecoderOPACK::readInteger(this, -1);
  *a2 = Integer;
  if (*((void *)this + 3) - *((void *)this + 2) >= Integer + 1) {
    return 1;
  }
LABEL_7:
  re::snapshot::Decoder::error((const char **)this, "overrun in beginArray: %zu items, only %zu bytes remaining");
  return 0;
}

BOOL re::snapshot::DecoderOPACK::endArray(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unint64_t v2 = (unsigned char *)*((void *)this + 2);
  unint64_t v3 = *a2;
  if ((unint64_t)v2 >= *((void *)this + 3))
  {
    if (v3) {
      re::snapshot::Decoder::error((const char **)this, "reached end of buffer but expected more array entries");
    }
  }
  else
  {
    if (v3 <= 0xE)
    {
      *a2 = v3 - 1;
      return v3 == 0;
    }
    if (*v2 != 3) {
      return 0;
    }
    *((void *)this + 2) = v2 + 1;
  }
  return 1;
}

uint64_t re::snapshot::DecoderOPACK::beginDictionary(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unint64_t v2 = (unsigned __int8 *)*((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  if ((unint64_t)v2 >= v3) {
    goto LABEL_8;
  }
  unint64_t v4 = v2 + 1;
  *((void *)this + 2) = v2 + 1;
  int v5 = *v2;
  if ((v5 + 32) > 0xEu)
  {
    if (v5 == 239)
    {
      *a2 = -1;
      return 1;
    }
LABEL_8:
    re::snapshot::Decoder::error((const char **)this, "expected dictionary, found tag %x");
    return 0;
  }
  unint64_t v6 = (v5 - 224);
  *a2 = v6;
  if (v3 - (unint64_t)v4 >= v6) {
    return 1;
  }
  re::snapshot::Decoder::error((const char **)this, "overrun in beginDictionary: %zu items, only %zu bytes remaining");
  return 0;
}

BOOL re::snapshot::DecoderOPACK::endDictionary(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unint64_t v2 = (unsigned char *)*((void *)this + 2);
  unint64_t v3 = *a2;
  if ((unint64_t)v2 >= *((void *)this + 3))
  {
    if (v3) {
      re::snapshot::Decoder::error((const char **)this, "reached end of buffer but expected more dictionary entries");
    }
  }
  else
  {
    if (v3 <= 0xE)
    {
      *a2 = v3 - 1;
      return v3 == 0;
    }
    if (*v2 != 3) {
      return 0;
    }
    *((void *)this + 2) = v2 + 1;
  }
  return 1;
}

uint64_t re::snapshot::DecoderOPACK::beginString(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
  unint64_t v2 = *((void *)this + 3);
  if ((unint64_t)v3 >= v2)
  {
LABEL_6:
    re::snapshot::Decoder::error((const char **)this, "expected string, found tag %x");
    return 0;
  }
  else
  {
    int v5 = v3 + 1;
    *((void *)this + 2) = v3 + 1;
    int v6 = *v3;
    switch(*v3)
    {
      case 'a':
        if ((unint64_t)v5 < v2)
        {
          int v5 = v3 + 2;
          *((void *)this + 2) = v3 + 2;
          unint64_t v7 = v3[1];
          goto LABEL_16;
        }
        re::snapshot::Decoder::error((const char **)this, "overrun in beginString: expected 1 byte, but 0 bytes remaining");
        return 0;
      case 'b':
        unint64_t v8 = v2 - (void)v5;
        if (v8 > 1)
        {
          unint64_t v7 = *(unsigned __int16 *)(v3 + 1);
          int v5 = v3 + 3;
          goto LABEL_13;
        }
        uint64_t v10 = 2;
        goto LABEL_22;
      case 'c':
        unint64_t v8 = v2 - (void)v5;
        if (v8 > 3)
        {
          unint64_t v7 = *(unsigned int *)(v3 + 1);
          int v5 = v3 + 5;
          goto LABEL_13;
        }
        uint64_t v10 = 4;
        goto LABEL_22;
      case 'd':
        unint64_t v8 = v2 - (void)v5;
        if (v8 <= 7)
        {
          uint64_t v10 = 8;
LABEL_22:
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", v10, v8);
          *a2 = 0;
        }
        else
        {
          unint64_t v7 = *(void *)(v3 + 1);
          int v5 = v3 + 9;
LABEL_13:
          *((void *)this + 2) = v5;
LABEL_16:
          *a2 = v7;
          if (v2 - (unint64_t)v5 < v7)
          {
            re::snapshot::Decoder::error((const char **)this, "overrun in beginString: size is %zu, but only %zu bytes remaining");
            return 0;
          }
        }
        uint64_t result = 1;
        break;
      default:
        if ((v6 - 97) <= 0xFFFFFFDE) {
          goto LABEL_6;
        }
        unint64_t v7 = (v6 - 64);
        goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::snapshot::DecoderOPACK::beginObject(re::snapshot::DecoderOPACK *this, const char **a2)
{
  unint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if ((unint64_t)v3 >= v4)
  {
    int v6 = 0;
    goto LABEL_13;
  }
  int v5 = v3 + 1;
  *((void *)this + 2) = v3 + 1;
  int v6 = *v3;
  if (v6 != 239)
  {
LABEL_13:
    re::snapshot::Decoder::error((const char **)this, "expected object, found tag %x", v6);
    return 0;
  }
  if ((unint64_t)v5 >= v4 || (int v8 = *v5, v8 == 3))
  {
    int Integer = 0x7FFFFFFF;
  }
  else if ((v8 - 7) > 0x28)
  {
    int Integer = re::snapshot::DecoderOPACK::readInteger(this, 0x7FFFFFFFLL);
  }
  else
  {
    *((void *)this + 2) = v3 + 2;
    int Integer = v8 - 8;
  }
  *((_DWORD *)this + 8) = Integer;
  if (a2)
  {
    uint64_t v10 = (const char *)*((void *)this + 7);
    *((void *)this + 7) = *a2;
    *a2 = v10;
  }
  return 1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},void>(void *a1, uint64_t a2, uint64_t a3)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26E720710;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = v5;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v5, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v5);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},void>(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26E720758;
  v4[1] = a2;
  v4[3] = v4;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v4);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},void>(void *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26E7207A0;
  v3[3] = v3;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v3, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v3);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},void>(void *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26E7207E8;
  v3[3] = v3;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v3, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v3);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},void>(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26E720830;
  v4[1] = a2;
  v4[3] = v4;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v4);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},void>(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26E720878;
  v4[1] = a2;
  v4[3] = v4;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v4);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},void>(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26E7208C0;
  v4[1] = a2;
  v4[3] = v4;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v4);
  return a1;
}

void *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},void>(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26E720908;
  v4[1] = a2;
  v4[3] = v4;
  std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v4);
  return a1;
}

uint64_t *re::snapshot::DecoderOPACK::endObject(uint64_t *this, const char *a2)
{
  unint64_t v3 = this;
  unint64_t v4 = (unsigned __int8 *)this[2];
  for (unint64_t i = this[3]; (unint64_t)v4 < i; unint64_t i = v3[3])
  {
    v3[2] = (uint64_t)(v4 + 1);
    int v6 = *v4;
    if (v6 == 3) {
      break;
    }
    this = re::snapshot::DecoderOPACK::skip(v3, v6);
    unint64_t v4 = (unsigned __int8 *)v3[2];
  }
  v3[7] = (uint64_t)a2;
  return this;
}

BOOL re::snapshot::Reader<re::snapshot::DecoderOPACK>::apply(uint64_t a1, float *a2, uint64_t a3)
{
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, a2, a3);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    re::snapshot::Decoder::error((const char **)a1, "failed to consume input: %zu vs %zu", v4 - *(void *)a1, *(void *)(a1 + 8));
  }
  int v5 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36)) {
    re::snapshot::Decoder::logInput((re::snapshot::Decoder *)a1);
  }
  return v5 == 0;
}

uint64_t re::snapshot::Encoder::Encoder(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v5 = *(void *)(a2 + 72);
  int v6 = *(_DWORD *)(a2 + 64);
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  unint64_t v7 = (re::DynamicString *)(a1 + 32);
  re::DynamicString::setCapacity(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  re::DynamicString::operator=(v7, (re::DynamicString *)(a2 + 32));
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

unsigned int *re::snapshot::EncoderOPACK::writeInteger(unsigned int *this, uint64_t a2)
{
  if (a2 != (int)a2)
  {
    uint64_t v3 = this[2];
    if (v3 + 9 > (unint64_t)this[3])
    {
      uint64_t v5 = this;
      uint64_t v6 = a2;
      this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 9);
      if (!this) {
        return this;
      }
      this = v5;
      a2 = v6;
      uint64_t v3 = v5[2];
    }
    uint64_t v4 = *(void *)this;
    this[2] = v3 + 1;
    *(unsigned char *)(v4 + v3) = 51;
    *(void *)(*(void *)this + this[2]) = a2;
    this[2] += 8;
    return this;
  }
  return re::snapshot::EncoderOPACK::writeInteger(this, a2);
}

unsigned int *re::snapshot::EncoderOPACK::beginData(unsigned int *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = this;
  if (a3 > 0x20)
  {
    if (a3 > 0xFF)
    {
      unint64_t v12 = this[3];
      if (a3 >> 16)
      {
        uint64_t v16 = this[2];
        if (HIDWORD(a3))
        {
          if (v16 + 9 > v12)
          {
            this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v16 + 9);
            if (!this) {
              return this;
            }
            uint64_t v16 = v4[2];
          }
          uint64_t v20 = *(void *)v4;
          v4[2] = v16 + 1;
          *(unsigned char *)(v20 + v16) = -108;
          *(void *)(*(void *)v4 + v4[2]) = a2;
          int v11 = v4[2] + 8;
LABEL_19:
          v4[2] = v11;
          return this;
        }
        unint64_t v17 = v16 + 5;
        if (v16 + 5 <= v12)
        {
LABEL_15:
          if (HIDWORD(a2))
          {
            re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) count %zu exceeds uint32_t capacity", "!overflow", "beginData", 163, a2);
            this = (unsigned int *)_os_crash();
            __break(1u);
            return this;
          }
          uint64_t v18 = *(void *)v4;
          uint64_t v19 = v4[2];
          v4[2] = v19 + 1;
          *(unsigned char *)(v18 + v19) = -109;
          *(_DWORD *)(*(void *)v4 + v4[2]) = a2;
          int v11 = v4[2] + 4;
          goto LABEL_19;
        }
LABEL_30:
        this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)v4, v17);
        if (!this) {
          return this;
        }
        goto LABEL_15;
      }
      unint64_t v13 = this[2] + 3;
      if (v13 <= v12)
      {
LABEL_11:
        if (a2 < 0x10000)
        {
          uint64_t v14 = *(void *)v4;
          uint64_t v15 = v4[2];
          v4[2] = v15 + 1;
          *(unsigned char *)(v14 + v15) = -110;
          *(_WORD *)(*(void *)v4 + v4[2]) = a2;
          int v11 = v4[2] + 2;
          goto LABEL_19;
        }
        re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) count %zu exceeds uint16_t capacity", "!overflow", "beginData", 155, a2);
        _os_crash();
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v8 = this[2] + 2;
      if (v8 > this[3])
      {
        this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v8);
        if (!this) {
          return this;
        }
      }
      if (a2 < 0x100)
      {
        uint64_t v9 = *(void *)v4;
        uint64_t v10 = v4[2];
        v4[2] = v10 + 1;
        *(unsigned char *)(v9 + v10) = -111;
        *(unsigned char *)(*(void *)v4 + v4[2]) = a2;
        int v11 = v4[2] + 1;
        goto LABEL_19;
      }
      re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) count %zu exceeds uint8_t capacity", "!overflow", "beginData", 147, a2);
      _os_crash();
      __break(1u);
    }
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)v4, v13);
    if (!this) {
      return this;
    }
    goto LABEL_11;
  }
  unint64_t v5 = a2 + 112;
  if (a2 + 112 >= 0x100)
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) tag %zu exceeds uint8_t capacity", "!overflow", "beginData", 141, v5);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v6 = this[2];
    if (v6 < this[3])
    {
LABEL_4:
      uint64_t v7 = *(void *)v4;
      v4[2] = v6 + 1;
      *(unsigned char *)(v7 + v6) = v5;
      return this;
    }
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)v4, v6 + 1);
  if (this)
  {
    LODWORD(v6) = v4[2];
    goto LABEL_4;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::writeInteger(unsigned int *this, int a2)
{
  char v2 = a2;
  uint64_t v3 = this;
  if ((a2 + 1) > 0x28)
  {
    uint64_t v6 = this[2];
    if (v6 + 2 > (unint64_t)this[3])
    {
      this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + 2);
      if (!this) {
        return this;
      }
      uint64_t v6 = v3[2];
    }
    uint64_t v7 = *(void *)v3;
    v3[2] = v6 + 1;
    *(unsigned char *)(v7 + v6) = 48;
    *(unsigned char *)(*(void *)v3 + v3[2]++) = v2;
    return this;
  }
  uint64_t v4 = this[2];
  if (v4 < this[3])
  {
LABEL_3:
    uint64_t v5 = *(void *)v3;
    v3[2] = v4 + 1;
    *(unsigned char *)(v5 + v4) = v2 + 8;
    return this;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 1);
  if (this)
  {
    LODWORD(v4) = v3[2];
    goto LABEL_3;
  }
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  __int16 v6;

  if (a2 != (char)a2)
  {
    uint64_t v3 = this[2];
    if (v3 + 3 > (unint64_t)this[3])
    {
      uint64_t v6 = a2;
      uint64_t v5 = this;
      this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 3);
      if (!this) {
        return this;
      }
      this = v5;
      uint64_t v3 = v5[2];
      LOWORD(a2) = v6;
    }
    uint64_t v4 = *(void *)this;
    this[2] = v3 + 1;
    *(unsigned char *)(v4 + v3) = 49;
    *(_WORD *)(*(void *)this + this[2]) = a2;
    this[2] += 2;
    return this;
  }
  a2 = (char)a2;
  return re::snapshot::EncoderOPACK::writeInteger(this, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;

  if (a2 != (__int16)a2)
  {
    uint64_t v3 = this[2];
    if (v3 + 5 > (unint64_t)this[3])
    {
      uint64_t v6 = a2;
      uint64_t v5 = this;
      this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 5);
      if (!this) {
        return this;
      }
      this = v5;
      uint64_t v3 = v5[2];
      a2 = v6;
    }
    uint64_t v4 = *(void *)this;
    this[2] = v3 + 1;
    *(unsigned char *)(v4 + v3) = 50;
    *(_DWORD *)(*(void *)this + this[2]) = a2;
    this[2] += 4;
    return this;
  }
  return re::snapshot::EncoderOPACK::writeInteger(this, (__int16)a2);
}

uint64_t *re::snapshot::DecoderOPACK::skip(uint64_t *result, int a2)
{
  char v2 = result;
  if (a2 <= 96)
  {
    switch(a2)
    {
      case '0':
        uint64_t v3 = result[2] + 1;
        goto LABEL_48;
      case '1':
        uint64_t v3 = result[2] + 2;
        goto LABEL_48;
      case '2':
      case '5':
        uint64_t v3 = result[2] + 4;
        goto LABEL_48;
      case '3':
      case '6':
        uint64_t v3 = result[2] + 8;
        goto LABEL_48;
      case '4':
        goto LABEL_35;
      default:
        if ((a2 - 1) < 2 || a2 == 4) {
          return result;
        }
LABEL_35:
        if ((a2 - 7) < 0x29) {
          return result;
        }
        uint64_t v25 = (a2 - 64);
        if (v25 <= 0x20 || (uint64_t v25 = (a2 - 112), v25 <= 0x20))
        {
          uint64_t v3 = result[2] + v25;
          goto LABEL_48;
        }
        if ((a2 + 48) > 0xEu)
        {
          if ((a2 + 32) > 0xEu)
          {
            uint64_t result = re::snapshot::Decoder::error((const char **)result, "unexpected tag while skipping: %x", a2);
          }
          else if (a2 >= 0xE1)
          {
            int v30 = a2 - 223;
            do
            {
              uint64_t v31 = (unsigned __int8 *)v2[2];
              if ((unint64_t)v31 >= v2[3])
              {
                uint64_t v32 = 0;
              }
              else
              {
                v2[2] = (uint64_t)(v31 + 1);
                uint64_t v32 = *v31;
              }
              re::snapshot::DecoderOPACK::skip(v2, v32);
              uint64_t v33 = (unsigned __int8 *)v2[2];
              if ((unint64_t)v33 >= v2[3])
              {
                uint64_t v34 = 0;
              }
              else
              {
                v2[2] = (uint64_t)(v33 + 1);
                uint64_t v34 = *v33;
              }
              uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::skip(v2, v34);
              --v30;
            }
            while (v30 > 1);
          }
        }
        else if (a2 >= 0xD1)
        {
          int v27 = a2 - 207;
          do
          {
            BOOL v28 = (unsigned __int8 *)v2[2];
            if ((unint64_t)v28 >= v2[3])
            {
              uint64_t v29 = 0;
            }
            else
            {
              v2[2] = (uint64_t)(v28 + 1);
              uint64_t v29 = *v28;
            }
            uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::skip(v2, v29);
            --v27;
          }
          while (v27 > 1);
        }
        break;
    }
  }
  else if (a2 <= 144)
  {
    switch(a2)
    {
      case 'a':
LABEL_7:
        uint64_t v4 = (unsigned __int8 *)result[2];
        uint64_t v5 = (unsigned __int8 *)result[3];
        if (v5 != v4)
        {
          unsigned int v8 = *v4;
          uint64_t v6 = v4 + 1;
          unint64_t v7 = v8;
          goto LABEL_30;
        }
        uint64_t result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
        goto LABEL_46;
      case 'b':
LABEL_26:
        uint64_t v16 = (unsigned __int8 *)result[2];
        uint64_t v5 = (unsigned __int8 *)result[3];
        uint64_t v17 = v5 - v16;
        if ((unint64_t)(v5 - v16) > 1)
        {
          unsigned int v18 = *(unsigned __int16 *)v16;
          uint64_t v6 = v16 + 2;
          unint64_t v7 = v18;
          goto LABEL_30;
        }
        uint64_t v26 = 2;
        goto LABEL_44;
      case 'c':
LABEL_28:
        uint64_t v19 = (unsigned __int8 *)result[2];
        uint64_t v5 = (unsigned __int8 *)result[3];
        uint64_t v17 = v5 - v19;
        if ((unint64_t)(v5 - v19) <= 3)
        {
          uint64_t v26 = 4;
          goto LABEL_44;
        }
        unsigned int v20 = *(_DWORD *)v19;
        uint64_t v6 = v19 + 4;
        unint64_t v7 = v20;
LABEL_30:
        result[2] = (uint64_t)v6;
        unint64_t v21 = v5 - v6;
        if (v21 >= v7) {
          goto LABEL_47;
        }
        goto LABEL_34;
      case 'd':
LABEL_32:
        long long v22 = (void *)result[2];
        uint64_t v23 = result[3];
        uint64_t v17 = v23 - (void)v22;
        if ((unint64_t)(v23 - (void)v22) <= 7)
        {
          uint64_t v26 = 8;
LABEL_44:
          uint64_t result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", v26, v17);
LABEL_46:
          unint64_t v7 = 0;
          uint64_t v6 = (unsigned __int8 *)v2[2];
        }
        else
        {
          unint64_t v24 = *v22;
          uint64_t v6 = (unsigned __int8 *)(v22 + 1);
          unint64_t v7 = v24;
          result[2] = (uint64_t)v6;
          unint64_t v21 = v23 - (void)v6;
          if (v24 > v21)
          {
LABEL_34:
            uint64_t result = re::snapshot::Decoder::error((const char **)result, "invalid size when skipping string or data: %zu, only %zu remaining", v7, v21);
            uint64_t v6 = (unsigned __int8 *)v2[2];
            unint64_t v7 = v2[3] - (void)v6;
          }
        }
LABEL_47:
        uint64_t v3 = (uint64_t)&v6[v7];
        break;
      default:
        goto LABEL_35;
    }
LABEL_48:
    v2[2] = v3;
  }
  else
  {
    switch(a2)
    {
      case 145:
        goto LABEL_7;
      case 146:
        goto LABEL_26;
      case 147:
        goto LABEL_28;
      case 148:
        goto LABEL_32;
      default:
        if (a2 != 223 && a2 != 239) {
          goto LABEL_35;
        }
        uint64_t v10 = (unsigned __int8 *)result[2];
        unint64_t v9 = result[3];
        if ((unint64_t)v10 >= v9)
        {
          int v11 = 0;
        }
        else
        {
          result[2] = (uint64_t)(v10 + 1);
          int v11 = *v10++;
        }
        if ((unint64_t)v10 < v9 && v11 != 3)
        {
          do
          {
            uint64_t result = (uint64_t *)re::snapshot::DecoderOPACK::skip(v2, v11);
            unint64_t v12 = (unsigned __int8 *)v2[2];
            unint64_t v13 = v2[3];
            if ((unint64_t)v12 >= v13) {
              break;
            }
            uint64_t v14 = v12 + 1;
            v2[2] = (uint64_t)(v12 + 1);
            int v11 = *v12;
          }
          while ((unint64_t)v14 < v13 && v11 != 3);
        }
        break;
    }
  }
  return result;
}

uint64_t re::snapshot::DecoderOPACK::readInteger(re::snapshot::DecoderOPACK *this, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  if ((unint64_t)v3 >= v4)
  {
LABEL_18:
    re::snapshot::Decoder::error((const char **)this, "expected integer, found tag %x");
  }
  else
  {
    uint64_t v5 = v3 + 1;
    *((void *)this + 2) = v3 + 1;
    int v6 = *v3;
    switch(*v3)
    {
      case '0':
        if ((unint64_t)v5 < v4)
        {
          *((void *)this + 2) = v3 + 2;
          a2 = (char)v3[1];
        }
        break;
      case '1':
        unint64_t v7 = v4 - (void)v5;
        if (v7 <= 1)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 2uLL, v7);
        }
        else
        {
          LOWORD(a2) = *(_WORD *)(v3 + 1);
          *((void *)this + 2) = v3 + 3;
        }
        a2 = (__int16)a2;
        break;
      case '2':
        unint64_t v8 = v4 - (void)v5;
        if (v8 <= 3)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v8);
        }
        else
        {
          LODWORD(a2) = *(_DWORD *)(v3 + 1);
          *((void *)this + 2) = v3 + 5;
        }
        a2 = (int)a2;
        break;
      case '3':
        if (v4 - (unint64_t)v5 <= 7)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining");
        }
        else
        {
          a2 = *(void *)(v3 + 1);
          *((void *)this + 2) = v3 + 9;
        }
        break;
      default:
        if ((v6 - 7) > 0x28) {
          goto LABEL_18;
        }
        a2 = (char)(v6 - 8);
        break;
    }
  }
  return a2;
}

void std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = &unk_26E720440;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E720440;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = (unsigned int *)a1[1];
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, *a2, a1[2]);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, v4, a1[3]);
  return 1;
}

void std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = &unk_26E720488;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E720488;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = (unsigned int *)a1[1];
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(v5, *a2, a1[2]);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(v5, v4, a1[3]);
  return 1;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_26E7204D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7204D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 16) + 48) + 80))();
}

void *std::__function::__value_func<void ()(void *)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720518;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720518;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 64))(*(void *)(*(void *)(a1 + 8) + 48), *a2, 0);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E720560;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E720560;
}

double std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::operator()(uint64_t a1, re::DynamicString **a2)
{
  return re::DynamicString::deinit(*a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E7205A8;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7205A8;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::operator()(uint64_t a1, re::StringID **a2)
{
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E7205F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7205F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720638;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720680;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720680;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E7206C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7206C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E720710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E720710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 16) + 48) + 80))();
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720758;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 64))(*(void *)(*(void *)(a1 + 8) + 48), *a2, 0);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E7207A0;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7207A0;
}

double std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::operator()(uint64_t a1, re::DynamicString **a2)
{
  return re::DynamicString::deinit(*a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E7207E8;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7207E8;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::operator()(uint64_t a1, re::StringID **a2)
{
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720830;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720830;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720878;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E7208C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7208C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E720908;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720908;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 48) + 56))(*(void *)(*(void *)(a1 + 8) + 48), *a2);
}

uint64_t anonymous namespace'::BinaryDeserializer::deserializeIntoBuffer(_anonymous_namespace_ *a1, const re::IntrospectionBase *a2, uint64_t a3, const re::IntrospectionBase **a4, re::DynamicString **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  *(void *)&v25[4] = 0x7FFFFFFFLL;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_DWORD *)BOOL v28 = 0;
  *(void *)&v28[4] = 0x7FFFFFFFLL;
  memset(v29, 0, sizeof(v29));
  int v30 = 0;
  uint64_t v31 = 0x7FFFFFFFLL;
  uint64_t v32 = a1;
  uint64_t v33 = 0;
  uint64_t v34 = a3;
  uint64_t v35 = a8;
  long long v37 = 0uLL;
  *((void *)&v36 + 1) = 0;
  re::DynamicString::setCapacity(&v36, 0);
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  char v41 = 0;
  v40[0] = &unk_26E6DEB60;
  v40[1] = "ScratchAutoFreeAllocator";
  uint64_t v42 = a7;
  memset(v43, 0, sizeof(v43));
  int v44 = 0;
  uint64_t v45 = 0x7FFFFFFFLL;
  re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::init((uint64_t)v43, a7, 3);
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  uint64_t v46 = a7;
  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v46, 0);
  ++v49;
  *(void *)&long long v36 = a7;
  re::DynamicString::setCapacity(&v36, 0);
  uint64_t v14 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 24))(a1);
  {
    char v51 = 0;
    if ((*(uint64_t (**)(_anonymous_namespace_ *, char *, uint64_t))(*(void *)a1 + 16))(a1, &v51, 1) == 1)
    {
      if (v51 == 69)
      {
        uint64_t v21 = 1;
        goto LABEL_9;
      }
    }
    else
    {
    }
  }
  else
  {
  }
  uint64_t v21 = 0;
LABEL_9:
  if (v46)
  {
    if (v50) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void, void, void, _DWORD, void, void))(*(void *)v46 + 40))(v46, v50, v15, v16, v17, v18, v19, v20, v23, *((void *)&v23 + 1), v24, *((void *)&v24 + 1), *(void *)v25, *(_DWORD *)&v25[8], v26, *((void *)&v26 + 1), v27, *((void *)&v27 + 1), *(void *)v28,
    }
        *(_DWORD *)&v28[8],
        *(void *)&v29[0],
        *((void *)&v29[0] + 1));
    uint64_t v50 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v46 = 0;
    ++v49;
  }
  re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)v40);
  if ((void)v36)
  {
    if (BYTE8(v36)) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    long long v36 = 0u;
    long long v37 = 0u;
  }
  return v21;
}

_anonymous_namespace_ *anonymous namespace'::BinaryDeserializer::addPointer(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = result;
  unint64_t v10 = *((void *)result + 39);
  unint64_t v11 = *((void *)result + 40);
  unint64_t v12 = v11 + 1;
  if (v11 >= v10 && v10 < v12)
  {
    if (*((void *)result + 38))
    {
      uint64_t v15 = 2 * v10;
      BOOL v16 = v10 == 0;
      unint64_t v17 = 8;
      if (!v16) {
        unint64_t v17 = v15;
      }
      if (v17 <= v12) {
        unint64_t v18 = v12;
      }
      else {
        unint64_t v18 = v17;
      }
      __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)result + 38, v18);
    }
    else
    {
      __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)v9 + 38, v12);
      ++*((_DWORD *)v9 + 82);
    }
  }
  uint64_t v14 = (void *)(*((void *)v9 + 42) + 32 * *((void *)v9 + 40));
  void *v14 = a2;
  v14[1] = a3;
  void v14[2] = a5;
  v14[3] = a4;
  ++*((void *)v9 + 40);
  ++*((_DWORD *)v9 + 82);
  return result;
}

uint64_t anonymous namespace'::BinaryDeserializer::read(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3, re::DynamicString **a4)
{
  v115[3] = *MEMORY[0x263EF8340];
  int v7 = *((_DWORD *)a2 + 4);
  if (v7 != *((_DWORD *)a3 + 4))
  {
    re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
    if (buf[8]) {
      uint64_t v15 = *(const char **)&buf[16];
    }
    else {
      uint64_t v15 = (const char *)&buf[9];
    }
    re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v114);
    if (v115[0]) {
      BOOL v16 = (const char *)v115[1];
    }
    else {
      BOOL v16 = (char *)v115 + 1;
    }
    if (v114 && (v115[0] & 1) != 0) {
      (*((void (**)(void))*v114 + 5))();
    }
LABEL_15:
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    return 0;
  }
  unint64_t v8 = a4;
  switch(v7)
  {
    case 0:
      if (a2 != (const re::IntrospectionBase *)a3)
      {
        unint64_t v9 = *re::foundationSerializationLogObjects(this);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          return 0;
        }
        uint64_t v10 = *((void *)a2 + 6);
        unint64_t v11 = a3[6];
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v11;
        unint64_t v12 = "Binary Deserialization; Basic types don't match '%s' and '%s'.";
        unint64_t v13 = v9;
        uint32_t v14 = 22;
        goto LABEL_77;
      }
      uint64_t v62 = *((int *)a2 + 5);
      if ((*(uint64_t (**)(void, re::DynamicString **, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), a4, v62) == v62)return 1; {
      return 0;
      }
    case 1:
      uint64_t v17 = *((void *)a2 + 6);
      uint64_t v18 = (uint64_t)a3[6];
      v114 = a4;
      int v19 = *(_DWORD *)(v17 + 16);
      if (v19 != *(_DWORD *)(v18 + 16))
      {
        return 0;
      }
      if (v19 != 8) {
        goto LABEL_33;
      }
      uint64_t v20 = *(unsigned int *)(v17 + 56);
      if (!v20) {
        goto LABEL_24;
      }
      uint64_t v21 = *(void **)(v17 + 64);
      while (1)
      {
        long long v22 = (_DWORD *)*v21;
        if (*(_DWORD *)*v21 == 2) {
          break;
        }
        ++v21;
        if (!--v20)
        {
LABEL_24:
          long long v22 = 0;
          break;
        }
      }
      uint64_t v23 = *(unsigned int *)(v18 + 56);
      if (v23)
      {
        long long v24 = *(void **)(v18 + 64);
        uint64_t v25 = v24;
        uint64_t v26 = *(unsigned int *)(v18 + 56);
        do
        {
          long long v27 = (_DWORD *)*v25;
          if (*(_DWORD *)*v25 == 2) {
            goto LABEL_30;
          }
          ++v25;
          --v26;
        }
        while (v26);
        long long v27 = 0;
LABEL_30:
        while (1)
        {
          BOOL v28 = (_DWORD *)*v24;
          if (*(_DWORD *)*v24 == 3) {
            break;
          }
          ++v24;
          if (!--v23) {
            goto LABEL_32;
          }
        }
        if ((v22 != 0) != (v27 != 0)) {
          goto LABEL_130;
        }
        if (v22)
        {
          if (*a4)
          {
            re::introspectionReleasePointer(*a4, *((void *)this + 26), *((void *)this + 21), v18);
            char *v8 = 0;
          }
        }
      }
      else
      {
LABEL_32:
        if (v22)
        {
LABEL_130:
          return 0;
        }
      }
LABEL_33:
      uint64_t v29 = *((void *)this + 18);
      buf[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v29 + 16))(v29, buf, 1) == 1)
      {
        int v31 = buf[0];
        {
          return 0;
        }
        *(void *)long long buf = v18;
        *(void *)&buf[8] = v17;
        *(void *)&uint8_t buf[16] = this;
        *(void *)&uint8_t buf[24] = &v114;
        if (v31 == 73) {
        if (v31 != 82)
        }
        {
          if (v31 != 78)
          {
            return 0;
          }
          goto LABEL_127;
        }
        LODWORD(v110) = 0;
        if ((*(uint64_t (**)(void, unint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v110, 4) != 4)
        {
          return 0;
        }
        if (*((void *)this + 40) <= (unint64_t)v110)
        {
          return 0;
        }
        uint64_t v87 = (uint64_t)v86;
        uint64_t v88 = *(re::DynamicString **)v86;
        if (*((void *)v86 + 3)) {
          BOOL v89 = v88 == 0;
        }
        else {
          BOOL v89 = 0;
        }
        if (!v89 && *(_DWORD *)(v18 + 16) == 8 && (uint64_t v90 = *(void (**)(void))(v18 + 88)) != 0)
        {
          if (!v88)
          {
            v108 = *re::foundationSerializationLogObjects(v86);
            if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v111 = 0;
              _os_log_impl(&dword_233120000, v108, OS_LOG_TYPE_DEFAULT, "Binary Deserialization; reference is null because source was skipped.",
                v111,
                2u);
            }
            unint64_t v8 = v114;
LABEL_127:
            if (*v8)
            {
              re::introspectionReleasePointer(*v8, *((void *)this + 26), *((void *)this + 21), v18);
              char *v8 = 0;
            }
            return 1;
          }
          if (*((void *)v86 + 1) != v18)
          {
            return 0;
          }
          v90(*(void *)v86);
          v109 = v114;
          if (*v114)
          {
            re::introspectionReleasePointer(*v114, *((void *)this + 26), *((void *)this + 21), v18);
            NSObject *v109 = 0;
            v109 = v114;
          }
          NSObject *v109 = v88;
        }
        else
        {
          uint64_t v106 = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
          if (((*(uint64_t (**)(void, void))(**((void **)this + 18) + 56))(*((void *)this + 18), *(void *)(v87 + 24)) & 1) == 0)
          {
            return 0;
          }
          if (((*(uint64_t (**)(void, uint64_t))(**((void **)this + 18) + 56))(*((void *)this + 18), v106) & 1) == 0)
          {
            return 0;
          }
          if ((v107 & 1) == 0)
          {
            return 0;
          }
        }
        return 1;
      }
      return 0;
    case 2:
      unint64_t v34 = *((int *)a2 + 16);
      if (v34 == *((_DWORD *)a3 + 16))
      {
        uint64_t v35 = (const re::IntrospectionBase *)*((void *)a2 + 6);
        long long v36 = a3[6];
      }
      uint64_t v52 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        unint64_t v12 = "Binary Deserialization; C-style array length changed.";
        unint64_t v13 = v52;
        uint32_t v14 = 2;
LABEL_77:
        _os_log_debug_impl(&dword_233120000, v13, OS_LOG_TYPE_DEBUG, v12, buf, v14);
      }
      return 0;
    case 3:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      *(_DWORD *)long long buf = 1;
      if ((*(uint64_t (**)(void, uint8_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), buf, 4) != 4)
      {
        return 0;
      }
      unint64_t v38 = *(unsigned int *)buf;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v38)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      (*((void (**)(const re::IntrospectionBase **, void, void, re::DynamicString **, void))*a3 + 9))(a3, *((void *)this + 26), *((void *)this + 21), v8, *(unsigned int *)buf);
      if (*(_DWORD *)buf) {
        goto LABEL_98;
      }
      return 1;
    case 4:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      *(_DWORD *)long long buf = 1;
      if ((*(uint64_t (**)(void, uint8_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), buf, 4) != 4)
      {
        return 0;
      }
      unint64_t v39 = *(unsigned int *)buf;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v39)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      if (((*((uint64_t (**)(const re::IntrospectionBase **, re::DynamicString **))*a3 + 11))(a3, v8) & 1) == 0) {
        (*((void (**)(const re::IntrospectionBase **, re::DynamicString **, void, void, void))*a3 + 8))(a3, v8, *((void *)this + 26), *((void *)this + 21), *(unsigned int *)buf);
      }
      uint64_t v63 = (*((uint64_t (**)(const re::IntrospectionBase **, re::DynamicString **))*a3 + 10))(a3, v8);
      if (v63 != *(unsigned int *)buf)
      {
        return 0;
      }
      if (!*(_DWORD *)buf) {
        return 1;
      }
LABEL_98:
      uint64_t v64 = (char *)(*((uint64_t (**)(const re::IntrospectionBase **, re::DynamicString **, void))*a3 + 12))(a3, v8, 0);
    case 5:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      *(_DWORD *)long long buf = 1;
      if ((*(uint64_t (**)(void, uint8_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), buf, 4) != 4)
      {
        return 0;
      }
      unint64_t v40 = *(unsigned int *)buf;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v40)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      if ((*((unsigned int (**)(const re::IntrospectionBase **, re::DynamicString **))*a3 + 10))(a3, v8))
      {
        return 0;
      }
      if (!*(_DWORD *)buf) {
        return 1;
      }
      int v73 = 0;
      uint64_t v65 = 1;
      while (1)
      {
        v74 = (void *)(*((uint64_t (**)(const re::IntrospectionBase **, void, void, re::DynamicString **))*a3
                       + 9))(a3, *((void *)this + 26), *((void *)this + 21), v8);
        if (++v73 >= *(_DWORD *)buf) {
          return v65;
        }
      }
      return 0;
    case 6:
    case 7:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      LODWORD(v110) = 1;
      if ((*(uint64_t (**)(void, unint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v110, 4) != 4)
      {
        return 0;
      }
      unint64_t v41 = v110;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v41)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      (*((void (**)(const re::IntrospectionBase **, re::DynamicString **, void, void))*a3 + 8))(a3, v8, *((void *)this + 26), v110);
      uint64_t v66 = (*(uint64_t (**)(void, void, void))(**((void **)this + 27) + 32))(*((void *)this + 27), *((int *)a3[6] + 5), 0);
      v114 = (re::DynamicString **)&unk_26E720950;
      v115[0] = this;
      v115[2] = &v114;
      v113[0] = &buf[8];
      *(void *)long long buf = v66;
      *(void *)&buf[8] = &unk_26E720950;
      *(void *)&uint8_t buf[16] = this;
      std::__function::__value_func<void ()(unsigned char *)>::~__value_func[abi:nn180100](&v114);
      if (!v110) {
        goto LABEL_107;
      }
      int v67 = 0;
      while (2)
      {
        uint64_t v68 = (re *)*((void *)this + 26);
        uint64_t v69 = a3[6];
        uint64_t v70 = *(re::IntrospectionBase **)buf;
        re::introspectionCallConstructor(*((_anonymous_namespace_ **)this + 21), (uint64_t)v69, *(uint64_t *)buf);
        re::introspectionInitElement(v68, v71, v69, v70);
        {
          size_t v72 = (void *)(*((uint64_t (**)(const re::IntrospectionBase **, void, void, re::DynamicString **, void))*a3
                         + 12))(a3, *((void *)this + 26), *((void *)this + 21), v8, *(void *)buf);
          (*((void (**)(const re::IntrospectionBase **, void))*a3 + 14))(a3, *(void *)buf);
          {
            if (++v67 >= v110)
            {
LABEL_107:
              uint64_t v65 = 1;
              goto LABEL_136;
            }
            continue;
          }
        }
        else
        {
          (*((void (**)(const re::IntrospectionBase **, void))*a3 + 14))(a3, *(void *)buf);
        }
        break;
      }
      uint64_t v65 = 0;
LABEL_136:
      std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
      return v65;
    case 8:
    case 9:
      uint64_t v42 = *((unsigned int *)a2 + 5);
      if ((v42 - 9) <= 0xFFFFFFF7)
      {
        return 0;
      }
      unint64_t v110 = 0;
      if ((*(uint64_t (**)(void, unint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v110, v42) != v42)
      {
        return 0;
      }
      unint64_t v53 = v110;
      if (a2 == (const re::IntrospectionBase *)a3) {
        goto LABEL_195;
      }
      uint64_t v54 = (void *)((char *)this + 48);
      if (!*((void *)this + 6)) {
        goto LABEL_86;
      }
      unint64_t v55 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
      uint64_t v56 = *(unsigned int *)(*((void *)this + 7) + 4 * ((v55 ^ (v55 >> 31)) % *((unsigned int *)this + 18)));
      if (v56 == 0x7FFFFFFF) {
        goto LABEL_86;
      }
      uint64_t v75 = *((void *)this + 8);
      if (*(const re::IntrospectionBase **)(v75 + 72 * v56 + 16) == a2) {
        goto LABEL_140;
      }
      while (1)
      {
        LODWORD(v56) = *(_DWORD *)(v75 + 72 * v56 + 8) & 0x7FFFFFFF;
        if (v56 == 0x7FFFFFFF) {
          break;
        }
        if (*(const re::IntrospectionBase **)(v75 + 72 * v56 + 16) == a2)
        {
LABEL_140:
          uint64_t v76 = v75 + 72 * v56;
          goto LABEL_193;
        }
      }
LABEL_86:
      uint64_t v57 = (const char *)*((void *)a2 + 6);
      uint64_t v58 = (re *)strcmp(v57, (const char *)a3[6]);
      if (v58)
      {
        uint64_t v59 = *re::foundationSerializationLogObjects(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          uint64_t v60 = *((void *)a2 + 6);
          uint64_t v61 = a3[6];
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v60;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v61;
          _os_log_impl(&dword_233120000, v59, OS_LOG_TYPE_INFO, "Binary Deserialization; enum name changed '%s' and '%s'.",
            buf,
            0x16u);
        }
        return 0;
      }
      LODWORD(v113[0]) = 0;
      memset(buf, 0, sizeof(buf));
      *(void *)((char *)v113 + 4) = 0x7FFFFFFFLL;
      uint64_t v77 = (unsigned int *)*((void *)a2 + 8);
      unint64_t v78 = *v77;
      if (v78)
      {
        for (unint64_t i = 0; i < v78; ++i)
        {
          uint64_t v80 = *(void *)(*((void *)v77 + 1) + 8 * i);
          if (*(_DWORD *)v80 == 1)
          {
            re::getIntrospectionEnumValueWithVersioning((unsigned int *)a3[8], *(char **)(v80 + 16), (uint64_t)&v114);
            if ((_BYTE)v114)
            {
              re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<unsigned long long &>((uint64_t)buf, (uint64_t *)(v80 + 8), v115);
              uint64_t v77 = (unsigned int *)*((void *)a2 + 8);
            }
            unint64_t v78 = *v77;
          }
        }
        uint64_t v57 = (const char *)*((void *)a2 + 6);
      }
      if (!strcmp(v57, "REAudioPlaybackState"))
      {
      }
      unint64_t v81 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
      unint64_t v82 = v81 ^ (v81 >> 31);
      if (*v54)
      {
        unint64_t v83 = v82 % *((unsigned int *)this + 18);
        uint64_t v84 = *(unsigned int *)(*((void *)this + 7) + 4 * v83);
        if (v84 != 0x7FFFFFFF)
        {
          uint64_t v85 = *((void *)this + 8);
          if (*(const re::IntrospectionBase **)(v85 + 72 * v84 + 16) == a2) {
            goto LABEL_182;
          }
          while (1)
          {
            LODWORD(v84) = *(_DWORD *)(v85 + 72 * v84 + 8) & 0x7FFFFFFF;
            if (v84 == 0x7FFFFFFF) {
              break;
            }
            if (*(const re::IntrospectionBase **)(v85 + 72 * v84 + 16) == a2) {
              goto LABEL_182;
            }
          }
        }
      }
      else
      {
        LODWORD(v83) = 0;
      }
      uint64_t v91 = *((unsigned int *)this + 21);
      if (v91 == 0x7FFFFFFF)
      {
        uint64_t v91 = *((unsigned int *)this + 20);
        int v92 = v91;
        if (v91 == *((_DWORD *)this + 18))
        {
          LODWORD(v83) = v82 % *((unsigned int *)this + 18);
          int v92 = *((_DWORD *)this + 20);
        }
        *((_DWORD *)this + 20) = v92 + 1;
        uint64_t v93 = *((void *)this + 8);
        int v94 = *(_DWORD *)(v93 + 72 * v91 + 8);
      }
      else
      {
        uint64_t v93 = *((void *)this + 8);
        int v94 = *(_DWORD *)(v93 + 72 * v91 + 8);
        *((_DWORD *)this + 21) = v94 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v93 + 72 * v91 + 8) = v94 | 0x80000000;
      *(_DWORD *)(*((void *)this + 8) + 72 * v91 + 8) = *(_DWORD *)(*((void *)this + 8) + 72 * v91 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 7) + 4 * v83);
      *(void *)(*((void *)this + 8) + 72 * v91) = v82;
      *(void *)(*((void *)this + 8) + 72 * v91 + 16) = a2;
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(*((void *)this + 8) + 72 * v91 + 24, (uint64_t)buf);
      *(_DWORD *)(*((void *)this + 7) + 4 * v83) = v91;
      ++*((_DWORD *)this + 19);
      ++*((_DWORD *)this + 22);
LABEL_182:
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)buf);
      unsigned int v95 = 0x7FFFFFFF;
      if (*v54)
      {
        unsigned int v96 = *(_DWORD *)(*((void *)this + 7) + 4 * (v82 % *((unsigned int *)this + 18)));
        if (v96 != 0x7FFFFFFF)
        {
          uint64_t v97 = *((void *)this + 8);
          if (*(const re::IntrospectionBase **)(v97 + 72 * v96 + 16) == a2)
          {
            unsigned int v95 = *(_DWORD *)(*((void *)this + 7) + 4 * (v82 % *((unsigned int *)this + 18)));
          }
          else
          {
            while (1)
            {
              unsigned int v95 = *(_DWORD *)(v97
                              + 72
                              * *(unsigned int *)(*((void *)this + 7) + 4 * (v82 % *((unsigned int *)this + 18)))
                              + 8) & 0x7FFFFFFF;
              if (v95 == 0x7FFFFFFF) {
                break;
              }
              if (*(const re::IntrospectionBase **)(v97 + 72 * v95 + 16) == a2) {
                goto LABEL_192;
              }
            }
            unsigned int v95 = 0x7FFFFFFF;
          }
        }
      }
LABEL_192:
      uint64_t v76 = *((void *)this + 8) + 72 * v95;
LABEL_193:
      int v98 = (unint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v76 + 24, v53);
      if (v98)
      {
        unint64_t v53 = *v98;
LABEL_195:
        *(void *)long long buf = v53;
        memcpy(v8, buf, *((int *)a3 + 5));
        return 1;
      }
      v99 = *re::foundationSerializationLogObjects(0);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
      {
        v100 = (unsigned int *)*((void *)a2 + 8);
        v101 = v99;
        uint64_t v102 = *v100;
        if (v102)
        {
          v103 = (void *)*((void *)v100 + 1);
          v104 = &str_28_8;
          while (1)
          {
            v105 = (_DWORD *)*v103;
            if (*(_DWORD *)*v103 == 1 && *((void *)v105 + 1) == v53) {
              break;
            }
            ++v103;
            if (!--v102) {
              goto LABEL_210;
            }
          }
          v104 = (void *)*((void *)v105 + 2);
        }
        else
        {
          v104 = &str_28_8;
        }
LABEL_210:
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v104;
        _os_log_impl(&dword_233120000, v101, OS_LOG_TYPE_INFO, "Binary Deserialization; unknown enum value '%s'.",
          buf,
          0xCu);
      }
      return 0;
    case 10:
      if (*((unsigned char *)this + 184)) {
        uint64_t v43 = (const char *)*((void *)this + 24);
      }
      else {
        uint64_t v43 = (char *)this + 185;
      }
      re::StringID::StringID((re::StringID *)buf, v43);
      re::StringID::operator=((uint64_t *)v8, (uint64_t *)buf);
      re::StringID::destroyString((re::StringID *)buf);
      return 1;
    case 11:
      uint64_t v45 = a3[10];
      if (v45) {
        goto LABEL_65;
      }
      if (!re::IntrospectionRegistry::contains((re::IntrospectionRegistry *)a3, v44)) {
        return 1;
      }
      uint64_t v45 = a3[10];
      if (!v45)
      {
        return 0;
      }
LABEL_65:
      if (*((unsigned char *)this + 184)) {
        uint64_t v46 = (char *)*((void *)this + 24);
      }
      else {
        uint64_t v46 = (char *)this + 185;
      }
      if (((uint64_t (*)(void, void, const re::IntrospectionBase **, re::DynamicString **, char *))v45)(*((void *)this + 26), *((void *)this + 21), a3, v8, v46))return 1; {
      return 0;
      }
    case 13:
      buf[0] = 0;
      if ((*(uint64_t (**)(void, uint8_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), buf, 1) != 1)
      {
        return 0;
      }
      (*((void (**)(const re::IntrospectionBase **, re::DynamicString **, void))*a3 + 8))(a3, v8, buf[0]);
      if (!buf[0]) {
        return 1;
      }
      uint64_t v48 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      int v49 = a3[6];
      uint64_t v50 = (void *)(*((uint64_t (**)(const re::IntrospectionBase **, re::DynamicString **))*a3 + 9))(a3, v8);
    default:
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
      if (buf[8]) {
        uint64_t v47 = *(const char **)&buf[16];
      }
      else {
        uint64_t v47 = (const char *)&buf[9];
      }
      goto LABEL_15;
  }
}

void anonymous namespace'::BinaryDeserializer::logError(_anonymous_namespace_::BinaryDeserializer *this, const char *__format, ...)
{
  va_start(va, __format);
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = (re *)vsnprintf(__str, 0x100uLL, __format, va);
  uint64_t v4 = *re::foundationSerializationLogObjects(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v23 = __str;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Binary Deserialization; %s", buf, 0xCu);
  }
  unint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
  unint64_t v6 = *((void *)this + 19);
  if (v5 > v6)
  {
    unint64_t v7 = v5;
    unint64_t v8 = *(uint64_t (**)(void))(**((void **)this + 18) + 40);
    if (v5 - v6 > 0x40)
    {
      unint64_t v11 = (const char *)v8();
      strcpy(&__str[v12], " ... ");
      unint64_t v13 = (const char *)(*(uint64_t (**)(void, uint8_t *, unint64_t, uint64_t))(**((void **)this + 18)
                                                                                                  + 40))(*((void *)this + 18), buf, v7 - 32, 32);
      if (!&v11[(void)v13]) {
        return;
      }
    }
    else
    {
      unint64_t v9 = (const char *)v8();
      if (!v9) {
        return;
      }
    }
    uint32_t v14 = *re::foundationSerializationLogObjects(v10);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *((void *)this + 19);
      *(_DWORD *)BOOL v16 = 134218498;
      uint64_t v17 = v15;
      __int16 v18 = 2048;
      unint64_t v19 = v7 - 1;
      __int16 v20 = 2080;
      uint64_t v21 = __str;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "  Input bytes %zu thru %zu: %s", v16, 0x20u);
    }
    *((void *)this + 19) = v7;
  }
}

uint64_t anonymous namespace'::BinaryDeserializer::readStructure(_anonymous_namespace_ **this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3, re::IntrospectionBase *a4)
{
  StructureVersion = (const re::IntrospectionStructure *)re::introspectionFindStructureVersion(a2, a2);
  unint64_t v10 = re::introspectionFindStructureVersion(a3, v9);
  if (StructureVersion != (const re::IntrospectionStructure *)v10)
  {
    unint64_t v12 = v10;
    unint64_t v13 = re::introspectionFindForVersion((uint64_t **)a3, StructureVersion);
    if (!v13)
    {
      return 0;
    }
    uint32_t v14 = v13;
    uint64_t v15 = (char *)re::introspectionAllocPointer(this[26], this[21], v13);
    if (v14 == a3)
    {
      {
        uint64_t v16 = (uint64_t)this[26];
        uint64_t v17 = (uint64_t)this[21];
        __int16 v18 = (re::DynamicString *)v15;
        unint64_t v19 = a3;
        goto LABEL_15;
      }
    }
    {
      uint64_t v16 = (uint64_t)this[26];
      uint64_t v17 = (uint64_t)this[21];
      __int16 v18 = (re::DynamicString *)v15;
      unint64_t v19 = v14;
LABEL_15:
      re::introspectionReleasePointer(v18, v16, v17, (uint64_t)v19);
      return 0;
    }
    if (re::introspectionRunComplexVersion(this[26], this[21], (uint64_t)v14, (unint64_t)StructureVersion, (re::DynamicString *)v15, (uint64_t)a3, v12, a4))return 1; {
    return 0;
    }
  }
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<unsigned long long &>(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)result)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(result + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    __n128 result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(result, v9, v8, a2, a3);
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(result + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v11 + 32 * v10 + 24) = *a3;
LABEL_9:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t anonymous namespace'::BinaryDeserializer::addMissingEnumValue(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  unint64_t v15 = a3;
  uint64_t result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a2, (uint64_t *)&v15);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)re::getIntrospectionEnumValueWithVersioning(*(unsigned int **)(a1 + 64), a4, (uint64_t)v13);
    if (v13[0])
    {
      unint64_t v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
      unint64_t v9 = v8 ^ (v8 >> 31);
      if (*(void *)a2)
      {
        unint64_t v10 = v9 % *(unsigned int *)(a2 + 24);
        uint64_t v11 = *(unsigned int *)(*(void *)(a2 + 8) + 4 * v10);
        if (v11 != 0x7FFFFFFF)
        {
          uint64_t v12 = *(void *)(a2 + 16);
          if (*(void *)(v12 + 32 * v11 + 16) == v15) {
            return result;
          }
          while (1)
          {
            uint64_t v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
            if (v11 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v12 + 32 * v11 + 16) == v15) {
              return result;
            }
          }
        }
      }
      else
      {
        LODWORD(v10) = 0;
      }
      uint64_t result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a2, v10, v9, &v15, &v14);
      ++*(_DWORD *)(a2 + 40);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    if (*(_DWORD *)(a1 + 28))
    {
      uint64_t v6 = *(unsigned int *)(a1 + 24);
      if (v6) {
        memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v6);
      }
      uint64_t v7 = *(unsigned int *)(a1 + 32);
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 32 * v7;
        do
        {
          uint64_t v10 = *(void *)(a1 + 16) + v8;
          int v11 = *(_DWORD *)(v10 + 8);
          if (v11 < 0) {
            *(_DWORD *)(v10 + 8) = v11 & 0x7FFFFFFF;
          }
          v8 += 32;
        }
        while (v9 != v8);
      }
      *(_DWORD *)(a1 + 28) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      int v12 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 40) = v12;
    }
    unsigned int v13 = *(_DWORD *)(a2 + 28);
    if (*(_DWORD *)(a1 + 24) < v13) {
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v13);
    }
    unint64_t v14 = *(unsigned int *)(a2 + 32);
    if (v14)
    {
      uint64_t v15 = 0;
      for (unint64_t i = 0; i < v14; ++i)
      {
        uint64_t v17 = *(void *)(a2 + 16) + v15;
        if ((*(_DWORD *)(v17 + 8) & 0x80000000) != 0)
        {
          re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(void *)v17 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v17, (void *)(v17 + 16), (void *)(v17 + 24));
          unint64_t v14 = *(unsigned int *)(a2 + 32);
        }
        v15 += 32;
      }
    }
  }
  return a1;
}

void re::HashTable<re::IntrospectionEnum const*,anonymous namespace'::BinaryDeserializer::EnumVersionTable,re::Hash<re::IntrospectionEnum const*>,re::EqualTo<re::IntrospectionEnum const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        unsigned int v13 = (uint64_t *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 3);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 72 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 72 * v17 + 16) = *(v13 - 1);
            uint64_t v21 = *(void *)(a1 + 16) + 72 * v17;
            *(_OWORD *)(v21 + 24) = 0u;
            v21 += 24;
            *(_DWORD *)(v21 + 32) = 0;
            *(_OWORD *)(v21 + 16) = 0u;
            *(void *)(v21 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v21, v13);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 9;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

uint64_t *re::HashTable<re::IntrospectionEnum const*,anonymous namespace'::BinaryDeserializer::EnumVersionTable,re::Hash<re::IntrospectionEnum const*>,re::EqualTo<re::IntrospectionEnum const*>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t anonymous namespace'::BinaryDeserializer::readDynamicString(_anonymous_namespace_::BinaryDeserializer *this, re::DynamicString *a2)
{
  *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
  LODWORD(v8) = 0;
  if ((*(uint64_t (**)(void, unint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v8, 4) == 4)
  {
    unint64_t v4 = v8;
    if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) >= v4)
    {
      re::DynamicString::resize(a2, v8, -51);
      uint64_t v6 = v8;
      if (!v8) {
        return 1;
      }
      int v7 = (*((void *)a2 + 1) & 1) != 0
         ? (re::DynamicString *)*((void *)a2 + 2)
         : (re::DynamicString *)((char *)a2 + 9);
      if ((*(uint64_t (**)(void, re::DynamicString *, void))(**((void **)this + 18) + 16))(*((void *)this + 18), v7, v8) == v6)return 1; {
    }
      }
    else
    {
      (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
    }
  }
  else
  {
  }
  return 0;
}

uint64_t anonymous namespace'::BinaryDeserializer::readPointerPolymorphic(_anonymous_namespace_::BinaryDeserializer *this, re::DynamicString **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  uint64_t v30 = a4;
  int v31 = a2;
  uint64_t v28 = a6;
  uint64_t v29 = a5;
  int v27 = a7;
  uint64_t v26 = a8;
  char v25 = a9;
  if (a4 && a5)
  {
    int v11 = a2;
    if (*a2)
    {
      re::introspectionReleasePointer(*a2, *((void *)this + 26), *((void *)this + 21), a8);
      const char *v11 = 0;
    }
    uint64_t v12 = *((void *)this + 18);
    LOBYTE(v24[0]) = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v12 + 16))(v12, v24, 1) == 1)
    {
      int v13 = LOBYTE(v24[0]);
      v24[0] = (uint64_t)this;
      v24[1] = (uint64_t)&v30;
      v24[2] = (uint64_t)&v29;
      v24[3] = a3;
      v24[4] = (uint64_t)&v25;
      v24[5] = (uint64_t)&v28;
      v24[6] = (uint64_t)&v27;
      v24[7] = (uint64_t)&v26;
      v24[8] = (uint64_t)&v31;
      switch(v13)
      {
        case 'I':
        case 'R':
          unsigned int v23 = 0;
          if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v23, 4) == 4)
          {
            if (*((void *)this + 40) <= (unint64_t)v23)
            {
            }
            else
            {
              unint64_t v16 = v15;
              uint64_t v17 = (re::DynamicString *)*v15;
              if ((*v15 || !v15[3]) && (int v18 = *(void (**)(uint64_t))(a3 + 88)) != 0)
              {
                if (!v17)
                {
                  uint64_t v21 = *re::foundationSerializationLogObjects((re *)v15);
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Binary Deserialization; reference is null because source was skipped.",
                      buf,
                      2u);
                  }
                  int v11 = v31;
                  if (!*v31) {
                    return 1;
                  }
                  re::introspectionReleasePointer(*v31, *((void *)this + 26), *((void *)this + 21), a3);
                  goto LABEL_9;
                }
                if (v15[1] == a3)
                {
                  v18(*v15);
                  unsigned __int8 *v31 = v17;
                  return 1;
                }
              }
              else
              {
                uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
                if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 18) + 56))(*((void *)this + 18), v16[3]))
                {
                  if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 18) + 56))(*((void *)this + 18), v19))
                  {
                    if (v20) {
                      return 1;
                    }
                  }
                  else
                  {
                  }
                }
                else
                {
                }
              }
            }
          }
          else
          {
          }
          break;
        case 'N':
LABEL_9:
          const char *v11 = 0;
          return 1;
        default:
          break;
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

BOOL anonymous namespace'::BinaryDeserializer::isCharInfo(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2)
{
  uint64_t v2 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    int v7 = this;
    uint64_t v2 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v6 = v4;
    this = v7;
    if (v6)
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v5);
      uint64_t v2 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      this = v7;
    }
  }
  return v2[72] == (void)this;
}

uint64_t anonymous namespace'::BinaryDeserializer::readPointer(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(anonymous namespace'::BinaryDeserializer::PointerMapEntry *,unsigned int)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v7 = *(const re::IntrospectionBase **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v6 + 144) + 24))(*(void *)(v6 + 144));
  {
    uint64_t v12 = ***(re::IntrospectionBase ****)(a1 + 24);
    int v13 = v12;
    if (v12)
    {
      if (a2) {
        goto LABEL_22;
      }
    }
    else
    {
      int v13 = re::introspectionAllocPointer(*(re **)(v6 + 208), *(_anonymous_namespace_ **)(v6 + 168), (re::Allocator *)v8);
      if (a2) {
        goto LABEL_22;
      }
    }
    if (*(_DWORD *)(v8 + 16) == 8)
    {
      if (*(void *)(v8 + 88)) {
        uint64_t v14 = (uint64_t)v13;
      }
      else {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
LABEL_22:
    {
      re::getPrettyTypeName(*(re **)(a1 + 8), (const re::IntrospectionBase *)&v24);
      if (BYTE8(v24)) {
        signed int v22 = (const char *)v25;
      }
      else {
        signed int v22 = (char *)&v24 + 9;
      }
      if (void)v24 && (BYTE8(v24)) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      if (*(void *)(v6 + 320) <= (unint64_t)a3)
      {
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unsigned int v23 = (void *)(*(void *)(v6 + 336) + 32 * a3);
      *unsigned int v23 = 0;
      void v23[2] = 0;
      if (!v12) {
        re::introspectionReleasePointer(v13, *(void *)(v6 + 208), *(void *)(v6 + 168), v8);
      }
      return 0;
    }
    goto LABEL_23;
  }
  if (!a2) {
  LODWORD(v24) = 0;
  }
  if ((*(uint64_t (**)(void, long long *, uint64_t))(**(void **)(v6 + 144) + 16))(*(void *)(v6 + 144), &v24, 4) != 4)
  {
    return 0;
  }
  unint64_t v11 = v24;
  if ((*(uint64_t (**)(void))(**(void **)(v6 + 144) + 32))(*(void *)(v6 + 144)) < v11)
  {
    (*(void (**)(void))(**(void **)(v6 + 144) + 32))(*(void *)(v6 + 144));
    return 0;
  }
  uint64_t v15 = (v24 + 1) << 31 >> 31;
  if (v15 != v24 + 1 || v15 < 0)
  {
    return 0;
  }
  int v13 = (re::IntrospectionBase *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(v6 + 208) + 32))(*(void *)(v6 + 208), v15 & 0x1FFFFFFFFLL, 0);
  uint64_t v16 = v24;
  if ((*(uint64_t (**)(void, re::IntrospectionBase *, void))(**(void **)(v6 + 144) + 16))(*(void *)(v6 + 144), v13, v24) != v16)
  {
    (*(void (**)(void, re::IntrospectionBase *))(**(void **)(v6 + 208) + 40))(*(void *)(v6 + 208), v13);
    return 0;
  }
  *((unsigned char *)v13 + v24) = 0;
LABEL_23:
  uint64_t v17 = *(re::DynamicString ****)(a1 + 24);
  int v18 = *v17;
  uint64_t v19 = **v17;
  if (v19 != v13 && v19 != 0)
  {
    re::introspectionReleasePointer(v19, *(void *)(v6 + 208), *(void *)(v6 + 168), *(void *)a1);
    *int v18 = 0;
    int v18 = **(re::DynamicString ****)(a1 + 24);
  }
  *int v18 = v13;
  return 1;
}

uint64_t re::DynamicArray<anonymous namespace'::BinaryDeserializer::PointerMapEntry>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t anonymous namespace'::BinaryDeserializer::readPointerPolymorphic(void *,re::IntrospectionStructure const&,re::IntrospectionPolymorphicTable const*,re::IntrospectionPolymorphicTable const*,void *,int,re::IntrospectionBase const*,BOOL)::{lambda(anonymous namespace'::BinaryDeserializer::PointerMapEntry *,unsigned long)#1}::operator()(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  long long v5 = a1;
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*a1 + 144) + 24))(*(void *)(*a1 + 144));
  v70[0] = 0;
  if ((*(uint64_t (**)(void, void *, uint64_t))(**(void **)(v6 + 144) + 16))(*(void *)(v6 + 144), v70, 8) != 8)
  {
    return 0;
  }
  uint64_t v8 = *(unsigned int **)v5[1];
  unint64_t v9 = v70[0];
  uint64_t v10 = *v8;
  if (!v10)
  {
LABEL_6:
    return 0;
  }
  uint64_t v11 = *((void *)v8 + 1);
  while (*(void *)(v11 + 24) != v70[0])
  {
    v11 += 40;
    if (!--v10) {
      goto LABEL_6;
    }
  }
  int v13 = *(unsigned int **)v5[2];
  uint64_t v14 = v11;
  if (v8 == v13) {
    goto LABEL_58;
  }
  uint64_t v15 = *(void *)(v6 + 96);
  uint64_t v69 = (uint64_t *)(v6 + 96);
  unint64_t v16 = (unint64_t)v8 ^ ((unint64_t)v8 >> 30);
  if (v15)
  {
    unint64_t v17 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v16) ^ ((0xBF58476D1CE4E5B9 * v16) >> 27));
    uint64_t v18 = *(unsigned int *)(*(void *)(v6 + 104) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(v6 + 120)));
    if (v18 != 0x7FFFFFFF)
    {
      uint64_t v38 = *(void *)(v6 + 112);
      if (*(unsigned int **)(v38 + 72 * v18 + 16) == v8)
      {
LABEL_34:
        uint64_t v39 = v38 + 72 * v18 + 24;
        goto LABEL_52;
      }
      while (1)
      {
        LODWORD(v18) = *(_DWORD *)(v38 + 72 * v18 + 8) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF) {
          break;
        }
        if (*(unsigned int **)(v38 + 72 * v18 + 16) == v8) {
          goto LABEL_34;
        }
      }
    }
  }
  int v67 = v5;
  uint64_t v68 = v7;
  LODWORD(v81) = 0;
  *(_OWORD *)long long buf = 0u;
  long long v80 = 0u;
  *(void *)((char *)&v81 + 4) = 0x7FFFFFFFLL;
  unint64_t v19 = *v8;
  if (!v19) {
    goto LABEL_25;
  }
  int v20 = 0;
  for (unint64_t i = 0; i < v19; ++i)
  {
    uint64_t v22 = *((void *)v8 + 1);
    IntrospectionPolymorphicTypeByName = re::getIntrospectionPolymorphicTypeByName(v13, *(char **)(v22 + 40 * i));
    if (!IntrospectionPolymorphicTypeByName) {
      continue;
    }
    uint64_t v24 = v22 + 40 * i;
    unint64_t v27 = *(void *)(v24 + 24);
    long long v25 = (void *)(v24 + 24);
    unint64_t v26 = v27;
    long long v28 = IntrospectionPolymorphicTypeByName + 3;
    unint64_t v29 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
    unint64_t v30 = v29 ^ (v29 >> 31);
    if (!*(void *)buf)
    {
      LODWORD(v31) = 0;
LABEL_21:
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy((uint64_t)buf, v31, v30, v25, v28);
      int v20 = ++DWORD2(v81);
      unint64_t v19 = *v8;
      continue;
    }
    unint64_t v31 = v30 % DWORD2(v80);
    uint64_t v32 = *(unsigned int *)(*(void *)&buf[8] + 4 * v31);
    if (v32 == 0x7FFFFFFF) {
      goto LABEL_21;
    }
    while (*(void *)(v80 + 32 * v32 + 16) != v26)
    {
      uint64_t v32 = *(_DWORD *)(v80 + 32 * v32 + 8) & 0x7FFFFFFF;
      if (v32 == 0x7FFFFFFF) {
        goto LABEL_21;
      }
    }
    *(void *)(v80 + 32 * v32 + 24) = *v28;
    DWORD2(v81) = ++v20;
  }
  uint64_t v15 = *v69;
  unint64_t v16 = (unint64_t)v8 ^ ((unint64_t)v8 >> 30);
LABEL_25:
  unint64_t v33 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v16) ^ ((0xBF58476D1CE4E5B9 * v16) >> 27));
  unint64_t v34 = v33 ^ (v33 >> 31);
  if (!v15)
  {
    LODWORD(v35) = 0;
    goto LABEL_36;
  }
  unint64_t v35 = v34 % *(unsigned int *)(v6 + 120);
  uint64_t v36 = *(unsigned int *)(*(void *)(v6 + 104) + 4 * v35);
  if (v36 == 0x7FFFFFFF) {
    goto LABEL_36;
  }
  uint64_t v37 = *(void *)(v6 + 112);
  if (*(unsigned int **)(v37 + 72 * v36 + 16) != v8)
  {
    while (1)
    {
      LODWORD(v36) = *(_DWORD *)(v37 + 72 * v36 + 8) & 0x7FFFFFFF;
      if (v36 == 0x7FFFFFFF) {
        break;
      }
      if (*(unsigned int **)(v37 + 72 * v36 + 16) == v8) {
        goto LABEL_42;
      }
    }
LABEL_36:
    uint64_t v40 = *(unsigned int *)(v6 + 132);
    if (v40 == 0x7FFFFFFF)
    {
      uint64_t v40 = *(unsigned int *)(v6 + 128);
      int v41 = v40;
      if (v40 == *(_DWORD *)(v6 + 120))
      {
        LODWORD(v35) = v34 % *(unsigned int *)(v6 + 120);
        int v41 = *(_DWORD *)(v6 + 128);
      }
      *(_DWORD *)(v6 + 128) = v41 + 1;
      uint64_t v42 = *(void *)(v6 + 112);
      int v43 = *(_DWORD *)(v42 + 72 * v40 + 8);
    }
    else
    {
      uint64_t v42 = *(void *)(v6 + 112);
      int v43 = *(_DWORD *)(v42 + 72 * v40 + 8);
      *(_DWORD *)(v6 + 132) = v43 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v42 + 72 * v40 + 8) = v43 | 0x80000000;
    *(_DWORD *)(*(void *)(v6 + 112) + 72 * v40 + 8) = *(_DWORD *)(*(void *)(v6 + 112) + 72 * v40 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v6 + 104) + 4 * v35);
    *(void *)(*(void *)(v6 + 112) + 72 * v40) = v34;
    *(void *)(*(void *)(v6 + 112) + 72 * v40 + 16) = v8;
    re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(*(void *)(v6 + 112) + 72 * v40 + 24, (uint64_t)buf);
    *(_DWORD *)(*(void *)(v6 + 104) + 4 * v35) = v40;
    ++*(_DWORD *)(v6 + 124);
    ++*(_DWORD *)(v6 + 136);
  }
LABEL_42:
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)buf);
  unsigned int v44 = 0x7FFFFFFF;
  if (*v69)
  {
    unsigned int v45 = *(_DWORD *)(*(void *)(v6 + 104) + 4 * (v34 % *(unsigned int *)(v6 + 120)));
    long long v5 = v67;
    uint64_t v7 = v68;
    if (v45 != 0x7FFFFFFF)
    {
      uint64_t v46 = *(void *)(v6 + 112);
      if (*(unsigned int **)(v46 + 72 * v45 + 16) == v8)
      {
        unsigned int v44 = *(_DWORD *)(*(void *)(v6 + 104) + 4 * (v34 % *(unsigned int *)(v6 + 120)));
      }
      else
      {
        while (1)
        {
          unsigned int v44 = *(_DWORD *)(v46
                          + 72 * *(unsigned int *)(*(void *)(v6 + 104) + 4 * (v34 % *(unsigned int *)(v6 + 120)))
                          + 8) & 0x7FFFFFFF;
          if (v44 == 0x7FFFFFFF) {
            break;
          }
          if (*(unsigned int **)(v46 + 72 * v44 + 16) == v8) {
            goto LABEL_51;
          }
        }
        unsigned int v44 = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    long long v5 = v67;
    uint64_t v7 = v68;
  }
LABEL_51:
  uint64_t v39 = *(void *)(v6 + 112) + 72 * v44 + 24;
  unint64_t v9 = *(void *)(v11 + 24);
LABEL_52:
  uint64_t v47 = (void *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v39, v9);
  if (v47)
  {
    uint64_t v48 = *v13;
    if (v48)
    {
      uint64_t v14 = *((void *)v13 + 1);
      while (*(void *)(v14 + 24) != *v47)
      {
        v14 += 40;
        if (!--v48) {
          goto LABEL_57;
        }
      }
    }
    else
    {
LABEL_57:
      uint64_t v14 = 0;
    }
LABEL_58:
    int v49 = *(const re::IntrospectionBase **)(v11 + 8);
    if (v49 && (uint64_t v50 = *(const re::IntrospectionBase **)(v14 + 8)) != 0)
    {
      char v51 = re::introspectionAllocPointer(*(re **)(v6 + 208), *(_anonymous_namespace_ **)(v6 + 168), *(re::Allocator **)(v14 + 8));
      uint64_t v52 = v51;
      uint64_t v53 = v5[3];
      if (*(_DWORD *)(v53 + 16) == 8)
      {
        if (*(void *)(v53 + 88)) {
          uint64_t v54 = (uint64_t)v51;
        }
        else {
          uint64_t v54 = 0;
        }
      }
      else
      {
        uint64_t v54 = 0;
      }
      if (a2)
      {
        *a2 = v54;
        a2[2] = v14;
      }
      else
      {
        a3 = *(void *)(v6 + 320);
      }
      {
        uint64_t v62 = (char *)v52 - *(int *)(v14 + 32);
        uint64_t v63 = v62;
        if (*(unsigned char *)v5[4]) {
          uint64_t v63 = *(char **)v5[5];
        }
        memcpy(&v63[*(int *)v5[6]], (const void *)(v14 + 24), *(int *)(*(void *)v5[7] + 20));
        **(void **)v5[8] = v62;
        return 1;
      }
      re::getPrettyTypeName(v49, (const re::IntrospectionBase *)buf);
      if (buf[8]) {
        uint64_t v64 = (const char *)v80;
      }
      else {
        uint64_t v64 = (const char *)&buf[9];
      }
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
      unint64_t v65 = *(void *)(v6 + 320);
      if (v65 <= a3)
      {
        v70[1] = 0;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v71 = 136315906;
        size_t v72 = "operator[]";
        __int16 v73 = 1024;
        int v74 = 789;
        __int16 v75 = 2048;
        unint64_t v76 = a3;
        __int16 v77 = 2048;
        unint64_t v78 = v65;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v66 = (void *)(*(void *)(v6 + 336) + 32 * a3);
      *uint64_t v66 = 0;
      v66[2] = 0;
      re::introspectionReleasePointer(v52, *(void *)(v6 + 208), *(void *)(v6 + 168), (uint64_t)v50);
    }
    else
    {
    }
    return 0;
  }
  unint64_t v55 = *re::foundationSerializationLogObjects(0);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    uint64_t v56 = *(void *)v11;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v56;
    _os_log_impl(&dword_233120000, v55, OS_LOG_TYPE_INFO, "Binary Deserialization; unknown polymorphic type '%s'.",
      buf,
      0xCu);
  }
  uint64_t v57 = *(void *)(v6 + 168);
  if (!v57
    || (uint64_t v58 = *(uint64_t (**)(void))(v57 + 16)) == 0
    || (uint64_t v59 = (re *)v58(*(void *)(v11 + 8)), !v59))
  {
    return 0;
  }
  uint64_t v60 = *re::foundationSerializationLogObjects(v59);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v61 = *(void *)v11;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v61;
    _os_log_impl(&dword_233120000, v60, OS_LOG_TYPE_DEFAULT, "Binary Deserialization; failed to find stream polymorphic type '%s'. Skipping unknown type.",
      buf,
      0xCu);
  }
}

uint64_t anonymous namespace'::BinaryDeserializer::skip(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2)
{
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      uint64_t v5 = *((int *)a2 + 5);
      if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 18) + 48))(*((void *)this + 18), v5) == v5) {
        return 1;
      }
      return 0;
    case 1:
      uint64_t v6 = *((void *)a2 + 6);
      if (*(_DWORD *)(v6 + 16) != 8) {
        goto LABEL_12;
      }
      uint64_t v7 = *(unsigned int *)(v6 + 56);
      if (!v7) {
        goto LABEL_12;
      }
      uint64_t v8 = *(void *)(v6 + 64);
      do
      {
        if (**(_DWORD **)v8 == 2)
        {
          unint64_t v33 = *(unsigned int **)(*(void *)v8 + 8);
        }
        v8 += 8;
        --v7;
      }
      while (v7);
LABEL_12:
      uint64_t v9 = *((void *)this + 18);
      LOBYTE(v35) = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 16))(v9, &v35, 1) != 1)
      {
        return 0;
      }
      if (v35 == 82)
      {
        LODWORD(v35) = 0;
        if ((*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v35, 4) == 4)
        {
          if (*((void *)this + 40) > (unint64_t)v35) {
            return 1;
          }
        }
        else
        {
        }
        return 0;
      }
      if (v35 == 78) {
        return 1;
      }
      if (v35 != 73)
      {
        return 0;
      }
      uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      {
          return 1;
        re::getPrettyTypeName((re *)v6, (const re::IntrospectionBase *)&v35);
        goto LABEL_84;
      }
      LODWORD(v35) = 0;
      if ((*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v35, 4) != 4)
      {
        return 0;
      }
      unint64_t v12 = v35;
      unint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
      uint64_t v14 = v35;
      if (v13 < v12)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      return (*(uint64_t (**)(void, void))(**((void **)this + 18) + 48))(*((void *)this + 18), v35) == v14;
    case 2:
      if (!*((_DWORD *)a2 + 16)) {
        return 1;
      }
      unsigned int v15 = 0;
      unint64_t v16 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      {
        ++v15;
        uint64_t result = 1;
        if (v15 >= *((_DWORD *)a2 + 16)) {
          return result;
        }
      }
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v35);
      goto LABEL_84;
    case 3:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      unsigned int v34 = 1;
      if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v34, 4) != 4)
      {
        return 0;
      }
      unint64_t v17 = v34;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v17)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      if (!v34) {
        return 1;
      }
      int v24 = 0;
      long long v25 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      {
        if (++v24 >= v34) {
          return 1;
        }
      }
      goto LABEL_83;
    case 4:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      unsigned int v34 = 1;
      if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v34, 4) != 4)
      {
        return 0;
      }
      unint64_t v18 = v34;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v18)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      if (!v34) {
        return 1;
      }
      int v26 = 0;
      unint64_t v27 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      {
        if (++v26 >= v34) {
          return 1;
        }
      }
      goto LABEL_83;
    case 5:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      unsigned int v34 = 1;
      if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v34, 4) != 4)
      {
        return 0;
      }
      unint64_t v19 = v34;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v19)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      if (!v34) {
        return 1;
      }
      int v28 = 0;
      unint64_t v29 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      {
        if (++v28 >= v34) {
          return 1;
        }
      }
LABEL_83:
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v35);
LABEL_84:
      if (v35)
      {
        if (v36) {
          (*(void (**)(void))(*(void *)v35 + 40))();
        }
      }
      return 0;
    case 6:
    case 0xA:
    case 0xB:
    case 7:
      *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
      LODWORD(v35) = 1;
      if ((*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v35, 4) != 4)
      {
        return 0;
      }
      unint64_t v20 = v35;
      if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v20)
      {
        (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
        return 0;
      }
      if (!v35) {
        return 1;
      }
      int v30 = 0;
      unint64_t v31 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      uint64_t v32 = (const re::IntrospectionBase *)*((void *)a2 + 8);
      while (2)
      {
        {
          {
            if (++v30 >= v35) {
              return 1;
            }
            continue;
          }
        }
        else
        {
        }
        break;
      }
      return 0;
    case 8:
      if (!*((_DWORD *)a2 + 14)) {
        return 1;
      }
      uint64_t v21 = 0;
      break;
    case 9:
      uint64_t v23 = *((int *)a2 + 5);
      if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 18) + 48))(*((void *)this + 18), v23) == v23) {
        return 1;
      }
      return 0;
    case 0xD:
      LOBYTE(v35) = 0;
      if ((*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v35, 1) != 1)
      {
        return 0;
      }
      if (!(_BYTE)v35) {
        return 1;
      }
    default:
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v35);
      goto LABEL_84;
  }
  while (1)
  {
    uint64_t v22 = *(void *)(*((void *)a2 + 8) + 8 * v21);
    if (*(_DWORD *)v22 == 1) {
      break;
    }
LABEL_46:
    if (++v21 >= (unint64_t)*((unsigned int *)a2 + 14)) {
      return 1;
    }
  }
  switch(*(_DWORD *)(v22 + 40))
  {
    case 0:
    case 3:
        goto LABEL_46;
      return 0;
    case 1:
      goto LABEL_94;
    case 2:
LABEL_94:
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t anonymous namespace'::BinaryDeserializer::skipDynamicString(_anonymous_namespace_::BinaryDeserializer *this)
{
  *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
  unsigned int v6 = 0;
  if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v6, 4) == 4)
  {
    unint64_t v2 = v6;
    unint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
    uint64_t v4 = v6;
    if (v3 >= v2)
    {
      if (!v6
        || (*(uint64_t (**)(void, void))(**((void **)this + 18) + 48))(*((void *)this + 18), v6) == v4)
      {
        return 1;
      }
    }
    else
    {
      (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
    }
  }
  else
  {
  }
  return 0;
}

uint64_t anonymous namespace'::BinaryDeserializer::skipPointerPolymorphic(_anonymous_namespace_::BinaryDeserializer *a1, unsigned int *a2)
{
  if (a2)
  {
    uint64_t v4 = *((void *)a1 + 18);
    LOBYTE(v11) = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 16))(v4, &v11, 1) == 1)
    {
      switch(v11)
      {
        case 'R':
          LODWORD(v11) = 0;
          if ((*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)a1 + 18) + 16))(*((void *)a1 + 18), &v11, 4) == 4)
          {
            if (*((void *)a1 + 40) > (unint64_t)v11) {
              return 1;
            }
          }
          else
          {
          }
          break;
        case 'N':
          return 1;
        case 'I':
          uint64_t v14 = 0;
          uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a1 + 18) + 24))(*((void *)a1 + 18));
          if ((*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)a1 + 18) + 16))(*((void *)a1 + 18), &v14, 8) == 8)
          {
            uint64_t v6 = *a2;
            if (v6)
            {
              uint64_t v7 = *((void *)a2 + 1);
              while (*(void *)(v7 + 24) != v14)
              {
                v7 += 40;
                if (!--v6) {
                  goto LABEL_11;
                }
              }
              uint64_t v9 = *(re **)(v7 + 8);
              if (v9)
              {
                {
                  re::getPrettyTypeName(v9, (const re::IntrospectionBase *)&v11);
                  if (v12) {
                    uint64_t v10 = *(const char **)&v13[7];
                  }
                  else {
                    uint64_t v10 = v13;
                  }
                  if (v11)
                  {
                    if (v12) {
                      (*(void (**)(void))(*(void *)v11 + 40))();
                    }
                  }
                  return 0;
                }
                return 1;
              }
            }
            else
            {
LABEL_11:
            }
          }
          else
          {
          }
          break;
        default:
          break;
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

uint64_t anonymous namespace'::BinaryDeserializer::skipArrayMember(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionMember *a2)
{
  *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
  unsigned int v18 = 1;
  if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v18, 4) != 4)
  {
    return 0;
  }
  unint64_t v4 = v18;
  if ((*(uint64_t (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18)) < v4)
  {
    (*(void (**)(void))(**((void **)this + 18) + 32))(*((void *)this + 18));
    return 0;
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (!v5 || *(_DWORD *)(v5 + 16) != 1)
  {
    return 0;
  }
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v15, *(const re::IntrospectionBase **)(v5 + 48), v18);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v8, 0);
  v9[1] = 0x800000001;
  int v10 = 8;
  __int16 v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0xFFFFFFFFLL;
  uint64_t v8 = &unk_26E6CDA08;
  v14[0] = &v15;
  v14[1] = 0;
  uint64_t v8 = &unk_26E6CDA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v14);
  uint64_t v8 = &unk_26E6DECE0;
  objc_destructInstance(v9);
  unsigned int v15 = &unk_26E6C2018;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&v17);
  unsigned int v15 = &unk_26E6DECE0;
  objc_destructInstance(&v16);
  return v6;
}

uint64_t anonymous namespace'::BinaryDeserializer::skipPolymorphicMember(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionMember *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  if (*(_DWORD *)(v2 + 16) != 1)
  {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 48);
  if (*(_DWORD *)(v3 + 16) != 8)
  {
    return 0;
  }
  unint64_t v4 = *(void **)(v3 + 64);
  uint64_t v5 = (_DWORD *)*v4;
  if (*(_DWORD *)*v4 != 2)
  {
    uint64_t v6 = *(unsigned int *)(v3 + 56);
    uint64_t v7 = (_DWORD **)(v4 + 1);
    uint64_t v8 = v6 - 1;
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v5 = v9;
      --v8;
    }
    while (*v9 != 2);
  }
  int v10 = (unsigned int *)*((void *)v5 + 1);
}

BOOL anonymous namespace'::BinaryDeserializer::readLinearArray(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3, unint64_t a4, char *a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)a2 + 4))
  {
    if (a2 == a3)
    {
      int v15 = *((_DWORD *)a2 + 5);
      BOOL v16 = v15 < 0;
      if (v15 >= 0) {
        unint64_t v17 = v15;
      }
      else {
        unint64_t v17 = -v15;
      }
      uint64_t v18 = (v17 * (unsigned __int128)a4) >> 64;
      uint64_t v19 = v17 * a4;
      if (v15 >= 0) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = -v19;
      }
      BOOL v21 = v18 != 0;
      if (!v19) {
        BOOL v16 = 0;
      }
      if (v21 || v16)
      {
      }
      else
      {
        if ((*(uint64_t (**)(void, char *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), a5, v20) == v20)return 1; {
      }
        }
    }
    else
    {
      uint64_t v12 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *((void *)a2 + 6);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_debug_impl(&dword_233120000, v12, OS_LOG_TYPE_DEBUG, "Binary Deserialization; array item types don't match '%s'.",
          buf,
          0xCu);
      }
    }
    return 0;
  }
  if (!a4) {
    return 1;
  }
  {
    unint64_t v10 = 0;
    while (a4 - 1 != v10)
    {
      {
        BOOL v11 = v10 >= a4;
        goto LABEL_12;
      }
    }
    return 1;
  }
  BOOL v11 = 0;
  LODWORD(v10) = 0;
LABEL_12:
  re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
  if (buf[8]) {
    uint64_t v14 = v24;
  }
  else {
    uint64_t v14 = &buf[9];
  }
  if (*(void *)buf && (buf[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  return v11;
}

void std::__function::__func<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E720950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E720950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 8) + 216) + 40))(*(void *)(*(void *)(a1 + 8) + 216), *a2);
}

uint64_t anonymous namespace'::BinaryDeserializer::readStructureNoVersioning(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3, char *a4)
{
  v143[3] = *MEMORY[0x263EF8340];
  unint64_t v5 = *((unsigned int *)a2 + 14);
  uint64_t result = 1;
  if (!v5) {
    return result;
  }
  uint64_t v7 = a3;
  unint64_t v9 = 0;
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  unint64_t v115 = v10 ^ (v10 >> 31);
  v113 = this;
  while (1)
  {
    if (**(_DWORD **)(*((void *)a2 + 8) + 8 * v9) != 1) {
      goto LABEL_136;
    }
    v118 = *(re::IntrospectionMember **)(*((void *)a2 + 8) + 8 * v9);
    if (a2 != v7) {
      break;
    }
    int v42 = v9;
LABEL_46:
    uint64_t v43 = *(void *)(*((void *)v7 + 8) + 8 * v42);
    int v44 = *((_DWORD *)v118 + 10);
    if (v44 != *(_DWORD *)(v43 + 40))
    {
      return 0;
    }
    unsigned int v45 = &a4[*(int *)(v43 + 36)];
    switch(v44)
    {
      case 0:
      case 3:
        if (result) {
          goto LABEL_136;
        }
        return 0;
      case 1:
        *((void *)this + 19) = (*(uint64_t (**)(void))(**((void **)this + 18) + 24))(*((void *)this + 18));
        uint64_t v81 = *(int *)(v43 + 36);
        unsigned int v139 = 1;
        if ((*(uint64_t (**)(void, unsigned int *, uint64_t))(**((void **)this + 18) + 16))(*((void *)this + 18), &v139, 4) == 4)
        {
          long long v82 = this;
          unint64_t v83 = v139;
          unint64_t v84 = (*(uint64_t (**)(void))(**((void **)v82 + 18) + 32))(*((void *)v82 + 18));
          uint64_t v85 = v139;
          if (v84 < v83)
          {
            this = v113;
            (*(void (**)(void))(**((void **)v113 + 18) + 32))(*((void *)v113 + 18));
          }
          else
          {
            *(void *)long long buf = v139;
            if (*(_DWORD *)(v43 + 40) == 1 && (uint64_t v86 = *(void *)(v43 + 48)) != 0)
            {
              memcpy(&a4[*(int *)(v43 + 64)], buf, *(int *)(v86 + 20));
              uint64_t v87 = *((void *)v118 + 2);
              this = v113;
              if (v87 && *(_DWORD *)(v87 + 16) == 1)
              {
                uint64_t v88 = *(void *)(v43 + 16);
                re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)buf, *(const re::IntrospectionBase **)(v87 + 48), v85);
                re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v136, *(const re::IntrospectionBase **)(v88 + 48), v139);
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v129, 0);
                v130[1] = 0x800000001;
                int v131 = 8;
                __int16 v132 = 0;
                uint64_t v133 = 0;
                uint64_t v134 = 0xFFFFFFFFLL;
                v129 = &unk_26E6CDA08;
                v135[0] = buf;
                v135[1] = 0;
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v122, 0);
                v123[1] = 0x800000001;
                int v124 = 8;
                __int16 v125 = 0;
                uint64_t v126 = 0;
                uint64_t v127 = 0xFFFFFFFFLL;
                v122 = &unk_26E6CDA08;
                v128[0] = &v136;
                v128[1] = 0;
                uint64_t v90 = *((void *)v113 + 40);
                if (v90)
                {
                  uint64_t v91 = 32 * v90;
                  int v92 = (void ***)(*((void *)v113 + 42) + 8);
                  do
                  {
                    if (*v92 == &v136) {
                      *int v92 = 0;
                    }
                    v92 += 4;
                    v91 -= 32;
                  }
                  while (v91);
                }
                if (v89)
                {
                  v122 = &unk_26E6CDA08;
                  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v128);
                  v122 = &unk_26E6DECE0;
                  objc_destructInstance(v123);
                  v129 = &unk_26E6CDA08;
                  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v135);
                  v129 = &unk_26E6DECE0;
                  objc_destructInstance(v130);
                  char v136 = &unk_26E6C2018;
                  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&v138);
                  char v136 = &unk_26E6DECE0;
                  objc_destructInstance(&v137);
                  *(void *)long long buf = &unk_26E6C2018;
                  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v143);
                  *(void *)long long buf = &unk_26E6DECE0;
                  uint64_t result = (uint64_t)objc_destructInstance(&buf[8]);
                  goto LABEL_136;
                }
                re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)&v122);
                re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)&v129);
                re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v136);
                re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)buf);
              }
              else
              {
              }
            }
            else
            {
              this = v113;
            }
          }
        }
        else
        {
        }
        goto LABEL_150;
      case 2:
        uint64_t v93 = *((void *)v118 + 2);
        if (*(_DWORD *)(v93 + 16) != 1 || (uint64_t v94 = *(void *)(v43 + 16), *(_DWORD *)(v94 + 16) != 1))
        {
LABEL_150:
          return 0;
        }
        uint64_t v95 = *(void *)(v93 + 48);
        if (*(_DWORD *)(v95 + 16) != 8 || (uint64_t v96 = *(void *)(v94 + 48), *(_DWORD *)(v96 + 16) != 8))
        {
          goto LABEL_150;
        }
        uint64_t v97 = *(unsigned int *)(v95 + 56);
        if (v97)
        {
          int v98 = *(void **)(v95 + 64);
          while (1)
          {
            v99 = (_DWORD *)*v98;
            if (*(_DWORD *)*v98 == 2) {
              break;
            }
            ++v98;
            if (!--v97)
            {
              v99 = 0;
              break;
            }
          }
        }
        else
        {
          v99 = 0;
        }
        v100 = *(void **)(v96 + 64);
        v101 = (_DWORD *)*v100;
        if (*(_DWORD *)*v100 != 2)
        {
          uint64_t v102 = (_DWORD **)(v100 + 1);
          uint64_t v103 = *(unsigned int *)(v96 + 56) - 1;
          do
          {
            v104 = *v102++;
            v101 = v104;
            --v103;
          }
          while (*v104 != 2);
        }
        if ((result & 1) == 0) {
          goto LABEL_150;
        }
LABEL_136:
        ++v9;
        unint64_t v5 = *((unsigned int *)a2 + 14);
        if (v9 >= v5) {
          return 1;
        }
        break;
      default:
LABEL_143:
        return 0;
    }
  }
  if (*(void *)this)
  {
    uint64_t v11 = *(unsigned int *)(*((void *)this + 1) + 4 * (v115 % *((unsigned int *)this + 6)));
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *((void *)this + 2);
      do
      {
        if (*(const re::IntrospectionBase **)(v12 + 72 * v11 + 16) == a2)
        {
          uint64_t v72 = v12 + 72 * v11;
          goto LABEL_91;
        }
        LODWORD(v11) = *(_DWORD *)(v12 + 72 * v11 + 8) & 0x7FFFFFFF;
      }
      while (v11 != 0x7FFFFFFF);
    }
  }
  size_t v13 = strlen(*((const char **)a2 + 6));
  size_t v14 = strlen(*((const char **)v7 + 6));
  if (v13 >= v14) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v13;
  }
  BOOL v16 = (re *)strncmp(*((const char **)a2 + 6), *((const char **)v7 + 6), v15);
  if (v16)
  {
    v105 = *re::foundationSerializationLogObjects(v16);
    BOOL v106 = os_log_type_enabled(v105, OS_LOG_TYPE_INFO);
    if (v106)
    {
      uint64_t v107 = *((void *)a2 + 6);
      uint64_t v108 = *((void *)v7 + 6);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v107;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v108;
      _os_log_impl(&dword_233120000, v105, OS_LOG_TYPE_INFO, "Binary Deserialization; structure name changed '%s' and '%s'.",
        buf,
        0x16u);
    }
    v109 = *re::foundationSerializationLogObjects((re *)v106);
    uint64_t result = os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      uint64_t v110 = *((void *)v118 + 1);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v110;
      _os_log_debug_impl(&dword_233120000, v109, OS_LOG_TYPE_DEBUG, "Binary Deserialization; failed to read member '%s'.",
        buf,
        0xCu);
      return 0;
    }
    return result;
  }
  uint64_t v114 = 0;
  uint64_t v120 = 0;
  unsigned int v116 = 0;
  unsigned int v119 = 0;
  uint64_t v17 = 0;
  unsigned int v117 = 0;
  unint64_t v18 = 0;
  unsigned int v141 = 0;
  memset(buf, 0, sizeof(buf));
  uint64_t v142 = 0x7FFFFFFFLL;
  do
  {
    uint64_t v19 = *(_DWORD **)(*((void *)a2 + 8) + 8 * v18);
    if (*v19 != 1) {
      goto LABEL_38;
    }
    uint64_t v20 = *((unsigned int *)v7 + 14);
    if (!v20) {
      goto LABEL_38;
    }
    BOOL v21 = (const char **)(v19 + 2);
    uint64_t v22 = *((void *)v7 + 8);
LABEL_18:
    uint64_t v23 = 0;
    int v24 = *v21;
    while (1)
    {
      uint64_t v25 = *(void *)(v22 + 8 * v23);
      if (*(_DWORD *)v25 != 1)
      {
        if (*(_DWORD *)v25 == 5 && !strcmp(*(const char **)(v25 + 8), v24))
        {
          BOOL v21 = (const char **)(v25 + 16);
          goto LABEL_18;
        }
        goto LABEL_24;
      }
      if (!strcmp(*(const char **)(v25 + 8), v24)) {
        break;
      }
LABEL_24:
      if (v20 == ++v23)
      {
        uint64_t v7 = a3;
        goto LABEL_38;
      }
    }
    unint64_t v26 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) >> 27));
    unint64_t v27 = v26 ^ (v26 >> 31);
    unint64_t v28 = *(void *)buf;
    if (*(void *)buf)
    {
      unint64_t v28 = v27 % v117;
      for (uint64_t i = *(unsigned int *)(v120 + 4 * v28);
            i != 0x7FFFFFFF;
            LODWORD(i) = *(_DWORD *)(v17 + 24 * i + 8) & 0x7FFFFFFF)
      {
        if (v18 == *(_DWORD *)(v17 + 24 * i + 12)) {
          goto LABEL_37;
        }
      }
    }
    uint64_t v30 = v142;
    unsigned int v31 = v119;
    uint64_t v32 = v120;
    if (v142 == 0x7FFFFFFF)
    {
      unsigned int v33 = v119;
      unsigned int v117 = *(_DWORD *)&buf[24];
      if (v119 == *(_DWORD *)&buf[24])
      {
        re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity((uint64_t)buf, 2 * v116);
        unsigned int v33 = v141;
        unsigned int v117 = *(_DWORD *)&buf[24];
        unint64_t v28 = v27 % *(unsigned int *)&buf[24];
        uint64_t v17 = *(void *)&buf[16];
        uint64_t v114 = *(void *)&buf[8];
      }
      unsigned int v34 = v33 + 1;
      unsigned int v141 = v34;
      uint64_t v30 = v119;
      int v35 = *(_DWORD *)(v17 + 24 * v119 + 8);
      uint64_t v32 = v114;
    }
    else
    {
      int v35 = *(_DWORD *)(v17 + 24 * v142 + 8);
      LODWORD(v142) = v35 & 0x7FFFFFFF;
      unsigned int v34 = v119;
      unsigned int v31 = v30;
    }
    uint64_t v36 = 3 * v30;
    *(_DWORD *)(v17 + 8 * v36 + 8) = v35 | 0x80000000;
    uint64_t v17 = *(void *)&buf[16];
    uint64_t v37 = *(void *)&buf[16] + 8 * v36;
    unsigned int v38 = *(_DWORD *)(v37 + 8) & 0x80000000 | *(_DWORD *)(v32 + 4 * v28);
    *(void *)uint64_t v37 = v27;
    *(_DWORD *)(v37 + 8) = v38;
    *(_DWORD *)(v37 + 12) = v18;
    *(_DWORD *)(v37 + 16) = v23;
    uint64_t v120 = v32;
    *(_DWORD *)(v32 + 4 * v28) = v31;
    unsigned int v116 = ++*(_DWORD *)&buf[28];
    ++HIDWORD(v142);
    unint64_t v5 = *((unsigned int *)a2 + 14);
    unsigned int v119 = v34;
LABEL_37:
    uint64_t v7 = a3;
LABEL_38:
    ++v18;
  }
  while (v18 < v5);
  this = v113;
  if (!*(void *)v113)
  {
    unint64_t v39 = 0;
LABEL_51:
    uint64_t v46 = *((unsigned int *)v113 + 9);
    if (v46 == 0x7FFFFFFF)
    {
      uint64_t v46 = *((unsigned int *)v113 + 8);
      int v47 = v46;
      if (v46 == *((_DWORD *)v113 + 6))
      {
        unint64_t v39 = v115 % *((unsigned int *)v113 + 6);
        int v47 = *((_DWORD *)v113 + 8);
      }
      *((_DWORD *)v113 + 8) = v47 + 1;
      uint64_t v48 = *((void *)v113 + 2);
      int v49 = *(_DWORD *)(v48 + 72 * v46 + 8);
    }
    else
    {
      uint64_t v48 = *((void *)v113 + 2);
      int v49 = *(_DWORD *)(v48 + 72 * v46 + 8);
      *((_DWORD *)v113 + 9) = v49 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v48 + 72 * v46 + 8) = v49 | 0x80000000;
    *(_DWORD *)(*((void *)v113 + 2) + 72 * v46 + 8) = *(_DWORD *)(*((void *)v113 + 2) + 72 * v46 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v113 + 1) + 4 * v39);
    *(void *)(*((void *)v113 + 2) + 72 * v46) = v115;
    *(void *)(*((void *)v113 + 2) + 72 * v46 + 16) = a2;
    uint64_t v50 = *((void *)v113 + 2) + 72 * v46;
    *(_OWORD *)(v50 + 24) = 0u;
    uint64_t v51 = v50 + 24;
    *(_DWORD *)(v51 + 32) = 0;
    *(_OWORD *)(v51 + 16) = 0u;
    *(void *)(v51 + 36) = 0x7FFFFFFFLL;
    if (*(void *)buf)
    {
      if (v116 <= 3) {
        signed int v52 = 3;
      }
      else {
        signed int v52 = v116;
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v51, *(uint64_t *)buf, v52);
      if (*(_DWORD *)(v51 + 28))
      {
        uint64_t v53 = *(unsigned int *)(v51 + 24);
        if (v53) {
          memset_pattern16(*(void **)(v51 + 8), &unk_2343655D0, 4 * v53);
        }
        uint64_t v54 = *(unsigned int *)(v51 + 32);
        if (v54)
        {
          uint64_t v55 = 0;
          uint64_t v56 = 24 * v54;
          do
          {
            uint64_t v57 = *(void *)(v51 + 16) + v55;
            int v58 = *(_DWORD *)(v57 + 8);
            if (v58 < 0) {
              *(_DWORD *)(v57 + 8) = v58 & 0x7FFFFFFF;
            }
            v55 += 24;
          }
          while (v56 != v55);
        }
        *(_DWORD *)(v51 + 28) = 0;
        *(_DWORD *)(v51 + 32) = 0;
        int v59 = *(_DWORD *)(v51 + 40) + 1;
        *(_DWORD *)(v51 + 36) = 0x7FFFFFFF;
        *(_DWORD *)(v51 + 40) = v59;
      }
      if (*(_DWORD *)(v51 + 24) < v116) {
        re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(v51, v116);
      }
      if (v119)
      {
        uint64_t v60 = v119;
        uint64_t v61 = (_DWORD *)(*(void *)&buf[16] + 16);
        do
        {
          if ((*(v61 - 2) & 0x80000000) != 0)
          {
            unint64_t v62 = *((void *)v61 - 2);
            unint64_t v63 = *(unsigned int *)(v51 + 24);
            unint64_t v64 = v62 % v63;
            uint64_t v65 = *(unsigned int *)(v51 + 36);
            if (v65 == 0x7FFFFFFF)
            {
              uint64_t v65 = *(unsigned int *)(v51 + 32);
              int v66 = v65;
              if (v65 == v63)
              {
                re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(v51, 2 * *(_DWORD *)(v51 + 28));
                unint64_t v64 = v62 % *(unsigned int *)(v51 + 24);
                int v66 = *(_DWORD *)(v51 + 32);
              }
              *(_DWORD *)(v51 + 32) = v66 + 1;
              uint64_t v67 = *(void *)(v51 + 16);
              int v68 = *(_DWORD *)(v67 + 24 * v65 + 8);
            }
            else
            {
              uint64_t v67 = *(void *)(v51 + 16);
              int v68 = *(_DWORD *)(v67 + 24 * v65 + 8);
              *(_DWORD *)(v51 + 36) = v68 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v67 + 24 * v65 + 8) = v68 | 0x80000000;
            uint64_t v69 = *(void *)(v51 + 8);
            *(_DWORD *)(*(void *)(v51 + 16) + 24 * v65 + 8) = *(_DWORD *)(*(void *)(v51 + 16) + 24 * v65 + 8) & 0x80000000 | *(_DWORD *)(v69 + 4 * v64);
            *(void *)(*(void *)(v51 + 16) + 24 * v65) = v62;
            *(_DWORD *)(*(void *)(v51 + 16) + 24 * v65 + 12) = *(v61 - 1);
            *(_DWORD *)(*(void *)(v51 + 16) + 24 * v65 + 16) = *v61;
            *(_DWORD *)(v69 + 4 * v64) = v65;
            ++*(_DWORD *)(v51 + 28);
          }
          v61 += 6;
          --v60;
        }
        while (v60);
      }
    }
    this = v113;
    *(_DWORD *)(*((void *)v113 + 1) + 4 * v39) = v46;
    ++*((_DWORD *)v113 + 7);
    ++*((_DWORD *)v113 + 10);
    uint64_t v7 = a3;
    goto LABEL_82;
  }
  unint64_t v39 = v115 % *((unsigned int *)v113 + 6);
  uint64_t v40 = *(unsigned int *)(*((void *)v113 + 1) + 4 * v39);
  if (v40 == 0x7FFFFFFF) {
    goto LABEL_51;
  }
  uint64_t v41 = *((void *)v113 + 2);
  while (*(const re::IntrospectionBase **)(v41 + 72 * v40 + 16) != a2)
  {
    LODWORD(v40) = *(_DWORD *)(v41 + 72 * v40 + 8) & 0x7FFFFFFF;
    if (v40 == 0x7FFFFFFF) {
      goto LABEL_51;
    }
  }
LABEL_82:
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
  if (!*(void *)this)
  {
    uint64_t v70 = *((void *)this + 2);
LABEL_88:
    LODWORD(v71) = 0x7FFFFFFF;
    goto LABEL_89;
  }
  uint64_t v70 = *((void *)this + 2);
  uint64_t v71 = *(unsigned int *)(*((void *)this + 1) + 4 * (v115 % *((unsigned int *)this + 6)));
  if (v71 == 0x7FFFFFFF) {
    goto LABEL_88;
  }
  while (*(const re::IntrospectionBase **)(v70 + 72 * v71 + 16) != a2)
  {
    uint64_t v71 = *(_DWORD *)(v70 + 72 * v71 + 8) & 0x7FFFFFFF;
    if (v71 == 0x7FFFFFFF) {
      goto LABEL_88;
    }
  }
LABEL_89:
  uint64_t v72 = v70 + 72 * v71;
LABEL_91:
  if (!*(void *)(v72 + 24)
    || (unint64_t v73 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * ((int)v9 ^ ((unint64_t)(int)v9 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                        * ((int)v9 ^ ((unint64_t)(int)v9 >> 30))) >> 27)),
        uint64_t v74 = *(unsigned int *)(*(void *)(v72 + 32) + 4 * ((v73 ^ (v73 >> 31)) % *(unsigned int *)(v72 + 48))),
        v74 == 0x7FFFFFFF))
  {
LABEL_96:
    uint64_t v76 = *(void *)(*((void *)a2 + 8) + 8 * (int)v9);
    __int16 v77 = *re::foundationSerializationLogObjects((re *)result);
    uint64_t result = os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
    if (result)
    {
      uint64_t v78 = *(void *)(v76 + 8);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v78;
      _os_log_impl(&dword_233120000, v77, OS_LOG_TYPE_INFO, "Binary Deserialization; unknown member '%s'.", buf, 0xCu);
    }
    goto LABEL_98;
  }
  uint64_t v75 = *(void *)(v72 + 40);
  while (*(_DWORD *)(v75 + 24 * v74 + 12) != v9)
  {
    LODWORD(v74) = *(_DWORD *)(v75 + 24 * v74 + 8) & 0x7FFFFFFF;
    if (v74 == 0x7FFFFFFF) {
      goto LABEL_96;
    }
  }
  int v42 = *(_DWORD *)(v75 + 24 * v74 + 16);
  if (v42 != -1) {
    goto LABEL_46;
  }
LABEL_98:
  uint64_t v79 = *re::foundationSerializationLogObjects((re *)result);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
  {
    uint64_t v80 = *((void *)v118 + 1);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v80;
    _os_log_impl(&dword_233120000, v79, OS_LOG_TYPE_INFO, "Binary Deserialization; skipping unknown member '%s'.",
      buf,
      0xCu);
  }
  switch(*((_DWORD *)v118 + 10))
  {
    case 0:
    case 3:
      if (result) {
        goto LABEL_136;
      }
      return 0;
    case 1:
      goto LABEL_107;
    case 2:
LABEL_107:
      if (result) {
        goto LABEL_136;
      }
      break;
    default:
      goto LABEL_143;
  }
  return 0;
}

void re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        size_t v13 = (_DWORD *)(v6 + 16);
        do
        {
          if ((*(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *((void *)v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 24 * v17) = v14;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 12) = *(v13 - 1);
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 16) = *v13;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 6;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<re::IntrospectionStructure const*,anonymous namespace'::BinaryDeserializer::StructureVersionData,re::Hash<re::IntrospectionStructure const*>,re::EqualTo<re::IntrospectionStructure const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)uint64_t v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        size_t v13 = (_DWORD *)(v6 + 60);
        do
        {
          if ((*(v13 - 13) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 15);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 72 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 72 * v17 + 16) = *(void *)(v13 - 11);
            uint64_t v21 = *(void *)(a1 + 16) + 72 * v17;
            *(_DWORD *)(v21 + 56) = 0;
            *(_OWORD *)(v21 + 40) = 0u;
            *(_OWORD *)(v21 + 24) = 0u;
            *(void *)(v21 + 60) = 0x7FFFFFFFLL;
            *(void *)(v21 + 24) = *(void *)(v13 - 9);
            *(void *)(v13 - 9) = 0;
            uint64_t v22 = *(void *)(v21 + 32);
            *(void *)(v21 + 32) = *(void *)(v13 - 7);
            *(void *)(v13 - 7) = v22;
            uint64_t v23 = *(void *)(v21 + 40);
            *(void *)(v21 + 40) = *(void *)(v13 - 5);
            *(void *)(v13 - 5) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 48);
            *(_DWORD *)(v21 + 48) = *(v13 - 3);
            *(v13 - 3) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 52);
            *(_DWORD *)(v21 + 52) = *(v13 - 2);
            *(v13 - 2) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 56);
            *(_DWORD *)(v21 + 56) = *(v13 - 1);
            *(v13 - 1) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 60);
            *(_DWORD *)(v21 + 60) = *v13;
            _DWORD *v13 = v23;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 18;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

uint64_t *re::HashTable<re::IntrospectionStructure const*,anonymous namespace'::BinaryDeserializer::StructureVersionData,re::Hash<re::IntrospectionStructure const*>,re::EqualTo<re::IntrospectionStructure const*>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

unint64_t anonymous namespace'::BinaryDeserializer::hexConvert(_anonymous_namespace_::BinaryDeserializer *this, char *a2, uint64_t a3, const char *a4)
{
  uint64_t v4 = 0;
  if ((unint64_t)a2 >= 4 && a4)
  {
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < (unint64_t)a4; ++i)
    {
      uint64_t v6 = (char *)this + v4;
      v6[2] = 32;
      unint64_t v7 = v4 + 6;
      v4 += 3;
      if (v7 >= (unint64_t)a2) {
        break;
      }
    }
  }
  BOOL v8 = v4 != 0;
  unint64_t v9 = v4 - 1;
  if (!v8) {
    unint64_t v9 = 0;
  }
  if (v9 < (unint64_t)a2) {
    *((unsigned char *)this + v9) = 0;
  }
  return v9;
}

void re::deserializeJsonIntoBuffer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v10 = a5;
  char v84 = 0;
  v83[0] = &unk_26E720998;
  v83[1] = a1;
  v83[2] = a5;
  memset(&v83[3], 0, 24);
  *(void *)&v85[0].var0 = 0xD037281FECA61F36;
  v85[0].var1 = "JSON-StreamAdaptor-DeserializerV1";
  uint64_t v41 = (void (**)(void **))&unk_26E720A40;
  re::StringID::StringID((re::StringID *)&v42, v85);
  uint64_t v53 = 0;
  memset(v51, 0, sizeof(v51));
  int v52 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v45 = 0;
  uint64_t v46 = 0;
  int v47 = 0;
  v48[0] = 0;
  int v54 = 13;
  uint64_t v56 = 1024;
  char v55 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F0A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F0A0))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v30, (uint64_t)&v33);
    if ((_BYTE)v33) {
      uint64_t v31 = SDWORD1(v33);
    }
    else {
      uint64_t v31 = 0;
    }
    _MergedGlobals_488 = v31;
    __cxa_guard_release(&qword_26AF9F0A0);
  }
  if (_MergedGlobals_488) {
    uint64_t v56 = _MergedGlobals_488;
  }
  v59[4] = 0;
  __int16 v60 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  memset(v59, 0, 28);
  long long v64 = 0u;
  long long v65 = 0u;
  int v66 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  int v63 = 0;
  uint64_t v67 = 0x7FFFFFFFLL;
  uint64_t v41 = (void (**)(void **))&unk_26E7209D8;
  __int16 v68 = 1;
  uint64_t v71 = 0x7FFFFFFFLL;
  long long v76 = 0u;
  long long v77 = 0u;
  memset(v69, 0, sizeof(v69));
  int v70 = 0;
  uint64_t v74 = 0;
  int v75 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v82 = 0;
  int v78 = 0;
  long long v79 = 0u;
  long long v80 = 0u;
  int v81 = 0;
  re::StringID::destroyString((re::StringID *)v85);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v40);
  long long v39 = *(_OWORD *)(a2 + 32);
  re::TypeRegistry::typeInfo((re *)v39, (re **)&v39, v85);
  re::TypeInfo::TypeInfo((uint64_t)&v37, (uint64_t)&v85[0].var1);
  BOOL v14 = 0;
  if (v38 == 8)
  {
    unint64_t v15 = re::TypeInfo::name((re::TypeInfo *)&v37);
    if ((unint64_t)*v15 >> 1 == 94623636 && ((unint64_t v16 = (char *)v15[1], v16 == "char*") || !strcmp(v16, "char*"))
      || (uint64_t v17 = re::TypeInfo::name((re::TypeInfo *)&v37), (unint64_t)*v17 >> 1 == 0x134375A94D9F7110)
      && ((int v18 = (char *)v17[1], v18 == "DynamicString") || !strcmp(v18, "DynamicString")))
    {
      BOOL v14 = 0;
    }
    else
    {
      uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)&v37);
      if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
      {
        int v20 = (char *)v19[1];
        BOOL v21 = v20 == "StringID" || strcmp(v20, "StringID") == 0;
      }
      else
      {
        BOOL v21 = 0;
      }
      BOOL v14 = !v21;
    }
  }
  uint64_t v61 = a4;
  uint64_t v23 = v62;
  if (*(_DWORD *)(v62 + 24) != v63)
  {
  }
  uint64_t v43 = v83;
  uint64_t v44 = 0;
  int v45 = 0;
  if (!v10)
  {
  }
  uint64_t v46 = v10;
  if (!a6)
  {
  }
  int v47 = a6;
  *(unsigned char *)&v85[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v48, (unsigned __int8 *)v85);
  if (*(unsigned char *)&v85[0].var0 && v85[1].var1 && (*(unsigned char *)&v85[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v85[1].var1 + 40))();
  }
  v51[0] = v46;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v51, 0x40uLL);
  ++v52;
  *(unsigned char *)&v85[0].var0 = 0;
  memset(&v85[0].var0 + 1, 0, 44);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v59[0] = v47;
  re::DynamicArray<char>::setCapacity(v59, 0);
  ++LODWORD(v59[3]);
  uint64_t v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 256;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 64) = 2;
  *((void *)&v58 + 1) = v25;
  uint64_t v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 104, 8);
  *(void *)&long long v58 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::GenericDocument(v26, 0, 1024, 0);
  long long v33 = (unint64_t)v43;
  LODWORD(v34) = 0;
  long long v35 = 0uLL;
  uint64_t v27 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::ParseStream<440u,rapidjson::UTF8<char>,re::internal::RapidJSONInputStream>(v58, &v33);
  uint64_t v28 = *(void *)(v27 + 88);
  if (v28)
  {
    unint64_t v29 = v28 > 0x11
        ? "Unknown error."
        : *(char **)((char *)off_264BE8410 + (((v28 << 32) - 0x100000000) >> 29));
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize JSON: %s (Offset %zu)", (re::DynamicString *)&v86, v29, *(void *)(v27 + 96));
    if (v86)
    {
      if (v87) {
        (*(void (**)(void))(*(void *)v86 + 40))();
      }
    }
  }
  if ((unint64_t)v35 < (int)v34) {
    (*(void (**)(void, void))(*(void *)v33 + 24))(v33, (v34 - v35));
  }
  v41[6]((void **)&v41);
  if (a7)
  {
    LOBYTE(v60) = 1;
    if ((a7 & 2) == 0)
    {
LABEL_41:
      if (v14) {
        goto LABEL_42;
      }
      goto LABEL_46;
    }
  }
  else if ((a7 & 2) == 0)
  {
    goto LABEL_41;
  }
  HIBYTE(v60) = 1;
  if (v14)
  {
LABEL_42:
    if (!v48[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, uint64_t *, uint64_t *, void))v41[9])(&v41, "object", 0, a3, &v37, &v37, 0);
    }
    goto LABEL_50;
  }
LABEL_46:
  {
    *(unsigned char *)&v85[0].var0 = v48[0];
    if (v48[0])
    {
      *(_OWORD *)&v85[0].var1 = v49;
      re::DynamicString::DynamicString((re::DynamicString *)&v85[1].var1, (const re::DynamicString *)v50);
    }
    long long v33 = *(_OWORD *)&v85[0].var1;
    goto LABEL_56;
  }
  if (!v48[0]) {
    ((void (*)(void (***)(void **), const char *, void, uint64_t, uint64_t *, uint64_t *, void))v41[9])(&v41, "object", 0, a3, &v37, &v37, 0);
  }
LABEL_50:
  v41[7]((void **)&v41);
  if (!v48[0])
  {
    *(unsigned char *)a8 = 1;
    goto LABEL_60;
  }
  *(unsigned char *)&v85[0].var0 = 1;
  *(_OWORD *)&v85[0].var1 = v49;
  re::DynamicString::DynamicString((re::DynamicString *)&v85[1].var1, (const re::DynamicString *)v50);
  long long v33 = *(_OWORD *)&v85[0].var1;
LABEL_56:
  re::DynamicString::DynamicString((re::DynamicString *)&v34, (const re::DynamicString *)&v85[1].var1);
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v33;
  *(void *)(a8 + 24) = v34;
  *(void *)(a8 + 48) = v36;
  *(_OWORD *)(a8 + 32) = v35;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  long long v35 = 0uLL;
  if (*(unsigned char *)&v85[0].var0 && v85[1].var1 && (*(unsigned char *)&v85[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v85[1].var1 + 40))();
  }
LABEL_60:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v40);
  uint64_t v41 = (void (**)(void **))&unk_26E7209D8;
  if (*((void *)&v79 + 1))
  {
    if (v82) {
      (*(void (**)(void))(**((void **)&v79 + 1) + 40))();
    }
    uint64_t v82 = 0;
    long long v80 = 0uLL;
    *((void *)&v79 + 1) = 0;
    ++v81;
  }
  if (*((void *)&v76 + 1))
  {
    if ((void)v79) {
      (*(void (**)(void))(**((void **)&v76 + 1) + 40))();
    }
    *(void *)&long long v79 = 0;
    long long v77 = 0uLL;
    *((void *)&v76 + 1) = 0;
    ++v78;
  }
  if (v72)
  {
    if ((void)v76) {
      (*(void (**)(void))(*(void *)v72 + 40))();
    }
    *(void *)&long long v76 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v72 = 0;
    ++v75;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v69);
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  long long v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      uint64_t v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, char *a2, int a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if (*((_WORD *)result + 11) == 3)
    {
      LOBYTE(v7) = 2;
      DWORD1(v7) = a3;
      *((void *)&v7 + 1) = a2;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = result;
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    int v1 = result;
    uint64_t v2 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
    ++*(void *)(v2 - 16);
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E7209D8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
}

void anonymous namespace'::LegacyInputStreamAdaptor::~LegacyInputStreamAdaptor(_anonymous_namespace_::LegacyInputStreamAdaptor *this)
{
  *(void *)this = &unk_26E720998;
  if (*((void *)this + 3))
  {
    (*(void (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 10) = 0;
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t anonymous namespace'::LegacyInputStreamAdaptor::Next(_anonymous_namespace_::LegacyInputStreamAdaptor *this, const void **a2, int *a3)
{
  if (*((unsigned char *)this + 48)) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 3);
  if (!v7)
  {
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 2) + 32))(*((void *)this + 2), 256, 0);
    *((void *)this + 3) = v7;
  }
  uint64_t v8 = *((unsigned int *)this + 11);
  if ((int)v8 >= 1)
  {
    *a2 = (const void *)(v7 + *((int *)this + 10) - v8);
    *a3 = v8;
    *((_DWORD *)this + 11) = 0;
    return 1;
  }
  int v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), v7, 256);
  *((_DWORD *)this + 10) = v9;
  if (v9 > 0)
  {
    uint64_t v10 = (const void *)*((void *)this + 3);
    *((void *)this + 4) += v9;
    *a3 = v9;
    *a2 = v10;
    return 1;
  }
  if (v9 < 0) {
    *((unsigned char *)this + 48) = 1;
  }
  (*(void (**)(void, void))(**((void **)this + 2) + 40))(*((void *)this + 2), *((void *)this + 3));
  uint64_t result = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t anonymous namespace'::LegacyInputStreamAdaptor::BackUp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

BOOL anonymous namespace'::LegacyInputStreamAdaptor::Skip(_anonymous_namespace_::LegacyInputStreamAdaptor *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 48)) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 11);
  if (v4 >= a2)
  {
    *((_DWORD *)this + 11) = v4 - a2;
    return 1;
  }
  else
  {
    int v5 = 0;
    int v6 = a2 - v4;
    *((_DWORD *)this + 11) = 0;
    do
    {
      int v7 = v5;
      BOOL v8 = __OFSUB__(v6, v5);
      int v9 = v6 - v5;
      if ((v9 < 0) ^ v8 | (v9 == 0)) {
        break;
      }
      if (v9 >= 256) {
        int v9 = 256;
      }
      int v10 = (*(uint64_t (**)(void, unsigned char *, void))(**((void **)this + 1) + 16))(*((void *)this + 1), v11, v9);
      int v5 = v7 + v10;
    }
    while (v10 > 0);
    *((void *)this + 4) += v7;
    return v6 == v7;
  }
}

uint64_t anonymous namespace'::LegacyInputStreamAdaptor::ByteCount(_anonymous_namespace_::LegacyInputStreamAdaptor *this)
{
  return *((void *)this + 4) - *((int *)this + 11);
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720A40;
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E7209D8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 1;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        int v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    int v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      if (*(void *)this == *(void *)(a1 + 272))
      {
        if (*(void *)(a1 + 288))
        {
          unint64_t v10 = **((void **)this + 2) | 0xFFFFFFFF00000000;
          uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * (v10 % *(unsigned int *)(a1 + 312)));
          if (v11 != 0x7FFFFFFF)
          {
            uint64_t v12 = *(void *)(a1 + 304);
            if (*(void *)(v12 + 24 * v11 + 4) == v10)
            {
              return *(void **)(v12 + 24 * v11 + 16);
            }
            else
            {
              while (1)
              {
                LODWORD(v11) = *(_DWORD *)(v12 + 24 * v11) & 0x7FFFFFFF;
                if (v11 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v12 + 24 * v11 + 4) == v10) {
                  return *(void **)(v12 + 24 * v11 + 16);
                }
              }
            }
          }
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

uint64_t *re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    if (*(void *)(a1 + 288))
    {
      unint64_t v4 = **(void **)(a2 + 16) | 0xFFFFFFFF00000000;
      uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * (v4 % *(unsigned int *)(a1 + 312)));
      if (v5 != 0x7FFFFFFF)
      {
        uint64_t v6 = *(void *)(a1 + 304);
        if (*(void *)(v6 + 24 * v5 + 4) == v4)
        {
          return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t))(v6 + 24 * v5 + 16);
        }
        else
        {
          while (1)
          {
            LODWORD(v5) = *(_DWORD *)(v6 + 24 * v5) & 0x7FFFFFFF;
            if (v5 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v6 + 24 * v5 + 4) == v4) {
              return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t))(v6 + 24 * v5 + 16);
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t *re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyInputStreamAdaptor>::close(uint64_t *result)
{
  if (*result)
  {
    int v1 = (_anonymous_namespace_ *)result;
    uint64_t v2 = result + 3;
    uint64_t v3 = result[23];
    if (v3)
    {
      uint64_t v4 = *v2;
      rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(result[23]);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v3);
    }
    *((void *)v1 + 23) = 0;
    uint64_t v5 = *((void *)v1 + 22);
    if (v5)
    {
      uint64_t v6 = *((void *)v1 + 3);
      rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::~GenericDocument(*((void **)v1 + 22));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v5);
      *((void *)v1 + 22) = 0;
    }
    re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 192);
    if (!*((unsigned char *)v1 + 40)) {
    uint64_t result = (uint64_t *)re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 96);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)v1 + 24))();
      *((void *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *(void *)int v1 = 0;
    uint64_t *v2 = 0;
    v2[1] = 0;
  }
  return result;
}

_anonymous_namespace_ *re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyInputStreamAdaptor>::popState(_anonymous_namespace_ *result, int a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *((void *)result + 14);
  if (!v4)
  {
    uint64_t result = v6;
    if (v6 && (v7 & 1) != 0) {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
    uint64_t v4 = *(void *)(v3 + 112);
  }
  uint64_t v5 = v4 - 1;
  if (*(unsigned __int8 *)(*(void *)(v3 + 128) + 48 * v5) != a2)
  {
    uint64_t result = v6;
    if (v6 && (v7 & 1) != 0) {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
    uint64_t v5 = *(void *)(v3 + 112) - 1;
  }
  *(void *)(v3 + 112) = v5;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyInputStreamAdaptor>::setError(uint64_t a1, uint64_t *a2)
{
  *(void *)&long long v8 = 400;
  *((void *)&v8 + 1) = re::FoundationErrorCategory(void)::instance;
  uint64_t v3 = a2[2];
  uint64_t v2 = a2[3];
  uint64_t v11 = v3;
  uint64_t v12 = v2;
  uint64_t v5 = a2[1];
  uint64_t v9 = *a2;
  uint64_t v4 = v9;
  uint64_t v10 = v5;
  a2[2] = 0;
  a2[3] = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, &v8);
  if (v4 && (v5 & 1) != 0)
  {
    char v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return v7(v4, v3);
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  re::DynamicString::setCapacity(&v32, 0);
  uint64_t v31 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v32, a3, &a9);
  uint64_t v12 = a1 + 24;
  if (v20) {
    uint64_t v13 = *(unsigned char **)&v21[7];
  }
  else {
    uint64_t v13 = v21;
  }
  if (v33) {
    uint64_t v14 = v34;
  }
  else {
    uint64_t v14 = (char *)&v33 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v22, "deserialize", v13, v14);
  *(void *)&long long v26 = 400;
  *((void *)&v26 + 1) = re::FoundationErrorCategory(void)::instance;
  uint64_t v15 = v24;
  uint64_t v29 = v24;
  uint64_t v30 = v25;
  uint64_t v16 = v22;
  char v17 = v23;
  uint64_t v27 = v22;
  uint64_t v28 = v23;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v12, &v26);
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v15);
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  uint64_t result = (uint64_t)v32;
  if (v32)
  {
    if (v33) {
      return (*(uint64_t (**)(void))(*v32 + 40))();
    }
  }
  return result;
}

void *re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyInputStreamAdaptor>::combineLabels(_anonymous_namespace_ *a1, unint64_t a2, uint64_t a3, const char *a4)
{
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  uint64_t result = re::DynamicString::setCapacity(a1, 0);
  if (a2 >= 2)
  {
    unint64_t v9 = a2 - 1;
    uint64_t v10 = a3 + 48;
    do
    {
      unsigned int v11 = *(unsigned __int8 *)(v10 - 48);
      BOOL v12 = v11 > 0xA;
      int v13 = (1 << v11) & 0x608;
      if (v12 || v13 == 0)
      {
        uint64_t v15 = *(unsigned char **)(v10 + 8);
        if (v15 && *v15)
        {
          char __src = 47;
          re::DynamicString::append(a1, &__src, 1uLL);
          size_t v16 = strlen(*(const char **)(v10 + 8));
          uint64_t result = re::DynamicString::append(a1, *(const char **)(v10 + 8), v16);
        }
        if (*(unsigned char *)v10 == 5) {
          uint64_t result = (void *)re::DynamicString::appendf(a1, "/%lld", *(void *)(v10 + 32));
        }
      }
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  if (a4 && *a4)
  {
    char v19 = 47;
    re::DynamicString::append(a1, &v19, 1uLL);
    size_t v17 = strlen(a4);
    return re::DynamicString::append(a1, a4, v17);
  }
  return result;
}

uint64_t re::serializeType<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_18;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12))
  {
LABEL_268:
    return 0;
  }
  uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 16);
  }
  else {
    int v20 = -1;
  }
  uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
  if (v21) {
    int v22 = *(_DWORD *)(v21 + 16);
  }
  else {
    int v22 = -1;
  }
  if (v20 != v22)
  {
    long long v26 = re::TypeInfo::name(this);
    uint64_t v27 = re::TypeInfo::name(a6);
    if (re::StringID::operator==(v26, v27))
    {
      uint64_t v28 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      if (v28) {
        int v29 = *(_DWORD *)(v28 + 16);
      }
      else {
        int v29 = -1;
      }
      re::TypeInfo::atVersion(this, v29, (unsigned __int8 *)&v223);
      if ((_BYTE)v223)
      {
        if (a7) {
          Instance = 0;
        }
        else {
          Instance = re::TypeInfo::createInstance((re::TypeInfo *)v224, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        }
        if (*(unsigned char *)(a1 + 64)
          || ((*(void (**)(uint64_t, char *, const re::TypeInfo *, void **, uint64_t *, re::TypeInfo *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, Instance, v224, a6, a7), *(unsigned char *)(a1 + 64)))
        {
          if (!Instance) {
            return 0;
          }
          uint64_t v120 = *(re::Allocator **)(a1 + 48);
          uint64_t v121 = *(void **)(a1 + 264);
          v122 = (unint64_t *)v224;
          v123 = Instance;
LABEL_186:
          re::TypeInfo::releaseInstance((re::TypeInfo *)v122, v123, v120, v121);
          return 0;
        }
        if ((a7 & 1) == 0)
        {
          re::TypeInfo::TypeInfo((uint64_t)v219, (uint64_t)v224);
          re::internal::upgradeObject(Instance, v219, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
          if (!buf[0])
          {
            if (v232) {
              LOBYTE(v196) = v234;
            }
            else {
              v196 = v233;
            }
            if (!buf[0] && v231 && (v232 & 1) != 0)
            {
              v171 = *(void (**)(void))(*(void *)v231 + 40);
LABEL_307:
              v171();
            }
            return 0;
          }
        }
        return 1;
      }
      uint64_t v60 = re::TypeInfo::name(a6)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      LOBYTE(v218) = v60;
      uint64_t v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
    }
    else
    {
      uint64_t v44 = re::TypeInfo::name(a6)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      re::TypeInfo::name(this);
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      LOBYTE(v218) = v44;
      uint64_t v30 = "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.";
    }
LABEL_252:
    uint64_t v155 = a1;
    v156 = a2;
    goto LABEL_253;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v66 = **((void **)this + 2);
        uint64_t v67 = **((void **)a6 + 2);
        if ((unsigned __int16)v66 == (unsigned __int16)v67)
        {
          BOOL v18 = WORD1(v66) == WORD1(v67);
          uint64_t v68 = (v67 ^ v66) & 0xFFFFFF00000000;
          if (v18 && v68 == 0) {
            goto LABEL_22;
          }
        }
        goto LABEL_268;
      }
      if (!re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_268;
      }
LABEL_22:
      uint64_t v23 = re::TypeInfo::name(this);
      unint64_t v24 = (unint64_t)*v23 >> 1;
      if (v24 <= 0xCA3DEFB5)
      {
        if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
        {
          if ((unint64_t)*v23 >> 1 <= 0x2E9355)
          {
            if (v24 != 104431)
            {
              if (v24 == 3029738)
              {
              }
LABEL_327:
              uint64_t v218 = re::TypeInfo::name(this)[1];
              uint64_t v30 = "Unsupported basic type \"%s\".";
              goto LABEL_252;
            }
            goto LABEL_289;
          }
          if (v24 == 3052374)
          {
          }
          uint64_t v160 = 3327612;
          goto LABEL_275;
        }
        if ((unint64_t)*v23 >> 1 > 0xB0F77BD0)
        {
          if (v24 == 2969009105)
          {
          }
          else
          {
            if (v24 != 3111160798) {
              goto LABEL_327;
            }
          }
        }
        if (v24 == 97526364)
        {
        }
        uint64_t v56 = 109413500;
        goto LABEL_196;
      }
      if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
      {
        if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
        {
          if (v24 == 0x18E6A9A093)
          {
          }
          else
          {
            if (v24 != 0x303EE86A734) {
              goto LABEL_327;
            }
          }
        }
        if (v24 == 0x303EE8780EELL)
        {
        }
        if (v24 != 0x303EE88E58DLL) {
          goto LABEL_327;
        }
LABEL_286:
      }
      if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
      {
        if (v24 == 0x16749DFF03)
        {
LABEL_289:
        }
        uint64_t v160 = 0x16749F63A2;
LABEL_275:
        if (v24 != v160) {
          goto LABEL_327;
        }
      }
      if (v24 == 3393056694) {
        goto LABEL_286;
      }
      uint64_t v56 = 0x16749D2549;
LABEL_196:
      if (v24 != v56) {
        goto LABEL_327;
      }
    case 2:
      if (this == a6) {
        goto LABEL_218;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v70 = **((void **)this + 2);
        uint64_t v71 = **((void **)a6 + 2);
        if ((unsigned __int16)v70 == (unsigned __int16)v71
          && WORD1(v70) == WORD1(v71)
          && ((v71 ^ v70) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_122;
        }
        int v31 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_122:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v130 = **((void **)this + 2);
            uint64_t v131 = **((void **)a6 + 2);
            if ((unsigned __int16)v130 == (unsigned __int16)v131
              && ((BOOL v18 = WORD1(v130) == WORD1(v131), v132 = (v131 ^ v130) & 0xFFFFFF00000000, v18)
                ? (BOOL v133 = v132 == 0)
                : (BOOL v133 = 0),
                  v133))
            {
LABEL_218:
              BOOL v74 = 1;
            }
            else
            {
              BOOL v74 = 0;
            }
          }
          else
          {
            BOOL v74 = re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            *(void *)long long buf = 0;
            if (!result) {
              return result;
            }
            if (*(void *)buf) {
            return *(unsigned char *)(a1 + 64) == 0;
            }
          }
          unint64_t v223 = 0;
          unint64_t v134 = v223;
          if (!v223)
          {
            uint64_t v30 = "Failed to read enum constant. String is empty.";
            goto LABEL_251;
          }
          if (v223 >= 0x401)
          {
            LOBYTE(v218) = v223;
            uint64_t v30 = "Failed to read enum constant. String is too long. Length: %zu";
            goto LABEL_251;
          }
          id v169 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), v223 + 1, 0);
          v169[v134] = 0;
          if (*(unsigned char *)(a1 + 64))
          {
LABEL_306:
            v171 = *(void (**)(void))(**(void **)(a1 + 56) + 40);
            goto LABEL_307;
          }
          uint64_t v181 = *v169;
          if (*v169)
          {
            char v182 = v169[1];
            if (v182)
            {
              v183 = (unsigned __int8 *)(v169 + 2);
              do
              {
                uint64_t v181 = 31 * v181 + v182;
                int v184 = *v183++;
                char v182 = v184;
              }
              while (v184);
            }
          }
          *(void *)long long buf = 2 * v181;
          *(void *)&buf[8] = v169;
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(a6, (const re::TypeInfo *)buf, v170);
          re::StringID::destroyString((re::StringID *)buf);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            v197 = *re::foundationSerializationLogObjects(v186);
            if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
            {
              v198 = v197;
              uint64_t v199 = re::TypeInfo::name(a6)[1];
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v169;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v199;
              _os_log_impl(&dword_233120000, v198, OS_LOG_TYPE_INFO, "String \"%s\" is not a valid enum constant of type \"%s\" - skipping.", buf, 0x16u);
            }
            v190 = 0;
          }
          else if (v74)
          {
            uint64_t v187 = re::TypeInfo::enumConstants(this);
            unint64_t v189 = EnumConstantIndex - v188;
            if (EnumConstantIndex >= v188)
            {
              uint64_t v210 = re::TypeInfo::renamedEnumConstants(this);
              if (v211 <= v189)
              {
                re::internal::assertLog((re::internal *)6, v211, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v189, v211);
                _os_crash();
                __break(1u);
                JUMPOUT(0x233EDBE5CLL);
              }
              v190 = (const void *)(v210 + 24 * v189);
            }
            else
            {
              v190 = (const void *)(v187 + 24 * EnumConstantIndex);
            }
          }
          else
          {
            v201 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (!v201
              || (v190 = (const void *)re::internal::TypeTranslationTable::translateSerializedEnum(v201, a6, EnumConstantIndex, this)) == 0)
            {
              re::TypeInfo::name(this);
              goto LABEL_306;
            }
          }
          (*(void (**)(void, char *))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v169);
          if (v190) {
            memcpy(a4, v190, *(unsigned int *)(*((void *)this + 2) + 8));
          }
          return *(unsigned char *)(a1 + 64) == 0;
        }
        int v31 = *((unsigned __int8 *)this + 12);
      }
      if (v31 == *((unsigned __int8 *)a6 + 12))
      {
        uint64_t v72 = re::TypeInfo::name(this);
        uint64_t v73 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v72, v73)) {
          goto LABEL_122;
        }
      }
      goto LABEL_268;
    case 3:
      if (this == a6) {
        goto LABEL_129;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v75 = **((void **)this + 2);
        uint64_t v76 = **((void **)a6 + 2);
        if ((unsigned __int16)v75 == (unsigned __int16)v76
          && WORD1(v75) == WORD1(v76)
          && ((v76 ^ v75) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_129;
        }
        int v32 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_129;
        }
        int v32 = *((unsigned __int8 *)this + 12);
      }
      if (v32 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_268;
      }
LABEL_129:
      if (a7)
      {
        LOBYTE(Tag) = 0;
        if ((_BYTE)Tag)
        {
          long long v77 = *(re::internal **)(a1 + 272);
          re::TypeInfo::referencedType(a6, (uint64_t)&v223);
          re::internal::translateType(v77, (const re::TypeRegistry *)&v223, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, 0, buf, buf, 1);
          }
        }
        int v78 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v223, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        v226[0] = (*(uint64_t (**)(uint64_t *))(*(void *)&buf[16] + 80))(a4) != 0;
        if (v226[0])
        {
          long long v80 = re::TypeInfo::createInstance((re::TypeInfo *)&v223, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          (*(void (**)(uint64_t *, void **))(*(void *)&buf[16] + 88))(a4, v80);
          re::TypeInfo::releaseInstance((re::TypeInfo *)&v223, v80, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          uint64_t v81 = (*(uint64_t (**)(uint64_t *))(*(void *)&buf[16] + 80))(a4);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 72))(a1, a2, 0, v81, &v223, &Tag, 0);
          }
        }
        else
        {
          (*(void (**)(uint64_t *, void, double))(*(void *)&buf[16] + 88))(a4, 0, v79);
        }
        int v78 = (_anonymous_namespace_ *)(a1 + 24);
      }
      return *(unsigned char *)(a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_145;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v82 = **((void **)this + 2);
        uint64_t v83 = **((void **)a6 + 2);
        if ((unsigned __int16)v82 == (unsigned __int16)v83)
        {
          BOOL v18 = WORD1(v82) == WORD1(v83);
          uint64_t v84 = (v83 ^ v82) & 0xFFFFFF00000000;
          if (v18 && v84 == 0) {
            goto LABEL_145;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_145;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_268;
      }
      uint64_t v86 = *((void *)this + 2);
      uint64_t v87 = *((void *)a6 + 2);
      int v88 = *(_DWORD *)(v87 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v86 + 84) & 0xFFFFFF) != 0)
      {
        if (!v88) {
          goto LABEL_268;
        }
LABEL_145:
        if (a7)
        {
          char v89 = *(re::internal **)(a1 + 272);
          re::TypeInfo::referencedType(a6, (uint64_t)&v223);
          re::internal::translateType(v89, (const re::TypeRegistry *)&v223, (uint64_t)buf);
          uint64_t v90 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, buf);
          if (!v90) {
            goto LABEL_239;
          }
          uint64_t v91 = (void (*)(uint64_t, void, void, void, unsigned char *, unsigned char *, uint64_t))v90;
          uint64_t v92 = *((void *)a6 + 2);
          int v93 = *(_DWORD *)(v92 + 84) & 0xFFFFFF;
          if (v93)
          {
            unint64_t v94 = 0;
            int v95 = 8;
          }
          else
          {
            unint64_t v94 = *(int *)(v92 + 88);
            int v95 = 4;
          }
          unint64_t v223 = v94;
          v101 = (_anonymous_namespace_ *)(a1 + 24);
          if (!result) {
            return result;
          }
          unint64_t v157 = v223;
          if (v93) {
            BOOL v158 = v223 == 0;
          }
          else {
            BOOL v158 = 1;
          }
          char v159 = v158;
          if (v158)
          {
            if (!v223) {
              goto LABEL_365;
            }
          }
          else
          {
            v225[0] = 0;
            v225[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, void, void *))(*(void *)a1 + 16))(a1, 0, v225);
          }
          do
          {
            v91(a1, 0, 0, 0, buf, buf, 1);
            --v157;
          }
          while (v157);
          if (v159)
          {
LABEL_365:
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
        else
        {
          re::TypeInfo::referencedType(this, (uint64_t)&v223);
          re::TypeInfo::referencedType(a6, (uint64_t)&Tag);
          re::TypeInfo::TypeInfo((uint64_t)v226, (uint64_t)this);
          uint64_t v96 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v223);
          if (!v96) {
            goto LABEL_249;
          }
          uint64_t v97 = (void (*)(uint64_t, void, void, uint64_t, unint64_t *, uint64_t *, void))v96;
          uint64_t v98 = re::ArrayAccessor::size((re::ArrayAccessor *)v226, (char *)a4);
          uint64_t v220 = v98;
          int v99 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v99) {
            int v100 = 8;
          }
          else {
            int v100 = 4;
          }
          v101 = (_anonymous_namespace_ *)(a1 + 24);
          if (!result) {
            return result;
          }
          uint64_t v102 = (const re::TypeInfo *)v220;
          if (v98 != v220)
          {
            if ((*(_DWORD *)(v227 + 84) & 0xFFFFFF) == 0)
            {
              LOBYTE(v218) = v98;
              uint64_t v30 = "Invalid array size. Expected size = %zu, actual size = %zu";
              goto LABEL_251;
            }
            re::TypeInfo::referencedType((re::TypeInfo *)v226, (uint64_t)buf);
            unsigned int v103 = *(_DWORD *)(*(void *)&buf[16] + 8);
            if (!is_mul_ok(v103, (unint64_t)v102)) {
              goto LABEL_173;
            }
            re::ArrayAccessor::reset((re::ArrayAccessor *)v226, (void **)a4, *(re::Allocator **)(a1 + 48), v102);
          }
          if (v99) {
            BOOL v191 = v102 == 0;
          }
          else {
            BOOL v191 = 1;
          }
          char v192 = v191;
          if (v191)
          {
            if (!v102) {
              goto LABEL_365;
            }
          }
          else
          {
            uint64_t v193 = *a4;
            v221[0] = 0;
            v221[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v193, v221);
          }
          unint64_t v194 = 0;
          do
          {
            uint64_t v195 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v226, (char *)a4, v194);
            v97(a1, 0, 0, v195, &v223, &Tag, 0);
            ++v194;
          }
          while (v102 != (const re::TypeInfo *)v194);
          if (v192) {
            goto LABEL_365;
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        goto LABEL_365;
      }
      if (!v88 && *(_DWORD *)(v86 + 88) == *(_DWORD *)(v87 + 88)) {
        goto LABEL_145;
      }
      goto LABEL_268;
    case 5:
      if (this == a6) {
        goto LABEL_163;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v104 = **((void **)this + 2);
        uint64_t v105 = **((void **)a6 + 2);
        if ((unsigned __int16)v104 == (unsigned __int16)v105
          && WORD1(v104) == WORD1(v105)
          && ((v105 ^ v104) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_163;
        }
        int v33 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_163;
        }
        int v33 = *((unsigned __int8 *)this + 12);
      }
      if (v33 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_268;
      }
LABEL_163:
      if (a7)
      {
        BOOL v106 = *(re::internal **)(a1 + 272);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::internal::translateType(v106, (const re::TypeRegistry *)&Tag, (uint64_t)&v223);
        uint64_t v107 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v223);
        if (!v107) {
          goto LABEL_249;
        }
        uint64_t v108 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v107;
        *(void *)long long buf = 0;
        v101 = (_anonymous_namespace_ *)(a1 + 24);
        uint64_t result = 0;
        if (v109)
        {
          for (uint64_t i = *(void *)buf; i; --i)
            v108(a1, 0, 0, 0, &v223, &v223, 1);
          goto LABEL_365;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&v223, (uint64_t)&buf[8]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
      re::TypeInfo::TypeInfo((uint64_t)v226, (uint64_t)this);
      uint64_t v111 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v223);
      if (!v111) {
        goto LABEL_249;
      }
      uint64_t v112 = (void (*)(uint64_t, void, void, uint64_t, unint64_t *, uint64_t *, void))v111;
      uint64_t v113 = (*(uint64_t (**)(uint64_t *))(v227 + 80))(a4);
      v225[0] = v113;
      v101 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = 0;
      if (!v114) {
        return result;
      }
      unint64_t v115 = v225[0];
      if (v113 != v225[0])
      {
        re::TypeInfo::referencedType((re::TypeInfo *)v226, (uint64_t)buf);
        unsigned int v103 = *(_DWORD *)(*(void *)&buf[16] + 8);
        if (!is_mul_ok(v103, v115))
        {
LABEL_173:
          LOBYTE(v218) = v103;
          uint64_t v30 = "Size overflow during deserialization. Element size = %zu, count = %zu";
          goto LABEL_251;
        }
        uint64_t v172 = *(void *)(a1 + 48);
        v173 = *(void (**)(uint64_t *, unsigned char *, uint64_t, unint64_t))(v227 + 88);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v226);
        v173(a4, buf, v172, v115);
      }
      if (*(void *)(v227 + 96))
      {
        if (v115)
        {
          for (uint64_t j = 0; j != v115; ++j)
          {
            uint64_t v175 = (*(uint64_t (**)(uint64_t *, uint64_t))(v227 + 96))(a4, j);
            v112(a1, 0, 0, v175, &v223, &Tag, 0);
          }
        }
      }
      else
      {
        v176 = *(uint64_t (**)(uint64_t *, void))(v227 + 104);
        if (!v176 || !*(void *)(v227 + 112) || !*(void *)(v227 + 120))
        {
          int v180 = (re::TypeInfo *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v226);
          uint64_t v218 = re::TypeInfo::name(v180)[1];
          uint64_t v30 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_252;
        }
        uint64_t v177 = v176(a4, *(void *)(a1 + 56));
        uint64_t v178 = (*(uint64_t (**)(void))(v227 + 112))();
        if (v178)
        {
          uint64_t v179 = v178;
          do
          {
            v112(a1, 0, 0, v179, &v223, &Tag, 0);
            uint64_t v179 = (*(uint64_t (**)(uint64_t))(v227 + 112))(v177);
          }
          while (v179);
        }
        (*(void (**)(uint64_t, void))(v227 + 120))(v177, *(void *)(a1 + 56));
      }
      goto LABEL_365;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&v223, (uint64_t)&buf[8]);
      uint64_t v35 = re::TypeInfo::name((re::TypeInfo *)&v223);
      int v36 = BYTE4(v224[0]);
      if (BYTE4(v224[0]) != 1) {
        goto LABEL_98;
      }
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v223))
      {
        *(void *)long long buf = 0x303EE88E58DLL;
        *(void *)&buf[8] = "uint64_t";
        if (re::StringID::operator==(v35, buf)) {
        uint64_t Tag = 3393056694;
        }
        uint64_t v229 = "size_t";
        BOOL v126 = re::StringID::operator==(v35, &Tag);
        if (v126) {
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))v62)(a1, a2, a3, a4, this, a6, a7);
        }
        *(void *)long long buf = 0x303EE8780EELL;
        *(void *)&buf[8] = "uint32_t";
        BOOL v127 = re::StringID::operator==(v35, buf);
        if (v127) {
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))v62)(a1, a2, a3, a4, this, a6, a7);
        }
        *(void *)long long buf = 0x303EE86A734;
        *(void *)&buf[8] = "uint16_t";
        BOOL v128 = re::StringID::operator==(v35, buf);
        if (v128) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
        }
        *(void *)long long buf = 0x18E6A9A093;
        *(void *)&buf[8] = "uint8_t";
        BOOL v129 = re::StringID::operator==(v35, buf);
        if (v129) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
        }
        *(void *)long long buf = 0x16749F63A2;
        *(void *)&buf[8] = "int64_t";
        if (re::StringID::operator==(v35, buf)) {
        uint64_t Tag = 3327612;
        }
        uint64_t v229 = "long";
        BOOL v207 = re::StringID::operator==(v35, &Tag);
        if (v207) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
        }
        *(void *)long long buf = 104431;
        *(void *)&buf[8] = "int";
        BOOL v208 = re::StringID::operator==(v35, buf);
        if (v208) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
        }
        *(void *)long long buf = 109413500;
        *(void *)&buf[8] = "short";
        BOOL v209 = re::StringID::operator==(v35, buf);
        if (v209) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
        }
      }
      else
      {
        int v36 = BYTE4(v224[0]);
LABEL_98:
        if (v36 == 8)
        {
          if ((unint64_t)*v35 >> 1 == 0x134375A94D9F7110)
          {
            uint64_t v61 = (char *)v35[1];
            if (v61 == "DynamicString") {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
            }
            int v63 = strcmp(v61, "DynamicString");
            if (!v63) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
            }
          }
          *(void *)long long buf = 0x22C6ED80D0CLL;
          *(void *)&buf[8] = "StringID";
          BOOL v64 = re::StringID::operator==(v35, buf);
          if (v64) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v62)(a1, a2, a3, a4, this, a6, a7);
          }
        }
      }
      if (this == a6) {
        goto LABEL_232;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v135 = **((void **)this + 2);
        uint64_t v136 = **((void **)a6 + 2);
        if ((unsigned __int16)v135 == (unsigned __int16)v136
          && WORD1(v135) == WORD1(v136)
          && ((v136 ^ v135) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_232;
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, v34))
      {
LABEL_232:
        if (a7)
        {
          uint64_t v137 = *(re::internal **)(a1 + 272);
          re::TypeInfo::referencedType(a6, (uint64_t)&v223);
          re::internal::translateType(v137, (const re::TypeRegistry *)&v223, (uint64_t)buf);
          uint64_t v138 = *(re::internal **)(a1 + 272);
          re::TypeInfo::dictionaryValueType(a6, (uint64_t)&Tag);
          re::internal::translateType(v138, (const re::TypeRegistry *)&Tag, (uint64_t)&v223);
          uint64_t v139 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, buf);
          if (!v139)
          {
LABEL_239:
            uint64_t v145 = (unint64_t *)buf;
LABEL_250:
            uint64_t v218 = re::TypeInfo::name((re::TypeInfo *)v145)[1];
            uint64_t v30 = "Failed to resolve serialize function for type \"%s\"";
            goto LABEL_251;
          }
          v140 = (void (*)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))v139;
          uint64_t v141 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v223);
          if (v141)
          {
            uint64_t v142 = (void (*)(uint64_t, const char *, void, void, unint64_t *, unint64_t *, uint64_t))v141;
            uint64_t Tag = 0;
            v143 = (_anonymous_namespace_ *)(a1 + 24);
            if (!result) {
              return result;
            }
            for (uint64_t k = Tag; k; --k)
            {
              v140(a1, "key", 0, 0, buf, buf, 1);
              v142(a1, "value", 0, 0, &v223, &v223, 1);
            }
            goto LABEL_248;
          }
LABEL_249:
          uint64_t v145 = &v223;
          goto LABEL_250;
        }
        re::TypeInfo::referencedType(this, (uint64_t)&v223);
        re::TypeInfo::dictionaryValueType(this, (uint64_t)&Tag);
        re::TypeInfo::referencedType(a6, (uint64_t)v226);
        re::TypeInfo::dictionaryValueType(a6, (uint64_t)v225);
        re::TypeInfo::TypeInfo((uint64_t)v221, (uint64_t)this);
        uint64_t v146 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v223);
        if (!v146) {
          goto LABEL_249;
        }
        v147 = (void (*)(uint64_t, const char *, void, void **, unint64_t *, unsigned char *, void))v146;
        uint64_t v148 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
        if (!v148)
        {
          uint64_t v145 = (unint64_t *)&Tag;
          goto LABEL_250;
        }
        uint64_t v149 = (void (*)(uint64_t, const char *, void, uint64_t, uint64_t *, void *, void))v148;
        uint64_t v220 = (*(uint64_t (**)(uint64_t *))(v222 + 88))(a4);
        v143 = (_anonymous_namespace_ *)(a1 + 24);
        if (!result) {
          return result;
        }
        uint64_t v150 = *(void *)(a1 + 48);
        v151 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v222 + 96);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v221);
        v151(a4, buf, v150);
        uint64_t v152 = v220;
        if (!v220) {
          goto LABEL_248;
        }
        v153 = re::TypeInfo::createInstance((re::TypeInfo *)&v223, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        while (1)
        {
          v147(a1, "key", 0, v153, &v223, v226, 0);
          uint64_t v120 = *(re::Allocator **)(a1 + 48);
          if (*(unsigned char *)(a1 + 64)) {
            break;
          }
          uint64_t v154 = (*(uint64_t (**)(uint64_t *, void *, re::Allocator *, void **))(v222 + 104))(a4, v221, v120, v153);
          v149(a1, "value", 0, v154, &Tag, v225, 0);
          if (!--v152)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)&v223, v153, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
LABEL_248:
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
        uint64_t v121 = *(void **)(a1 + 264);
        v122 = &v223;
        v123 = v153;
        goto LABEL_186;
      }
      if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_268;
      }
      goto LABEL_232;
    case 7:
      if (this == a6) {
        goto LABEL_57;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v116 = **((void **)this + 2);
        uint64_t v117 = **((void **)a6 + 2);
        if ((unsigned __int16)v116 != (unsigned __int16)v117) {
          goto LABEL_268;
        }
        BOOL v18 = WORD1(v116) == WORD1(v117);
        uint64_t v118 = (v117 ^ v116) & 0xFFFFFF00000000;
        if (!v18 || v118 != 0) {
          goto LABEL_268;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_268;
      }
LABEL_57:
      uint64_t v37 = (_anonymous_namespace_ *)(a1 + 24);
      if (a7)
      {
        if (!result) {
          return result;
        }
        unint64_t v223 = 0;
        if (v223 < *(unsigned int *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, v223, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, buf, buf, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        long long v57 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        uint64_t Tag = re::UnionAccessor::readTag(v57, (char *)a4);
        long long v58 = (uint64_t *)Tag;
        re::UnionAccessor::reset((re::UnionAccessor *)buf, (char *)a4, (const re::TypeInfo *)Tag, *(re::Allocator **)(a1 + 48));
        if ((unint64_t)v58 < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, (uint64_t)v58, (uint64_t)&v223);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, uint64_t *, unint64_t *, unint64_t *, void))(*(void *)a1 + 72))(a1, "value", 0, a4, &v223, &v223, 0);
          }
        }
      }
      goto LABEL_299;
    case 8:
      if (!a7) {
        goto LABEL_68;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        long long v65 = *(re::TypeRegistry **)(a1 + 272);
        uint64_t Tag = 0x2686EB529B3EE220;
        uint64_t v229 = "DynamicString";
        re::TypeRegistry::typeInfo(v65, (const re::StringID *)&Tag, buf);
        re::TypeInfo::TypeInfo((uint64_t)&v223, (uint64_t)&buf[8]);
        re::StringID::destroyString((re::StringID *)&Tag);
        uint64_t v42 = (re *)&v223;
        uint64_t v43 = (re::TypeInfo *)&v223;
        uint64_t v40 = a1;
        uint64_t v41 = a2;
        goto LABEL_108;
      }
      char v38 = re::TypeInfo::name(this);
      *(void *)long long buf = 0x134375A94D9F7110;
      *(void *)&buf[8] = "DynamicString";
      if (re::StringID::operator==(v38, buf))
      {
        uint64_t v40 = a1;
        uint64_t v41 = a2;
        uint64_t v42 = this;
        uint64_t v43 = this;
LABEL_108:
        return *(unsigned char *)(a1 + 64) == 0;
      }
LABEL_68:
      uint64_t v45 = *((void *)this + 2);
      if ((*(unsigned char *)(v45 + 48) & 4) != 0)
      {
        uint64_t v53 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)buf, *(void *)this, v45);
        re::TypeMemberCollection::operator[](v53, 0, (uint64_t)&v223);
        int v54 = (char *)a4 + *(unsigned int *)(v224[1] + 24);
        re::TypeMemberInfo::memberType((re::TypeMemberInfo *)&v223, (uint64_t)&Tag);
        if (re::areSameVersion(this, a6, v55))
        {
          if (*(unsigned char *)(a1 + 64)) {
            return 0;
          }
          return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, char *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v54, &Tag, &Tag, a7);
        }
        uint64_t v124 = *((void *)a6 + 2);
        if (*(_DWORD *)(v124 + 88) == 1)
        {
          __int16 v125 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)buf, *(void *)a6, v124);
          re::TypeMemberCollection::operator[](v125, 0, (uint64_t)v225);
          re::TypeMemberInfo::memberType((re::TypeMemberInfo *)v225, (uint64_t)v226);
          if (!*(unsigned char *)(a1 + 64)) {
            return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, char *, uint64_t *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v54, &Tag, v226, a7);
          }
          return 0;
        }
        goto LABEL_268;
      }
      uint64_t v37 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = 0;
      if (!v46) {
        return result;
      }
      uint64_t v47 = *(void *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v47
        && *(_WORD *)(v47 + 22) == 3
        && *(_DWORD *)v47
        && (uint64_t v48 = *(void *)(v47 + 8), (*(_WORD *)(v48 + 46) & 0x40) != 0)
        && ((*(_WORD *)(v48 + 22) & 0x1000) != 0 ? (long long v49 = *(const char **)(v47 + 8)) : (long long v49 = *(const char **)(v48 + 8)),
            !strcmp(v49, "@version")))
      {
        int v50 = *(_DWORD *)(v48 + 24);
      }
      else
      {
        int v50 = 1;
      }
      uint64_t v51 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      if (v51) {
        int v52 = *(_DWORD *)(v51 + 16);
      }
      else {
        int v52 = -1;
      }
      if (v50 == v52)
      {
LABEL_299:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if (*(void *)this != *(void *)a6
        || (uint64_t v166 = **((void **)this + 2),
            uint64_t v167 = **((void **)a6 + 2),
            (unsigned __int16)v166 != (unsigned __int16)v167)
        || WORD1(v166) != WORD1(v167)
        || ((v167 ^ v166) & 0xFFFFFF00000000) != 0)
      {
        uint64_t v168 = re::TypeInfo::name(a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        LOBYTE(v218) = v168;
        uint64_t v30 = "Type \"%s\" version %u expected in JSON. Actual version found in JSON: %u";
LABEL_251:
        uint64_t v155 = a1;
        v156 = 0;
LABEL_253:
        return 0;
      }
      re::TypeInfo::atVersion(this, v50, (unsigned __int8 *)&v223);
      if (!(_BYTE)v223)
      {
        uint64_t v218 = re::TypeInfo::name(this)[1];
        uint64_t v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
        goto LABEL_251;
      }
      if (a7) {
        v200 = 0;
      }
      else {
        v200 = re::TypeInfo::createInstance((re::TypeInfo *)v224, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
      }
      if (*(unsigned char *)(a1 + 64))
      {
        if (!v200) {
          return 0;
        }
        uint64_t v120 = *(re::Allocator **)(a1 + 48);
        uint64_t v121 = *(void **)(a1 + 264);
        v122 = (unint64_t *)v224;
        v123 = v200;
        goto LABEL_186;
      }
      if ((a7 & 1) == 0)
      {
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)v224);
        re::internal::upgradeObject(v200, (uint64_t **)&Tag, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
        if (!buf[0])
        {
          if (v232) {
            LOBYTE(v217) = v234;
          }
          else {
            v217 = v233;
          }
          if (!buf[0] && v231 && (v232 & 1) != 0) {
            (*(void (**)(void))(*(void *)v231 + 40))();
          }
        }
      }
      break;
    case 9:
      uint64_t v218 = re::TypeInfo::name(this)[1];
      uint64_t v30 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_252;
    default:
      LOBYTE(v218) = *((unsigned char *)this + 12);
      uint64_t v30 = "Invalid type category. Value = %d";
      goto LABEL_252;
  }
  return 1;
}

uint64_t re::internal::setTypeMismatchError<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, re::TypeInfo *this, re::TypeInfo *a4)
{
  uint64_t v7 = re::TypeInfo::name(this)[1];
  re::TypeInfo::name(a4);
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(uint64_t a1, char *a2, BOOL *a3, char a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    int v9 = *((unsigned __int16 *)result + 11);
    if ((v9 & 8) != 0)
    {
      BOOL v12 = v9 == 10;
    }
    else
    {
      if ((v9 & 0x400) == 0
        || !*(unsigned char *)(a1 + 233)
        || ((v9 & 0x1000) != 0 ? (uint64_t v10 = (const char *)result) : (uint64_t v10 = (const char *)*((void *)result + 1)),
            (v11 = (re *)strcasecmp(v10, "true"), BOOL v12 = v11 == 0, v11)
         && (uint64_t v11 = (re *)strcasecmp(v10, "false"), v11)))
      {
        return 0;
      }
      uint64_t v14 = *re::foundationSerializationLogObjects(v11);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136315138;
        uint64_t v16 = v10;
        _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as BOOLean in Bool/String Compatibility Mode", (uint8_t *)&v15, 0xCu);
      }
    }
    if ((a4 & 1) == 0) {
      *a3 = v12;
    }
    uint64_t v13 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v13 - 16);
    return (unsigned int *)1;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(uint64_t a1, char *a2, unsigned char *a3, char a4)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x400) == 0)
    {
      int v9 = (*((_WORD *)result + 11) & 0x1000) != 0 ? 21 - *((char *)result + 21) : *result;
      if (v9 == 1)
      {
        return 0;
      }
    }
    if ((a4 & 1) == 0)
    {
      if ((*((_WORD *)result + 11) & 0x1000) != 0) {
        uint64_t v10 = result;
      }
      else {
        uint64_t v10 = (unsigned char *)*((void *)result + 1);
      }
      *a3 = *v10;
    }
    uint64_t v11 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v11 - 16);
    return (unsigned int *)1;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI8(uint64_t a1, char *a2, unsigned char *a3, char a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x20) != 0)
    {
      int v11 = *result;
      if (v11 != (char)v11)
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_41;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v10 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v10 = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10) {
      BOOL v14 = *v9 == 45;
    }
    else {
      BOOL v14 = 0;
    }
    BOOL v15 = v14;
    if (v10 == (unint64_t)v14) {
      goto LABEL_36;
    }
    unint64_t v16 = v10 - (unint64_t)v14;
    uint64_t v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16) {
        goto LABEL_36;
      }
    }
    if (!v16)
    {
LABEL_36:
      uint64_t v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      uint64_t v17 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v17, v13, buf, &v20);
      if (v17 != v13 && *v17 - 48 <= 9 || *(_DWORD *)buf > 0xFFu || 255 - *(_DWORD *)buf < v20) {
        goto LABEL_41;
      }
      unsigned int v18 = v20 + *(_DWORD *)buf;
      if (!v15)
      {
        if ((v18 & 0x80) != 0) {
          goto LABEL_41;
        }
        LOBYTE(v11) = v20 + buf[0];
        goto LABEL_40;
      }
      if ((v20 + buf[0]) > 0x80u) {
        goto LABEL_41;
      }
LABEL_39:
      int v11 = -v18;
LABEL_40:
      if (v13 != v17) {
        goto LABEL_41;
      }
      uint64_t v19 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        int v22 = v9;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_41:
      return 0;
    }
    unsigned int v18 = 0;
    LOBYTE(v11) = 0;
    if (!v14) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI16(uint64_t a1, char *a2, _WORD *a3, char a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x20) != 0)
    {
      int v11 = *result;
      if (v11 != (__int16)v11)
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_41;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v10 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v10 = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10) {
      BOOL v14 = *v9 == 45;
    }
    else {
      BOOL v14 = 0;
    }
    BOOL v15 = v14;
    if (v10 == (unint64_t)v14) {
      goto LABEL_36;
    }
    unint64_t v16 = v10 - (unint64_t)v14;
    uint64_t v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16) {
        goto LABEL_36;
      }
    }
    if (!v16)
    {
LABEL_36:
      uint64_t v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      uint64_t v17 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v17, v13, buf, &v20);
      if (v17 != v13 && *v17 - 48 <= 9 || *(_WORD *)&buf[2] || 0xFFFF - *(_DWORD *)buf < v20) {
        goto LABEL_41;
      }
      unsigned int v18 = v20 + *(_DWORD *)buf;
      if (!v15)
      {
        if ((v18 & 0x8000) != 0) {
          goto LABEL_41;
        }
        LOWORD(v11) = v20 + *(_WORD *)buf;
        goto LABEL_40;
      }
      if ((unsigned __int16)(v20 + *(_WORD *)buf) > 0x8000u) {
        goto LABEL_41;
      }
LABEL_39:
      int v11 = -v18;
LABEL_40:
      if (v13 != v17) {
        goto LABEL_41;
      }
      uint64_t v19 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        int v22 = v9;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_41:
      return 0;
    }
    unsigned int v18 = 0;
    LOWORD(v11) = 0;
    if (!v14) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI32(uint64_t a1, char *a2, unsigned int *a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x20) != 0)
    {
      unsigned int v11 = *result;
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_39;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v10 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v10 = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10) {
      BOOL v14 = *v9 == 45;
    }
    else {
      BOOL v14 = 0;
    }
    BOOL v15 = v14;
    if (v10 == (unint64_t)v14) {
      goto LABEL_34;
    }
    unint64_t v16 = v10 - (unint64_t)v14;
    uint64_t v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16) {
        goto LABEL_34;
      }
    }
    if (!v16)
    {
LABEL_34:
      uint64_t v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      uint64_t v17 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v17, v13, buf, &v19);
      if (v17 != v13 && *v17 - 48 <= 9 || __CFADD__(*(_DWORD *)buf, v19)) {
        goto LABEL_39;
      }
      unsigned int v11 = *(_DWORD *)buf + v19;
      if (!v15)
      {
        if ((v11 & 0x80000000) != 0) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      if (v11 > 0x80000000) {
        goto LABEL_39;
      }
LABEL_37:
      unsigned int v11 = -v11;
LABEL_38:
      if (v13 != v17) {
        goto LABEL_39;
      }
      unsigned int v18 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v21 = v9;
        _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_39:
      return 0;
    }
    unsigned int v11 = 0;
    if (!v14) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI64(uint64_t a1, char *a2, unint64_t *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x80) != 0)
    {
      unint64_t v11 = *(void *)result;
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_39;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v10 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v10 = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10) {
      BOOL v14 = *v9 == 45;
    }
    else {
      BOOL v14 = 0;
    }
    BOOL v15 = v14;
    if (v10 == (unint64_t)v14) {
      goto LABEL_34;
    }
    unint64_t v16 = v10 - (unint64_t)v14;
    uint64_t v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16) {
        goto LABEL_34;
      }
    }
    if (!v16)
    {
LABEL_34:
      uint64_t v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      uint64_t v17 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v17, v13, buf, &v19);
      if (v17 != v13 && *v17 - 48 <= 9 || __CFADD__(*(void *)buf, v19)) {
        goto LABEL_39;
      }
      unint64_t v11 = *(void *)buf + v19;
      if (!v15)
      {
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      if (v11 > 0x8000000000000000) {
        goto LABEL_39;
      }
LABEL_37:
      unint64_t v11 = -(uint64_t)v11;
LABEL_38:
      if (v13 != v17) {
        goto LABEL_39;
      }
      unsigned int v18 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_39:
      return 0;
    }
    unint64_t v11 = 0;
    if (!v14) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU8(uint64_t a1, char *a2, unsigned char *a3, char a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x40) != 0)
    {
      int v11 = *result;
      if (*result > 0xFF)
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_34;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      LODWORD(v10) = 21 - *((char *)result + 21);
    }
    else {
      LODWORD(v10) = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10)
    {
      uint64_t v10 = v10;
      BOOL v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10) {
          goto LABEL_30;
        }
      }
      if (*v14 - 48 < 0xA)
      {
        BOOL v14 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || *(_DWORD *)buf > 0xFFu || 255 - *(_DWORD *)buf < v16) {
          goto LABEL_34;
        }
        LOBYTE(v11) = v16 + buf[0];
LABEL_33:
        if (v13 != v14) {
          goto LABEL_34;
        }
        BOOL v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          unsigned int v18 = v9;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_30:
      BOOL v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_34:
      return 0;
    }
    LOBYTE(v11) = 0;
    goto LABEL_33;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU16(uint64_t a1, char *a2, _WORD *a3, char a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x40) != 0)
    {
      int v11 = *result;
      if (HIWORD(*result))
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_34;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      LODWORD(v10) = 21 - *((char *)result + 21);
    }
    else {
      LODWORD(v10) = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10)
    {
      uint64_t v10 = v10;
      BOOL v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10) {
          goto LABEL_30;
        }
      }
      if (*v14 - 48 < 0xA)
      {
        BOOL v14 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || *(_WORD *)&buf[2] || 0xFFFF - *(_DWORD *)buf < v16) {
          goto LABEL_34;
        }
        LOWORD(v11) = v16 + *(_WORD *)buf;
LABEL_33:
        if (v13 != v14) {
          goto LABEL_34;
        }
        BOOL v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          unsigned int v18 = v9;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_30:
      BOOL v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_34:
      return 0;
    }
    LOWORD(v11) = 0;
    goto LABEL_33;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU32(uint64_t a1, char *a2, _DWORD *a3, char a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x40) != 0)
    {
      int v11 = *result;
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_32;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      LODWORD(v10) = 21 - *((char *)result + 21);
    }
    else {
      LODWORD(v10) = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10)
    {
      uint64_t v10 = v10;
      BOOL v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10) {
          goto LABEL_28;
        }
      }
      if (*v14 - 48 < 0xA)
      {
        BOOL v14 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || __CFADD__(*(_DWORD *)buf, v16)) {
          goto LABEL_32;
        }
        int v11 = *(_DWORD *)buf + v16;
LABEL_31:
        if (v13 != v14) {
          goto LABEL_32;
        }
        BOOL v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          unsigned int v18 = v9;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_28:
      BOOL v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_32:
      return 0;
    }
    int v11 = 0;
    goto LABEL_31;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU64(uint64_t a1, char *a2, void *a3, char a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x100) != 0)
    {
      uint64_t v11 = *(void *)result;
LABEL_14:
      if ((a4 & 1) == 0) {
        *a3 = v11;
      }
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(unsigned char *)(a1 + 232)) {
      goto LABEL_32;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v9 = (unsigned __int8 *)result;
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      LODWORD(v10) = 21 - *((char *)result + 21);
    }
    else {
      LODWORD(v10) = *result;
    }
    uint64_t v13 = &v9[v10];
    if (v10)
    {
      uint64_t v10 = v10;
      BOOL v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10) {
          goto LABEL_28;
        }
      }
      if (*v14 - 48 < 0xA)
      {
        BOOL v14 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || __CFADD__(*(void *)buf, v16)) {
          goto LABEL_32;
        }
        uint64_t v11 = *(void *)buf + v16;
LABEL_31:
        if (v13 != v14) {
          goto LABEL_32;
        }
        BOOL v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_28:
      BOOL v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_32:
      return 0;
    }
    uint64_t v11 = 0;
    goto LABEL_31;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeFloat(uint64_t a1, char *a2, float *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    __int16 v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        float Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0) {
          *a3 = Double;
        }
        uint64_t v19 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
        ++*(void *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      uint64_t v12 = (const char *)result;
    }
    else {
      uint64_t v12 = (const char *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v13 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v13 = *result;
    }
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(float *)&int v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(float *)&int v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(float *)&int v14 = NAN;
LABEL_34:
      float Double = *(float *)&v14;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 232))
    {
      *(void *)unsigned int v20 = 0;
      float v16 = strtof(v12, (char **)v20);
      BOOL v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      float Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        uint64_t v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unsigned int v20 = 136315138;
          *(void *)&v20[4] = v12;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeDouble(uint64_t a1, char *a2, double *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    __int16 v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        double Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0) {
          *a3 = Double;
        }
        uint64_t v19 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
        ++*(void *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      uint64_t v12 = (const char *)result;
    }
    else {
      uint64_t v12 = (const char *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v13 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v13 = *result;
    }
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(double *)&unint64_t v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(double *)&unint64_t v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(double *)&unint64_t v14 = NAN;
LABEL_34:
      double Double = *(double *)&v14;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 232))
    {
      *(void *)unsigned int v20 = 0;
      float v16 = strtod(v12, (char **)v20);
      BOOL v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      double Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        uint64_t v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unsigned int v20 = 136315138;
          *(void *)&v20[4] = v12;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::readJSONValue(uint64_t a1, char *__s)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 112) - 1;
  int v5 = *(unsigned __int8 *)(v3 + 48 * v4);
  if (!*(unsigned char *)(v3 + 48 * v4)) {
    return *(unsigned int **)(a1 + 176);
  }
  uint64_t v6 = *(unsigned int **)(v3 + 48 * v4 + 40);
  if (!v6) {
    return v6;
  }
  uint64_t v7 = __s;
  if (v5 == 7) {
    goto LABEL_6;
  }
  if (v5 == 5)
  {
    uint64_t v20 = *(void *)(v3 + 48 * v4 + 32);
    if (*v6 <= v20) {
      return 0;
    }
    uint64_t v21 = *((void *)v6 + 1);
    if (!v21) {
      return 0;
    }
    uint64_t v6 = (unsigned int *)(v21 + 24 * v20);
LABEL_26:
    if (*((_WORD *)v6 + 11) != 4) {
      return v6;
    }
    uint64_t v22 = *v6;
    if (v22 < 2) {
      return v6;
    }
    uint64_t v23 = *((void *)v6 + 1);
    if ((*(_WORD *)(v23 + 22) & 0x400) == 0) {
      return v6;
    }
    unint64_t v24 = (*(_WORD *)(v23 + 22) & 0x1000) != 0 ? (const char *)*((void *)v6 + 1) : *(const char **)(v23 + 8);
    if (strcmp(v24, "@cond")) {
      return v6;
    }
    uint64_t v26 = v22 - 1;
    uint64_t v27 = (v22 - 1) - 1;
    uint64_t v28 = (_WORD *)(v23 + 46);
    while (*v28 == 4)
    {
      if (*(_DWORD *)(v28 - 11) < 2u) {
        break;
      }
      uint64_t v29 = *(void *)(v28 - 7);
      if ((*(_WORD *)(v29 + 22) & 0x20) == 0) {
        break;
      }
      if (!v27 || *(_DWORD *)(a1 + 136) <= *(_DWORD *)v29) {
        return (unsigned int *)(v29 + 24);
      }
      --v27;
      v28 += 12;
      if (!--v26)
      {
        re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "evaluateConditional", 1447);
        _os_crash();
        __break(1u);
        break;
      }
    }
    if (v34) {
      uint64_t v30 = *(unsigned char **)&v35[7];
    }
    else {
      uint64_t v30 = v35;
    }
    re::DynamicString::format((re::DynamicString *)"Failed to read version conditional \"%s\". Invalid condition.", (re::DynamicString *)&v36, v30);
    if (v36 && (v37 & 1) != 0) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    if (v33)
    {
      if (v34) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
    }
    return 0;
  }
  if (v5 != 2) {
    goto LABEL_26;
  }
LABEL_6:
  size_t v8 = strlen(__s);
  uint64_t v9 = *v6;
  if (!v9) {
    return 0;
  }
  size_t v10 = v8;
  int v32 = v7;
  uint64_t v11 = v7 + 1;
  uint64_t v12 = *((void *)v6 + 1);
  size_t v13 = v8 - 1;
  for (uint64_t i = (unsigned int *)(v12 + 24); ; i += 12)
  {
    if ((*((_WORD *)i - 1) & 0x1000) != 0) {
      BOOL v15 = i - 6;
    }
    else {
      BOOL v15 = (unsigned int *)*((void *)i - 2);
    }
    if ((*((_WORD *)i - 1) & 0x1000) != 0) {
      int v16 = 21 - *((char *)i - 3);
    }
    else {
      int v16 = *(i - 6);
    }
    if (v10 != v16 || strncmp(v11, (const char *)v15 + 1, v13)) {
      goto LABEL_19;
    }
    if (!v10) {
      break;
    }
    __darwin_ct_rune_t v18 = __toupper(*v32);
    if (v18 == __toupper(*(char *)v15))
    {
      uint64_t v6 = i;
      uint64_t v7 = v32;
      goto LABEL_26;
    }
    uint64_t v12 = *((void *)v6 + 1);
    uint64_t v9 = *v6;
LABEL_19:
    uint64_t v19 = i + 6;
    if (v19 == (unsigned int *)(v12 + 48 * v9)) {
      return 0;
    }
  }
  re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
  uint64_t result = (unsigned int *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::setErrorWrongType(uint64_t a1, const char *a2, uint64_t a3)
{
  if (v8) {
    int v5 = *(unsigned char **)&v9[7];
  }
  else {
    int v5 = v9;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Expected type: \"%s\"", (re::DynamicString *)&v10, v5, a3);
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  uint64_t result = v7;
  if (v7)
  {
    if (v8) {
      return (*(uint64_t (**)(void))(*(void *)v7 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::setErrorValueOutOfTypeRange(uint64_t a1, const char *a2, uint64_t a3)
{
  if (v8) {
    int v5 = *(unsigned char **)&v9[7];
  }
  else {
    int v5 = v9;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Value out of \"%s\" type range.", (re::DynamicString *)&v10, v5, a3);
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  uint64_t result = v7;
  if (v7)
  {
    if (v8) {
      return (*(uint64_t (**)(void))(*(void *)v7 + 40))();
    }
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(unsigned char *a1, char *a2, uint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a1[40]) {
    return 0;
  }
  if (result)
  {
    char v8 = result;
    __int16 v9 = *((_WORD *)result + 11);
    if ((v9 & 0x400) != 0)
    {
      if ((*((_WORD *)result + 11) & 0x1000) != 0) {
        LODWORD(v12) = 21 - *((char *)result + 21);
      }
      else {
        LODWORD(v12) = *result;
      }
      uint64_t v12 = v12;
    }
    else if ((v9 & 0x10) != 0 {
           && a1[232]
    }
           && (Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v7), (int v11 = snprintf(__str, 0x40uLL, "%g", Double)) != 0))
    {
      uint64_t v12 = v11;
    }
    else
    {
      if (!a1[233] || (int v13 = *((unsigned __int16 *)v8 + 11), (v13 & 8) == 0))
      {
        return 0;
      }
      BOOL v14 = v13 == 10;
      uint64_t v12 = 4;
      if (!v14) {
        uint64_t v12 = 5;
      }
    }
    *a3 = v12;
    LOBYTE(v15) = 8;
    DWORD1(v15) = 0;
    *((void *)&v15 + 1) = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v12;
    uint64_t v18 = 0;
    uint64_t v19 = v8;
    return (unsigned int *)1;
  }
  return result;
}

void re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(uint64_t a1, char *a2, char a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v6 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    size_t v7 = *(unsigned int *)(v6 - 24);
    char v8 = *(char **)(v6 - 40);
    if (JSONValue)
    {
      int v11 = JSONValue;
      int v12 = *((unsigned __int16 *)JSONValue + 11);
      if ((v12 & 0x400) != 0)
      {
        if ((a3 & 1) == 0)
        {
          if ((v12 & 0x1000) != 0) {
            uint64_t v21 = (const char *)JSONValue;
          }
          else {
            uint64_t v21 = (const char *)*((void *)JSONValue + 1);
          }
          strncpy(a2, v21, v7);
        }
        goto LABEL_43;
      }
      if (*(unsigned char *)(a1 + 232))
      {
        if ((a3 & 1) == 0 && (v12 & 0x10) != 0)
        {
          double Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(JSONValue, v10);
          int v14 = snprintf(__str, 0x40uLL, "%g", Double);
          if (v14 >= v7) {
            size_t v15 = v7;
          }
          else {
            size_t v15 = v14;
          }
          uint64_t v16 = (re *)memcpy(a2, __str, v15);
          uint64_t v17 = *re::foundationSerializationLogObjects(v16);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_43;
          }
          *(_DWORD *)uint64_t v27 = 136315138;
          *(void *)&v27[4] = __str;
          uint64_t v18 = "Reading JSON number as string \"%s\" in Number/String Compatibility Mode";
          uint64_t v19 = v27;
          goto LABEL_38;
        }
        if ((v12 & 0x10) != 0)
        {
LABEL_43:
          uint64_t v25 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
          *(void *)(v25 - 16) += v7;
          return;
        }
      }
      if (*(unsigned char *)(a1 + 233))
      {
        if ((a3 & 1) == 0 && (v12 & 8) != 0)
        {
          if (v12 == 10) {
            uint64_t v22 = "true";
          }
          else {
            uint64_t v22 = "false";
          }
          uint64_t v23 = strncpy(a2, v22, v7);
          uint64_t v17 = *re::foundationSerializationLogObjects((re *)v23);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_43;
          }
          if (*((_WORD *)v11 + 11) == 10) {
            unint64_t v24 = "true";
          }
          else {
            unint64_t v24 = "false";
          }
          *(_DWORD *)__str = 136315138;
          *(void *)&__str[4] = v24;
          uint64_t v18 = "Reading JSON BOOL as string \"%s\" in Bool/String Compatibility Mode";
          uint64_t v19 = __str;
LABEL_38:
          _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, v18, v19, 0xCu);
          goto LABEL_43;
        }
        if ((v12 & 8) != 0) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      if (v27[8]) {
        uint64_t v20 = v28;
      }
      else {
        uint64_t v20 = &v27[9];
      }
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Key not found.", (re::DynamicString *)__str, v20);
      if (*(void *)__str && (__str[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)__str + 40))();
      }
      if (*(void *)v27 && (v27[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v27 + 40))();
      }
    }
  }
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v8) {
        int v5 = *(unsigned char **)&v9[7];
      }
      else {
        int v5 = v9;
      }
      uint64_t v6 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to serialize string \"%s\". Expected number of characters: %lld. Actual number of characters: %lld.", (re::DynamicString *)&v10, v5, *(void *)(v6 - 24), *(void *)(v6 - 16));
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      uint64_t result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

double re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyInputStreamAdaptor>::pushState(uint64_t a1, _OWORD *a2)
{
  if (*(void *)(a1 + 112) >= *(void *)(a1 + 152))
  {
    re::DynamicString::format((re::DynamicString *)"State stack overflow (max depth is %zu). Increase user default com.apple.maxSerializationDepth to allow deeper hierarchies.", (re::DynamicString *)&v7, *(void *)(a1 + 152));
    if (v7)
    {
      if (v8) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v9);
      }
    }
  }
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  return result;
}

__n128 re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyInputStreamAdaptor>::StateStack::push(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v11 = 2 * v4;
      BOOL v12 = v4 == 0;
      unint64_t v13 = 8;
      if (!v12) {
        unint64_t v13 = v11;
      }
      if (v13 <= v6) {
        unint64_t v14 = v6;
      }
      else {
        unint64_t v14 = v13;
      }
      re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)a1, v14);
    }
    else
    {
      re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + 48 * *(void *)(a1 + 16);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)uint64_t v8 = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, char *a2, unsigned char *a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (JSONValue) {
      BOOL v7 = *((_WORD *)JSONValue + 11) != 0;
    }
    else {
      BOOL v7 = 0;
    }
    *a3 = v7;
    LOBYTE(v9) = 3;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = a2;
    uint64_t v10 = 0;
    BOOL v11 = v7;
    uint64_t v12 = 0;
    unint64_t v13 = JSONValue;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endOptional(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v8) {
        unint64_t v5 = *(unsigned char **)&v9[7];
      }
      else {
        unint64_t v5 = v9;
      }
      if (*(uint64_t *)(*(void *)(v1 + 128) + 48 * *(void *)(v1 + 112) - 24) <= 0) {
        unint64_t v6 = "Optional should not have a value.";
      }
      else {
        unint64_t v6 = "Optional requires a value.";
      }
      re::DynamicString::format((re::DynamicString *)"Failed to serialize optional type \"%s\". %s", (re::DynamicString *)&v10, v5, v6);
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      double result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(uint64_t a1, char *a2, void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if (*((_WORD *)result + 11) == 4)
    {
      uint64_t v9 = *result;
      *a3 = v9;
      LOBYTE(v10) = 5;
      DWORD1(v10) = a4;
      *((void *)&v10 + 1) = a2;
      uint64_t v11 = 0;
      uint64_t v12 = v9;
      uint64_t v13 = 0;
      unint64_t v14 = result;
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v8) {
        unint64_t v5 = *(unsigned char **)&v9[7];
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v6 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)&v10, v5, *(void *)(v6 - 24), *(void *)(v6 - 16));
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      double result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (!v18)
  {
    uint64_t v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(v29 + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)v29;
        }
        uint64_t v44 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        uint64_t v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        char v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9) {
          goto LABEL_41;
        }
        char v34 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33) {
          break;
        }
        if (*v34 - 48 > 9)
        {
          uint64_t v36 = v49;
          uint64_t v35 = v50;
          if (!__CFADD__(v50, v49)) {
            goto LABEL_40;
          }
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            char v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v37 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t *))(v46 + 104))(a4, v45, *(void *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_43;
        }
      }
      uint64_t v36 = v49;
      uint64_t v35 = v50;
      if (__CFADD__(v50, v49)) {
        goto LABEL_42;
      }
LABEL_40:
      uint64_t v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (!v18)
  {
    uint64_t v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  uint64_t v20 = *(void (**)(uint64_t, int *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(v29 + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)v29;
        }
        int v44 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        uint64_t v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        char v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9) {
          goto LABEL_41;
        }
        char v34 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33) {
          break;
        }
        if (*v34 - 48 > 9)
        {
          int v36 = v49;
          int v35 = v50;
          if (!__CFADD__(v50, v49)) {
            goto LABEL_40;
          }
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            char v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v37 = (*(uint64_t (**)(uint64_t, unsigned char *, void, int *))(v46 + 104))(a4, v45, *(void *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_43;
        }
      }
      int v36 = v49;
      int v35 = v50;
      if (__CFADD__(v50, v49)) {
        goto LABEL_42;
      }
LABEL_40:
      int v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v46);
  if (!v18)
  {
    uint64_t v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  uint64_t v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (uint64_t i = *((void *)v28 + 1); i != *((void *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          uint64_t v30 = i;
        }
        else {
          uint64_t v30 = *(void *)(i + 8);
        }
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(i + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)i;
        }
        __int16 v42 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        uint64_t v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        char v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          char v34 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (HIWORD(v48) || 0xFFFF - v48 < v47)
            {
              if (v34 != v33) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
            __int16 v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                char v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, __int16 *))(v44 + 104))(a4, v43, *(void *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v46);
  if (!v18)
  {
    uint64_t v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  uint64_t v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (uint64_t i = *((void *)v28 + 1); i != *((void *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          uint64_t v30 = i;
        }
        else {
          uint64_t v30 = *(void *)(i + 8);
        }
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(i + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)i;
        }
        char v42 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        uint64_t v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        char v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          char v34 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (v48 > 0xFF || 255 - v48 < v47)
            {
              if (v34 != v33) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
            char v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                char v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, char *))(v44 + 104))(a4, v43, *(void *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v18)
  {
    uint64_t v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        uint64_t v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        unsigned int v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        unint64_t v49 = 0;
        unsigned int v32 = v31 && *v30 == 45;
        uint64_t v33 = v31;
        char v34 = &v30[v31];
        char v35 = v32;
        uint64_t v36 = &v30[v32];
        if (v33 == v32) {
          break;
        }
        uint64_t v37 = v33 - v32;
        uint64_t v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37) {
            goto LABEL_42;
          }
        }
        if (!v37) {
          break;
        }
        if (*v38 - 48 >= 0xA) {
          goto LABEL_43;
        }
        uint64_t v38 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          uint64_t v40 = v54;
          uint64_t v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            uint64_t v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (uint64_t v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34) {
              goto LABEL_53;
            }
          }
          goto LABEL_48;
        }
        unint64_t v41 = v39 + v40;
        if (v35)
        {
          if (v41 <= 0x8000000000000000) {
            goto LABEL_45;
          }
        }
        else if ((v41 & 0x8000000000000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unint64_t *))(v51 + 104))(a4, v50, *(void *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_62;
        }
      }
LABEL_42:
      uint64_t v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        unint64_t v41 = 0;
        if (v35) {
LABEL_45:
        }
          unint64_t v41 = -(uint64_t)v41;
LABEL_46:
        unint64_t v49 = v41;
        goto LABEL_48;
      }
      uint64_t v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v18)
  {
    uint64_t v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  uint64_t v20 = *(void (**)(uint64_t, int *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        uint64_t v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        unsigned int v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        unsigned int v49 = 0;
        unsigned int v32 = v31 && *v30 == 45;
        uint64_t v33 = v31;
        char v34 = &v30[v31];
        char v35 = v32;
        uint64_t v36 = &v30[v32];
        if (v33 == v32) {
          break;
        }
        uint64_t v37 = v33 - v32;
        uint64_t v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37) {
            goto LABEL_42;
          }
        }
        if (!v37) {
          break;
        }
        if (*v38 - 48 >= 0xA) {
          goto LABEL_43;
        }
        uint64_t v38 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          int v40 = v54;
          int v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            uint64_t v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (int v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34) {
              goto LABEL_53;
            }
          }
          goto LABEL_48;
        }
        unsigned int v41 = v39 + v40;
        if (v35)
        {
          if (v41 <= 0x80000000) {
            goto LABEL_45;
          }
        }
        else if ((v41 & 0x80000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unsigned int *))(v51 + 104))(a4, v50, *(void *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_62;
        }
      }
LABEL_42:
      uint64_t v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        unsigned int v41 = 0;
        if (v35) {
LABEL_45:
        }
          unsigned int v41 = -v41;
LABEL_46:
        unsigned int v49 = v41;
        goto LABEL_48;
      }
      uint64_t v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v54),
        re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55),
        v52[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v52))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v51, (uint64_t)v55);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)this);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v52);
  if (!v19)
  {
    uint64_t v47 = re::TypeInfo::name((re::TypeInfo *)v52)[1];
    return 0;
  }
  uint64_t v20 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v19;
  uint64_t v21 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v50 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)v49);
  v21(a4, &v54, v18);
  BOOL result = 0;
  if (v27)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (!v28 || !*v28)
    {
LABEL_62:
      return *(unsigned char *)(a1 + 64) == 0;
    }
    uint64_t v29 = (unsigned __int8 *)*((void *)v28 + 1);
    while (1)
    {
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (unsigned __int8 *)*((void *)v29 + 1);
      }
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0) {
        unsigned int v31 = 21 - (char)v29[21];
      }
      else {
        unsigned int v31 = *(_DWORD *)v29;
      }
      __int16 v48 = 0;
      if (v31) {
        unsigned int v32 = *v30 == 45;
      }
      else {
        unsigned int v32 = 0;
      }
      uint64_t v33 = v31;
      char v34 = &v30[v31];
      char v35 = v32;
      uint64_t v36 = &v30[v32];
      if (v33 == v32) {
        goto LABEL_44;
      }
      uint64_t v37 = v33 - v32;
      uint64_t v38 = v36;
      while (*v38 == 48)
      {
        ++v38;
        if (!--v37) {
          goto LABEL_44;
        }
      }
      if (!v37)
      {
LABEL_44:
        uint64_t v38 = v34;
LABEL_45:
        if (v38 == v36)
        {
          uint64_t v38 = v30;
          goto LABEL_52;
        }
        __int16 v39 = 0;
        __int16 v40 = 0;
        if (v35)
        {
LABEL_47:
          __int16 v48 = -v39;
          goto LABEL_52;
        }
LABEL_51:
        __int16 v48 = v40;
        goto LABEL_52;
      }
      if (*v38 - 48 >= 0xA) {
        goto LABEL_45;
      }
      uint64_t v38 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v38, v34, &v54, &v53);
      if (v38 != v34 && *v38 - 48 <= 9) {
        goto LABEL_56;
      }
      if (HIWORD(v54) || 0xFFFF - v54 < v53) {
        break;
      }
      __int16 v39 = v53 + v54;
      if ((v35 & 1) == 0)
      {
        if ((((_WORD)v53 + (_WORD)v54) & 0x8000) != 0) {
          goto LABEL_52;
        }
        __int16 v40 = v53 + v54;
        goto LABEL_51;
      }
      if ((unsigned __int16)(v53 + v54) <= 0x8000u) {
        goto LABEL_47;
      }
LABEL_52:
      if (v34 != v38)
      {
        return 0;
      }
      uint64_t v41 = (*(uint64_t (**)(uint64_t, unsigned char *, void, __int16 *))(v50 + 104))(a4, v49, *(void *)(a1 + 48), &v48);
      v20(a1, v30, 0, v41, v52, v51, 0);
      v29 += 48;
      if (v29 == (unsigned __int8 *)(*((void *)v28 + 1) + 48 * *v28)) {
        goto LABEL_62;
      }
    }
    while (1)
    {
      if (v38 == v34)
      {
        uint64_t v38 = v34;
        goto LABEL_52;
      }
LABEL_56:
      if (*v38 - 48 > 9) {
        goto LABEL_52;
      }
      ++v38;
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v45);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v45);
      re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)v46);
      re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)this);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v44);
      if (!v23)
      {
        char v35 = re::TypeInfo::name((re::TypeInfo *)v44);
        return 0;
      }
      uint64_t v24 = (void (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v23;
      BOOL result = 0;
      if (!v25) {
        return result;
      }
      unsigned int v27 = *(void (**)(uint64_t, const char **, uint64_t))(v42 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v45, (uint64_t)v41);
      v27(a4, &v45, v22);
      uint64_t v28 = (re::DynamicString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 32, 8);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      *(void *)uint64_t v28 = v22;
      *((void *)v28 + 1) = 0;
      re::DynamicString::setCapacity(v28, 0);
      uint64_t v29 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v29 && *v29)
      {
        uint64_t v30 = *((void *)v29 + 1);
        do
        {
          if ((*(_WORD *)(v30 + 22) & 0x1000) != 0) {
            unsigned int v31 = (const char *)v30;
          }
          else {
            unsigned int v31 = *(const char **)(v30 + 8);
          }
          size_t v32 = strlen(v31);
          uint64_t v45 = v31;
          v46[0] = v32;
          re::DynamicString::operator=(v28, (uint64_t)&v45);
          uint64_t v33 = (*(uint64_t (**)(uint64_t, unsigned char *, void, re::DynamicString *))(v42 + 104))(a4, v41, *(void *)(a1 + 48), v28);
          v24(a1, v31, 0, v33, v44, v43, 0);
          v30 += 48;
        }
        while (v30 != *((void *)v29 + 1) + 48 * *v29);
      }
      double v34 = re::DynamicString::deinit(v28);
      (*(void (**)(uint64_t, re::DynamicString *, double))(*(void *)v21 + 40))(v21, v28, v34);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v45);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v44);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    uint64_t v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 48);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v49);
      if (!v22)
      {
        uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)v49);
        return 0;
      }
      uint64_t v23 = (uint64_t (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(v47 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v46);
      unsigned int v27 = (_anonymous_namespace_ *)v26(a4, &v50, v21);
      uint64_t v44 = 0;
      uint64_t v45 = "";
      uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v28 && *v28)
      {
        uint64_t v29 = *((void *)v28 + 1);
        do
        {
          if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
            uint64_t v30 = (const char *)v29;
          }
          else {
            uint64_t v30 = *(const char **)(v29 + 8);
          }
          uint64_t v42 = 0;
          uint64_t v43 = "";
          uint64_t v31 = v42;
          size_t v32 = v43;
          uint64_t v42 = 0;
          uint64_t v43 = "";
          char v33 = v44;
          double v34 = v45;
          uint64_t v44 = v31;
          uint64_t v45 = v32;
          unint64_t v50 = v31 & 0xFFFFFFFFFFFFFFFELL | v33 & 1;
          v51[0] = v34;
          re::StringID::destroyString((re::StringID *)&v50);
          re::StringID::destroyString((re::StringID *)&v42);
          uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t *))(v47 + 104))(a4, v46, *(void *)(a1 + 48), &v44);
          unsigned int v27 = (_anonymous_namespace_ *)v23(a1, v30, 0, v35, v49, v48, 0);
          v29 += 48;
        }
        while (v29 != *((void *)v28 + 1) + 48 * *v28);
      }
      re::StringID::destroyString((re::StringID *)&v44);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v49);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    uint64_t v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, char *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if (*((_WORD *)result + 11) == 4)
    {
      uint64_t v7 = *result;
      *a3 = v7;
      LOBYTE(v8) = 6;
      DWORD1(v8) = 0;
      *((void *)&v8 + 1) = a2;
      uint64_t v9 = 0;
      uint64_t v10 = v7;
      uint64_t v11 = 0;
      uint64_t v12 = result;
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

void re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 128);
  unint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(v3 + 48 * (v4 - 1) + 40);
  if (!v5)
  {
    uint64_t v7 = 0;
LABEL_7:
    if (*(_WORD *)(v7 + 22) == 3)
    {
      LOBYTE(v9[0]) = 7;
      DWORD1(v9[0]) = a2;
      *((void *)&v9[0] + 1) = "entry";
      v9[1] = xmmword_23436C460;
      uint64_t v10 = 0;
      uint64_t v11 = v7;
    }
    else
    {
    }
    return;
  }
  uint64_t v6 = *(void *)(v3 + 48 * (v4 - 1) + 32);
  if (*(_DWORD *)v5 > v6)
  {
    uint64_t v7 = *(void *)(v5 + 8) + 24 * v6;
    goto LABEL_7;
  }
  if (v13) {
    long long v8 = *(unsigned char **)&v14[7];
  }
  else {
    long long v8 = v14;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Index out of range.", (re::DynamicString *)&v15, v8);
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == 2)
    {
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v7) {
        uint64_t v5 = *(unsigned char **)&v8[7];
      }
      else {
        uint64_t v5 = v8;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary entry \"%s\". Expected 2 objects (key+value). Actual number of objects: %lld.", (re::DynamicString *)&v9, v5, *(void *)(*(void *)(v1 + 128) + 48 * *(void *)(v1 + 112) - 16));
      if (v9 && (v10 & 1) != 0) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
      BOOL result = v6;
      if (v6)
      {
        if (v7) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
        }
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v8) {
        uint64_t v5 = *(unsigned char **)&v9[7];
      }
      else {
        uint64_t v5 = v9;
      }
      uint64_t v6 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)&v10, v5, *(void *)(v6 - 24), *(void *)(v6 - 16));
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      BOOL result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

unsigned int *re::serializeDynamicString<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, void *a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (BOOL v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    unint64_t v34 = 0;
    if (!result) {
      return result;
    }
    if (v34) {
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    goto LABEL_34;
  }
  unint64_t v21 = a4[1];
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  unint64_t v34 = v22;
  uint64_t v23 = a1 + 24;
  if (result)
  {
    unint64_t v24 = v34;
    uint64_t v25 = *(void *)v23;
    uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(*(void *)v23 + 8) + 24))(*(void *)(*(void *)v23 + 8));
    if (v24 <= (*(uint64_t (**)(void))(**(void **)(v25 + 8) + 32))(*(void *)(v25 + 8)) + v26)
    {
      if (!*a4)
      {
        *a4 = *(void *)(a1 + 48);
        re::DynamicString::setCapacity(a4, v24 + 1);
      }
      re::DynamicString::resize(a4, v24, 0);
      if (v24)
      {
        if (a4[1]) {
          char v33 = (char *)a4[2];
        }
        else {
          char v33 = (char *)a4 + 9;
        }
      }
      uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_34:
      return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
    }
    uint64_t v27 = *(void *)(a1 + 24);
    (*(void (**)(void))(**(void **)(v27 + 8) + 24))(*(void *)(v27 + 8));
    (*(uint64_t (**)(void))(**(void **)(v27 + 8) + 32))(*(void *)(v27 + 8));
    return 0;
  }
  return result;
}

uint64_t re::internal::serializeMembers<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, const re::TypeInfo *a4, uint64_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (a3 == (uint64_t *)a4)
  {
LABEL_4:
  }
  if (*a3 == *(void *)a4)
  {
    uint64_t v11 = *(void *)a3[2];
    uint64_t v12 = **((void **)a4 + 2);
    if ((unsigned __int16)v11 == (unsigned __int16)v12)
    {
      BOOL v14 = WORD1(v11) == WORD1(v12);
      uint64_t v13 = (v12 ^ v11) & 0xFFFFFF00000000;
      BOOL v14 = v14 && v13 == 0;
      if (v14) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion((re *)a3, a4, (const re::TypeInfo *)a3))
  {
    goto LABEL_4;
  }
  if (*((unsigned __int8 *)a3 + 12) == *((unsigned __int8 *)a4 + 12))
  {
    re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v50);
    re::TypeRegistry::typeInfo(*(void **)a4, *(void *)(*((void *)a4 + 2) + 72), v48);
    if (v48[0])
    {
      if (!v50[0])
      {
        uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v49)[1];
        re::TypeInfo::name((re::TypeInfo *)a3);
      }
    }
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v47, *a3, a3[2]);
    uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v45, *(void *)a4, *((void *)a4 + 2));
    if (v46)
    {
      for (unint64_t i = 0; i < v46; ++i)
      {
        if (*(unsigned char *)(a1 + 64)) {
          break;
        }
        uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v45, i, (uint64_t)v43);
        if (*(unsigned char *)(v44 + 28))
        {
          uint64_t v16 = *(void *)(v44 + 16);
          if (strlen((const char *)v16) >= 3 && *(unsigned char *)v16 == 109) {
            v16 += 2 * (*(unsigned char *)(v16 + 1) == 95);
          }
          uint64_t v17 = *(unsigned int *)(v44 + 32);
          BOOL v18 = *(re **)(*(void *)a4 + 856);
          if (!v18
            || (BOOL v18 = (re *)re::internal::TypeTranslationTable::translateMember(v18, (const re::TypeMemberInfo *)v43),
                v18 == -1))
          {
            uint64_t v22 = *re::foundationSerializationLogObjects(v18);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              uint64_t v23 = v22;
              uint64_t v24 = re::TypeInfo::name(a4)[1];
              *(_DWORD *)long long buf = 136315394;
              uint64_t v53 = v24;
              __int16 v54 = 2080;
              uint64_t v55 = v16;
              _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
            }
            uint64_t v25 = *(re::internal **)(a1 + 272);
            re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
            re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v53 + 4);
            uint64_t result = re::internal::translateType(v25, (const re::TypeRegistry *)v41, (uint64_t)buf);
            if (!*(unsigned char *)(a1 + 64)) {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v16, v17, 0, buf, buf, 1);
            }
          }
          else
          {
            re::TypeMemberCollection::operator[](v47, (int)v18, (uint64_t)v41);
            uint64_t v19 = a2 + *(unsigned int *)(v42 + 24);
            re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
            re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v53 + 4);
            re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
            re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v53 + 4);
            if (*(unsigned char *)(a1 + 64)
              || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v16, v17, v19, v40, v39, a5), (result & 1) == 0))
            {
              uint64_t result = re::TypeInfo::renamedObjectMembers(a4);
              if (v20)
              {
                unint64_t v21 = (_DWORD *)(result + 16);
                while (i != *v21)
                {
                  v21 += 6;
                  if (!--v20) {
                    goto LABEL_36;
                  }
                }
                uint64_t v26 = *((void *)v21 - 1);
                re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
                re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v53 + 4);
                re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
                uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v53 + 4);
                if (!*(unsigned char *)(a1 + 64)) {
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v26, v17, v19, v40, v39, a5);
                }
              }
            }
          }
        }
LABEL_36:
        ;
      }
    }
  }
  else
  {
    uint64_t v27 = re::TypeInfo::name((re::TypeInfo *)a3)[1];
    re::TypeInfo::name(a4);
  }
  return result;
}

uint64_t anonymous namespace'::LegacyInputStreamAdaptor::Length(_anonymous_namespace_::LegacyInputStreamAdaptor *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1)) + v2;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v21);
  if (v21[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)&v22);
    if (*(_DWORD *)(v19 + 88) || (re::TypeRegistry::typeInfo(v18[0], *(void *)(v19 + 72), v23), v23[0])) {
  }
    }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v18, *a3, a3[2]);
  if (v20)
  {
    for (unint64_t i = 0; i < v20; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v18, i, (uint64_t)&v16);
      if (*(unsigned char *)(v17 + 28))
      {
        uint64_t v10 = *(void *)(v17 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v17 + 32);
        uint64_t v12 = a2 + *(unsigned int *)(v17 + 24);
        re::TypeRegistry::typeInfo(v16, *(void *)v17, v23);
        re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v24);
        if (a1[64]
          || (uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, v12, v15, v15, a4), (result & 1) == 0))
        {
          uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a3);
          if (v13)
          {
            BOOL v14 = (_DWORD *)(result + 16);
            while (i != *v14)
            {
              v14 += 6;
              if (!--v13) {
                goto LABEL_21;
              }
            }
            if (!a1[64]) {
              uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, *((void *)v14 - 1), v11, v12, v15, v15, a4);
            }
          }
        }
      }
LABEL_21:
      ;
    }
  }
  return result;
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, a2);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = *v6;
    v9[0] = v5;
    v9[1] = v8;
  }
}

unsigned int *re::serializeBool<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, BOOL *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeChar<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI8<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI16<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI32<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI64<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU8<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU16<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU32<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _DWORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU64<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, void *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeFloat<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeDouble<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeCString<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_23:
      return 0;
    }
    uint64_t v20 = **((void **)this + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 != (unsigned __int16)v21) {
      goto LABEL_23;
    }
    BOOL v23 = WORD1(v20) == WORD1(v21);
    uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
    BOOL v23 = v23 && v22 == 0;
    if (!v23) {
      goto LABEL_23;
    }
  }
LABEL_4:
  if (a7)
  {
    int v42 = 0;
    uint64_t result = 0;
    if (!v18) {
      return result;
    }
    if (!v42) {
      goto LABEL_12;
    }
    if (v42 != 1)
    {
      size_t v41 = 0;
      {
        if (v41) {
      }
        }
LABEL_12:
      goto LABEL_46;
    }
    goto LABEL_17;
  }
  int v42 = 2 * (*a4 != 0);
  if (!result) {
    return result;
  }
  if (v42)
  {
    if (v42 == 2)
    {
      if (*a4) {
        size_t v24 = strlen(*a4);
      }
      else {
        size_t v24 = 0;
      }
      size_t v41 = v24;
      {
        uint64_t v25 = (char *)*a4;
        unint64_t v26 = v41;
        if (!*a4 || v41 != v24)
        {
          if (v25)
          {
            (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
            *a4 = 0;
          }
          {
            return 0;
          }
          uint64_t v37 = v26 == -1;
          uint64_t v38 = v37 << 63 >> 63;
          if (v38 != v37 || v38 < 0)
          {
            return 0;
          }
          uint64_t v25 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v26 + 1, 0);
          *a4 = v25;
        }
        if (v26)
        {
          uint64_t v25 = (char *)*a4;
        }
        v25[v26] = 0;
      }
    }
    else if (v42 == 1)
    {
LABEL_17:
      return 0;
    }
  }
  else if (*a4)
  {
    (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    *a4 = 0;
  }
  int v39 = *(unsigned __int8 *)(a1 + 64);
  if (!*a4 || !*(unsigned char *)(a1 + 64)) {
    return (unsigned int *)(v39 == 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
  *a4 = 0;
LABEL_46:
  int v39 = *(unsigned __int8 *)(a1 + 64);
  return (unsigned int *)(v39 == 0);
}

unsigned int *re::serializeStringID<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (unsigned int v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  uint64_t v19 = a1 + 24;
  if (a7)
  {
    unint64_t v47 = 0;
    if (!result) {
      return result;
    }
    if (v47) {
    goto LABEL_26;
    }
  }
  unint64_t v46 = 0;
  {
    unint64_t v21 = v46;
    if (v46)
    {
      uint64_t v22 = *(void *)v19;
      uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(*(void *)v19 + 8) + 24))(*(void *)(*(void *)v19 + 8));
      if (v21 > (*(uint64_t (**)(void))(**(void **)(v22 + 8) + 32))(*(void *)(v22 + 8)) + v23)
      {
        uint64_t v29 = *(void *)(a1 + 24);
        (*(void (**)(void))(**(void **)(v29 + 8) + 24))(*(void *)(v29 + 8));
        (*(uint64_t (**)(void))(**(void **)(v29 + 8) + 32))(*(void *)(v29 + 8));
        return 0;
      }
      uint64_t v36 = v21 == -1;
      uint64_t v37 = v36 << 63 >> 63;
      if (v37 != v36 || v37 < 0)
      {
        return 0;
      }
      uint64_t v38 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), v21 + 1, 0);
      v38[v21] = 0;
      uint64_t v44 = 0;
      uint64_t v45 = "";
      uint64_t v40 = v44;
      size_t v41 = v45;
      uint64_t v44 = 0;
      uint64_t v45 = "";
      uint64_t v42 = *a4;
      uint64_t v43 = a4[1];
      *a4 = v40;
      a4[1] = (uint64_t)v41;
      unint64_t v47 = v40 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
      uint64_t v48 = v43;
      re::StringID::destroyString((re::StringID *)&v47);
      re::StringID::destroyString((re::StringID *)&v44);
      (*(void (**)(void, char *))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v38);
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v45 = "";
      uint64_t v35 = a4[1];
      unint64_t v47 = *a4 & 1;
      uint64_t v48 = v35;
      *a4 = 0;
      a4[1] = (uint64_t)"";
      re::StringID::destroyString((re::StringID *)&v47);
      re::StringID::destroyString((re::StringID *)&v44);
    }
LABEL_26:
    return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
  }
  return 0;
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 8) | 0xFFFFFFFF00000000;
  unint64_t v6 = *(void *)(a1 + 288);
  if (v6)
  {
    unint64_t v6 = v5 % *(unsigned int *)(a1 + 312);
    uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * v6);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(a1 + 304);
      if (*(void *)(v13 + 24 * v7 + 4) == v5)
      {
LABEL_12:
        *(void *)(v13 + 24 * v7 + 16) = a3;
        goto LABEL_13;
      }
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v13 + 24 * v7) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v13 + 24 * v7 + 4) == v5) {
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v8 = *(unsigned int *)(a1 + 324);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 320);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 312))
    {
      LODWORD(v6) = v5 % *(unsigned int *)(a1 + 312);
      int v9 = *(_DWORD *)(a1 + 320);
    }
    *(_DWORD *)(a1 + 320) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 304);
    int v11 = *(_DWORD *)(v10 + 24 * v8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 304);
    int v11 = *(_DWORD *)(v10 + 24 * v8);
    *(_DWORD *)(a1 + 324) = v11 & 0x7FFFFFFF;
  }
  uint64_t v12 = 24 * v8;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 304) + v12) = *(_DWORD *)(*(void *)(a1 + 304) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 296) + 4 * v6);
  *(void *)(*(void *)(a1 + 304) + 24 * v8 + 4) = v5;
  *(void *)(*(void *)(a1 + 304) + 24 * v8 + 16) = a3;
  *(_DWORD *)(*(void *)(a1 + 296) + 4 * v6) = v8;
  ++*(_DWORD *)(a1 + 316);
LABEL_13:
  ++*(_DWORD *)(a1 + 328);
}

unsigned int *re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v26 = **((void **)this + 2);
    uint64_t v27 = **((void **)a6 + 2);
    if ((unsigned __int16)v26 == (unsigned __int16)v27)
    {
      BOOL v29 = WORD1(v26) == WORD1(v27);
      uint64_t v28 = (v27 ^ v26) & 0xFFFFFF00000000;
      BOOL v29 = v29 && v28 == 0;
      if (v29) {
        goto LABEL_4;
      }
    }
LABEL_33:
    return 0;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_33;
  }
LABEL_4:
  if (a7)
  {
    uint64_t v30 = 0;
    if (!result) {
      return result;
    }
    if (v30) {
  }
    }
  else
  {
    uint64_t v14 = **((void **)this + 2);
    uint64_t v30 = *(void **)this;
    uint64_t v31 = v14;
    LODWORD(v32) = -1;
    *(void *)long long buf = 0x258C98EAAF29A10ALL;
    *(void *)&buf[8] = "CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[]((uint64_t *)&v30, buf);
    re::StringID::destroyString((re::StringID *)buf);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    unint64_t v34 = 0;
    if (!result) {
      return result;
    }
    unsigned int v18 = *(void **)(a1 + 56);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = v18;
    uint64_t v31 = 0;
    re::DynamicString::setCapacity(&v30, 0);
    if (v34)
    {
      re::DynamicString::resize(&v30, v34, 0);
      if (v31) {
        uint64_t v19 = v32;
      }
      else {
        uint64_t v19 = (char *)&v31 + 1;
      }
    }
    if (v31) {
      uint64_t v20 = v32;
    }
    else {
      uint64_t v20 = (char *)&v31 + 1;
    }
    unint64_t v21 = (re *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *))(v16 + 80))(*(void *)(a1 + 48), v17, v16, a4, v20);
    if ((v21 & 1) == 0)
    {
      uint64_t v22 = *re::foundationSerializationLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        if (v31) {
          uint64_t v23 = v32;
        }
        else {
          uint64_t v23 = (char *)&v31 + 1;
        }
        uint64_t v24 = v22;
        uint64_t v25 = re::TypeInfo::name(this)[1];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v23;
        __int16 v36 = 2080;
        uint64_t v37 = v25;
        _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_INFO, "Failed to parse \"%s\": \"%s\" (type %s) using deserialization callback - skipping.", buf, 0x20u);
      }
    }
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*v30 + 40))();
    }
  }
  return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, char *a2, int *a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    uint64_t v7 = result;
    int v8 = *((unsigned __int16 *)result + 11);
    if (*((_WORD *)result + 11))
    {
      if (v8 != 3
        || (int *)(*((void *)result + 1) + 48 * *result) == rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::FindMember(result, "@ref"))
      {
        int v8 = 2;
        uint64_t v9 = 1;
      }
      else
      {
        uint64_t v9 = 1;
        int v8 = 1;
      }
    }
    else
    {
      uint64_t v9 = *((unsigned __int16 *)result + 11);
    }
    *a3 = v8;
    LOBYTE(v10) = 9;
    DWORD1(v10) = 0;
    *((void *)&v10 + 1) = a2;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
    uint64_t v13 = 0;
    uint64_t v14 = v7;
    return (unsigned int *)1;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endPointer(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v7) {
        unint64_t v5 = *(unsigned char **)&v8[7];
      }
      else {
        unint64_t v5 = v8;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize pointer \"%s\". No value was provided.", (re::DynamicString *)&v9, v5);
      if (v9 && (v10 & 1) != 0) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
      uint64_t result = v6;
      if (v6)
      {
        if (v7) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
        }
      }
    }
  }
  return result;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        do
        {
          if ((*(_DWORD *)v6 & 0x80000000) != 0)
          {
            unint64_t v13 = *(void *)(v6 + 4);
            unint64_t v14 = *(unsigned int *)(a1 + 24);
            unint64_t v15 = v13 % v14;
            uint64_t v16 = *(unsigned int *)(a1 + 36);
            if (v16 == 0x7FFFFFFF)
            {
              uint64_t v16 = *(unsigned int *)(a1 + 32);
              int v17 = v16;
              if (v16 == v14)
              {
                unint64_t v15 = v13 % *(unsigned int *)(a1 + 24);
                int v17 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v17 + 1;
              uint64_t v18 = *(void *)(a1 + 16);
              int v19 = *(_DWORD *)(v18 + 24 * v16);
            }
            else
            {
              uint64_t v18 = *(void *)(a1 + 16);
              int v19 = *(_DWORD *)(v18 + 24 * v16);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            uint64_t v20 = 24 * v16;
            *(_DWORD *)(v18 + v20) = v19 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v20) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v16) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(void *)(*(void *)(a1 + 16) + 24 * v16 + 4) = *(void *)(v6 + 4);
            *(void *)(*(void *)(a1 + 16) + 24 * v16 + 16) = *(void *)(v6 + 16);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 24;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

BOOL re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(uint64_t a1, char *a2, const re::TypeInfo *a3, char **a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_15:
      return 0;
    }
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 != (unsigned __int16)v14) {
      goto LABEL_15;
    }
    BOOL v16 = WORD1(v13) == WORD1(v14);
    uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
    BOOL v16 = v16 && v15 == 0;
    if (!v16) {
      goto LABEL_15;
    }
  }
LABEL_4:
  int v50 = 0;
  {
    if (v50 == 1)
    {
      unsigned int v49 = 0;
      if (!*(unsigned char *)(a1 + 64))
      {
        unsigned int v23 = v49;
        if (*(void *)(a1 + 408) <= (unint64_t)v49)
        {
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v49, (uint64_t)&v45);
          if (v45 == *(void *)this)
          {
            uint64_t v24 = **((void **)this + 2);
            if (v46 == (unsigned __int16)v24 && v47 == WORD1(v24) && ((v48 ^ HIDWORD(v24)) & 0xFFFFFF) == 0)
            {
              if ((a7 & 1) == 0)
              {
                if (*a4)
                {
                  uint64_t v42 = *a4;
                  if (v42 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23))
                  {
                    (*(void (**)(void, char *))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), *a4);
                    *a4 = 0;
                  }
                }
                *a4 = (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23);
                re::internal::SharedObjectGraph::addReference((void *)(a1 + 336), v23);
              }
              goto LABEL_36;
            }
          }
          uint64_t v25 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v23, (uint64_t)&v45);
          uint64_t v43 = *((void *)re::TypeRegistry::typeName(v25, &v45) + 1);
        }
      }
    }
    else
    {
      if (!v50)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
            *a4 = 0;
          }
        }
LABEL_36:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if ((a7 & 1) == 0 && *a4)
      {
        (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
        *a4 = 0;
      }
      uint64_t v45 = 0;
      {
        uint64_t v36 = v45;
        uint64_t v37 = v45 == -1;
        uint64_t v38 = v37 << 63 >> 63;
        if (v38 == v37 && (v38 & 0x8000000000000000) == 0)
        {
          int v39 = (char *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v45 + 1, 0);
          uint64_t v40 = (uint64_t)v39;
          if ((a7 & 1) == 0) {
            *a4 = v39;
          }
          if (v36) {
          *(unsigned char *)(v40 + v36) = 0;
          }
          uint64_t v41 = **((void **)this + 2);
          *(void *)&long long v44 = *(void *)this;
          *((void *)&v44 + 1) = v41;
          re::internal::SharedObjectGraph::addObject(a1 + 336, v40, &v44);
          goto LABEL_36;
        }
      }
    }
  }
  return 0;
}

BOOL re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, int a7)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v25 = **((void **)this + 2);
    uint64_t v26 = **((void **)a6 + 2);
    if ((unsigned __int16)v25 == (unsigned __int16)v26)
    {
      BOOL v28 = WORD1(v25) == WORD1(v26);
      uint64_t v27 = (v26 ^ v25) & 0xFFFFFF00000000;
      BOOL v28 = v28 && v27 == 0;
      if (v28) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    char v15 = 1;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v29 = re::TypeInfo::name(this), v30 = re::TypeInfo::name(a6), !re::StringID::operator==(v29, v30))))
  {
    return 0;
  }
  char v15 = 0;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v90, (uint64_t)&buf + 8);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v88, (uint64_t)&buf + 8);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    BOOL v16 = *v91;
    v87[0] = (re *)v90[0];
    v87[1] = v16;
    if (v90[0]) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v79 = re::TypeInfo::name(this)[1];
    uint64_t v22 = "Failed to get actual type of polymorphic object. Type \"%s\".";
    uint64_t v23 = a1;
    uint64_t v24 = a2;
LABEL_16:
    return 0;
  }
  re::internal::actualType(a4, (void **)this, v87);
  if (!v87[0]) {
    goto LABEL_15;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, v87, &buf);
  re::TypeInfo::TypeInfo((uint64_t)v85, (uint64_t)&buf + 8);
  int v84 = 0;
  {
    if (v84 != 1)
    {
      if (!v84)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        goto LABEL_111;
      }
      if (isPointerToPolymorphicType)
      {
        {
          uint64_t v42 = *(void *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
          if (*(_DWORD *)v42)
          {
            uint64_t v43 = *(char **)(v42 + 8);
            if ((*((_WORD *)v43 + 11) & 0x1000) != 0) {
              long long v44 = v43;
            }
            else {
              long long v44 = (char *)*((void *)v43 + 1);
            }
            if (v44)
            {
              uint64_t v45 = *v44;
              if (*v44)
              {
                char v46 = v44[1];
                if (v46)
                {
                  unsigned __int16 v47 = (unsigned __int8 *)(v44 + 2);
                  do
                  {
                    uint64_t v45 = 31 * v45 + v46;
                    int v48 = *v47++;
                    char v46 = v48;
                  }
                  while (v48);
                }
              }
            }
            else
            {
              uint64_t v45 = 0;
            }
            uint64_t v56 = 2 * v45;
            __s2 = v44;
            v96[0] = 2 * v45;
            v96[1] = v44;
            int v57 = *((_DWORD *)v89 + 20);
            uint64_t v58 = (v57 - 1);
            if (v57 == 1) {
              goto LABEL_80;
            }
            uint64_t v59 = 0;
            while (1)
            {
              re::TypeInfo::derivedClass((re::TypeInfo *)v88, v59, (uint64_t)&buf);
              uint64_t v60 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)&buf);
              if ((*v60 ^ (unint64_t)v56) <= 1)
              {
                uint64_t v61 = (const char *)v60[1];
                if (v61 == __s2 || !strcmp(v61, __s2)) {
                  break;
                }
              }
              if (v58 == ++v59) {
                goto LABEL_80;
              }
            }
            uint64_t v62 = *v98;
            unint64_t v94 = (re *)buf;
            uint64_t v95 = v62;
            if (!(void)buf)
            {
LABEL_80:
              int v63 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v88);
              if ((*v63 ^ (unint64_t)v56) > 1
                || (int v63 = (uint64_t *)v63[1], v63 != (uint64_t *)__s2)
                && (int v63 = (uint64_t *)strcmp((const char *)v63, __s2), v63)
                || (uint64_t v64 = *v89, v94 = v88[0], v95 = v64, !v88[0]))
              {
                uint64_t v68 = *re::foundationSerializationLogObjects((re *)v63);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                {
                  long long v77 = v68;
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = __s2;
                  _os_log_error_impl(&dword_233120000, v77, OS_LOG_TYPE_ERROR, "Skipping unknown polymorphic type. Type name = \"%s\"", (uint8_t *)&buf, 0xCu);

                  if (a7) {
                    goto LABEL_110;
                  }
                }
                else if (a7)
                {
LABEL_110:
                  re::StringID::destroyString((re::StringID *)v96);
                  goto LABEL_111;
                }
                if (*a4)
                {
                  re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
                  *a4 = 0;
                }
                goto LABEL_110;
              }
            }
            if ((a7 & 1) == 0 && *a4)
            {
              re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
              *a4 = 0;
            }
            re::TypeRegistry::typeInfo(v88[0], &v94, &buf);
            re::TypeInfo::TypeInfo((uint64_t)v93, (uint64_t)&buf + 8);
            if (v15)
            {
              long long v65 = *(re::TypeRegistry **)(a1 + 272);
              if (*(re::TypeRegistry **)this == v65)
              {
                re::TypeInfo::operator=((uint64_t)v85, (uint64_t)v93);
                uint64_t v66 = v94;
                uint64_t v67 = v95;
                goto LABEL_97;
              }
            }
            else
            {
              long long v65 = *(re::TypeRegistry **)(a1 + 272);
            }
            uint64_t v69 = re::TypeInfo::name((re::TypeInfo *)v93);
            uint64_t v70 = re::TypeRegistry::typeInfo(v65, (const re::StringID *)v69, &buf);
            if (!(_BYTE)buf)
            {
              BOOL v74 = *re::foundationSerializationLogObjects((re *)v70);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v75 = v74;
                uint64_t v76 = re::TypeInfo::name((re::TypeInfo *)v93)[1];
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v76;
                _os_log_impl(&dword_233120000, v75, OS_LOG_TYPE_DEFAULT, "No matching runtime type found for serialized polymorphic type \"%s\". Skipping unknown type.", (uint8_t *)&buf, 0xCu);
              }
              *(void *)&long long buf = 0;
              *((void *)&buf + 1) = 0xFFFFFFFFLL;
              (*(void (**)(uint64_t, void, long long *))(*(void *)a1 + 16))(a1, 0, &buf);
              if (!*(unsigned char *)(a1 + 64)) {
                (*(void (**)(uint64_t, char *, void, void, re **, re **, uint64_t))(*(void *)a1 + 72))(a1, __s2, 0, 0, v93, v93, 1);
              }
              goto LABEL_109;
            }
            re::TypeInfo::operator=((uint64_t)v85, (uint64_t)&buf + 8);
            uint64_t v66 = (re *)v85[0];
            uint64_t v67 = *v86;
LABEL_97:
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)v85, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            uint64_t v72 = Instance;
            if ((a7 & 1) == 0)
            {
              *a4 = (char *)Instance;
              *(void *)&long long buf = v66;
              *((void *)&buf + 1) = v67;
              re::internal::setActualType(a4, (re **)this, (re **)&buf);
            }
            v92[0] = v66;
            v92[1] = v67;
            (*(void (**)(uint64_t, void **, void *))(*(void *)a1 + 16))(a1, v72, v92);
            if (!*(unsigned char *)(a1 + 64)) {
              (*(void (**)(uint64_t, char *, void, void **, void *, re **, BOOL))(*(void *)a1 + 72))(a1, __s2, 0, v72, v85, v93, v72 == 0);
            }
LABEL_109:
            (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
            goto LABEL_110;
          }
        }
LABEL_111:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if (!a7)
      {
        uint64_t v51 = *a4;
        if (!*a4) {
          uint64_t v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v90, *(re::Allocator **)(a1 + 48), 0);
        }
        uint64_t v52 = 0;
        *a4 = v51;
        goto LABEL_62;
      }
      unsigned int v49 = *(re::TypeRegistry **)(a1 + 272);
      if ((re::TypeRegistry *)v90[0] != v49)
      {
        int v50 = re::TypeInfo::name((re::TypeInfo *)v90);
        re::TypeRegistry::typeInfo(v49, (const re::StringID *)v50, &buf);
        if (!(_BYTE)buf)
        {
          uint64_t v51 = 0;
          uint64_t v52 = 1;
          goto LABEL_62;
        }
        re::TypeInfo::operator=((uint64_t)v90, (uint64_t)&buf + 8);
      }
      uint64_t v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v90, *(re::Allocator **)(a1 + 48), 0);
      uint64_t v52 = 0;
LABEL_62:
      uint64_t v53 = *v91;
      *(void *)&long long v81 = v90[0];
      *((void *)&v81 + 1) = v53;
      re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v51, &v81);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, char *, void, char *, void *, re **, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, v51, v90, v88, v52);
      }
      if (*(unsigned char *)(a1 + 336))
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      goto LABEL_111;
    }
    LODWORD(v96[0]) = 0;
    if (!*(unsigned char *)(a1 + 64))
    {
      unsigned int v32 = v96[0];
      if (*(void *)(a1 + 408) > (unint64_t)LODWORD(v96[0]))
      {
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v96[0], (uint64_t)v83);
        if (!re::internal::areCompatible((re **)this, (uint64_t)v83))
        {
          uint64_t v54 = re::TypeInfo::name((re::TypeInfo *)v90)[1];
          uint64_t v55 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)&buf);
          LOBYTE(v79) = v54;
          re::TypeRegistry::typeName(v55, &buf);
          uint64_t v22 = "Invalid reference. Objects are not compatible. Expected type \"%s\". Actual type \"%s\".";
          goto LABEL_68;
        }
        if (a7) {
          goto LABEL_111;
        }
        if (*a4)
        {
          uint64_t v33 = *a4;
          if (v33 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32))
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        uint64_t v34 = re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32);
        uint64_t v35 = (char **)v34;
        *a4 = (char *)v34;
        if ((*((unsigned char *)v86 + 49) & 2) != 0)
        {
          uint64_t v73 = (void (*)(uint64_t))v86[4];
          if (v73) {
            v73(v34);
          }
          re::internal::SharedObjectGraph::addReference((void *)(a1 + 336), v32);
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v93);
          if (!v93[0])
          {
            LOBYTE(v79) = v32;
            uint64_t v22 = "TypeID for shared object at index %d is invalid.";
            goto LABEL_68;
          }
          re::TypeRegistry::typeInfo(v93[0], v93, &buf);
          if (!(_BYTE)buf)
          {
            LOBYTE(v79) = v32;
            uint64_t v22 = "No TypeInfo found for shared object at index %d.";
            goto LABEL_68;
          }
          uint64_t v36 = re::TypeInfo::createInstance((re::TypeInfo *)((char *)&buf + 8), *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          *a4 = (char *)v36;
          if ((re::TypeInfo::copy((re::TypeInfo *)((char *)&buf + 8), v36, v35, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264)) & 1) == 0)
          {
            uint64_t v79 = re::TypeInfo::name((re::TypeInfo *)((char *)&buf + 8))[1];
            uint64_t v22 = "Failed to copy non-shareable object of type '%s'.";
LABEL_68:
            uint64_t v23 = a1;
            uint64_t v24 = 0;
            goto LABEL_16;
          }
        }
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v82);
        re::TypeInfo::setActualTypeForPointer((void **)this, (uint64_t)a4, v82);
        goto LABEL_111;
      }
      LOBYTE(v79) = v96[0];
      uint64_t v22 = "Invalid reference ID for shared object: %u";
      goto LABEL_68;
    }
  }
  return 0;
}

unsigned int *re::EncoderRapidJSON<anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(unsigned int *result, _DWORD *a2)
{
  if (!*((unsigned char *)result + 40))
  {
    unint64_t v3 = (_anonymous_namespace_ *)result;
    if (result)
    {
    }
  }
  return result;
}

BOOL re::serializeJson(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = a6;
  v73[3] = 0;
  v73[4] = 0;
  int v74 = 0;
  v73[0] = &unk_26E720AA8;
  v73[1] = a1;
  v73[2] = a6;
  *(void *)&v75[0].var0 = 0xFA473DDF415427B4;
  v75[0].var1 = "JSON-StreamAdaptor-SerializerV1";
  uint64_t v33 = (void (**)(void **))&unk_26E720B58;
  re::StringID::StringID((re::StringID *)&v34, v75);
  uint64_t v43 = 0;
  memset(v41, 0, sizeof(v41));
  int v42 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v40[0] = 0;
  int v44 = 13;
  uint64_t v46 = 1024;
  char v45 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F0B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F0B0))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v27, (uint64_t)&v29);
    if ((_BYTE)v29) {
      uint64_t v28 = SHIDWORD(v29);
    }
    else {
      uint64_t v28 = 0;
    }
    _MergedGlobals_489 = v28;
    __cxa_guard_release(&qword_26AF9F0B0);
  }
  if (_MergedGlobals_489) {
    uint64_t v46 = _MergedGlobals_489;
  }
  v49[4] = 0;
  __int16 v50 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 28);
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v53 = 0;
  uint64_t v57 = 0x7FFFFFFFLL;
  uint64_t v33 = (void (**)(void **))&unk_26E720AF0;
  __int16 v58 = 1;
  uint64_t v61 = 0x7FFFFFFFLL;
  long long v66 = 0u;
  long long v67 = 0u;
  memset(v59, 0, sizeof(v59));
  int v60 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  int v65 = 0;
  uint64_t v62 = 0;
  uint64_t v72 = 0;
  int v68 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  int v71 = 0;
  re::StringID::destroyString((re::StringID *)v75);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v32);
  long long v31 = *(_OWORD *)(a3 + 32);
  re::TypeRegistry::typeInfo((re *)v31, (re **)&v31, v75);
  re::TypeInfo::TypeInfo((uint64_t)&v29, (uint64_t)&v75[0].var1);
  BOOL v10 = 0;
  if (v30 == 8)
  {
    int v11 = re::TypeInfo::name((re::TypeInfo *)&v29);
    if ((unint64_t)*v11 >> 1 == 94623636 && ((uint64_t v12 = (char *)v11[1], v12 == "char*") || !strcmp(v12, "char*"))
      || (uint64_t v13 = re::TypeInfo::name((re::TypeInfo *)&v29), (unint64_t)*v13 >> 1 == 0x134375A94D9F7110)
      && ((uint64_t v14 = (char *)v13[1], v14 == "DynamicString") || !strcmp(v14, "DynamicString")))
    {
      BOOL v10 = 0;
    }
    else
    {
      char v15 = re::TypeInfo::name((re::TypeInfo *)&v29);
      if ((unint64_t)*v15 >> 1 == 0x22C6ED80D0CLL)
      {
        BOOL v16 = (char *)v15[1];
        BOOL v17 = v16 == "StringID" || strcmp(v16, "StringID") == 0;
      }
      else
      {
        BOOL v17 = 0;
      }
      BOOL v10 = !v17;
    }
  }
  LOBYTE(v58) = 0;
  uint64_t v51 = a5;
  uint64_t v19 = v52;
  if (*(_DWORD *)(v52 + 24) != v53)
  {
  }
  uint64_t v35 = v73;
  uint64_t v36 = 0;
  int v37 = 0;
  if (v6)
  {
    uint64_t v38 = v6;
  }
  else
  {
  }
  uint64_t v39 = v6;
  *(unsigned char *)&v75[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v40, (unsigned __int8 *)v75);
  if (*(unsigned char *)&v75[0].var0 && v75[1].var1 && (*(unsigned char *)&v75[2].var0 & 1) != 0) {
    (*(void (**)(char *, char *))(*(void *)v75[1].var1 + 40))(v75[1].var1, v75[2].var1);
  }
  v41[0] = v38;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v41, 0x40uLL);
  ++v42;
  *(unsigned char *)&v75[0].var0 = 0;
  *(StringID *)((char *)v75 + 4) = 0u;
  memset(&v75[1].var0 + 1, 0, 28);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v49[0] = v39;
  re::DynamicArray<char>::setCapacity(v49, 0);
  ++LODWORD(v49[3]);
  uint64_t v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
  *(_OWORD *)uint64_t v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(void *)(v22 + 48) = 512;
  *(_DWORD *)(v22 + 56) = 324;
  *(_WORD *)(v22 + 60) = 2304;
  *((void *)&v47 + 1) = v22;
  *(void *)(v22 + 64) = 0x100000001;
  uint64_t v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 48, 8);
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(void *)(v23 + 32) = 0;
  *(void *)(v23 + 40) = 256;
  *(void *)&long long v47 = v23;
  uint64_t v24 = *((void *)&v47 + 1);
  **((void **)&v47 + 1) = v23;
  *(unsigned char *)(v24 + 60) = 0;
  *(void *)(v24 + 32) = *(void *)(v24 + 24);
  v33[6]((void **)&v33);
  if (v10)
  {
    if (!v40[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, uint64_t *, uint64_t *, void))v33[9])(&v33, "object", 0, a4, &v29, &v29, 0);
    }
  }
  else
  {
    BOOL v25 = 0;
    if (!v40[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, uint64_t *, uint64_t *, void))v33[9])(&v33, "object", 0, a4, &v29, &v29, 0);
    }
  }
  v33[7]((void **)&v33);
  BOOL v25 = v40[0] == 0;
LABEL_37:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v32);
  uint64_t v33 = (void (**)(void **))&unk_26E720AF0;
  if (*((void *)&v69 + 1))
  {
    if (v72) {
      (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
    }
    uint64_t v72 = 0;
    long long v70 = 0uLL;
    *((void *)&v69 + 1) = 0;
    ++v71;
  }
  if (*((void *)&v66 + 1))
  {
    if ((void)v69) {
      (*(void (**)(void))(**((void **)&v66 + 1) + 40))();
    }
    *(void *)&long long v69 = 0;
    long long v67 = 0uLL;
    *((void *)&v66 + 1) = 0;
    ++v68;
  }
  if (v62)
  {
    if ((void)v66) {
      (*(void (**)(void))(*(void *)v62 + 40))();
    }
    *(void *)&long long v66 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v62 = 0;
    ++v65;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v59);
  return v25;
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  long long v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      BOOL v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, char *__s, int a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(void *)(a1 + 168));
    LOBYTE(v8[0]) = 2;
    DWORD1(v8[0]) = a3 | 0x20;
    *((void *)&v8[0] + 1) = __s;
    memset(&v8[1], 0, 32);
  }
  return v3 == 0;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndObject(*((uint64_t **)result + 21));
    uint64_t v2 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
    ++*(void *)(v2 - 16);
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720AF0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
}

void anonymous namespace'::LegacyOutputStreamAdaptor::~LegacyOutputStreamAdaptor(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  *(void *)this = &unk_26E720AA8;
  if (*((void *)this + 3))
  {
    (*(void (**)(void, void))(**((void **)this + 2) + 40))(*((void *)this + 2), *((void *)this + 3));
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 10) = 0;
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

BOOL anonymous namespace'::LegacyOutputStreamAdaptor::Next(_anonymous_namespace_::LegacyOutputStreamAdaptor *this, void **a2, int *a3)
{
  {
    uint64_t v7 = *((void *)this + 3);
    if (!v7)
    {
      uint64_t v7 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 2) + 32))(*((void *)this + 2), 256, 0);
      *((void *)this + 3) = v7;
    }
    uint64_t v8 = *((int *)this + 10);
    *a2 = (void *)(v7 + v8);
    *a3 = 256 - v8;
    *((_DWORD *)this + 10) = 256;
    return 1;
  }
  return result;
}

uint64_t anonymous namespace'::LegacyOutputStreamAdaptor::BackUp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) -= a2;
  return this;
}

uint64_t anonymous namespace'::LegacyOutputStreamAdaptor::ByteCount(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  return *((void *)this + 4) + *((int *)this + 10);
}

uint64_t anonymous namespace'::LegacyOutputStreamAdaptor::WriteAliasedRaw(_anonymous_namespace_::LegacyOutputStreamAdaptor *this, const void *a2)
{
  return 0;
}

uint64_t anonymous namespace'::LegacyOutputStreamAdaptor::AllowsAliasing(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  return 0;
}

BOOL anonymous namespace'::LegacyOutputStreamAdaptor::WriteBuffer(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  if (!*((void *)this + 3)) {
    return 0;
  }
  if (!*((_DWORD *)this + 10)) {
    return 1;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
  uint64_t v3 = *((int *)this + 10);
  BOOL v4 = v2 == v3;
  if (v2 == v3)
  {
    *((void *)this + 4) += v2;
  }
  else
  {
    (*(void (**)(void, void))(**((void **)this + 2) + 40))(*((void *)this + 2), *((void *)this + 3));
    *((void *)this + 3) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  return v4;
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720B58;
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720AF0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        uint64_t v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      if (*(void *)this == *(void *)(a1 + 272))
      {
        if (*(void *)(a1 + 288))
        {
          unint64_t v10 = **((void **)this + 2) | 0xFFFFFFFF00000000;
          uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * (v10 % *(unsigned int *)(a1 + 312)));
          if (v11 != 0x7FFFFFFF)
          {
            uint64_t v12 = *(void *)(a1 + 304);
            if (*(void *)(v12 + 24 * v11 + 4) == v10)
            {
              return *(void **)(v12 + 24 * v11 + 16);
            }
            else
            {
              while (1)
              {
                LODWORD(v11) = *(_DWORD *)(v12 + 24 * v11) & 0x7FFFFFFF;
                if (v11 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v12 + 24 * v11 + 4) == v10) {
                  return *(void **)(v12 + 24 * v11 + 16);
                }
              }
            }
          }
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

void re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, char *__s, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    if (*(void *)(a1 + 288))
    {
      unint64_t v4 = **(void **)(a2 + 16) | 0xFFFFFFFF00000000;
      uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * (v4 % *(unsigned int *)(a1 + 312)));
      if (v5 != 0x7FFFFFFF)
      {
        uint64_t v6 = *(void *)(a1 + 304);
        if (*(void *)(v6 + 24 * v5 + 4) == v4)
        {
          return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))(v6 + 24 * v5 + 16);
        }
        else
        {
          while (1)
          {
            LODWORD(v5) = *(_DWORD *)(v6 + 24 * v5) & 0x7FFFFFFF;
            if (v5 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v6 + 24 * v5 + 4) == v4) {
              return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))(v6 + 24 * v5 + 16);
            }
          }
        }
      }
    }
  }
  return v2;
}

_anonymous_namespace_ *re::Encoder<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,anonymous namespace'::LegacyOutputStreamAdaptor>::close(_anonymous_namespace_ *result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    if (*((void *)result + 21))
    {
      uint64_t v2 = (void *)*((void *)result + 20);
      if (v2)
      {
        uint64_t String = rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>::GetString(v2);
        size_t v4 = *(void *)(*((void *)v1 + 20) + 24) - *(void *)(*((void *)v1 + 20) + 16);
        uint64_t v5 = (int *)((char *)v1 + 16);
        uint64_t v6 = (void **)((char *)v1 + 8);
        if (String)
        {
          uint64_t v7 = (char *)String;
          while (1)
          {
            size_t v8 = *v5;
            if (v4 <= v8) {
              break;
            }
            if ((int)v8 >= 1)
            {
              memcpy(*v6, v7, v8);
              uint64_t v9 = *v5;
              v7 += v9;
              v4 -= v9;
              char *v6 = 0;
              int *v5 = 0;
            }
            unint64_t v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void *, void *))(**(void **)v1 + 16))(*(void *)v1, (void *)v1 + 1, (void *)v1 + 2);
            if ((v10 & 1) == 0) {
              goto LABEL_10;
            }
          }
          memcpy(*v6, v7, v4);
LABEL_14:
          char *v6 = (char *)*v6 + v4;
          *v5 -= v4;
        }
        else
        {
          do
          {
            size_t v15 = *v5;
            if (v4 <= v15)
            {
              bzero(*v6, v4);
              goto LABEL_14;
            }
            if ((int)v15 >= 1)
            {
              bzero(*v6, v15);
              v4 -= *v5;
              char *v6 = 0;
              int *v5 = 0;
            }
            unint64_t v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, void *, void *))(**(void **)v1 + 16))(*(void *)v1, (void *)v1 + 1, (void *)v1 + 2);
          }
          while ((v10 & 1) != 0);
LABEL_10:
          if (v16 && (v17 & 1) != 0) {
            (*(void (**)(void))(*(void *)v16 + 40))();
          }
        }
        uint64_t v11 = *((void *)v1 + 20);
        if (v11)
        {
          uint64_t v12 = *((void *)v1 + 3);
          rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(*((void *)v1 + 20));
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v11);
        }
        *((void *)v1 + 20) = 0;
        uint64_t v13 = *((void *)v1 + 21);
        if (v13)
        {
          uint64_t v14 = *((void *)v1 + 3);
          rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(v13 + 8);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v13);
        }
        *((void *)v1 + 21) = 0;
        re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 192);
      }
    }
    if (!*((unsigned char *)v1 + 40)) {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 96);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v1 + 24))();
      *((void *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *(void *)uint64_t v1 = 0;
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 4) = 0;
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  re::DynamicString::setCapacity(&v32, 0);
  long long v31 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v32, a3, &a9);
  uint64_t v12 = a1 + 24;
  if (v20) {
    uint64_t v13 = *(unsigned char **)&v21[7];
  }
  else {
    uint64_t v13 = v21;
  }
  if (v33) {
    uint64_t v14 = v34;
  }
  else {
    uint64_t v14 = (char *)&v33 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v22, "serialize", v13, v14);
  *(void *)&long long v26 = 400;
  *((void *)&v26 + 1) = re::FoundationErrorCategory(void)::instance;
  uint64_t v15 = v24;
  uint64_t v29 = v24;
  uint64_t v30 = v25;
  uint64_t v16 = v22;
  char v17 = v23;
  uint64_t v27 = v22;
  uint64_t v28 = v23;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v12, &v26);
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v15);
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  uint64_t result = (uint64_t)v32;
  if (v32)
  {
    if (v33) {
      return (*(uint64_t (**)(void))(*v32 + 40))();
    }
  }
  return result;
}

uint64_t re::serializeType<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
      goto LABEL_244;
    }
    uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 16);
    }
    else {
      int v20 = -1;
    }
    uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 16);
    }
    else {
      int v22 = -1;
    }
    if (v20 != v22)
    {
      uint64_t v26 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      LOBYTE(v176) = v26;
      char v45 = "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.";
LABEL_71:
      return 0;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_10;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (!re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_244;
        }
LABEL_22:
        uint64_t v23 = re::TypeInfo::name(this);
        unint64_t v24 = (unint64_t)*v23 >> 1;
        if (v24 <= 0xCA3DEFB5)
        {
          if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
          {
            if ((unint64_t)*v23 >> 1 <= 0x2E9355)
            {
              if (v24 != 104431)
              {
                if (v24 == 3029738)
                {
                }
                goto LABEL_312;
              }
LABEL_266:
            }
            if (v24 == 3052374)
            {
            }
            uint64_t v145 = 3327612;
            goto LABEL_252;
          }
          if ((unint64_t)*v23 >> 1 <= 0xB0F77BD0)
          {
            if (v24 == 97526364)
            {
            }
            uint64_t v49 = 109413500;
            goto LABEL_178;
          }
          if (v24 == 2969009105)
          {
          }
          if (v24 == 3111160798)
          {
          }
          goto LABEL_312;
        }
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            {
            }
            if (v24 == 0x303EE86A734)
            {
            }
            goto LABEL_312;
          }
          if (v24 == 0x303EE8780EELL)
          {
          }
          if (v24 != 0x303EE88E58DLL)
          {
LABEL_312:
            uint64_t v176 = re::TypeInfo::name(this)[1];
            char v45 = "Unsupported basic type \"%s\".";
            goto LABEL_71;
          }
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03) {
              goto LABEL_266;
            }
            uint64_t v145 = 0x16749F63A2;
LABEL_252:
            if (v24 == v145)
            {
            }
            goto LABEL_312;
          }
          if (v24 != 3393056694)
          {
            uint64_t v49 = 0x16749D2549;
LABEL_178:
            if (v24 == v49)
            {
            }
            goto LABEL_312;
          }
        }
      }
      uint64_t v57 = **((void **)this + 2);
      uint64_t v58 = **((void **)a6 + 2);
      if ((unsigned __int16)v57 == (unsigned __int16)v58)
      {
        BOOL v18 = WORD1(v57) == WORD1(v58);
        uint64_t v59 = (v58 ^ v57) & 0xFFFFFF00000000;
        if (v18 && v59 == 0) {
          goto LABEL_22;
        }
      }
      goto LABEL_244;
    case 2:
      if (this == a6) {
        goto LABEL_200;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v61 = **((void **)this + 2);
        uint64_t v62 = **((void **)a6 + 2);
        if ((unsigned __int16)v61 == (unsigned __int16)v62
          && WORD1(v61) == WORD1(v62)
          && ((v62 ^ v61) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_108;
        }
        int v27 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_108:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v115 = **((void **)this + 2);
            uint64_t v116 = **((void **)a6 + 2);
            if ((unsigned __int16)v115 == (unsigned __int16)v116
              && ((BOOL v18 = WORD1(v115) == WORD1(v116), v117 = (v116 ^ v115) & 0xFFFFFF00000000, v18)
                ? (BOOL v118 = v117 == 0)
                : (BOOL v118 = 0),
                  v118))
            {
LABEL_200:
              BOOL v65 = 1;
            }
            else
            {
              BOOL v65 = 0;
            }
          }
          else
          {
            BOOL v65 = re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            __dst.n128_u64[0] = 0;
            if (!result) {
              return result;
            }
            unsigned int v119 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_204:
            return *(unsigned char *)(a1 + 64) == 0;
          }
          if (*(_DWORD *)(*((void *)this + 2) + 8) >= 9u)
          {
            uint64_t v176 = re::TypeInfo::name(this)[1];
            char v45 = "Enum type \"%s\" has invalid size: %zu bytes";
            goto LABEL_71;
          }
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(this, (const re::TypeInfo *)a4, a3);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            __dst.n128_u64[0] = 0;
            memcpy(&__dst, a4, *(unsigned int *)(*((void *)this + 2) + 8));
            LOBYTE(v176) = __dst.n128_u8[0];
            re::TypeInfo::name(this);
            char v45 = "Value %zu is not a valid enum constant of \"%s\".";
            goto LABEL_71;
          }
          unsigned int v121 = EnumConstantIndex;
          if (!v65)
          {
            uint64_t v146 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (v146)
            {
              uint64_t v124 = re::internal::TypeTranslationTable::translateRuntimeEnum(v146, this, v121, a6);
              if (v124) {
                goto LABEL_272;
              }
            }
            uint64_t v155 = re::TypeInfo::enumConstants(this);
            uint64_t v157 = v121;
            if (v156 > v121)
            {
              uint64_t v176 = *(void *)(v155 + 24 * v121 + 16);
              re::TypeInfo::name(a6);
              char v45 = "Runtime enum constant \"%s\" does not exist in serialized type \"%s\".";
              goto LABEL_71;
            }
LABEL_338:
            re::internal::assertLog((re::internal *)6, v156, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v157, v156);
            _os_crash();
            __break(1u);
          }
          uint64_t result = re::TypeInfo::enumConstants(this);
          uint64_t v123 = v121;
          if (v122 > v121)
          {
            if (!result) {
              return result;
            }
            uint64_t v124 = result + 24 * v121;
LABEL_272:
            v147 = *(const char **)(v124 + 16);
            __dst.n128_u64[0] = strlen(v147);
            {
              unsigned int v119 = (_anonymous_namespace_ *)(a1 + 24);
              goto LABEL_204;
            }
            return 0;
          }
LABEL_337:
          re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v123, v122);
          _os_crash();
          __break(1u);
          goto LABEL_338;
        }
        int v27 = *((unsigned __int8 *)this + 12);
      }
      if (v27 == *((unsigned __int8 *)a6 + 12))
      {
        uint64_t v63 = re::TypeInfo::name(this);
        uint64_t v64 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v63, v64)) {
          goto LABEL_108;
        }
      }
      goto LABEL_244;
    case 3:
      if (this == a6) {
        goto LABEL_115;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v66 = **((void **)this + 2);
        uint64_t v67 = **((void **)a6 + 2);
        if ((unsigned __int16)v66 == (unsigned __int16)v67
          && WORD1(v66) == WORD1(v67)
          && ((v67 ^ v66) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_115;
        }
        int v28 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_115;
        }
        int v28 = *((unsigned __int8 *)this + 12);
      }
      if (v28 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_244;
      }
LABEL_115:
      if (a7)
      {
        __dst.n128_u8[0] = 0;
        int v68 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v178, (uint64_t)&__dst.n128_i64[1]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v193, (uint64_t)&__dst.n128_i64[1]);
        re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        uint64_t v69 = (*(uint64_t (**)(unsigned __int8 *))(v199 + 80))(a4);
        LOBYTE(v192[0]) = v69 != 0;
        if (v69)
        {
          uint64_t v71 = (*(uint64_t (**)(unsigned __int8 *, double))(v199 + 80))(a4, v70);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, uint64_t, rapidjson::internal **, unsigned char *, void))(*(void *)a1 + 72))(a1, __s, 0, v71, &v178, v193, 0);
          }
        }
        int v68 = (_anonymous_namespace_ *)(a1 + 24);
      }
      return *(unsigned char *)(a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_130;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v72 = **((void **)this + 2);
        uint64_t v73 = **((void **)a6 + 2);
        if ((unsigned __int16)v72 == (unsigned __int16)v73)
        {
          BOOL v18 = WORD1(v72) == WORD1(v73);
          uint64_t v74 = (v73 ^ v72) & 0xFFFFFF00000000;
          if (v18 && v74 == 0) {
            goto LABEL_130;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_130;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_244;
      }
      uint64_t v76 = *((void *)this + 2);
      uint64_t v77 = *((void *)a6 + 2);
      int v78 = *(_DWORD *)(v77 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v76 + 84) & 0xFFFFFF) != 0)
      {
        if (!v78) {
          goto LABEL_244;
        }
LABEL_130:
        if (a7)
        {
          uint64_t v79 = *(re::internal **)(a1 + 272);
          re::TypeInfo::referencedType(a6, (uint64_t)&v178);
          re::internal::translateType(v79, (const re::TypeRegistry *)&v178, (uint64_t)&__dst);
          uint64_t v80 = (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 80))(a1, &__dst);
          if (!v80) {
            goto LABEL_222;
          }
          long long v81 = (void (*)(uint64_t, void, void, void, __n128 *, __n128 *, uint64_t))v80;
          uint64_t v82 = *((void *)a6 + 2);
          int v83 = *(_DWORD *)(v82 + 84) & 0xFFFFFF;
          if (v83)
          {
            int v84 = 0;
            int v85 = 8;
          }
          else
          {
            int v84 = (rapidjson::internal *)*(int *)(v82 + 88);
            int v85 = 4;
          }
          uint64_t v178 = v84;
          uint64_t v91 = (_anonymous_namespace_ *)(a1 + 24);
          if (!result) {
            return result;
          }
          if (v83) {
            BOOL v143 = v84 == 0;
          }
          else {
            BOOL v143 = 1;
          }
          char v144 = v143;
          if (v143)
          {
            if (!v84) {
              goto LABEL_281;
            }
          }
          else
          {
            v192[0] = 0;
            v192[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, void, void *))(*(void *)a1 + 16))(a1, 0, v192);
          }
          do
          {
            v81(a1, 0, 0, 0, &__dst, &__dst, 1);
            int v84 = (rapidjson::internal *)((char *)v84 - 1);
          }
          while (v84);
          if ((v144 & 1) == 0) {
            goto LABEL_280;
          }
        }
        else
        {
          re::TypeInfo::referencedType(this, (uint64_t)&__dst);
          re::TypeInfo::referencedType(a6, (uint64_t)&v178);
          re::TypeInfo::TypeInfo((uint64_t)v193, (uint64_t)this);
          uint64_t v86 = (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 80))(a1, &__dst);
          if (!v86) {
            goto LABEL_222;
          }
          uint64_t v87 = (void (*)(uint64_t, void, void, uint64_t, __n128 *, rapidjson::internal **, void))v86;
          uint64_t v88 = re::ArrayAccessor::size((re::ArrayAccessor *)v193, (char *)a4);
          v189[0] = v88;
          int v89 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v89) {
            int v90 = 8;
          }
          else {
            int v90 = 4;
          }
          uint64_t v91 = (_anonymous_namespace_ *)(a1 + 24);
          if (!result) {
            return result;
          }
          if (v89) {
            BOOL v92 = v88 == 0;
          }
          else {
            BOOL v92 = 1;
          }
          char v93 = v92;
          if (v92)
          {
            if (!v88) {
              goto LABEL_281;
            }
          }
          else
          {
            uint64_t v148 = *(void *)a4;
            v191[0] = 0;
            v191[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, v148, v191);
          }
          unint64_t v149 = 0;
          do
          {
            uint64_t v150 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v193, (char *)a4, v149);
            v87(a1, 0, 0, v150, &__dst, &v178, 0);
            ++v149;
          }
          while (v88 != v149);
          if ((v93 & 1) == 0) {
LABEL_280:
          }
            (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        }
LABEL_281:
        uint64_t v98 = v91;
LABEL_282:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if (!v78 && *(_DWORD *)(v76 + 88) == *(_DWORD *)(v77 + 88)) {
        goto LABEL_130;
      }
      goto LABEL_244;
    case 5:
      if (this == a6) {
        goto LABEL_154;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v94 = **((void **)this + 2);
        uint64_t v95 = **((void **)a6 + 2);
        if ((unsigned __int16)v94 == (unsigned __int16)v95
          && WORD1(v94) == WORD1(v95)
          && ((v95 ^ v94) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_154;
        }
        int v29 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_154;
        }
        int v29 = *((unsigned __int8 *)this + 12);
      }
      if (v29 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_244;
      }
LABEL_154:
      if (a7)
      {
        uint64_t v96 = *(re::internal **)(a1 + 272);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v193, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v96, (const re::TypeRegistry *)v193, (uint64_t)&v178);
        if (!(*(uint64_t (**)(uint64_t, rapidjson::internal **))(*(void *)a1 + 80))(a1, &v178)) {
          goto LABEL_221;
        }
        __dst.n128_u64[0] = 0;
        uint64_t result = 0;
        if (v97)
        {
          uint64_t v98 = (_anonymous_namespace_ *)(a1 + 24);
          goto LABEL_282;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v178, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v193, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
      uint64_t v99 = (*(uint64_t (**)(uint64_t, rapidjson::internal **))(*(void *)a1 + 80))(a1, &v178);
      if (!v99) {
        goto LABEL_221;
      }
      int v100 = (void (*)(uint64_t, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v99;
      uint64_t v101 = (*(uint64_t (**)(unsigned __int8 *))(v199 + 80))(a4);
      v191[0] = v101;
      uint64_t v91 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = 0;
      if (!v102) {
        return result;
      }
      if (*(void *)(v199 + 96))
      {
        if (v101)
        {
          for (uint64_t i = 0; i != v101; ++i)
          {
            uint64_t v104 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v199 + 96))(a4, i);
            v100(a1, 0, 0, v104, &v178, v193, 0);
          }
        }
      }
      else
      {
        v151 = *(uint64_t (**)(unsigned __int8 *, void))(v199 + 104);
        if (!v151 || !*(void *)(v199 + 112) || !*(void *)(v199 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v192, (uint64_t)&__dst);
          uint64_t v176 = re::TypeInfo::name((re::TypeInfo *)v192)[1];
          char v45 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_71;
        }
        uint64_t v152 = v151(a4, *(void *)(a1 + 56));
        uint64_t v153 = (*(uint64_t (**)(void))(v199 + 112))();
        if (v153)
        {
          uint64_t v154 = v153;
          do
          {
            v100(a1, 0, 0, v154, &v178, v193, 0);
            uint64_t v154 = (*(uint64_t (**)(uint64_t))(v199 + 112))(v152);
          }
          while (v154);
        }
        (*(void (**)(uint64_t, void))(v199 + 120))(v152, *(void *)(a1 + 56));
      }
      goto LABEL_281;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v178, (uint64_t)&__dst.n128_i64[1]);
      long long v31 = re::TypeInfo::name((re::TypeInfo *)&v178);
      int v32 = BYTE4(v179);
      if (BYTE4(v179) != 1) {
        goto LABEL_84;
      }
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v178))
      {
        __dst.n128_u64[0] = 0x303EE88E58DLL;
        __dst.n128_u64[1] = (unint64_t)"uint64_t";
        if (re::StringID::operator==(v31, &__dst)) {
        *(void *)uint64_t v193 = 3393056694;
        }
        *(void *)&v193[8] = "size_t";
        BOOL v111 = re::StringID::operator==(v31, v193);
        if (v111) {
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v53)(a1, __s, a3, a4, this, a6, a7);
        }
        __dst.n128_u64[0] = 0x303EE8780EELL;
        __dst.n128_u64[1] = (unint64_t)"uint32_t";
        BOOL v112 = re::StringID::operator==(v31, &__dst);
        if (v112) {
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v53)(a1, __s, a3, a4, this, a6, a7);
        }
        __dst.n128_u64[0] = 0x303EE86A734;
        __dst.n128_u64[1] = (unint64_t)"uint16_t";
        BOOL v113 = re::StringID::operator==(v31, &__dst);
        if (v113) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
        }
        __dst.n128_u64[0] = 0x18E6A9A093;
        __dst.n128_u64[1] = (unint64_t)"uint8_t";
        BOOL v114 = re::StringID::operator==(v31, &__dst);
        if (v114) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
        }
        __dst.n128_u64[0] = 0x16749F63A2;
        __dst.n128_u64[1] = (unint64_t)"int64_t";
        if (re::StringID::operator==(v31, &__dst)) {
        *(void *)uint64_t v193 = 3327612;
        }
        *(void *)&v193[8] = "long";
        BOOL v173 = re::StringID::operator==(v31, v193);
        if (v173) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
        }
        __dst.n128_u64[0] = 104431;
        __dst.n128_u64[1] = (unint64_t)"int";
        BOOL v174 = re::StringID::operator==(v31, &__dst);
        if (v174) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
        }
        __dst.n128_u64[0] = 109413500;
        __dst.n128_u64[1] = (unint64_t)"short";
        BOOL v175 = re::StringID::operator==(v31, &__dst);
        if (v175) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
        }
      }
      else
      {
        int v32 = BYTE4(v179);
LABEL_84:
        if (v32 == 8)
        {
          if ((unint64_t)*v31 >> 1 == 0x134375A94D9F7110)
          {
            uint64_t v52 = (char *)v31[1];
            if (v52 == "DynamicString") {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
            }
            int v54 = strcmp(v52, "DynamicString");
            if (!v54) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
            }
          }
          __dst.n128_u64[0] = 0x22C6ED80D0CLL;
          __dst.n128_u64[1] = (unint64_t)"StringID";
          BOOL v55 = re::StringID::operator==(v31, &__dst);
          if (v55) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v53)(a1, __s, a3, a4, this, a6, a7);
          }
        }
      }
      if (this == a6) {
        goto LABEL_216;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (re::areSameTranslatedVersion(this, a6, v30)) {
          goto LABEL_216;
        }
        goto LABEL_215;
      }
      uint64_t v125 = **((void **)this + 2);
      uint64_t v126 = **((void **)a6 + 2);
      if ((unsigned __int16)v125 != (unsigned __int16)v126
        || WORD1(v125) != WORD1(v126)
        || ((v126 ^ v125) & 0xFFFFFF00000000) != 0)
      {
LABEL_215:
        if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12)) {
          goto LABEL_216;
        }
LABEL_244:
        return 0;
      }
LABEL_216:
      if (a7)
      {
        BOOL v127 = *(re::internal **)(a1 + 272);
        re::TypeInfo::referencedType(a6, (uint64_t)&v178);
        re::internal::translateType(v127, (const re::TypeRegistry *)&v178, (uint64_t)&__dst);
        BOOL v128 = *(re::internal **)(a1 + 272);
        re::TypeInfo::dictionaryValueType(a6, (uint64_t)v193);
        re::internal::translateType(v128, (const re::TypeRegistry *)v193, (uint64_t)&v178);
        if ((*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 80))(a1, &__dst))
        {
          if ((*(uint64_t (**)(uint64_t, rapidjson::internal **))(*(void *)a1 + 80))(a1, &v178))
          {
            *(void *)uint64_t v193 = 0;
            if (result)
            {
              BOOL v129 = (_anonymous_namespace_ *)(a1 + 24);
              goto LABEL_330;
            }
            return result;
          }
LABEL_221:
          p_dst = (__n128 *)&v178;
        }
        else
        {
LABEL_222:
          p_dst = &__dst;
        }
        goto LABEL_223;
      }
      re::TypeInfo::referencedType(this, (uint64_t)v192);
      re::TypeInfo::dictionaryValueType(this, (uint64_t)v191);
      re::TypeInfo::referencedType(a6, (uint64_t)v189);
      re::TypeInfo::dictionaryValueType(a6, (uint64_t)v188);
      re::TypeInfo::TypeInfo((uint64_t)v186, (uint64_t)this);
      uint64_t v136 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 80))(a1, v192);
      if (!v136)
      {
        p_dst = (__n128 *)v192;
LABEL_223:
        uint64_t v177 = re::TypeInfo::name((re::TypeInfo *)p_dst)[1];
        return 0;
      }
      uint64_t v137 = (void (*)(uint64_t, const char *, void, uint64_t, void *, uint64_t *, void))v136;
      uint64_t v138 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, v191);
      if (!v138)
      {
        p_dst = (__n128 *)v191;
        goto LABEL_223;
      }
      uint64_t v139 = (void (*)(uint64_t, const char *, void, uint64_t, uint64_t *, unsigned char *, void))v138;
      unint64_t v140 = (*(uint64_t (**)(unsigned __int8 *))(v187 + 88))(a4);
      unint64_t v185 = v140;
      if (!result) {
        return result;
      }
      if (!v140) {
        goto LABEL_329;
      }
      uint64_t v141 = *(void **)this;
      __dst.n128_u64[0] = 0x449AD97C4B77BED4;
      __dst.n128_u64[1] = (unint64_t)"_CompareFunc";
      uint64_t v142 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v141 + 25), &__dst);
      if (v142)
      {
        uint64_t v184 = *v142;
      }
      else
      {
        uint64_t v141 = 0;
        uint64_t v184 = 0xFFFFFFFFLL;
      }
      v183 = v141;
      re::StringID::destroyString((re::StringID *)&__dst);
      unint64_t v158 = *(void *)v192[2];
      __dst.n128_u64[0] = v192[0];
      __dst.n128_u64[1] = v158;
      LODWORD(v199) = -1;
      uint64_t v159 = re::TypeAttributeCollection::operator[]((uint64_t *)&__dst, &v183);
      if (!v159)
      {
        uint64_t v169 = (*(uint64_t (**)(unsigned __int8 *, void))(v187 + 112))(a4, *(void *)(a1 + 56));
        (*(void (**)(void))(v187 + 120))();
        do
        {
          uint64_t v171 = (*(uint64_t (**)(uint64_t, double))(v187 + 128))(v169, v170);
          v137(a1, "key", 0, v171, v192, v189, 0);
          uint64_t v172 = (*(uint64_t (**)(uint64_t))(v187 + 136))(v169);
          v139(a1, "value", 0, v172, v191, v188, 0);
          (*(void (**)(uint64_t))(v187 + 120))(v169);
          --v140;
        }
        while (v140);
        (*(void (**)(uint64_t, void))(v187 + 144))(v169, *(void *)(a1 + 56));
        goto LABEL_329;
      }
      uint64_t v160 = (uint64_t (*)(uint64_t, uint64_t))v159;
      char v182 = 0;
      uint64_t v179 = 0;
      unint64_t v180 = 0;
      int v181 = 0;
      uint64_t v178 = *(rapidjson::internal **)(a1 + 56);
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v178, v140);
      ++v181;
      uint64_t v161 = (*(uint64_t (**)(unsigned __int8 *, void))(v187 + 112))(a4, *(void *)(a1 + 56));
      if ((*(unsigned int (**)(void))(v187 + 120))())
      {
        do
        {
          uint64_t v162 = (*(uint64_t (**)(uint64_t))(v187 + 128))(v161);
          uint64_t v163 = (*(uint64_t (**)(uint64_t))(v187 + 136))(v161);
          __dst.n128_u64[0] = v162;
          __dst.n128_u64[1] = v163;
          __n128 v164 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v178, &__dst);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v187 + 120))(v161, v164) & 1) != 0);
      }
      (*(void (**)(uint64_t, void))(v187 + 144))(v161, *(void *)(a1 + 56));
      uint64_t v165 = 0;
      for (unint64_t j = 0; j != v140; ++j)
      {
        unint64_t v168 = v180;
        if (v180 <= j)
        {
          uint64_t v190 = 0;
          long long v201 = 0u;
          long long v202 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v193 = 136315906;
          *(void *)&v193[4] = "operator[]";
          *(_WORD *)&v193[12] = 1024;
          *(_DWORD *)&v193[14] = 789;
          __int16 v194 = 2048;
          unint64_t v195 = j;
          __int16 v196 = 2048;
          unint64_t v197 = v168;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_336:
          uint64_t v190 = 0;
          long long v201 = 0u;
          long long v202 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v193 = 136315906;
          *(void *)&v193[4] = "operator[]";
          *(_WORD *)&v193[12] = 1024;
          *(_DWORD *)&v193[14] = 789;
          __int16 v194 = 2048;
          unint64_t v195 = j;
          __int16 v196 = 2048;
          unint64_t v197 = v168;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_337;
        }
        ((void (*)(uint64_t, const char *, void, void, void *, uint64_t *, void, double))v137)(a1, "key", 0, *(void *)&v182[v165], v192, v189, 0, v167);
        unint64_t v168 = v180;
        if (v180 <= j) {
          goto LABEL_336;
        }
        v139(a1, "value", 0, *(void *)&v182[v165 + 8], v191, v188, 0);
        v165 += 16;
      }
      if (v178 && v182) {
        (*(void (**)(void))(*(void *)v178 + 40))();
      }
LABEL_329:
      BOOL v129 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_330:
      return *(unsigned char *)(a1 + 64) == 0;
    case 7:
      if (this == a6) {
        goto LABEL_55;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v105 = **((void **)this + 2);
        uint64_t v106 = **((void **)a6 + 2);
        if ((unsigned __int16)v105 != (unsigned __int16)v106) {
          goto LABEL_244;
        }
        BOOL v18 = WORD1(v105) == WORD1(v106);
        uint64_t v107 = (v106 ^ v105) & 0xFFFFFF00000000;
        if (!v18 || v107 != 0) {
          goto LABEL_244;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_244;
      }
LABEL_55:
      uint64_t v33 = (_anonymous_namespace_ *)(a1 + 24);
      if (a7)
      {
        if (!result) {
          return result;
        }
        uint64_t v178 = 0;
        if (*(_DWORD *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, 0, (uint64_t)&__dst);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, void, __n128 *, __n128 *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, &__dst, &__dst, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        __int16 v50 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        unint64_t Tag = re::UnionAccessor::readTag(v50, (char *)a4);
        *(void *)uint64_t v193 = Tag;
        if (Tag < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, Tag, (uint64_t)&v178);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, unsigned __int8 *, rapidjson::internal **, rapidjson::internal **, void))(*(void *)a1 + 72))(a1, "value", 0, a4, &v178, &v178, 0);
          }
        }
      }
      goto LABEL_294;
    case 8:
      if (!a7) {
        goto LABEL_65;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        int v56 = *(re::TypeRegistry **)(a1 + 272);
        *(void *)uint64_t v193 = 0x2686EB529B3EE220;
        *(void *)&v193[8] = "DynamicString";
        re::TypeRegistry::typeInfo(v56, (const re::StringID *)v193, &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v178, (uint64_t)&__dst.n128_i64[1]);
        re::StringID::destroyString((re::StringID *)v193);
        uint64_t v38 = (re *)&v178;
        uint64_t v39 = (re::TypeInfo *)&v178;
        uint64_t v36 = a1;
        int v37 = __s;
      }
      else
      {
        uint64_t v34 = re::TypeInfo::name(this);
        __dst.n128_u64[0] = 0x134375A94D9F7110;
        __dst.n128_u64[1] = (unint64_t)"DynamicString";
        if (!re::StringID::operator==(v34, &__dst))
        {
LABEL_65:
          uint64_t v40 = *((void *)this + 2);
          if ((*(unsigned char *)(v40 + 48) & 4) == 0)
          {
            uint64_t v33 = (_anonymous_namespace_ *)(a1 + 24);
            uint64_t result = 0;
            if (!v41) {
              return result;
            }
            uint64_t v42 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
            if (!v42 || *(_DWORD *)(v42 + 16) >= 2u)
            {
              uint64_t v43 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
              if (v43) {
                unsigned __int32 v44 = *(_DWORD *)(v43 + 16);
              }
              else {
                unsigned __int32 v44 = -1;
              }
              __dst.n128_u32[0] = v44;
            }
LABEL_294:
            return *(unsigned char *)(a1 + 64) == 0;
          }
          uint64_t v46 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(void *)this, v40);
          re::TypeMemberCollection::operator[](v46, 0, (uint64_t)&v178);
          long long v47 = &a4[*(unsigned int *)(v180 + 24)];
          re::TypeMemberInfo::memberType((re::TypeMemberInfo *)&v178, (uint64_t)v193);
          if (re::areSameVersion(this, a6, v48))
          {
            if (*(unsigned char *)(a1 + 64)) {
              return 0;
            }
            return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, __s, a3, v47, v193, v193, a7);
          }
          uint64_t v109 = *((void *)a6 + 2);
          if (*(_DWORD *)(v109 + 88) == 1)
          {
            uint64_t v110 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(void *)a6, v109);
            re::TypeMemberCollection::operator[](v110, 0, (uint64_t)v191);
            re::TypeMemberInfo::memberType((re::TypeMemberInfo *)v191, (uint64_t)v192);
            if (!*(unsigned char *)(a1 + 64)) {
              return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, unsigned char *, void *, uint64_t))(*(void *)a1 + 72))(a1, __s, a3, v47, v193, v192, a7);
            }
            return 0;
          }
          goto LABEL_244;
        }
        uint64_t v36 = a1;
        int v37 = __s;
        uint64_t v38 = this;
        uint64_t v39 = this;
      }
      return *(unsigned char *)(a1 + 64) == 0;
    case 9:
      uint64_t v176 = re::TypeInfo::name(this)[1];
      char v45 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_71;
    default:
      LOBYTE(v176) = *((unsigned char *)this + 12);
      v45 = "Invalid type category. uint64_t Value = %d";
      goto LABEL_71;
  }
}

uint64_t re::internal::setTypeMismatchError<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, re::TypeInfo *this, re::TypeInfo *a4)
{
  uint64_t v7 = re::TypeInfo::name(this)[1];
  re::TypeInfo::name(a4);
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    int v7 = *a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteBool((uint64_t *)v6, v7);
    uint64_t v8 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v8 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(uint64_t a1, char *a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v6, a3, 1u);
    uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v7 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI8(uint64_t a1, char *a2, char *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    uint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI16(uint64_t a1, char *a2, __int16 *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    uint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI32(uint64_t a1, char *a2, unsigned int *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    uint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI64(uint64_t a1, char *a2, unint64_t *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    unint64_t v7 = *a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt64((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU8(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    unint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU16(uint64_t a1, char *a2, unsigned __int16 *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    unint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU32(uint64_t a1, char *a2, unsigned int *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    unint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU64(uint64_t a1, char *a2, rapidjson::internal **a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    unint64_t v7 = *a3;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint64((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeFloat(uint64_t a1, char *a2, float *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    float v6 = *a3;
    uint64_t v7 = *(void *)(a1 + 168);
    if (fabsf(v6) == INFINITY)
    {
      if (v6 <= 0.0) {
        uint64_t v8 = "-Infinity";
      }
      else {
        uint64_t v8 = "Infinity";
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), v8);
    }
    else
    {
      double v9 = v6;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble(v7, v9);
    }
    uint64_t v10 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v10 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeDouble(uint64_t a1, char *a2, double *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    double v6 = *a3;
    uint64_t v7 = *(void *)(a1 + 168);
    if (fabs(v6) == INFINITY)
    {
      if (v6 <= 0.0) {
        uint64_t v8 = "-Infinity";
      }
      else {
        uint64_t v8 = "Infinity";
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), v8);
    }
    else
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble(v7, v6);
    }
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(char *a1, char *__s)
{
  unsigned int v4 = strlen(__s);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(a1);
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)a1, (uint64_t)__s, v4);
}

char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(char *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 4);
  if (v2 == *((void *)result + 3))
  {
    result[60] = 1;
    return result;
  }
  uint64_t v3 = *(void *)(v2 - 16);
  if (*(unsigned char *)(v2 - 8))
  {
    if (v3)
    {
      uint64_t v4 = *(void *)result;
      uint64_t v5 = *(unsigned char **)(*(void *)result + 24);
      if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v5) <= 0)
      {
        uint64_t v16 = *(void *)result;
        uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v4, 1);
        uint64_t v4 = v16;
        uint64_t v5 = *(unsigned char **)(v16 + 24);
      }
      *(void *)(v4 + 24) = v5 + 1;
      unsigned char *v5 = 44;
      if (v1[68])
      {
        uint64_t v6 = *(void *)v1;
        uint64_t v7 = *(unsigned char **)(*(void *)v1 + 24);
        if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v7) <= 0)
        {
          uint64_t v19 = *(void *)v1;
          uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v6, 1);
          uint64_t v6 = v19;
          uint64_t v7 = *(unsigned char **)(v19 + 24);
        }
        *(void *)(v6 + 24) = v7 + 1;
        unsigned char *v7 = 32;
      }
    }
    if (v1[68]) {
      goto LABEL_30;
    }
    uint64_t v8 = *(void *)v1;
    uint64_t v9 = *(unsigned char **)(*(void *)v1 + 24);
    if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v9) <= 0)
    {
      uint64_t v17 = *(void *)v1;
      rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v8, 1);
      uint64_t v8 = v17;
      uint64_t v9 = *(unsigned char **)(v17 + 24);
    }
    *(void *)(v8 + 24) = v9 + 1;
    *uint64_t v9 = 10;
    goto LABEL_29;
  }
  if (!v3) {
    goto LABEL_20;
  }
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *(unsigned char **)(*(void *)result + 24);
  if ((v3 & 1) == 0)
  {
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v11) <= 0)
    {
      uint64_t v20 = *(void *)result;
      uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v10, 1);
      uint64_t v10 = v20;
      uint64_t v11 = *(unsigned char **)(v20 + 24);
    }
    *(void *)(v10 + 24) = v11 + 1;
    unsigned char *v11 = 44;
LABEL_20:
    uint64_t v12 = *(void *)v1;
    uint64_t v13 = *(char **)(*(void *)v1 + 24);
    if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v13) <= 0)
    {
      uint64_t v18 = *(void *)v1;
      uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v12, 1);
      uint64_t v12 = v18;
      uint64_t v13 = *(char **)(v18 + 24);
    }
    *(void *)(v12 + 24) = v13 + 1;
    char v14 = 10;
    goto LABEL_28;
  }
  if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v11) <= 0)
  {
    uint64_t v21 = *(void *)result;
    uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v10, 1);
    uint64_t v10 = v21;
    uint64_t v11 = *(unsigned char **)(v21 + 24);
  }
  *(void *)(v10 + 24) = v11 + 1;
  unsigned char *v11 = 58;
  uint64_t v15 = *(void *)v1;
  uint64_t v13 = *(char **)(*(void *)v1 + 24);
  if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v13) <= 0)
  {
    uint64_t v22 = *(void *)v1;
    uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(v15, 1);
    uint64_t v15 = v22;
    uint64_t v13 = *(char **)(v22 + 24);
  }
  *(void *)(v15 + 24) = v13 + 1;
  char v14 = 32;
LABEL_28:
  char *v13 = v14;
  if ((*(unsigned char *)(v2 - 16) & 1) == 0) {
LABEL_29:
  }
    uint64_t result = rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteIndent(v1);
LABEL_30:
  ++*(void *)(v2 - 16);
  return result;
}

char *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteIndent(char *result)
{
  uint64_t v1 = ((*((void *)result + 4) - *((void *)result + 3)) >> 4) * *((unsigned int *)result + 16);
  uint64_t v2 = *(void *)result;
  char v3 = result[61];
  if (*(void *)(*(void *)result + 32) - *(void *)(*(void *)result + 24) < v1)
  {
    uint64_t result = rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(*(void *)result, v1);
    if (!v1) {
      return result;
    }
  }
  else if (!v1)
  {
    return result;
  }
  do
  {
    uint64_t v4 = *(char **)(v2 + 24);
    *(void *)(v2 + 24) = v4 + 1;
    char *v4 = v3;
    --v1;
  }
  while (v1);
  return result;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(uint64_t a1, char *__s, uint64_t *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    uint64_t v7 = *a3;
    if (!*a3)
    {
      uint64_t v8 = *(char **)(a1 + 168);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v8);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v8, (uint64_t)"", 0);
      uint64_t v7 = *a3;
    }
    LOBYTE(v10) = 8;
    DWORD1(v10) = 0;
    *((void *)&v10 + 1) = __s;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = v7;
  }
  return v3 == 0;
}

uint64_t re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 40))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(*(void *)(result + 128) + 48 * *(void *)(result + 112) - 24);
    uint64_t v5 = *(char **)(result + 168);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v5);
    uint64_t result = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v5, a2, v4);
    uint64_t v6 = *(void *)(v3 + 128) + 48 * *(void *)(v3 + 112);
    *(void *)(v6 - 16) += v4;
  }
  return result;
}

double re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, char *__s, unsigned char *a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    if (*a3)
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v7 = *(char **)(a1 + 168);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v7);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v7);
      uint64_t v6 = *a3;
    }
    LOBYTE(v9) = 3;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = __s;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = v6;
  }
  return result;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(uint64_t a1, char *__s, uint64_t *a3, int a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v9 = *a3;
    LOBYTE(v11) = 5;
    DWORD1(v11) = a4 & 0xFFFFFFDF;
    *((void *)&v11 + 1) = __s;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = v9;
  }
  return v4 == 0;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndArray(*((uint64_t **)result + 21));
      uint64_t v4 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v8) {
        uint64_t v5 = *(unsigned char **)&v9[7];
      }
      else {
        uint64_t v5 = v9;
      }
      uint64_t v6 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)&v10, v5, *(void *)(v6 - 24), *(void *)(v6 - 16));
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      double result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(uint64_t a1)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix((char *)a1);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) - v2 <= 15)
  {
    rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Level>(a1 + 8, 1);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 32) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteStartArray((uint64_t *)a1);
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndArray(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 - 16);
  a1[4] = v2 - 16;
  if (v3 && (*((unsigned char *)a1 + 68) & 1) == 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *(unsigned char **)(*a1 + 24);
    if ((uint64_t)(*(void *)(*a1 + 32) - (void)v5) <= 0)
    {
      rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(*a1, 1);
      uint64_t v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    unsigned char *v5 = 10;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteIndent((char *)a1);
  }
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndArray(a1);
  return 1;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          long long v31 = *(unint64_t **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          long long v31 = *(unsigned int **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          long long v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int8 *, unsigned char *, unsigned char *, void))v18;
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          long long v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v50)
      {
        uint64_t v30 = v52;
        long long v31 = &v52[v50];
        do
        {
          unint64_t v32 = **(void **)v30;
          if ((v32 & 0x8000000000000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unint64_t v32 = -(uint64_t)v32;
            uint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            uint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 19
            || (unsigned int v35 = (1233 * (64 - __clz(v32 | 1))) >> 12,
                int64_t v36 = v35 - (std::__itoa::__pow10_64[v35] > v32) + 1,
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v50)
      {
        uint64_t v30 = v52;
        long long v31 = &v52[v50];
        do
        {
          unsigned int v32 = **(_DWORD **)v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            uint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            uint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v50)
      {
        uint64_t v30 = v52;
        long long v31 = &v52[2 * v50];
        do
        {
          unsigned int v32 = **v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            uint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            uint64_t v33 = v53;
          }
          uint64_t v34 = v30[1];
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          v30 += 2;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        if (v50)
        {
          uint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v35 = *v33;
            if (*(unsigned char *)(*v33 + 8)) {
              uint64_t v36 = *(void *)(v35 + 16);
            }
            else {
              uint64_t v36 = v35 + 9;
            }
            v23(a1, v36, 0, v33[1], v47, v46, 0);
            v33 += 2;
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, void, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        if (v50)
        {
          uint64_t v33 = v52;
          uint64_t v34 = &v52[v50];
          do
          {
            uint64_t v36 = *(void *)v33;
            uint64_t v35 = *((void *)v33++ + 1);
            v23(a1, *(void *)(v36 + 8), 0, v35, v47, v46, 0);
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, char *__s, uint64_t *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v7 = *a3;
    LOBYTE(v9) = 6;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = __s;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = v7;
  }
  return v3 == 0;
}

double re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(void *)(a1 + 168));
    LOBYTE(v3[0]) = 7;
    DWORD1(v3[0]) = 32;
    *((void *)&v3[0] + 1) = "entry";
    v3[1] = xmmword_23436C460;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == 2)
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndObject(*((uint64_t **)result + 21));
      uint64_t v4 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v7) {
        uint64_t v5 = *(unsigned char **)&v8[7];
      }
      else {
        uint64_t v5 = v8;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary entry \"%s\". Expected 2 objects (key+value). Actual number of objects: %lld.", (re::DynamicString *)&v9, v5, *(void *)(*((void *)v1 + 16) + 48 * *((void *)v1 + 14) - 16));
      if (v9 && (v10 & 1) != 0) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
      double result = v6;
      if (v6)
      {
        if (v7) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
        }
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndArray(*((uint64_t **)result + 21));
      uint64_t v4 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      ++*(void *)(v4 - 16);
    }
    else
    {
      if (v8) {
        uint64_t v5 = *(unsigned char **)&v9[7];
      }
      else {
        uint64_t v5 = v9;
      }
      uint64_t v6 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)&v10, v5, *(void *)(v6 - 24), *(void *)(v6 - 16));
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      double result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

void std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(char *a1, char *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v3 = 126 - 2 * __clz((a2 - a1) >> 4);
  uint64_t v5 = a3;
  if (a2 == a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(long long *a1, unint64_t **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(void **)v10)
                {
                  long long v95 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v95;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = (long long *)(v10 + 16);
                uint64_t v40 = (long long *)(v10 + 32);
                uint64_t v41 = (long long *)(v10 + 48);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (_OWORD *)(v10 + 48));
                __n128 v43 = *(a2 - 2);
                uint64_t v42 = a2 - 2;
                if (*v43 < **(void **)(v10 + 48))
                {
                  long long v44 = *v41;
                  long long *v41 = *(_OWORD *)v42;
                  *(_OWORD *)uint64_t v42 = v44;
                  if (**(void **)v41 < **(void **)v40)
                  {
                    long long v45 = *v40;
                    long long *v40 = *v41;
                    long long *v41 = v45;
                    if (**(void **)v40 < **(void **)v39)
                    {
                      long long v46 = *v39;
                      long long *v39 = *v40;
                      long long *v40 = v46;
                      if (**(void **)(v10 + 16) < **(void **)v10)
                      {
                        long long v96 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v39;
                        long long *v39 = v96;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = (unint64_t **)(v10 + 16);
            BOOL v49 = (unint64_t **)v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = *(unint64_t **)(v51 + 16);
                  if (*v53 < **(void **)v51)
                  {
                    uint64_t v54 = *(void *)(v51 + 24);
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v55 + 16) = *(_OWORD *)(v10 + v55);
                      if (!v55) {
                        break;
                      }
                      unint64_t v56 = **(void **)(v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (void *)(v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = (void *)v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 2;
                  v50 += 16;
                  unint64_t v51 = (unint64_t)v52;
                }
                while (v52 + 2 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v87 = v47;
                uint64_t v88 = (unint64_t *)*((void *)a1 + 2);
                if (*v88 < **(void **)a1)
                {
                  int v89 = (unint64_t *)*((void *)a1 + 3);
                  int v90 = v87;
                  do
                  {
                    *(_OWORD *)int v90 = *((_OWORD *)v90 - 1);
                    uint64_t v91 = *(v90 - 4);
                    v90 -= 2;
                  }
                  while (*v88 < *v91);
                  *int v90 = v88;
                  v90[1] = v89;
                }
                long long v47 = v87 + 2;
                a1 = (long long *)v87;
              }
              while (v87 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unint64_t **)v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = (unint64_t **)(v10 + 16 * v61);
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    unint64_t v63 = **v62;
                    unint64_t v65 = *v62[2];
                    BOOL v64 = v63 >= v65;
                    if (v63 > v65) {
                      unint64_t v65 = **v62;
                    }
                    if (!v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v65 = **v62;
                  }
                  uint64_t v66 = (unint64_t **)(v10 + 16 * v60);
                  uint64_t v67 = *v66;
                  if (v65 >= **v66)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = (unint64_t **)(v10 + 16 * v70);
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        unint64_t v73 = **v62;
                        unint64_t v71 = *v62[2];
                        BOOL v72 = v73 >= v71;
                        if (v73 <= v71) {
                          unint64_t v73 = *v62[2];
                        }
                        if (v72) {
                          uint64_t v61 = v70;
                        }
                        else {
                          v62 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v73 = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (v73 >= *v67);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v74 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v75 = 0;
                long long v97 = *(_OWORD *)v10;
                uint64_t v76 = (_OWORD *)v10;
                do
                {
                  uint64_t v77 = (uint64_t)&v76[v75 + 1];
                  uint64_t v78 = (2 * v75) | 1;
                  uint64_t v79 = 2 * v75 + 2;
                  if (v79 < v74 && **(void **)v77 < **(void **)(v77 + 16))
                  {
                    v77 += 16;
                    uint64_t v78 = v79;
                  }
                  _OWORD *v76 = *(_OWORD *)v77;
                  uint64_t v76 = (_OWORD *)v77;
                  uint64_t v75 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                a2 -= 2;
                if ((unint64_t **)v77 == a2)
                {
                  *(_OWORD *)uint64_t v77 = v97;
                }
                else
                {
                  *(_OWORD *)uint64_t v77 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v97;
                  uint64_t v80 = v77 - v10 + 16;
                  if (v80 >= 17)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 4) - 2) >> 1;
                    uint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                    int v83 = *(void **)v77;
                    if (**(void **)v82 < **(void **)v77)
                    {
                      uint64_t v84 = *(void *)(v77 + 8);
                      do
                      {
                        int v85 = (_OWORD *)v77;
                        uint64_t v77 = (uint64_t)v82;
                        _OWORD *v85 = *v82;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        uint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                      }
                      while (**(void **)v82 < *v83);
                      *(void *)uint64_t v77 = v83;
                      *(void *)(v77 + 8) = v84;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, (unint64_t **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 2, (unint64_t **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v14 - 1, v14, (unint64_t **)&a1[v13 + 1]);
            long long v92 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v92;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(&a1[v12 >> 1], (unint64_t **)a1, a2 - 2);
          }
          --a3;
          uint64_t v15 = *(unint64_t **)a1;
          unint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unint64_t **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unint64_t *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          uint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v94 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v94;
            unint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unint64_t *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          unint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unint64_t **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v93 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v93;
            unint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unint64_t *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unint64_t **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t a1, unint64_t **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 16);
      BOOL v18 = (long long *)(a1 + 32);
      unint64_t v19 = (long long *)(a1 + 48);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)(a1 + 48));
      uint64_t v21 = *(a2 - 2);
      BOOL v20 = (long long *)(a2 - 2);
      if (*v21 < **(void **)(a1 + 48))
      {
        long long v22 = *v19;
        *unint64_t v19 = *v20;
        long long *v20 = v22;
        if (**(void **)v19 < **(void **)v18)
        {
          long long v23 = *v18;
          *BOOL v18 = *v19;
          *unint64_t v19 = v23;
          if (**(void **)v18 < **(void **)v17)
          {
            long long v24 = *v17;
            *uint64_t v17 = *v18;
            *BOOL v18 = v24;
            if (**(void **)(a1 + 16) < **(void **)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = (unint64_t **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32));
      uint64_t v9 = (unint64_t **)(a1 + 48);
      if ((unint64_t **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (unint64_t **)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      unint64_t v16 = (unint64_t **)a1;
LABEL_13:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(long long *a1, unsigned int **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v95 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v95;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = (long long *)(v10 + 16);
                uint64_t v40 = (long long *)(v10 + 32);
                uint64_t v41 = (long long *)(v10 + 48);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (_OWORD *)(v10 + 48));
                __n128 v43 = *(a2 - 2);
                uint64_t v42 = a2 - 2;
                if (*v43 < **(_DWORD **)(v10 + 48))
                {
                  long long v44 = *v41;
                  long long *v41 = *(_OWORD *)v42;
                  *(_OWORD *)uint64_t v42 = v44;
                  if (**(_DWORD **)v41 < **(_DWORD **)v40)
                  {
                    long long v45 = *v40;
                    long long *v40 = *v41;
                    long long *v41 = v45;
                    if (**(_DWORD **)v40 < **(_DWORD **)v39)
                    {
                      long long v46 = *v39;
                      long long *v39 = *v40;
                      long long *v40 = v46;
                      if (**(_DWORD **)(v10 + 16) < **(_DWORD **)v10)
                      {
                        long long v96 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v39;
                        long long *v39 = v96;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = (unsigned int **)(v10 + 16);
            BOOL v49 = (unsigned int **)v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = *(unsigned int **)(v51 + 16);
                  if (*v53 < **(_DWORD **)v51)
                  {
                    uint64_t v54 = *(void *)(v51 + 24);
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v55 + 16) = *(_OWORD *)(v10 + v55);
                      if (!v55) {
                        break;
                      }
                      unsigned int v56 = **(_DWORD **)(v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (void *)(v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = (void *)v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 2;
                  v50 += 16;
                  unint64_t v51 = (unint64_t)v52;
                }
                while (v52 + 2 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v87 = v47;
                uint64_t v88 = (unsigned int *)*((void *)a1 + 2);
                if (*v88 < **(_DWORD **)a1)
                {
                  int v89 = (unsigned int *)*((void *)a1 + 3);
                  int v90 = v87;
                  do
                  {
                    *(_OWORD *)int v90 = *((_OWORD *)v90 - 1);
                    uint64_t v91 = *(v90 - 4);
                    v90 -= 2;
                  }
                  while (*v88 < *v91);
                  *int v90 = v88;
                  v90[1] = v89;
                }
                long long v47 = v87 + 2;
                a1 = (long long *)v87;
              }
              while (v87 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unsigned int **)v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = (unsigned int **)(v10 + 16 * v61);
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    unsigned int v63 = **v62;
                    unsigned int v65 = *v62[2];
                    BOOL v64 = v63 >= v65;
                    if (v63 > v65) {
                      unsigned int v65 = **v62;
                    }
                    if (!v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v65 = **v62;
                  }
                  uint64_t v66 = (unsigned int **)(v10 + 16 * v60);
                  uint64_t v67 = *v66;
                  if (v65 >= **v66)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = (unsigned int **)(v10 + 16 * v70);
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        unsigned int v73 = **v62;
                        unsigned int v71 = *v62[2];
                        BOOL v72 = v73 >= v71;
                        if (v73 <= v71) {
                          unsigned int v73 = *v62[2];
                        }
                        if (v72) {
                          uint64_t v61 = v70;
                        }
                        else {
                          v62 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v73 = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (v73 >= *v67);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v74 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v75 = 0;
                long long v97 = *(_OWORD *)v10;
                uint64_t v76 = (_OWORD *)v10;
                do
                {
                  uint64_t v77 = (uint64_t)&v76[v75 + 1];
                  uint64_t v78 = (2 * v75) | 1;
                  uint64_t v79 = 2 * v75 + 2;
                  if (v79 < v74 && **(_DWORD **)v77 < **(_DWORD **)(v77 + 16))
                  {
                    v77 += 16;
                    uint64_t v78 = v79;
                  }
                  _OWORD *v76 = *(_OWORD *)v77;
                  uint64_t v76 = (_OWORD *)v77;
                  uint64_t v75 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                a2 -= 2;
                if ((unsigned int **)v77 == a2)
                {
                  *(_OWORD *)uint64_t v77 = v97;
                }
                else
                {
                  *(_OWORD *)uint64_t v77 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v97;
                  uint64_t v80 = v77 - v10 + 16;
                  if (v80 >= 17)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 4) - 2) >> 1;
                    uint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                    int v83 = *(_DWORD **)v77;
                    if (**(_DWORD **)v82 < **(_DWORD **)v77)
                    {
                      uint64_t v84 = *(void *)(v77 + 8);
                      do
                      {
                        int v85 = (_OWORD *)v77;
                        uint64_t v77 = (uint64_t)v82;
                        _OWORD *v85 = *v82;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        uint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                      }
                      while (**(_DWORD **)v82 < *v83);
                      *(void *)uint64_t v77 = v83;
                      *(void *)(v77 + 8) = v84;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unsigned int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, (unsigned int **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 2, (unsigned int **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v14 - 1, v14, (unsigned int **)&a1[v13 + 1]);
            long long v92 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v92;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(&a1[v12 >> 1], (unsigned int **)a1, a2 - 2);
          }
          --a3;
          unint64_t v15 = *(unsigned int **)a1;
          unsigned int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unsigned int **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unsigned int *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          uint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v94 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v94;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unsigned int *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          unsigned int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unsigned int **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            long long v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            long long v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          long long v24 = (long long *)v21;
          do
          {
            long long v93 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v93;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unsigned int *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unsigned int **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 16);
      BOOL v18 = (long long *)(a1 + 32);
      unsigned int v19 = (long long *)(a1 + 48);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)(a1 + 48));
      uint64_t v21 = *(a2 - 2);
      BOOL v20 = (long long *)(a2 - 2);
      if (*v21 < **(_DWORD **)(a1 + 48))
      {
        long long v22 = *v19;
        *unsigned int v19 = *v20;
        long long *v20 = v22;
        if (**(_DWORD **)v19 < **(_DWORD **)v18)
        {
          long long v23 = *v18;
          *BOOL v18 = *v19;
          *unsigned int v19 = v23;
          if (**(_DWORD **)v18 < **(_DWORD **)v17)
          {
            long long v24 = *v17;
            *uint64_t v17 = *v18;
            *BOOL v18 = v24;
            if (**(_DWORD **)(a1 + 16) < **(_DWORD **)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = (unsigned int **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32));
      uint64_t v9 = (unsigned int **)(a1 + 48);
      if ((unsigned int **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned int **)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      unsigned int v16 = (unsigned int **)a1;
LABEL_13:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(unsigned __int16 **a1, unsigned __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v96 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v96;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = v10 + 2;
                uint64_t v40 = v10 + 4;
                uint64_t v41 = v10 + 6;
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3);
                __n128 v43 = *(a2 - 2);
                uint64_t v42 = a2 - 2;
                if (*v43 < *v10[6])
                {
                  long long v44 = *(_OWORD *)v41;
                  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
                  *(_OWORD *)uint64_t v42 = v44;
                  if (**v41 < **v40)
                  {
                    long long v45 = *(_OWORD *)v40;
                    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
                    *(_OWORD *)uint64_t v41 = v45;
                    if (**v40 < **v39)
                    {
                      long long v46 = *(_OWORD *)v39;
                      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
                      *(_OWORD *)uint64_t v40 = v46;
                      if (*v10[2] < **v10)
                      {
                        long long v97 = *(_OWORD *)v10;
                        *(_OWORD *)uint64_t v10 = *(_OWORD *)v39;
                        *(_OWORD *)uint64_t v39 = v97;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = v10 + 2;
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = v51[2];
                  if (*v53 < **v51)
                  {
                    uint64_t v54 = v51[3];
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v55 + 16) = *(_OWORD *)((char *)v10 + v55);
                      if (!v55) {
                        break;
                      }
                      unsigned int v56 = **(unsigned __int16 **)((char *)v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (unsigned __int16 **)((char *)v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 2;
                  v50 += 16;
                  unint64_t v51 = v52;
                }
                while (v52 + 2 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v88 = v47;
                int v89 = a1[2];
                if (*v89 < **a1)
                {
                  int v90 = a1[3];
                  uint64_t v91 = v88;
                  do
                  {
                    *(_OWORD *)uint64_t v91 = *((_OWORD *)v91 - 1);
                    long long v92 = *(v91 - 4);
                    v91 -= 2;
                  }
                  while (*v89 < *v92);
                  *uint64_t v91 = v89;
                  v91[1] = v90;
                }
                long long v47 = v88 + 2;
                a1 = v88;
              }
              while (v88 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = &v10[2 * v61];
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    unsigned int v63 = **v62;
                    unsigned int v65 = *v62[2];
                    BOOL v64 = v63 >= v65;
                    if (v63 > v65) {
                      unsigned int v65 = **v62;
                    }
                    if (!v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v65 = **v62;
                  }
                  uint64_t v66 = &v10[2 * v60];
                  uint64_t v67 = *v66;
                  if (v65 >= **v66)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = &v10[2 * v70];
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        unsigned int v71 = **v62;
                        unsigned int v72 = *v62[2];
                        BOOL v73 = v71 >= v72;
                        unsigned int v74 = v71 <= v72 ? *v62[2] : **v62;
                        if (v73) {
                          uint64_t v61 = v70;
                        }
                        else {
                          v62 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v74 = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (v74 >= *v67);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v75 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v76 = 0;
                long long v98 = *(_OWORD *)v10;
                uint64_t v77 = v10;
                do
                {
                  uint64_t v78 = &v77[2 * v76 + 2];
                  uint64_t v79 = (2 * v76) | 1;
                  uint64_t v80 = 2 * v76 + 2;
                  if (v80 < v75 && **v78 < *v78[2])
                  {
                    v78 += 2;
                    uint64_t v79 = v80;
                  }
                  *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
                  uint64_t v77 = v78;
                  uint64_t v76 = v79;
                }
                while (v79 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
                a2 -= 2;
                if (v78 == a2)
                {
                  *(_OWORD *)uint64_t v78 = v98;
                }
                else
                {
                  *(_OWORD *)uint64_t v78 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v98;
                  uint64_t v81 = (char *)v78 - (char *)v10 + 16;
                  if (v81 >= 17)
                  {
                    unint64_t v82 = (((unint64_t)v81 >> 4) - 2) >> 1;
                    int v83 = &v10[2 * v82];
                    uint64_t v84 = *v78;
                    if (**v83 < **v78)
                    {
                      int v85 = v78[1];
                      do
                      {
                        uint64_t v86 = v78;
                        uint64_t v78 = v83;
                        *(_OWORD *)uint64_t v86 = *(_OWORD *)v83;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        int v83 = &v10[2 * v82];
                      }
                      while (**v83 < *v84);
                      _anonymous_namespace_ *v78 = v84;
                      v78[1] = v85;
                    }
                  }
                }
              }
              while (v75-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v93 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v93;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          uint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v95 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v95;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            long long v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            long long v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          long long v24 = v21;
          do
          {
            long long v94 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)long long v24 = v94;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = a1 + 2;
      BOOL v18 = a1 + 4;
      unsigned int v19 = a1 + 6;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3);
      uint64_t v21 = *(a2 - 2);
      BOOL v20 = a2 - 2;
      if (*v21 < *a1[6])
      {
        long long v22 = *(_OWORD *)v19;
        *(_OWORD *)unsigned int v19 = *(_OWORD *)v20;
        *(_OWORD *)BOOL v20 = v22;
        if (**v19 < **v18)
        {
          long long v23 = *(_OWORD *)v18;
          *(_OWORD *)BOOL v18 = *(_OWORD *)v19;
          *(_OWORD *)unsigned int v19 = v23;
          if (**v18 < **v17)
          {
            long long v24 = *(_OWORD *)v17;
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            *(_OWORD *)BOOL v18 = v24;
            if (*a1[2] < **a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v17;
              *(_OWORD *)uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int16 **)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      unsigned int v16 = a1;
LABEL_13:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v96 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v96;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = v10 + 2;
                uint64_t v40 = v10 + 4;
                uint64_t v41 = v10 + 6;
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3);
                __n128 v43 = *(a2 - 2);
                uint64_t v42 = a2 - 2;
                if (*v43 < *v10[6])
                {
                  long long v44 = *(_OWORD *)v41;
                  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
                  *(_OWORD *)uint64_t v42 = v44;
                  if (**v41 < **v40)
                  {
                    long long v45 = *(_OWORD *)v40;
                    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
                    *(_OWORD *)uint64_t v41 = v45;
                    if (**v40 < **v39)
                    {
                      long long v46 = *(_OWORD *)v39;
                      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
                      *(_OWORD *)uint64_t v40 = v46;
                      if (*v10[2] < **v10)
                      {
                        long long v97 = *(_OWORD *)v10;
                        *(_OWORD *)uint64_t v10 = *(_OWORD *)v39;
                        *(_OWORD *)uint64_t v39 = v97;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = v10 + 2;
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = v51[2];
                  if (*v53 < **v51)
                  {
                    uint64_t v54 = v51[3];
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v55 + 16) = *(_OWORD *)((char *)v10 + v55);
                      if (!v55) {
                        break;
                      }
                      unsigned int v56 = **(unsigned __int8 **)((char *)v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (unsigned __int8 **)((char *)v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 2;
                  v50 += 16;
                  unint64_t v51 = v52;
                }
                while (v52 + 2 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v88 = v47;
                int v89 = a1[2];
                if (*v89 < **a1)
                {
                  int v90 = a1[3];
                  uint64_t v91 = v88;
                  do
                  {
                    *(_OWORD *)uint64_t v91 = *((_OWORD *)v91 - 1);
                    long long v92 = *(v91 - 4);
                    v91 -= 2;
                  }
                  while (*v89 < *v92);
                  *uint64_t v91 = v89;
                  v91[1] = v90;
                }
                long long v47 = v88 + 2;
                a1 = v88;
              }
              while (v88 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = &v10[2 * v61];
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    unsigned int v63 = **v62;
                    unsigned int v65 = *v62[2];
                    BOOL v64 = v63 >= v65;
                    if (v63 > v65) {
                      unsigned int v65 = **v62;
                    }
                    if (!v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v65 = **v62;
                  }
                  uint64_t v66 = &v10[2 * v60];
                  uint64_t v67 = *v66;
                  if (v65 >= **v66)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = &v10[2 * v70];
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        unsigned int v71 = **v62;
                        unsigned int v72 = *v62[2];
                        BOOL v73 = v71 >= v72;
                        unsigned int v74 = v71 <= v72 ? *v62[2] : **v62;
                        if (v73) {
                          uint64_t v61 = v70;
                        }
                        else {
                          v62 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v74 = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (v74 >= *v67);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v75 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v76 = 0;
                long long v98 = *(_OWORD *)v10;
                uint64_t v77 = v10;
                do
                {
                  uint64_t v78 = &v77[2 * v76 + 2];
                  uint64_t v79 = (2 * v76) | 1;
                  uint64_t v80 = 2 * v76 + 2;
                  if (v80 < v75 && **v78 < *v78[2])
                  {
                    v78 += 2;
                    uint64_t v79 = v80;
                  }
                  *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
                  uint64_t v77 = v78;
                  uint64_t v76 = v79;
                }
                while (v79 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
                a2 -= 2;
                if (v78 == a2)
                {
                  *(_OWORD *)uint64_t v78 = v98;
                }
                else
                {
                  *(_OWORD *)uint64_t v78 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v98;
                  uint64_t v81 = (char *)v78 - (char *)v10 + 16;
                  if (v81 >= 17)
                  {
                    unint64_t v82 = (((unint64_t)v81 >> 4) - 2) >> 1;
                    int v83 = &v10[2 * v82];
                    uint64_t v84 = *v78;
                    if (**v83 < **v78)
                    {
                      int v85 = v78[1];
                      do
                      {
                        uint64_t v86 = v78;
                        uint64_t v78 = v83;
                        *(_OWORD *)uint64_t v86 = *(_OWORD *)v83;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        int v83 = &v10[2 * v82];
                      }
                      while (**v83 < *v84);
                      _anonymous_namespace_ *v78 = v84;
                      v78[1] = v85;
                    }
                  }
                }
              }
              while (v75-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v93 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v93;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          uint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v95 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v95;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            long long v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            long long v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          long long v24 = v21;
          do
          {
            long long v94 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)long long v24 = v94;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = a1 + 2;
      BOOL v18 = a1 + 4;
      unsigned int v19 = a1 + 6;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3);
      uint64_t v21 = *(a2 - 2);
      BOOL v20 = a2 - 2;
      if (*v21 < *a1[6])
      {
        long long v22 = *(_OWORD *)v19;
        *(_OWORD *)unsigned int v19 = *(_OWORD *)v20;
        *(_OWORD *)BOOL v20 = v22;
        if (**v19 < **v18)
        {
          long long v23 = *(_OWORD *)v18;
          *(_OWORD *)BOOL v18 = *(_OWORD *)v19;
          *(_OWORD *)unsigned int v19 = v23;
          if (**v18 < **v17)
          {
            long long v24 = *(_OWORD *)v17;
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            *(_OWORD *)BOOL v18 = v24;
            if (*a1[2] < **a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v17;
              *(_OWORD *)uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int8 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int8 **)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      unsigned int v16 = a1;
LABEL_13:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(long long *a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (void *)*((void *)a2 - 2);
                uint64_t v37 = a2 - 1;
                if (*v38 < **(void **)v10)
                {
                  long long v94 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v94;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = (long long *)(v10 + 16);
                uint64_t v40 = (long long *)(v10 + 32);
                uint64_t v41 = (long long *)(v10 + 48);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (_OWORD *)(v10 + 48));
                __n128 v43 = (void *)*((void *)a2 - 2);
                uint64_t v42 = a2 - 1;
                if (*v43 < **(void **)(v10 + 48))
                {
                  long long v44 = *v41;
                  long long *v41 = *v42;
                  long long *v42 = v44;
                  if (**(void **)v41 < **(void **)v40)
                  {
                    long long v45 = *v40;
                    long long *v40 = *v41;
                    long long *v41 = v45;
                    if (**(void **)v40 < **(void **)v39)
                    {
                      long long v46 = *v39;
                      long long *v39 = *v40;
                      long long *v40 = v46;
                      if (**(void **)(v10 + 16) < **(void **)v10)
                      {
                        long long v95 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v39;
                        long long *v39 = v95;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = (long long *)(v10 + 16);
            BOOL v49 = (long long *)v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = *(void **)(v51 + 16);
                  if (*v53 < **(void **)v51)
                  {
                    uint64_t v54 = *(void *)(v51 + 24);
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v55 + 16) = *(_OWORD *)(v10 + v55);
                      if (!v55) {
                        break;
                      }
                      uint64_t v56 = **(void **)(v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (void *)(v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = (void *)v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 1;
                  v50 += 16;
                  unint64_t v51 = (unint64_t)v52;
                }
                while (v52 + 1 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v86 = v47;
                uint64_t v87 = (void *)*((void *)a1 + 2);
                if (*v87 < **(void **)a1)
                {
                  uint64_t v88 = (void *)*((void *)a1 + 3);
                  int v89 = v86;
                  do
                  {
                    *int v89 = *(v89 - 1);
                    int v90 = (void *)*((void *)v89-- - 4);
                  }
                  while (*v87 < *v90);
                  *(void *)int v89 = v87;
                  *((void *)v89 + 1) = v88;
                }
                long long v47 = v86 + 1;
                a1 = v86;
              }
              while (v86 + 1 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = (uint64_t **)(v10 + 16 * v61);
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    uint64_t v63 = **v62;
                    uint64_t v65 = *v62[2];
                    BOOL v64 = v63 < v65;
                    if (v63 > v65) {
                      uint64_t v65 = **v62;
                    }
                    if (v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v65 = **v62;
                  }
                  uint64_t v66 = (uint64_t **)(v10 + 16 * v60);
                  uint64_t v67 = *v66;
                  if (v65 >= **v66)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = (uint64_t **)(v10 + 16 * v70);
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        uint64_t v73 = **v62;
                        uint64_t v71 = *v62[2];
                        BOOL v72 = v73 < v71;
                        if (v73 <= v71) {
                          uint64_t v73 = *v62[2];
                        }
                        if (v72) {
                          v62 += 2;
                        }
                        else {
                          uint64_t v61 = v70;
                        }
                      }
                      else
                      {
                        uint64_t v73 = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (v73 >= *v67);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v74 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v75 = 0;
                long long v96 = *(_OWORD *)v10;
                uint64_t v76 = (_OWORD *)v10;
                do
                {
                  uint64_t v77 = (uint64_t)&v76[v75 + 1];
                  uint64_t v78 = (2 * v75) | 1;
                  uint64_t v79 = 2 * v75 + 2;
                  if (v79 < v74 && **(void **)v77 < **(void **)(v77 + 16))
                  {
                    v77 += 16;
                    uint64_t v78 = v79;
                  }
                  _OWORD *v76 = *(_OWORD *)v77;
                  uint64_t v76 = (_OWORD *)v77;
                  uint64_t v75 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if ((long long *)v77 == --a2)
                {
                  *(_OWORD *)uint64_t v77 = v96;
                }
                else
                {
                  *(_OWORD *)uint64_t v77 = *a2;
                  *a2 = v96;
                  uint64_t v80 = v77 - v10 + 16;
                  if (v80 >= 17)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 4) - 2) >> 1;
                    unint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                    int v83 = *(void **)v77;
                    if (**(void **)v82 < **(void **)v77)
                    {
                      uint64_t v84 = *(void *)(v77 + 8);
                      do
                      {
                        int v85 = (_OWORD *)v77;
                        uint64_t v77 = (uint64_t)v82;
                        _OWORD *v85 = *v82;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                      }
                      while (**(void **)v82 < *v83);
                      *(void *)uint64_t v77 = v83;
                      *(void *)(v77 + 8) = v84;
                    }
                  }
                }
                BOOL v64 = v74-- <= 2;
              }
              while (!v64);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (uint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, (uint64_t **)&a1[v12 >> 1], (uint64_t **)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 1, v14 - 2, (uint64_t **)a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 2, (uint64_t **)&a1[v13 + 1], (uint64_t **)a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v14 - 1, v14, (uint64_t **)&a1[v13 + 1]);
            long long v91 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v91;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(&a1[v12 >> 1], (uint64_t **)a1, (uint64_t **)a2 - 2);
          }
          --a3;
          unsigned int v15 = *(uint64_t **)a1;
          uint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **((void **)a2 - 2))
          {
            __n128 v30 = (void **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (void **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          uint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v93 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v93;
            uint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          uint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            long long v23 = (void *)*((void *)v21-- - 2);
          }
          while (*v23 >= v16);
        }
        else
        {
          do
            long long v22 = (void *)*((void *)v21-- - 2);
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          long long v24 = v21;
          do
          {
            long long v92 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v92;
            uint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (void *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (long long *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 16);
      BOOL v18 = (long long *)(a1 + 32);
      uint64_t v19 = (long long *)(a1 + 48);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a1 + 48));
      uint64_t v21 = *(void **)(a2 - 16);
      BOOL v20 = (long long *)(a2 - 16);
      if (*v21 < **(void **)(a1 + 48))
      {
        long long v22 = *v19;
        *uint64_t v19 = *v20;
        long long *v20 = v22;
        if (**(void **)v19 < **(void **)v18)
        {
          long long v23 = *v18;
          *BOOL v18 = *v19;
          *uint64_t v19 = v23;
          if (**(void **)v18 < **(void **)v17)
          {
            long long v24 = *v17;
            *uint64_t v17 = *v18;
            *BOOL v18 = v24;
            if (**(void **)(a1 + 16) < **(void **)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          uint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v16 = (void *)a1;
LABEL_13:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    char v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(long long *a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (_DWORD *)*((void *)a2 - 2);
                uint64_t v37 = a2 - 1;
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v94 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v94;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = (long long *)(v10 + 16);
                uint64_t v40 = (long long *)(v10 + 32);
                uint64_t v41 = (long long *)(v10 + 48);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (_OWORD *)(v10 + 48));
                __n128 v43 = (_DWORD *)*((void *)a2 - 2);
                uint64_t v42 = a2 - 1;
                if (*v43 < **(_DWORD **)(v10 + 48))
                {
                  long long v44 = *v41;
                  long long *v41 = *v42;
                  long long *v42 = v44;
                  if (**(_DWORD **)v41 < **(_DWORD **)v40)
                  {
                    long long v45 = *v40;
                    long long *v40 = *v41;
                    long long *v41 = v45;
                    if (**(_DWORD **)v40 < **(_DWORD **)v39)
                    {
                      long long v46 = *v39;
                      long long *v39 = *v40;
                      long long *v40 = v46;
                      if (**(_DWORD **)(v10 + 16) < **(_DWORD **)v10)
                      {
                        long long v95 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v39;
                        long long *v39 = v95;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = (long long *)(v10 + 16);
            BOOL v49 = (long long *)v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = *(_DWORD **)(v51 + 16);
                  if (*v53 < **(_DWORD **)v51)
                  {
                    uint64_t v54 = *(void *)(v51 + 24);
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v55 + 16) = *(_OWORD *)(v10 + v55);
                      if (!v55) {
                        break;
                      }
                      int v56 = **(_DWORD **)(v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (void *)(v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = (void *)v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 1;
                  v50 += 16;
                  unint64_t v51 = (unint64_t)v52;
                }
                while (v52 + 1 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v86 = v47;
                uint64_t v87 = (_DWORD *)*((void *)a1 + 2);
                if (*v87 < **(_DWORD **)a1)
                {
                  uint64_t v88 = (_DWORD *)*((void *)a1 + 3);
                  int v89 = v86;
                  do
                  {
                    *int v89 = *(v89 - 1);
                    int v90 = (_DWORD *)*((void *)v89-- - 4);
                  }
                  while (*v87 < *v90);
                  *(void *)int v89 = v87;
                  *((void *)v89 + 1) = v88;
                }
                long long v47 = v86 + 1;
                a1 = v86;
              }
              while (v86 + 1 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = (int **)(v10 + 16 * v61);
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    int v63 = **v62;
                    int v65 = *v62[2];
                    BOOL v64 = v63 < v65;
                    if (v63 > v65) {
                      int v65 = **v62;
                    }
                    if (v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    int v65 = **v62;
                  }
                  uint64_t v66 = (int **)(v10 + 16 * v60);
                  uint64_t v67 = *v66;
                  if (v65 >= **v66)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = (int **)(v10 + 16 * v70);
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        int v73 = **v62;
                        int v71 = *v62[2];
                        BOOL v72 = v73 < v71;
                        if (v73 <= v71) {
                          int v73 = *v62[2];
                        }
                        if (v72) {
                          v62 += 2;
                        }
                        else {
                          uint64_t v61 = v70;
                        }
                      }
                      else
                      {
                        int v73 = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (v73 >= *v67);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v74 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v75 = 0;
                long long v96 = *(_OWORD *)v10;
                uint64_t v76 = (_OWORD *)v10;
                do
                {
                  uint64_t v77 = (uint64_t)&v76[v75 + 1];
                  uint64_t v78 = (2 * v75) | 1;
                  uint64_t v79 = 2 * v75 + 2;
                  if (v79 < v74 && **(_DWORD **)v77 < **(_DWORD **)(v77 + 16))
                  {
                    v77 += 16;
                    uint64_t v78 = v79;
                  }
                  _OWORD *v76 = *(_OWORD *)v77;
                  uint64_t v76 = (_OWORD *)v77;
                  uint64_t v75 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if ((long long *)v77 == --a2)
                {
                  *(_OWORD *)uint64_t v77 = v96;
                }
                else
                {
                  *(_OWORD *)uint64_t v77 = *a2;
                  *a2 = v96;
                  uint64_t v80 = v77 - v10 + 16;
                  if (v80 >= 17)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 4) - 2) >> 1;
                    unint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                    int v83 = *(_DWORD **)v77;
                    if (**(_DWORD **)v82 < **(_DWORD **)v77)
                    {
                      uint64_t v84 = *(void *)(v77 + 8);
                      do
                      {
                        int v85 = (_OWORD *)v77;
                        uint64_t v77 = (uint64_t)v82;
                        _OWORD *v85 = *v82;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = (_OWORD *)(v10 + 16 * v81);
                      }
                      while (**(_DWORD **)v82 < *v83);
                      *(void *)uint64_t v77 = v83;
                      *(void *)(v77 + 8) = v84;
                    }
                  }
                }
                BOOL v64 = v74-- <= 2;
              }
              while (!v64);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, (int **)&a1[v12 >> 1], (int **)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 1, v14 - 2, (int **)a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 2, (int **)&a1[v13 + 1], (int **)a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v14 - 1, v14, (int **)&a1[v13 + 1]);
            long long v91 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v91;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(&a1[v12 >> 1], (int **)a1, (int **)a2 - 2);
          }
          --a3;
          uint64_t v15 = *(int **)a1;
          int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **((_DWORD **)a2 - 2))
          {
            __n128 v30 = (_DWORD **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (_DWORD **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (_DWORD *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          uint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v93 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v93;
            int v34 = *v15;
            do
            {
              uint64_t v35 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (_DWORD *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            long long v23 = (_DWORD *)*((void *)v21-- - 2);
          }
          while (*v23 >= v16);
        }
        else
        {
          do
            long long v22 = (_DWORD *)*((void *)v21-- - 2);
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          long long v24 = v21;
          do
          {
            long long v92 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v92;
            int v25 = *v15;
            do
            {
              unint64_t v26 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (_DWORD *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (long long *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(_DWORD **)(a2 - 16) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 16);
      BOOL v18 = (long long *)(a1 + 32);
      int v19 = (long long *)(a1 + 48);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a1 + 48));
      uint64_t v21 = *(_DWORD **)(a2 - 16);
      BOOL v20 = (long long *)(a2 - 16);
      if (*v21 < **(_DWORD **)(a1 + 48))
      {
        long long v22 = *v19;
        *int v19 = *v20;
        long long *v20 = v22;
        if (**(_DWORD **)v19 < **(_DWORD **)v18)
        {
          long long v23 = *v18;
          *BOOL v18 = *v19;
          *int v19 = v23;
          if (**(_DWORD **)v18 < **(_DWORD **)v17)
          {
            long long v24 = *v17;
            *uint64_t v17 = *v18;
            *BOOL v18 = v24;
            if (**(_DWORD **)(a1 + 16) < **(_DWORD **)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = (_DWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(_DWORD **)v9;
    if (**(_DWORD **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (void *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      int v16 = (void *)a1;
LABEL_13:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    char v8 = (_DWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(__int16 **a1, __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v94 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v94;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                uint64_t v39 = v10 + 2;
                uint64_t v40 = v10 + 4;
                uint64_t v41 = v10 + 6;
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3);
                __n128 v43 = *(a2 - 2);
                uint64_t v42 = a2 - 2;
                if (*v43 < *v10[6])
                {
                  long long v44 = *(_OWORD *)v41;
                  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
                  *(_OWORD *)uint64_t v42 = v44;
                  if (**v41 < **v40)
                  {
                    long long v45 = *(_OWORD *)v40;
                    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
                    *(_OWORD *)uint64_t v41 = v45;
                    if (**v40 < **v39)
                    {
                      long long v46 = *(_OWORD *)v39;
                      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
                      *(_OWORD *)uint64_t v40 = v46;
                      if (*v10[2] < **v10)
                      {
                        long long v95 = *(_OWORD *)v10;
                        *(_OWORD *)uint64_t v10 = *(_OWORD *)v39;
                        *(_OWORD *)uint64_t v39 = v95;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v47 = v10 + 2;
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  int v53 = v51[2];
                  if (*v53 < **v51)
                  {
                    uint64_t v54 = v51[3];
                    uint64_t v55 = v50;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v55 + 16) = *(_OWORD *)((char *)v10 + v55);
                      if (!v55) {
                        break;
                      }
                      int v56 = **(__int16 **)((char *)v10 + v55 - 16);
                      v55 -= 16;
                      if (*v53 >= v56)
                      {
                        uint64_t v57 = (__int16 **)((char *)v10 + v55 + 16);
                        goto LABEL_81;
                      }
                    }
                    uint64_t v57 = v10;
LABEL_81:
                    *uint64_t v57 = v53;
                    v57[1] = v54;
                  }
                  long long v47 = v52 + 2;
                  v50 += 16;
                  unint64_t v51 = v52;
                }
                while (v52 + 2 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                uint64_t v86 = v47;
                uint64_t v87 = a1[2];
                if (*v87 < **a1)
                {
                  uint64_t v88 = a1[3];
                  int v89 = v86;
                  do
                  {
                    *(_OWORD *)int v89 = *((_OWORD *)v89 - 1);
                    int v90 = *(v89 - 4);
                    v89 -= 2;
                  }
                  while (*v87 < *v90);
                  *int v89 = v87;
                  v89[1] = v88;
                }
                long long v47 = v86 + 2;
                a1 = v86;
              }
              while (v86 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = &v10[2 * v61];
                  if (2 * v60 + 2 < (uint64_t)v12)
                  {
                    int v63 = **v62;
                    int v65 = *v62[2];
                    BOOL v64 = v63 < v65;
                    if (v63 > v65) {
                      LOWORD(v65) = **v62;
                    }
                    if (v64)
                    {
                      v62 += 2;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  else
                  {
                    LOWORD(v65) = **v62;
                  }
                  uint64_t v66 = &v10[2 * v60];
                  uint64_t v67 = *v66;
                  if (**v66 <= (__int16)v65)
                  {
                    int v68 = v66[1];
                    do
                    {
                      uint64_t v69 = v66;
                      uint64_t v66 = v62;
                      *(_OWORD *)uint64_t v69 = *(_OWORD *)v62;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v70 = (2 * v61) | 1;
                      uint64_t v62 = &v10[2 * v70];
                      uint64_t v61 = 2 * v61 + 2;
                      if (v61 < (uint64_t)v12)
                      {
                        int v73 = **v62;
                        int v71 = *v62[2];
                        BOOL v72 = v73 < v71;
                        if (v73 <= v71) {
                          LOWORD(v73) = *v62[2];
                        }
                        if (v72) {
                          v62 += 2;
                        }
                        else {
                          uint64_t v61 = v70;
                        }
                      }
                      else
                      {
                        LOWORD(v73) = **v62;
                        uint64_t v61 = v70;
                      }
                    }
                    while (*v67 <= (__int16)v73);
                    *uint64_t v66 = v67;
                    v66[1] = v68;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v74 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v75 = 0;
                long long v96 = *(_OWORD *)v10;
                uint64_t v76 = v10;
                do
                {
                  uint64_t v77 = &v76[2 * v75 + 2];
                  uint64_t v78 = (2 * v75) | 1;
                  uint64_t v79 = 2 * v75 + 2;
                  if (v79 < v74 && **v77 < *v77[2])
                  {
                    v77 += 2;
                    uint64_t v78 = v79;
                  }
                  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
                  uint64_t v76 = v77;
                  uint64_t v75 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                a2 -= 2;
                if (v77 == a2)
                {
                  *(_OWORD *)uint64_t v77 = v96;
                }
                else
                {
                  *(_OWORD *)uint64_t v77 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v96;
                  uint64_t v80 = (char *)v77 - (char *)v10 + 16;
                  if (v80 >= 17)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 4) - 2) >> 1;
                    unint64_t v82 = &v10[2 * v81];
                    int v83 = *v77;
                    if (**v82 < **v77)
                    {
                      uint64_t v84 = v77[1];
                      do
                      {
                        int v85 = v77;
                        uint64_t v77 = v82;
                        *(_OWORD *)int v85 = *(_OWORD *)v82;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = &v10[2 * v81];
                      }
                      while (**v82 < *v83);
                      NSObject *v77 = v83;
                      v77[1] = v84;
                    }
                  }
                }
                BOOL v64 = v74-- <= 2;
              }
              while (!v64);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v91 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v91;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          int v15 = *a1;
          int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          uint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v93 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v93;
            int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            long long v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            long long v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          long long v24 = v21;
          do
          {
            long long v92 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)long long v24 = v92;
            int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = a1 + 2;
      BOOL v18 = a1 + 4;
      int v19 = a1 + 6;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3);
      uint64_t v21 = *(a2 - 2);
      BOOL v20 = a2 - 2;
      if (*v21 < *a1[6])
      {
        long long v22 = *(_OWORD *)v19;
        *(_OWORD *)int v19 = *(_OWORD *)v20;
        *(_OWORD *)BOOL v20 = v22;
        if (**v19 < **v18)
        {
          long long v23 = *(_OWORD *)v18;
          *(_OWORD *)BOOL v18 = *(_OWORD *)v19;
          *(_OWORD *)int v19 = v23;
          if (**v18 < **v17)
          {
            long long v24 = *(_OWORD *)v17;
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            *(_OWORD *)BOOL v18 = v24;
            if (*a1[2] < **a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v17;
              *(_OWORD *)uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(__int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (__int16 **)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      int v16 = a1;
LABEL_13:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 2;
    int v100 = a2 - 4;
    uint64_t v101 = a2;
    long long v98 = a2 - 6;
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          int v11 = v101;
          uint64_t v12 = (char *)v101 - (char *)v10;
          uint64_t v13 = ((char *)v101 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v35 = v101 - 2;
                if (re::DynamicString::operator<(*(v101 - 2), *v10))
                {
                  long long v105 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v35;
                  *(_OWORD *)uint64_t v35 = v105;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v9);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v9);
                break;
              case 5:
                uint64_t v36 = v10 + 2;
                uint64_t v37 = v10 + 4;
                uint64_t v38 = v10 + 6;
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6);
                uint64_t v39 = v101 - 2;
                if (re::DynamicString::operator<(*(v101 - 2), v10[6]))
                {
                  long long v40 = *(_OWORD *)v38;
                  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
                  *(_OWORD *)uint64_t v39 = v40;
                  if (re::DynamicString::operator<(*v38, *v37))
                  {
                    long long v41 = *(_OWORD *)v37;
                    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
                    *(_OWORD *)uint64_t v38 = v41;
                    if (re::DynamicString::operator<(*v37, *v36))
                    {
                      long long v42 = *(_OWORD *)v36;
                      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
                      *(_OWORD *)uint64_t v37 = v42;
                      if (re::DynamicString::operator<(v10[2], *v10))
                      {
                        long long v106 = *(_OWORD *)v10;
                        *(_OWORD *)uint64_t v10 = *(_OWORD *)v36;
                        *(_OWORD *)uint64_t v36 = v106;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            __n128 v43 = v10 + 2;
            BOOL v45 = v10 == v101 || v43 == v101;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                long long v47 = v10;
                do
                {
                  uint64_t v48 = v43;
                  uint64_t v49 = v47[2];
                  if (re::DynamicString::operator<(v49, *v47))
                  {
                    uint64_t v50 = v47[3];
                    uint64_t v51 = v46;
                    while (1)
                    {
                      uint64_t v52 = (char *)v10 + v51;
                      *(_OWORD *)((char *)v10 + v51 + 16) = *(_OWORD *)((char *)v10 + v51);
                      if (!v51) {
                        break;
                      }
                      v51 -= 16;
                      if ((re::DynamicString::operator<(v49, *((void *)v52 - 2)) & 1) == 0)
                      {
                        int v53 = (uint64_t *)((char *)v10 + v51 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v53 = v10;
LABEL_79:
                    *int v53 = v49;
                    v53[1] = v50;
                  }
                  __n128 v43 = v48 + 2;
                  v46 += 16;
                  long long v47 = v48;
                }
                while (v48 + 2 != v101);
              }
            }
            else if (!v45)
            {
              do
              {
                int v90 = v43;
                uint64_t v91 = a1[2];
                if (re::DynamicString::operator<(v91, *a1))
                {
                  uint64_t v92 = a1[3];
                  long long v93 = v90;
                  do
                  {
                    long long v94 = v93 - 2;
                    *(_OWORD *)long long v93 = *((_OWORD *)v93 - 1);
                    char v95 = re::DynamicString::operator<(v91, *(v93 - 4));
                    long long v93 = v94;
                  }
                  while ((v95 & 1) != 0);
                  *long long v94 = v91;
                  v94[1] = v92;
                }
                __n128 v43 = v90 + 2;
                a1 = v90;
              }
              while (v90 + 2 != v101);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != v101)
            {
              unint64_t v96 = (char *)v101 - (char *)v10;
              int64_t v54 = (unint64_t)(v13 - 2) >> 1;
              int64_t v55 = v54;
              do
              {
                int64_t v56 = v55;
                if (v54 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  int64_t v58 = &a1[2 * v57];
                  uint64_t v59 = 2 * v55 + 2;
                  int64_t v60 = v55;
                  if (v59 < v13)
                  {
                    uint64_t v61 = *v58;
                    uint64_t v62 = v58[2];
                    int v63 = re::DynamicString::operator<(*v58, v62);
                    BOOL v64 = v63 == 0;
                    if (v63) {
                      uint64_t v65 = v62;
                    }
                    else {
                      uint64_t v65 = v61;
                    }
                    int64_t v54 = (unint64_t)(v13 - 2) >> 1;
                    if (!v64)
                    {
                      v58 += 2;
                      uint64_t v57 = v59;
                    }
                  }
                  else
                  {
                    uint64_t v65 = *v58;
                  }
                  int64_t v56 = v60;
                  uint64_t v66 = &a1[2 * v60];
                  uint64_t v67 = *v66;
                  if ((re::DynamicString::operator<(v65, *v66) & 1) == 0)
                  {
                    uint64_t v97 = v66[1];
                    int64_t v99 = v56;
                    do
                    {
                      int v68 = v66;
                      uint64_t v66 = v58;
                      *(_OWORD *)int v68 = *(_OWORD *)v58;
                      if (v54 < v57) {
                        break;
                      }
                      uint64_t v69 = (2 * v57) | 1;
                      int64_t v58 = &a1[2 * v69];
                      uint64_t v70 = 2 * v57 + 2;
                      if (v70 < v13)
                      {
                        uint64_t v71 = *v58;
                        uint64_t v72 = v58[2];
                        int v73 = re::DynamicString::operator<(*v58, v72);
                        BOOL v74 = v73 == 0;
                        if (v73) {
                          uint64_t v75 = v72;
                        }
                        else {
                          uint64_t v75 = v71;
                        }
                        if (!v74) {
                          v58 += 2;
                        }
                        int64_t v54 = (unint64_t)(v13 - 2) >> 1;
                        uint64_t v57 = v74 ? v69 : v70;
                      }
                      else
                      {
                        uint64_t v75 = *v58;
                        uint64_t v57 = (2 * v57) | 1;
                      }
                    }
                    while (!re::DynamicString::operator<(v75, v67));
                    int64_t v56 = v99;
                    *uint64_t v66 = v67;
                    v66[1] = v97;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v76 = v96 >> 4;
              uint64_t v77 = v101;
              do
              {
                uint64_t v78 = 0;
                long long v107 = *(_OWORD *)a1;
                uint64_t v79 = a1;
                do
                {
                  uint64_t v80 = &v79[2 * v78 + 2];
                  uint64_t v81 = (2 * v78) | 1;
                  uint64_t v82 = 2 * v78 + 2;
                  if (v82 < v76 && re::DynamicString::operator<(*v80, v79[2 * v78 + 4]))
                  {
                    v80 += 2;
                    uint64_t v81 = v82;
                  }
                  *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
                  uint64_t v79 = v80;
                  uint64_t v78 = v81;
                }
                while (v81 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                v77 -= 2;
                if (v80 == v77)
                {
                  *(_OWORD *)uint64_t v80 = v107;
                }
                else
                {
                  *(_OWORD *)uint64_t v80 = *(_OWORD *)v77;
                  *(_OWORD *)uint64_t v77 = v107;
                  uint64_t v83 = (char *)v80 - (char *)a1 + 16;
                  if (v83 >= 17)
                  {
                    unint64_t v84 = (((unint64_t)v83 >> 4) - 2) >> 1;
                    int v85 = &a1[2 * v84];
                    uint64_t v86 = *v80;
                    if (re::DynamicString::operator<(*v85, *v80))
                    {
                      uint64_t v87 = v80[1];
                      do
                      {
                        uint64_t v88 = v80;
                        uint64_t v80 = v85;
                        *(_OWORD *)uint64_t v88 = *(_OWORD *)v85;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        int v85 = &a1[2 * v84];
                      }
                      while ((re::DynamicString::operator<(*v85, v86) & 1) != 0);
                      uint64_t *v80 = v86;
                      v80[1] = v87;
                    }
                  }
                }
              }
              while (v76-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          int v15 = &v10[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15, v10, v9);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v15, v9);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 2, v15 - 2, v100);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 4, &v10[2 * v14 + 2], v98);
            int v11 = v101;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15 - 2, v15, &v10[2 * v14 + 2]);
            long long v102 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v15;
            *(_OWORD *)int v15 = v102;
          }
          --a3;
          uint64_t v16 = *v10;
          if (a4 & 1) != 0 || (re::DynamicString::operator<(*(v10 - 2), *v10)) {
            break;
          }
          uint64_t v28 = v10[1];
          if (re::DynamicString::operator<(v16, *v9))
          {
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v16, v29) & 1) == 0);
          }
          else
          {
            __n128 v30 = v10 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= v101) {
                break;
              }
              v30 += 2;
            }
            while (!re::DynamicString::operator<(v16, *v10));
          }
          unint64_t v31 = v101;
          if (v10 < v101)
          {
            unint64_t v31 = v101;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            long long v104 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v104;
            do
            {
              uint64_t v33 = v10[2];
              v10 += 2;
            }
            while (!re::DynamicString::operator<(v16, v33));
            do
            {
              uint64_t v34 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v34) & 1) != 0);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v16;
          *(v10 - 1) = v28;
        }
        uint64_t v17 = 0;
        uint64_t v18 = a1[1];
        do
        {
          char v19 = re::DynamicString::operator<(a1[v17 + 2], v16);
          v17 += 2;
        }
        while ((v19 & 1) != 0);
        BOOL v20 = &a1[v17];
        uint64_t v21 = v11;
        if (v17 == 2)
        {
          uint64_t v21 = v11;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while ((re::DynamicString::operator<(v23, v16) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (!re::DynamicString::operator<(v22, v16));
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          long long v24 = v21;
          do
          {
            long long v103 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)long long v24 = v103;
            do
            {
              uint64_t v25 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v25, v16) & 1) != 0);
            do
            {
              uint64_t v26 = *(v24 - 2);
              v24 -= 2;
            }
            while (!re::DynamicString::operator<(v26, v16));
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        a4 = 0;
      }
      {
        break;
      }
      if (!v27) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v27) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (re::DynamicString::operator<(*(a2 - 2), *a1))
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      uint64_t v17 = a1 + 2;
      uint64_t v18 = a1 + 4;
      char v19 = a1 + 6;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6);
      uint64_t v21 = *(a2 - 2);
      BOOL v20 = a2 - 2;
      if (re::DynamicString::operator<(v21, a1[6]))
      {
        long long v22 = *(_OWORD *)v19;
        *(_OWORD *)char v19 = *(_OWORD *)v20;
        *(_OWORD *)BOOL v20 = v22;
        if (re::DynamicString::operator<(*v19, *v18))
        {
          long long v23 = *(_OWORD *)v18;
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
          *(_OWORD *)char v19 = v23;
          if (re::DynamicString::operator<(*v18, *v17))
          {
            long long v24 = *(_OWORD *)v17;
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            *(_OWORD *)uint64_t v18 = v24;
            if (re::DynamicString::operator<(a1[2], *a1))
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v17;
              *(_OWORD *)uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (re::DynamicString::operator<(*v9, *v8))
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        int v15 = (char *)a1 + v14;
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if ((re::DynamicString::operator<(v12, *((void *)v15 + 2)) & 1) == 0)
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v39 = (void *)a2[-1].n128_u64[0];
                uint64_t v38 = (long long *)&a2[-1];
                if (*v39 >> 1 < **(void **)v10 >> 1)
                {
                  long long v94 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v38;
                  long long *v38 = v94;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (void **)(v10 + 16), &a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), a2 - 1);
                break;
              case 5uLL:
                long long v40 = (long long *)(v10 + 16);
                long long v41 = (long long *)(v10 + 32);
                long long v42 = (long long *)(v10 + 48);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), (__n128 *)(v10 + 48));
                long long v44 = (void *)a2[-1].n128_u64[0];
                __n128 v43 = a2 - 1;
                if (*v44 >> 1 < **(void **)(v10 + 48) >> 1)
                {
                  __n128 v45 = (__n128)*v42;
                  long long *v42 = (__int128)*v43;
                  __n128 *v43 = v45;
                  if (**(void **)v42 >> 1 < **(void **)v41 >> 1)
                  {
                    long long v46 = *v41;
                    long long *v41 = *v42;
                    long long *v42 = v46;
                    if (**(void **)v41 >> 1 < **(void **)v40 >> 1)
                    {
                      long long v47 = *v40;
                      long long *v40 = *v41;
                      long long *v41 = v47;
                      if (**(void **)(v10 + 16) >> 1 < **(void **)v10 >> 1)
                      {
                        long long v95 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v40;
                        long long *v40 = v95;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v48 = (__n128 *)(v10 + 16);
            BOOL v50 = (__n128 *)v10 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                unint64_t v52 = v10;
                do
                {
                  int v53 = v48;
                  int64_t v54 = *(void **)(v52 + 16);
                  if (*v54 >> 1 < **(void **)v52 >> 1)
                  {
                    uint64_t v55 = *(void *)(v52 + 24);
                    uint64_t v56 = v51;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v56 + 16) = *(_OWORD *)(v10 + v56);
                      if (!v56) {
                        break;
                      }
                      unint64_t v57 = **(void **)(v10 + v56 - 16);
                      v56 -= 16;
                      if (*v54 >> 1 >= v57 >> 1)
                      {
                        int64_t v58 = (void *)(v10 + v56 + 16);
                        goto LABEL_82;
                      }
                    }
                    int64_t v58 = (void *)v10;
LABEL_82:
                    void *v58 = v54;
                    v58[1] = v55;
                  }
                  uint64_t v48 = v53 + 1;
                  v51 += 16;
                  unint64_t v52 = (unint64_t)v53;
                }
                while (&v53[1] != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                uint64_t v86 = v48;
                uint64_t v87 = (void *)*((void *)a1 + 2);
                if (*v87 >> 1 < **(void **)a1 >> 1)
                {
                  uint64_t v88 = (void *)*((void *)a1 + 3);
                  int v89 = v86;
                  do
                  {
                    *int v89 = v89[-1];
                    int v90 = (void *)v89[-2].n128_u64[0];
                    --v89;
                  }
                  while (*v87 >> 1 < *v90 >> 1);
                  v89->n128_u64[0] = (unint64_t)v87;
                  v89->n128_u64[1] = (unint64_t)v88;
                }
                uint64_t v48 = v86 + 1;
                a1 = (long long *)v86;
              }
              while (&v86[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v59 = (v12 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  int v63 = (unint64_t **)(v10 + 16 * v62);
                  if (2 * v61 + 2 < (uint64_t)v12)
                  {
                    unint64_t v64 = **v63 >> 1;
                    unint64_t v66 = *v63[2];
                    BOOL v65 = v64 >= v66 >> 1;
                    if (v64 < v66 >> 1) {
                      v63 += 2;
                    }
                    else {
                      unint64_t v66 = **v63;
                    }
                    if (!v65) {
                      uint64_t v62 = 2 * v61 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v66 = **v63;
                  }
                  uint64_t v67 = (unint64_t **)(v10 + 16 * v61);
                  int v68 = *v67;
                  if (v66 >> 1 >= **v67 >> 1)
                  {
                    uint64_t v69 = v67[1];
                    do
                    {
                      uint64_t v70 = v67;
                      uint64_t v67 = v63;
                      *(_OWORD *)uint64_t v70 = *(_OWORD *)v63;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v71 = (2 * v62) | 1;
                      int v63 = (unint64_t **)(v10 + 16 * v71);
                      uint64_t v62 = 2 * v62 + 2;
                      if (v62 < (uint64_t)v12)
                      {
                        unint64_t v72 = **v63;
                        if (v72 >> 1 >= *v63[2] >> 1)
                        {
                          uint64_t v62 = v71;
                        }
                        else
                        {
                          unint64_t v72 = *v63[2];
                          v63 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v72 = **v63;
                        uint64_t v62 = v71;
                      }
                    }
                    while (v72 >> 1 >= *v68 >> 1);
                    __int16 *v67 = v68;
                    v67[1] = v69;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v73 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v74 = 0;
                long long v96 = *(_OWORD *)v10;
                uint64_t v75 = (_OWORD *)v10;
                do
                {
                  uint64_t v76 = (uint64_t)&v75[v74 + 1];
                  uint64_t v77 = (2 * v74) | 1;
                  uint64_t v78 = 2 * v74 + 2;
                  if (v78 < v73 && **(void **)v76 >> 1 < **(void **)(v76 + 16) >> 1)
                  {
                    v76 += 16;
                    uint64_t v77 = v78;
                  }
                  *uint64_t v75 = *(_OWORD *)v76;
                  uint64_t v75 = (_OWORD *)v76;
                  uint64_t v74 = v77;
                }
                while (v77 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if ((__n128 *)v76 == --a2)
                {
                  *(_OWORD *)uint64_t v76 = v96;
                }
                else
                {
                  *(__n128 *)uint64_t v76 = *a2;
                  *a2 = (__n128)v96;
                  uint64_t v79 = v76 - v10 + 16;
                  if (v79 >= 17)
                  {
                    unint64_t v80 = (((unint64_t)v79 >> 4) - 2) >> 1;
                    uint64_t v81 = (_OWORD *)(v10 + 16 * v80);
                    uint64_t v82 = *(void **)v76;
                    if (**(void **)v81 >> 1 < **(void **)v76 >> 1)
                    {
                      uint64_t v83 = *(void *)(v76 + 8);
                      do
                      {
                        unint64_t v84 = (_OWORD *)v76;
                        uint64_t v76 = (uint64_t)v81;
                        _OWORD *v84 = *v81;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        uint64_t v81 = (_OWORD *)(v10 + 16 * v80);
                      }
                      while (**(void **)v81 >> 1 < *v82 >> 1);
                      *(void *)uint64_t v76 = v82;
                      *(void *)(v76 + 8) = v83;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, (void **)&a1[v12 >> 1], &a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1 + 1, (void **)v14 - 2, &a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1 + 2, (void **)&a1[v13 + 1], &a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v14 - 1, (void **)v14, (void **)&a1[v13 + 1]);
            long long v91 = *a1;
            *a1 = *v14;
            long long *v14 = v91;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(&a1[v12 >> 1], (void **)a1, &a2[-1]);
          }
          --a3;
          int v15 = *(unint64_t **)a1;
          unint64_t v16 = **(void **)a1;
          if (a4) {
            break;
          }
          unint64_t v17 = v16 >> 1;
          if (v17 > **((void **)a1 - 2) >> 1) {
            goto LABEL_12;
          }
          if (v17 >= *(void *)a2[-1].n128_u64[0] >> 1)
          {
            unint64_t v31 = (void **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v31;
              if (v31 >= (void **)a2) {
                break;
              }
              v31 += 2;
            }
            while (v17 >= **(void **)v10 >> 1);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              __n128 v30 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v17 >= *v30 >> 1);
          }
          uint64_t v32 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v32 = (long long *)a2;
            do
              uint64_t v33 = (void *)*((void *)v32-- - 2);
            while (v17 < *v33 >> 1);
          }
          uint64_t v34 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v32)
          {
            long long v93 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v32;
            *uint64_t v32 = v93;
            unint64_t v35 = *v15 >> 1;
            do
            {
              uint64_t v36 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v35 >= *v36 >> 1);
            do
              uint64_t v37 = (void *)*((void *)v32-- - 2);
            while (v35 < *v37 >> 1);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v34;
        }
        unint64_t v17 = v16 >> 1;
LABEL_12:
        uint64_t v18 = 0;
        char v19 = (void *)*((void *)a1 + 1);
        do
          unint64_t v20 = **(void **)&a1[++v18];
        while (v17 > v20 >> 1);
        uint64_t v21 = &a1[v18];
        long long v22 = a2;
        if (v18 == 1)
        {
          long long v22 = a2;
          do
          {
            if (v21 >= (long long *)v22) {
              break;
            }
            long long v24 = (void *)v22[-1].n128_u64[0];
            --v22;
          }
          while (v17 <= *v24 >> 1);
        }
        else
        {
          do
          {
            long long v23 = (void *)v22[-1].n128_u64[0];
            --v22;
          }
          while (v17 <= *v23 >> 1);
        }
        unint64_t v10 = (unint64_t)&a1[v18];
        if (v21 < (long long *)v22)
        {
          long long v25 = (long long *)v22;
          do
          {
            long long v92 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v25;
            long long *v25 = v92;
            unint64_t v26 = *v15 >> 1;
            do
            {
              BOOL v27 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v26 > *v27 >> 1);
            do
              uint64_t v28 = (void *)*((void *)v25-- - 2);
            while (v26 <= *v28 >> 1);
          }
          while (v10 < (unint64_t)v25);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v19;
        if (v21 >= (long long *)v22) {
          break;
        }
LABEL_31:
        a4 = 0;
      }
      {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v29) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) >> 1 < **(void **)a1 >> 1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a2 - 16));
      return 1;
    case 5:
      unint64_t v17 = (long long *)(a1 + 16);
      uint64_t v18 = (long long *)(a1 + 32);
      char v19 = (long long *)(a1 + 48);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48));
      uint64_t v21 = *(void **)(a2 - 16);
      unint64_t v20 = (long long *)(a2 - 16);
      if (*v21 >> 1 < **(void **)(a1 + 48) >> 1)
      {
        long long v22 = *v19;
        *char v19 = *v20;
        long long *v20 = v22;
        if (**(void **)v19 >> 1 < **(void **)v18 >> 1)
        {
          long long v23 = *v18;
          *uint64_t v18 = *v19;
          *char v19 = v23;
          if (**(void **)v18 >> 1 < **(void **)v17 >> 1)
          {
            long long v24 = *v17;
            *unint64_t v17 = *v18;
            *uint64_t v18 = v24;
            if (**(void **)(a1 + 16) >> 1 < **(void **)a1 >> 1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *unint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      char v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 >> 1 < **v8 >> 1)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >> 1 >= v15 >> 1)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_13:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    char v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(uint64_t a1)
{
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix((char *)a1);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) - v2 <= 15)
  {
    rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Level>(a1 + 8, 1);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 32) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteStartObject((uint64_t *)a1);
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndObject(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 - 16);
  a1[4] = v2 - 16;
  if (v3)
  {
    uint64_t v4 = *a1;
    BOOL v5 = *(unsigned char **)(*a1 + 24);
    if ((uint64_t)(*(void *)(*a1 + 32) - (void)v5) <= 0)
    {
      rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Expand<char>(*a1, 1);
      BOOL v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    unsigned char *v5 = 10;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteIndent((char *)a1);
  }
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndObject(a1);
  return 1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(void *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = (a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *a1))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, a1 + 2, a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      uint64_t v18 = a1 + 2;
      char v19 = a1 + 4;
      unint64_t v20 = a1 + 6;
      __n128 v21 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6, a3);
      uint64_t v23 = *((void *)a2 - 2);
      uint64_t v22 = a2 - 16;
      if (((unsigned int (*)(uint64_t, void, __n128))*a3)(v23, a1[6], v21))
      {
        long long v24 = *(_OWORD *)v20;
        *(_OWORD *)unint64_t v20 = *(_OWORD *)v22;
        *(_OWORD *)uint64_t v22 = v24;
        if ((*a3)(*v20, *v19))
        {
          long long v25 = *(_OWORD *)v19;
          *(_OWORD *)char v19 = *(_OWORD *)v20;
          *(_OWORD *)unint64_t v20 = v25;
          if ((*a3)(*v19, *v18))
          {
            long long v26 = *(_OWORD *)v18;
            *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            *(_OWORD *)char v19 = v26;
            if ((*a3)(a1[2], *a1))
            {
              long long v27 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v18;
              *(_OWORD *)uint64_t v18 = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = (char *)(a1 + 4);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, a1 + 2, a1 + 4, a3);
      int v11 = (char *)(a1 + 6);
      if (a1 + 6 == (void *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *(void *)v10))
    {
      long long v28 = *(_OWORD *)v11;
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = v12;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v15 + 48) = *(_OWORD *)((char *)a1 + v15 + 32);
        if (v15 == -32) {
          break;
        }
        char v16 = (*a3)(v14, *(void *)((char *)a1 + v15 + 16));
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          uint64_t v17 = (_OWORD *)((char *)a1 + v15 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v28;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

BOOL re::serializeDynamicString<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (uint64_t v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    uint64_t v24 = 0;
    if (!result) {
      return result;
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(a4 + 8);
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  uint64_t v24 = v22;
  if (result)
  {
    if (v22)
    {
      if (*(unsigned char *)(a4 + 8)) {
        uint64_t v23 = *(void *)(a4 + 16);
      }
      else {
        uint64_t v23 = a4 + 9;
      }
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_27:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::internal::serializeMembers<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, const re::TypeInfo *a4, uint64_t a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a3 == (uint64_t *)a4)
  {
LABEL_4:
  }
  if (*a3 == *(void *)a4)
  {
    uint64_t v11 = *(void *)a3[2];
    uint64_t v12 = **((void **)a4 + 2);
    if ((unsigned __int16)v11 == (unsigned __int16)v12)
    {
      BOOL v14 = WORD1(v11) == WORD1(v12);
      uint64_t v13 = (v12 ^ v11) & 0xFFFFFF00000000;
      BOOL v14 = v14 && v13 == 0;
      if (v14) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion((re *)a3, a4, (const re::TypeInfo *)a3))
  {
    goto LABEL_4;
  }
  if (*((unsigned __int8 *)a3 + 12) == *((unsigned __int8 *)a4 + 12))
  {
    re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v47);
    re::TypeRegistry::typeInfo(*(void **)a4, *(void *)(*((void *)a4 + 2) + 72), v45);
    if (v45[0])
    {
      if (!v47[0])
      {
        uint64_t v30 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
        re::TypeInfo::name((re::TypeInfo *)a3);
      }
    }
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a3, a3[2]);
    uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v42, *(void *)a4, *((void *)a4 + 2));
    if (v43)
    {
      for (unint64_t i = 0; i < v43; ++i)
      {
        if (*(unsigned char *)(a1 + 64)) {
          break;
        }
        uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v42, i, (uint64_t)v40);
        if (*(unsigned char *)(v41 + 28))
        {
          uint64_t v16 = *(void *)(v41 + 16);
          if (strlen((const char *)v16) >= 3 && *(unsigned char *)v16 == 109) {
            v16 += 2 * (*(unsigned char *)(v16 + 1) == 95);
          }
          uint64_t v17 = *(unsigned int *)(v41 + 32);
          uint64_t v18 = *(re **)(*(void *)a4 + 856);
          if (!v18
            || (uint64_t v18 = (re *)re::internal::TypeTranslationTable::translateMember(v18, (const re::TypeMemberInfo *)v40),
                v18 == -1))
          {
            unint64_t v20 = *re::foundationSerializationLogObjects(v18);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              unint64_t v21 = v20;
              uint64_t v22 = re::TypeInfo::name(a4)[1];
              *(_DWORD *)long long buf = 136315394;
              uint64_t v50 = v22;
              __int16 v51 = 2080;
              uint64_t v52 = v16;
              _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
            }
            uint64_t v23 = *(re::internal **)(a1 + 272);
            re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
            re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v50 + 4);
            uint64_t result = re::internal::translateType(v23, (const re::TypeRegistry *)v38, (uint64_t)buf);
            if (!*(unsigned char *)(a1 + 64)) {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v16, v17, 0, buf, buf, 1);
            }
          }
          else
          {
            re::TypeMemberCollection::operator[](v44, (int)v18, (uint64_t)v38);
            uint64_t v19 = *(unsigned int *)(v39 + 24);
            re::TypeRegistry::typeInfo(v38[0], *(void *)v39, buf);
            re::TypeInfo::TypeInfo((uint64_t)v37, (uint64_t)&v50 + 4);
            re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
            uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v36, (uint64_t)&v50 + 4);
            if (!*(unsigned char *)(a1 + 64)) {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v16, v17, a2 + v19, v37, v36, a5);
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v24 = re::TypeInfo::name((re::TypeInfo *)a3)[1];
    re::TypeInfo::name(a4);
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v19);
  if (v19[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v20);
    if (*(_DWORD *)(v17 + 88) || (re::TypeRegistry::typeInfo(v16[0], *(void *)(v17 + 72), v21), v21[0])) {
  }
    }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v16, *a3, a3[2]);
  if (v18)
  {
    for (unint64_t i = 0; i < v18; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v16, i, (uint64_t)&v14);
      if (*(unsigned char *)(v15 + 28))
      {
        uint64_t v10 = *(void *)(v15 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v15 + 32);
        uint64_t v12 = *(unsigned int *)(v15 + 24);
        re::TypeRegistry::typeInfo(v14, *(void *)v15, v21);
        uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v22);
        if (!a1[64]) {
          uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, a2 + v12, v13, v13, a4);
        }
      }
    }
  }
  return result;
}

BOOL re::serializeBool<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeChar<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI8<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI16<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI32<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI64<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unint64_t *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU8<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU16<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int16 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU32<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU64<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, rapidjson::internal **a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (rapidjson::internal **)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeFloat<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (float *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeDouble<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (double *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

uint64_t re::serializeCString<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_18:
      return 0;
    }
    uint64_t v18 = **((void **)this + 2);
    uint64_t v19 = **((void **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19) {
      goto LABEL_18;
    }
    BOOL v21 = WORD1(v18) == WORD1(v19);
    uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    BOOL v21 = v21 && v20 == 0;
    if (!v21) {
      goto LABEL_18;
    }
  }
LABEL_4:
  if (a7)
  {
    LODWORD(v22) = 0;
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_22;
  }
  uint64_t v16 = *a4;
  int v23 = 2 * (*a4 != 0);
  if (!result) {
    return result;
  }
  if (v16)
  {
    if (*a4)
    {
      size_t v17 = strlen(*a4);
      size_t v22 = v17;
      {
        if (v17) {
        goto LABEL_20;
        }
      }
    }
    else
    {
      size_t v22 = 0;
      {
LABEL_20:
      }
    }
  }
  uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_22:
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeStringID<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  size_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (uint64_t v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    size_t v22 = 0;
    if (!result) {
      return result;
    }
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    size_t v21 = strlen(*(const char **)(a4 + 8));
    size_t v22 = v21;
    if (!result) {
      return result;
    }
    if (v21) {
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
  }
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, uint64_t a4, unint64_t **this, unint64_t **a6, int a7)
{
  if (this != a6)
  {
    if (*this != *a6)
    {
      if (re::areSameTranslatedVersion((re *)this, (const re::TypeInfo *)a6, a3)) {
        goto LABEL_4;
      }
LABEL_26:
      return 0;
    }
    uint64_t v21 = *this[2];
    uint64_t v22 = *a6[2];
    if ((unsigned __int16)v21 != (unsigned __int16)v22) {
      goto LABEL_26;
    }
    BOOL v24 = WORD1(v21) == WORD1(v22);
    uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
    BOOL v24 = v24 && v23 == 0;
    if (!v24) {
      goto LABEL_26;
    }
  }
LABEL_4:
  if (!a7)
  {
    unint64_t v14 = *this[2];
    uint64_t v30 = (uint64_t)*this;
    unint64_t v31 = v14;
    LODWORD(v32) = -1;
    v34[0] = 0x258C98EAAF29A10ALL;
    v34[1] = (uint64_t)"CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[](&v30, v34);
    re::StringID::destroyString((re::StringID *)v34);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = v18;
    unint64_t v31 = 0;
    re::DynamicString::setCapacity(&v30, 0);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v16 + 72))(v17, v16, a4, &v30))
    {
      if (v31) {
        uint64_t v19 = v31 >> 1;
      }
      else {
        uint64_t v19 = v31 >> 1;
      }
      v34[0] = v19;
      {
        if (v19)
        {
          if (v31) {
            uint64_t v20 = v32;
          }
          else {
            uint64_t v20 = (char *)&v31 + 1;
          }
        }
        if (v30)
        {
          if (v31) {
            (*(void (**)(void))(*(void *)v30 + 40))();
          }
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name((re::TypeInfo *)this);
    }
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    return 0;
  }
  uint64_t v30 = 0;
  if (result)
  {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, char *__s, int *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40)) {
    return v3 == 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
  }
  int v7 = *a3;
  if ((*a3 - 1) < 2)
  {
LABEL_7:
    LOBYTE(v10) = 9;
    DWORD1(v10) = 0;
    *((void *)&v10 + 1) = __s;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    BOOL v12 = v7 != 0;
    return v3 == 0;
  }
  if (!v7)
  {
    char v8 = *(char **)(a1 + 168);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v8);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v8);
    int v7 = *a3;
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)__s, "assertion failure: '%s' (%s:line %i) Unexpected PointerEncoding.", "!\"Unreachable code\"", "beginPointer", 1054);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(unsigned char *a1, char *__s, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_14:
      return 0;
    }
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 != (unsigned __int16)v16) {
      goto LABEL_14;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_14;
    }
  }
LABEL_4:
  if (!*a4)
  {
    LODWORD(v25) = 0;
    uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
    uint64_t result = 0;
    if (!v22) {
      return result;
    }
    goto LABEL_22;
  }
  if (!a1[336]
    || (uint64_t v25 = *a4,
        (uint64_t v11 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a1 + 344), (uint64_t *)&v25)) == 0))
  {
    int v24 = 2;
    {
      uint64_t v19 = (const char *)strlen(*a4);
      uint64_t v25 = v19;
      if (!result) {
        return result;
      }
      if (v19) {
      uint64_t v20 = *a4;
      }
      uint64_t v21 = **((void **)this + 2);
      *(void *)&long long v23 = *(void *)this;
      *((void *)&v23 + 1) = v21;
      re::internal::SharedObjectGraph::addObject((uint64_t)(a1 + 336), (uint64_t)v20, &v23);
      return a1[64] == 0;
    }
    return 0;
  }
  int v12 = *v11;
  int v24 = 1;
  LODWORD(v25) = v12;
  uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
  if (!result) {
    return result;
  }
LABEL_22:
  return a1[64] == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v28 = **((void **)this + 2);
    uint64_t v29 = **((void **)a6 + 2);
    if ((unsigned __int16)v28 == (unsigned __int16)v29)
    {
      BOOL v31 = WORD1(v28) == WORD1(v29);
      uint64_t v30 = (v29 ^ v28) & 0xFFFFFF00000000;
      BOOL v31 = v31 && v30 == 0;
      if (v31) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    int v15 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v32 = re::TypeInfo::name(this), v33 = re::TypeInfo::name(a6), !re::StringID::operator==(v32, v33))))
  {
    return 0;
  }
  int v15 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    uint64_t v20 = *(void *)v49[2];
    *(void *)&long long v47 = v49[0];
    *((void *)&v47 + 1) = v20;
    if (v49[0]) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  re::internal::actualType(a4, (void **)this, &v47);
  if (!(void)v47)
  {
LABEL_15:
    uint64_t v21 = re::TypeInfo::name(this);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, (re **)&v47, &v50);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v51);
  if ((a7 & 1) != 0 || (uint64_t v16 = *a4) == 0)
  {
    LODWORD(v50) = 0;
    BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
    uint64_t result = 0;
    if (v27) {
      goto LABEL_17;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 336))
  {
LABEL_33:
    long long v45 = v47;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v16, &v45);
    int v44 = 2;
    if (!result) {
      return result;
    }
    if (!isPointerToPolymorphicType)
    {
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, char *, void, char *, void *, void *, void))(*(void *)a1 + 72))(a1, a2, 0, *a4, v49, v48, 0);
      }
      goto LABEL_45;
    }
    uint64_t v34 = *a4;
    re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v46);
    if (v15)
    {
      uint64_t v35 = (re::TypeRegistry *)v48[0];
      uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)v46);
      re::TypeRegistry::typeInfo(v35, (const re::StringID *)v36, &v50);
      if (!(_BYTE)v50)
      {
        uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v46);
LABEL_45:
        if (*(unsigned char *)(a1 + 336))
        {
          --*(void *)(a1 + 488);
          ++*(_DWORD *)(a1 + 496);
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
      re::TypeInfo::operator=((uint64_t)v52, (uint64_t)v51);
    }
    {
      uint64_t v37 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v52);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, uint64_t, void, char *, unsigned char *, int *, void))(*(void *)a1 + 72))(a1, v37[1], 0, v34, v46, v52, 0);
      }
    }
    goto LABEL_45;
  }
  uint64_t v50 = *a4;
  uint64_t v17 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 344, (uint64_t *)&v50);
  if (!v17)
  {
    uint64_t v16 = *a4;
    goto LABEL_33;
  }
  LODWORD(v50) = *v17;
  v52[0] = 1;
  BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
  if (result)
  {
LABEL_17:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(uint64_t result, unsigned int *a2)
{
  if (!*(unsigned char *)(result + 40))
  {
    int v3 = (_anonymous_namespace_ *)result;
    if (result)
    {
    }
  }
  return result;
}

uint64_t re::internal::translateType@<X0>(re::internal *this@<X0>, const re::TypeRegistry *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(re::internal **)a2 != this)
  {
    int v7 = *(void **)(*(void *)a2 + 856);
    if (v7)
    {
      uint64_t v8 = **((void **)a2 + 2);
      int v12 = *(void **)a2;
      uint64_t v13 = v8;
      re::internal::TypeTranslationTable::translateType(v7, (uint64_t)&v12, v14);
      if (v14[0])
      {
        re::TypeRegistry::typeInfo(this, v14, &v12);
        long long v9 = (const re::TypeRegistry *)&v13;
        uint64_t v10 = a3;
        return re::TypeInfo::TypeInfo(v10, (uint64_t)v9);
      }
    }
    else
    {
      v14[0] = 0;
      v14[1] = (re *)0xFFFFFFFFLL;
    }
    uint64_t v10 = a3;
    long long v9 = a2;
    return re::TypeInfo::TypeInfo(v10, (uint64_t)v9);
  }
  return re::TypeInfo::TypeInfo(a3, (uint64_t)a2);
}

uint64_t re::internal::getEnumConstantIndex(re::internal *this, const re::TypeInfo *a2, void *a3)
{
  uint64_t v5 = re::TypeInfo::enumConstants(this);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  int v7 = (char *)v5;
  uint64_t v8 = v6;
  uint64_t v9 = 0;
  size_t v10 = *(unsigned int *)(*((void *)this + 2) + 8);
  while (memcmp(v7, a2, v10))
  {
    ++v9;
    v7 += 24;
    if (v8 == v9) {
      return 0xFFFFFFFFLL;
    }
  }
  return v9;
}

uint64_t re::internal::getEnumConstantIndex(re::internal *this, const re::TypeInfo *a2, const re::StringID *a3)
{
  uint64_t v5 = re::TypeInfo::enumConstants(this);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 8);
    while (!re::StringID::operator==(v9, a2))
    {
      ++v8;
      v9 += 3;
      if (v7 == v8) {
        goto LABEL_5;
      }
    }
    return v8;
  }
  else
  {
LABEL_5:
    uint64_t v10 = re::TypeInfo::renamedEnumConstants(this);
    if (v11)
    {
      uint64_t v12 = v11;
      for (unint64_t i = (void *)(v10 + 8); !re::StringID::operator==(i, a2); i += 3)
      {
        uint64_t v7 = (v7 + 1);
        if (!--v12) {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

__n128 re::internal::upgradeObject@<Q0>(void *a1@<X0>, uint64_t **a2@<X1>, void *a3@<X2>, uint64_t **a4@<X3>, re::Allocator *a5@<X4>, void *a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v7 = a6;
  uint64_t v8 = a5;
  uint64_t v49 = *MEMORY[0x263EF8340];
  while (1)
  {
    re::TypeInfo::nextVersion((re::TypeInfo *)a2, (const re::TypeInfo *)a4, v44);
    if (!v44[0])
    {
      re::TypeInfo::releaseInstance((re::TypeInfo *)a2, a1, v8, v7);
      uint64_t v30 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
      uint64_t v31 = re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*a2 + 12), *a2[2]);
      if (v31) {
        uint64_t v32 = *(unsigned int *)(v31 + 16);
      }
      else {
        uint64_t v32 = 0xFFFFFFFFLL;
      }
      uint64_t v36 = a7;
      re::DynamicString::format((re::DynamicString *)"Failed to upgrade type \"%s\" version %u to the next version. Type info is missing.", (re::DynamicString *)buf, v30, v32);
      goto LABEL_38;
    }
    uint64_t v12 = *v46;
    *(void *)long long buf = v45[0];
    *(void *)&buf[8] = v12;
    *(_DWORD *)&uint8_t buf[16] = -1;
    v43[0] = 0xAE8345F9D646D604;
    v43[1] = "ComplexVersioningAttribute";
    uint64_t v13 = (uint64_t (**)(void *, void *, void *))re::TypeAttributeCollection::operator[]((uint64_t *)buf, v43);
    re::StringID::destroyString((re::StringID *)v43);
    if (!v13 || !*v13)
    {
      re::TypeInfo::releaseInstance((re::TypeInfo *)a2, a1, v8, v7);
      uint64_t v27 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
      uint64_t v28 = re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*a2 + 12), *a2[2]);
      if (v28) {
        uint64_t v29 = *(unsigned int *)(v28 + 16);
      }
      else {
        uint64_t v29 = 0xFFFFFFFFLL;
      }
      uint64_t v36 = a7;
      re::DynamicString::format((re::DynamicString *)"Failed to upgrade type \"%s\" version %u to the next version. Upgrade function is missing.", (re::DynamicString *)buf, v27, v29);
      goto LABEL_38;
    }
    uint64_t v14 = re::DataArray<re::TextureAtlasTile>::tryGet(v45[0] + 96, *v46);
    if (v14) {
      int v15 = *(_DWORD *)(v14 + 16);
    }
    else {
      int v15 = -1;
    }
    Instance = (_DWORD *)re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*a4 + 12), *a4[2]);
    if (Instance) {
      int v17 = Instance[4];
    }
    else {
      int v17 = -1;
    }
    BOOL v18 = a3;
    if (v15 != v17)
    {
      Instance = re::TypeInfo::createInstance((re::TypeInfo *)v45, v8, v7);
      BOOL v18 = Instance;
    }
    uint64_t v19 = *re::foundationSerializationLogObjects((re *)Instance);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
      uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*a2 + 12), *a2[2]);
      if (v21) {
        int v22 = *(_DWORD *)(v21 + 16);
      }
      else {
        int v22 = -1;
      }
      uint64_t v23 = re::DataArray<re::TextureAtlasTile>::tryGet(v45[0] + 96, *v46);
      if (v23) {
        int v24 = *(_DWORD *)(v23 + 16);
      }
      else {
        int v24 = -1;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_INFO, "Upgrading type \"%s\" from version %u to %u.", buf, 0x18u);
      uint64_t v8 = a5;
      uint64_t v7 = a6;
    }
    char v25 = (*v13)(v7, a1, v18);
    re::TypeInfo::releaseInstance((re::TypeInfo *)a2, a1, v8, v7);
    if ((v25 & 1) == 0) {
      break;
    }
    re::TypeInfo::operator=((uint64_t)a2, (uint64_t)v45);
    a1 = v18;
    if (v15 == v17)
    {
      *a7 = 1;
      return result;
    }
  }
  if (v15 != v17) {
    re::TypeInfo::releaseInstance((re::TypeInfo *)v45, v18, v8, v7);
  }
  uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
  uint64_t v34 = re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*a2 + 12), *a2[2]);
  if (v34) {
    uint64_t v35 = *(unsigned int *)(v34 + 16);
  }
  else {
    uint64_t v35 = 0xFFFFFFFFLL;
  }
  uint64_t v36 = a7;
  re::DynamicString::format((re::DynamicString *)"Failed to upgrade type \"%s\" version %u to the next version. Upgrade function failed.", (re::DynamicString *)buf, v33, v35);
LABEL_38:
  __n128 result = *(__n128 *)buf;
  uint64_t v37 = *(void *)&buf[16];
  uint64_t v38 = v48;
  unsigned char *v36 = 0;
  *((void *)v36 + 1) = 400;
  *((void *)v36 + 2) = re::FoundationErrorCategory(void)::instance;
  *(__n128 *)(v36 + 24) = result;
  *((void *)v36 + 5) = v37;
  *((void *)v36 + 6) = v38;
  return result;
}

uint64_t re::internal::actualType@<X0>(char **this@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  re::TypeRegistry::typeInfo(*a2, *((void *)a2[2] + 9), v10);
  uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v9, (uint64_t)v10 + 8);
  if (*this)
  {
    uint64_t result = (uint64_t)re::TypeInfo::getActualType((re::TypeInfo *)v9, *this, a3);
    if (!*a3)
    {
      uint64_t result = re::TypeInfo::getActualTypeFromPointer((uint64_t)a2, (char *)this, v10);
      *(_OWORD *)a3 = v10[0];
    }
  }
  else
  {
    uint64_t v8 = *(void *)v9[2];
    *a3 = v9[0];
    a3[1] = v8;
  }
  return result;
}

void re::internal::setActualType(void *a1, re **a2, re **a3)
{
  uint64_t v6 = *a2;
  re::TypeRegistry::typeInfo(*a2, *((void *)a2[2] + 9), &v18);
  re::TypeInfo::TypeInfo((uint64_t)v17, (uint64_t)v19);
  re::TypeRegistry::typeInfo(v6, a3, &v18);
  re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)v19);
  if (*(unsigned char *)(v16 + 120))
  {
    uint64_t v7 = *(const re::TypeInfo **)(v16 + 128);
    if (*((unsigned char *)a2 + 12) == 9 && (uint64_t v8 = a2[2], (*((_DWORD *)v8 + 23) & 0xFFFFFF) != 0) && *((_DWORD *)v8 + 24))
    {
      long long v14 = *(_OWORD *)a3;
      re::TypeInfo::setActualTypeForPointer((void **)a2, (uint64_t)a1, (re **)&v14);
    }
    else
    {
      re::TypeInfo::rootClass((re::TypeInfo *)v17, (uint64_t)&v18);
      re::TypeInfo::customClassIDMember(&v18, (uint64_t)v11);
      if (v11[0])
      {
        uint64_t v9 = (unsigned char *)(*a1 + *(unsigned int *)(v13 + 24));
        re::TypeRegistry::typeInfo(v12, *(void *)v13, &v18);
        re::TypeInfo::TypeInfo((uint64_t)v10, (uint64_t)v19);
        re::internal::writeUnsigned(v9, v10, v7);
      }
    }
  }
}

BOOL re::internal::areCompatible(re **a1, uint64_t a2)
{
  re::TypeRegistry::typeInfo(*a1, *((void *)a1[2] + 9), v16);
  re::TypeInfo::TypeInfo((uint64_t)&v13, (uint64_t)v17);
  if (v13 == *(void *)a2)
  {
    uint64_t v4 = *v15;
    uint64_t v5 = *(void *)(a2 + 8);
    if ((unsigned __int16)*v15 == (unsigned __int16)v5)
    {
      BOOL v7 = WORD1(v4) == WORD1(v5);
      uint64_t v6 = (v5 ^ v4) & 0xFFFFFF00000000;
      BOOL v7 = v7 && v6 == 0;
      if (v7) {
        return 1;
      }
    }
  }
  re::TypeRegistry::typeInfo(*a1, (re **)a2, v16);
  re::TypeInfo::TypeInfo((uint64_t)&v11, (uint64_t)v17);
  BOOL result = 0;
  if (v14 == 8 && v12 == 8)
  {
    uint64_t v9 = *v15;
    v10[0] = v13;
    v10[1] = v9;
    return re::TypeInfo::isSubClassOf(&v11, v10);
  }
  return result;
}

void re::PropertyBagHelper::makeWithIntrospectedData(const re::IntrospectionBase *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a1 + 4) == 8)
  {
    uint64_t v26 = a3;
    uint64_t v9 = v8;
    if (v7)
    {
      int v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      uint64_t v25 = 0x7FFFFFFFLL;
      re::PersistedSchema::addIntrospectionGraph((re::PersistedSchema *)&v22, a1);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F0C0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF9F0C0))
      {
        _MergedGlobals_490 = (uint64_t)re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(0, v21);
        __cxa_guard_release(&qword_26AF9F0C0);
      }
      uint64_t v13 = v12;
      if (v11)
      {
        char v14 = NSString;
        re::getPrettyTypeName(a1, (const re::IntrospectionBase *)buf);
        if (buf[8]) {
          int v15 = v30;
        }
        else {
          int v15 = &buf[9];
        }
        uint64_t v16 = [v14 stringWithUTF8String:v15];
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
        v27[0] = @"type";
        v27[1] = @"value";
        v28[0] = v16;
        v28[1] = v9;
        v27[2] = @"schema";
        v28[2] = v13;
        id v17 = [NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];
        *(unsigned char *)a4 = 1;
        *(void *)(a4 + 8) = v17;
      }
      else
      {
        *(unsigned char *)a4 = 0;
      }

      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v22);
    }
    else
    {
      *(unsigned char *)a4 = 0;
    }
  }
  else
  {
    uint64_t v18 = *re::foundationSerializationLogObjects(a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = v18;
      re::getPrettyTypeName(a1, (const re::IntrospectionBase *)&v22);
      uint64_t v20 = (BYTE8(v22) & 1) != 0 ? (long long *)v23 : (long long *)((char *)&v22 + 9);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "PropertyBagWriter; only works on structures '%s'.",
        buf,
        0xCu);

      if ((void)v22)
      {
        if (BYTE8(v22)) {
          (*(void (**)(void))(*(void *)v22 + 40))();
        }
      }
    }
    *(unsigned char *)a4 = 0;
  }
}

unint64_t anonymous namespace'::PropertyBagWriter::writeValue(_anonymous_namespace_::PropertyBagWriter *this, const re::IntrospectionBase *a2, unsigned int *a3, double a4)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v73);
      }
      if (re::introspect<BOOL>(void)::info == (_UNKNOWN *)a2)
      {
        if (*(unsigned char *)a3)
        {
          LOBYTE(v28) = 1;
          [NSNumber numberWithBool:1];
          objc_claimAutoreleasedReturnValue();
          goto LABEL_113;
        }
        [NSNumber numberWithBool:0];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v74);
      }
      if ((const re::IntrospectionBase *)re::introspect<char>(void)::info == a2)
      {
        [NSNumber numberWithChar:*(char *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v76);
      }
      if ((const re::IntrospectionBase *)re::introspect<double>(void)::info == a2)
      {
        [NSNumber numberWithDouble:*(double *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v77);
      }
      if (re::introspect<float>(void)::info == (_UNKNOWN *)a2)
      {
        LODWORD(a4) = *a3;
        [NSNumber numberWithFloat:a4];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v78);
      }
      if ((const re::IntrospectionBase *)re::introspect<short>(void)::info == a2)
      {
        [NSNumber numberWithShort:*(__int16 *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v79);
      }
      if (re::introspect<int>(void)::info == (_UNKNOWN *)a2)
      {
        [NSNumber numberWithInt:*a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<long>(void)::info = (uint64_t)re::introspect_long(0, v80);
      }
      if ((const re::IntrospectionBase *)re::introspect<long>(void)::info == a2)
      {
        [NSNumber numberWithLong:*(void *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      {
        re::introspect<unsigned long>(void)::info = (uint64_t)re::introspect_size_t(0, v81);
      }
      if ((const re::IntrospectionBase *)re::introspect<unsigned long>(void)::info == a2) {
        goto LABEL_144;
      }
      {
        re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v82);
      }
      if ((const re::IntrospectionBase *)re::introspect<long long>(void)::info == a2)
      {
        [NSNumber numberWithLongLong:*(void *)a3];
        objc_claimAutoreleasedReturnValue();
LABEL_98:
        unint64_t v43 = 0;
        LOBYTE(v28) = 1;
        return v28 | v43;
      }
      if (re::introspect<unsigned char>() == (char *)a2)
      {
        [NSNumber numberWithUnsignedChar:*(unsigned __int8 *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      if ((const re::IntrospectionBase *)re::introspect<unsigned short>() == a2)
      {
        [NSNumber numberWithUnsignedShort:*(unsigned __int16 *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      if (re::introspect<unsigned int>() == (char **)a2)
      {
        [NSNumber numberWithUnsignedInt:*a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      char v7 = (const re::IntrospectionBase *)re::introspect<unsigned long long>();
      if (v7 == a2)
      {
LABEL_144:
        [NSNumber numberWithUnsignedLongLong:*(void *)a3];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
      uint64_t v8 = *re::foundationSerializationLogObjects(v7);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_66;
      }
      uint64_t v9 = v8;
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
      if (buf[8]) {
        double v10 = *(unsigned char **)&buf[16];
      }
      else {
        double v10 = &buf[9];
      }
      LODWORD(v83) = 136315138;
      *(void *)((char *)&v83 + 4) = v10;
LABEL_132:
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "PropertyBagWriter; unhandled type '%s'.",
        (uint8_t *)&v83,
        0xCu);

      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
      }
LABEL_66:
      unint64_t v43 = 0;
      LOBYTE(v28) = 0;
      return v28 | v43;
    case 1:
      id v17 = *(char **)a3;
      re::PolymorphicData::makeWithPointer(*((void *)a2 + 6), *(const re::IntrospectionBase **)a3, buf);
      if (!v17) {
        goto LABEL_85;
      }
      uint64_t v18 = *((void *)a2 + 6);
      {
        re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v75);
      }
      if (v18 == re::introspect<char>(void)::info)
      {
        [NSString stringWithUTF8String:v17];
        objc_claimAutoreleasedReturnValue();
        goto LABEL_116;
      }
      if (*(void *)&buf[16])
      {
        goto LABEL_121;
      }
      long long v47 = (const re::IntrospectionBase *)*((void *)a2 + 6);
      long long v46 = this;
      long long v45 = v17;
      goto LABEL_120;
    case 2:
      id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
      if (*((int *)a2 + 16) < 1) {
        goto LABEL_49;
      }
      int v20 = 0;
      while (1)
      {
        long long v23 = v22;
        if (!v21) {
          break;
        }
        [v11 addObject:v22];

        if (++v20 >= *((_DWORD *)a2 + 16)) {
          goto LABEL_49;
        }
      }

      goto LABEL_111;
    case 3:
      id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
      if (!(*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 88))(a2, a3)) {
        goto LABEL_49;
      }
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *, uint64_t))(*(void *)a2 + 104))(a2, a3, v24);
        uint64_t v16 = v27;
        if (!v26) {
          goto LABEL_95;
        }
        [v11 addObject:v27];

        if ((*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 88))(a2, a3) <= (unint64_t)++v24) {
          goto LABEL_49;
        }
      }
    case 4:
      id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
      if (!(*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 80))(a2, a3)) {
        goto LABEL_49;
      }
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *, uint64_t))(*(void *)a2 + 104))(a2, a3, v12);
        uint64_t v16 = v15;
        if (!v14) {
          break;
        }
        [v11 addObject:v15];

        if ((*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 80))(a2, a3) <= (unint64_t)++v12)
        {
LABEL_49:
          v11;
          LOBYTE(v28) = 1;
          goto LABEL_112;
        }
      }
LABEL_95:

LABEL_111:
      LOBYTE(v28) = 0;
LABEL_112:

      goto LABEL_113;
    case 5:
      id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
      *(void *)long long buf = (*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 88))(a2, a3);
      *(void *)&buf[8] = v29;
      while (2)
      {
        uint64_t v30 = (*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 96))(a2, a3);
        if (*(void *)buf == v30
          && *(unsigned __int16 *)&buf[8] == (unsigned __int16)v31
          && *(unsigned __int16 *)&buf[10] == HIWORD(v31))
        {
          goto LABEL_49;
        }
        uint64_t v32 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, unsigned char *))(*(void *)a2 + 104))(a2, buf);
        uint64_t v35 = v34;
        if (v33)
        {
          [v11 addObject:v34];

          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(buf);
          continue;
        }
        break;
      }

      LOBYTE(v28) = 0;
      goto LABEL_112;
    case 6:
      if (a3[2]) {
        uint64_t v36 = (char *)*((void *)a3 + 2);
      }
      else {
        uint64_t v36 = (char *)a3 + 9;
      }
      [NSString stringWithUTF8String:v36];
      objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 7:
      *(void *)&long long v83 = objc_alloc_init(MEMORY[0x263EFF9A0]);
      uint64_t v37 = operator new(0x20uLL);
      void *v37 = &unk_26E720BC0;
      v37[1] = &v83;
      v37[2] = a2;
      v37[3] = this;
      uint64_t v88 = v37;
      int v38 = (*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *, unsigned char *))(*(void *)a2 + 104))(a2, a3, buf);
      std::__function::__value_func<BOOL ()(void const*,void *)>::~__value_func[abi:nn180100](buf);
      uint64_t v39 = (void *)v83;
      if (v38)
      {
        (id)v83;
        LOBYTE(v28) = 1;
      }
      else
      {
        LOBYTE(v28) = 0;
      }

      goto LABEL_113;
    case 8:
      unint64_t v48 = *((unsigned int *)a2 + 14);
      if (!v48) {
        goto LABEL_86;
      }
      uint64_t v49 = 0;
      BOOL v50 = 1;
      do
      {
        uint64_t v51 = *(void *)(*((void *)a2 + 8) + 8 * v49);
        if (*(_DWORD *)v51 == 4 && (*(unsigned char *)(v51 + 4) & 1) != 0) {
          break;
        }
        BOOL v50 = ++v49 < v48;
      }
      while (v48 != v49);
      if (v50)
      {
        Structureint Member = (const re::IntrospectionBase **)re::introspectionFirstStructureMember(a2, a2);
        if (StructureMember)
        {
          goto LABEL_121;
        }
        unint64_t v66 = *re::foundationSerializationLogObjects(0);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          uint64_t v71 = v66;
          re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
          uint64_t v72 = (buf[8] & 1) != 0 ? *(unsigned char **)&buf[16] : &buf[9];
          LODWORD(v83) = 136315138;
          *(void *)((char *)&v83 + 4) = v72;
          _os_log_error_impl(&dword_233120000, v71, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected member in for struct '%s'.",
            (uint8_t *)&v83,
            0xCu);

          if (*(void *)buf)
          {
            if (buf[8]) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
          }
        }
        uint64_t v28 = 0;
      }
      else
      {
LABEL_86:
        int64_t v60 = (NSMutableArray *)objc_alloc_init(MEMORY[0x263EFF980]);
        {
          int64_t v61 = NSString;
          re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
          if (buf[8]) {
            uint64_t v62 = *(unsigned char **)&buf[16];
          }
          else {
            uint64_t v62 = &buf[9];
          }
          int v63 = [v61 stringWithUTF8String:v62];
          if (*(void *)buf && (buf[8] & 1) != 0) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
          *(void *)&long long v83 = @"type";
          *((void *)&v83 + 1) = @"value";
          *(void *)long long buf = v63;
          *(void *)&buf[8] = v60;
          [NSDictionary dictionaryWithObjects:buf forKeys:&v83 count:2];
          objc_claimAutoreleasedReturnValue();

          uint64_t v28 = 1;
        }
        else
        {
          uint64_t v28 = 0;
        }
      }
      goto LABEL_122;
    case 9:
      *(void *)&long long v83 = 0;
      uint64_t v53 = (re *)memcpy(&v83, a3, *((int *)a2 + 5));
      uint64_t v54 = (unsigned int *)*((void *)a2 + 8);
      uint64_t v55 = v83;
      uint64_t v56 = *v54;
      if (!v56) {
        goto LABEL_82;
      }
      char v57 = (void *)*((void *)v54 + 1);
      do
      {
        int64_t v58 = (_DWORD *)*v57;
        if (*(_DWORD *)*v57 == 1 && *((void *)v58 + 1) == (void)v83)
        {
          [NSString stringWithUTF8String:*((void *)v58 + 2)];
          objc_claimAutoreleasedReturnValue();
          LOBYTE(v28) = 1;
          goto LABEL_113;
        }
        ++v57;
        --v56;
      }
      while (v56);
LABEL_82:
      int64_t v59 = *re::foundationSerializationLogObjects(v53);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        uint64_t v68 = *((void *)a2 + 6);
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v55;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v68;
        _os_log_error_impl(&dword_233120000, v59, OS_LOG_TYPE_ERROR, "PropertyBagWriter; unknown enum value %llu in %s.",
          buf,
          0x16u);
      }
      LOBYTE(v28) = 0;
LABEL_113:
      unint64_t v43 = 0;
      return v28 | v43;
    case 0xA:
      re::StringID::StringID((re::StringID *)buf, (const StringID *)a3);
      [NSString stringWithUTF8String:*(void *)&buf[8]];
      objc_claimAutoreleasedReturnValue();
      re::StringID::destroyString((re::StringID *)buf);
      goto LABEL_98;
    case 0xB:
      *(void *)&buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      uint64_t v88 = 0;
      re::DynamicString::setCapacity(buf, 0);
      uint64_t v40 = (re *)(*((uint64_t (**)(void, const re::IntrospectionBase *, unsigned int *, unsigned char *))a2 + 9))(*(void *)this, a2, a3, buf);
      if (v40)
      {
        if (buf[8]) {
          uint64_t v41 = *(unsigned char **)&buf[16];
        }
        else {
          uint64_t v41 = &buf[9];
        }
        [NSString stringWithUTF8String:v41];
        objc_claimAutoreleasedReturnValue();
        LOBYTE(v28) = 1;
      }
      else
      {
        unint64_t v64 = *re::foundationSerializationLogObjects(v40);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          uint64_t v69 = v64;
          re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v83);
          uint64_t v70 = (BYTE8(v83) & 1) != 0 ? v84 : (long long *)((char *)&v83 + 9);
          *(_DWORD *)uint64_t v85 = 136315138;
          uint64_t v86 = v70;
          _os_log_error_impl(&dword_233120000, v69, OS_LOG_TYPE_ERROR, "PropertyBagWriter; serialization callback of type '%s' failed.",
            v85,
            0xCu);

          if ((void)v83)
          {
            if (BYTE8(v83)) {
              (*(void (**)(void))(*(void *)v83 + 40))();
            }
          }
        }
        LOBYTE(v28) = 0;
      }
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
      goto LABEL_113;
    case 0xD:
      if ((*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 56))(a2, a3))
      {
        int v44 = (const re::IntrospectionBase *)*((void *)a2 + 6);
        long long v45 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, unsigned int *))(*(void *)a2 + 80))(a2, a3);
        long long v46 = this;
        long long v47 = v44;
LABEL_120:
LABEL_121:
        uint64_t v28 = v19;
      }
      else
      {
LABEL_85:
        [MEMORY[0x263EFF9D0] null];
        objc_claimAutoreleasedReturnValue();
LABEL_116:
        uint64_t v28 = 1;
      }
LABEL_122:
      unint64_t v43 = v28 & 0xFFFFFFFFFFFFFF00;
      return v28 | v43;
    default:
      uint64_t v42 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        goto LABEL_66;
      }
      uint64_t v9 = v42;
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
      if (buf[8]) {
        uint64_t v67 = *(unsigned char **)&buf[16];
      }
      else {
        uint64_t v67 = &buf[9];
      }
      LODWORD(v83) = 136315138;
      *(void *)((char *)&v83 + 4) = v67;
      goto LABEL_132;
  }
}

uint64_t anonymous namespace'::PropertyBagWriter::writePolymorphicPointer(_anonymous_namespace_::PropertyBagWriter *this, re::PolymorphicData *a2, char *a3)
{
  uint64_t v6 = *(const void **)a2;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t __dst = 0;
  uint64_t v8 = (re *)memcpy(&__dst, v6, *(int *)(v7 + 20));
  uint64_t v9 = (unsigned int *)*((void *)a2 + 2);
  uint64_t v10 = *v9;
  if (v10)
  {
    uint64_t v11 = *((void *)v9 + 1) + 24;
    while (*(void *)v11 != __dst)
    {
      v11 += 40;
      if (!--v10) {
        goto LABEL_5;
      }
    }
    uint64_t v16 = v15;
    if ((_BYTE)v14)
    {
      if (*(_DWORD *)(*(void *)(v11 - 16) + 16) == 8)
      {
        v15;
        uint64_t v13 = 1;
LABEL_14:

        return v13;
      }
      id v17 = *re::foundationSerializationLogObjects(v14);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v19 = 0;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "PropertyBagWriter; polymorphic type must be structure.",
          v19,
          2u);
      }
    }
    uint64_t v13 = 0;
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v12 = *re::foundationSerializationLogObjects(v8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "PropertyBagWriter; failed to find polymorphic type.",
      buf,
      2u);
  }
  return 0;
}

void std::__function::__func<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26E720BC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E720BC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<anonymous namespace'::PropertyBagWriter::writeHashTable(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, unsigned int **a2, unsigned int **a3, double a4)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *(_anonymous_namespace_::PropertyBagWriter **)(a1 + 24);
  uint64_t v10 = v9;
  if (v7)
  {
    uint64_t v13 = v12;
    BOOL v14 = v11 != 0;
    if (v11) {
      [**(id **)(a1 + 8) setObject:v12 forKey:v10];
    }
  }
  else
  {
    BOOL v14 = 0;
  }

  return v14;
}

unint64_t anonymous namespace'::PropertyBagWriter::writeMember(_anonymous_namespace_::PropertyBagWriter *this, const re::IntrospectionBase **a2, char *a3)
{
  v42[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = *((int *)a2 + 9);
  uint64_t v6 = (char **)&a3[v5];
  switch(*((_DWORD *)a2 + 10))
  {
    case 0:
      LOBYTE(v4) = v7;
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00;
      return v8 & 0xFFFFFFFFFFFFFF00 | v4;
    case 1:
      uint64_t v13 = a2[6];
      if (!v13)
      {
        uint64_t v16 = *re::foundationSerializationLogObjects(this);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_26;
        }
        unsigned int v31 = a2[1];
        LODWORD(v40) = 136315138;
        *(void *)((char *)&v40 + 4) = v31;
        uint64_t v18 = "PropertyBagWriter; failed to get array length for member '%s'.";
        goto LABEL_32;
      }
      BOOL v14 = &a3[*((int *)a2 + 16)];
      unint64_t __dst = 0;
      int v15 = (re *)memcpy(&__dst, v14, *((int *)v13 + 5));
      if (__dst >> 31)
      {
        uint64_t v16 = *re::foundationSerializationLogObjects(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_26;
        }
        id v17 = a2[1];
        LODWORD(v40) = 136315138;
        *(void *)((char *)&v40 + 4) = v17;
        uint64_t v18 = "PropertyBagWriter; array too big for member '%s'.";
LABEL_32:
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v40, 0xCu);
        goto LABEL_26;
      }
      re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v40, *((const re::IntrospectionBase **)a2[2] + 6), __dst);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)buf, 0);
      uint64_t v34 = 0x800000001;
      int v35 = 8;
      __int16 v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0xFFFFFFFFLL;
      *(void *)long long buf = &unk_26E6CDA08;
      v39[0] = &v40;
      v39[1] = 0;
      LOBYTE(v4) = v29;
      unint64_t v8 = v29 & 0xFFFFFFFFFFFFFF00;
      *(void *)long long buf = &unk_26E6CDA08;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v39);
      *(void *)long long buf = &unk_26E6DECE0;
      objc_destructInstance(&buf[8]);
      *(void *)&long long v40 = &unk_26E6C2018;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)v42);
      *(void *)&long long v40 = &unk_26E6DECE0;
      objc_destructInstance((char *)&v40 + 8);
      return v8 & 0xFFFFFFFFFFFFFF00 | v4;
    case 2:
      uint64_t v19 = *v6;
      if (*v6)
      {
        uint64_t v20 = *((void *)a2[2] + 6);
        char v21 = *(void **)(v20 + 64);
        long long v22 = (_DWORD *)*v21;
        if (*(_DWORD *)*v21 != 2)
        {
          long long v23 = (_DWORD **)(v21 + 1);
          uint64_t v24 = *(unsigned int *)(v20 + 56) - 1;
          do
          {
            uint64_t v25 = *v23++;
            long long v22 = v25;
            --v24;
          }
          while (*v25 != 2);
        }
        char v26 = a2[6];
        *(void *)&long long v40 = &a3[*((int *)a2 + 16)];
        *((void *)&v40 + 1) = v26;
        uint64_t v41 = (char *)*((void *)v22 + 1);
      }
      else
      {
        [MEMORY[0x263EFF9D0] null];
        objc_claimAutoreleasedReturnValue();
        uint64_t v4 = 1;
      }
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFF00;
      return v8 & 0xFFFFFFFFFFFFFF00 | v4;
    case 3:
      uint64_t v27 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint64_t v10 = v27;
      re::makePrettyMemberName(a2[1], (re::DynamicString *)&v40);
      if (BYTE8(v40)) {
        uint64_t v28 = v41;
      }
      else {
        uint64_t v28 = (char *)&v40 + 9;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      uint64_t v12 = "PropertyBagWriter; unexpected parent for '%s'.";
      goto LABEL_22;
    default:
      uint64_t v9 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint64_t v10 = v9;
      re::makePrettyMemberName(a2[1], (re::DynamicString *)&v40);
      if (BYTE8(v40)) {
        char v11 = v41;
      }
      else {
        char v11 = (char *)&v40 + 9;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v11;
      uint64_t v12 = "PropertyBagWriter; unknown member type for '%s'.";
LABEL_22:
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);

      if (void)v40 && (BYTE8(v40)) {
        (*(void (**)(void))(*(void *)v40 + 40))();
      }
LABEL_26:
      unint64_t v8 = 0;
      LOBYTE(v4) = 0;
      return v8 & 0xFFFFFFFFFFFFFF00 | v4;
  }
}

uint64_t anonymous namespace'::PropertyBagWriter::writeMemberArray(_anonymous_namespace_::PropertyBagWriter *this, const re::IntrospectionStructure *a2, char *a3, NSMutableArray *a4)
{
  v30[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = a4;
  if (!*((_DWORD *)a2 + 14))
  {
LABEL_22:
    uint64_t v22 = 1;
    goto LABEL_25;
  }
  uint64_t v8 = 0;
  uint64_t v24 = v27;
  unint64_t v9 = 0x263F08000uLL;
  while (1)
  {
    uint64_t v10 = *(void *)(*((void *)a2 + 8) + 8 * v8);
    if (*(_DWORD *)v10 != 1) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v10 + 40) != 3) {
      break;
    }
LABEL_21:
    if (++v8 >= (unint64_t)*((unsigned int *)a2 + 14)) {
      goto LABEL_22;
    }
  }
  uint64_t v13 = v12;
  if (v11)
  {
    BOOL v14 = *(void **)(v9 + 2880);
    re::makePrettyMemberName(*(re **)(v10 + 8), (re::DynamicString *)&v25);
    if (v26) {
      int v15 = v28;
    }
    else {
      int v15 = v24;
    }
    uint64_t v16 = objc_msgSend(v14, "stringWithUTF8String:", v15, v24);
    if (v25 && (v26 & 1) != 0) {
      (*(void (**)(void))(*(void *)v25 + 40))();
    }
    unint64_t v17 = v9;
    uint64_t v18 = *(void **)(v9 + 2880);
    re::getPrettyTypeName(*(re **)(v10 + 16), (const re::IntrospectionBase *)&v25);
    if (v26) {
      uint64_t v19 = v28;
    }
    else {
      uint64_t v19 = v24;
    }
    uint64_t v20 = [v18 stringWithUTF8String:v19];
    if (v25 && (v26 & 1) != 0) {
      (*(void (**)(void))(*(void *)v25 + 40))();
    }
    v29[0] = @"name";
    v29[1] = @"type";
    v30[0] = v16;
    v30[1] = v20;
    _OWORD v29[2] = @"value";
    v30[2] = v13;
    char v21 = [NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:3];
    [(NSMutableArray *)v7 addObject:v21];

    unint64_t v9 = v17;
    goto LABEL_21;
  }

LABEL_24:
  uint64_t v22 = 0;
LABEL_25:

  return v22;
}

void serializeJSON(_anonymous_namespace_ *this@<X2>, uint64_t a2@<X0>, const re::TypeInfo *a3@<X1>, re::Allocator *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(void *)(a6 + 16) = 0;
  ++*(_DWORD *)(a6 + 24);
  re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)v82, "ScratchAllocator", a4);
  unint64_t v80 = &unk_26E7147A0;
  uint64_t v81 = v82;
  __int16 v72 = 0;
  uint64_t v73 = a6;
  uint64_t v71 = &unk_26E714878;
  v74[0] = &unk_26E7148D0;
  v74[1] = 0;
  v74[2] = &unk_26E6BE858;
  v74[3] = v74;
  __int16 v75 = 0;
  uint64_t v77 = 0;
  uint64_t v76 = 0;
  uint64_t v78 = 0x2000;
  uint64_t v79 = 0;
  *(void *)&v83[0].var0 = 0x92C38D6C53AC6124;
  v83[0].var1 = "JSON-SerializerV1";
  uint64_t v29 = (void (**)(void **))&unk_26E720C70;
  re::StringID::StringID((re::StringID *)&v30, v83);
  uint64_t v41 = 0;
  memset(v39, 0, sizeof(v39));
  int v40 = 0;
  unsigned int v31 = 0;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  v36[0] = 0;
  int v42 = 13;
  uint64_t v44 = 1024;
  char v43 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F0D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F0D0))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v20, (uint64_t)&v25);
    if ((_BYTE)v25) {
      uint64_t v21 = SDWORD1(v25);
    }
    else {
      uint64_t v21 = 0;
    }
    _MergedGlobals_491 = v21;
    __cxa_guard_release(&qword_26AF9F0D0);
  }
  if (_MergedGlobals_491) {
    uint64_t v44 = _MergedGlobals_491;
  }
  v47[4] = 0;
  __int16 v48 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  memset(v47, 0, 28);
  long long v52 = 0u;
  long long v53 = 0u;
  int v54 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v55 = 0x7FFFFFFFLL;
  uint64_t v29 = (void (**)(void **))&unk_26E720C08;
  __int16 v56 = 1;
  uint64_t v59 = 0x7FFFFFFFLL;
  long long v65 = 0u;
  long long v64 = 0u;
  memset(v57, 0, sizeof(v57));
  int v58 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  int v63 = 0;
  uint64_t v62 = 0;
  uint64_t v70 = 0;
  int v66 = 0;
  int v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  re::StringID::destroyString((re::StringID *)v83);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v29, *(void *)a3);
  LOBYTE(v56) = a7;
  uint64_t v49 = a5;
  uint64_t v14 = v50;
  if (*(_DWORD *)(v50 + 24) != v51)
  {
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(&v29);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v29, v14);
  }
  unsigned int v31 = &v71;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v34 = a4;
  int v35 = v82;
  *(unsigned char *)&v83[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v36, (unsigned __int8 *)v83);
  if (*(unsigned char *)&v83[0].var0 && v83[1].var1 && (*(unsigned char *)&v83[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v83[1].var1 + 40))();
  }
  v39[0] = v34;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v39, 0x40uLL);
  ++v40;
  *(unsigned char *)&v83[0].var0 = 0;
  memset(&v83[0].var0 + 1, 0, 44);
  re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add((uint64_t)v39, (uint64_t)v83);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v47[0] = v35;
  re::DynamicArray<char>::setCapacity(v47, 0);
  ++LODWORD(v47[3]);
  uint64_t v16 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(void *)(v16 + 48) = 512;
  *(_DWORD *)(v16 + 56) = 324;
  *(_WORD *)(v16 + 60) = 2304;
  *((void *)&v45 + 1) = v16;
  *(void *)(v16 + 64) = 0x100000001;
  uint64_t v17 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 48, 8);
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 40) = 256;
  *(void *)&long long v45 = v17;
  uint64_t v18 = *((void *)&v45 + 1);
  **((void **)&v45 + 1) = v17;
  *(unsigned char *)(v18 + 60) = 0;
  *(void *)(v18 + 32) = *(void *)(v18 + 24);
  v29[6]((void **)&v29);
  if (isObject)
  {
    if (!v36[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, const re::TypeInfo *, _anonymous_namespace_ *, void))v29[9])(&v29, "object", 0, a2, a3, this, 0);
    }
  }
  else
  {
    if (!re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)&v31, "root", 0))
    {
      *(unsigned char *)&v83[0].var0 = v36[0];
      if (v36[0])
      {
        *(_OWORD *)&v83[0].var1 = v37;
        re::DynamicString::DynamicString((re::DynamicString *)&v83[1].var1, (const re::DynamicString *)v38);
      }
      long long v25 = *(_OWORD *)&v83[0].var1;
      goto LABEL_25;
    }
    if (!v36[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, const re::TypeInfo *, _anonymous_namespace_ *, void))v29[9])(&v29, "object", 0, a2, a3, this, 0);
    }
  }
  v29[7]((void **)&v29);
  if (!v36[0])
  {
    *(unsigned char *)a8 = 1;
    goto LABEL_29;
  }
  *(unsigned char *)&v83[0].var0 = 1;
  *(_OWORD *)&v83[0].var1 = v37;
  re::DynamicString::DynamicString((re::DynamicString *)&v83[1].var1, (const re::DynamicString *)v38);
  long long v25 = *(_OWORD *)&v83[0].var1;
LABEL_25:
  re::DynamicString::DynamicString((re::DynamicString *)&v26, (const re::DynamicString *)&v83[1].var1);
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v25;
  *(void *)(a8 + 24) = v26;
  *(void *)(a8 + 48) = v28;
  *(_OWORD *)(a8 + 32) = v27;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  long long v27 = 0uLL;
  if (*(unsigned char *)&v83[0].var0 && v83[1].var1 && (*(unsigned char *)&v83[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v83[1].var1 + 40))();
  }
LABEL_29:
  uint64_t v29 = (void (**)(void **))&unk_26E720C08;
  if (*((void *)&v67 + 1))
  {
    if (v70) {
      (*(void (**)(void))(**((void **)&v67 + 1) + 40))();
    }
    uint64_t v70 = 0;
    long long v68 = 0uLL;
    *((void *)&v67 + 1) = 0;
    ++v69;
  }
  if (*((void *)&v64 + 1))
  {
    if ((void)v67) {
      (*(void (**)(void))(**((void **)&v64 + 1) + 40))();
    }
    *(void *)&long long v67 = 0;
    long long v65 = 0uLL;
    *((void *)&v64 + 1) = 0;
    ++v66;
  }
  if (v60)
  {
    if ((void)v64) {
      (*(void (**)(void))(*(void *)v60 + 40))();
    }
    *(void *)&long long v64 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    ++v63;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v57);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v29);
  re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&v71);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)v82, v19);
}

uint64_t anonymous namespace'::isObject(_anonymous_namespace_ *this, const re::TypeInfo *a2)
{
  if (*((unsigned char *)this + 12) != 8) {
    return 0;
  }
  int v3 = re::TypeInfo::name(this);
  if ((unint64_t)*v3 >> 1 == 94623636)
  {
    uint64_t v4 = (char *)v3[1];
    if (v4 == "char*") {
      return 0;
    }
    uint64_t result = strcmp(v4, "char*");
    if (!result) {
      return result;
    }
  }
  uint64_t v6 = re::TypeInfo::name(this);
  if ((unint64_t)*v6 >> 1 != 0x134375A94D9F7110)
  {
LABEL_8:
    uint64_t v8 = re::TypeInfo::name(this);
    if ((unint64_t)*v8 >> 1 != 0x22C6ED80D0CLL) {
      return 1;
    }
    unint64_t v9 = (const char *)v8[1];
    if (v9 != "StringID") {
      return strcmp(v9, "StringID") != 0;
    }
    return 0;
  }
  uint64_t v7 = (const char *)v6[1];
  if (v7 != "DynamicString")
  {
    uint64_t result = strcmp(v7, "DynamicString");
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  return 0;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  uint64_t v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      uint64_t v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc((uint64_t)a1, (uint64_t)&v13, v11);
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

BOOL re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, char *__s, int a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(void *)(a1 + 168));
    LOBYTE(v8[0]) = 2;
    DWORD1(v8[0]) = a3 | 0x20;
    *((void *)&v8[0] + 1) = __s;
    memset(&v8[1], 0, 32);
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, v8);
  }
  return v3 == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720C08;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  return re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
}

void deserializeJSON(re::TypeInfo *this@<X2>, re::Allocator *a2@<X4>, const char *a3@<X0>, const re::TypeInfo *a4@<X1>, _anonymous_namespace_ *a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  Instance = re::TypeInfo::createInstance(this, a2, 0);
  deserializeJSONIntoExistingObject(a5, a3, a4, (uint64_t *)this, a2, a6, (uint64_t)Instance, (uint64_t)v19);
  if (v19[0])
  {
    *(unsigned char *)a7 = 1;
    *(void *)(a7 + 8) = Instance;
  }
  else
  {
    re::TypeInfo::releaseInstance(this, Instance, a2, 0);
    long long v15 = v20;
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)&v21);
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v15;
    *(void *)(a7 + 24) = v16;
    *(void *)(a7 + 48) = v18;
    *(_OWORD *)(a7 + 32) = v17;
    if (v21)
    {
      if (v22) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
    }
  }
}

void deserializeJSONIntoExistingObject(_anonymous_namespace_ *this@<X3>, const char *a2@<X0>, const re::TypeInfo *a3@<X1>, uint64_t *a4@<X2>, re::Allocator *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v12 = (int)a3;
  re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)v74, "ScratchAllocator", a5);
  re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)v73, a2, v12, -1);
  *(void *)&v75[0].var0 = 0x3ADDC8B1C9D5BCA6;
  v75[0].var1 = "JSON-DeserializerV1";
  unsigned int v31 = (void (**)(void **))&unk_26E720D40;
  re::StringID::StringID((re::StringID *)&v32, v75);
  uint64_t v43 = 0;
  memset(v41, 0, sizeof(v41));
  int v42 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  __int16 v36 = 0;
  long long v37 = 0;
  v38[0] = 0;
  int v44 = 13;
  uint64_t v46 = 1024;
  char v45 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F0E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F0E0))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v24, (uint64_t)&v27);
    if ((_BYTE)v27) {
      uint64_t v25 = SDWORD1(v27);
    }
    else {
      uint64_t v25 = 0;
    }
    qword_26AF9F0D8 = v25;
    __cxa_guard_release(&qword_26AF9F0E0);
  }
  if (qword_26AF9F0D8) {
    uint64_t v46 = qword_26AF9F0D8;
  }
  void v49[4] = 0;
  __int16 v50 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 28);
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v53 = 0;
  uint64_t v57 = 0x7FFFFFFFLL;
  unsigned int v31 = (void (**)(void **))&unk_26E720CD8;
  __int16 v58 = 1;
  uint64_t v61 = 0x7FFFFFFFLL;
  long long v67 = 0u;
  long long v66 = 0u;
  memset(v59, 0, sizeof(v59));
  int v60 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  int v65 = 0;
  uint64_t v64 = 0;
  uint64_t v72 = 0;
  int v68 = 0;
  int v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  re::StringID::destroyString((re::StringID *)v75);
  re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v31, *a4);
  uint64_t v51 = a6;
  uint64_t v16 = v52;
  if (*(_DWORD *)(v52 + 24) != v53)
  {
    re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(&v31);
    re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v31, v16);
  }
  int v33 = v73;
  uint64_t v34 = 0;
  int v35 = 0;
  __int16 v36 = a5;
  long long v37 = v74;
  *(unsigned char *)&v75[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v38, (unsigned __int8 *)v75);
  if (*(unsigned char *)&v75[0].var0 && v75[1].var1 && (*(unsigned char *)&v75[2].var0 & 1) != 0) {
    (*(void (**)(char *, char *))(*(void *)v75[1].var1 + 40))(v75[1].var1, v75[2].var1);
  }
  v41[0] = v36;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v41, 0x40uLL);
  ++v42;
  *(unsigned char *)&v75[0].var0 = 0;
  memset(&v75[0].var0 + 1, 0, 44);
  re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add((uint64_t)v41, (uint64_t)v75);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v49[0] = v37;
  re::DynamicArray<char>::setCapacity(v49, 0);
  ++LODWORD(v49[3]);
  uint64_t v18 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 32) = 0;
  *(void *)(v18 + 40) = 256;
  *(_DWORD *)(v18 + 48) = 0;
  *(void *)(v18 + 56) = 0;
  *(_DWORD *)(v18 + 64) = 2;
  *((void *)&v48 + 1) = v18;
  uint64_t v19 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 104, 8);
  *(void *)&long long v48 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::GenericDocument(v19, 0, 1024, 0);
  long long v27 = (unint64_t)v33;
  LODWORD(v28) = 0;
  long long v29 = 0uLL;
  uint64_t v20 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::ParseStream<440u,rapidjson::UTF8<char>,re::internal::RapidJSONInputStream>(v48, &v27);
  uint64_t v21 = *(void *)(v20 + 88);
  if (v21)
  {
    char v22 = v21 > 0x11
        ? "Unknown error."
        : *(char **)((char *)off_264BE8498 + (((v21 << 32) - 0x100000000) >> 29));
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize JSON: %s (Offset %zu)", (re::DynamicString *)&v76, v22, *(void *)(v20 + 96));
    if (v76)
    {
      if (v77) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 40))(v76, v78);
      }
    }
  }
  if ((unint64_t)v29 < (int)v28) {
    (*(void (**)(void, void))(*(void *)v27 + 24))(v27, (v28 - v29));
  }
  v31[6]((void **)&v31);
  if (isObject)
  {
    if (!v38[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, uint64_t *, _anonymous_namespace_ *, void))v31[9])(&v31, "object", 0, a7, a4, this, 0);
    }
  }
  else
  {
    if ((re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)&v33, "root", 0) & 1) == 0)
    {
      *(unsigned char *)&v75[0].var0 = v38[0];
      if (v38[0])
      {
        *(_OWORD *)&v75[0].var1 = v39;
        re::DynamicString::DynamicString((re::DynamicString *)&v75[1].var1, (const re::DynamicString *)v40);
      }
      long long v27 = *(_OWORD *)&v75[0].var1;
      goto LABEL_34;
    }
    if (!v38[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, uint64_t *, _anonymous_namespace_ *, void))v31[9])(&v31, "object", 0, a7, a4, this, 0);
    }
  }
  v31[7]((void **)&v31);
  if (!v38[0])
  {
    *(unsigned char *)a8 = 1;
    goto LABEL_38;
  }
  *(unsigned char *)&v75[0].var0 = 1;
  *(_OWORD *)&v75[0].var1 = v39;
  re::DynamicString::DynamicString((re::DynamicString *)&v75[1].var1, (const re::DynamicString *)v40);
  long long v27 = *(_OWORD *)&v75[0].var1;
LABEL_34:
  re::DynamicString::DynamicString((re::DynamicString *)&v28, (const re::DynamicString *)&v75[1].var1);
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v27;
  *(void *)(a8 + 24) = v28;
  *(void *)(a8 + 48) = v30;
  *(_OWORD *)(a8 + 32) = v29;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  long long v29 = 0uLL;
  if (*(unsigned char *)&v75[0].var0 && v75[1].var1 && (*(unsigned char *)&v75[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v75[1].var1 + 40))();
  }
LABEL_38:
  unsigned int v31 = (void (**)(void **))&unk_26E720CD8;
  if (*((void *)&v69 + 1))
  {
    if (v72) {
      (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
    }
    uint64_t v72 = 0;
    long long v70 = 0uLL;
    *((void *)&v69 + 1) = 0;
    ++v71;
  }
  if (*((void *)&v66 + 1))
  {
    if ((void)v69) {
      (*(void (**)(void))(**((void **)&v66 + 1) + 40))();
    }
    *(void *)&long long v69 = 0;
    long long v67 = 0uLL;
    *((void *)&v66 + 1) = 0;
    ++v68;
  }
  if (v62)
  {
    if ((void)v66) {
      (*(void (**)(void))(*(void *)v62 + 40))();
    }
    *(void *)&long long v66 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v62 = 0;
    ++v65;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v59);
  re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v31);
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v73);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)v74, v23);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  uint64_t v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      uint64_t v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc((uint64_t)a1, (uint64_t)&v13, v11);
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, char *a2, int a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if (*((_WORD *)result + 11) == 3)
    {
      LOBYTE(v7) = 2;
      DWORD1(v7) = a3;
      *((void *)&v7 + 1) = a2;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = result;
      re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v7);
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720CD8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  return re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
}

void serializeJSON(uint64_t a1@<X0>, const re::TypeInfo *a2@<X1>, const re::TypeInfo *a3@<X2>, re::Allocator *a4@<X3>, uint64_t a5@<X4>, CFDataRef theData@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  if (CFDataGetLength(theData))
  {
    serializeJSON<re::CFDataOutputStream>(a3, a1, a2, a4, a5, theData, a7, a8);
  }
  else
  {
    serializeJSON<re::CFDataBufferedOutputStream>(a3, a1, a2, a4, a5, theData, a7, a8);
  }
}

void serializeJSON<re::CFDataBufferedOutputStream>(_anonymous_namespace_ *this@<X2>, uint64_t a2@<X0>, const re::TypeInfo *a3@<X1>, re::Allocator *a4@<X3>, uint64_t a5@<X4>, __CFData *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v74 = a6;
  re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)v73, "ScratchAllocator", a4);
  int Length = CFDataGetLength(a6);
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v72, (CFTypeRef *)&v74, Length);
  *(void *)&v75[0].var0 = 0x4C90FC40E60EA890;
  v75[0].var1 = "JSON-SerializerV1-CFData";
  uint64_t v30 = (void (**)(void **))&unk_26E720EE0;
  re::StringID::StringID((re::StringID *)&v31, v75);
  uint64_t v42 = 0;
  memset(v40, 0, sizeof(v40));
  int v41 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  int v35 = 0;
  __int16 v36 = 0;
  v37[0] = 0;
  int v43 = 13;
  uint64_t v45 = 1024;
  char v44 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F0F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F0F0))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v22, (uint64_t)&v26);
    if ((_BYTE)v26) {
      uint64_t v23 = SDWORD1(v26);
    }
    else {
      uint64_t v23 = 0;
    }
    qword_26AF9F0E8 = v23;
    __cxa_guard_release(&qword_26AF9F0F0);
  }
  if (qword_26AF9F0E8) {
    uint64_t v45 = qword_26AF9F0E8;
  }
  void v48[4] = 0;
  __int16 v49 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v48, 0, 28);
  long long v53 = 0u;
  long long v54 = 0u;
  int v55 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v52 = 0;
  uint64_t v56 = 0x7FFFFFFFLL;
  uint64_t v30 = (void (**)(void **))&unk_26E720E78;
  __int16 v57 = 1;
  uint64_t v60 = 0x7FFFFFFFLL;
  long long v66 = 0u;
  long long v65 = 0u;
  memset(v58, 0, sizeof(v58));
  int v59 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  int v64 = 0;
  uint64_t v63 = 0;
  uint64_t v71 = 0;
  int v67 = 0;
  int v70 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  re::StringID::destroyString((re::StringID *)v75);
  re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v30, *(void *)a3);
  LOBYTE(v57) = a7;
  uint64_t v50 = a5;
  uint64_t v16 = v51;
  if (*(_DWORD *)(v51 + 24) != v52)
  {
    re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(&v30);
    re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v30, v16);
  }
  uint64_t v32 = v72;
  uint64_t v33 = 0;
  int v34 = 0;
  int v35 = a4;
  __int16 v36 = v73;
  *(unsigned char *)&v75[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v37, (unsigned __int8 *)v75);
  if (*(unsigned char *)&v75[0].var0 && v75[1].var1 && (*(unsigned char *)&v75[2].var0 & 1) != 0) {
    (*(void (**)(char *, char *))(*(void *)v75[1].var1 + 40))(v75[1].var1, v75[2].var1);
  }
  v40[0] = v35;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v40, 0x40uLL);
  ++v41;
  *(unsigned char *)&v75[0].var0 = 0;
  memset(&v75[0].var0 + 1, 0, 44);
  re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add((uint64_t)v40, (uint64_t)v75);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v48[0] = v36;
  re::DynamicArray<char>::setCapacity(v48, 0);
  ++LODWORD(v48[3]);
  uint64_t v18 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 64, 8);
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(void *)(v18 + 48) = 512;
  *(_DWORD *)(v18 + 56) = 324;
  *(unsigned char *)(v18 + 60) = 0;
  *((void *)&v46 + 1) = v18;
  uint64_t v19 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 48, 8);
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(void *)(v19 + 32) = 0;
  *(void *)(v19 + 40) = 256;
  *(void *)&long long v46 = v19;
  uint64_t v20 = *((void *)&v46 + 1);
  **((void **)&v46 + 1) = v19;
  *(unsigned char *)(v20 + 60) = 0;
  *(void *)(v20 + 32) = *(void *)(v20 + 24);
  v30[6]((void **)&v30);
  if (isObject)
  {
    if (!v37[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, const re::TypeInfo *, _anonymous_namespace_ *, void))v30[9])(&v30, "object", 0, a2, a3, this, 0);
    }
  }
  else
  {
    if (!re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)&v32, "root", 0))
    {
      *(unsigned char *)&v75[0].var0 = v37[0];
      if (v37[0])
      {
        *(_OWORD *)&v75[0].var1 = v38;
        re::DynamicString::DynamicString((re::DynamicString *)&v75[1].var1, (const re::DynamicString *)v39);
      }
      long long v26 = *(_OWORD *)&v75[0].var1;
      goto LABEL_25;
    }
    if (!v37[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, const re::TypeInfo *, _anonymous_namespace_ *, void))v30[9])(&v30, "object", 0, a2, a3, this, 0);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)&v32);
  }
  v30[7]((void **)&v30);
  if (!v37[0])
  {
    *(unsigned char *)a8 = 1;
    goto LABEL_29;
  }
  *(unsigned char *)&v75[0].var0 = 1;
  *(_OWORD *)&v75[0].var1 = v38;
  re::DynamicString::DynamicString((re::DynamicString *)&v75[1].var1, (const re::DynamicString *)v39);
  long long v26 = *(_OWORD *)&v75[0].var1;
LABEL_25:
  re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)&v75[1].var1);
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v26;
  *(void *)(a8 + 24) = v27;
  *(void *)(a8 + 48) = v29;
  *(_OWORD *)(a8 + 32) = v28;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  long long v28 = 0uLL;
  if (*(unsigned char *)&v75[0].var0 && v75[1].var1 && (*(unsigned char *)&v75[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v75[1].var1 + 40))();
  }
LABEL_29:
  uint64_t v30 = (void (**)(void **))&unk_26E720E78;
  if (*((void *)&v68 + 1))
  {
    if (v71) {
      (*(void (**)(void))(**((void **)&v68 + 1) + 40))();
    }
    uint64_t v71 = 0;
    long long v69 = 0uLL;
    *((void *)&v68 + 1) = 0;
    ++v70;
  }
  if (*((void *)&v65 + 1))
  {
    if ((void)v68) {
      (*(void (**)(void))(**((void **)&v65 + 1) + 40))();
    }
    *(void *)&long long v68 = 0;
    long long v66 = 0uLL;
    *((void *)&v65 + 1) = 0;
    ++v67;
  }
  if (v61)
  {
    if ((void)v65) {
      (*(void (**)(void))(*(void *)v61 + 40))();
    }
    *(void *)&long long v65 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v61 = 0;
    ++v64;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v58);
  re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v30);
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v72);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)v73, v21);
}

void serializeJSON<re::CFDataOutputStream>(_anonymous_namespace_ *this@<X2>, uint64_t a2@<X0>, const re::TypeInfo *a3@<X1>, re::Allocator *a4@<X3>, uint64_t a5@<X4>, const __CFData *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  CFDataRef v82 = a6;
  re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)v81, "ScratchAllocator", a4);
  int Length = CFDataGetLength(a6);
  __int16 v74 = 0;
  __int16 v75 = &v82;
  uint64_t v73 = &unk_26E714978;
  MutableBytePtr = CFDataGetMutableBytePtr(a6);
  uint64_t v76 = &unk_26E6BE7D0;
  char v77 = MutableBytePtr;
  int v78 = Length;
  int v79 = Length;
  uint64_t v80 = 0;
  *(void *)&v83[0].var0 = 0x4C90FC40E60EA890;
  v83[0].var1 = "JSON-SerializerV1-CFData";
  uint64_t v31 = (void (**)(void **))&unk_26E720FB0;
  re::StringID::StringID((re::StringID *)&v32, v83);
  uint64_t v43 = 0;
  memset(v41, 0, sizeof(v41));
  int v42 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  __int16 v36 = 0;
  long long v37 = 0;
  v38[0] = 0;
  int v44 = 13;
  uint64_t v46 = 1024;
  char v45 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F100))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v23, (uint64_t)&v27);
    if ((_BYTE)v27) {
      uint64_t v24 = SDWORD1(v27);
    }
    else {
      uint64_t v24 = 0;
    }
    qword_26AF9F0F8 = v24;
    __cxa_guard_release(&qword_26AF9F100);
  }
  if (qword_26AF9F0F8) {
    uint64_t v46 = qword_26AF9F0F8;
  }
  void v49[4] = 0;
  __int16 v50 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 28);
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v53 = 0;
  uint64_t v57 = 0x7FFFFFFFLL;
  uint64_t v31 = (void (**)(void **))&unk_26E720F48;
  __int16 v58 = 1;
  uint64_t v61 = 0x7FFFFFFFLL;
  long long v67 = 0u;
  long long v66 = 0u;
  memset(v59, 0, sizeof(v59));
  int v60 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  int v65 = 0;
  uint64_t v64 = 0;
  uint64_t v72 = 0;
  int v68 = 0;
  int v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  re::StringID::destroyString((re::StringID *)v83);
  re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v31, *(void *)a3);
  LOBYTE(v58) = a7;
  uint64_t v51 = a5;
  uint64_t v17 = v52;
  if (*(_DWORD *)(v52 + 24) != v53)
  {
    re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(&v31);
    re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v31, v17);
  }
  uint64_t v33 = &v73;
  uint64_t v34 = 0;
  int v35 = 0;
  __int16 v36 = a4;
  long long v37 = v81;
  *(unsigned char *)&v83[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v38, (unsigned __int8 *)v83);
  if (*(unsigned char *)&v83[0].var0 && v83[1].var1 && (*(unsigned char *)&v83[2].var0 & 1) != 0) {
    (*(void (**)(char *, char *))(*(void *)v83[1].var1 + 40))(v83[1].var1, v83[2].var1);
  }
  v41[0] = v36;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v41, 0x40uLL);
  ++v42;
  *(unsigned char *)&v83[0].var0 = 0;
  memset(&v83[0].var0 + 1, 0, 44);
  re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add((uint64_t)v41, (uint64_t)v83);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v49[0] = v37;
  re::DynamicArray<char>::setCapacity(v49, 0);
  ++LODWORD(v49[3]);
  uint64_t v19 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 64, 8);
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(void *)(v19 + 48) = 512;
  *(_DWORD *)(v19 + 56) = 324;
  *(unsigned char *)(v19 + 60) = 0;
  *((void *)&v47 + 1) = v19;
  uint64_t v20 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 48, 8);
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(void *)(v20 + 32) = 0;
  *(void *)(v20 + 40) = 256;
  *(void *)&long long v47 = v20;
  uint64_t v21 = *((void *)&v47 + 1);
  **((void **)&v47 + 1) = v20;
  *(unsigned char *)(v21 + 60) = 0;
  *(void *)(v21 + 32) = *(void *)(v21 + 24);
  v31[6]((void **)&v31);
  if (isObject)
  {
    if (!v38[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, const re::TypeInfo *, _anonymous_namespace_ *, void))v31[9])(&v31, "object", 0, a2, a3, this, 0);
    }
  }
  else
  {
    if (!re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)&v33, "root", 0))
    {
      *(unsigned char *)&v83[0].var0 = v38[0];
      if (v38[0])
      {
        *(_OWORD *)&v83[0].var1 = v39;
        re::DynamicString::DynamicString((re::DynamicString *)&v83[1].var1, (const re::DynamicString *)v40);
      }
      long long v27 = *(_OWORD *)&v83[0].var1;
      goto LABEL_25;
    }
    if (!v38[0]) {
      ((void (*)(void (***)(void **), const char *, void, uint64_t, const re::TypeInfo *, _anonymous_namespace_ *, void))v31[9])(&v31, "object", 0, a2, a3, this, 0);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)&v33);
  }
  v31[7]((void **)&v31);
  if (!v38[0])
  {
    *(unsigned char *)a8 = 1;
    goto LABEL_29;
  }
  *(unsigned char *)&v83[0].var0 = 1;
  *(_OWORD *)&v83[0].var1 = v39;
  re::DynamicString::DynamicString((re::DynamicString *)&v83[1].var1, (const re::DynamicString *)v40);
  long long v27 = *(_OWORD *)&v83[0].var1;
LABEL_25:
  re::DynamicString::DynamicString((re::DynamicString *)&v28, (const re::DynamicString *)&v83[1].var1);
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v27;
  *(void *)(a8 + 24) = v28;
  *(void *)(a8 + 48) = v30;
  *(_OWORD *)(a8 + 32) = v29;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  long long v29 = 0uLL;
  if (*(unsigned char *)&v83[0].var0 && v83[1].var1 && (*(unsigned char *)&v83[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v83[1].var1 + 40))();
  }
LABEL_29:
  uint64_t v31 = (void (**)(void **))&unk_26E720F48;
  if (*((void *)&v69 + 1))
  {
    if (v72) {
      (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
    }
    uint64_t v72 = 0;
    long long v70 = 0uLL;
    *((void *)&v69 + 1) = 0;
    ++v71;
  }
  if (*((void *)&v66 + 1))
  {
    if ((void)v69) {
      (*(void (**)(void))(**((void **)&v66 + 1) + 40))();
    }
    *(void *)&long long v69 = 0;
    long long v67 = 0uLL;
    *((void *)&v66 + 1) = 0;
    ++v68;
  }
  if (v62)
  {
    if ((void)v66) {
      (*(void (**)(void))(*(void *)v62 + 40))();
    }
    *(void *)&long long v66 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v62 = 0;
    ++v65;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v59);
  re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v31);
  re::internal::MemoryOutputStream<__CFData *>::~MemoryOutputStream((uint64_t)&v73);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)v81, v22);
}

void deserializeJSON(const __CFData *a1@<X0>, const re::TypeInfo *this@<X1>, const re::TypeInfo *a3@<X2>, re::Allocator *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  Instance = re::TypeInfo::createInstance(this, a4, 0);
  deserializeJSONIntoExistingObject(a1, this, a3, a4, a5, Instance, (uint64_t)v17);
  if (v17[0])
  {
    *(unsigned char *)a6 = 1;
    *(void *)(a6 + 8) = Instance;
  }
  else
  {
    re::TypeInfo::releaseInstance(this, Instance, a4, 0);
    long long v13 = v18;
    re::DynamicString::DynamicString((re::DynamicString *)&v14, (const re::DynamicString *)&v19);
    *(unsigned char *)a6 = 0;
    *(_OWORD *)(a6 + 8) = v13;
    *(void *)(a6 + 24) = v14;
    *(void *)(a6 + 48) = v16;
    *(_OWORD *)(a6 + 32) = v15;
    if (v19)
    {
      if (v20) {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
    }
  }
}

void deserializeJSONIntoExistingObject(const __CFData *a1@<X0>, const re::TypeInfo *a2@<X1>, const re::TypeInfo *this@<X2>, re::Allocator *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  CFDataRef v82 = a1;
  re::LeakTestAllocator::LeakTestAllocator((re::LeakTestAllocator *)v81, "ScratchAllocator", a4);
  int Length = CFDataGetLength(a1);
  __int16 v74 = 0;
  __int16 v75 = &v82;
  uint64_t v73 = &unk_26E714A48;
  BytePtr = CFDataGetBytePtr(a1);
  uint64_t v76 = &unk_26E6BE790;
  char v77 = BytePtr;
  int v78 = Length;
  int v79 = Length;
  uint64_t v80 = 0;
  *(void *)&v83[0].var0 = 0xD2A3148AB11B6CELL;
  v83[0].var1 = "JSON-DeserializerV1-CFData";
  uint64_t v31 = (void (**)(void **))&unk_26E720E10;
  re::StringID::StringID((re::StringID *)&v32, v83);
  uint64_t v43 = 0;
  memset(v41, 0, sizeof(v41));
  int v42 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  __int16 v36 = 0;
  long long v37 = 0;
  v38[0] = 0;
  int v44 = 13;
  uint64_t v46 = 1024;
  char v45 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F110))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v23, (uint64_t)&v27);
    if ((_BYTE)v27) {
      uint64_t v24 = SDWORD1(v27);
    }
    else {
      uint64_t v24 = 0;
    }
    qword_26AF9F108 = v24;
    __cxa_guard_release(&qword_26AF9F110);
  }
  if (qword_26AF9F108) {
    uint64_t v46 = qword_26AF9F108;
  }
  void v49[4] = 0;
  __int16 v50 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 28);
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v53 = 0;
  uint64_t v57 = 0x7FFFFFFFLL;
  uint64_t v31 = (void (**)(void **))&unk_26E720DA8;
  __int16 v58 = 1;
  uint64_t v61 = 0x7FFFFFFFLL;
  long long v67 = 0u;
  long long v66 = 0u;
  memset(v59, 0, sizeof(v59));
  int v60 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  int v65 = 0;
  uint64_t v64 = 0;
  uint64_t v72 = 0;
  int v68 = 0;
  int v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  re::StringID::destroyString((re::StringID *)v83);
  re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v31, *(void *)a2);
  uint64_t v51 = a5;
  uint64_t v15 = v52;
  if (*(_DWORD *)(v52 + 24) != v53)
  {
    re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(&v31);
    re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v31, v15);
  }
  uint64_t v33 = &v73;
  uint64_t v34 = 0;
  int v35 = 0;
  __int16 v36 = a4;
  long long v37 = v81;
  *(unsigned char *)&v83[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v38, (unsigned __int8 *)v83);
  if (*(unsigned char *)&v83[0].var0 && v83[1].var1 && (*(unsigned char *)&v83[2].var0 & 1) != 0) {
    (*(void (**)(char *, char *))(*(void *)v83[1].var1 + 40))(v83[1].var1, v83[2].var1);
  }
  v41[0] = v36;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v41, 0x40uLL);
  ++v42;
  *(unsigned char *)&v83[0].var0 = 0;
  memset(&v83[0].var0 + 1, 0, 44);
  re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add((uint64_t)v41, (uint64_t)v83);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v49[0] = v37;
  re::DynamicArray<char>::setCapacity(v49, 0);
  ++LODWORD(v49[3]);
  uint64_t v17 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 40) = 256;
  *(_DWORD *)(v17 + 48) = 0;
  *(void *)(v17 + 56) = 0;
  *(_DWORD *)(v17 + 64) = 2;
  *((void *)&v48 + 1) = v17;
  uint64_t v18 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 104, 8);
  *(void *)&long long v48 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::GenericDocument(v18, 0, 1024, 0);
  long long v27 = (unint64_t)v33;
  LODWORD(v28) = 0;
  long long v29 = 0uLL;
  uint64_t v19 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::ParseStream<440u,rapidjson::UTF8<char>,re::internal::RapidJSONInputStream>(v48, &v27);
  uint64_t v20 = *(void *)(v19 + 88);
  if (v20)
  {
    uint64_t v21 = v20 > 0x11
        ? "Unknown error."
        : *(char **)((char *)off_264BE8498 + (((v20 << 32) - 0x100000000) >> 29));
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize JSON: %s (Offset %zu)", (re::DynamicString *)&v84, v21, *(void *)(v19 + 96));
    if (v84)
    {
      if (v85) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 40))(v84, v86);
      }
    }
  }
  if ((unint64_t)v29 < (int)v28) {
    (*(void (**)(void, void))(*(void *)v27 + 24))(v27, (v28 - v29));
  }
  v31[6]((void **)&v31);
  if (isObject)
  {
    if (!v38[0]) {
      ((void (*)(void (***)(void **), const char *, void, void *, const re::TypeInfo *, const re::TypeInfo *, void))v31[9])(&v31, "object", 0, a6, a2, this, 0);
    }
  }
  else
  {
    if ((re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)&v33, "root", 0) & 1) == 0)
    {
      *(unsigned char *)&v83[0].var0 = v38[0];
      if (v38[0])
      {
        *(_OWORD *)&v83[0].var1 = v39;
        re::DynamicString::DynamicString((re::DynamicString *)&v83[1].var1, (const re::DynamicString *)v40);
      }
      long long v27 = *(_OWORD *)&v83[0].var1;
      goto LABEL_34;
    }
    if (!v38[0]) {
      ((void (*)(void (***)(void **), const char *, void, void *, const re::TypeInfo *, const re::TypeInfo *, void))v31[9])(&v31, "object", 0, a6, a2, this, 0);
    }
  }
  v31[7]((void **)&v31);
  if (!v38[0])
  {
    *(unsigned char *)a7 = 1;
    goto LABEL_38;
  }
  *(unsigned char *)&v83[0].var0 = 1;
  *(_OWORD *)&v83[0].var1 = v39;
  re::DynamicString::DynamicString((re::DynamicString *)&v83[1].var1, (const re::DynamicString *)v40);
  long long v27 = *(_OWORD *)&v83[0].var1;
LABEL_34:
  re::DynamicString::DynamicString((re::DynamicString *)&v28, (const re::DynamicString *)&v83[1].var1);
  *(unsigned char *)a7 = 0;
  *(_OWORD *)(a7 + 8) = v27;
  *(void *)(a7 + 24) = v28;
  *(void *)(a7 + 48) = v30;
  *(_OWORD *)(a7 + 32) = v29;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  long long v29 = 0uLL;
  if (*(unsigned char *)&v83[0].var0 && v83[1].var1 && (*(unsigned char *)&v83[2].var0 & 1) != 0) {
    (*(void (**)(void))(*(void *)v83[1].var1 + 40))();
  }
LABEL_38:
  uint64_t v31 = (void (**)(void **))&unk_26E720DA8;
  if (*((void *)&v69 + 1))
  {
    if (v72) {
      (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
    }
    uint64_t v72 = 0;
    long long v70 = 0uLL;
    *((void *)&v69 + 1) = 0;
    ++v71;
  }
  if (*((void *)&v66 + 1))
  {
    if ((void)v69) {
      (*(void (**)(void))(**((void **)&v66 + 1) + 40))();
    }
    *(void *)&long long v69 = 0;
    long long v67 = 0uLL;
    *((void *)&v66 + 1) = 0;
    ++v68;
  }
  if (v62)
  {
    if ((void)v66) {
      (*(void (**)(void))(*(void *)v62 + 40))();
    }
    *(void *)&long long v66 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v62 = 0;
    ++v65;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v59);
  re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v31);
  re::internal::MemoryInputStream<__CFData const*>::~MemoryInputStream((uint64_t)&v73);
  re::LeakTestAllocator::~LeakTestAllocator((re::LeakTestAllocator *)v81, v22);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  uint64_t v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      uint64_t v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc((uint64_t)a1, (uint64_t)&v13, v11);
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720DA8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  return re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720C70;
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720C08;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  int v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  int v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  int v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  int v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  int v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  int v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  int v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  int v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  int v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  int v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  int v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  int v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  int v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  int v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  int v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  int v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  int v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  int v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        uint64_t v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (*(void *)this == *(void *)(a1 + 272))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **((void **)this + 2) | 0xFFFFFFFF00000000);
        uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

void re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(re::internal **a1, char *__s, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **(void **)(a2 + 16) | 0xFFFFFFFF00000000);
    uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    if (v3) {
      return *(uint64_t (**)(re::internal **, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))v3;
    }
  }
  return v2;
}

uint64_t re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::internal **a1, char *__s, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
      goto LABEL_295;
    }
    uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 16);
    }
    else {
      int v20 = -1;
    }
    uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 16);
    }
    else {
      int v22 = -1;
    }
    if (v20 != v22)
    {
      uint64_t v26 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      LOBYTE(v195) = v26;
      long long v47 = "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.";
LABEL_76:
      return 0;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_10;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (!re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_295;
        }
LABEL_22:
        uint64_t v23 = re::TypeInfo::name(this);
        unint64_t v24 = (unint64_t)*v23 >> 1;
        if (v24 <= 0xCA3DEFB5)
        {
          if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
          {
            if ((unint64_t)*v23 >> 1 <= 0x2E9355)
            {
              if (v24 != 104431)
              {
                if (v24 == 3029738)
                {
                }
                goto LABEL_355;
              }
LABEL_288:
            }
            if (v24 == 3052374)
            {
            }
            uint64_t v165 = 3327612;
            goto LABEL_274;
          }
          if ((unint64_t)*v23 >> 1 <= 0xB0F77BD0)
          {
            if (v24 == 97526364)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)(a1 + 3), __s, (float *)a4);
            }
            uint64_t v51 = 109413500;
            goto LABEL_178;
          }
          if (v24 == 2969009105)
          {
            return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>((uint64_t)(a1 + 3), __s, (double *)a4);
          }
          if (v24 == 3111160798)
          {
          }
          goto LABEL_355;
        }
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            {
            }
            if (v24 == 0x303EE86A734)
            {
            }
            goto LABEL_355;
          }
          if (v24 == 0x303EE8780EELL)
          {
          }
          if (v24 != 0x303EE88E58DLL)
          {
LABEL_355:
            uint64_t v195 = re::TypeInfo::name(this)[1];
            long long v47 = "Unsupported basic type \"%s\".";
            goto LABEL_76;
          }
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03) {
              goto LABEL_288;
            }
            uint64_t v165 = 0x16749F63A2;
LABEL_274:
            if (v24 == v165)
            {
            }
            goto LABEL_355;
          }
          if (v24 != 3393056694)
          {
            uint64_t v51 = 0x16749D2549;
LABEL_178:
            if (v24 == v51)
            {
            }
            goto LABEL_355;
          }
        }
      }
      uint64_t v62 = **((void **)this + 2);
      uint64_t v63 = **((void **)a6 + 2);
      if ((unsigned __int16)v62 == (unsigned __int16)v63)
      {
        BOOL v18 = WORD1(v62) == WORD1(v63);
        uint64_t v64 = (v63 ^ v62) & 0xFFFFFF00000000;
        if (v18 && v64 == 0) {
          goto LABEL_22;
        }
      }
      goto LABEL_295;
    case 2:
      if (this == a6) {
        goto LABEL_233;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v66 = **((void **)this + 2);
        uint64_t v67 = **((void **)a6 + 2);
        if ((unsigned __int16)v66 == (unsigned __int16)v67
          && WORD1(v66) == WORD1(v67)
          && ((v67 ^ v66) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_111;
        }
        int v27 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_111:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v148 = **((void **)this + 2);
            uint64_t v149 = **((void **)a6 + 2);
            if ((unsigned __int16)v148 == (unsigned __int16)v149
              && ((BOOL v18 = WORD1(v148) == WORD1(v149), v150 = (v149 ^ v148) & 0xFFFFFF00000000, v18)
                ? (BOOL v151 = v150 == 0)
                : (BOOL v151 = 0),
                  v151))
            {
LABEL_233:
              BOOL v70 = 0;
            }
            else
            {
              BOOL v70 = 1;
            }
          }
          else
          {
            BOOL v70 = !re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            __dst.n128_u64[0] = 0;
            uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 3), __s, (uint64_t *)&__dst);
            if (!result) {
              return result;
            }
            uint64_t v152 = (_anonymous_namespace_ *)(a1 + 3);
LABEL_237:
            return *((unsigned char *)a1 + 64) == 0;
          }
          if (*(_DWORD *)(*((void *)this + 2) + 8) >= 9u)
          {
            uint64_t v195 = re::TypeInfo::name(this)[1];
            long long v47 = "Enum type \"%s\" has invalid size: %zu bytes";
            goto LABEL_76;
          }
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(this, (const re::TypeInfo *)a4, a3);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            __dst.n128_u64[0] = 0;
            memcpy(&__dst, a4, *(unsigned int *)(*((void *)this + 2) + 8));
            LOBYTE(v195) = __dst.n128_u8[0];
            re::TypeInfo::name(this);
            long long v47 = "Value %zu is not a valid enum constant of \"%s\".";
            goto LABEL_76;
          }
          unsigned int v154 = EnumConstantIndex;
          if (v70)
          {
            uint64_t v155 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (!v155 || (uint64_t v156 = re::internal::TypeTranslationTable::translateRuntimeEnum(v155, this, v154, a6)) == 0)
            {
              uint64_t v157 = re::TypeInfo::enumConstants(this);
              uint64_t v159 = v154;
              if (v158 > v154)
              {
                uint64_t v195 = *(void *)(v157 + 24 * v154 + 16);
                re::TypeInfo::name(a6);
                long long v47 = "Runtime enum constant \"%s\" does not exist in serialized type \"%s\".";
                goto LABEL_76;
              }
LABEL_372:
              re::internal::assertLog((re::internal *)6, v158, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v159, v158);
              _os_crash();
              __break(1u);
            }
LABEL_304:
            unint64_t v168 = *(const char **)(v156 + 16);
            __dst.n128_u64[0] = strlen(v168);
            if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 3), __s, (uint64_t *)&__dst))
            {
              uint64_t v152 = (_anonymous_namespace_ *)(a1 + 3);
              goto LABEL_237;
            }
            return 0;
          }
          uint64_t result = re::TypeInfo::enumConstants(this);
          uint64_t v167 = v154;
          if (v166 > v154)
          {
            if (!result) {
              return result;
            }
            uint64_t v156 = result + 24 * v154;
            goto LABEL_304;
          }
LABEL_371:
          re::internal::assertLog((re::internal *)6, v166, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v167, v166);
          _os_crash();
          __break(1u);
          goto LABEL_372;
        }
        int v27 = *((unsigned __int8 *)this + 12);
      }
      if (v27 == *((unsigned __int8 *)a6 + 12))
      {
        int v68 = re::TypeInfo::name(this);
        long long v69 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v68, v69)) {
          goto LABEL_111;
        }
      }
      goto LABEL_295;
    case 3:
      if (this == a6) {
        goto LABEL_118;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v71 = **((void **)this + 2);
        uint64_t v72 = **((void **)a6 + 2);
        if ((unsigned __int16)v71 == (unsigned __int16)v72
          && WORD1(v71) == WORD1(v72)
          && ((v72 ^ v71) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_118;
        }
        int v28 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_118;
        }
        int v28 = *((unsigned __int8 *)this + 12);
      }
      if (v28 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_295;
      }
LABEL_118:
      if (a7)
      {
        __dst.n128_u8[0] = 0;
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional((uint64_t)(a1 + 3), __s, &__dst);
        uint64_t v73 = (_anonymous_namespace_ *)(a1 + 3);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        uint64_t v74 = (*(uint64_t (**)(unsigned __int8 *))(v214 + 80))(a4);
        LOBYTE(v209[0]) = v74 != 0;
        double v75 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional((uint64_t)(a1 + 3), __s, v209);
        if (v74)
        {
          uint64_t v76 = (*(uint64_t (**)(unsigned __int8 *, double))(v214 + 80))(a4, v75);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, char *, void, uint64_t, rapidjson::internal **, unsigned char *, void))*a1
          }
             + 9))(a1, __s, 0, v76, &v202, v210, 0);
        }
        uint64_t v73 = (_anonymous_namespace_ *)(a1 + 3);
      }
      return *((unsigned char *)a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_133;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v77 = **((void **)this + 2);
        uint64_t v78 = **((void **)a6 + 2);
        if ((unsigned __int16)v77 == (unsigned __int16)v78)
        {
          BOOL v18 = WORD1(v77) == WORD1(v78);
          uint64_t v79 = (v78 ^ v77) & 0xFFFFFF00000000;
          if (v18 && v79 == 0) {
            goto LABEL_133;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_133;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_295;
      }
      uint64_t v81 = *((void *)this + 2);
      uint64_t v82 = *((void *)a6 + 2);
      int v83 = *(_DWORD *)(v82 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v81 + 84) & 0xFFFFFF) != 0)
      {
        if (!v83) {
          goto LABEL_295;
        }
LABEL_133:
        if (a7)
        {
          uint64_t v84 = a1[34];
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
          re::internal::translateType(v84, (const re::TypeRegistry *)v210, (uint64_t)&v202);
          uint64_t v85 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
          if (!v85) {
            goto LABEL_207;
          }
          uint64_t v86 = (void (*)(re::internal **, void, void, void, rapidjson::internal **, rapidjson::internal **, uint64_t))v85;
          uint64_t v87 = *((void *)a6 + 2);
          int v88 = *(_DWORD *)(v87 + 84) & 0xFFFFFF;
          if (v88)
          {
            unint64_t v89 = 0;
            int v90 = 8;
          }
          else
          {
            unint64_t v89 = *(int *)(v87 + 88);
            int v90 = 4;
          }
          __dst.n128_u64[0] = v89;
          long long v96 = (_anonymous_namespace_ *)(a1 + 3);
          uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), __s, (uint64_t *)&__dst, v90);
          if (!result) {
            return result;
          }
          if (v88) {
            BOOL v160 = v89 == 0;
          }
          else {
            BOOL v160 = 1;
          }
          char v161 = v160;
          if (!v160)
          {
            v209[0] = 0;
            v209[1] = 0xFFFFFFFFLL;
            (*((void (**)(re::internal **, void, void *))*a1 + 2))(a1, 0, v209);
          }
          for (; v89; --v89)
            v86(a1, 0, 0, 0, &v202, &v202, 1);
          if (v161) {
            goto LABEL_310;
          }
        }
        else
        {
          re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
          re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
          uint64_t v91 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
          if (!v91) {
            goto LABEL_207;
          }
          unint64_t v92 = (void (*)(re::internal **, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v91;
          long long v93 = (void *)re::ArrayAccessor::size((re::ArrayAccessor *)&__dst, (char *)a4);
          v207[0] = v93;
          int v94 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v94) {
            int v95 = 8;
          }
          else {
            int v95 = 4;
          }
          long long v96 = (_anonymous_namespace_ *)(a1 + 3);
          uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), __s, (uint64_t *)v207, v95);
          if (!result) {
            return result;
          }
          if (v94) {
            BOOL v97 = v93 == 0;
          }
          else {
            BOOL v97 = 1;
          }
          char v98 = v97;
          if (v97)
          {
            if (!v93) {
              goto LABEL_310;
            }
          }
          else
          {
            uint64_t v169 = *(void *)a4;
            v208[0] = 0;
            v208[1] = 0xFFFFFFFFLL;
            (*((void (**)(re::internal **, uint64_t, uint64_t *))*a1 + 2))(a1, v169, v208);
          }
          unint64_t v170 = 0;
          do
          {
            uint64_t v171 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&__dst, (char *)a4, v170);
            v92(a1, 0, 0, v171, &v202, v210, 0);
            ++v170;
          }
          while (v93 != (void *)v170);
          if (v98)
          {
LABEL_310:
            long long v103 = v96;
LABEL_311:
            return *((unsigned char *)a1 + 64) == 0;
          }
        }
        (*((void (**)(re::internal **))*a1 + 3))(a1);
        goto LABEL_310;
      }
      if (!v83 && *(_DWORD *)(v81 + 88) == *(_DWORD *)(v82 + 88)) {
        goto LABEL_133;
      }
      goto LABEL_295;
    case 5:
      if (this == a6) {
        goto LABEL_157;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v99 = **((void **)this + 2);
        uint64_t v100 = **((void **)a6 + 2);
        if ((unsigned __int16)v99 == (unsigned __int16)v100
          && WORD1(v99) == WORD1(v100)
          && ((v100 ^ v99) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_157;
        }
        int v29 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_157;
        }
        int v29 = *((unsigned __int8 *)this + 12);
      }
      if (v29 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_295;
      }
LABEL_157:
      if (a7)
      {
        long long v101 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v101, (const re::TypeRegistry *)v210, (uint64_t)&v202);
        if (!(*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202)) {
          goto LABEL_207;
        }
        __dst.n128_u64[0] = 0;
        BOOL v102 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), __s, (uint64_t *)&__dst, 0);
        uint64_t result = 0;
        if (v102)
        {
          long long v103 = (_anonymous_namespace_ *)(a1 + 3);
          goto LABEL_311;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
      uint64_t v104 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
      if (!v104) {
        goto LABEL_207;
      }
      long long v105 = (void (*)(re::internal **, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v104;
      uint64_t v106 = (*(uint64_t (**)(unsigned __int8 *))(v214 + 80))(a4);
      v208[0] = v106;
      long long v96 = (_anonymous_namespace_ *)(a1 + 3);
      BOOL v107 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), __s, v208, 0);
      uint64_t result = 0;
      if (!v107) {
        return result;
      }
      if (*(void *)(v214 + 96))
      {
        if (v106)
        {
          for (uint64_t i = 0; i != v106; ++i)
          {
            uint64_t v109 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v214 + 96))(a4, i);
            v105(a1, 0, 0, v109, &v202, v210, 0);
          }
        }
      }
      else
      {
        uint64_t v176 = *(uint64_t (**)(unsigned __int8 *, re::internal *))(v214 + 104);
        if (!v176 || !*(void *)(v214 + 112) || !*(void *)(v214 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst);
          uint64_t v195 = re::TypeInfo::name((re::TypeInfo *)v209)[1];
          long long v47 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_76;
        }
        uint64_t v177 = v176(a4, a1[7]);
        uint64_t v178 = (*(uint64_t (**)(void))(v214 + 112))();
        if (v178)
        {
          uint64_t v179 = v178;
          do
          {
            v105(a1, 0, 0, v179, &v202, v210, 0);
            uint64_t v179 = (*(uint64_t (**)(uint64_t))(v214 + 112))(v177);
          }
          while (v179);
        }
        (*(void (**)(uint64_t, re::internal *))(v214 + 120))(v177, a1[7]);
      }
      goto LABEL_310;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
      uint64_t v31 = re::TypeInfo::name((re::TypeInfo *)&v202);
      int v32 = BYTE4(v203);
      if (BYTE4(v203) != 1) {
        goto LABEL_91;
      }
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v202))
      {
        unint64_t v33 = (unint64_t)*v31 >> 1;
        if (v33 > 0x303EE8780EDLL)
        {
          if (v33 == 0x303EE8780EELL)
          {
            BOOL v173 = (char *)v31[1];
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
            if (v173 == "uint32_t") {
              return ((uint64_t (*)(re::internal **, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            int v174 = strcmp(v173, "uint32_t");
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
            if (!v174) {
              return ((uint64_t (*)(re::internal **, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            goto LABEL_318;
          }
          if (v33 != 0x303EE88E58DLL)
          {
LABEL_318:
            __dst.n128_u64[0] = 0x18E6A9A093;
            __dst.n128_u64[1] = (unint64_t)"uint8_t";
            BOOL v175 = re::StringID::operator==(v31, &__dst);
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>;
            if (v175) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 0x16749F63A2;
            __dst.n128_u64[1] = (unint64_t)"int64_t";
            if (re::StringID::operator==(v31, &__dst)) {
              return ((uint64_t (*)(re::internal **, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>)(a1, __s, a3, a4, this, a6, a7);
            }
            *(void *)uint64_t v210 = 3327612;
            *(void *)&v210[8] = "long";
            BOOL v188 = re::StringID::operator==(v31, v210);
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>;
            if (v188) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 104431;
            __dst.n128_u64[1] = (unint64_t)"int";
            BOOL v189 = re::StringID::operator==(v31, &__dst);
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>;
            if (v189) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 109413500;
            __dst.n128_u64[1] = (unint64_t)"short";
            BOOL v190 = re::StringID::operator==(v31, &__dst);
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>;
            if (v190) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            goto LABEL_194;
          }
          BOOL v114 = (char *)v31[1];
          int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (v114 != "uint64_t")
          {
            uint64_t v115 = "uint64_t";
            goto LABEL_314;
          }
        }
        else
        {
          if (v33 != 3393056694)
          {
            if (v33 == 0x303EE86A734)
            {
              uint64_t v34 = (char *)v31[1];
              int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
              if (v34 == "uint16_t") {
                return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
              }
              int v36 = strcmp(v34, "uint16_t");
              int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
              if (!v36) {
                return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
              }
            }
            goto LABEL_318;
          }
          BOOL v114 = (char *)v31[1];
          int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (v114 != "size_t")
          {
            uint64_t v115 = "size_t";
LABEL_314:
            int v172 = strcmp(v114, v115);
            int v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
            if (!v172) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
            }
            goto LABEL_318;
          }
        }
        return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
      }
      int v32 = BYTE4(v203);
LABEL_91:
      if (v32 == 8)
      {
        unint64_t v54 = (unint64_t)*v31 >> 1;
        if (v54 == 0x22C6ED80D0CLL)
        {
          uint64_t v116 = (char *)v31[1];
          int v35 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (v116 == "StringID") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
          }
          int v117 = strcmp(v116, "StringID");
          int v35 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (!v117) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
          }
        }
        else if (v54 == 0x134375A94D9F7110)
        {
          long long v55 = (char *)v31[1];
          int v35 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (v55 == "DynamicString") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
          }
          int v56 = strcmp(v55, "DynamicString");
          int v35 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (!v56) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, __s, a3, a4, this, a6, a7);
          }
        }
      }
LABEL_194:
      if (this == a6) {
        goto LABEL_202;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (re::areSameTranslatedVersion(this, a6, v30)) {
          goto LABEL_202;
        }
        goto LABEL_201;
      }
      uint64_t v118 = **((void **)this + 2);
      uint64_t v119 = **((void **)a6 + 2);
      if ((unsigned __int16)v118 != (unsigned __int16)v119
        || WORD1(v118) != WORD1(v119)
        || ((v119 ^ v118) & 0xFFFFFF00000000) != 0)
      {
LABEL_201:
        if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12)) {
          goto LABEL_202;
        }
LABEL_295:
        return 0;
      }
LABEL_202:
      if (a7)
      {
        uint64_t v120 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v120, (const re::TypeRegistry *)v210, (uint64_t)&v202);
        unsigned int v121 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v121, (const re::TypeRegistry *)v209, (uint64_t)v210);
        if ((*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202))
        {
          if ((*((uint64_t (**)(re::internal **, unsigned char *))*a1 + 10))(a1, v210))
          {
            __dst.n128_u64[0] = 0;
            uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary((uint64_t)(a1 + 3), __s, (uint64_t *)&__dst);
            if (result)
            {
              unint64_t v122 = (_anonymous_namespace_ *)(a1 + 3);
              goto LABEL_368;
            }
            return result;
          }
          uint64_t v123 = (re::TypeInfo *)v210;
        }
        else
        {
LABEL_207:
          uint64_t v123 = (re::TypeInfo *)&v202;
        }
        goto LABEL_208;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v208, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v207, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v200, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)v198, (uint64_t)this);
      uint64_t v129 = (*((uint64_t (**)(re::internal **, void *))*a1 + 10))(a1, v209);
      if (!v129)
      {
        uint64_t v123 = (re::TypeInfo *)v209;
LABEL_208:
        uint64_t v196 = re::TypeInfo::name(v123)[1];
        return 0;
      }
      uint64_t v130 = (void (*)(re::internal **, const char *, void, uint64_t, void *, void **, void))v129;
      uint64_t v131 = (*((uint64_t (**)(re::internal **, uint64_t *))*a1 + 10))(a1, v208);
      if (!v131)
      {
        uint64_t v123 = (re::TypeInfo *)v208;
        goto LABEL_208;
      }
      uint64_t v132 = (void (*)(re::internal **, const char *, void, uint64_t, uint64_t *, unsigned char *, void))v131;
      unint64_t v133 = (*(uint64_t (**)(unsigned __int8 *))(v199 + 88))(a4);
      unint64_t v197 = v133;
      uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary((uint64_t)(a1 + 3), __s, (uint64_t *)&v197);
      if (!result) {
        return result;
      }
      if (!v133) {
        goto LABEL_367;
      }
      uint64_t v134 = *(void **)this;
      __dst.n128_u64[0] = 0x449AD97C4B77BED4;
      __dst.n128_u64[1] = (unint64_t)"_CompareFunc";
      uint64_t v135 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v134 + 25), &__dst);
      if (!v135)
      {
        re::StringID::destroyString((re::StringID *)&__dst);
LABEL_364:
        uint64_t v191 = (*(uint64_t (**)(unsigned __int8 *, re::internal *))(v199 + 112))(a4, a1[7]);
        (*(void (**)(void))(v199 + 120))();
        do
        {
          double v192 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry((uint64_t)(a1 + 3), 0);
          uint64_t v193 = (*(uint64_t (**)(uint64_t, double))(v199 + 128))(v191, v192);
          v130(a1, "key", 0, v193, v209, v207, 0);
          uint64_t v194 = (*(uint64_t (**)(uint64_t))(v199 + 136))(v191);
          v132(a1, "value", 0, v194, v208, v200, 0);
          (*(void (**)(uint64_t))(v199 + 120))(v191);
          --v133;
        }
        while (v133);
        (*(void (**)(uint64_t, re::internal *))(v199 + 144))(v191, a1[7]);
        goto LABEL_367;
      }
      unint64_t v136 = *v135;
      re::StringID::destroyString((re::StringID *)&__dst);
      if (!v134) {
        goto LABEL_364;
      }
      unint64_t v137 = *(void *)v209[2];
      __dst.n128_u64[0] = v136;
      __dst.n128_u64[1] = v137;
      LODWORD(v214) = -1;
      uint64_t v138 = (uint64_t (**)(uint64_t, uint64_t))re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v209[0] + 768, (uint64_t *)&__dst);
      if (!v138) {
        goto LABEL_364;
      }
      uint64_t v139 = *v138;
      if (!*v138) {
        goto LABEL_364;
      }
      uint64_t v206 = 0;
      uint64_t v203 = 0;
      unint64_t v204 = 0;
      int v205 = 0;
      long long v202 = a1[7];
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v202, v133);
      ++v205;
      uint64_t v140 = (*(uint64_t (**)(unsigned __int8 *, re::internal *))(v199 + 112))(a4, a1[7]);
      if ((*(unsigned int (**)(void))(v199 + 120))())
      {
        do
        {
          uint64_t v141 = (*(uint64_t (**)(uint64_t))(v199 + 128))(v140);
          uint64_t v142 = (*(uint64_t (**)(uint64_t))(v199 + 136))(v140);
          __dst.n128_u64[0] = v141;
          __dst.n128_u64[1] = v142;
          __n128 v143 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v202, &__dst);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v199 + 120))(v140, v143) & 1) != 0);
      }
      (*(void (**)(uint64_t, re::internal *))(v199 + 144))(v140, a1[7]);
      std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(v206, &v206[16 * v204], v139);
      uint64_t v144 = 0;
      unint64_t v145 = 0;
      if (v133 <= 1) {
        unint64_t v133 = 1;
      }
      do
      {
        double v146 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry((uint64_t)(a1 + 3), 0);
        unint64_t v147 = v204;
        if (v204 <= v145)
        {
          uint64_t v201 = 0;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v210 = 136315906;
          *(void *)&v210[4] = "operator[]";
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = 789;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v145;
          __int16 v211 = 2048;
          unint64_t v212 = v147;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_370:
          uint64_t v201 = 0;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v210 = 136315906;
          *(void *)&v210[4] = "operator[]";
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = 789;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v145;
          __int16 v211 = 2048;
          unint64_t v212 = v147;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_371;
        }
        ((void (*)(re::internal **, const char *, void, void, void *, void **, void, double))v130)(a1, "key", 0, *(void *)&v206[v144], v209, v207, 0, v146);
        unint64_t v147 = v204;
        if (v204 <= v145) {
          goto LABEL_370;
        }
        v132(a1, "value", 0, *(void *)&v206[v144 + 8], v208, v200, 0);
        ++v145;
        v144 += 16;
      }
      while (v133 != v145);
      if (v202 && v206) {
        (*(void (**)(void))(*(void *)v202 + 40))();
      }
LABEL_367:
      unint64_t v122 = (_anonymous_namespace_ *)(a1 + 3);
LABEL_368:
      return *((unsigned char *)a1 + 64) == 0;
    case 7:
      if (this == a6) {
        goto LABEL_59;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v110 = **((void **)this + 2);
        uint64_t v111 = **((void **)a6 + 2);
        if ((unsigned __int16)v110 != (unsigned __int16)v111) {
          goto LABEL_295;
        }
        BOOL v18 = WORD1(v110) == WORD1(v111);
        uint64_t v112 = (v111 ^ v110) & 0xFFFFFF00000000;
        if (!v18 || v112 != 0) {
          goto LABEL_295;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_295;
      }
LABEL_59:
      long long v37 = (_anonymous_namespace_ *)(a1 + 3);
      uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 3), __s, 16);
      if (a7)
      {
        if (!result) {
          return result;
        }
        long long v202 = 0;
        if (*(_DWORD *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, 0, (uint64_t)&__dst);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, void, __n128 *, __n128 *, uint64_t))*a1 + 9))(a1, "value", 0, 0, &__dst, &__dst, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        uint64_t v52 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        unint64_t Tag = re::UnionAccessor::readTag(v52, (char *)a4);
        *(void *)uint64_t v210 = Tag;
        if (Tag < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, Tag, (uint64_t)&v202);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, unsigned __int8 *, rapidjson::internal **, rapidjson::internal **, void))*a1
          }
             + 9))(a1, "value", 0, a4, &v202, &v202, 0);
        }
      }
      goto LABEL_357;
    case 8:
      if (!a7) {
        goto LABEL_69;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        uint64_t v57 = a1[34];
        *(void *)uint64_t v210 = 0x2686EB529B3EE220;
        *(void *)&v210[8] = "DynamicString";
        re::TypeRegistry::typeInfo(v57, (const re::StringID *)v210, &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
        re::StringID::destroyString((re::StringID *)v210);
        __int16 v58 = (re *)&v202;
        int v59 = (re::TypeInfo *)&v202;
        uint64_t v60 = (uint64_t)a1;
        uint64_t v61 = __s;
      }
      else
      {
        long long v38 = re::TypeInfo::name(this);
        if ((*v38 & 0xFFFFFFFFFFFFFFFELL) != 0x2686EB529B3EE220
          || (int v40 = (char *)v38[1], v40 != "DynamicString") && strcmp(v40, "DynamicString"))
        {
LABEL_69:
          uint64_t v41 = *((void *)this + 2);
          if ((*(unsigned char *)(v41 + 48) & 4) == 0)
          {
            long long v37 = (_anonymous_namespace_ *)(a1 + 3);
            BOOL v42 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 3), __s, 0);
            uint64_t result = 0;
            if (!v42) {
              return result;
            }
            uint64_t v43 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
            if (!v43 || *(_DWORD *)(v43 + 16) >= 2u)
            {
              uint64_t v45 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
              if (v45) {
                unsigned __int32 v46 = *(_DWORD *)(v45 + 16);
              }
              else {
                unsigned __int32 v46 = -1;
              }
              __dst.n128_u32[0] = v46;
            }
            if (this == a6) {
              goto LABEL_333;
            }
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v180 = **((void **)this + 2);
              uint64_t v181 = **((void **)a6 + 2);
              if ((unsigned __int16)v180 == (unsigned __int16)v181
                && WORD1(v180) == WORD1(v181)
                && ((v181 ^ v180) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_333;
              }
            }
            else if (re::areSameTranslatedVersion(this, a6, v44))
            {
LABEL_333:
              re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, (uint64_t)a4, (uint64_t *)this, a7);
LABEL_357:
              return *((unsigned char *)a1 + 64) == 0;
            }
            if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12))
            {
              re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, (uint64_t)a4, (uint64_t *)this, (uint64_t *)a6, a7);
            }
            else
            {
              uint64_t v182 = re::TypeInfo::name(this)[1];
              re::TypeInfo::name(a6);
            }
            goto LABEL_357;
          }
          long long v48 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(void *)this, v41);
          re::TypeMemberCollection::operator[](v48, 0, (uint64_t)v210);
          __int16 v49 = &a4[*(unsigned int *)(*(void *)&v210[16] + 24)];
          re::TypeRegistry::typeInfo(*(void **)v210, **(void **)&v210[16], &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
          if (this != a6)
          {
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v162 = **((void **)this + 2);
              uint64_t v163 = *((void *)a6 + 2);
              uint64_t v164 = *(void *)v163;
              if ((unsigned __int16)v162 == (unsigned __int16)*(void *)v163
                && WORD1(v162) == WORD1(v164)
                && ((v164 ^ v162) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_80;
              }
            }
            else
            {
              if (re::areSameTranslatedVersion(this, a6, v50)) {
                goto LABEL_80;
              }
              uint64_t v163 = *((void *)a6 + 2);
            }
            if (*(_DWORD *)(v163 + 88) == 1)
            {
              re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v202, *(void *)a6, v163);
              re::TypeMemberCollection::operator[]((uint64_t *)&v202, 0, (uint64_t)v207);
              re::TypeRegistry::typeInfo(v207[0], *v207[2], &__dst);
              re::TypeInfo::TypeInfo((uint64_t)v208, (uint64_t)&__dst.n128_i64[1]);
              if (!*((unsigned char *)a1 + 64)) {
                return (*((uint64_t (**)(re::internal **, char *, const re::TypeInfo *, unsigned __int8 *, void *, uint64_t *, uint64_t))*a1
              }
                        + 9))(a1, __s, a3, v49, v209, v208, a7);
              return 0;
            }
            goto LABEL_295;
          }
LABEL_80:
          if (*((unsigned char *)a1 + 64)) {
            return 0;
          }
          return (*((uint64_t (**)(re::internal **, char *, const re::TypeInfo *, unsigned __int8 *, void *, void *, uint64_t))*a1
                  + 9))(a1, __s, a3, v49, v209, v209, a7);
        }
        uint64_t v60 = (uint64_t)a1;
        uint64_t v61 = __s;
        __int16 v58 = this;
        int v59 = this;
      }
      re::serializeDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v60, v61, v39, 0, v58, v59, 1);
      return *((unsigned char *)a1 + 64) == 0;
    case 9:
      uint64_t v195 = re::TypeInfo::name(this)[1];
      long long v47 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_76;
    default:
      LOBYTE(v195) = *((unsigned char *)this + 12);
      long long v47 = "Invalid type category. Value = %d";
      goto LABEL_76;
  }
}

BOOL re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, char *a2, float *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    float v6 = *a3;
    uint64_t v7 = *(void *)(a1 + 168);
    if (fabsf(v6) == INFINITY)
    {
      if (v6 <= 0.0) {
        int v8 = "-Infinity";
      }
      else {
        int v8 = "Infinity";
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), v8);
    }
    else
    {
      double v9 = v6;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble(v7, v9);
    }
    uint64_t v10 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v10 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, char *a2, double *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), a2);
    }
    double v6 = *a3;
    uint64_t v7 = *(void *)(a1 + 168);
    if (fabs(v6) == INFINITY)
    {
      if (v6 <= 0.0) {
        int v8 = "-Infinity";
      }
      else {
        int v8 = "Infinity";
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), v8);
    }
    else
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble(v7, v6);
    }
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(uint64_t a1, char *__s, uint64_t *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    uint64_t v7 = *a3;
    if (!*a3)
    {
      int v8 = *(char **)(a1 + 168);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v8);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v8, (uint64_t)"", 0);
      uint64_t v7 = *a3;
    }
    LOBYTE(v10) = 8;
    DWORD1(v10) = 0;
    *((void *)&v10 + 1) = __s;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = v7;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v10);
  }
  return v3 == 0;
}

double re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(uint64_t a1, _OWORD *a2)
{
  if (*(void *)(a1 + 112) >= *(void *)(a1 + 152))
  {
    re::DynamicString::format((re::DynamicString *)"State stack overflow (max depth is %zu). Increase user default com.apple.maxSerializationDepth to allow deeper hierarchies.", (re::DynamicString *)&v7, *(void *)(a1 + 152));
    if (v7)
    {
      if (v8) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v9);
      }
    }
  }
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  *(void *)&double result = re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add(a1 + 96, (uint64_t)v6).n128_u64[0];
  return result;
}

__n128 re::DynamicArray<re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::State>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 48 * v5;
  __n128 result = *(__n128 *)a2;
  long long v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 32) = v13;
  *(__n128 *)uint64_t v11 = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, char *__s, unsigned char *a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    if (*a3)
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v7 = *(char **)(a1 + 168);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v7);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v7);
      uint64_t v6 = *a3;
    }
    LOBYTE(v9) = 3;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = __s;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = v6;
    return re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v9);
  }
  return result;
}

BOOL re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(uint64_t a1, char *__s, uint64_t *a3, int a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v9 = *a3;
    LOBYTE(v11) = 5;
    DWORD1(v11) = a4 & 0xFFFFFFDF;
    *((void *)&v11 + 1) = __s;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = v9;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v11);
  }
  return v4 == 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(v47, (unint64_t **)&v47[v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          uint64_t v31 = *(unint64_t **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(v47, (unsigned int **)&v47[v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          uint64_t v31 = *(unsigned int **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(v47, &v47[2 * v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          uint64_t v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int8 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(v47, &v47[2 * v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          uint64_t v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(v52, (__n128 *)&v52[v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        uint64_t v31 = &v52[v50];
        do
        {
          unint64_t v32 = **(void **)v30;
          if ((v32 & 0x8000000000000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unint64_t v32 = -(uint64_t)v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 19
            || (unsigned int v35 = (1233 * (64 - __clz(v32 | 1))) >> 12,
                int64_t v36 = v35 - (std::__itoa::__pow10_64[v35] > v32) + 1,
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(v52, (__n128 *)&v52[v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        uint64_t v31 = &v52[v50];
        do
        {
          unsigned int v32 = **(_DWORD **)v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(v52, &v52[2 * v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        uint64_t v31 = &v52[2 * v50];
        do
        {
          unsigned int v32 = **v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = v30[1];
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          v30 += 2;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL v24 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(v52, &v52[2 * v50], v32, 1);
        if (v50)
        {
          unint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v35 = *v33;
            if (*(unsigned char *)(*v33 + 8)) {
              uint64_t v36 = *(void *)(v35 + 16);
            }
            else {
              uint64_t v36 = v35 + 9;
            }
            v23(a1, v36, 0, v33[1], v47, v46, 0);
            v33 += 2;
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, void, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL v24 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>((unint64_t)v52, (__n128 *)&v52[2 * v50], v32, 1);
        if (v50)
        {
          unint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v36 = *v33;
            uint64_t v35 = v33[1];
            v33 += 2;
            v23(a1, *(void *)(v36 + 8), 0, v35, v47, v46, 0);
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, char *__s, uint64_t *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v7 = *a3;
    LOBYTE(v9) = 6;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = __s;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = v7;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v9);
  }
  return v3 == 0;
}

double re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(void *)(a1 + 168));
    LOBYTE(v5[0]) = 7;
    DWORD1(v5[0]) = a2 | 0x20;
    *((void *)&v5[0] + 1) = "entry";
    v5[1] = xmmword_23436C460;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    return re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, v5);
  }
  return result;
}

void std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(char *a1, char *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v3 = 126 - 2 * __clz((a2 - a1) >> 4);
  unint64_t v5 = a3;
  if (a2 == a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, a2, &v5, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(long long *a1, unint64_t **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(void **)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (unint64_t **)(v10 + 16);
            BOOL v41 = (unint64_t **)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(unint64_t **)(v43 + 16);
                  if (*v45 < **(void **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v79 = v39;
                uint64_t v80 = (unint64_t *)*((void *)a1 + 2);
                if (*v80 < **(void **)a1)
                {
                  uint64_t v81 = (unint64_t *)*((void *)a1 + 3);
                  uint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)uint64_t v82 = *((_OWORD *)v82 - 1);
                    int v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (*v80 < *v83);
                  *uint64_t v82 = v80;
                  v82[1] = v81;
                }
                uint64_t v39 = v79 + 2;
                a1 = (long long *)v79;
              }
              while (v79 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unint64_t **)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (unint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v55 = **v54;
                    unint64_t v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unint64_t v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = **v54;
                  }
                  __int16 v58 = (unint64_t **)(v10 + 16 * v52);
                  int v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (unint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v65 = **v54;
                        unint64_t v63 = *v54[2];
                        BOOL v64 = v65 >= v63;
                        if (v65 <= v63) {
                          unint64_t v65 = *v54[2];
                        }
                        if (v64) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                int v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(void **)v69 < **(void **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *int v68 = *(_OWORD *)v69;
                  int v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if ((unint64_t **)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 < **(void **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, (unint64_t **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 2, (unint64_t **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v14 - 1, v14, (unint64_t **)&a1[v13 + 1]);
            long long v84 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(&a1[v12 >> 1], (unint64_t **)a1, a2 - 2);
          }
          --a3;
          uint64_t v15 = *(unint64_t **)a1;
          unint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unint64_t **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unint64_t *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v86;
            unint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unint64_t *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          unint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unint64_t **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unint64_t *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unint64_t **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t a1, unint64_t **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      BOOL v8 = (unint64_t **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32));
      long long v9 = (unint64_t **)(a1 + 48);
      if ((unint64_t **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (unint64_t **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t **)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(long long *a1, unsigned int **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (unsigned int **)(v10 + 16);
            BOOL v41 = (unsigned int **)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(unsigned int **)(v43 + 16);
                  if (*v45 < **(_DWORD **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(_DWORD **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v79 = v39;
                uint64_t v80 = (unsigned int *)*((void *)a1 + 2);
                if (*v80 < **(_DWORD **)a1)
                {
                  uint64_t v81 = (unsigned int *)*((void *)a1 + 3);
                  uint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)uint64_t v82 = *((_OWORD *)v82 - 1);
                    int v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (*v80 < *v83);
                  *uint64_t v82 = v80;
                  v82[1] = v81;
                }
                uint64_t v39 = v79 + 2;
                a1 = (long long *)v79;
              }
              while (v79 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unsigned int **)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (unsigned int **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  __int16 v58 = (unsigned int **)(v10 + 16 * v52);
                  int v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (unsigned int **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v65 = **v54;
                        unsigned int v63 = *v54[2];
                        BOOL v64 = v65 >= v63;
                        if (v65 <= v63) {
                          unsigned int v65 = *v54[2];
                        }
                        if (v64) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                int v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(_DWORD **)v69 < **(_DWORD **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *int v68 = *(_OWORD *)v69;
                  int v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if ((unsigned int **)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(_DWORD **)v69;
                    if (**(_DWORD **)v74 < **(_DWORD **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(_DWORD **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unsigned int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, (unsigned int **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 2, (unsigned int **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v14 - 1, v14, (unsigned int **)&a1[v13 + 1]);
            long long v84 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(&a1[v12 >> 1], (unsigned int **)a1, a2 - 2);
          }
          --a3;
          unint64_t v15 = *(unsigned int **)a1;
          unsigned int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unsigned int **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unsigned int *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v86;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unsigned int *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          unsigned int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unsigned int **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unsigned int *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unsigned int **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      BOOL v8 = (unsigned int **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32));
      long long v9 = (unsigned int **)(a1 + 48);
      if ((unsigned int **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned int **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = (unsigned int **)a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(unsigned __int16 **a1, unsigned __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v88 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v88;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(unsigned __int16 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (unsigned __int16 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v80 = v39;
                uint64_t v81 = a1[2];
                if (*v81 < **a1)
                {
                  uint64_t v82 = a1[3];
                  int v83 = v80;
                  do
                  {
                    *(_OWORD *)int v83 = *((_OWORD *)v83 - 1);
                    long long v84 = *(v83 - 4);
                    v83 -= 2;
                  }
                  while (*v81 < *v84);
                  unsigned int *v83 = v81;
                  v83[1] = v82;
                }
                uint64_t v39 = v80 + 2;
                a1 = v80;
              }
              while (v80 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  __int16 v58 = &v10[2 * v52];
                  int v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v63 = **v54;
                        unsigned int v64 = *v54[2];
                        BOOL v65 = v63 >= v64;
                        unsigned int v66 = v63 <= v64 ? *v54[2] : **v54;
                        if (v65) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v66 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v66 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v67 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v68 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v69[2 * v68 + 2];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v67 && **v70 < *v70[2])
                  {
                    v70 += 2;
                    uint64_t v71 = v72;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 16;
                  if (v73 >= 17)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 4) - 2) >> 1;
                    double v75 = &v10[2 * v74];
                    uint64_t v76 = *v70;
                    if (**v75 < **v70)
                    {
                      uint64_t v77 = v70[1];
                      do
                      {
                        uint64_t v78 = v70;
                        uint64_t v70 = v75;
                        *(_OWORD *)uint64_t v78 = *(_OWORD *)v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        double v75 = &v10[2 * v74];
                      }
                      while (**v75 < *v76);
                      *uint64_t v70 = v76;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v85 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v85;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v87 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v87;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v86;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      BOOL v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      long long v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int16 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v88 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v88;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(unsigned __int8 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (unsigned __int8 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v80 = v39;
                uint64_t v81 = a1[2];
                if (*v81 < **a1)
                {
                  uint64_t v82 = a1[3];
                  int v83 = v80;
                  do
                  {
                    *(_OWORD *)int v83 = *((_OWORD *)v83 - 1);
                    long long v84 = *(v83 - 4);
                    v83 -= 2;
                  }
                  while (*v81 < *v84);
                  unsigned int *v83 = v81;
                  v83[1] = v82;
                }
                uint64_t v39 = v80 + 2;
                a1 = v80;
              }
              while (v80 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  __int16 v58 = &v10[2 * v52];
                  int v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v63 = **v54;
                        unsigned int v64 = *v54[2];
                        BOOL v65 = v63 >= v64;
                        unsigned int v66 = v63 <= v64 ? *v54[2] : **v54;
                        if (v65) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v66 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v66 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v67 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v68 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v69[2 * v68 + 2];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v67 && **v70 < *v70[2])
                  {
                    v70 += 2;
                    uint64_t v71 = v72;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 16;
                  if (v73 >= 17)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 4) - 2) >> 1;
                    double v75 = &v10[2 * v74];
                    uint64_t v76 = *v70;
                    if (**v75 < **v70)
                    {
                      uint64_t v77 = v70[1];
                      do
                      {
                        uint64_t v78 = v70;
                        uint64_t v70 = v75;
                        *(_OWORD *)uint64_t v78 = *(_OWORD *)v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        double v75 = &v10[2 * v74];
                      }
                      while (**v75 < *v76);
                      *uint64_t v70 = v76;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v85 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v85;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v87 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v87;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v86;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      BOOL v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      long long v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int8 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int8 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (void *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 < **(void **)v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)&a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (__n128 *)a2[-1].n128_u64);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(void **)(v43 + 16);
                  if (*v45 < **(void **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      uint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = (void *)*((void *)a1 + 2);
                if (*v79 < **(void **)a1)
                {
                  uint64_t v80 = (void *)*((void *)a1 + 3);
                  uint64_t v81 = v78;
                  do
                  {
                    __n128 *v81 = v81[-1];
                    uint64_t v82 = (void *)v81[-2].n128_u64[0];
                    --v81;
                  }
                  while (*v79 < *v82);
                  v81->n128_u64[0] = (unint64_t)v79;
                  v81->n128_u64[1] = (unint64_t)v80;
                }
                uint64_t v39 = v78 + 1;
                a1 = (long long *)v78;
              }
              while (&v78[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (uint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    uint64_t v55 = **v54;
                    uint64_t v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      uint64_t v57 = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v57 = **v54;
                  }
                  __int16 v58 = (uint64_t **)(v10 + 16 * v52);
                  int v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (uint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        uint64_t v65 = **v54;
                        uint64_t v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          uint64_t v65 = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        uint64_t v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(void **)v69 < **(void **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v87;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 < **(void **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (uint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, (uint64_t **)&a1[v12 >> 1], (uint64_t **)&a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 1, v14 - 2, (uint64_t **)&a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 2, (uint64_t **)&a1[v13 + 1], (uint64_t **)&a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v14 - 1, v14, (uint64_t **)&a1[v13 + 1]);
            long long v83 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(&a1[v12 >> 1], (uint64_t **)a1, (uint64_t **)&a2[-1]);
          }
          --a3;
          unsigned int v15 = *(uint64_t **)a1;
          uint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= *(void *)a2[-1].n128_u64[0])
          {
            __n128 v30 = (void **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (void **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v85;
            uint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          uint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (long long *)v21) {
              break;
            }
            unint64_t v23 = (void *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < (long long *)v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v84;
            uint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (void *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (long long *)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      BOOL v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          uint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (void *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    BOOL v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (_DWORD *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)&a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (__n128 *)a2[-1].n128_u64);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(_DWORD **)(v43 + 16);
                  if (*v45 < **(_DWORD **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      int v48 = **(_DWORD **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = (_DWORD *)*((void *)a1 + 2);
                if (*v79 < **(_DWORD **)a1)
                {
                  uint64_t v80 = (_DWORD *)*((void *)a1 + 3);
                  uint64_t v81 = v78;
                  do
                  {
                    __n128 *v81 = v81[-1];
                    uint64_t v82 = (_DWORD *)v81[-2].n128_u64[0];
                    --v81;
                  }
                  while (*v79 < *v82);
                  v81->n128_u64[0] = (unint64_t)v79;
                  v81->n128_u64[1] = (unint64_t)v80;
                }
                uint64_t v39 = v78 + 1;
                a1 = (long long *)v78;
              }
              while (&v78[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (int **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    int v55 = **v54;
                    int v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      int v57 = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    int v57 = **v54;
                  }
                  __int16 v58 = (int **)(v10 + 16 * v52);
                  int v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (int **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        int v65 = **v54;
                        int v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          int v65 = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        int v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(_DWORD **)v69 < **(_DWORD **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v87;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(_DWORD **)v69;
                    if (**(_DWORD **)v74 < **(_DWORD **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(_DWORD **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, (int **)&a1[v12 >> 1], (int **)&a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 1, v14 - 2, (int **)&a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 2, (int **)&a1[v13 + 1], (int **)&a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v14 - 1, v14, (int **)&a1[v13 + 1]);
            long long v83 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(&a1[v12 >> 1], (int **)a1, (int **)&a2[-1]);
          }
          --a3;
          uint64_t v15 = *(int **)a1;
          int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            __n128 v30 = (_DWORD **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (_DWORD **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (_DWORD *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v85;
            int v34 = *v15;
            do
            {
              uint64_t v35 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (_DWORD *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (long long *)v21) {
              break;
            }
            unint64_t v23 = (_DWORD *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = (_DWORD *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < (long long *)v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v84;
            int v25 = *v15;
            do
            {
              unint64_t v26 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (_DWORD *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (long long *)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(_DWORD **)(a2 - 16) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      BOOL v8 = (_DWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(_DWORD **)v9;
    if (**(_DWORD **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      int v16 = (void *)a1;
LABEL_12:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    BOOL v8 = (_DWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(__int16 **a1, __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      int v48 = **(__int16 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (__int16 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = a1[2];
                if (*v79 < **a1)
                {
                  uint64_t v80 = a1[3];
                  uint64_t v81 = v78;
                  do
                  {
                    *(_OWORD *)uint64_t v81 = *((_OWORD *)v81 - 1);
                    uint64_t v82 = *(v81 - 4);
                    v81 -= 2;
                  }
                  while (*v79 < *v82);
                  __n128 *v81 = v79;
                  v81[1] = v80;
                }
                uint64_t v39 = v78 + 2;
                a1 = v78;
              }
              while (v78 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    int v55 = **v54;
                    int v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      LOWORD(v57) = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    LOWORD(v57) = **v54;
                  }
                  __int16 v58 = &v10[2 * v52];
                  int v59 = *v58;
                  if (**v58 <= (__int16)v57)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      __int16 v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        int v65 = **v54;
                        int v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          LOWORD(v65) = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        LOWORD(v65) = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (*v59 <= (__int16)v65);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = v10;
                do
                {
                  uint64_t v69 = &v68[2 * v67 + 2];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **v69 < *v69[2])
                  {
                    v69 += 2;
                    uint64_t v70 = v71;
                  }
                  *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if (v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v87;
                  uint64_t v72 = (char *)v69 - (char *)v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = &v10[2 * v73];
                    double v75 = *v69;
                    if (**v74 < **v69)
                    {
                      uint64_t v76 = v69[1];
                      do
                      {
                        uint64_t v77 = v69;
                        uint64_t v69 = v74;
                        *(_OWORD *)uint64_t v77 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = &v10[2 * v73];
                      }
                      while (**v74 < *v75);
                      *uint64_t v69 = v75;
                      v69[1] = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v83 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          int v15 = *a1;
          int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v85;
            int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v84;
            int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      BOOL v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(__int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (__int16 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      int v16 = a1;
LABEL_12:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 2;
    int v95 = a2 - 4;
    long long v96 = a2;
    long long v93 = a2 - 6;
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          int v11 = v96;
          uint64_t v12 = (char *)v96 - (char *)v10;
          uint64_t v13 = ((char *)v96 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v35 = v96 - 2;
                if (re::DynamicString::operator<(*(v96 - 2), *v10))
                {
                  long long v100 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v35;
                  *(_OWORD *)uint64_t v35 = v100;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v9);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v9);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            uint64_t v36 = v10 + 2;
            BOOL v38 = v10 == v96 || v36 == v96;
            if (a4)
            {
              if (!v38)
              {
                uint64_t v39 = 0;
                uint64_t v40 = v10;
                do
                {
                  BOOL v41 = v36;
                  uint64_t v42 = v40[2];
                  if (re::DynamicString::operator<(v42, *v40))
                  {
                    uint64_t v43 = v40[3];
                    uint64_t v44 = v39;
                    while (1)
                    {
                      uint64_t v45 = (char *)v10 + v44;
                      *(_OWORD *)((char *)v10 + v44 + 16) = *(_OWORD *)((char *)v10 + v44);
                      if (!v44) {
                        break;
                      }
                      v44 -= 16;
                      if ((re::DynamicString::operator<(v42, *((void *)v45 - 2)) & 1) == 0)
                      {
                        uint64_t v46 = (uint64_t *)((char *)v10 + v44 + 16);
                        goto LABEL_77;
                      }
                    }
                    uint64_t v46 = v10;
LABEL_77:
                    *uint64_t v46 = v42;
                    v46[1] = v43;
                  }
                  uint64_t v36 = v41 + 2;
                  v39 += 16;
                  uint64_t v40 = v41;
                }
                while (v41 + 2 != v96);
              }
            }
            else if (!v38)
            {
              do
              {
                long long v85 = v36;
                uint64_t v86 = a1[2];
                if (re::DynamicString::operator<(v86, *a1))
                {
                  uint64_t v87 = a1[3];
                  long long v88 = v85;
                  do
                  {
                    long long v89 = v88 - 2;
                    *(_OWORD *)long long v88 = *((_OWORD *)v88 - 1);
                    char v90 = re::DynamicString::operator<(v86, *(v88 - 4));
                    long long v88 = v89;
                  }
                  while ((v90 & 1) != 0);
                  *long long v89 = v86;
                  v89[1] = v87;
                }
                uint64_t v36 = v85 + 2;
                a1 = v85;
              }
              while (v85 + 2 != v96);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != v96)
            {
              unint64_t v91 = (char *)v96 - (char *)v10;
              int64_t v47 = (unint64_t)(v13 - 2) >> 1;
              int64_t v48 = v47;
              do
              {
                int64_t v49 = v48;
                if (v47 >= v48)
                {
                  uint64_t v50 = (2 * v48) | 1;
                  int64_t v51 = &a1[2 * v50];
                  uint64_t v52 = 2 * v48 + 2;
                  if (v52 < v13)
                  {
                    uint64_t v53 = *v51;
                    int64_t v54 = v48;
                    uint64_t v55 = v51[2];
                    int v56 = re::DynamicString::operator<(*v51, v55);
                    BOOL v57 = v56 == 0;
                    if (v56) {
                      uint64_t v58 = v55;
                    }
                    else {
                      uint64_t v58 = v53;
                    }
                    int64_t v49 = v54;
                    int64_t v47 = (unint64_t)(v13 - 2) >> 1;
                    if (!v57)
                    {
                      v51 += 2;
                      uint64_t v50 = v52;
                    }
                  }
                  else
                  {
                    uint64_t v58 = *v51;
                  }
                  int v59 = &a1[2 * v49];
                  uint64_t v60 = *v59;
                  if ((re::DynamicString::operator<(v58, *v59) & 1) == 0)
                  {
                    uint64_t v92 = v59[1];
                    int64_t v94 = v49;
                    do
                    {
                      uint64_t v61 = v59;
                      int v59 = v51;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v51;
                      if (v47 < v50) {
                        break;
                      }
                      uint64_t v62 = (2 * v50) | 1;
                      int64_t v51 = &a1[2 * v62];
                      uint64_t v63 = 2 * v50 + 2;
                      if (v63 < v13)
                      {
                        uint64_t v64 = *v51;
                        uint64_t v65 = v51[2];
                        int v66 = re::DynamicString::operator<(*v51, v65);
                        BOOL v67 = v66 == 0;
                        if (v66) {
                          uint64_t v68 = v65;
                        }
                        else {
                          uint64_t v68 = v64;
                        }
                        if (!v67) {
                          v51 += 2;
                        }
                        int64_t v47 = (unint64_t)(v13 - 2) >> 1;
                        uint64_t v50 = v67 ? v62 : v63;
                      }
                      else
                      {
                        uint64_t v68 = *v51;
                        uint64_t v50 = (2 * v50) | 1;
                      }
                    }
                    while (!re::DynamicString::operator<(v68, v60));
                    int64_t v49 = v94;
                    uint64_t *v59 = v60;
                    v59[1] = v92;
                  }
                }
                int64_t v48 = v49 - 1;
              }
              while (v49);
              uint64_t v69 = v91 >> 4;
              uint64_t v70 = v96;
              do
              {
                uint64_t v71 = 0;
                long long v101 = *(_OWORD *)a1;
                uint64_t v72 = v69 - 2;
                if (v69 < 2) {
                  uint64_t v72 = v69 - 1;
                }
                uint64_t v73 = v72 >> 1;
                unint64_t v74 = a1;
                do
                {
                  double v75 = &v74[2 * v71 + 2];
                  uint64_t v76 = (2 * v71) | 1;
                  uint64_t v77 = 2 * v71 + 2;
                  if (v77 < v69 && re::DynamicString::operator<(*v75, v74[2 * v71 + 4]))
                  {
                    v75 += 2;
                    uint64_t v76 = v77;
                  }
                  *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
                  unint64_t v74 = v75;
                  uint64_t v71 = v76;
                }
                while (v76 <= v73);
                v70 -= 2;
                if (v75 == v70)
                {
                  *(_OWORD *)double v75 = v101;
                }
                else
                {
                  *(_OWORD *)double v75 = *(_OWORD *)v70;
                  *(_OWORD *)uint64_t v70 = v101;
                  uint64_t v78 = (char *)v75 - (char *)a1 + 16;
                  if (v78 >= 17)
                  {
                    unint64_t v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                    uint64_t v80 = &a1[2 * v79];
                    uint64_t v81 = *v75;
                    if (re::DynamicString::operator<(*v80, *v75))
                    {
                      uint64_t v82 = v75[1];
                      do
                      {
                        long long v83 = v75;
                        double v75 = v80;
                        *(_OWORD *)long long v83 = *(_OWORD *)v80;
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        uint64_t v80 = &a1[2 * v79];
                      }
                      while ((re::DynamicString::operator<(*v80, v81) & 1) != 0);
                      *double v75 = v81;
                      v75[1] = v82;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          int v15 = &v10[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15, v10, v9);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v15, v9);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 2, v15 - 2, v95);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 4, &v10[2 * v14 + 2], v93);
            int v11 = v96;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15 - 2, v15, &v10[2 * v14 + 2]);
            long long v97 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v15;
            *(_OWORD *)int v15 = v97;
          }
          --a3;
          uint64_t v16 = *v10;
          if (a4 & 1) != 0 || (re::DynamicString::operator<(*(v10 - 2), *v10)) {
            break;
          }
          uint64_t v28 = v10[1];
          if (re::DynamicString::operator<(v16, *v9))
          {
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v16, v29) & 1) == 0);
          }
          else
          {
            __n128 v30 = v10 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= v96) {
                break;
              }
              v30 += 2;
            }
            while (!re::DynamicString::operator<(v16, *v10));
          }
          unint64_t v31 = v96;
          if (v10 < v96)
          {
            unint64_t v31 = v96;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            long long v99 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v99;
            do
            {
              uint64_t v33 = v10[2];
              v10 += 2;
            }
            while (!re::DynamicString::operator<(v16, v33));
            do
            {
              uint64_t v34 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v34) & 1) != 0);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v16;
          *(v10 - 1) = v28;
        }
        uint64_t v17 = 0;
        uint64_t v18 = a1[1];
        do
        {
          char v19 = re::DynamicString::operator<(a1[v17 + 2], v16);
          v17 += 2;
        }
        while ((v19 & 1) != 0);
        BOOL v20 = &a1[v17];
        uint64_t v21 = v11;
        if (v17 == 2)
        {
          uint64_t v21 = v11;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while ((re::DynamicString::operator<(v23, v16) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (!re::DynamicString::operator<(v22, v16));
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v98 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v98;
            do
            {
              uint64_t v25 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v25, v16) & 1) != 0);
            do
            {
              uint64_t v26 = *(v24 - 2);
              v24 -= 2;
            }
            while (!re::DynamicString::operator<(v26, v16));
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v96))
      {
        break;
      }
      if (!v27) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v27) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (re::DynamicString::operator<(*(a2 - 2), *a1))
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (re::DynamicString::operator<(*v9, *v8))
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        int v15 = (char *)a1 + v14;
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if ((re::DynamicString::operator<(v12, *((void *)v15 + 2)) & 1) == 0)
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                BOOL v38 = (void *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 >> 1 < **(void **)v10 >> 1)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (void **)(v10 + 16), &a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(void **)(v43 + 16);
                  if (*v45 >> 1 < **(void **)v43 >> 1)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >> 1 >= v48 >> 1)
                      {
                        int64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                unint64_t v79 = (unint64_t)v39;
                uint64_t v80 = *(void **)(a1 + 16);
                if (*v80 >> 1 < **(void **)a1 >> 1)
                {
                  uint64_t v81 = *(void *)(a1 + 24);
                  unint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)unint64_t v82 = *(_OWORD *)(v82 - 16);
                    long long v83 = *(void **)(v82 - 32);
                    v82 -= 16;
                  }
                  while (*v80 >> 1 < *v83 >> 1);
                  *(void *)unint64_t v82 = v80;
                  *(void *)(v82 + 8) = v81;
                }
                uint64_t v39 = (__n128 *)(v79 + 16);
                a1 = v79;
              }
              while ((__n128 *)(v79 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  int64_t v54 = (unint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v55 = **v54 >> 1;
                    unint64_t v57 = *v54[2];
                    BOOL v56 = v55 >= v57 >> 1;
                    if (v55 < v57 >> 1) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v57 = **v54;
                    }
                    if (!v56) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = **v54;
                  }
                  uint64_t v58 = (unint64_t **)(v10 + 16 * v52);
                  int v59 = *v58;
                  if (v57 >> 1 >= **v58 >> 1)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      int64_t v54 = (unint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v63 = **v54;
                        if (v63 >> 1 >= *v54[2] >> 1)
                        {
                          uint64_t v53 = v62;
                        }
                        else
                        {
                          unint64_t v63 = *v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v63 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v63 >> 1 >= *v59 >> 1);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v64 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v65 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v66 = v64 - 2;
                if (v64 < 2) {
                  uint64_t v66 = v64 - 1;
                }
                uint64_t v67 = v66 >> 1;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v65 + 1];
                  uint64_t v70 = (2 * v65) | 1;
                  uint64_t v71 = 2 * v65 + 2;
                  if (v71 < v64 && **(void **)v69 >> 1 < **(void **)(v69 + 16) >> 1)
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v65 = v70;
                }
                while (v70 <= v67);
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 >> 1 < **(void **)v69 >> 1)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 >> 1 < *v75 >> 1);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16 * (v12 >> 1)), &a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 16), (void **)v14 - 2, &a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 32), (void **)(a1 + 16 + 16 * v13), &a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v14 - 1, (void **)v14, (void **)(a1 + 16 + 16 * v13));
            long long v84 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v14;
            long long *v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 16 * (v12 >> 1)), (void **)a1, &a2[-1]);
          }
          --a3;
          int v15 = *(void **)a1;
          unint64_t v16 = **(void **)a1 >> 1;
          if ((a4 & 1) != 0 || v16 > **(void **)(a1 - 16) >> 1) {
            break;
          }
          if (v16 >= *(void *)a2[-1].n128_u64[0] >> 1)
          {
            unint64_t v30 = a1 + 16;
            do
            {
              unint64_t v10 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 16;
            }
            while (v16 >= **(void **)v10 >> 1);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29 >> 1);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32 >> 1);
          }
          uint64_t v33 = *(void *)(a1 + 8);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v86;
            unint64_t v34 = *v15 >> 1;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35 >> 1);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36 >> 1);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 8);
        do
        {
          unint64_t v19 = **(void **)(a1 + v17 + 16);
          v17 += 16;
        }
        while (v16 > v19 >> 1);
        unint64_t v20 = a1 + v17;
        uint64_t v21 = (long long *)a2;
        if (v17 == 16)
        {
          uint64_t v21 = (long long *)a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            uint64_t v23 = (void *)*((void *)v21-- - 2);
          }
          while (v16 <= *v23 >> 1);
        }
        else
        {
          do
            uint64_t v22 = (void *)*((void *)v21-- - 2);
          while (v16 <= *v22 >> 1);
        }
        unint64_t v10 = a1 + v17;
        if (v20 < (unint64_t)v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unint64_t v25 = *v15 >> 1;
            do
            {
              uint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v25 > *v26 >> 1);
            do
              BOOL v27 = (void *)*((void *)v24-- - 2);
            while (v25 <= *v27 >> 1);
          }
          while (v10 < (unint64_t)v24);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) >> 1 < **(void **)a1 >> 1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      BOOL v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 >> 1 < **v8 >> 1)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >> 1 >= v15 >> 1)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    BOOL v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  while (2)
  {
    long long v86 = a2 - 32;
    long long v88 = a2 - 16;
    long long v84 = a2 - 48;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = (a2 - v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v38 = *((void *)a2 - 2);
                uint64_t v37 = a2 - 16;
                if ((*a3)(v38, *(void *)a1))
                {
                  long long v99 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v99;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, v88, a3);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, v88, a3);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, v88, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 383)
          {
            uint64_t v39 = a1 + 16;
            BOOL v41 = a1 == a2 || v39 == a2;
            if (a5)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = a1;
                do
                {
                  uint64_t v44 = *((void *)v43 + 2);
                  uint64_t v45 = *(void *)v43;
                  unint64_t v43 = v39;
                  if ((*a3)(v44, v45))
                  {
                    long long v93 = *(_OWORD *)v43;
                    uint64_t v46 = *(void *)v43;
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)&a1[v47 + 16] = *(_OWORD *)&a1[v47];
                      if (!v47) {
                        break;
                      }
                      char v48 = (*a3)(v46, *(void *)&a1[v47 - 16]);
                      v47 -= 16;
                      if ((v48 & 1) == 0)
                      {
                        int64_t v49 = &a1[v47 + 16];
                        goto LABEL_78;
                      }
                    }
                    int64_t v49 = a1;
LABEL_78:
                    *(_OWORD *)int64_t v49 = v93;
                  }
                  uint64_t v39 = v43 + 16;
                  v42 += 16;
                }
                while (v43 + 16 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = *((void *)a1 + 2);
                uint64_t v79 = *(void *)a1;
                a1 = v39;
                if ((*a3)(v78, v79))
                {
                  long long v95 = *(_OWORD *)a1;
                  uint64_t v80 = *(void *)a1;
                  uint64_t v81 = a1;
                  do
                  {
                    unint64_t v82 = v81 - 16;
                    *(_OWORD *)uint64_t v81 = *((_OWORD *)v81 - 1);
                    char v83 = (*a3)(v80, *((void *)v81 - 4));
                    uint64_t v81 = v82;
                  }
                  while ((v83 & 1) != 0);
                  *(_OWORD *)unint64_t v82 = v95;
                }
                uint64_t v39 = a1 + 16;
              }
              while (a1 + 16 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              unint64_t v85 = v13;
              long long v87 = a2;
              int64_t v50 = (unint64_t)(v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  int64_t v54 = &a1[16 * v53];
                  if (2 * v51 + 2 < v14 && (*a3)(*(void *)v54, *((void *)v54 + 2)))
                  {
                    v54 += 16;
                    uint64_t v53 = 2 * v52 + 2;
                  }
                  unint64_t v55 = &a1[16 * v52];
                  if (((*a3)(*(void *)v54, *(void *)v55) & 1) == 0)
                  {
                    int64_t v94 = v52;
                    long long v89 = *(_OWORD *)v55;
                    uint64_t v56 = *(void *)v55;
                    do
                    {
                      unint64_t v57 = v55;
                      unint64_t v55 = v54;
                      *(_OWORD *)unint64_t v57 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v58 = (2 * v53) | 1;
                      int64_t v54 = &a1[16 * v58];
                      uint64_t v59 = 2 * v53 + 2;
                      if (v59 < v14 && (*a3)(*(void *)v54, *((void *)v54 + 2)))
                      {
                        v54 += 16;
                        uint64_t v58 = v59;
                      }
                      uint64_t v53 = v58;
                    }
                    while (!(*a3)(*(void *)v54, v56));
                    *(_OWORD *)unint64_t v55 = v89;
                    int64_t v52 = v94;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v60 = v87;
              uint64_t v61 = v85 >> 4;
              do
              {
                uint64_t v62 = 0;
                long long v100 = *(_OWORD *)a1;
                uint64_t v63 = v61 - 2;
                if (v61 < 2) {
                  uint64_t v63 = v61 - 1;
                }
                uint64_t v64 = v63 >> 1;
                uint64_t v65 = a1;
                do
                {
                  uint64_t v66 = (uint64_t *)&v65[16 * v62 + 16];
                  uint64_t v67 = (2 * v62) | 1;
                  uint64_t v68 = 2 * v62 + 2;
                  if (v68 < v61 && (*a3)(*v66, *(void *)&v65[16 * v62 + 32]))
                  {
                    v66 += 2;
                    uint64_t v67 = v68;
                  }
                  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
                  uint64_t v65 = (char *)v66;
                  uint64_t v62 = v67;
                }
                while (v67 <= v64);
                uint64_t v69 = (uint64_t *)(v60 - 16);
                if (v66 == v69)
                {
                  uint64_t v70 = v69;
                  *(_OWORD *)uint64_t v66 = v100;
                  uint64_t v72 = v61 - 1;
                }
                else
                {
                  *(_OWORD *)uint64_t v66 = *(_OWORD *)v69;
                  uint64_t v70 = v69;
                  *(_OWORD *)uint64_t v69 = v100;
                  uint64_t v71 = (char *)v66 - a1 + 16;
                  uint64_t v72 = v61 - 1;
                  if (v71 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v71 >> 4) - 2) >> 1;
                    unint64_t v74 = &a1[16 * v73];
                    if ((*a3)(*(void *)v74, *v66))
                    {
                      long long v90 = *(_OWORD *)v66;
                      uint64_t v75 = *v66;
                      do
                      {
                        uint64_t v76 = v66;
                        uint64_t v66 = (uint64_t *)v74;
                        *(_OWORD *)uint64_t v76 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = &a1[16 * v73];
                      }
                      while (((*a3)(*(void *)v74, v75) & 1) != 0);
                      *(_OWORD *)uint64_t v66 = v90;
                    }
                  }
                }
                BOOL v77 = v61 <= 2;
                uint64_t v61 = v72;
                uint64_t v60 = (char *)v70;
              }
              while (!v77);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unint64_t v16 = &a1[16 * ((unint64_t)v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v16, a1, v88, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v16, v88, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)a1 + 2, (void *)v16 - 2, v86, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)a1 + 4, &a1[16 * v15 + 16], v84, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)v16 - 2, v16, &a1[16 * v15 + 16], a3);
            long long v96 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)unint64_t v16 = v96;
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)(*((void *)a1 - 2), *(void *)a1)) {
            break;
          }
          long long v92 = *(_OWORD *)a1;
          uint64_t v29 = *(void *)a1;
          if ((*a3)(*(void *)a1, *(void *)v88))
          {
            unint64_t v12 = a1;
            do
            {
              uint64_t v30 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (((*a3)(v29, v30) & 1) == 0);
          }
          else
          {
            unint64_t v31 = a1 + 16;
            do
            {
              unint64_t v12 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 16;
            }
            while (!(*a3)(v29, *(void *)v12));
          }
          uint64_t v32 = a2;
          if (v12 < a2)
          {
            uint64_t v32 = a2;
            do
            {
              uint64_t v33 = *((void *)v32 - 2);
              v32 -= 16;
            }
            while (((*a3)(v29, v33) & 1) != 0);
          }
          while (v12 < v32)
          {
            long long v98 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v32;
            *(_OWORD *)uint64_t v32 = v98;
            do
            {
              uint64_t v34 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (!(*a3)(v29, v34));
            do
            {
              uint64_t v35 = *((void *)v32 - 2);
              v32 -= 16;
            }
            while (((*a3)(v29, v35) & 1) != 0);
          }
          uint64_t v36 = v12 - 16;
          BOOL v5 = v12 - 16 >= a1;
          BOOL v6 = v12 - 16 == a1;
          if (v12 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)v36;
          }
          a5 = 0;
          *(_OWORD *)uint64_t v36 = v92;
        }
        uint64_t v17 = 0;
        long long v91 = *(_OWORD *)a1;
        uint64_t v18 = *(void *)a1;
        do
        {
          char v19 = (*a3)(*(void *)&a1[v17 + 16], v18);
          v17 += 16;
        }
        while ((v19 & 1) != 0);
        unint64_t v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 16)
        {
          do
          {
            if (v20 >= a2) {
              break;
            }
            uint64_t v23 = *((void *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *((void *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v22, v18));
        }
        unint64_t v12 = &a1[v17];
        if (v20 < a2)
        {
          BOOL v24 = a2;
          do
          {
            long long v97 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v97;
            do
            {
              uint64_t v25 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (((*a3)(v25, v18) & 1) != 0);
            do
            {
              uint64_t v26 = *((void *)v24 - 2);
              v24 -= 16;
            }
            while (!(*a3)(v26, v18));
          }
          while (v12 < v24);
        }
        BOOL v27 = v12 - 16;
        if (v12 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)v27;
        }
        *(_OWORD *)BOOL v27 = v91;
        BOOL v5 = v20 >= a2;
        a2 = v21;
        if (v5) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v12 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v12 - 16, a3);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v12, v21, a3))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v12 - 16;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *(void *)a1))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)BOOL v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      int v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *(void *)v10))
    {
      long long v18 = *(_OWORD *)v11;
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = v12;
      while (1)
      {
        *(_OWORD *)&a1[v15 + 48] = *(_OWORD *)&a1[v15 + 32];
        if (v15 == -32) {
          break;
        }
        char v16 = (*a3)(v14, *(void *)&a1[v15 + 16]);
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          uint64_t v17 = &a1[v15 + 48];
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v17 = v18;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

BOOL re::serializeDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (long long v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    uint64_t v24 = 0;
    BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, &v24);
    if (!result) {
      return result;
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(a4 + 8);
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  uint64_t v24 = v22;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, &v24);
  if (result)
  {
    if (v22)
    {
      if (*(unsigned char *)(a4 + 8)) {
        uint64_t v23 = *(void *)(a4 + 16);
      }
      else {
        uint64_t v23 = a4 + 9;
      }
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_27:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v19);
  if (v19[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v20);
    if (*(_DWORD *)(v17 + 88) || (re::TypeRegistry::typeInfo(v16[0], *(void *)(v17 + 72), v21), v21[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, v16, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v16, *a3, a3[2]);
  if (v18)
  {
    for (unint64_t i = 0; i < v18; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v16, i, (uint64_t)&v14);
      if (*(unsigned char *)(v15 + 28))
      {
        uint64_t v10 = *(void *)(v15 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v15 + 32);
        uint64_t v12 = *(unsigned int *)(v15 + 24);
        re::TypeRegistry::typeInfo(v14, *(void *)v15, v21);
        uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v22);
        if (!a1[64]) {
          uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, a2 + v12, v13, v13, a4);
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v49);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v45);
  if (v45[0])
  {
    if (!v49[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v46)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
    }
    if (v50 == v46)
    {
      uint64_t v18 = *v52;
      uint64_t v19 = *v48;
      if ((unsigned __int16)*v52 == (unsigned __int16)*v48)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v50, (const re::TypeInfo *)&v46, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, &v50, a5);
      goto LABEL_15;
    }
    if (v51 == v47)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, &v50, &v46, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v50)[1];
      re::TypeInfo::name((re::TypeInfo *)&v46);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v42, *a4, a4[2]);
  if (v43)
  {
    for (unint64_t i = 0; i < v43; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v42, i, (uint64_t)v40);
      if (*(unsigned char *)(v41 + 28))
      {
        uint64_t v29 = *(void *)(v41 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v41 + 32);
        unint64_t v31 = *(re **)(*a4 + 856);
        if (!v31
          || (unint64_t v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v40),
              v31 == -1))
        {
          uint64_t v33 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v54 = v34;
            __int16 v55 = 2080;
            uint64_t v56 = v29;
            _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          uint64_t v35 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v54 + 4);
          uint64_t result = re::internal::translateType(v35, (const re::TypeRegistry *)v38, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v44, (int)v31, (uint64_t)v38);
          uint64_t v32 = *(unsigned int *)(v39 + 24);
          re::TypeRegistry::typeInfo(v38[0], *(void *)v39, buf);
          re::TypeInfo::TypeInfo((uint64_t)v37, (uint64_t)&v54 + 4);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v36, (uint64_t)&v54 + 4);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, a2 + v32, v37, v36, a5);
          }
        }
      }
    }
  }
  return result;
}

BOOL re::serializeBool<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeChar<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI8<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI16<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI32<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeI64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unint64_t *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU8<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU16<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int16 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU32<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeU64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, rapidjson::internal **a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (rapidjson::internal **)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
}

BOOL re::serializeFloat<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (float *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, v13);
}

BOOL re::serializeDouble<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (double *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, v13);
}

uint64_t re::serializeCString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_18:
      return 0;
    }
    uint64_t v18 = **((void **)this + 2);
    uint64_t v19 = **((void **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19) {
      goto LABEL_18;
    }
    BOOL v21 = WORD1(v18) == WORD1(v19);
    uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    BOOL v21 = v21 && v20 == 0;
    if (!v21) {
      goto LABEL_18;
    }
  }
LABEL_4:
  if (a7)
  {
    LODWORD(v22) = 0;
    int v13 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, __s, (int *)&v22);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_22;
  }
  uint64_t v16 = *a4;
  int v23 = 2 * (*a4 != 0);
  uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, __s, &v23);
  if (!result) {
    return result;
  }
  if (v16)
  {
    if (*a4)
    {
      size_t v17 = strlen(*a4);
      size_t v22 = v17;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, (uint64_t *)&v22))
      {
        if (v17) {
        goto LABEL_20;
        }
      }
    }
    else
    {
      size_t v22 = 0;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, (uint64_t *)&v22))
      {
LABEL_20:
      }
    }
  }
  uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_22:
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  size_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (uint64_t v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    size_t v22 = 0;
    BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, (uint64_t *)&v22);
    if (!result) {
      return result;
    }
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    size_t v21 = strlen(*(const char **)(a4 + 8));
    size_t v22 = v21;
    BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, (uint64_t *)&v22);
    if (!result) {
      return result;
    }
    if (v21) {
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
  }
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, uint64_t a4, unint64_t **this, unint64_t **a6, int a7)
{
  if (this != a6)
  {
    if (*this != *a6)
    {
      if (re::areSameTranslatedVersion((re *)this, (const re::TypeInfo *)a6, a3)) {
        goto LABEL_4;
      }
LABEL_26:
      return 0;
    }
    uint64_t v21 = *this[2];
    uint64_t v22 = *a6[2];
    if ((unsigned __int16)v21 != (unsigned __int16)v22) {
      goto LABEL_26;
    }
    BOOL v24 = WORD1(v21) == WORD1(v22);
    uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
    BOOL v24 = v24 && v23 == 0;
    if (!v24) {
      goto LABEL_26;
    }
  }
LABEL_4:
  if (!a7)
  {
    unint64_t v14 = *this[2];
    uint64_t v30 = (uint64_t)*this;
    unint64_t v31 = v14;
    LODWORD(v32) = -1;
    v34[0] = 0x258C98EAAF29A10ALL;
    v34[1] = (uint64_t)"CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[](&v30, v34);
    re::StringID::destroyString((re::StringID *)v34);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = v18;
    unint64_t v31 = 0;
    re::DynamicString::setCapacity(&v30, 0);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v16 + 72))(v17, v16, a4, &v30))
    {
      if (v31) {
        uint64_t v19 = v31 >> 1;
      }
      else {
        uint64_t v19 = v31 >> 1;
      }
      v34[0] = v19;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, v34))
      {
        if (v19)
        {
          if (v31) {
            uint64_t v20 = v32;
          }
          else {
            uint64_t v20 = (char *)&v31 + 1;
          }
        }
        if (v30)
        {
          if (v31) {
            (*(void (**)(void))(*(void *)v30 + 40))();
          }
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name((re::TypeInfo *)this);
    }
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    return 0;
  }
  uint64_t v30 = 0;
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, __s, &v30);
  if (result)
  {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, char *__s, int *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40)) {
    return v3 == 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
  }
  int v7 = *a3;
  if ((*a3 - 1) < 2)
  {
LABEL_7:
    LOBYTE(v10) = 9;
    DWORD1(v10) = 0;
    *((void *)&v10 + 1) = __s;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    BOOL v12 = v7 != 0;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v10);
    return v3 == 0;
  }
  if (!v7)
  {
    BOOL v8 = *(char **)(a1 + 168);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::PrettyPrefix(v8);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v8);
    int v7 = *a3;
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)__s, "assertion failure: '%s' (%s:line %i) Unexpected PointerEncoding.", "!\"Unreachable code\"", "beginPointer", 1054);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(unsigned char *a1, char *__s, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_14:
      return 0;
    }
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 != (unsigned __int16)v16) {
      goto LABEL_14;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_14;
    }
  }
LABEL_4:
  if (!*a4)
  {
    LODWORD(v25) = 0;
    uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
    int v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), __s, (int *)&v25);
    uint64_t result = 0;
    if (!v22) {
      return result;
    }
    goto LABEL_22;
  }
  if (!a1[336]
    || (uint64_t v25 = *a4,
        (uint64_t v11 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a1 + 344), (uint64_t *)&v25)) == 0))
  {
    int v24 = 2;
    if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), __s, &v24))
    {
      uint64_t v19 = (const char *)strlen(*a4);
      uint64_t v25 = v19;
      uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 24), __s, (uint64_t *)&v25);
      if (!result) {
        return result;
      }
      if (v19) {
      uint64_t v20 = *a4;
      }
      uint64_t v21 = **((void **)this + 2);
      *(void *)&long long v23 = *(void *)this;
      *((void *)&v23 + 1) = v21;
      re::internal::SharedObjectGraph::addObject((uint64_t)(a1 + 336), (uint64_t)v20, &v23);
      return a1[64] == 0;
    }
    return 0;
  }
  int v12 = *v11;
  int v24 = 1;
  LODWORD(v25) = v12;
  uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), __s, &v24);
  if (!result) {
    return result;
  }
  re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((uint64_t)(a1 + 24), (unsigned int *)&v25);
LABEL_22:
  return a1[64] == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v28 = **((void **)this + 2);
    uint64_t v29 = **((void **)a6 + 2);
    if ((unsigned __int16)v28 == (unsigned __int16)v29)
    {
      BOOL v31 = WORD1(v28) == WORD1(v29);
      uint64_t v30 = (v29 ^ v28) & 0xFFFFFF00000000;
      BOOL v31 = v31 && v30 == 0;
      if (v31) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    int v15 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v32 = re::TypeInfo::name(this), v33 = re::TypeInfo::name(a6), !re::StringID::operator==(v32, v33))))
  {
    return 0;
  }
  int v15 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v40);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)v41);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v40);
  re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)v41);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    uint64_t v20 = *(void *)v39[2];
    *(void *)&long long v37 = v39[0];
    *((void *)&v37 + 1) = v20;
    if (v39[0]) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  re::internal::actualType(a4, (void **)this, &v37);
  if (!(void)v37)
  {
LABEL_15:
    uint64_t v21 = re::TypeInfo::name(this);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, (re **)&v37, &v40);
  re::TypeInfo::TypeInfo((uint64_t)v36, (uint64_t)v41);
  if ((a7 & 1) != 0 || (uint64_t v16 = *a4) == 0)
  {
    LODWORD(v40) = 0;
    BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
    int v27 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (int *)&v40);
    uint64_t result = 0;
    if (v27) {
      goto LABEL_17;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 336))
  {
LABEL_33:
    long long v34 = v37;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v16, &v34);
    LODWORD(v40) = 2;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (int *)&v40);
    if (result)
    {
      if (isPointerToPolymorphicType)
      {
        re::internal::serializePolymorphicObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, (uint64_t)*a4, (re::TypeInfo *)v36, v38, v15);
      }
      else if (!*(unsigned char *)(a1 + 64))
      {
        (*(void (**)(uint64_t, char *, void, char *, void *, re::TypeRegistry **, void))(*(void *)a1 + 72))(a1, a2, 0, *a4, v39, v38, 0);
      }
      if (*(unsigned char *)(a1 + 336))
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      return *(unsigned char *)(a1 + 64) == 0;
    }
    return result;
  }
  uint64_t v40 = *a4;
  uint64_t v17 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 344, (uint64_t *)&v40);
  if (!v17)
  {
    uint64_t v16 = *a4;
    goto LABEL_33;
  }
  LODWORD(v40) = *v17;
  int v35 = 1;
  BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v35);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(a1 + 24, (unsigned int *)&v40);
LABEL_17:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(uint64_t result, unsigned int *a2)
{
  if (!*(unsigned char *)(result + 40))
  {
    int v3 = (_anonymous_namespace_ *)result;
    uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(result, 0, 0);
    if (result)
    {
    }
  }
  return result;
}

uint64_t re::internal::serializePolymorphicObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, char *a2, uint64_t a3, re::TypeInfo *a4, re::TypeRegistry **a5, int a6)
{
  re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)a4);
  if (a6)
  {
    int v12 = *a5;
    uint64_t v13 = re::TypeInfo::name(a4);
    re::TypeRegistry::typeInfo(v12, (const re::StringID *)v13, v22);
    if (!v22[0])
    {
      uint64_t v16 = re::TypeInfo::name(a4);
    }
    re::TypeInfo::operator=((uint64_t)v24, (uint64_t)&v23);
  }
  uint64_t result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 24), a2, 0);
  if (result)
  {
    int v15 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v24);
    if (!a1[64]) {
      (*(void (**)(unsigned char *, uint64_t, void, uint64_t, re::TypeInfo *, unsigned char *, void))(*(void *)a1 + 72))(a1, v15[1], 0, a3, a4, v24, 0);
    }
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720D40;
  re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720CD8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 1;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  int v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  int v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  int v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  int v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  int v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  int v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  int v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  int v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  int v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  int v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  int v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  int v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  int v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  int v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  int v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  int v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  int v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  int v12 = "CallbackSerializerAttribute";
  int v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        int v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        int v7 = re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        int v7 = re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      int v7 = re::serializeType<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (*(void *)this == *(void *)(a1 + 272))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **((void **)this + 2) | 0xFFFFFFFF00000000);
        int v7 = re::serializeType<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    int v7 = re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

void re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **(void **)(a2 + 16) | 0xFFFFFFFF00000000);
    uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    if (v3) {
      return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t))v3;
    }
  }
  return v2;
}

uint64_t re::serializeType<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v255 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12))
    {
LABEL_304:
      return 0;
    }
    uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 16);
    }
    else {
      int v20 = -1;
    }
    uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 16);
    }
    else {
      int v22 = -1;
    }
    if (v20 != v22)
    {
      long long v26 = re::TypeInfo::name(this);
      int v27 = re::TypeInfo::name(a6);
      if (re::StringID::operator==(v26, v27))
      {
        uint64_t v28 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        if (v28) {
          int v29 = *(_DWORD *)(v28 + 16);
        }
        else {
          int v29 = -1;
        }
        re::TypeInfo::atVersion(this, v29, (unsigned __int8 *)&v239);
        if ((_BYTE)v239)
        {
          if (a7) {
            Instance = 0;
          }
          else {
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)&v240, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          }
          if (*(unsigned char *)(a1 + 64)
            || ((*(void (**)(uint64_t, char *, const re::TypeInfo *, void **, uint64_t *, re::TypeInfo *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, Instance, &v240, a6, a7), *(unsigned char *)(a1 + 64)))
          {
            if (!Instance) {
              return 0;
            }
            uint64_t v125 = *(re::Allocator **)(a1 + 48);
            uint64_t v126 = *(void **)(a1 + 264);
            uint64_t v127 = (unint64_t *)&v240;
            uint64_t v128 = Instance;
LABEL_189:
            re::TypeInfo::releaseInstance((re::TypeInfo *)v127, v128, v125, v126);
            return 0;
          }
          if ((a7 & 1) == 0)
          {
            re::TypeInfo::TypeInfo((uint64_t)v236, (uint64_t)&v240);
            re::internal::upgradeObject(Instance, v236, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
            if (!buf[0])
            {
              if (v252) {
                LOBYTE(v217) = v254;
              }
              else {
                long long v217 = v253;
              }
              if (!buf[0] && v251 && (v252 & 1) != 0)
              {
                uint64_t v177 = *(void (**)(void))(*(void *)v251 + 40);
LABEL_324:
                v177();
              }
              return 0;
            }
          }
          return 1;
        }
        uint64_t v62 = re::TypeInfo::name(a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        LOBYTE(v235) = v62;
        uint64_t v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
      }
      else
      {
        uint64_t v54 = re::TypeInfo::name(a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        re::TypeInfo::name(this);
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
        LOBYTE(v235) = v54;
        uint64_t v30 = "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.";
      }
LABEL_256:
      uint64_t v153 = a1;
      unsigned int v154 = a2;
      goto LABEL_257;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_10;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v71 = **((void **)this + 2);
        uint64_t v72 = **((void **)a6 + 2);
        if ((unsigned __int16)v71 == (unsigned __int16)v72)
        {
          BOOL v18 = WORD1(v71) == WORD1(v72);
          uint64_t v73 = (v72 ^ v71) & 0xFFFFFF00000000;
          if (v18 && v73 == 0) {
            goto LABEL_22;
          }
        }
        goto LABEL_304;
      }
      if (!re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_304;
      }
LABEL_22:
      uint64_t v23 = re::TypeInfo::name(this);
      unint64_t v24 = (unint64_t)*v23 >> 1;
      if (v24 <= 0xCA3DEFB5)
      {
        if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
        {
          if ((unint64_t)*v23 >> 1 <= 0x2E9355)
          {
            if (v24 != 104431)
            {
              if (v24 == 3029738)
              {
              }
LABEL_352:
              uint64_t v235 = re::TypeInfo::name(this)[1];
              uint64_t v30 = "Unsupported basic type \"%s\".";
              goto LABEL_256;
            }
            goto LABEL_297;
          }
          if (v24 == 3052374)
          {
          }
          uint64_t v166 = 3327612;
          goto LABEL_283;
        }
        if ((unint64_t)*v23 >> 1 > 0xB0F77BD0)
        {
          if (v24 == 2969009105)
          {
            return (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, (double *)a4, a7);
          }
          else
          {
            if (v24 != 3111160798) {
              goto LABEL_352;
            }
          }
        }
        if (v24 == 97526364)
        {
          return (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, (float *)a4, a7);
        }
        uint64_t v58 = 109413500;
        goto LABEL_196;
      }
      if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
      {
        if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
        {
          if (v24 == 0x18E6A9A093)
          {
          }
          else
          {
            if (v24 != 0x303EE86A734) {
              goto LABEL_352;
            }
          }
        }
        if (v24 == 0x303EE8780EELL)
        {
        }
        if (v24 != 0x303EE88E58DLL) {
          goto LABEL_352;
        }
LABEL_294:
      }
      if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
      {
        if (v24 == 0x16749DFF03)
        {
LABEL_297:
        }
        uint64_t v166 = 0x16749F63A2;
LABEL_283:
        if (v24 != v166) {
          goto LABEL_352;
        }
      }
      if (v24 == 3393056694) {
        goto LABEL_294;
      }
      uint64_t v58 = 0x16749D2549;
LABEL_196:
      if (v24 != v58) {
        goto LABEL_352;
      }
    case 2:
      if (this == a6) {
        goto LABEL_246;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v75 = **((void **)this + 2);
        uint64_t v76 = **((void **)a6 + 2);
        if ((unsigned __int16)v75 == (unsigned __int16)v76
          && WORD1(v75) == WORD1(v76)
          && ((v76 ^ v75) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_125;
        }
        int v31 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_125:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v155 = **((void **)this + 2);
            uint64_t v156 = **((void **)a6 + 2);
            if ((unsigned __int16)v155 == (unsigned __int16)v156
              && ((BOOL v18 = WORD1(v155) == WORD1(v156), v157 = (v156 ^ v155) & 0xFFFFFF00000000, v18)
                ? (BOOL v158 = v157 == 0)
                : (BOOL v158 = 0),
                  v158))
            {
LABEL_246:
              BOOL v79 = 1;
            }
            else
            {
              BOOL v79 = 0;
            }
          }
          else
          {
            BOOL v79 = re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            *(void *)long long buf = 0;
            uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)buf);
            if (!result) {
              return result;
            }
            if (*(void *)buf) {
            return *(unsigned char *)(a1 + 64) == 0;
            }
          }
          unint64_t v239 = 0;
          if (!re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v239))return 0; {
          unint64_t v159 = v239;
          }
          if (!v239)
          {
            uint64_t v30 = "Failed to read enum constant. String is empty.";
            goto LABEL_239;
          }
          if (v239 >= 0x401)
          {
            LOBYTE(v235) = v239;
            uint64_t v30 = "Failed to read enum constant. String is too long. Length: %zu";
            goto LABEL_239;
          }
          BOOL v175 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), v239 + 1, 0);
          v175[v159] = 0;
          if (*(unsigned char *)(a1 + 64))
          {
LABEL_323:
            uint64_t v177 = *(void (**)(void))(**(void **)(a1 + 56) + 40);
            goto LABEL_324;
          }
          uint64_t v194 = *v175;
          if (*v175)
          {
            char v195 = v175[1];
            if (v195)
            {
              uint64_t v196 = (unsigned __int8 *)(v175 + 2);
              do
              {
                uint64_t v194 = 31 * v194 + v195;
                int v197 = *v196++;
                char v195 = v197;
              }
              while (v197);
            }
          }
          *(void *)long long buf = 2 * v194;
          *(void *)&uint8_t buf[8] = v175;
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(a6, (const re::TypeInfo *)buf, v176);
          re::StringID::destroyString((re::StringID *)buf);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            v219 = *re::foundationSerializationLogObjects(v199);
            if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
            {
              uint64_t v220 = re::TypeInfo::name(a6)[1];
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v175;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v220;
              _os_log_impl(&dword_233120000, v219, OS_LOG_TYPE_INFO, "String \"%s\" is not a valid enum constant of type \"%s\" - skipping.", buf, 0x16u);
            }
            uint64_t v203 = 0;
          }
          else if (v79)
          {
            uint64_t v200 = re::TypeInfo::enumConstants(this);
            unint64_t v202 = EnumConstantIndex - v201;
            if (EnumConstantIndex >= v201)
            {
              uint64_t v227 = re::TypeInfo::renamedEnumConstants(this);
              if (v228 <= v202)
              {
                re::internal::assertLog((re::internal *)6, v228, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v202, v228);
                _os_crash();
                __break(1u);
                JUMPOUT(0x233F098DCLL);
              }
              uint64_t v203 = (const void *)(v227 + 24 * v202);
            }
            else
            {
              uint64_t v203 = (const void *)(v200 + 24 * EnumConstantIndex);
            }
          }
          else
          {
            v221 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (!v221
              || (uint64_t v203 = (const void *)re::internal::TypeTranslationTable::translateSerializedEnum(v221, a6, EnumConstantIndex, this)) == 0)
            {
              re::TypeInfo::name(this);
              goto LABEL_323;
            }
          }
          (*(void (**)(void, char *))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v175);
          if (v203) {
            memcpy(a4, v203, *(unsigned int *)(*((void *)this + 2) + 8));
          }
          return *(unsigned char *)(a1 + 64) == 0;
        }
        int v31 = *((unsigned __int8 *)this + 12);
      }
      if (v31 == *((unsigned __int8 *)a6 + 12))
      {
        BOOL v77 = re::TypeInfo::name(this);
        uint64_t v78 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v77, v78)) {
          goto LABEL_125;
        }
      }
      goto LABEL_304;
    case 3:
      if (this == a6) {
        goto LABEL_132;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v80 = **((void **)this + 2);
        uint64_t v81 = **((void **)a6 + 2);
        if ((unsigned __int16)v80 == (unsigned __int16)v81
          && WORD1(v80) == WORD1(v81)
          && ((v81 ^ v80) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_132;
        }
        int v32 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_132;
        }
        int v32 = *((unsigned __int8 *)this + 12);
      }
      if (v32 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_304;
      }
LABEL_132:
      if (a7)
      {
        LOBYTE(Tag) = 0;
        re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, &Tag);
        if ((_BYTE)Tag)
        {
          unint64_t v82 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
          re::internal::translateType(v82, (const re::TypeRegistry *)&v239, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, 0, buf, buf, 1);
          }
        }
        char v83 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        v246[0] = (*(uint64_t (**)(uint64_t *))(*(void *)&buf[16] + 80))(a4) != 0;
        double v84 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, v246);
        if (v246[0])
        {
          unint64_t v85 = re::TypeInfo::createInstance((re::TypeInfo *)&v239, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          (*(void (**)(uint64_t *, void **))(*(void *)&buf[16] + 88))(a4, v85);
          re::TypeInfo::releaseInstance((re::TypeInfo *)&v239, v85, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          uint64_t v86 = (*(uint64_t (**)(uint64_t *))(*(void *)&buf[16] + 80))(a4);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 72))(a1, a2, 0, v86, &v239, &Tag, 0);
          }
        }
        else
        {
          (*(void (**)(uint64_t *, void, double))(*(void *)&buf[16] + 88))(a4, 0, v84);
        }
        char v83 = (_anonymous_namespace_ *)(a1 + 24);
      }
      return *(unsigned char *)(a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_148;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v87 = **((void **)this + 2);
        uint64_t v88 = **((void **)a6 + 2);
        if ((unsigned __int16)v87 == (unsigned __int16)v88)
        {
          BOOL v18 = WORD1(v87) == WORD1(v88);
          uint64_t v89 = (v88 ^ v87) & 0xFFFFFF00000000;
          if (v18 && v89 == 0) {
            goto LABEL_148;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_148;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_304;
      }
      uint64_t v91 = *((void *)this + 2);
      uint64_t v92 = *((void *)a6 + 2);
      int v93 = *(_DWORD *)(v92 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v91 + 84) & 0xFFFFFF) != 0)
      {
        if (!v93) {
          goto LABEL_304;
        }
LABEL_148:
        if (a7)
        {
          int64_t v94 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
          re::internal::translateType(v94, (const re::TypeRegistry *)&Tag, (uint64_t)&v239);
          uint64_t v95 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
          if (!v95) {
            goto LABEL_236;
          }
          long long v96 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v95;
          uint64_t v97 = *((void *)a6 + 2);
          int v98 = *(_DWORD *)(v97 + 84) & 0xFFFFFF;
          if (v98)
          {
            uint64_t v99 = 0;
            int v100 = 8;
          }
          else
          {
            uint64_t v99 = *(int *)(v97 + 88);
            int v100 = 4;
          }
          *(void *)long long buf = v99;
          uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
          uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, buf, v100);
          if (!result) {
            return result;
          }
          uint64_t v160 = *(void *)buf;
          if (v98) {
            BOOL v161 = *(void *)buf == 0;
          }
          else {
            BOOL v161 = 1;
          }
          char v162 = v161;
          if (v161)
          {
            if (!*(void *)buf) {
              goto LABEL_402;
            }
          }
          else
          {
            v242[0] = 0;
            v242[1] = (void *)0xFFFFFFFFLL;
            (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 16))(a1, 0, v242);
          }
          do
          {
            v96(a1, 0, 0, 0, &v239, &v239, 1);
            --v160;
          }
          while (v160);
          if (v162)
          {
LABEL_402:
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
        else
        {
          re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
          re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)this);
          uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
          if (!v101) {
            goto LABEL_237;
          }
          BOOL v102 = (void (*)(uint64_t, void, void, uint64_t, uint64_t *, unsigned char *, void))v101;
          uint64_t v103 = re::ArrayAccessor::size((re::ArrayAccessor *)v244, (char *)a4);
          unint64_t v238 = v103;
          int v104 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v104) {
            int v105 = 8;
          }
          else {
            int v105 = 4;
          }
          uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
          uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, &v238, v105);
          if (!result) {
            return result;
          }
          unint64_t v107 = v238;
          if (v103 != v238)
          {
            if ((*(_DWORD *)(v245 + 84) & 0xFFFFFF) == 0)
            {
              LOBYTE(v235) = v103;
              uint64_t v30 = "Invalid array size. Expected size = %zu, actual size = %zu";
              goto LABEL_239;
            }
            re::TypeRegistry::typeInfo(v244[0], *(void *)(v245 + 72), buf);
            re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
            unsigned int v108 = *(_DWORD *)(v241 + 8);
            if (!is_mul_ok(v108, v107)) {
              goto LABEL_176;
            }
            re::ArrayAccessor::reset((re::ArrayAccessor *)v244, (void **)a4, *(re::Allocator **)(a1 + 48), (const re::TypeInfo *)v107);
            uint64_t v103 = v107;
          }
          if (v104) {
            BOOL v212 = v103 == 0;
          }
          else {
            BOOL v212 = 1;
          }
          char v213 = v212;
          if (!v212)
          {
            uint64_t v214 = *a4;
            v237[0] = 0;
            v237[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v214, v237);
            uint64_t v103 = v107;
          }
          if (v103)
          {
            unint64_t v215 = 0;
            if (v107 <= 1) {
              unint64_t v107 = 1;
            }
            do
            {
              uint64_t v216 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v244, (char *)a4, v215);
              v102(a1, 0, 0, v216, &Tag, v246, 0);
              ++v215;
            }
            while (v107 != v215);
          }
          if (v213) {
            goto LABEL_402;
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        goto LABEL_402;
      }
      if (!v93 && *(_DWORD *)(v91 + 88) == *(_DWORD *)(v92 + 88)) {
        goto LABEL_148;
      }
      goto LABEL_304;
    case 5:
      if (this == a6) {
        goto LABEL_166;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v109 = **((void **)this + 2);
        uint64_t v110 = **((void **)a6 + 2);
        if ((unsigned __int16)v109 == (unsigned __int16)v110
          && WORD1(v109) == WORD1(v110)
          && ((v110 ^ v109) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_166;
        }
        int v33 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_166;
        }
        int v33 = *((unsigned __int8 *)this + 12);
      }
      if (v33 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_304;
      }
LABEL_166:
      if (a7)
      {
        uint64_t v111 = *(re::internal **)(a1 + 272);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::internal::translateType(v111, (const re::TypeRegistry *)&Tag, (uint64_t)&v239);
        uint64_t v112 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
        if (!v112) {
          goto LABEL_236;
        }
        BOOL v113 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v112;
        *(void *)long long buf = 0;
        uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
        unsigned int v114 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, buf, 0);
        uint64_t result = 0;
        if (v114)
        {
          for (uint64_t i = *(void *)buf; i; --i)
            v113(a1, 0, 0, 0, &v239, &v239, 1);
          goto LABEL_402;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
      re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)this);
      uint64_t v116 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
      if (!v116) {
        goto LABEL_237;
      }
      int v117 = (void (*)(uint64_t, void, void, uint64_t, uint64_t *, unsigned char *, void))v116;
      uint64_t v118 = (void *)(*(uint64_t (**)(uint64_t *))(v245 + 80))(a4);
      v242[0] = v118;
      uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
      unsigned int v119 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, v242, 0);
      uint64_t result = 0;
      if (!v119) {
        return result;
      }
      uint64_t v120 = v242[0];
      if (v118 != v242[0])
      {
        re::TypeRegistry::typeInfo(v244[0], *(void *)(v245 + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        unsigned int v108 = *(_DWORD *)(v241 + 8);
        if (!is_mul_ok(v108, (unint64_t)v120))
        {
LABEL_176:
          LOBYTE(v235) = v108;
          uint64_t v30 = "Size overflow during deserialization. Element size = %zu, count = %zu";
          goto LABEL_239;
        }
        uint64_t v185 = *(void *)(a1 + 48);
        uint64_t v186 = *(void (**)(uint64_t *, unsigned char *, uint64_t, void *))(v245 + 88);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v244);
        v186(a4, buf, v185, v120);
      }
      if (*(void *)(v245 + 96))
      {
        if (v120)
        {
          for (unint64_t j = 0; j != v120; unint64_t j = (void *)((char *)j + 1))
          {
            uint64_t v188 = (*(uint64_t (**)(uint64_t *, void *))(v245 + 96))(a4, j);
            v117(a1, 0, 0, v188, &Tag, v246, 0);
          }
        }
      }
      else
      {
        BOOL v189 = *(uint64_t (**)(uint64_t *, void))(v245 + 104);
        if (!v189 || !*(void *)(v245 + 112) || !*(void *)(v245 + 120))
        {
          uint64_t v193 = (re::TypeInfo *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v244);
          uint64_t v235 = re::TypeInfo::name(v193)[1];
          uint64_t v30 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_256;
        }
        uint64_t v190 = v189(a4, *(void *)(a1 + 56));
        uint64_t v191 = (*(uint64_t (**)(void))(v245 + 112))();
        if (v191)
        {
          uint64_t v192 = v191;
          do
          {
            v117(a1, 0, 0, v192, &Tag, v246, 0);
            uint64_t v192 = (*(uint64_t (**)(uint64_t))(v245 + 112))(v190);
          }
          while (v192);
        }
        (*(void (**)(uint64_t, void))(v245 + 120))(v190, *(void *)(a1 + 56));
      }
      goto LABEL_402;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
      int v35 = re::TypeInfo::name((re::TypeInfo *)&v239);
      int v36 = BYTE4(v240);
      if (BYTE4(v240) != 1) {
        goto LABEL_105;
      }
      if (!re::TypeInfo::isInteger((re::TypeInfo *)&v239))
      {
        int v36 = BYTE4(v240);
LABEL_105:
        if (v36 == 8)
        {
          unint64_t v63 = (unint64_t)*v35 >> 1;
          if (v63 == 0x22C6ED80D0CLL)
          {
            uint64_t v131 = (char *)v35[1];
            uint64_t v39 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (v131 == "StringID") {
              return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))v39)(a1, a2, a3, a4, this, a6, a7);
            }
            int v132 = strcmp(v131, "StringID");
            uint64_t v39 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (!v132) {
              return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))v39)(a1, a2, a3, a4, this, a6, a7);
            }
          }
          else if (v63 == 0x134375A94D9F7110)
          {
            uint64_t v64 = (char *)v35[1];
            uint64_t v39 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (v64 == "DynamicString") {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
            int v65 = strcmp(v64, "DynamicString");
            uint64_t v39 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (!v65) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
          }
        }
LABEL_212:
        if (this != a6)
        {
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v133 = **((void **)this + 2);
            uint64_t v134 = **((void **)a6 + 2);
            if ((unsigned __int16)v133 == (unsigned __int16)v134
              && WORD1(v133) == WORD1(v134)
              && ((v134 ^ v133) & 0xFFFFFF00000000) == 0)
            {
              goto LABEL_220;
            }
          }
          else if (re::areSameTranslatedVersion(this, a6, v34))
          {
            goto LABEL_220;
          }
          if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
            goto LABEL_304;
          }
        }
LABEL_220:
        if (a7)
        {
          uint64_t v135 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
          re::internal::translateType(v135, (const re::TypeRegistry *)&Tag, (uint64_t)&v239);
          unint64_t v136 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), buf);
          re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
          re::internal::translateType(v136, (const re::TypeRegistry *)v246, (uint64_t)&Tag);
          uint64_t v137 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
          if (v137)
          {
            uint64_t v138 = (void (*)(uint64_t, const char *, void, void, unint64_t *, unint64_t *, uint64_t))v137;
            uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
            if (v139)
            {
              uint64_t v140 = (void (*)(uint64_t, const char *, void, void, uint64_t *, uint64_t *, uint64_t))v139;
              *(void *)long long buf = 0;
              uint64_t v141 = (_anonymous_namespace_ *)(a1 + 24);
              uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, buf);
              if (!result) {
                return result;
              }
              for (uint64_t k = *(void *)buf; k; --k)
              {
                re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 1);
                v138(a1, "key", 0, 0, &v239, &v239, 1);
                v140(a1, "value", 0, 0, &Tag, &Tag, 1);
              }
              goto LABEL_235;
            }
            goto LABEL_237;
          }
LABEL_236:
          uint64_t v152 = &v239;
LABEL_238:
          uint64_t v235 = re::TypeInfo::name((re::TypeInfo *)v152)[1];
          uint64_t v30 = "Failed to resolve serialize function for type \"%s\"";
          goto LABEL_239;
        }
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), buf);
        re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)&buf[8]);
        re::TypeInfo::TypeInfo((uint64_t)v242, (uint64_t)this);
        uint64_t v143 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
        if (!v143) {
          goto LABEL_236;
        }
        uint64_t v144 = (void (*)(uint64_t, const char *, void, void **, unint64_t *, unsigned char *, void))v143;
        uint64_t v145 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
        if (!v145)
        {
LABEL_237:
          uint64_t v152 = (unint64_t *)&Tag;
          goto LABEL_238;
        }
        double v146 = (void (*)(uint64_t, const char *, void, uint64_t, uint64_t *, void **, void))v145;
        v237[0] = (*(uint64_t (**)(uint64_t *))(v243 + 88))(a4);
        uint64_t v141 = (_anonymous_namespace_ *)(a1 + 24);
        uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, v237);
        if (!result) {
          return result;
        }
        uint64_t v147 = *(void *)(a1 + 48);
        uint64_t v148 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v243 + 96);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v242);
        v148(a4, buf, v147);
        uint64_t v149 = v237[0];
        if (!v237[0]) {
          goto LABEL_235;
        }
        uint64_t v150 = re::TypeInfo::createInstance((re::TypeInfo *)&v239, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        while (1)
        {
          re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 0);
          v144(a1, "key", 0, v150, &v239, v246, 0);
          uint64_t v125 = *(re::Allocator **)(a1 + 48);
          if (*(unsigned char *)(a1 + 64)) {
            break;
          }
          uint64_t v151 = (*(uint64_t (**)(uint64_t *, void **, re::Allocator *, void **))(v243 + 104))(a4, v242, v125, v150);
          v146(a1, "value", 0, v151, &Tag, v244, 0);
          if (!--v149)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)&v239, v150, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
LABEL_235:
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
        uint64_t v126 = *(void **)(a1 + 264);
        uint64_t v127 = &v239;
        uint64_t v128 = v150;
        goto LABEL_189;
      }
      unint64_t v37 = (unint64_t)*v35 >> 1;
      if (v37 > 0x303EE8780EDLL)
      {
        if (v37 == 0x303EE8780EELL)
        {
          uint64_t v179 = (char *)v35[1];
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
          if (v179 == "uint32_t") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          int v180 = strcmp(v179, "uint32_t");
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
          if (!v180) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          goto LABEL_334;
        }
        if (v37 != 0x303EE88E58DLL)
        {
LABEL_334:
          *(void *)long long buf = 0x18E6A9A093;
          *(void *)&uint8_t buf[8] = "uint8_t";
          BOOL v181 = re::StringID::operator==(v35, buf);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>;
          if (v181) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          *(void *)long long buf = 0x16749F63A2;
          *(void *)&uint8_t buf[8] = "int64_t";
          if (re::StringID::operator==(v35, buf)) {
            return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>)(a1, a2, a3, a4, this, a6, a7);
          }
          uint64_t Tag = 3327612;
          v248 = "long";
          BOOL v182 = re::StringID::operator==(v35, &Tag);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>;
          if (v182) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          *(void *)long long buf = 104431;
          *(void *)&uint8_t buf[8] = "int";
          BOOL v183 = re::StringID::operator==(v35, buf);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>;
          if (v183) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          *(void *)long long buf = 109413500;
          *(void *)&uint8_t buf[8] = "short";
          BOOL v184 = re::StringID::operator==(v35, buf);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>;
          if (v184) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          goto LABEL_212;
        }
        uint64_t v129 = (char *)v35[1];
        uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
        if (v129 != "uint64_t")
        {
          uint64_t v130 = "uint64_t";
          goto LABEL_330;
        }
      }
      else
      {
        if (v37 != 3393056694)
        {
          if (v37 == 0x303EE86A734)
          {
            uint64_t v38 = (char *)v35[1];
            uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
            if (v38 == "uint16_t") {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
            int v40 = strcmp(v38, "uint16_t");
            uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
            if (!v40) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
          }
          goto LABEL_334;
        }
        uint64_t v129 = (char *)v35[1];
        uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
        if (v129 != "size_t")
        {
          uint64_t v130 = "size_t";
LABEL_330:
          int v178 = strcmp(v129, v130);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (!v178) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          goto LABEL_334;
        }
      }
      return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
    case 7:
      if (this == a6) {
        goto LABEL_61;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v121 = **((void **)this + 2);
        uint64_t v122 = **((void **)a6 + 2);
        if ((unsigned __int16)v121 != (unsigned __int16)v122) {
          goto LABEL_304;
        }
        BOOL v18 = WORD1(v121) == WORD1(v122);
        uint64_t v123 = (v122 ^ v121) & 0xFFFFFF00000000;
        if (!v18 || v123 != 0) {
          goto LABEL_304;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_304;
      }
LABEL_61:
      uint64_t v41 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 16);
      if (a7)
      {
        if (!result) {
          return result;
        }
        unint64_t v239 = 0;
        if (v239 < *(unsigned int *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, v239, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, buf, buf, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        uint64_t v59 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        uint64_t Tag = re::UnionAccessor::readTag(v59, (char *)a4);
        uint64_t v60 = (uint64_t *)Tag;
        re::UnionAccessor::reset((re::UnionAccessor *)buf, (char *)a4, (const re::TypeInfo *)Tag, *(re::Allocator **)(a1 + 48));
        if ((unint64_t)v60 < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, (uint64_t)v60, (uint64_t)&v239);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, uint64_t *, unint64_t *, unint64_t *, void))(*(void *)a1 + 72))(a1, "value", 0, a4, &v239, &v239, 0);
          }
        }
      }
      goto LABEL_386;
    case 8:
      if (!a7) {
        goto LABEL_71;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        uint64_t v66 = *(re::TypeRegistry **)(a1 + 272);
        uint64_t Tag = 0x2686EB529B3EE220;
        v248 = "DynamicString";
        re::TypeRegistry::typeInfo(v66, (const re::StringID *)&Tag, buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        re::StringID::destroyString((re::StringID *)&Tag);
        uint64_t v67 = (re *)&v239;
        uint64_t v68 = (re::TypeInfo *)&v239;
        uint64_t v69 = a1;
        uint64_t v70 = a2;
      }
      else
      {
        uint64_t v42 = re::TypeInfo::name(this);
        if ((unint64_t)*v42 >> 1 != 0x134375A94D9F7110
          || (uint64_t v44 = (char *)v42[1], v44 != "DynamicString") && strcmp(v44, "DynamicString"))
        {
LABEL_71:
          uint64_t v45 = *((void *)this + 2);
          if ((*(unsigned char *)(v45 + 48) & 4) == 0)
          {
            uint64_t v41 = (_anonymous_namespace_ *)(a1 + 24);
            unsigned int v46 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
            uint64_t result = 0;
            if (!v46) {
              return result;
            }
            uint64_t v47 = *(void *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
            if (v47
              && *(_WORD *)(v47 + 22) == 3
              && *(_DWORD *)v47
              && (uint64_t v48 = *(void *)(v47 + 8), (*(_WORD *)(v48 + 46) & 0x40) != 0)
              && ((*(_WORD *)(v48 + 22) & 0x1000) != 0
                ? (int64_t v49 = *(const char **)(v47 + 8))
                : (int64_t v49 = *(const char **)(v48 + 8)),
                  !strcmp(v49, "@version")))
            {
              int v50 = *(_DWORD *)(v48 + 24);
            }
            else
            {
              int v50 = 1;
            }
            uint64_t v51 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
            if (v51) {
              int v53 = *(_DWORD *)(v51 + 16);
            }
            else {
              int v53 = -1;
            }
            if (v50 == v53)
            {
              if (this != a6)
              {
                if (*(void *)this == *(void *)a6)
                {
                  uint64_t v204 = **((void **)this + 2);
                  uint64_t v205 = **((void **)a6 + 2);
                  if ((unsigned __int16)v204 == (unsigned __int16)v205
                    && WORD1(v204) == WORD1(v205)
                    && ((v205 ^ v204) & 0xFFFFFF00000000) == 0)
                  {
                    goto LABEL_316;
                  }
                }
                else if (re::areSameTranslatedVersion(this, a6, v52))
                {
                  goto LABEL_316;
                }
                if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12))
                {
                  re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, (uint64_t)a4, (uint64_t *)this, (uint64_t *)a6, a7);
                }
                else
                {
                  uint64_t v206 = re::TypeInfo::name(this)[1];
                  re::TypeInfo::name(a6);
                }
                goto LABEL_386;
              }
LABEL_316:
              re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, (uint64_t)a4, (uint64_t *)this, a7);
LABEL_386:
              return *(unsigned char *)(a1 + 64) == 0;
            }
            if (*(void *)this != *(void *)a6
              || (uint64_t v172 = **((void **)this + 2),
                  uint64_t v173 = **((void **)a6 + 2),
                  (unsigned __int16)v172 != (unsigned __int16)v173)
              || WORD1(v172) != WORD1(v173)
              || ((v173 ^ v172) & 0xFFFFFF00000000) != 0)
            {
              uint64_t v174 = re::TypeInfo::name(a6)[1];
              re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
              LOBYTE(v235) = v174;
              uint64_t v30 = "Type \"%s\" version %u expected in JSON. Actual version found in JSON: %u";
LABEL_239:
              uint64_t v153 = a1;
              unsigned int v154 = 0;
LABEL_257:
              return 0;
            }
            re::TypeInfo::atVersion(this, v50, (unsigned __int8 *)&v239);
            if (!(_BYTE)v239)
            {
              uint64_t v235 = re::TypeInfo::name(this)[1];
              uint64_t v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
              goto LABEL_239;
            }
            if (a7) {
              uint64_t v218 = 0;
            }
            else {
              uint64_t v218 = re::TypeInfo::createInstance((re::TypeInfo *)&v240, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            }
            re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, (uint64_t)v218, &v240, a7);
            if (*(unsigned char *)(a1 + 64))
            {
              if (!v218) {
                return 0;
              }
              uint64_t v125 = *(re::Allocator **)(a1 + 48);
              uint64_t v126 = *(void **)(a1 + 264);
              uint64_t v127 = (unint64_t *)&v240;
              uint64_t v128 = v218;
              goto LABEL_189;
            }
            if ((a7 & 1) == 0)
            {
              re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v240);
              re::internal::upgradeObject(v218, (uint64_t **)&Tag, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
              if (!buf[0])
              {
                if (v252) {
                  LOBYTE(v234) = v254;
                }
                else {
                  uint64_t v234 = v253;
                }
                if (!buf[0] && v251 && (v252 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v251 + 40))();
                }
              }
            }
            return 1;
          }
          __int16 v55 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)buf, *(void *)this, v45);
          re::TypeMemberCollection::operator[](v55, 0, (uint64_t)&Tag);
          uint64_t v56 = (char *)a4 + *(unsigned int *)(v249 + 24);
          re::TypeRegistry::typeInfo((void *)Tag, *(void *)v249, buf);
          re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
          if (this != a6)
          {
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v163 = **((void **)this + 2);
              uint64_t v164 = *((void *)a6 + 2);
              uint64_t v165 = *(void *)v164;
              if ((unsigned __int16)v163 == (unsigned __int16)*(void *)v164
                && WORD1(v163) == WORD1(v165)
                && ((v165 ^ v163) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_89;
              }
            }
            else
            {
              if (re::areSameTranslatedVersion(this, a6, v57)) {
                goto LABEL_89;
              }
              uint64_t v164 = *((void *)a6 + 2);
            }
            if (*(_DWORD *)(v164 + 88) == 1)
            {
              re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v239, *(void *)a6, v164);
              re::TypeMemberCollection::operator[]((uint64_t *)&v239, 0, (uint64_t)v242);
              re::TypeRegistry::typeInfo(v242[0], *(void *)v243, buf);
              re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)&buf[8]);
              if (!*(unsigned char *)(a1 + 64)) {
                return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, char *, unsigned char *, void **, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v56, v246, v244, a7);
              }
              return 0;
            }
            goto LABEL_304;
          }
LABEL_89:
          if (*(unsigned char *)(a1 + 64)) {
            return 0;
          }
          return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, char *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v56, v246, v246, a7);
        }
        uint64_t v69 = a1;
        uint64_t v70 = a2;
        uint64_t v67 = this;
        uint64_t v68 = this;
      }
      re::serializeDynamicString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v69, v70, v43, 0, v67, v68, 1);
      return *(unsigned char *)(a1 + 64) == 0;
    case 9:
      uint64_t v235 = re::TypeInfo::name(this)[1];
      uint64_t v30 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_256;
    default:
      LOBYTE(v235) = *((unsigned char *)this + 12);
      uint64_t v30 = "Invalid type category. Value = %d";
      goto LABEL_256;
  }
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, char *a2, float *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    __int16 v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        float Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0) {
          *a3 = Double;
        }
        uint64_t v19 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
        ++*(void *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v12 = (const char *)result;
    }
    else {
      int v12 = (const char *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v13 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v13 = *result;
    }
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(float *)&int v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(float *)&int v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(float *)&int v14 = NAN;
LABEL_34:
      float Double = *(float *)&v14;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 232))
    {
      *(void *)int v20 = 0;
      float v16 = strtof(v12, (char **)v20);
      BOOL v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      float Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        BOOL v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v20 = 136315138;
          *(void *)&v20[4] = v12;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, char *a2, double *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    __int16 v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        double Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0) {
          *a3 = Double;
        }
        uint64_t v19 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
        ++*(void *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      int v12 = (const char *)result;
    }
    else {
      int v12 = (const char *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v13 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v13 = *result;
    }
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(double *)&unint64_t v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(double *)&unint64_t v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(double *)&unint64_t v14 = NAN;
LABEL_34:
      double Double = *(double *)&v14;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 232))
    {
      *(void *)int v20 = 0;
      float v16 = strtod(v12, (char **)v20);
      BOOL v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      double Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        BOOL v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v20 = 136315138;
          *(void *)&v20[4] = v12;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(unsigned char *a1, char *a2, uint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a1[40]) {
    return 0;
  }
  if (result)
  {
    int v8 = result;
    __int16 v9 = *((_WORD *)result + 11);
    if ((v9 & 0x400) != 0)
    {
      if ((*((_WORD *)result + 11) & 0x1000) != 0) {
        LODWORD(v12) = 21 - *((char *)result + 21);
      }
      else {
        LODWORD(v12) = *result;
      }
      uint64_t v12 = v12;
    }
    else if ((v9 & 0x10) != 0 {
           && a1[232]
    }
           && (Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v7), (int v11 = snprintf(__str, 0x40uLL, "%g", Double)) != 0))
    {
      uint64_t v12 = v11;
    }
    else
    {
      if (!a1[233] || (int v13 = *((unsigned __int16 *)v8 + 11), (v13 & 8) == 0))
      {
        return 0;
      }
      BOOL v14 = v13 == 10;
      uint64_t v12 = 4;
      if (!v14) {
        uint64_t v12 = 5;
      }
    }
    *a3 = v12;
    LOBYTE(v15) = 8;
    DWORD1(v15) = 0;
    *((void *)&v15 + 1) = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v12;
    uint64_t v18 = 0;
    uint64_t v19 = v8;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState((uint64_t)a1, &v15);
    return (unsigned int *)1;
  }
  return result;
}

double re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, char *a2, unsigned char *a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (JSONValue) {
      BOOL v7 = *((_WORD *)JSONValue + 11) != 0;
    }
    else {
      BOOL v7 = 0;
    }
    *a3 = v7;
    LOBYTE(v9) = 3;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = a2;
    uint64_t v10 = 0;
    BOOL v11 = v7;
    uint64_t v12 = 0;
    int v13 = JSONValue;
    return re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v9);
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(uint64_t a1, char *a2, void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if (*((_WORD *)result + 11) == 4)
    {
      uint64_t v9 = *result;
      *a3 = v9;
      LOBYTE(v10) = 5;
      DWORD1(v10) = a4;
      *((void *)&v10 + 1) = a2;
      uint64_t v11 = 0;
      uint64_t v12 = v9;
      uint64_t v13 = 0;
      BOOL v14 = result;
      re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v10);
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (!v18)
  {
    uint64_t v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(v29 + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)v29;
        }
        uint64_t v44 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        long long v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9) {
          goto LABEL_41;
        }
        long long v34 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33) {
          break;
        }
        if (*v34 - 48 > 9)
        {
          uint64_t v36 = v49;
          uint64_t v35 = v50;
          if (!__CFADD__(v50, v49)) {
            goto LABEL_40;
          }
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            long long v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v37 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t *))(v46 + 104))(a4, v45, *(void *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_43;
        }
      }
      uint64_t v36 = v49;
      uint64_t v35 = v50;
      if (__CFADD__(v50, v49)) {
        goto LABEL_42;
      }
LABEL_40:
      uint64_t v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (!v18)
  {
    uint64_t v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, int *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(v29 + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)v29;
        }
        int v44 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        long long v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9) {
          goto LABEL_41;
        }
        long long v34 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33) {
          break;
        }
        if (*v34 - 48 > 9)
        {
          int v36 = v49;
          int v35 = v50;
          if (!__CFADD__(v50, v49)) {
            goto LABEL_40;
          }
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            long long v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v37 = (*(uint64_t (**)(uint64_t, unsigned char *, void, int *))(v46 + 104))(a4, v45, *(void *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_43;
        }
      }
      int v36 = v49;
      int v35 = v50;
      if (__CFADD__(v50, v49)) {
        goto LABEL_42;
      }
LABEL_40:
      int v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v46);
  if (!v18)
  {
    uint64_t v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (uint64_t i = *((void *)v28 + 1); i != *((void *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          uint64_t v30 = i;
        }
        else {
          uint64_t v30 = *(void *)(i + 8);
        }
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(i + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)i;
        }
        __int16 v42 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        long long v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          long long v34 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (HIWORD(v48) || 0xFFFF - v48 < v47)
            {
              if (v34 != v33) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
            __int16 v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                long long v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, __int16 *))(v44 + 104))(a4, v43, *(void *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v46);
  if (!v18)
  {
    uint64_t v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (uint64_t i = *((void *)v28 + 1); i != *((void *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          uint64_t v30 = i;
        }
        else {
          uint64_t v30 = *(void *)(i + 8);
        }
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(i + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)i;
        }
        char v42 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        long long v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          long long v34 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (v48 > 0xFF || 255 - v48 < v47)
            {
              if (v34 != v33) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
            char v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                long long v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, char *))(v44 + 104))(a4, v43, *(void *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v18)
  {
    uint64_t v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        uint64_t v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        unsigned int v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        unint64_t v49 = 0;
        unsigned int v32 = v31 && *v30 == 45;
        uint64_t v33 = v31;
        long long v34 = &v30[v31];
        char v35 = v32;
        uint64_t v36 = &v30[v32];
        if (v33 == v32) {
          break;
        }
        uint64_t v37 = v33 - v32;
        uint64_t v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37) {
            goto LABEL_42;
          }
        }
        if (!v37) {
          break;
        }
        if (*v38 - 48 >= 0xA) {
          goto LABEL_43;
        }
        uint64_t v38 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          uint64_t v40 = v54;
          uint64_t v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            uint64_t v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (uint64_t v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34) {
              goto LABEL_53;
            }
          }
          goto LABEL_48;
        }
        unint64_t v41 = v39 + v40;
        if (v35)
        {
          if (v41 <= 0x8000000000000000) {
            goto LABEL_45;
          }
        }
        else if ((v41 & 0x8000000000000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unint64_t *))(v51 + 104))(a4, v50, *(void *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_62;
        }
      }
LABEL_42:
      uint64_t v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        unint64_t v41 = 0;
        if (v35) {
LABEL_45:
        }
          unint64_t v41 = -(uint64_t)v41;
LABEL_46:
        unint64_t v49 = v41;
        goto LABEL_48;
      }
      uint64_t v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v18)
  {
    uint64_t v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, int *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        uint64_t v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        unsigned int v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        unsigned int v49 = 0;
        unsigned int v32 = v31 && *v30 == 45;
        uint64_t v33 = v31;
        long long v34 = &v30[v31];
        char v35 = v32;
        uint64_t v36 = &v30[v32];
        if (v33 == v32) {
          break;
        }
        uint64_t v37 = v33 - v32;
        uint64_t v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37) {
            goto LABEL_42;
          }
        }
        if (!v37) {
          break;
        }
        if (*v38 - 48 >= 0xA) {
          goto LABEL_43;
        }
        uint64_t v38 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          int v40 = v54;
          int v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            uint64_t v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (int v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34) {
              goto LABEL_53;
            }
          }
          goto LABEL_48;
        }
        unsigned int v41 = v39 + v40;
        if (v35)
        {
          if (v41 <= 0x80000000) {
            goto LABEL_45;
          }
        }
        else if ((v41 & 0x80000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unsigned int *))(v51 + 104))(a4, v50, *(void *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_62;
        }
      }
LABEL_42:
      uint64_t v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        unsigned int v41 = 0;
        if (v35) {
LABEL_45:
        }
          unsigned int v41 = -v41;
LABEL_46:
        unsigned int v49 = v41;
        goto LABEL_48;
      }
      uint64_t v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v54),
        re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55),
        v52[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v52))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v51, (uint64_t)v55);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)this);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v52);
  if (!v19)
  {
    uint64_t v47 = re::TypeInfo::name((re::TypeInfo *)v52)[1];
    return 0;
  }
  int v20 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v19;
  uint64_t v21 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v50 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)v49);
  v21(a4, &v54, v18);
  unsigned int v27 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v27)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (!v28 || !*v28)
    {
LABEL_62:
      return *(unsigned char *)(a1 + 64) == 0;
    }
    uint64_t v29 = (unsigned __int8 *)*((void *)v28 + 1);
    while (1)
    {
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (unsigned __int8 *)*((void *)v29 + 1);
      }
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0) {
        unsigned int v31 = 21 - (char)v29[21];
      }
      else {
        unsigned int v31 = *(_DWORD *)v29;
      }
      __int16 v48 = 0;
      if (v31) {
        unsigned int v32 = *v30 == 45;
      }
      else {
        unsigned int v32 = 0;
      }
      uint64_t v33 = v31;
      long long v34 = &v30[v31];
      char v35 = v32;
      uint64_t v36 = &v30[v32];
      if (v33 == v32) {
        goto LABEL_44;
      }
      uint64_t v37 = v33 - v32;
      uint64_t v38 = v36;
      while (*v38 == 48)
      {
        ++v38;
        if (!--v37) {
          goto LABEL_44;
        }
      }
      if (!v37)
      {
LABEL_44:
        uint64_t v38 = v34;
LABEL_45:
        if (v38 == v36)
        {
          uint64_t v38 = v30;
          goto LABEL_52;
        }
        __int16 v39 = 0;
        __int16 v40 = 0;
        if (v35)
        {
LABEL_47:
          __int16 v48 = -v39;
          goto LABEL_52;
        }
LABEL_51:
        __int16 v48 = v40;
        goto LABEL_52;
      }
      if (*v38 - 48 >= 0xA) {
        goto LABEL_45;
      }
      uint64_t v38 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v38, v34, &v54, &v53);
      if (v38 != v34 && *v38 - 48 <= 9) {
        goto LABEL_56;
      }
      if (HIWORD(v54) || 0xFFFF - v54 < v53) {
        break;
      }
      __int16 v39 = v53 + v54;
      if ((v35 & 1) == 0)
      {
        if ((((_WORD)v53 + (_WORD)v54) & 0x8000) != 0) {
          goto LABEL_52;
        }
        __int16 v40 = v53 + v54;
        goto LABEL_51;
      }
      if ((unsigned __int16)(v53 + v54) <= 0x8000u) {
        goto LABEL_47;
      }
LABEL_52:
      if (v34 != v38)
      {
        return 0;
      }
      uint64_t v41 = (*(uint64_t (**)(uint64_t, unsigned char *, void, __int16 *))(v50 + 104))(a4, v49, *(void *)(a1 + 48), &v48);
      v20(a1, v30, 0, v41, v52, v51, 0);
      v29 += 48;
      if (v29 == (unsigned __int8 *)(*((void *)v28 + 1) + 48 * *v28)) {
        goto LABEL_62;
      }
    }
    while (1)
    {
      if (v38 == v34)
      {
        uint64_t v38 = v34;
        goto LABEL_52;
      }
LABEL_56:
      if (*v38 - 48 > 9) {
        goto LABEL_52;
      }
      ++v38;
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v45);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v45);
      re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)v46);
      re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)this);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v44);
      if (!v23)
      {
        char v35 = re::TypeInfo::name((re::TypeInfo *)v44);
        return 0;
      }
      uint64_t v24 = (void (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v23;
      unsigned int v25 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v25) {
        return result;
      }
      unsigned int v27 = *(void (**)(uint64_t, const char **, uint64_t))(v42 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v45, (uint64_t)v41);
      v27(a4, &v45, v22);
      uint64_t v28 = (re::DynamicString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 32, 8);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      *(void *)uint64_t v28 = v22;
      *((void *)v28 + 1) = 0;
      re::DynamicString::setCapacity(v28, 0);
      uint64_t v29 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v29 && *v29)
      {
        uint64_t v30 = *((void *)v29 + 1);
        do
        {
          if ((*(_WORD *)(v30 + 22) & 0x1000) != 0) {
            unsigned int v31 = (const char *)v30;
          }
          else {
            unsigned int v31 = *(const char **)(v30 + 8);
          }
          size_t v32 = strlen(v31);
          uint64_t v45 = v31;
          v46[0] = v32;
          re::DynamicString::operator=(v28, (uint64_t)&v45);
          uint64_t v33 = (*(uint64_t (**)(uint64_t, unsigned char *, void, re::DynamicString *))(v42 + 104))(a4, v41, *(void *)(a1 + 48), v28);
          v24(a1, v31, 0, v33, v44, v43, 0);
          v30 += 48;
        }
        while (v30 != *((void *)v29 + 1) + 48 * *v29);
      }
      double v34 = re::DynamicString::deinit(v28);
      (*(void (**)(uint64_t, re::DynamicString *, double))(*(void *)v21 + 40))(v21, v28, v34);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v45);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v44);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    int v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 48);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v49);
      if (!v22)
      {
        uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)v49);
        return 0;
      }
      uint64_t v23 = (uint64_t (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      unsigned int v24 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(v47 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v46);
      unsigned int v27 = (_anonymous_namespace_ *)v26(a4, &v50, v21);
      uint64_t v44 = 0;
      uint64_t v45 = "";
      uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v28 && *v28)
      {
        uint64_t v29 = *((void *)v28 + 1);
        do
        {
          if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
            uint64_t v30 = (const char *)v29;
          }
          else {
            uint64_t v30 = *(const char **)(v29 + 8);
          }
          uint64_t v42 = 0;
          uint64_t v43 = "";
          uint64_t v31 = v42;
          size_t v32 = v43;
          uint64_t v42 = 0;
          uint64_t v43 = "";
          char v33 = v44;
          double v34 = v45;
          uint64_t v44 = v31;
          uint64_t v45 = v32;
          unint64_t v50 = v31 & 0xFFFFFFFFFFFFFFFELL | v33 & 1;
          v51[0] = v34;
          re::StringID::destroyString((re::StringID *)&v50);
          re::StringID::destroyString((re::StringID *)&v42);
          uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t *))(v47 + 104))(a4, v46, *(void *)(a1 + 48), &v44);
          unsigned int v27 = (_anonymous_namespace_ *)v23(a1, v30, 0, v35, v49, v48, 0);
          v29 += 48;
        }
        while (v29 != *((void *)v28 + 1) + 48 * *v28);
      }
      re::StringID::destroyString((re::StringID *)&v44);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v49);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    int v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, char *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    if (*((_WORD *)result + 11) == 4)
    {
      uint64_t v7 = *result;
      *a3 = v7;
      LOBYTE(v8) = 6;
      DWORD1(v8) = 0;
      *((void *)&v8 + 1) = a2;
      uint64_t v9 = 0;
      uint64_t v10 = v7;
      uint64_t v11 = 0;
      uint64_t v12 = result;
      re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v8);
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

void re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 128);
  unint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(v3 + 48 * (v4 - 1) + 40);
  if (!v5)
  {
    uint64_t v7 = 0;
LABEL_7:
    if (*(_WORD *)(v7 + 22) == 3)
    {
      LOBYTE(v9[0]) = 7;
      DWORD1(v9[0]) = a2;
      *((void *)&v9[0] + 1) = "entry";
      v9[1] = xmmword_23436C460;
      uint64_t v10 = 0;
      uint64_t v11 = v7;
      re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, v9);
    }
    else
    {
    }
    return;
  }
  uint64_t v6 = *(void *)(v3 + 48 * (v4 - 1) + 32);
  if (*(_DWORD *)v5 > v6)
  {
    uint64_t v7 = *(void *)(v5 + 8) + 24 * v6;
    goto LABEL_7;
  }
  if (v13) {
    long long v8 = *(unsigned char **)&v14[7];
  }
  else {
    long long v8 = v14;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Index out of range.", (re::DynamicString *)&v15, v8);
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
}

unsigned int *re::serializeDynamicString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, void *a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (BOOL v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    unint64_t v30 = 0;
    BOOL result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v30);
    if (!result) {
      return result;
    }
    if (v30) {
    int v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    goto LABEL_34;
  }
  unint64_t v21 = a4[1];
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  unint64_t v30 = v22;
  BOOL result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v30);
  if (result)
  {
    unint64_t v23 = v30;
    if (v23 <= (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
    {
      if (!*a4)
      {
        *a4 = *(void *)(a1 + 48);
        re::DynamicString::setCapacity(a4, v23 + 1);
      }
      re::DynamicString::resize(a4, v23, 0);
      if (v23)
      {
        if (a4[1]) {
          uint64_t v29 = (char *)a4[2];
        }
        else {
          uint64_t v29 = (char *)a4 + 9;
        }
      }
      int v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_34:
      return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
    }
    (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
    return 0;
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v21);
  if (v21[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)&v22);
    if (*(_DWORD *)(v19 + 88) || (re::TypeRegistry::typeInfo(v18[0], *(void *)(v19 + 72), v23), v23[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, v18, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v18, *a3, a3[2]);
  if (v20)
  {
    for (unint64_t i = 0; i < v20; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v18, i, (uint64_t)&v16);
      if (*(unsigned char *)(v17 + 28))
      {
        uint64_t v10 = *(void *)(v17 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v17 + 32);
        uint64_t v12 = a2 + *(unsigned int *)(v17 + 24);
        re::TypeRegistry::typeInfo(v16, *(void *)v17, v23);
        re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v24);
        if (a1[64]
          || (uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, v12, v15, v15, a4), (result & 1) == 0))
        {
          uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a3);
          if (v13)
          {
            uint64_t v14 = (_DWORD *)(result + 16);
            while (i != *v14)
            {
              v14 += 6;
              if (!--v13) {
                goto LABEL_21;
              }
            }
            if (!a1[64]) {
              uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, *((void *)v14 - 1), v11, v12, v15, v15, a4);
            }
          }
        }
      }
LABEL_21:
      ;
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v52);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v48);
  if (v48[0])
  {
    if (!v52[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v49)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
    }
    if (v53 == v49)
    {
      uint64_t v18 = *v55;
      uint64_t v19 = *v51;
      if ((unsigned __int16)*v55 == (unsigned __int16)*v51)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v53, (const re::TypeInfo *)&v49, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, &v53, a5);
      goto LABEL_15;
    }
    if (v54 == v50)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, &v53, &v49, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v53)[1];
      re::TypeInfo::name((re::TypeInfo *)&v49);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v47, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v45, *a4, a4[2]);
  if (v46)
  {
    for (unint64_t i = 0; i < v46; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v45, i, (uint64_t)v43);
      if (*(unsigned char *)(v44 + 28))
      {
        uint64_t v29 = *(void *)(v44 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v44 + 32);
        uint64_t v31 = *(re **)(*a4 + 856);
        if (!v31
          || (uint64_t v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v43),
              v31 == -1))
        {
          uint64_t v35 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v57 = v36;
            __int16 v58 = 2080;
            uint64_t v59 = v29;
            _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          uint64_t v37 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
          re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v57 + 4);
          uint64_t result = re::internal::translateType(v37, (const re::TypeRegistry *)v41, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v47, (int)v31, (uint64_t)v41);
          uint64_t v32 = a2 + *(unsigned int *)(v42 + 24);
          re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
          re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v57 + 4);
          re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
          re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v57 + 4);
          if (*(unsigned char *)(a1 + 64)
            || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, v32, v40, v39, a5), (result & 1) == 0))
          {
            uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a4);
            if (v33)
            {
              double v34 = (_DWORD *)(result + 16);
              while (i != *v34)
              {
                v34 += 6;
                if (!--v33) {
                  goto LABEL_35;
                }
              }
              uint64_t v38 = *((void *)v34 - 1);
              re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
              re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v57 + 4);
              re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
              uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v57 + 4);
              if (!*(unsigned char *)(a1 + 64)) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v38, v30, v32, v40, v39, a5);
              }
            }
          }
        }
      }
LABEL_35:
      ;
    }
  }
  return result;
}

unsigned int *re::serializeBool<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, BOOL *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeChar<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI8<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI16<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI32<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI64<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU8<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU16<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU32<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _DWORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU64<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, void *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeFloat<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  return re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, a4, a7);
}

unsigned int *re::serializeDouble<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  return re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, a4, a7);
}

unsigned int *re::serializeCString<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_23:
      return 0;
    }
    uint64_t v20 = **((void **)this + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 != (unsigned __int16)v21) {
      goto LABEL_23;
    }
    BOOL v23 = WORD1(v20) == WORD1(v21);
    uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
    BOOL v23 = v23 && v22 == 0;
    if (!v23) {
      goto LABEL_23;
    }
  }
LABEL_4:
  if (a7)
  {
    int v42 = 0;
    unsigned int v18 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v42);
    uint64_t result = 0;
    if (!v18) {
      return result;
    }
    if (!v42) {
      goto LABEL_12;
    }
    if (v42 != 1)
    {
      size_t v41 = 0;
      if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v41))
      {
        if (v41) {
      }
        }
LABEL_12:
      goto LABEL_47;
    }
    goto LABEL_17;
  }
  int v42 = 2 * (*a4 != 0);
  uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v42);
  if (!result) {
    return result;
  }
  if (v42)
  {
    if (v42 == 2)
    {
      if (*a4) {
        size_t v24 = strlen(*a4);
      }
      else {
        size_t v24 = 0;
      }
      size_t v41 = v24;
      if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v41))
      {
        uint64_t v25 = (char *)*a4;
        unint64_t v26 = v41;
        if (!*a4 || v41 != v24)
        {
          if (v25)
          {
            (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
            *a4 = 0;
          }
          if (v26 > (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
          {
            (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
            return 0;
          }
          uint64_t v37 = v26 == -1;
          uint64_t v38 = v37 << 63 >> 63;
          if (v38 != v37 || v38 < 0)
          {
            return 0;
          }
          uint64_t v25 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v26 + 1, 0);
          *a4 = v25;
          size_t v24 = v26;
        }
        if (v24)
        {
          uint64_t v25 = (char *)*a4;
        }
        else
        {
          unint64_t v26 = 0;
        }
        v25[v26] = 0;
      }
    }
    else if (v42 == 1)
    {
LABEL_17:
      return 0;
    }
  }
  else if (*a4)
  {
    (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    *a4 = 0;
  }
  int v39 = *(unsigned __int8 *)(a1 + 64);
  if (!*a4 || !*(unsigned char *)(a1 + 64)) {
    return (unsigned int *)(v39 == 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
  *a4 = 0;
LABEL_47:
  int v39 = *(unsigned __int8 *)(a1 + 64);
  return (unsigned int *)(v39 == 0);
}

unsigned int *re::serializeStringID<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (unsigned int v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    unint64_t v43 = 0;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v43);
    if (!result) {
      return result;
    }
    if (v43) {
    goto LABEL_26;
    }
  }
  unint64_t v42 = 0;
  if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v42))
  {
    unint64_t v20 = v42;
    if (v42)
    {
      if (v20 > (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
      {
        (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
        return 0;
      }
      uint64_t v32 = v20 == -1;
      uint64_t v33 = v32 << 63 >> 63;
      if (v33 != v32 || v33 < 0)
      {
        return 0;
      }
      uint64_t v34 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), v20 + 1, 0);
      v34[v20] = 0;
      uint64_t v40 = 0;
      size_t v41 = "";
      uint64_t v36 = v40;
      uint64_t v37 = v41;
      uint64_t v40 = 0;
      size_t v41 = "";
      uint64_t v38 = *a4;
      uint64_t v39 = a4[1];
      *a4 = v36;
      a4[1] = (uint64_t)v37;
      unint64_t v43 = v36 & 0xFFFFFFFFFFFFFFFELL | v38 & 1;
      uint64_t v44 = v39;
      re::StringID::destroyString((re::StringID *)&v43);
      re::StringID::destroyString((re::StringID *)&v40);
      (*(void (**)(void, char *))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v34);
    }
    else
    {
      uint64_t v40 = 0;
      size_t v41 = "";
      uint64_t v31 = a4[1];
      unint64_t v43 = *a4 & 1;
      uint64_t v44 = v31;
      *a4 = 0;
      a4[1] = (uint64_t)"";
      re::StringID::destroyString((re::StringID *)&v43);
      re::StringID::destroyString((re::StringID *)&v40);
    }
LABEL_26:
    return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
  }
  return 0;
}

unsigned int *re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v25 = **((void **)this + 2);
    uint64_t v26 = **((void **)a6 + 2);
    if ((unsigned __int16)v25 == (unsigned __int16)v26)
    {
      BOOL v28 = WORD1(v25) == WORD1(v26);
      uint64_t v27 = (v26 ^ v25) & 0xFFFFFF00000000;
      BOOL v28 = v28 && v27 == 0;
      if (v28) {
        goto LABEL_4;
      }
    }
LABEL_33:
    return 0;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_33;
  }
LABEL_4:
  if (a7)
  {
    uint64_t v29 = 0;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v29);
    if (!result) {
      return result;
    }
    if (v29) {
  }
    }
  else
  {
    uint64_t v14 = **((void **)this + 2);
    uint64_t v29 = *(void **)this;
    uint64_t v30 = v14;
    LODWORD(v31) = -1;
    *(void *)long long buf = 0x258C98EAAF29A10ALL;
    *(void *)&uint8_t buf[8] = "CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[]((uint64_t *)&v29, buf);
    re::StringID::destroyString((re::StringID *)buf);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    unint64_t v33 = 0;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v33);
    if (!result) {
      return result;
    }
    unsigned int v18 = *(void **)(a1 + 56);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v29 = v18;
    uint64_t v30 = 0;
    re::DynamicString::setCapacity(&v29, 0);
    if (v33)
    {
      re::DynamicString::resize(&v29, v33, 0);
      if (v30) {
        uint64_t v19 = v31;
      }
      else {
        uint64_t v19 = (char *)&v30 + 1;
      }
    }
    if (v30) {
      unint64_t v20 = v31;
    }
    else {
      unint64_t v20 = (char *)&v30 + 1;
    }
    uint64_t v21 = (re *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *))(v16 + 80))(*(void *)(a1 + 48), v17, v16, a4, v20);
    if ((v21 & 1) == 0)
    {
      uint64_t v22 = *re::foundationSerializationLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        if (v30) {
          uint64_t v23 = v31;
        }
        else {
          uint64_t v23 = (char *)&v30 + 1;
        }
        uint64_t v24 = re::TypeInfo::name(this)[1];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v23;
        __int16 v35 = 2080;
        uint64_t v36 = v24;
        _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_INFO, "Failed to parse \"%s\": \"%s\" (type %s) using deserialization callback - skipping.", buf, 0x20u);
      }
    }
    if (v29 && (v30 & 1) != 0) {
      (*(void (**)(void))(*v29 + 40))();
    }
  }
  return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, char *a2, int *a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    uint64_t v7 = result;
    int v8 = *((unsigned __int16 *)result + 11);
    if (*((_WORD *)result + 11))
    {
      if (v8 != 3
        || (int *)(*((void *)result + 1) + 48 * *result) == rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::FindMember(result, "@ref"))
      {
        int v8 = 2;
        uint64_t v9 = 1;
      }
      else
      {
        uint64_t v9 = 1;
        int v8 = 1;
      }
    }
    else
    {
      uint64_t v9 = *((unsigned __int16 *)result + 11);
    }
    *a3 = v8;
    LOBYTE(v10) = 9;
    DWORD1(v10) = 0;
    *((void *)&v10 + 1) = a2;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
    uint64_t v13 = 0;
    uint64_t v14 = v7;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v10);
    return (unsigned int *)1;
  }
  return result;
}

BOOL re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(uint64_t a1, char *a2, const re::TypeInfo *a3, char **a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_15:
      return 0;
    }
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 != (unsigned __int16)v14) {
      goto LABEL_15;
    }
    BOOL v16 = WORD1(v13) == WORD1(v14);
    uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
    BOOL v16 = v16 && v15 == 0;
    if (!v16) {
      goto LABEL_15;
    }
  }
LABEL_4:
  int v50 = 0;
  if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v50))
  {
    if (v50 == 1)
    {
      unsigned int v49 = 0;
      re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((unsigned int *)(a1 + 24), &v49);
      if (!*(unsigned char *)(a1 + 64))
      {
        unsigned int v23 = v49;
        if (*(void *)(a1 + 408) <= (unint64_t)v49)
        {
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v49, (uint64_t)&v45);
          if (v45 == *(void *)this)
          {
            uint64_t v24 = **((void **)this + 2);
            if (v46 == (unsigned __int16)v24 && v47 == WORD1(v24) && ((v48 ^ HIDWORD(v24)) & 0xFFFFFF) == 0)
            {
              if ((a7 & 1) == 0)
              {
                if (*a4)
                {
                  unint64_t v42 = *a4;
                  if (v42 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23))
                  {
                    (*(void (**)(void, char *))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), *a4);
                    *a4 = 0;
                  }
                }
                *a4 = (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23);
                re::internal::SharedObjectGraph::addReference((void *)(a1 + 336), v23);
              }
              goto LABEL_36;
            }
          }
          uint64_t v25 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v23, (uint64_t)&v45);
          uint64_t v43 = *((void *)re::TypeRegistry::typeName(v25, &v45) + 1);
        }
      }
    }
    else
    {
      if (!v50)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
            *a4 = 0;
          }
        }
LABEL_36:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if ((a7 & 1) == 0 && *a4)
      {
        (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
        *a4 = 0;
      }
      uint64_t v45 = 0;
      if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, &v45))
      {
        uint64_t v36 = v45;
        uint64_t v37 = v45 == -1;
        uint64_t v38 = v37 << 63 >> 63;
        if (v38 == v37 && (v38 & 0x8000000000000000) == 0)
        {
          uint64_t v39 = (char *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v45 + 1, 0);
          uint64_t v40 = (uint64_t)v39;
          if ((a7 & 1) == 0) {
            *a4 = v39;
          }
          if (v36) {
          *(unsigned char *)(v40 + v36) = 0;
          }
          uint64_t v41 = **((void **)this + 2);
          *(void *)&long long v44 = *(void *)this;
          *((void *)&v44 + 1) = v41;
          re::internal::SharedObjectGraph::addObject(a1 + 336, v40, &v44);
          goto LABEL_36;
        }
      }
    }
  }
  return 0;
}

BOOL re::SerializerV1<re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, int a7)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v25 = **((void **)this + 2);
    uint64_t v26 = **((void **)a6 + 2);
    if ((unsigned __int16)v25 == (unsigned __int16)v26)
    {
      BOOL v28 = WORD1(v25) == WORD1(v26);
      uint64_t v27 = (v26 ^ v25) & 0xFFFFFF00000000;
      BOOL v28 = v28 && v27 == 0;
      if (v28) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    int v15 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v29 = re::TypeInfo::name(this), v30 = re::TypeInfo::name(a6), !re::StringID::operator==(v29, v30))))
  {
    return 0;
  }
  int v15 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v88, (uint64_t)&buf + 8);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v86, (uint64_t)&buf + 8);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    BOOL v16 = *v89;
    v85[0] = (re *)v88[0];
    v85[1] = v16;
    if (v88[0]) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v77 = re::TypeInfo::name(this)[1];
    uint64_t v22 = "Failed to get actual type of polymorphic object. Type \"%s\".";
    uint64_t v23 = a1;
    uint64_t v24 = a2;
LABEL_16:
    return 0;
  }
  re::internal::actualType(a4, (void **)this, v85);
  if (!v85[0]) {
    goto LABEL_15;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, v85, &buf);
  re::TypeInfo::TypeInfo((uint64_t)v83, (uint64_t)&buf + 8);
  int v82 = 0;
  if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v82))
  {
    if (v82 != 1)
    {
      if (!v82)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        goto LABEL_111;
      }
      if (isPointerToPolymorphicType)
      {
        if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0))
        {
          uint64_t v42 = *(void *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
          if (*(_DWORD *)v42)
          {
            uint64_t v43 = *(char **)(v42 + 8);
            if ((*((_WORD *)v43 + 11) & 0x1000) != 0) {
              long long v44 = v43;
            }
            else {
              long long v44 = (char *)*((void *)v43 + 1);
            }
            if (v44)
            {
              uint64_t v45 = *v44;
              if (*v44)
              {
                char v46 = v44[1];
                if (v46)
                {
                  unsigned __int16 v47 = (unsigned __int8 *)(v44 + 2);
                  do
                  {
                    uint64_t v45 = 31 * v45 + v46;
                    int v48 = *v47++;
                    char v46 = v48;
                  }
                  while (v48);
                }
              }
            }
            else
            {
              uint64_t v45 = 0;
            }
            uint64_t v56 = 2 * v45;
            __s2 = v44;
            v94[0] = 2 * v45;
            v94[1] = v44;
            int v57 = *((_DWORD *)v87 + 20);
            uint64_t v58 = (v57 - 1);
            if (v57 == 1) {
              goto LABEL_80;
            }
            uint64_t v59 = 0;
            while (1)
            {
              re::TypeInfo::derivedClass((re::TypeInfo *)v86, v59, (uint64_t)&buf);
              uint64_t v60 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)&buf);
              if ((*v60 ^ (unint64_t)v56) <= 1)
              {
                uint64_t v61 = (const char *)v60[1];
                if (v61 == __s2 || !strcmp(v61, __s2)) {
                  break;
                }
              }
              if (v58 == ++v59) {
                goto LABEL_80;
              }
            }
            uint64_t v62 = *v96;
            uint64_t v92 = (re *)buf;
            uint64_t v93 = v62;
            if (!(void)buf)
            {
LABEL_80:
              unint64_t v63 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v86);
              if ((*v63 ^ (unint64_t)v56) > 1
                || (unint64_t v63 = (uint64_t *)v63[1], v63 != (uint64_t *)__s2)
                && (unint64_t v63 = (uint64_t *)strcmp((const char *)v63, __s2), v63)
                || (uint64_t v64 = *v87, v92 = v86[0], v93 = v64, !v86[0]))
              {
                uint64_t v66 = *re::foundationSerializationLogObjects((re *)v63);
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = __s2;
                  _os_log_error_impl(&dword_233120000, v66, OS_LOG_TYPE_ERROR, "Skipping unknown polymorphic type. Type name = \"%s\"", (uint8_t *)&buf, 0xCu);
                  if (a7) {
                    goto LABEL_110;
                  }
                }
                else if (a7)
                {
LABEL_110:
                  re::StringID::destroyString((re::StringID *)v94);
                  goto LABEL_111;
                }
                if (*a4)
                {
                  re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
                  *a4 = 0;
                }
                goto LABEL_110;
              }
            }
            if ((a7 & 1) == 0 && *a4)
            {
              re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
              *a4 = 0;
            }
            re::TypeRegistry::typeInfo(v86[0], &v92, &buf);
            re::TypeInfo::TypeInfo((uint64_t)v91, (uint64_t)&buf + 8);
            if (v15)
            {
              int v65 = *(re::TypeRegistry **)(a1 + 272);
            }
            else
            {
              int v65 = *(re::TypeRegistry **)(a1 + 272);
              if (*(re::TypeRegistry **)this == v65)
              {
                re::TypeInfo::operator=((uint64_t)v83, (uint64_t)v91);
                uint64_t v69 = v92;
                uint64_t v70 = v93;
                goto LABEL_105;
              }
            }
            uint64_t v67 = re::TypeInfo::name((re::TypeInfo *)v91);
            uint64_t v68 = re::TypeRegistry::typeInfo(v65, (const re::StringID *)v67, &buf);
            if (!(_BYTE)buf)
            {
              uint64_t v72 = *re::foundationSerializationLogObjects((re *)v68);
              if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v73 = re::TypeInfo::name((re::TypeInfo *)v91)[1];
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v73;
                _os_log_impl(&dword_233120000, v72, OS_LOG_TYPE_DEFAULT, "No matching runtime type found for serialized polymorphic type \"%s\". Skipping unknown type.", (uint8_t *)&buf, 0xCu);
              }
              *(void *)&long long buf = 0;
              *((void *)&buf + 1) = 0xFFFFFFFFLL;
              (*(void (**)(uint64_t, void, long long *))(*(void *)a1 + 16))(a1, 0, &buf);
              if (!*(unsigned char *)(a1 + 64)) {
                (*(void (**)(uint64_t, char *, void, void, re **, re **, uint64_t))(*(void *)a1 + 72))(a1, __s2, 0, 0, v91, v91, 1);
              }
              goto LABEL_109;
            }
            re::TypeInfo::operator=((uint64_t)v83, (uint64_t)&buf + 8);
            uint64_t v69 = (re *)v83[0];
            uint64_t v70 = *v84;
LABEL_105:
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)v83, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            uint64_t v75 = Instance;
            if ((a7 & 1) == 0)
            {
              *a4 = (char *)Instance;
              *(void *)&long long buf = v69;
              *((void *)&buf + 1) = v70;
              re::internal::setActualType(a4, (re **)this, (re **)&buf);
            }
            v90[0] = v69;
            v90[1] = v70;
            (*(void (**)(uint64_t, void **, void *))(*(void *)a1 + 16))(a1, v75, v90);
            if (!*(unsigned char *)(a1 + 64)) {
              (*(void (**)(uint64_t, char *, void, void **, void *, re **, BOOL))(*(void *)a1 + 72))(a1, __s2, 0, v75, v83, v91, v75 == 0);
            }
LABEL_109:
            (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
            goto LABEL_110;
          }
        }
LABEL_111:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if (!a7)
      {
        uint64_t v51 = *a4;
        if (!*a4) {
          uint64_t v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v88, *(re::Allocator **)(a1 + 48), 0);
        }
        uint64_t v52 = 0;
        *a4 = v51;
        goto LABEL_62;
      }
      unsigned int v49 = *(re::TypeRegistry **)(a1 + 272);
      if ((re::TypeRegistry *)v88[0] != v49)
      {
        int v50 = re::TypeInfo::name((re::TypeInfo *)v88);
        re::TypeRegistry::typeInfo(v49, (const re::StringID *)v50, &buf);
        if (!(_BYTE)buf)
        {
          uint64_t v51 = 0;
          uint64_t v52 = 1;
          goto LABEL_62;
        }
        re::TypeInfo::operator=((uint64_t)v88, (uint64_t)&buf + 8);
      }
      uint64_t v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v88, *(re::Allocator **)(a1 + 48), 0);
      uint64_t v52 = 0;
LABEL_62:
      uint64_t v53 = *v89;
      *(void *)&long long v79 = v88[0];
      *((void *)&v79 + 1) = v53;
      re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v51, &v79);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, char *, void, char *, void *, re **, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, v51, v88, v86, v52);
      }
      if (*(unsigned char *)(a1 + 336))
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      goto LABEL_111;
    }
    LODWORD(v94[0]) = 0;
    re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((unsigned int *)(a1 + 24), v94);
    if (!*(unsigned char *)(a1 + 64))
    {
      unsigned int v32 = v94[0];
      if (*(void *)(a1 + 408) > (unint64_t)LODWORD(v94[0]))
      {
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v94[0], (uint64_t)v81);
        if (!re::internal::areCompatible((re **)this, (uint64_t)v81))
        {
          uint64_t v54 = re::TypeInfo::name((re::TypeInfo *)v88)[1];
          int v55 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)&buf);
          LOBYTE(v77) = v54;
          re::TypeRegistry::typeName(v55, &buf);
          uint64_t v22 = "Invalid reference. Objects are not compatible. Expected type \"%s\". Actual type \"%s\".";
          goto LABEL_68;
        }
        if (a7) {
          goto LABEL_111;
        }
        if (*a4)
        {
          uint64_t v33 = *a4;
          if (v33 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32))
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        uint64_t v34 = re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32);
        uint64_t v35 = (char **)v34;
        *a4 = (char *)v34;
        if ((*((unsigned char *)v84 + 49) & 2) != 0)
        {
          uint64_t v71 = (void (*)(uint64_t))v84[4];
          if (v71) {
            v71(v34);
          }
          re::internal::SharedObjectGraph::addReference((void *)(a1 + 336), v32);
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v91);
          if (!v91[0])
          {
            LOBYTE(v77) = v32;
            uint64_t v22 = "TypeID for shared object at index %d is invalid.";
            goto LABEL_68;
          }
          re::TypeRegistry::typeInfo(v91[0], v91, &buf);
          if (!(_BYTE)buf)
          {
            LOBYTE(v77) = v32;
            uint64_t v22 = "No TypeInfo found for shared object at index %d.";
            goto LABEL_68;
          }
          uint64_t v36 = re::TypeInfo::createInstance((re::TypeInfo *)((char *)&buf + 8), *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          *a4 = (char *)v36;
          if ((re::TypeInfo::copy((re::TypeInfo *)((char *)&buf + 8), v36, v35, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264)) & 1) == 0)
          {
            uint64_t v77 = re::TypeInfo::name((re::TypeInfo *)((char *)&buf + 8))[1];
            uint64_t v22 = "Failed to copy non-shareable object of type '%s'.";
LABEL_68:
            uint64_t v23 = a1;
            uint64_t v24 = 0;
            goto LABEL_16;
          }
        }
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v80);
        re::TypeInfo::setActualTypeForPointer((void **)this, (uint64_t)a4, v80);
        goto LABEL_111;
      }
      LOBYTE(v77) = v94[0];
      uint64_t v22 = "Invalid reference ID for shared object: %u";
      goto LABEL_68;
    }
  }
  return 0;
}

unsigned int *re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(unsigned int *result, _DWORD *a2)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v3 = (_anonymous_namespace_ *)result;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)result, 0, 0);
    if (result)
    {
    }
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720E10;
  re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720DA8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 1;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        uint64_t v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (*(void *)this == *(void *)(a1 + 272))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **((void **)this + 2) | 0xFFFFFFFF00000000);
        uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **(void **)(a2 + 16) | 0xFFFFFFFF00000000);
    uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    if (v3) {
      return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t))v3;
    }
  }
  return v2;
}

uint64_t re::serializeType<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v255 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12))
    {
LABEL_304:
      return 0;
    }
    uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 16);
    }
    else {
      int v20 = -1;
    }
    uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 16);
    }
    else {
      int v22 = -1;
    }
    if (v20 != v22)
    {
      long long v26 = re::TypeInfo::name(this);
      uint64_t v27 = re::TypeInfo::name(a6);
      if (re::StringID::operator==(v26, v27))
      {
        uint64_t v28 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        if (v28) {
          int v29 = *(_DWORD *)(v28 + 16);
        }
        else {
          int v29 = -1;
        }
        re::TypeInfo::atVersion(this, v29, (unsigned __int8 *)&v239);
        if ((_BYTE)v239)
        {
          if (a7) {
            Instance = 0;
          }
          else {
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)&v240, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          }
          if (*(unsigned char *)(a1 + 64)
            || ((*(void (**)(uint64_t, char *, const re::TypeInfo *, void **, uint64_t *, re::TypeInfo *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, Instance, &v240, a6, a7), *(unsigned char *)(a1 + 64)))
          {
            if (!Instance) {
              return 0;
            }
            uint64_t v125 = *(re::Allocator **)(a1 + 48);
            uint64_t v126 = *(void **)(a1 + 264);
            uint64_t v127 = (unint64_t *)&v240;
            uint64_t v128 = Instance;
LABEL_189:
            re::TypeInfo::releaseInstance((re::TypeInfo *)v127, v128, v125, v126);
            return 0;
          }
          if ((a7 & 1) == 0)
          {
            re::TypeInfo::TypeInfo((uint64_t)v236, (uint64_t)&v240);
            re::internal::upgradeObject(Instance, v236, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
            if (!buf[0])
            {
              if (v252) {
                LOBYTE(v217) = v254;
              }
              else {
                long long v217 = v253;
              }
              if (!buf[0] && v251 && (v252 & 1) != 0)
              {
                uint64_t v177 = *(void (**)(void))(*(void *)v251 + 40);
LABEL_324:
                v177();
              }
              return 0;
            }
          }
          return 1;
        }
        uint64_t v62 = re::TypeInfo::name(a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        LOBYTE(v235) = v62;
        uint64_t v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
      }
      else
      {
        uint64_t v54 = re::TypeInfo::name(a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
        re::TypeInfo::name(this);
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
        LOBYTE(v235) = v54;
        uint64_t v30 = "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.";
      }
LABEL_256:
      uint64_t v153 = a1;
      unsigned int v154 = a2;
      goto LABEL_257;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_10;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v71 = **((void **)this + 2);
        uint64_t v72 = **((void **)a6 + 2);
        if ((unsigned __int16)v71 == (unsigned __int16)v72)
        {
          BOOL v18 = WORD1(v71) == WORD1(v72);
          uint64_t v73 = (v72 ^ v71) & 0xFFFFFF00000000;
          if (v18 && v73 == 0) {
            goto LABEL_22;
          }
        }
        goto LABEL_304;
      }
      if (!re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_304;
      }
LABEL_22:
      uint64_t v23 = re::TypeInfo::name(this);
      unint64_t v24 = (unint64_t)*v23 >> 1;
      if (v24 <= 0xCA3DEFB5)
      {
        if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
        {
          if ((unint64_t)*v23 >> 1 <= 0x2E9355)
          {
            if (v24 != 104431)
            {
              if (v24 == 3029738)
              {
              }
LABEL_352:
              uint64_t v235 = re::TypeInfo::name(this)[1];
              uint64_t v30 = "Unsupported basic type \"%s\".";
              goto LABEL_256;
            }
            goto LABEL_297;
          }
          if (v24 == 3052374)
          {
          }
          uint64_t v166 = 3327612;
          goto LABEL_283;
        }
        if ((unint64_t)*v23 >> 1 > 0xB0F77BD0)
        {
          if (v24 == 2969009105)
          {
            return (uint64_t)re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, (double *)a4, a7);
          }
          else
          {
            if (v24 != 3111160798) {
              goto LABEL_352;
            }
          }
        }
        if (v24 == 97526364)
        {
          return (uint64_t)re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, (float *)a4, a7);
        }
        uint64_t v58 = 109413500;
        goto LABEL_196;
      }
      if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
      {
        if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
        {
          if (v24 == 0x18E6A9A093)
          {
          }
          else
          {
            if (v24 != 0x303EE86A734) {
              goto LABEL_352;
            }
          }
        }
        if (v24 == 0x303EE8780EELL)
        {
        }
        if (v24 != 0x303EE88E58DLL) {
          goto LABEL_352;
        }
LABEL_294:
      }
      if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
      {
        if (v24 == 0x16749DFF03)
        {
LABEL_297:
        }
        uint64_t v166 = 0x16749F63A2;
LABEL_283:
        if (v24 != v166) {
          goto LABEL_352;
        }
      }
      if (v24 == 3393056694) {
        goto LABEL_294;
      }
      uint64_t v58 = 0x16749D2549;
LABEL_196:
      if (v24 != v58) {
        goto LABEL_352;
      }
    case 2:
      if (this == a6) {
        goto LABEL_246;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v75 = **((void **)this + 2);
        uint64_t v76 = **((void **)a6 + 2);
        if ((unsigned __int16)v75 == (unsigned __int16)v76
          && WORD1(v75) == WORD1(v76)
          && ((v76 ^ v75) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_125;
        }
        int v31 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_125:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v155 = **((void **)this + 2);
            uint64_t v156 = **((void **)a6 + 2);
            if ((unsigned __int16)v155 == (unsigned __int16)v156
              && ((BOOL v18 = WORD1(v155) == WORD1(v156), v157 = (v156 ^ v155) & 0xFFFFFF00000000, v18)
                ? (BOOL v158 = v157 == 0)
                : (BOOL v158 = 0),
                  v158))
            {
LABEL_246:
              BOOL v79 = 1;
            }
            else
            {
              BOOL v79 = 0;
            }
          }
          else
          {
            BOOL v79 = re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            *(void *)long long buf = 0;
            uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)buf);
            if (!result) {
              return result;
            }
            if (*(void *)buf) {
            return *(unsigned char *)(a1 + 64) == 0;
            }
          }
          unint64_t v239 = 0;
          if (!re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v239))return 0; {
          unint64_t v159 = v239;
          }
          if (!v239)
          {
            uint64_t v30 = "Failed to read enum constant. String is empty.";
            goto LABEL_239;
          }
          if (v239 >= 0x401)
          {
            LOBYTE(v235) = v239;
            uint64_t v30 = "Failed to read enum constant. String is too long. Length: %zu";
            goto LABEL_239;
          }
          BOOL v175 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), v239 + 1, 0);
          v175[v159] = 0;
          if (*(unsigned char *)(a1 + 64))
          {
LABEL_323:
            uint64_t v177 = *(void (**)(void))(**(void **)(a1 + 56) + 40);
            goto LABEL_324;
          }
          uint64_t v194 = *v175;
          if (*v175)
          {
            char v195 = v175[1];
            if (v195)
            {
              uint64_t v196 = (unsigned __int8 *)(v175 + 2);
              do
              {
                uint64_t v194 = 31 * v194 + v195;
                int v197 = *v196++;
                char v195 = v197;
              }
              while (v197);
            }
          }
          *(void *)long long buf = 2 * v194;
          *(void *)&uint8_t buf[8] = v175;
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(a6, (const re::TypeInfo *)buf, v176);
          re::StringID::destroyString((re::StringID *)buf);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            v219 = *re::foundationSerializationLogObjects(v199);
            if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
            {
              uint64_t v220 = re::TypeInfo::name(a6)[1];
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v175;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v220;
              _os_log_impl(&dword_233120000, v219, OS_LOG_TYPE_INFO, "String \"%s\" is not a valid enum constant of type \"%s\" - skipping.", buf, 0x16u);
            }
            uint64_t v203 = 0;
          }
          else if (v79)
          {
            uint64_t v200 = re::TypeInfo::enumConstants(this);
            unint64_t v202 = EnumConstantIndex - v201;
            if (EnumConstantIndex >= v201)
            {
              uint64_t v227 = re::TypeInfo::renamedEnumConstants(this);
              if (v228 <= v202)
              {
                re::internal::assertLog((re::internal *)6, v228, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v202, v228);
                _os_crash();
                __break(1u);
                JUMPOUT(0x233F12280);
              }
              uint64_t v203 = (const void *)(v227 + 24 * v202);
            }
            else
            {
              uint64_t v203 = (const void *)(v200 + 24 * EnumConstantIndex);
            }
          }
          else
          {
            v221 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (!v221
              || (uint64_t v203 = (const void *)re::internal::TypeTranslationTable::translateSerializedEnum(v221, a6, EnumConstantIndex, this)) == 0)
            {
              re::TypeInfo::name(this);
              goto LABEL_323;
            }
          }
          (*(void (**)(void, char *))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v175);
          if (v203) {
            memcpy(a4, v203, *(unsigned int *)(*((void *)this + 2) + 8));
          }
          return *(unsigned char *)(a1 + 64) == 0;
        }
        int v31 = *((unsigned __int8 *)this + 12);
      }
      if (v31 == *((unsigned __int8 *)a6 + 12))
      {
        uint64_t v77 = re::TypeInfo::name(this);
        uint64_t v78 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v77, v78)) {
          goto LABEL_125;
        }
      }
      goto LABEL_304;
    case 3:
      if (this == a6) {
        goto LABEL_132;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v80 = **((void **)this + 2);
        uint64_t v81 = **((void **)a6 + 2);
        if ((unsigned __int16)v80 == (unsigned __int16)v81
          && WORD1(v80) == WORD1(v81)
          && ((v81 ^ v80) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_132;
        }
        int v32 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_132;
        }
        int v32 = *((unsigned __int8 *)this + 12);
      }
      if (v32 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_304;
      }
LABEL_132:
      if (a7)
      {
        LOBYTE(Tag) = 0;
        re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, &Tag);
        if ((_BYTE)Tag)
        {
          int v82 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
          re::internal::translateType(v82, (const re::TypeRegistry *)&v239, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, 0, buf, buf, 1);
          }
        }
        char v83 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        v246[0] = (*(uint64_t (**)(uint64_t *))(*(void *)&buf[16] + 80))(a4) != 0;
        double v84 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, v246);
        if (v246[0])
        {
          unint64_t v85 = re::TypeInfo::createInstance((re::TypeInfo *)&v239, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          (*(void (**)(uint64_t *, void **))(*(void *)&buf[16] + 88))(a4, v85);
          re::TypeInfo::releaseInstance((re::TypeInfo *)&v239, v85, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          uint64_t v86 = (*(uint64_t (**)(uint64_t *))(*(void *)&buf[16] + 80))(a4);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, char *, void, uint64_t, unint64_t *, uint64_t *, void))(*(void *)a1 + 72))(a1, a2, 0, v86, &v239, &Tag, 0);
          }
        }
        else
        {
          (*(void (**)(uint64_t *, void, double))(*(void *)&buf[16] + 88))(a4, 0, v84);
        }
        char v83 = (_anonymous_namespace_ *)(a1 + 24);
      }
      return *(unsigned char *)(a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_148;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v87 = **((void **)this + 2);
        uint64_t v88 = **((void **)a6 + 2);
        if ((unsigned __int16)v87 == (unsigned __int16)v88)
        {
          BOOL v18 = WORD1(v87) == WORD1(v88);
          uint64_t v89 = (v88 ^ v87) & 0xFFFFFF00000000;
          if (v18 && v89 == 0) {
            goto LABEL_148;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_148;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_304;
      }
      uint64_t v91 = *((void *)this + 2);
      uint64_t v92 = *((void *)a6 + 2);
      int v93 = *(_DWORD *)(v92 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v91 + 84) & 0xFFFFFF) != 0)
      {
        if (!v93) {
          goto LABEL_304;
        }
LABEL_148:
        if (a7)
        {
          int64_t v94 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
          re::internal::translateType(v94, (const re::TypeRegistry *)&Tag, (uint64_t)&v239);
          uint64_t v95 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
          if (!v95) {
            goto LABEL_236;
          }
          long long v96 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v95;
          uint64_t v97 = *((void *)a6 + 2);
          int v98 = *(_DWORD *)(v97 + 84) & 0xFFFFFF;
          if (v98)
          {
            uint64_t v99 = 0;
            int v100 = 8;
          }
          else
          {
            uint64_t v99 = *(int *)(v97 + 88);
            int v100 = 4;
          }
          *(void *)long long buf = v99;
          uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
          uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, buf, v100);
          if (!result) {
            return result;
          }
          uint64_t v160 = *(void *)buf;
          if (v98) {
            BOOL v161 = *(void *)buf == 0;
          }
          else {
            BOOL v161 = 1;
          }
          char v162 = v161;
          if (v161)
          {
            if (!*(void *)buf) {
              goto LABEL_402;
            }
          }
          else
          {
            v242[0] = 0;
            v242[1] = (void *)0xFFFFFFFFLL;
            (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 16))(a1, 0, v242);
          }
          do
          {
            v96(a1, 0, 0, 0, &v239, &v239, 1);
            --v160;
          }
          while (v160);
          if (v162)
          {
LABEL_402:
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
        else
        {
          re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
          re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)this);
          uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
          if (!v101) {
            goto LABEL_237;
          }
          BOOL v102 = (void (*)(uint64_t, void, void, uint64_t, uint64_t *, unsigned char *, void))v101;
          uint64_t v103 = re::ArrayAccessor::size((re::ArrayAccessor *)v244, (char *)a4);
          unint64_t v238 = v103;
          int v104 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v104) {
            int v105 = 8;
          }
          else {
            int v105 = 4;
          }
          uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
          uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, &v238, v105);
          if (!result) {
            return result;
          }
          unint64_t v107 = v238;
          if (v103 != v238)
          {
            if ((*(_DWORD *)(v245 + 84) & 0xFFFFFF) == 0)
            {
              LOBYTE(v235) = v103;
              uint64_t v30 = "Invalid array size. Expected size = %zu, actual size = %zu";
              goto LABEL_239;
            }
            re::TypeRegistry::typeInfo(v244[0], *(void *)(v245 + 72), buf);
            re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
            unsigned int v108 = *(_DWORD *)(v241 + 8);
            if (!is_mul_ok(v108, v107)) {
              goto LABEL_176;
            }
            re::ArrayAccessor::reset((re::ArrayAccessor *)v244, (void **)a4, *(re::Allocator **)(a1 + 48), (const re::TypeInfo *)v107);
            uint64_t v103 = v107;
          }
          if (v104) {
            BOOL v212 = v103 == 0;
          }
          else {
            BOOL v212 = 1;
          }
          char v213 = v212;
          if (!v212)
          {
            uint64_t v214 = *a4;
            v237[0] = 0;
            v237[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v214, v237);
            uint64_t v103 = v107;
          }
          if (v103)
          {
            unint64_t v215 = 0;
            if (v107 <= 1) {
              unint64_t v107 = 1;
            }
            do
            {
              uint64_t v216 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v244, (char *)a4, v215);
              v102(a1, 0, 0, v216, &Tag, v246, 0);
              ++v215;
            }
            while (v107 != v215);
          }
          if (v213) {
            goto LABEL_402;
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        goto LABEL_402;
      }
      if (!v93 && *(_DWORD *)(v91 + 88) == *(_DWORD *)(v92 + 88)) {
        goto LABEL_148;
      }
      goto LABEL_304;
    case 5:
      if (this == a6) {
        goto LABEL_166;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v109 = **((void **)this + 2);
        uint64_t v110 = **((void **)a6 + 2);
        if ((unsigned __int16)v109 == (unsigned __int16)v110
          && WORD1(v109) == WORD1(v110)
          && ((v110 ^ v109) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_166;
        }
        int v33 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_166;
        }
        int v33 = *((unsigned __int8 *)this + 12);
      }
      if (v33 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_304;
      }
LABEL_166:
      if (a7)
      {
        uint64_t v111 = *(re::internal **)(a1 + 272);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::internal::translateType(v111, (const re::TypeRegistry *)&Tag, (uint64_t)&v239);
        uint64_t v112 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
        if (!v112) {
          goto LABEL_236;
        }
        BOOL v113 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v112;
        *(void *)long long buf = 0;
        uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
        unsigned int v114 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, buf, 0);
        uint64_t result = 0;
        if (v114)
        {
          for (uint64_t i = *(void *)buf; i; --i)
            v113(a1, 0, 0, 0, &v239, &v239, 1);
          goto LABEL_402;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
      re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)this);
      uint64_t v116 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
      if (!v116) {
        goto LABEL_237;
      }
      int v117 = (void (*)(uint64_t, void, void, uint64_t, uint64_t *, unsigned char *, void))v116;
      uint64_t v118 = (void *)(*(uint64_t (**)(uint64_t *))(v245 + 80))(a4);
      v242[0] = v118;
      uint64_t v106 = (_anonymous_namespace_ *)(a1 + 24);
      unsigned int v119 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, v242, 0);
      uint64_t result = 0;
      if (!v119) {
        return result;
      }
      uint64_t v120 = v242[0];
      if (v118 != v242[0])
      {
        re::TypeRegistry::typeInfo(v244[0], *(void *)(v245 + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        unsigned int v108 = *(_DWORD *)(v241 + 8);
        if (!is_mul_ok(v108, (unint64_t)v120))
        {
LABEL_176:
          LOBYTE(v235) = v108;
          uint64_t v30 = "Size overflow during deserialization. Element size = %zu, count = %zu";
          goto LABEL_239;
        }
        uint64_t v185 = *(void *)(a1 + 48);
        uint64_t v186 = *(void (**)(uint64_t *, unsigned char *, uint64_t, void *))(v245 + 88);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v244);
        v186(a4, buf, v185, v120);
      }
      if (*(void *)(v245 + 96))
      {
        if (v120)
        {
          for (unint64_t j = 0; j != v120; unint64_t j = (void *)((char *)j + 1))
          {
            uint64_t v188 = (*(uint64_t (**)(uint64_t *, void *))(v245 + 96))(a4, j);
            v117(a1, 0, 0, v188, &Tag, v246, 0);
          }
        }
      }
      else
      {
        BOOL v189 = *(uint64_t (**)(uint64_t *, void))(v245 + 104);
        if (!v189 || !*(void *)(v245 + 112) || !*(void *)(v245 + 120))
        {
          uint64_t v193 = (re::TypeInfo *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v244);
          uint64_t v235 = re::TypeInfo::name(v193)[1];
          uint64_t v30 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_256;
        }
        uint64_t v190 = v189(a4, *(void *)(a1 + 56));
        uint64_t v191 = (*(uint64_t (**)(void))(v245 + 112))();
        if (v191)
        {
          uint64_t v192 = v191;
          do
          {
            v117(a1, 0, 0, v192, &Tag, v246, 0);
            uint64_t v192 = (*(uint64_t (**)(uint64_t))(v245 + 112))(v190);
          }
          while (v192);
        }
        (*(void (**)(uint64_t, void))(v245 + 120))(v190, *(void *)(a1 + 56));
      }
      goto LABEL_402;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
      uint64_t v35 = re::TypeInfo::name((re::TypeInfo *)&v239);
      int v36 = BYTE4(v240);
      if (BYTE4(v240) != 1) {
        goto LABEL_105;
      }
      if (!re::TypeInfo::isInteger((re::TypeInfo *)&v239))
      {
        int v36 = BYTE4(v240);
LABEL_105:
        if (v36 == 8)
        {
          unint64_t v63 = (unint64_t)*v35 >> 1;
          if (v63 == 0x22C6ED80D0CLL)
          {
            uint64_t v131 = (char *)v35[1];
            uint64_t v39 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (v131 == "StringID") {
              return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))v39)(a1, a2, a3, a4, this, a6, a7);
            }
            int v132 = strcmp(v131, "StringID");
            uint64_t v39 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (!v132) {
              return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))v39)(a1, a2, a3, a4, this, a6, a7);
            }
          }
          else if (v63 == 0x134375A94D9F7110)
          {
            uint64_t v64 = (char *)v35[1];
            uint64_t v39 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (v64 == "DynamicString") {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
            int v65 = strcmp(v64, "DynamicString");
            uint64_t v39 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
            if (!v65) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
          }
        }
LABEL_212:
        if (this != a6)
        {
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v133 = **((void **)this + 2);
            uint64_t v134 = **((void **)a6 + 2);
            if ((unsigned __int16)v133 == (unsigned __int16)v134
              && WORD1(v133) == WORD1(v134)
              && ((v134 ^ v133) & 0xFFFFFF00000000) == 0)
            {
              goto LABEL_220;
            }
          }
          else if (re::areSameTranslatedVersion(this, a6, v34))
          {
            goto LABEL_220;
          }
          if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
            goto LABEL_304;
          }
        }
LABEL_220:
        if (a7)
        {
          uint64_t v135 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
          re::internal::translateType(v135, (const re::TypeRegistry *)&Tag, (uint64_t)&v239);
          unint64_t v136 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), buf);
          re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
          re::internal::translateType(v136, (const re::TypeRegistry *)v246, (uint64_t)&Tag);
          uint64_t v137 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
          if (v137)
          {
            uint64_t v138 = (void (*)(uint64_t, const char *, void, void, unint64_t *, unint64_t *, uint64_t))v137;
            uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
            if (v139)
            {
              uint64_t v140 = (void (*)(uint64_t, const char *, void, void, uint64_t *, uint64_t *, uint64_t))v139;
              *(void *)long long buf = 0;
              uint64_t v141 = (_anonymous_namespace_ *)(a1 + 24);
              uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, buf);
              if (!result) {
                return result;
              }
              for (uint64_t k = *(void *)buf; k; --k)
              {
                re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 1);
                v138(a1, "key", 0, 0, &v239, &v239, 1);
                v140(a1, "value", 0, 0, &Tag, &Tag, 1);
              }
              goto LABEL_235;
            }
            goto LABEL_237;
          }
LABEL_236:
          uint64_t v152 = &v239;
LABEL_238:
          uint64_t v235 = re::TypeInfo::name((re::TypeInfo *)v152)[1];
          uint64_t v30 = "Failed to resolve serialize function for type \"%s\"";
          goto LABEL_239;
        }
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), buf);
        re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)&buf[8]);
        re::TypeInfo::TypeInfo((uint64_t)v242, (uint64_t)this);
        uint64_t v143 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v239);
        if (!v143) {
          goto LABEL_236;
        }
        uint64_t v144 = (void (*)(uint64_t, const char *, void, void **, unint64_t *, unsigned char *, void))v143;
        uint64_t v145 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &Tag);
        if (!v145)
        {
LABEL_237:
          uint64_t v152 = (unint64_t *)&Tag;
          goto LABEL_238;
        }
        double v146 = (void (*)(uint64_t, const char *, void, uint64_t, uint64_t *, void **, void))v145;
        v237[0] = (*(uint64_t (**)(uint64_t *))(v243 + 88))(a4);
        uint64_t v141 = (_anonymous_namespace_ *)(a1 + 24);
        uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, v237);
        if (!result) {
          return result;
        }
        uint64_t v147 = *(void *)(a1 + 48);
        uint64_t v148 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v243 + 96);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v242);
        v148(a4, buf, v147);
        uint64_t v149 = v237[0];
        if (!v237[0]) {
          goto LABEL_235;
        }
        uint64_t v150 = re::TypeInfo::createInstance((re::TypeInfo *)&v239, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        while (1)
        {
          re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 0);
          v144(a1, "key", 0, v150, &v239, v246, 0);
          uint64_t v125 = *(re::Allocator **)(a1 + 48);
          if (*(unsigned char *)(a1 + 64)) {
            break;
          }
          uint64_t v151 = (*(uint64_t (**)(uint64_t *, void **, re::Allocator *, void **))(v243 + 104))(a4, v242, v125, v150);
          v146(a1, "value", 0, v151, &Tag, v244, 0);
          if (!--v149)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)&v239, v150, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
LABEL_235:
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
        uint64_t v126 = *(void **)(a1 + 264);
        uint64_t v127 = &v239;
        uint64_t v128 = v150;
        goto LABEL_189;
      }
      unint64_t v37 = (unint64_t)*v35 >> 1;
      if (v37 > 0x303EE8780EDLL)
      {
        if (v37 == 0x303EE8780EELL)
        {
          uint64_t v179 = (char *)v35[1];
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
          if (v179 == "uint32_t") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          int v180 = strcmp(v179, "uint32_t");
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
          if (!v180) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          goto LABEL_334;
        }
        if (v37 != 0x303EE88E58DLL)
        {
LABEL_334:
          *(void *)long long buf = 0x18E6A9A093;
          *(void *)&uint8_t buf[8] = "uint8_t";
          BOOL v181 = re::StringID::operator==(v35, buf);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>;
          if (v181) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          *(void *)long long buf = 0x16749F63A2;
          *(void *)&uint8_t buf[8] = "int64_t";
          if (re::StringID::operator==(v35, buf)) {
            return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t))re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>)(a1, a2, a3, a4, this, a6, a7);
          }
          uint64_t Tag = 3327612;
          v248 = "long";
          BOOL v182 = re::StringID::operator==(v35, &Tag);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>;
          if (v182) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          *(void *)long long buf = 104431;
          *(void *)&uint8_t buf[8] = "int";
          BOOL v183 = re::StringID::operator==(v35, buf);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>;
          if (v183) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          *(void *)long long buf = 109413500;
          *(void *)&uint8_t buf[8] = "short";
          BOOL v184 = re::StringID::operator==(v35, buf);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>;
          if (v184) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          goto LABEL_212;
        }
        uint64_t v129 = (char *)v35[1];
        uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
        if (v129 != "uint64_t")
        {
          uint64_t v130 = "uint64_t";
          goto LABEL_330;
        }
      }
      else
      {
        if (v37 != 3393056694)
        {
          if (v37 == 0x303EE86A734)
          {
            uint64_t v38 = (char *)v35[1];
            uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
            if (v38 == "uint16_t") {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
            int v40 = strcmp(v38, "uint16_t");
            uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
            if (!v40) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
            }
          }
          goto LABEL_334;
        }
        uint64_t v129 = (char *)v35[1];
        uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
        if (v129 != "size_t")
        {
          uint64_t v130 = "size_t";
LABEL_330:
          int v178 = strcmp(v129, v130);
          uint64_t v39 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (!v178) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
          }
          goto LABEL_334;
        }
      }
      return ((uint64_t (*)(void, void, void, void, void, void, void))v39)(a1, a2, a3, a4, this, a6, a7);
    case 7:
      if (this == a6) {
        goto LABEL_61;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v121 = **((void **)this + 2);
        uint64_t v122 = **((void **)a6 + 2);
        if ((unsigned __int16)v121 != (unsigned __int16)v122) {
          goto LABEL_304;
        }
        BOOL v18 = WORD1(v121) == WORD1(v122);
        uint64_t v123 = (v122 ^ v121) & 0xFFFFFF00000000;
        if (!v18 || v123 != 0) {
          goto LABEL_304;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_304;
      }
LABEL_61:
      uint64_t v41 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = (uint64_t)re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 16);
      if (a7)
      {
        if (!result) {
          return result;
        }
        unint64_t v239 = 0;
        if (v239 < *(unsigned int *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, v239, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, buf, buf, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        uint64_t v59 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        uint64_t Tag = re::UnionAccessor::readTag(v59, (char *)a4);
        uint64_t v60 = (uint64_t *)Tag;
        re::UnionAccessor::reset((re::UnionAccessor *)buf, (char *)a4, (const re::TypeInfo *)Tag, *(re::Allocator **)(a1 + 48));
        if ((unint64_t)v60 < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, (uint64_t)v60, (uint64_t)&v239);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, uint64_t *, unint64_t *, unint64_t *, void))(*(void *)a1 + 72))(a1, "value", 0, a4, &v239, &v239, 0);
          }
        }
      }
      goto LABEL_386;
    case 8:
      if (!a7) {
        goto LABEL_71;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        uint64_t v66 = *(re::TypeRegistry **)(a1 + 272);
        uint64_t Tag = 0x2686EB529B3EE220;
        v248 = "DynamicString";
        re::TypeRegistry::typeInfo(v66, (const re::StringID *)&Tag, buf);
        re::TypeInfo::TypeInfo((uint64_t)&v239, (uint64_t)&buf[8]);
        re::StringID::destroyString((re::StringID *)&Tag);
        uint64_t v67 = (re *)&v239;
        uint64_t v68 = (re::TypeInfo *)&v239;
        uint64_t v69 = a1;
        uint64_t v70 = a2;
      }
      else
      {
        uint64_t v42 = re::TypeInfo::name(this);
        if ((unint64_t)*v42 >> 1 != 0x134375A94D9F7110
          || (long long v44 = (char *)v42[1], v44 != "DynamicString") && strcmp(v44, "DynamicString"))
        {
LABEL_71:
          uint64_t v45 = *((void *)this + 2);
          if ((*(unsigned char *)(v45 + 48) & 4) == 0)
          {
            uint64_t v41 = (_anonymous_namespace_ *)(a1 + 24);
            unsigned int v46 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
            uint64_t result = 0;
            if (!v46) {
              return result;
            }
            uint64_t v47 = *(void *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
            if (v47
              && *(_WORD *)(v47 + 22) == 3
              && *(_DWORD *)v47
              && (uint64_t v48 = *(void *)(v47 + 8), (*(_WORD *)(v48 + 46) & 0x40) != 0)
              && ((*(_WORD *)(v48 + 22) & 0x1000) != 0
                ? (unsigned int v49 = *(const char **)(v47 + 8))
                : (unsigned int v49 = *(const char **)(v48 + 8)),
                  !strcmp(v49, "@version")))
            {
              int v50 = *(_DWORD *)(v48 + 24);
            }
            else
            {
              int v50 = 1;
            }
            uint64_t v51 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
            if (v51) {
              int v53 = *(_DWORD *)(v51 + 16);
            }
            else {
              int v53 = -1;
            }
            if (v50 == v53)
            {
              if (this != a6)
              {
                if (*(void *)this == *(void *)a6)
                {
                  uint64_t v204 = **((void **)this + 2);
                  uint64_t v205 = **((void **)a6 + 2);
                  if ((unsigned __int16)v204 == (unsigned __int16)v205
                    && WORD1(v204) == WORD1(v205)
                    && ((v205 ^ v204) & 0xFFFFFF00000000) == 0)
                  {
                    goto LABEL_316;
                  }
                }
                else if (re::areSameTranslatedVersion(this, a6, v52))
                {
                  goto LABEL_316;
                }
                if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12))
                {
                  re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, (uint64_t)a4, (uint64_t *)this, (uint64_t *)a6, a7);
                }
                else
                {
                  uint64_t v206 = re::TypeInfo::name(this)[1];
                  re::TypeInfo::name(a6);
                }
                goto LABEL_386;
              }
LABEL_316:
              re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, (uint64_t)a4, (uint64_t *)this, a7);
LABEL_386:
              return *(unsigned char *)(a1 + 64) == 0;
            }
            if (*(void *)this != *(void *)a6
              || (uint64_t v172 = **((void **)this + 2),
                  uint64_t v173 = **((void **)a6 + 2),
                  (unsigned __int16)v172 != (unsigned __int16)v173)
              || WORD1(v172) != WORD1(v173)
              || ((v173 ^ v172) & 0xFFFFFF00000000) != 0)
            {
              uint64_t v174 = re::TypeInfo::name(a6)[1];
              re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
              LOBYTE(v235) = v174;
              uint64_t v30 = "Type \"%s\" version %u expected in JSON. Actual version found in JSON: %u";
LABEL_239:
              uint64_t v153 = a1;
              unsigned int v154 = 0;
LABEL_257:
              return 0;
            }
            re::TypeInfo::atVersion(this, v50, (unsigned __int8 *)&v239);
            if (!(_BYTE)v239)
            {
              uint64_t v235 = re::TypeInfo::name(this)[1];
              uint64_t v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
              goto LABEL_239;
            }
            if (a7) {
              uint64_t v218 = 0;
            }
            else {
              uint64_t v218 = re::TypeInfo::createInstance((re::TypeInfo *)&v240, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            }
            re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, (uint64_t)v218, &v240, a7);
            if (*(unsigned char *)(a1 + 64))
            {
              if (!v218) {
                return 0;
              }
              uint64_t v125 = *(re::Allocator **)(a1 + 48);
              uint64_t v126 = *(void **)(a1 + 264);
              uint64_t v127 = (unint64_t *)&v240;
              uint64_t v128 = v218;
              goto LABEL_189;
            }
            if ((a7 & 1) == 0)
            {
              re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v240);
              re::internal::upgradeObject(v218, (uint64_t **)&Tag, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
              if (!buf[0])
              {
                if (v252) {
                  LOBYTE(v234) = v254;
                }
                else {
                  uint64_t v234 = v253;
                }
                if (!buf[0] && v251 && (v252 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v251 + 40))();
                }
              }
            }
            return 1;
          }
          int v55 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)buf, *(void *)this, v45);
          re::TypeMemberCollection::operator[](v55, 0, (uint64_t)&Tag);
          uint64_t v56 = (char *)a4 + *(unsigned int *)(v249 + 24);
          re::TypeRegistry::typeInfo((void *)Tag, *(void *)v249, buf);
          re::TypeInfo::TypeInfo((uint64_t)v246, (uint64_t)&buf[8]);
          if (this != a6)
          {
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v163 = **((void **)this + 2);
              uint64_t v164 = *((void *)a6 + 2);
              uint64_t v165 = *(void *)v164;
              if ((unsigned __int16)v163 == (unsigned __int16)*(void *)v164
                && WORD1(v163) == WORD1(v165)
                && ((v165 ^ v163) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_89;
              }
            }
            else
            {
              if (re::areSameTranslatedVersion(this, a6, v57)) {
                goto LABEL_89;
              }
              uint64_t v164 = *((void *)a6 + 2);
            }
            if (*(_DWORD *)(v164 + 88) == 1)
            {
              re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v239, *(void *)a6, v164);
              re::TypeMemberCollection::operator[]((uint64_t *)&v239, 0, (uint64_t)v242);
              re::TypeRegistry::typeInfo(v242[0], *(void *)v243, buf);
              re::TypeInfo::TypeInfo((uint64_t)v244, (uint64_t)&buf[8]);
              if (!*(unsigned char *)(a1 + 64)) {
                return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, char *, unsigned char *, void **, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v56, v246, v244, a7);
              }
              return 0;
            }
            goto LABEL_304;
          }
LABEL_89:
          if (*(unsigned char *)(a1 + 64)) {
            return 0;
          }
          return (*(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, char *, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v56, v246, v246, a7);
        }
        uint64_t v69 = a1;
        uint64_t v70 = a2;
        uint64_t v67 = this;
        uint64_t v68 = this;
      }
      re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v69, v70, v43, 0, v67, v68, 1);
      return *(unsigned char *)(a1 + 64) == 0;
    case 9:
      uint64_t v235 = re::TypeInfo::name(this)[1];
      uint64_t v30 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_256;
    default:
      LOBYTE(v235) = *((unsigned char *)this + 12);
      uint64_t v30 = "Invalid type category. Value = %d";
      goto LABEL_256;
  }
}

unsigned int *re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, char *a2, float *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    __int16 v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        float Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0) {
          *a3 = Double;
        }
        uint64_t v19 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
        ++*(void *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      uint64_t v12 = (const char *)result;
    }
    else {
      uint64_t v12 = (const char *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v13 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v13 = *result;
    }
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(float *)&int v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(float *)&int v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(float *)&int v14 = NAN;
LABEL_34:
      float Double = *(float *)&v14;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 232))
    {
      *(void *)int v20 = 0;
      float v16 = strtof(v12, (char **)v20);
      BOOL v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      float Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        BOOL v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v20 = 136315138;
          *(void *)&v20[4] = v12;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, char *a2, double *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (result)
  {
    __int16 v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        double Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0) {
          *a3 = Double;
        }
        uint64_t v19 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
        ++*(void *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      uint64_t v12 = (const char *)result;
    }
    else {
      uint64_t v12 = (const char *)*((void *)result + 1);
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0) {
      unsigned int v13 = 21 - *((char *)result + 21);
    }
    else {
      unsigned int v13 = *result;
    }
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(double *)&unint64_t v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(double *)&unint64_t v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(double *)&unint64_t v14 = NAN;
LABEL_34:
      double Double = *(double *)&v14;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 232))
    {
      *(void *)int v20 = 0;
      float v16 = strtod(v12, (char **)v20);
      BOOL v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      double Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        BOOL v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v20 = 136315138;
          *(void *)&v20[4] = v12;
          _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (!v18)
  {
    uint64_t v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(v29 + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)v29;
        }
        uint64_t v44 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        uint64_t v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9) {
          goto LABEL_41;
        }
        uint64_t v34 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33) {
          break;
        }
        if (*v34 - 48 > 9)
        {
          uint64_t v36 = v49;
          uint64_t v35 = v50;
          if (!__CFADD__(v50, v49)) {
            goto LABEL_40;
          }
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            uint64_t v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v37 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t *))(v46 + 104))(a4, v45, *(void *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_43;
        }
      }
      uint64_t v36 = v49;
      uint64_t v35 = v50;
      if (__CFADD__(v50, v49)) {
        goto LABEL_42;
      }
LABEL_40:
      uint64_t v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (!v18)
  {
    uint64_t v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, int *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(v29 + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)v29;
        }
        int v44 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        uint64_t v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9) {
          goto LABEL_41;
        }
        uint64_t v34 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33) {
          break;
        }
        if (*v34 - 48 > 9)
        {
          int v36 = v49;
          int v35 = v50;
          if (!__CFADD__(v50, v49)) {
            goto LABEL_40;
          }
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            uint64_t v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v37 = (*(uint64_t (**)(uint64_t, unsigned char *, void, int *))(v46 + 104))(a4, v45, *(void *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_43;
        }
      }
      int v36 = v49;
      int v35 = v50;
      if (__CFADD__(v50, v49)) {
        goto LABEL_42;
      }
LABEL_40:
      int v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v46);
  if (!v18)
  {
    uint64_t v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (uint64_t i = *((void *)v28 + 1); i != *((void *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          uint64_t v30 = i;
        }
        else {
          uint64_t v30 = *(void *)(i + 8);
        }
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(i + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)i;
        }
        __int16 v42 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        uint64_t v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          uint64_t v34 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (HIWORD(v48) || 0xFFFF - v48 < v47)
            {
              if (v34 != v33) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
            __int16 v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                uint64_t v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, __int16 *))(v44 + 104))(a4, v43, *(void *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v46);
  if (!v18)
  {
    uint64_t v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (uint64_t i = *((void *)v28 + 1); i != *((void *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          uint64_t v30 = i;
        }
        else {
          uint64_t v30 = *(void *)(i + 8);
        }
        if ((*(_WORD *)(i + 22) & 0x1000) != 0) {
          unsigned int v31 = 21 - *(char *)(i + 21);
        }
        else {
          unsigned int v31 = *(_DWORD *)i;
        }
        char v42 = 0;
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 0;
        int v33 = (unsigned __int8 *)(v30 + v31);
        while (*(unsigned char *)(v30 + v32) == 48)
        {
          if (v31 == ++v32) {
            goto LABEL_42;
          }
        }
        if (v31 == v32) {
          goto LABEL_42;
        }
        uint64_t v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          uint64_t v34 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (v48 > 0xFF || 255 - v48 < v47)
            {
              if (v34 != v33) {
                goto LABEL_37;
              }
              goto LABEL_42;
            }
            char v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                uint64_t v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, char *))(v44 + 104))(a4, v43, *(void *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v18)
  {
    uint64_t v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        uint64_t v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        unsigned int v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        unint64_t v49 = 0;
        unsigned int v32 = v31 && *v30 == 45;
        uint64_t v33 = v31;
        uint64_t v34 = &v30[v31];
        char v35 = v32;
        uint64_t v36 = &v30[v32];
        if (v33 == v32) {
          break;
        }
        uint64_t v37 = v33 - v32;
        uint64_t v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37) {
            goto LABEL_42;
          }
        }
        if (!v37) {
          break;
        }
        if (*v38 - 48 >= 0xA) {
          goto LABEL_43;
        }
        uint64_t v38 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          uint64_t v40 = v54;
          uint64_t v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            uint64_t v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (uint64_t v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34) {
              goto LABEL_53;
            }
          }
          goto LABEL_48;
        }
        unint64_t v41 = v39 + v40;
        if (v35)
        {
          if (v41 <= 0x8000000000000000) {
            goto LABEL_45;
          }
        }
        else if ((v41 & 0x8000000000000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unint64_t *))(v51 + 104))(a4, v50, *(void *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_62;
        }
      }
LABEL_42:
      uint64_t v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        unint64_t v41 = 0;
        if (v35) {
LABEL_45:
        }
          unint64_t v41 = -(uint64_t)v41;
LABEL_46:
        unint64_t v49 = v41;
        goto LABEL_48;
      }
      uint64_t v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v18)
  {
    uint64_t v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  uint64_t v19 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
  int v20 = *(void (**)(uint64_t, int *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  unsigned int v26 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v26)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      uint64_t v29 = *((void *)v28 + 1);
      while (1)
      {
        uint64_t v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        unsigned int v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        unsigned int v49 = 0;
        unsigned int v32 = v31 && *v30 == 45;
        uint64_t v33 = v31;
        uint64_t v34 = &v30[v31];
        char v35 = v32;
        uint64_t v36 = &v30[v32];
        if (v33 == v32) {
          break;
        }
        uint64_t v37 = v33 - v32;
        uint64_t v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37) {
            goto LABEL_42;
          }
        }
        if (!v37) {
          break;
        }
        if (*v38 - 48 >= 0xA) {
          goto LABEL_43;
        }
        uint64_t v38 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          int v40 = v54;
          int v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            uint64_t v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (int v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34) {
              goto LABEL_53;
            }
          }
          goto LABEL_48;
        }
        unsigned int v41 = v39 + v40;
        if (v35)
        {
          if (v41 <= 0x80000000) {
            goto LABEL_45;
          }
        }
        else if ((v41 & 0x80000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unsigned int *))(v51 + 104))(a4, v50, *(void *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((void *)v28 + 1) + 48 * *v28) {
          goto LABEL_62;
        }
      }
LABEL_42:
      uint64_t v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        unsigned int v41 = 0;
        if (v35) {
LABEL_45:
        }
          unsigned int v41 = -v41;
LABEL_46:
        unsigned int v49 = v41;
        goto LABEL_48;
      }
      uint64_t v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v54),
        re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55),
        v52[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v52))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v51, (uint64_t)v55);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)this);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v52);
  if (!v19)
  {
    uint64_t v47 = re::TypeInfo::name((re::TypeInfo *)v52)[1];
    return 0;
  }
  int v20 = (void (*)(uint64_t, unsigned __int8 *, void, uint64_t, unsigned char *, unsigned char *, void))v19;
  uint64_t v21 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v50 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)v49);
  v21(a4, &v54, v18);
  unsigned int v27 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
  BOOL result = 0;
  if (v27)
  {
    uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
    if (!v28 || !*v28)
    {
LABEL_62:
      return *(unsigned char *)(a1 + 64) == 0;
    }
    uint64_t v29 = (unsigned __int8 *)*((void *)v28 + 1);
    while (1)
    {
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (unsigned __int8 *)*((void *)v29 + 1);
      }
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0) {
        unsigned int v31 = 21 - (char)v29[21];
      }
      else {
        unsigned int v31 = *(_DWORD *)v29;
      }
      __int16 v48 = 0;
      if (v31) {
        unsigned int v32 = *v30 == 45;
      }
      else {
        unsigned int v32 = 0;
      }
      uint64_t v33 = v31;
      uint64_t v34 = &v30[v31];
      char v35 = v32;
      uint64_t v36 = &v30[v32];
      if (v33 == v32) {
        goto LABEL_44;
      }
      uint64_t v37 = v33 - v32;
      uint64_t v38 = v36;
      while (*v38 == 48)
      {
        ++v38;
        if (!--v37) {
          goto LABEL_44;
        }
      }
      if (!v37)
      {
LABEL_44:
        uint64_t v38 = v34;
LABEL_45:
        if (v38 == v36)
        {
          uint64_t v38 = v30;
          goto LABEL_52;
        }
        __int16 v39 = 0;
        __int16 v40 = 0;
        if (v35)
        {
LABEL_47:
          __int16 v48 = -v39;
          goto LABEL_52;
        }
LABEL_51:
        __int16 v48 = v40;
        goto LABEL_52;
      }
      if (*v38 - 48 >= 0xA) {
        goto LABEL_45;
      }
      uint64_t v38 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v38, v34, &v54, &v53);
      if (v38 != v34 && *v38 - 48 <= 9) {
        goto LABEL_56;
      }
      if (HIWORD(v54) || 0xFFFF - v54 < v53) {
        break;
      }
      __int16 v39 = v53 + v54;
      if ((v35 & 1) == 0)
      {
        if ((((_WORD)v53 + (_WORD)v54) & 0x8000) != 0) {
          goto LABEL_52;
        }
        __int16 v40 = v53 + v54;
        goto LABEL_51;
      }
      if ((unsigned __int16)(v53 + v54) <= 0x8000u) {
        goto LABEL_47;
      }
LABEL_52:
      if (v34 != v38)
      {
        return 0;
      }
      uint64_t v41 = (*(uint64_t (**)(uint64_t, unsigned char *, void, __int16 *))(v50 + 104))(a4, v49, *(void *)(a1 + 48), &v48);
      v20(a1, v30, 0, v41, v52, v51, 0);
      v29 += 48;
      if (v29 == (unsigned __int8 *)(*((void *)v28 + 1) + 48 * *v28)) {
        goto LABEL_62;
      }
    }
    while (1)
    {
      if (v38 == v34)
      {
        uint64_t v38 = v34;
        goto LABEL_52;
      }
LABEL_56:
      if (*v38 - 48 > 9) {
        goto LABEL_52;
      }
      ++v38;
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v45);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v45);
      re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)v46);
      re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)this);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v44);
      if (!v23)
      {
        char v35 = re::TypeInfo::name((re::TypeInfo *)v44);
        return 0;
      }
      uint64_t v24 = (void (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v23;
      unsigned int v25 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v25) {
        return result;
      }
      unsigned int v27 = *(void (**)(uint64_t, const char **, uint64_t))(v42 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v45, (uint64_t)v41);
      v27(a4, &v45, v22);
      uint64_t v28 = (re::DynamicString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 32, 8);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      *(void *)uint64_t v28 = v22;
      *((void *)v28 + 1) = 0;
      re::DynamicString::setCapacity(v28, 0);
      uint64_t v29 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v29 && *v29)
      {
        uint64_t v30 = *((void *)v29 + 1);
        do
        {
          if ((*(_WORD *)(v30 + 22) & 0x1000) != 0) {
            unsigned int v31 = (const char *)v30;
          }
          else {
            unsigned int v31 = *(const char **)(v30 + 8);
          }
          size_t v32 = strlen(v31);
          uint64_t v45 = v31;
          v46[0] = v32;
          re::DynamicString::operator=(v28, (uint64_t)&v45);
          uint64_t v33 = (*(uint64_t (**)(uint64_t, unsigned char *, void, re::DynamicString *))(v42 + 104))(a4, v41, *(void *)(a1 + 48), v28);
          v24(a1, v31, 0, v33, v44, v43, 0);
          v30 += 48;
        }
        while (v30 != *((void *)v29 + 1) + 48 * *v29);
      }
      double v34 = re::DynamicString::deinit(v28);
      (*(void (**)(uint64_t, re::DynamicString *, double))(*(void *)v21 + 40))(v21, v28, v34);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v45);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v44);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    int v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 48);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v49);
      if (!v22)
      {
        uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)v49);
        return 0;
      }
      uint64_t v23 = (uint64_t (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      unsigned int v24 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      uint64_t v26 = *(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(v47 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v46);
      unsigned int v27 = (_anonymous_namespace_ *)v26(a4, &v50, v21);
      uint64_t v44 = 0;
      uint64_t v45 = "";
      uint64_t v28 = *(unsigned int **)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
      if (v28 && *v28)
      {
        uint64_t v29 = *((void *)v28 + 1);
        do
        {
          if ((*(_WORD *)(v29 + 22) & 0x1000) != 0) {
            uint64_t v30 = (const char *)v29;
          }
          else {
            uint64_t v30 = *(const char **)(v29 + 8);
          }
          uint64_t v42 = 0;
          uint64_t v43 = "";
          uint64_t v31 = v42;
          size_t v32 = v43;
          uint64_t v42 = 0;
          uint64_t v43 = "";
          char v33 = v44;
          double v34 = v45;
          uint64_t v44 = v31;
          uint64_t v45 = v32;
          unint64_t v50 = v31 & 0xFFFFFFFFFFFFFFFELL | v33 & 1;
          v51[0] = v34;
          re::StringID::destroyString((re::StringID *)&v50);
          re::StringID::destroyString((re::StringID *)&v42);
          uint64_t v35 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t *))(v47 + 104))(a4, v46, *(void *)(a1 + 48), &v44);
          unsigned int v27 = (_anonymous_namespace_ *)v23(a1, v30, 0, v35, v49, v48, 0);
          v29 += 48;
        }
        while (v29 != *((void *)v28 + 1) + 48 * *v28);
      }
      re::StringID::destroyString((re::StringID *)&v44);
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v49);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    int v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

unsigned int *re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, void *a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (BOOL v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    unint64_t v30 = 0;
    BOOL result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v30);
    if (!result) {
      return result;
    }
    if (v30) {
    int v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    goto LABEL_34;
  }
  unint64_t v21 = a4[1];
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  unint64_t v30 = v22;
  BOOL result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v30);
  if (result)
  {
    unint64_t v23 = v30;
    if (v23 <= (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
    {
      if (!*a4)
      {
        *a4 = *(void *)(a1 + 48);
        re::DynamicString::setCapacity(a4, v23 + 1);
      }
      re::DynamicString::resize(a4, v23, 0);
      if (v23)
      {
        if (a4[1]) {
          uint64_t v29 = (char *)a4[2];
        }
        else {
          uint64_t v29 = (char *)a4 + 9;
        }
      }
      int v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_34:
      return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
    }
    (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
    return 0;
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v21);
  if (v21[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)&v22);
    if (*(_DWORD *)(v19 + 88) || (re::TypeRegistry::typeInfo(v18[0], *(void *)(v19 + 72), v23), v23[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, v18, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v18, *a3, a3[2]);
  if (v20)
  {
    for (unint64_t i = 0; i < v20; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v18, i, (uint64_t)&v16);
      if (*(unsigned char *)(v17 + 28))
      {
        uint64_t v10 = *(void *)(v17 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v17 + 32);
        uint64_t v12 = a2 + *(unsigned int *)(v17 + 24);
        re::TypeRegistry::typeInfo(v16, *(void *)v17, v23);
        re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v24);
        if (a1[64]
          || (uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, v12, v15, v15, a4), (result & 1) == 0))
        {
          uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a3);
          if (v13)
          {
            uint64_t v14 = (_DWORD *)(result + 16);
            while (i != *v14)
            {
              v14 += 6;
              if (!--v13) {
                goto LABEL_21;
              }
            }
            if (!a1[64]) {
              uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, *((void *)v14 - 1), v11, v12, v15, v15, a4);
            }
          }
        }
      }
LABEL_21:
      ;
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v52);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v48);
  if (v48[0])
  {
    if (!v52[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v49)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
    }
    if (v53 == v49)
    {
      uint64_t v18 = *v55;
      uint64_t v19 = *v51;
      if ((unsigned __int16)*v55 == (unsigned __int16)*v51)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v53, (const re::TypeInfo *)&v49, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, &v53, a5);
      goto LABEL_15;
    }
    if (v54 == v50)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, &v53, &v49, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v53)[1];
      re::TypeInfo::name((re::TypeInfo *)&v49);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v47, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v45, *a4, a4[2]);
  if (v46)
  {
    for (unint64_t i = 0; i < v46; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v45, i, (uint64_t)v43);
      if (*(unsigned char *)(v44 + 28))
      {
        uint64_t v29 = *(void *)(v44 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v44 + 32);
        uint64_t v31 = *(re **)(*a4 + 856);
        if (!v31
          || (uint64_t v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v43),
              v31 == -1))
        {
          uint64_t v35 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v57 = v36;
            __int16 v58 = 2080;
            uint64_t v59 = v29;
            _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          uint64_t v37 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
          re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v57 + 4);
          uint64_t result = re::internal::translateType(v37, (const re::TypeRegistry *)v41, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v47, (int)v31, (uint64_t)v41);
          uint64_t v32 = a2 + *(unsigned int *)(v42 + 24);
          re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
          re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v57 + 4);
          re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
          re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v57 + 4);
          if (*(unsigned char *)(a1 + 64)
            || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, v32, v40, v39, a5), (result & 1) == 0))
          {
            uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a4);
            if (v33)
            {
              double v34 = (_DWORD *)(result + 16);
              while (i != *v34)
              {
                v34 += 6;
                if (!--v33) {
                  goto LABEL_35;
                }
              }
              uint64_t v38 = *((void *)v34 - 1);
              re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
              re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v57 + 4);
              re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
              uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v57 + 4);
              if (!*(unsigned char *)(a1 + 64)) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v38, v30, v32, v40, v39, a5);
              }
            }
          }
        }
      }
LABEL_35:
      ;
    }
  }
  return result;
}

unsigned int *re::serializeBool<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, BOOL *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeChar<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI8<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI16<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI32<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeI64<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU8<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned char *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU16<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU32<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _DWORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeU64<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, void *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
}

unsigned int *re::serializeFloat<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  return re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, a4, a7);
}

unsigned int *re::serializeDouble<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v14 = **((void **)this + 2);
      uint64_t v15 = **((void **)a6 + 2);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  return re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, a4, a7);
}

unsigned int *re::serializeCString<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_23:
      return 0;
    }
    uint64_t v20 = **((void **)this + 2);
    uint64_t v21 = **((void **)a6 + 2);
    if ((unsigned __int16)v20 != (unsigned __int16)v21) {
      goto LABEL_23;
    }
    BOOL v23 = WORD1(v20) == WORD1(v21);
    uint64_t v22 = (v21 ^ v20) & 0xFFFFFF00000000;
    BOOL v23 = v23 && v22 == 0;
    if (!v23) {
      goto LABEL_23;
    }
  }
LABEL_4:
  if (a7)
  {
    int v42 = 0;
    unsigned int v18 = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v42);
    uint64_t result = 0;
    if (!v18) {
      return result;
    }
    if (!v42) {
      goto LABEL_12;
    }
    if (v42 != 1)
    {
      size_t v41 = 0;
      if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v41))
      {
        if (v41) {
      }
        }
LABEL_12:
      goto LABEL_47;
    }
    goto LABEL_17;
  }
  int v42 = 2 * (*a4 != 0);
  uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v42);
  if (!result) {
    return result;
  }
  if (v42)
  {
    if (v42 == 2)
    {
      if (*a4) {
        size_t v24 = strlen(*a4);
      }
      else {
        size_t v24 = 0;
      }
      size_t v41 = v24;
      if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v41))
      {
        uint64_t v25 = (char *)*a4;
        unint64_t v26 = v41;
        if (!*a4 || v41 != v24)
        {
          if (v25)
          {
            (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
            *a4 = 0;
          }
          if (v26 > (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
          {
            (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
            return 0;
          }
          uint64_t v37 = v26 == -1;
          uint64_t v38 = v37 << 63 >> 63;
          if (v38 != v37 || v38 < 0)
          {
            return 0;
          }
          uint64_t v25 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v26 + 1, 0);
          *a4 = v25;
          size_t v24 = v26;
        }
        if (v24)
        {
          uint64_t v25 = (char *)*a4;
        }
        else
        {
          unint64_t v26 = 0;
        }
        v25[v26] = 0;
      }
    }
    else if (v42 == 1)
    {
LABEL_17:
      return 0;
    }
  }
  else if (*a4)
  {
    (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    *a4 = 0;
  }
  int v39 = *(unsigned __int8 *)(a1 + 64);
  if (!*a4 || !*(unsigned char *)(a1 + 64)) {
    return (unsigned int *)(v39 == 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
  *a4 = 0;
LABEL_47:
  int v39 = *(unsigned __int8 *)(a1 + 64);
  return (unsigned int *)(v39 == 0);
}

unsigned int *re::serializeStringID<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (unsigned int v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    unint64_t v43 = 0;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v43);
    if (!result) {
      return result;
    }
    if (v43) {
    goto LABEL_26;
    }
  }
  unint64_t v42 = 0;
  if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v42))
  {
    unint64_t v20 = v42;
    if (v42)
    {
      if (v20 > (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
      {
        (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
        return 0;
      }
      uint64_t v32 = v20 == -1;
      uint64_t v33 = v32 << 63 >> 63;
      if (v33 != v32 || v33 < 0)
      {
        return 0;
      }
      uint64_t v34 = (char *)(*(uint64_t (**)(void, unint64_t, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), v20 + 1, 0);
      v34[v20] = 0;
      uint64_t v40 = 0;
      size_t v41 = "";
      uint64_t v36 = v40;
      uint64_t v37 = v41;
      uint64_t v40 = 0;
      size_t v41 = "";
      uint64_t v38 = *a4;
      uint64_t v39 = a4[1];
      *a4 = v36;
      a4[1] = (uint64_t)v37;
      unint64_t v43 = v36 & 0xFFFFFFFFFFFFFFFELL | v38 & 1;
      uint64_t v44 = v39;
      re::StringID::destroyString((re::StringID *)&v43);
      re::StringID::destroyString((re::StringID *)&v40);
      (*(void (**)(void, char *))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v34);
    }
    else
    {
      uint64_t v40 = 0;
      size_t v41 = "";
      uint64_t v31 = a4[1];
      unint64_t v43 = *a4 & 1;
      uint64_t v44 = v31;
      *a4 = 0;
      a4[1] = (uint64_t)"";
      re::StringID::destroyString((re::StringID *)&v43);
      re::StringID::destroyString((re::StringID *)&v40);
    }
LABEL_26:
    return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
  }
  return 0;
}

unsigned int *re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v25 = **((void **)this + 2);
    uint64_t v26 = **((void **)a6 + 2);
    if ((unsigned __int16)v25 == (unsigned __int16)v26)
    {
      BOOL v28 = WORD1(v25) == WORD1(v26);
      uint64_t v27 = (v26 ^ v25) & 0xFFFFFF00000000;
      BOOL v28 = v28 && v27 == 0;
      if (v28) {
        goto LABEL_4;
      }
    }
LABEL_33:
    return 0;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_33;
  }
LABEL_4:
  if (a7)
  {
    uint64_t v29 = 0;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v29);
    if (!result) {
      return result;
    }
    if (v29) {
  }
    }
  else
  {
    uint64_t v14 = **((void **)this + 2);
    uint64_t v29 = *(void **)this;
    uint64_t v30 = v14;
    LODWORD(v31) = -1;
    *(void *)long long buf = 0x258C98EAAF29A10ALL;
    *(void *)&uint8_t buf[8] = "CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[]((uint64_t *)&v29, buf);
    re::StringID::destroyString((re::StringID *)buf);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    unint64_t v33 = 0;
    uint64_t result = re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, (uint64_t *)&v33);
    if (!result) {
      return result;
    }
    unsigned int v18 = *(void **)(a1 + 56);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v29 = v18;
    uint64_t v30 = 0;
    re::DynamicString::setCapacity(&v29, 0);
    if (v33)
    {
      re::DynamicString::resize(&v29, v33, 0);
      if (v30) {
        uint64_t v19 = v31;
      }
      else {
        uint64_t v19 = (char *)&v30 + 1;
      }
    }
    if (v30) {
      unint64_t v20 = v31;
    }
    else {
      unint64_t v20 = (char *)&v30 + 1;
    }
    uint64_t v21 = (re *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *))(v16 + 80))(*(void *)(a1 + 48), v17, v16, a4, v20);
    if ((v21 & 1) == 0)
    {
      uint64_t v22 = *re::foundationSerializationLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        if (v30) {
          uint64_t v23 = v31;
        }
        else {
          uint64_t v23 = (char *)&v30 + 1;
        }
        uint64_t v24 = re::TypeInfo::name(this)[1];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v23;
        __int16 v35 = 2080;
        uint64_t v36 = v24;
        _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_INFO, "Failed to parse \"%s\": \"%s\" (type %s) using deserialization callback - skipping.", buf, 0x20u);
      }
    }
    if (v29 && (v30 & 1) != 0) {
      (*(void (**)(void))(*v29 + 40))();
    }
  }
  return (unsigned int *)(*(unsigned char *)(a1 + 64) == 0);
}

BOOL re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(uint64_t a1, char *a2, const re::TypeInfo *a3, char **a4, re *this, re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_15:
      return 0;
    }
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 != (unsigned __int16)v14) {
      goto LABEL_15;
    }
    BOOL v16 = WORD1(v13) == WORD1(v14);
    uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
    BOOL v16 = v16 && v15 == 0;
    if (!v16) {
      goto LABEL_15;
    }
  }
LABEL_4:
  int v50 = 0;
  if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v50))
  {
    if (v50 == 1)
    {
      unsigned int v49 = 0;
      re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((unsigned int *)(a1 + 24), &v49);
      if (!*(unsigned char *)(a1 + 64))
      {
        unsigned int v23 = v49;
        if (*(void *)(a1 + 408) <= (unint64_t)v49)
        {
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v49, (uint64_t)&v45);
          if (v45 == *(void *)this)
          {
            uint64_t v24 = **((void **)this + 2);
            if (v46 == (unsigned __int16)v24 && v47 == WORD1(v24) && ((v48 ^ HIDWORD(v24)) & 0xFFFFFF) == 0)
            {
              if ((a7 & 1) == 0)
              {
                if (*a4)
                {
                  unint64_t v42 = *a4;
                  if (v42 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23))
                  {
                    (*(void (**)(void, char *))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), *a4);
                    *a4 = 0;
                  }
                }
                *a4 = (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23);
                re::internal::SharedObjectGraph::addReference((void *)(a1 + 336), v23);
              }
              goto LABEL_36;
            }
          }
          uint64_t v25 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v23, (uint64_t)&v45);
          uint64_t v43 = *((void *)re::TypeRegistry::typeName(v25, &v45) + 1);
        }
      }
    }
    else
    {
      if (!v50)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
            *a4 = 0;
          }
        }
LABEL_36:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if ((a7 & 1) == 0 && *a4)
      {
        (*(void (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
        *a4 = 0;
      }
      uint64_t v45 = 0;
      if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((unsigned char *)(a1 + 24), a2, &v45))
      {
        uint64_t v36 = v45;
        uint64_t v37 = v45 == -1;
        uint64_t v38 = v37 << 63 >> 63;
        if (v38 == v37 && (v38 & 0x8000000000000000) == 0)
        {
          uint64_t v39 = (char *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v45 + 1, 0);
          uint64_t v40 = (uint64_t)v39;
          if ((a7 & 1) == 0) {
            *a4 = v39;
          }
          if (v36) {
          *(unsigned char *)(v40 + v36) = 0;
          }
          uint64_t v41 = **((void **)this + 2);
          *(void *)&long long v44 = *(void *)this;
          *((void *)&v44 + 1) = v41;
          re::internal::SharedObjectGraph::addObject(a1 + 336, v40, &v44);
          goto LABEL_36;
        }
      }
    }
  }
  return 0;
}

BOOL re::SerializerV1<re::EncoderRapidJSON<re::CFDataInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, int a7)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v25 = **((void **)this + 2);
    uint64_t v26 = **((void **)a6 + 2);
    if ((unsigned __int16)v25 == (unsigned __int16)v26)
    {
      BOOL v28 = WORD1(v25) == WORD1(v26);
      uint64_t v27 = (v26 ^ v25) & 0xFFFFFF00000000;
      BOOL v28 = v28 && v27 == 0;
      if (v28) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    int v15 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v29 = re::TypeInfo::name(this), v30 = re::TypeInfo::name(a6), !re::StringID::operator==(v29, v30))))
  {
    return 0;
  }
  int v15 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v88, (uint64_t)&buf + 8);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v86, (uint64_t)&buf + 8);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    BOOL v16 = *v89;
    v85[0] = (re *)v88[0];
    v85[1] = v16;
    if (v88[0]) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v77 = re::TypeInfo::name(this)[1];
    uint64_t v22 = "Failed to get actual type of polymorphic object. Type \"%s\".";
    uint64_t v23 = a1;
    uint64_t v24 = a2;
LABEL_16:
    return 0;
  }
  re::internal::actualType(a4, (void **)this, v85);
  if (!v85[0]) {
    goto LABEL_15;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, v85, &buf);
  re::TypeInfo::TypeInfo((uint64_t)v83, (uint64_t)&buf + 8);
  int v82 = 0;
  if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v82))
  {
    if (v82 != 1)
    {
      if (!v82)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        goto LABEL_111;
      }
      if (isPointerToPolymorphicType)
      {
        if (re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0))
        {
          uint64_t v42 = *(void *)(*(void *)(a1 + 152) + 48 * *(void *)(a1 + 136) - 8);
          if (*(_DWORD *)v42)
          {
            uint64_t v43 = *(char **)(v42 + 8);
            if ((*((_WORD *)v43 + 11) & 0x1000) != 0) {
              long long v44 = v43;
            }
            else {
              long long v44 = (char *)*((void *)v43 + 1);
            }
            if (v44)
            {
              uint64_t v45 = *v44;
              if (*v44)
              {
                char v46 = v44[1];
                if (v46)
                {
                  unsigned __int16 v47 = (unsigned __int8 *)(v44 + 2);
                  do
                  {
                    uint64_t v45 = 31 * v45 + v46;
                    int v48 = *v47++;
                    char v46 = v48;
                  }
                  while (v48);
                }
              }
            }
            else
            {
              uint64_t v45 = 0;
            }
            uint64_t v56 = 2 * v45;
            __s2 = v44;
            v94[0] = 2 * v45;
            v94[1] = v44;
            int v57 = *((_DWORD *)v87 + 20);
            uint64_t v58 = (v57 - 1);
            if (v57 == 1) {
              goto LABEL_80;
            }
            uint64_t v59 = 0;
            while (1)
            {
              re::TypeInfo::derivedClass((re::TypeInfo *)v86, v59, (uint64_t)&buf);
              uint64_t v60 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)&buf);
              if ((*v60 ^ (unint64_t)v56) <= 1)
              {
                uint64_t v61 = (const char *)v60[1];
                if (v61 == __s2 || !strcmp(v61, __s2)) {
                  break;
                }
              }
              if (v58 == ++v59) {
                goto LABEL_80;
              }
            }
            uint64_t v62 = *v96;
            uint64_t v92 = (re *)buf;
            uint64_t v93 = v62;
            if (!(void)buf)
            {
LABEL_80:
              unint64_t v63 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v86);
              if ((*v63 ^ (unint64_t)v56) > 1
                || (unint64_t v63 = (uint64_t *)v63[1], v63 != (uint64_t *)__s2)
                && (unint64_t v63 = (uint64_t *)strcmp((const char *)v63, __s2), v63)
                || (uint64_t v64 = *v87, v92 = v86[0], v93 = v64, !v86[0]))
              {
                uint64_t v66 = *re::foundationSerializationLogObjects((re *)v63);
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = __s2;
                  _os_log_error_impl(&dword_233120000, v66, OS_LOG_TYPE_ERROR, "Skipping unknown polymorphic type. Type name = \"%s\"", (uint8_t *)&buf, 0xCu);
                  if (a7) {
                    goto LABEL_110;
                  }
                }
                else if (a7)
                {
LABEL_110:
                  re::StringID::destroyString((re::StringID *)v94);
                  goto LABEL_111;
                }
                if (*a4)
                {
                  re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
                  *a4 = 0;
                }
                goto LABEL_110;
              }
            }
            if ((a7 & 1) == 0 && *a4)
            {
              re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
              *a4 = 0;
            }
            re::TypeRegistry::typeInfo(v86[0], &v92, &buf);
            re::TypeInfo::TypeInfo((uint64_t)v91, (uint64_t)&buf + 8);
            if (v15)
            {
              int v65 = *(re::TypeRegistry **)(a1 + 272);
            }
            else
            {
              int v65 = *(re::TypeRegistry **)(a1 + 272);
              if (*(re::TypeRegistry **)this == v65)
              {
                re::TypeInfo::operator=((uint64_t)v83, (uint64_t)v91);
                uint64_t v69 = v92;
                uint64_t v70 = v93;
                goto LABEL_105;
              }
            }
            uint64_t v67 = re::TypeInfo::name((re::TypeInfo *)v91);
            uint64_t v68 = re::TypeRegistry::typeInfo(v65, (const re::StringID *)v67, &buf);
            if (!(_BYTE)buf)
            {
              uint64_t v72 = *re::foundationSerializationLogObjects((re *)v68);
              if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v73 = re::TypeInfo::name((re::TypeInfo *)v91)[1];
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v73;
                _os_log_impl(&dword_233120000, v72, OS_LOG_TYPE_DEFAULT, "No matching runtime type found for serialized polymorphic type \"%s\". Skipping unknown type.", (uint8_t *)&buf, 0xCu);
              }
              *(void *)&long long buf = 0;
              *((void *)&buf + 1) = 0xFFFFFFFFLL;
              (*(void (**)(uint64_t, void, long long *))(*(void *)a1 + 16))(a1, 0, &buf);
              if (!*(unsigned char *)(a1 + 64)) {
                (*(void (**)(uint64_t, char *, void, void, re **, re **, uint64_t))(*(void *)a1 + 72))(a1, __s2, 0, 0, v91, v91, 1);
              }
              goto LABEL_109;
            }
            re::TypeInfo::operator=((uint64_t)v83, (uint64_t)&buf + 8);
            uint64_t v69 = (re *)v83[0];
            uint64_t v70 = *v84;
LABEL_105:
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)v83, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            uint64_t v75 = Instance;
            if ((a7 & 1) == 0)
            {
              *a4 = (char *)Instance;
              *(void *)&long long buf = v69;
              *((void *)&buf + 1) = v70;
              re::internal::setActualType(a4, (re **)this, (re **)&buf);
            }
            v90[0] = v69;
            v90[1] = v70;
            (*(void (**)(uint64_t, void **, void *))(*(void *)a1 + 16))(a1, v75, v90);
            if (!*(unsigned char *)(a1 + 64)) {
              (*(void (**)(uint64_t, char *, void, void **, void *, re **, BOOL))(*(void *)a1 + 72))(a1, __s2, 0, v75, v83, v91, v75 == 0);
            }
LABEL_109:
            (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
            goto LABEL_110;
          }
        }
LABEL_111:
        return *(unsigned char *)(a1 + 64) == 0;
      }
      if (!a7)
      {
        uint64_t v51 = *a4;
        if (!*a4) {
          uint64_t v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v88, *(re::Allocator **)(a1 + 48), 0);
        }
        uint64_t v52 = 0;
        *a4 = v51;
        goto LABEL_62;
      }
      unsigned int v49 = *(re::TypeRegistry **)(a1 + 272);
      if ((re::TypeRegistry *)v88[0] != v49)
      {
        int v50 = re::TypeInfo::name((re::TypeInfo *)v88);
        re::TypeRegistry::typeInfo(v49, (const re::StringID *)v50, &buf);
        if (!(_BYTE)buf)
        {
          uint64_t v51 = 0;
          uint64_t v52 = 1;
          goto LABEL_62;
        }
        re::TypeInfo::operator=((uint64_t)v88, (uint64_t)&buf + 8);
      }
      uint64_t v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v88, *(re::Allocator **)(a1 + 48), 0);
      uint64_t v52 = 0;
LABEL_62:
      uint64_t v53 = *v89;
      *(void *)&long long v79 = v88[0];
      *((void *)&v79 + 1) = v53;
      re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v51, &v79);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, char *, void, char *, void *, re **, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, v51, v88, v86, v52);
      }
      if (*(unsigned char *)(a1 + 336))
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      goto LABEL_111;
    }
    LODWORD(v94[0]) = 0;
    re::EncoderRapidJSON<re::FixedArrayInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((unsigned int *)(a1 + 24), v94);
    if (!*(unsigned char *)(a1 + 64))
    {
      unsigned int v32 = v94[0];
      if (*(void *)(a1 + 408) > (unint64_t)LODWORD(v94[0]))
      {
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v94[0], (uint64_t)v81);
        if (!re::internal::areCompatible((re **)this, (uint64_t)v81))
        {
          uint64_t v54 = re::TypeInfo::name((re::TypeInfo *)v88)[1];
          int v55 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)&buf);
          LOBYTE(v77) = v54;
          re::TypeRegistry::typeName(v55, &buf);
          uint64_t v22 = "Invalid reference. Objects are not compatible. Expected type \"%s\". Actual type \"%s\".";
          goto LABEL_68;
        }
        if (a7) {
          goto LABEL_111;
        }
        if (*a4)
        {
          uint64_t v33 = *a4;
          if (v33 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32))
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v83, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        uint64_t v34 = re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32);
        uint64_t v35 = (char **)v34;
        *a4 = (char *)v34;
        if ((*((unsigned char *)v84 + 49) & 2) != 0)
        {
          uint64_t v71 = (void (*)(uint64_t))v84[4];
          if (v71) {
            v71(v34);
          }
          re::internal::SharedObjectGraph::addReference((void *)(a1 + 336), v32);
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v91);
          if (!v91[0])
          {
            LOBYTE(v77) = v32;
            uint64_t v22 = "TypeID for shared object at index %d is invalid.";
            goto LABEL_68;
          }
          re::TypeRegistry::typeInfo(v91[0], v91, &buf);
          if (!(_BYTE)buf)
          {
            LOBYTE(v77) = v32;
            uint64_t v22 = "No TypeInfo found for shared object at index %d.";
            goto LABEL_68;
          }
          uint64_t v36 = re::TypeInfo::createInstance((re::TypeInfo *)((char *)&buf + 8), *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          *a4 = (char *)v36;
          if ((re::TypeInfo::copy((re::TypeInfo *)((char *)&buf + 8), v36, v35, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264)) & 1) == 0)
          {
            uint64_t v77 = re::TypeInfo::name((re::TypeInfo *)((char *)&buf + 8))[1];
            uint64_t v22 = "Failed to copy non-shareable object of type '%s'.";
LABEL_68:
            uint64_t v23 = a1;
            uint64_t v24 = 0;
            goto LABEL_16;
          }
        }
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v80);
        re::TypeInfo::setActualTypeForPointer((void **)this, (uint64_t)a4, v80);
        goto LABEL_111;
      }
      LOBYTE(v77) = v94[0];
      uint64_t v22 = "Invalid reference ID for shared object: %u";
      goto LABEL_68;
    }
  }
  return 0;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  uint64_t v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      uint64_t v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc((uint64_t)a1, (uint64_t)&v13, v11);
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, const char *a2, int a3)
{
  uint64_t v8 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v8);
    }
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(void *)(a1 + 168));
    LOBYTE(v7[0]) = 2;
    DWORD1(v7[0]) = a3 | 0x20;
    *((void *)&v7[0] + 1) = v8;
    memset(&v7[1], 0, 32);
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, v7);
  }
  return v3 == 0;
}

_anonymous_namespace_ *re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = (uint64_t *)*((void *)result + 21);
    v2[4] -= 16;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndObject(v2);
    uint64_t v3 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
    ++*(void *)(v3 - 16);
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720E78;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  return re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720E78;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        uint64_t v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (*(void *)this == *(void *)(a1 + 272))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **((void **)this + 2) | 0xFFFFFFFF00000000);
        uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(re::internal **a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **(void **)(a2 + 16) | 0xFFFFFFFF00000000);
    uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    if (v3) {
      return *(uint64_t (**)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))v3;
    }
  }
  return v2;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720EE0;
  re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

uint64_t re::serializeType<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::internal **a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
      goto LABEL_295;
    }
    uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 16);
    }
    else {
      int v20 = -1;
    }
    uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 16);
    }
    else {
      int v22 = -1;
    }
    if (v20 != v22)
    {
      uint64_t v26 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      LOBYTE(v195) = v26;
      unsigned __int16 v47 = "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.";
LABEL_76:
      return 0;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_10;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (!re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_295;
        }
LABEL_22:
        uint64_t v23 = re::TypeInfo::name(this);
        unint64_t v24 = (unint64_t)*v23 >> 1;
        if (v24 <= 0xCA3DEFB5)
        {
          if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
          {
            if ((unint64_t)*v23 >> 1 <= 0x2E9355)
            {
              if (v24 != 104431)
              {
                if (v24 == 3029738)
                {
                  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool((uint64_t)(a1 + 3), a2, a4);
                }
                goto LABEL_355;
              }
LABEL_288:
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>((uint64_t)(a1 + 3), a2, (unsigned int *)a4);
            }
            if (v24 == 3052374)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar((uint64_t)(a1 + 3), a2, (uint64_t)a4);
            }
            uint64_t v165 = 3327612;
            goto LABEL_274;
          }
          if ((unint64_t)*v23 >> 1 <= 0xB0F77BD0)
          {
            if (v24 == 97526364)
            {
              return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)(a1 + 3), a2, (float *)a4);
            }
            uint64_t v51 = 109413500;
            goto LABEL_178;
          }
          if (v24 == 2969009105)
          {
            return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>((uint64_t)(a1 + 3), a2, (double *)a4);
          }
          if (v24 == 3111160798)
          {
            return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>((uint64_t)(a1 + 3), a2, (char *)a4);
          }
          goto LABEL_355;
        }
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>((uint64_t)(a1 + 3), a2, a4);
            }
            if (v24 == 0x303EE86A734)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>((uint64_t)(a1 + 3), a2, (unsigned __int16 *)a4);
            }
            goto LABEL_355;
          }
          if (v24 == 0x303EE8780EELL)
          {
            return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)(a1 + 3), a2, (unsigned int *)a4);
          }
          if (v24 != 0x303EE88E58DLL)
          {
LABEL_355:
            uint64_t v195 = re::TypeInfo::name(this)[1];
            unsigned __int16 v47 = "Unsupported basic type \"%s\".";
            goto LABEL_76;
          }
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03) {
              goto LABEL_288;
            }
            uint64_t v165 = 0x16749F63A2;
LABEL_274:
            if (v24 == v165)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>((uint64_t)(a1 + 3), a2, (unint64_t *)a4);
            }
            goto LABEL_355;
          }
          if (v24 != 3393056694)
          {
            uint64_t v51 = 0x16749D2549;
LABEL_178:
            if (v24 == v51)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>((uint64_t)(a1 + 3), a2, (__int16 *)a4);
            }
            goto LABEL_355;
          }
        }
        return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 3), a2, (rapidjson::internal **)a4);
      }
      uint64_t v62 = **((void **)this + 2);
      uint64_t v63 = **((void **)a6 + 2);
      if ((unsigned __int16)v62 == (unsigned __int16)v63)
      {
        BOOL v18 = WORD1(v62) == WORD1(v63);
        uint64_t v64 = (v63 ^ v62) & 0xFFFFFF00000000;
        if (v18 && v64 == 0) {
          goto LABEL_22;
        }
      }
      goto LABEL_295;
    case 2:
      if (this == a6) {
        goto LABEL_233;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v66 = **((void **)this + 2);
        uint64_t v67 = **((void **)a6 + 2);
        if ((unsigned __int16)v66 == (unsigned __int16)v67
          && WORD1(v66) == WORD1(v67)
          && ((v67 ^ v66) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_111;
        }
        int v27 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_111:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v148 = **((void **)this + 2);
            uint64_t v149 = **((void **)a6 + 2);
            if ((unsigned __int16)v148 == (unsigned __int16)v149
              && ((BOOL v18 = WORD1(v148) == WORD1(v149), v150 = (v149 ^ v148) & 0xFFFFFF00000000, v18)
                ? (BOOL v151 = v150 == 0)
                : (BOOL v151 = 0),
                  v151))
            {
LABEL_233:
              BOOL v70 = 0;
            }
            else
            {
              BOOL v70 = 1;
            }
          }
          else
          {
            BOOL v70 = !re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            __dst.n128_u64[0] = 0;
            uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst);
            if (!result) {
              return result;
            }
            uint64_t v152 = (_anonymous_namespace_ *)(a1 + 3);
LABEL_237:
            return *((unsigned char *)a1 + 64) == 0;
          }
          if (*(_DWORD *)(*((void *)this + 2) + 8) >= 9u)
          {
            uint64_t v195 = re::TypeInfo::name(this)[1];
            unsigned __int16 v47 = "Enum type \"%s\" has invalid size: %zu bytes";
            goto LABEL_76;
          }
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(this, (const re::TypeInfo *)a4, a3);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            __dst.n128_u64[0] = 0;
            memcpy(&__dst, a4, *(unsigned int *)(*((void *)this + 2) + 8));
            LOBYTE(v195) = __dst.n128_u8[0];
            re::TypeInfo::name(this);
            unsigned __int16 v47 = "Value %zu is not a valid enum constant of \"%s\".";
            goto LABEL_76;
          }
          unsigned int v154 = EnumConstantIndex;
          if (v70)
          {
            uint64_t v155 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (!v155 || (uint64_t v156 = re::internal::TypeTranslationTable::translateRuntimeEnum(v155, this, v154, a6)) == 0)
            {
              uint64_t v157 = re::TypeInfo::enumConstants(this);
              uint64_t v159 = v154;
              if (v158 > v154)
              {
                uint64_t v195 = *(void *)(v157 + 24 * v154 + 16);
                re::TypeInfo::name(a6);
                unsigned __int16 v47 = "Runtime enum constant \"%s\" does not exist in serialized type \"%s\".";
                goto LABEL_76;
              }
LABEL_372:
              re::internal::assertLog((re::internal *)6, v158, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v159, v158);
              _os_crash();
              __break(1u);
            }
LABEL_304:
            uint64_t v168 = *(const char **)(v156 + 16);
            __dst.n128_u64[0] = strlen(v168);
            if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst))
            {
              re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString((uint64_t)(a1 + 3), (uint64_t)v168);
              uint64_t v152 = (_anonymous_namespace_ *)(a1 + 3);
              goto LABEL_237;
            }
            return 0;
          }
          uint64_t result = re::TypeInfo::enumConstants(this);
          uint64_t v167 = v154;
          if (v166 > v154)
          {
            if (!result) {
              return result;
            }
            uint64_t v156 = result + 24 * v154;
            goto LABEL_304;
          }
LABEL_371:
          re::internal::assertLog((re::internal *)6, v166, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v167, v166);
          _os_crash();
          __break(1u);
          goto LABEL_372;
        }
        int v27 = *((unsigned __int8 *)this + 12);
      }
      if (v27 == *((unsigned __int8 *)a6 + 12))
      {
        uint64_t v68 = re::TypeInfo::name(this);
        uint64_t v69 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v68, v69)) {
          goto LABEL_111;
        }
      }
      goto LABEL_295;
    case 3:
      if (this == a6) {
        goto LABEL_118;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v71 = **((void **)this + 2);
        uint64_t v72 = **((void **)a6 + 2);
        if ((unsigned __int16)v71 == (unsigned __int16)v72
          && WORD1(v71) == WORD1(v72)
          && ((v72 ^ v71) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_118;
        }
        int v28 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_118;
        }
        int v28 = *((unsigned __int8 *)this + 12);
      }
      if (v28 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_295;
      }
LABEL_118:
      if (a7)
      {
        __dst.n128_u8[0] = 0;
        re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional((uint64_t)(a1 + 3), a2, &__dst);
        uint64_t v73 = (_anonymous_namespace_ *)(a1 + 3);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        uint64_t v74 = (*(uint64_t (**)(unsigned __int8 *))(v214 + 80))(a4);
        LOBYTE(v209[0]) = v74 != 0;
        double v75 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional((uint64_t)(a1 + 3), a2, v209);
        if (v74)
        {
          uint64_t v76 = (*(uint64_t (**)(unsigned __int8 *, double))(v214 + 80))(a4, v75);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, uint64_t, rapidjson::internal **, unsigned char *, void))*a1
          }
             + 9))(a1, a2, 0, v76, &v202, v210, 0);
        }
        uint64_t v73 = (_anonymous_namespace_ *)(a1 + 3);
      }
      return *((unsigned char *)a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_133;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v77 = **((void **)this + 2);
        uint64_t v78 = **((void **)a6 + 2);
        if ((unsigned __int16)v77 == (unsigned __int16)v78)
        {
          BOOL v18 = WORD1(v77) == WORD1(v78);
          uint64_t v79 = (v78 ^ v77) & 0xFFFFFF00000000;
          if (v18 && v79 == 0) {
            goto LABEL_133;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_133;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_295;
      }
      uint64_t v81 = *((void *)this + 2);
      uint64_t v82 = *((void *)a6 + 2);
      int v83 = *(_DWORD *)(v82 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v81 + 84) & 0xFFFFFF) != 0)
      {
        if (!v83) {
          goto LABEL_295;
        }
LABEL_133:
        if (a7)
        {
          double v84 = a1[34];
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
          re::internal::translateType(v84, (const re::TypeRegistry *)v210, (uint64_t)&v202);
          uint64_t v85 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
          if (!v85) {
            goto LABEL_207;
          }
          uint64_t v86 = (void (*)(re::internal **, void, void, void, rapidjson::internal **, rapidjson::internal **, uint64_t))v85;
          uint64_t v87 = *((void *)a6 + 2);
          int v88 = *(_DWORD *)(v87 + 84) & 0xFFFFFF;
          if (v88)
          {
            unint64_t v89 = 0;
            int v90 = 8;
          }
          else
          {
            unint64_t v89 = *(int *)(v87 + 88);
            int v90 = 4;
          }
          __dst.n128_u64[0] = v89;
          long long v96 = (_anonymous_namespace_ *)(a1 + 3);
          uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst, v90);
          if (!result) {
            return result;
          }
          if (v88) {
            BOOL v160 = v89 == 0;
          }
          else {
            BOOL v160 = 1;
          }
          char v161 = v160;
          if (!v160)
          {
            v209[0] = 0;
            v209[1] = 0xFFFFFFFFLL;
            (*((void (**)(re::internal **, void, void *))*a1 + 2))(a1, 0, v209);
          }
          for (; v89; --v89)
            v86(a1, 0, 0, 0, &v202, &v202, 1);
          if (v161) {
            goto LABEL_310;
          }
        }
        else
        {
          re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
          re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
          uint64_t v91 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
          if (!v91) {
            goto LABEL_207;
          }
          uint64_t v92 = (void (*)(re::internal **, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v91;
          uint64_t v93 = (void *)re::ArrayAccessor::size((re::ArrayAccessor *)&__dst, (char *)a4);
          v207[0] = v93;
          int v94 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v94) {
            int v95 = 8;
          }
          else {
            int v95 = 4;
          }
          long long v96 = (_anonymous_namespace_ *)(a1 + 3);
          uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, (uint64_t *)v207, v95);
          if (!result) {
            return result;
          }
          if (v94) {
            BOOL v97 = v93 == 0;
          }
          else {
            BOOL v97 = 1;
          }
          char v98 = v97;
          if (v97)
          {
            if (!v93) {
              goto LABEL_310;
            }
          }
          else
          {
            uint64_t v169 = *(void *)a4;
            v208[0] = 0;
            v208[1] = 0xFFFFFFFFLL;
            (*((void (**)(re::internal **, uint64_t, uint64_t *))*a1 + 2))(a1, v169, v208);
          }
          unint64_t v170 = 0;
          do
          {
            uint64_t v171 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&__dst, (char *)a4, v170);
            v92(a1, 0, 0, v171, &v202, v210, 0);
            ++v170;
          }
          while (v93 != (void *)v170);
          if (v98)
          {
LABEL_310:
            uint64_t v103 = v96;
LABEL_311:
            re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(v103);
            return *((unsigned char *)a1 + 64) == 0;
          }
        }
        (*((void (**)(re::internal **))*a1 + 3))(a1);
        goto LABEL_310;
      }
      if (!v83 && *(_DWORD *)(v81 + 88) == *(_DWORD *)(v82 + 88)) {
        goto LABEL_133;
      }
      goto LABEL_295;
    case 5:
      if (this == a6) {
        goto LABEL_157;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v99 = **((void **)this + 2);
        uint64_t v100 = **((void **)a6 + 2);
        if ((unsigned __int16)v99 == (unsigned __int16)v100
          && WORD1(v99) == WORD1(v100)
          && ((v100 ^ v99) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_157;
        }
        int v29 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_157;
        }
        int v29 = *((unsigned __int8 *)this + 12);
      }
      if (v29 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_295;
      }
LABEL_157:
      if (a7)
      {
        uint64_t v101 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v101, (const re::TypeRegistry *)v210, (uint64_t)&v202);
        if (!(*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202)) {
          goto LABEL_207;
        }
        __dst.n128_u64[0] = 0;
        BOOL v102 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst, 0);
        uint64_t result = 0;
        if (v102)
        {
          uint64_t v103 = (_anonymous_namespace_ *)(a1 + 3);
          goto LABEL_311;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
      uint64_t v104 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
      if (!v104) {
        goto LABEL_207;
      }
      int v105 = (void (*)(re::internal **, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v104;
      uint64_t v106 = (*(uint64_t (**)(unsigned __int8 *))(v214 + 80))(a4);
      v208[0] = v106;
      long long v96 = (_anonymous_namespace_ *)(a1 + 3);
      BOOL v107 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, v208, 0);
      uint64_t result = 0;
      if (!v107) {
        return result;
      }
      if (*(void *)(v214 + 96))
      {
        if (v106)
        {
          for (uint64_t i = 0; i != v106; ++i)
          {
            uint64_t v109 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v214 + 96))(a4, i);
            v105(a1, 0, 0, v109, &v202, v210, 0);
          }
        }
      }
      else
      {
        uint64_t v176 = *(uint64_t (**)(unsigned __int8 *, re::internal *))(v214 + 104);
        if (!v176 || !*(void *)(v214 + 112) || !*(void *)(v214 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst);
          uint64_t v195 = re::TypeInfo::name((re::TypeInfo *)v209)[1];
          unsigned __int16 v47 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_76;
        }
        uint64_t v177 = v176(a4, a1[7]);
        uint64_t v178 = (*(uint64_t (**)(void))(v214 + 112))();
        if (v178)
        {
          uint64_t v179 = v178;
          do
          {
            v105(a1, 0, 0, v179, &v202, v210, 0);
            uint64_t v179 = (*(uint64_t (**)(uint64_t))(v214 + 112))(v177);
          }
          while (v179);
        }
        (*(void (**)(uint64_t, re::internal *))(v214 + 120))(v177, a1[7]);
      }
      goto LABEL_310;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
      uint64_t v31 = re::TypeInfo::name((re::TypeInfo *)&v202);
      int v32 = BYTE4(v203);
      if (BYTE4(v203) != 1) {
        goto LABEL_91;
      }
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v202))
      {
        unint64_t v33 = (unint64_t)*v31 >> 1;
        if (v33 > 0x303EE8780EDLL)
        {
          if (v33 == 0x303EE8780EELL)
          {
            uint64_t v173 = (char *)v31[1];
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
            if (v173 == "uint32_t") {
              return ((uint64_t (*)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            int v174 = strcmp(v173, "uint32_t");
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
            if (!v174) {
              return ((uint64_t (*)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            goto LABEL_318;
          }
          if (v33 != 0x303EE88E58DLL)
          {
LABEL_318:
            __dst.n128_u64[0] = 0x18E6A9A093;
            __dst.n128_u64[1] = (unint64_t)"uint8_t";
            BOOL v175 = re::StringID::operator==(v31, &__dst);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>;
            if (v175) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 0x16749F63A2;
            __dst.n128_u64[1] = (unint64_t)"int64_t";
            if (re::StringID::operator==(v31, &__dst)) {
              return ((uint64_t (*)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>)(a1, a2, a3, a4, this, a6, a7);
            }
            *(void *)uint64_t v210 = 3327612;
            *(void *)&v210[8] = "long";
            BOOL v188 = re::StringID::operator==(v31, v210);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>;
            if (v188) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 104431;
            __dst.n128_u64[1] = (unint64_t)"int";
            BOOL v189 = re::StringID::operator==(v31, &__dst);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>;
            if (v189) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 109413500;
            __dst.n128_u64[1] = (unint64_t)"short";
            BOOL v190 = re::StringID::operator==(v31, &__dst);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>;
            if (v190) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            goto LABEL_194;
          }
          unsigned int v114 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (v114 != "uint64_t")
          {
            uint64_t v115 = "uint64_t";
            goto LABEL_314;
          }
        }
        else
        {
          if (v33 != 3393056694)
          {
            if (v33 == 0x303EE86A734)
            {
              uint64_t v34 = (char *)v31[1];
              uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
              if (v34 == "uint16_t") {
                return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
              }
              int v36 = strcmp(v34, "uint16_t");
              uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
              if (!v36) {
                return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
              }
            }
            goto LABEL_318;
          }
          unsigned int v114 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (v114 != "size_t")
          {
            uint64_t v115 = "size_t";
LABEL_314:
            int v172 = strcmp(v114, v115);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
            if (!v172) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            goto LABEL_318;
          }
        }
        return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
      }
      int v32 = BYTE4(v203);
LABEL_91:
      if (v32 == 8)
      {
        unint64_t v54 = (unint64_t)*v31 >> 1;
        if (v54 == 0x22C6ED80D0CLL)
        {
          uint64_t v116 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (v116 == "StringID") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
          int v117 = strcmp(v116, "StringID");
          uint64_t v35 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (!v117) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
        }
        else if (v54 == 0x134375A94D9F7110)
        {
          int v55 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (v55 == "DynamicString") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
          int v56 = strcmp(v55, "DynamicString");
          uint64_t v35 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (!v56) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
        }
      }
LABEL_194:
      if (this == a6) {
        goto LABEL_202;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (re::areSameTranslatedVersion(this, a6, v30)) {
          goto LABEL_202;
        }
        goto LABEL_201;
      }
      uint64_t v118 = **((void **)this + 2);
      uint64_t v119 = **((void **)a6 + 2);
      if ((unsigned __int16)v118 != (unsigned __int16)v119
        || WORD1(v118) != WORD1(v119)
        || ((v119 ^ v118) & 0xFFFFFF00000000) != 0)
      {
LABEL_201:
        if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12)) {
          goto LABEL_202;
        }
LABEL_295:
        return 0;
      }
LABEL_202:
      if (a7)
      {
        uint64_t v120 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v120, (const re::TypeRegistry *)v210, (uint64_t)&v202);
        uint64_t v121 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v121, (const re::TypeRegistry *)v209, (uint64_t)v210);
        if ((*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202))
        {
          if ((*((uint64_t (**)(re::internal **, unsigned char *))*a1 + 10))(a1, v210))
          {
            __dst.n128_u64[0] = 0;
            uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst);
            if (result)
            {
              uint64_t v122 = (_anonymous_namespace_ *)(a1 + 3);
              goto LABEL_368;
            }
            return result;
          }
          uint64_t v123 = (re::TypeInfo *)v210;
        }
        else
        {
LABEL_207:
          uint64_t v123 = (re::TypeInfo *)&v202;
        }
        goto LABEL_208;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v208, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v207, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v200, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)v198, (uint64_t)this);
      uint64_t v129 = (*((uint64_t (**)(re::internal **, void *))*a1 + 10))(a1, v209);
      if (!v129)
      {
        uint64_t v123 = (re::TypeInfo *)v209;
LABEL_208:
        uint64_t v196 = re::TypeInfo::name(v123)[1];
        return 0;
      }
      uint64_t v130 = (void (*)(re::internal **, const char *, void, uint64_t, void *, void **, void))v129;
      uint64_t v131 = (*((uint64_t (**)(re::internal **, uint64_t *))*a1 + 10))(a1, v208);
      if (!v131)
      {
        uint64_t v123 = (re::TypeInfo *)v208;
        goto LABEL_208;
      }
      int v132 = (void (*)(re::internal **, const char *, void, uint64_t, uint64_t *, unsigned char *, void))v131;
      unint64_t v133 = (*(uint64_t (**)(unsigned __int8 *))(v199 + 88))(a4);
      unint64_t v197 = v133;
      uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary((uint64_t)(a1 + 3), a2, (uint64_t *)&v197);
      if (!result) {
        return result;
      }
      if (!v133) {
        goto LABEL_367;
      }
      uint64_t v134 = *(void **)this;
      __dst.n128_u64[0] = 0x449AD97C4B77BED4;
      __dst.n128_u64[1] = (unint64_t)"_CompareFunc";
      uint64_t v135 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v134 + 25), &__dst);
      if (!v135)
      {
        re::StringID::destroyString((re::StringID *)&__dst);
LABEL_364:
        uint64_t v191 = (*(uint64_t (**)(unsigned __int8 *, re::internal *))(v199 + 112))(a4, a1[7]);
        (*(void (**)(void))(v199 + 120))();
        do
        {
          double v192 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry((uint64_t)(a1 + 3), 0);
          uint64_t v193 = (*(uint64_t (**)(uint64_t, double))(v199 + 128))(v191, v192);
          v130(a1, "key", 0, v193, v209, v207, 0);
          uint64_t v194 = (*(uint64_t (**)(uint64_t))(v199 + 136))(v191);
          v132(a1, "value", 0, v194, v208, v200, 0);
          re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 3));
          (*(void (**)(uint64_t))(v199 + 120))(v191);
          --v133;
        }
        while (v133);
        (*(void (**)(uint64_t, re::internal *))(v199 + 144))(v191, a1[7]);
        goto LABEL_367;
      }
      unint64_t v136 = *v135;
      re::StringID::destroyString((re::StringID *)&__dst);
      if (!v134) {
        goto LABEL_364;
      }
      unint64_t v137 = *(void *)v209[2];
      __dst.n128_u64[0] = v136;
      __dst.n128_u64[1] = v137;
      LODWORD(v214) = -1;
      uint64_t v138 = (uint64_t (**)(uint64_t, uint64_t))re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v209[0] + 768, (uint64_t *)&__dst);
      if (!v138) {
        goto LABEL_364;
      }
      uint64_t v139 = *v138;
      if (!*v138) {
        goto LABEL_364;
      }
      uint64_t v206 = 0;
      uint64_t v203 = 0;
      unint64_t v204 = 0;
      int v205 = 0;
      unint64_t v202 = a1[7];
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v202, v133);
      ++v205;
      uint64_t v140 = (*(uint64_t (**)(unsigned __int8 *, re::internal *))(v199 + 112))(a4, a1[7]);
      if ((*(unsigned int (**)(void))(v199 + 120))())
      {
        do
        {
          uint64_t v141 = (*(uint64_t (**)(uint64_t))(v199 + 128))(v140);
          uint64_t v142 = (*(uint64_t (**)(uint64_t))(v199 + 136))(v140);
          __dst.n128_u64[0] = v141;
          __dst.n128_u64[1] = v142;
          __n128 v143 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v202, &__dst);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v199 + 120))(v140, v143) & 1) != 0);
      }
      (*(void (**)(uint64_t, re::internal *))(v199 + 144))(v140, a1[7]);
      std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(v206, &v206[16 * v204], v139);
      uint64_t v144 = 0;
      unint64_t v145 = 0;
      if (v133 <= 1) {
        unint64_t v133 = 1;
      }
      do
      {
        double v146 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry((uint64_t)(a1 + 3), 0);
        unint64_t v147 = v204;
        if (v204 <= v145)
        {
          uint64_t v201 = 0;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v210 = 136315906;
          *(void *)&v210[4] = "operator[]";
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = 789;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v145;
          __int16 v211 = 2048;
          unint64_t v212 = v147;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_370:
          uint64_t v201 = 0;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v210 = 136315906;
          *(void *)&v210[4] = "operator[]";
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = 789;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v145;
          __int16 v211 = 2048;
          unint64_t v212 = v147;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_371;
        }
        ((void (*)(re::internal **, const char *, void, void, void *, void **, void, double))v130)(a1, "key", 0, *(void *)&v206[v144], v209, v207, 0, v146);
        unint64_t v147 = v204;
        if (v204 <= v145) {
          goto LABEL_370;
        }
        v132(a1, "value", 0, *(void *)&v206[v144 + 8], v208, v200, 0);
        re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 3));
        ++v145;
        v144 += 16;
      }
      while (v133 != v145);
      if (v202 && v206) {
        (*(void (**)(void))(*(void *)v202 + 40))();
      }
LABEL_367:
      uint64_t v122 = (_anonymous_namespace_ *)(a1 + 3);
LABEL_368:
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(v122);
      return *((unsigned char *)a1 + 64) == 0;
    case 7:
      if (this == a6) {
        goto LABEL_59;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v110 = **((void **)this + 2);
        uint64_t v111 = **((void **)a6 + 2);
        if ((unsigned __int16)v110 != (unsigned __int16)v111) {
          goto LABEL_295;
        }
        BOOL v18 = WORD1(v110) == WORD1(v111);
        uint64_t v112 = (v111 ^ v110) & 0xFFFFFF00000000;
        if (!v18 || v112 != 0) {
          goto LABEL_295;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_295;
      }
LABEL_59:
      uint64_t v37 = (_anonymous_namespace_ *)(a1 + 3);
      uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 3), a2, 16);
      if (a7)
      {
        if (!result) {
          return result;
        }
        unint64_t v202 = 0;
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 3), "tag", &v202);
        if (*(_DWORD *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, 0, (uint64_t)&__dst);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, void, __n128 *, __n128 *, uint64_t))*a1 + 9))(a1, "value", 0, 0, &__dst, &__dst, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        uint64_t v52 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        unint64_t Tag = re::UnionAccessor::readTag(v52, (char *)a4);
        *(void *)uint64_t v210 = Tag;
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 3), "tag", (rapidjson::internal **)v210);
        if (Tag < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, Tag, (uint64_t)&v202);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, unsigned __int8 *, rapidjson::internal **, rapidjson::internal **, void))*a1
          }
             + 9))(a1, "value", 0, a4, &v202, &v202, 0);
        }
      }
      goto LABEL_357;
    case 8:
      if (!a7) {
        goto LABEL_69;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        int v57 = a1[34];
        *(void *)uint64_t v210 = 0x2686EB529B3EE220;
        *(void *)&v210[8] = "DynamicString";
        re::TypeRegistry::typeInfo(v57, (const re::StringID *)v210, &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
        re::StringID::destroyString((re::StringID *)v210);
        uint64_t v58 = (re *)&v202;
        uint64_t v59 = (re::TypeInfo *)&v202;
        uint64_t v60 = (uint64_t)a1;
        uint64_t v61 = a2;
      }
      else
      {
        uint64_t v38 = re::TypeInfo::name(this);
        if ((*v38 & 0xFFFFFFFFFFFFFFFELL) != 0x2686EB529B3EE220
          || (uint64_t v40 = (char *)v38[1], v40 != "DynamicString") && strcmp(v40, "DynamicString"))
        {
LABEL_69:
          uint64_t v41 = *((void *)this + 2);
          if ((*(unsigned char *)(v41 + 48) & 4) == 0)
          {
            uint64_t v37 = (_anonymous_namespace_ *)(a1 + 3);
            BOOL v42 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 3), a2, 0);
            uint64_t result = 0;
            if (!v42) {
              return result;
            }
            uint64_t v43 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
            if (!v43 || *(_DWORD *)(v43 + 16) >= 2u)
            {
              uint64_t v45 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
              if (v45) {
                unsigned __int32 v46 = *(_DWORD *)(v45 + 16);
              }
              else {
                unsigned __int32 v46 = -1;
              }
              __dst.n128_u32[0] = v46;
              re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)(a1 + 3), "@version", (unsigned int *)&__dst);
            }
            if (this == a6) {
              goto LABEL_333;
            }
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v180 = **((void **)this + 2);
              uint64_t v181 = **((void **)a6 + 2);
              if ((unsigned __int16)v180 == (unsigned __int16)v181
                && WORD1(v180) == WORD1(v181)
                && ((v181 ^ v180) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_333;
              }
            }
            else if (re::areSameTranslatedVersion(this, a6, v44))
            {
LABEL_333:
              re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, (uint64_t)a4, (uint64_t *)this, a7);
LABEL_357:
              re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v37);
              return *((unsigned char *)a1 + 64) == 0;
            }
            if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12))
            {
              re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, (uint64_t)a4, (uint64_t *)this, (uint64_t *)a6, a7);
            }
            else
            {
              uint64_t v182 = re::TypeInfo::name(this)[1];
              re::TypeInfo::name(a6);
            }
            goto LABEL_357;
          }
          int v48 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(void *)this, v41);
          re::TypeMemberCollection::operator[](v48, 0, (uint64_t)v210);
          unsigned int v49 = &a4[*(unsigned int *)(*(void *)&v210[16] + 24)];
          re::TypeRegistry::typeInfo(*(void **)v210, **(void **)&v210[16], &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
          if (this != a6)
          {
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v162 = **((void **)this + 2);
              uint64_t v163 = *((void *)a6 + 2);
              uint64_t v164 = *(void *)v163;
              if ((unsigned __int16)v162 == (unsigned __int16)*(void *)v163
                && WORD1(v162) == WORD1(v164)
                && ((v164 ^ v162) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_80;
              }
            }
            else
            {
              if (re::areSameTranslatedVersion(this, a6, v50)) {
                goto LABEL_80;
              }
              uint64_t v163 = *((void *)a6 + 2);
            }
            if (*(_DWORD *)(v163 + 88) == 1)
            {
              re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v202, *(void *)a6, v163);
              re::TypeMemberCollection::operator[]((uint64_t *)&v202, 0, (uint64_t)v207);
              re::TypeRegistry::typeInfo(v207[0], *v207[2], &__dst);
              re::TypeInfo::TypeInfo((uint64_t)v208, (uint64_t)&__dst.n128_i64[1]);
              if (!*((unsigned char *)a1 + 64)) {
                return (*((uint64_t (**)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, void *, uint64_t *, uint64_t))*a1
              }
                        + 9))(a1, a2, a3, v49, v209, v208, a7);
              return 0;
            }
            goto LABEL_295;
          }
LABEL_80:
          if (*((unsigned char *)a1 + 64)) {
            return 0;
          }
          return (*((uint64_t (**)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, void *, void *, uint64_t))*a1
                  + 9))(a1, a2, a3, v49, v209, v209, a7);
        }
        uint64_t v60 = (uint64_t)a1;
        uint64_t v61 = a2;
        uint64_t v58 = this;
        uint64_t v59 = this;
      }
      re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v60, v61, v39, 0, v58, v59, 1);
      return *((unsigned char *)a1 + 64) == 0;
    case 9:
      uint64_t v195 = re::TypeInfo::name(this)[1];
      unsigned __int16 v47 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_76;
    default:
      LOBYTE(v195) = *((unsigned char *)this + 12);
      unsigned __int16 v47 = "Invalid type category. Value = %d";
      goto LABEL_76;
  }
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(uint64_t a1, const char *a2, unsigned int *a3)
{
  uint64_t v11 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v11);
    }
    uint64_t v6 = *(char **)(a1 + 168);
    uint64_t v7 = (rapidjson::internal *)*a3;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v6, v7, v8);
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, const char *a2, float *a3)
{
  uint64_t v13 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v13);
    }
    float v6 = *a3;
    uint64_t v7 = *(char **)(a1 + 168);
    if (fabsf(v6) == INFINITY)
    {
      int v8 = "-Infinity";
      if (v6 > 0.0) {
        int v8 = "Infinity";
      }
      uint64_t v12 = v8;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v7, &v12);
    }
    else
    {
      double v9 = v6;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v7, v9);
    }
    uint64_t v10 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v10 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, const char *a2, double *a3)
{
  uint64_t v12 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v12);
    }
    double v6 = *a3;
    uint64_t v7 = *(char **)(a1 + 168);
    if (fabs(v6) == INFINITY)
    {
      int v8 = "-Infinity";
      if (v6 > 0.0) {
        int v8 = "Infinity";
      }
      uint64_t v11 = v8;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v7, &v11);
    }
    else
    {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v7, v6);
    }
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    uint64_t v6 = *a3;
    if (!*a3)
    {
      uint64_t v7 = *(char **)(a1 + 168);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v7);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v7, (uint64_t)"", 0);
      uint64_t v6 = *a3;
    }
    LOBYTE(v9) = 8;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = v14;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = v6;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v9);
  }
  return v3 == 0;
}

uint64_t re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 40))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(*(void *)(result + 128) + 48 * *(void *)(result + 112) - 24);
    uint64_t v5 = *(char **)(result + 168);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v5);
    uint64_t result = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v5, a2, v4);
    uint64_t v6 = *(void *)(v3 + 128) + 48 * *(void *)(v3 + 112);
    *(void *)(v6 - 16) += v4;
  }
  return result;
}

double re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, const char *a2, unsigned char *a3)
{
  uint64_t v13 = a2;
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v13);
    }
    if (*a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v6 = *(char **)(a1 + 168);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v6);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v6);
      uint64_t v5 = *a3;
    }
    LOBYTE(v8) = 3;
    DWORD1(v8) = 0;
    *((void *)&v8 + 1) = v13;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = v5;
    return re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v8);
  }
  return result;
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(uint64_t a1, const char *a2, uint64_t *a3, int a4)
{
  uint64_t v15 = a2;
  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v15);
    }
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v8 = *a3;
    LOBYTE(v10) = 5;
    DWORD1(v10) = a4 & 0xFFFFFFDF;
    *((void *)&v10 + 1) = v15;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = v8;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v10);
  }
  return v4 == 0;
}

_anonymous_namespace_ *re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      int v4 = (uint64_t *)*((void *)result + 21);
      v4[4] -= 16;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndArray(v4);
      uint64_t v5 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      ++*(void *)(v5 - 16);
    }
    else
    {
      if (v9) {
        uint64_t v6 = *(unsigned char **)&v10[7];
      }
      else {
        uint64_t v6 = v10;
      }
      uint64_t v7 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)&v11, v6, *(void *)(v7 - 24), *(void *)(v7 - 16));
      if (v11 && (v12 & 1) != 0) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      double result = v8;
      if (v8)
      {
        if (v9) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v8 + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      unsigned __int16 v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(v47, (unint64_t **)&v47[v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          uint64_t v31 = *(unint64_t **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      unsigned __int16 v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(v47, (unsigned int **)&v47[v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          uint64_t v31 = *(unsigned int **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      unsigned __int16 v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(v47, &v47[2 * v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          uint64_t v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int8 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      unsigned __int16 v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(v47, &v47[2 * v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          uint64_t v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(v52, (__n128 *)&v52[v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        uint64_t v31 = &v52[v50];
        do
        {
          unint64_t v32 = **(void **)v30;
          if ((v32 & 0x8000000000000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unint64_t v32 = -(uint64_t)v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 19
            || (unsigned int v35 = (1233 * (64 - __clz(v32 | 1))) >> 12,
                int64_t v36 = v35 - (std::__itoa::__pow10_64[v35] > v32) + 1,
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v20);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(v52, (__n128 *)&v52[v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        uint64_t v31 = &v52[v50];
        do
        {
          unsigned int v32 = **(_DWORD **)v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v20);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(v52, &v52[2 * v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        uint64_t v31 = &v52[2 * v50];
        do
        {
          unsigned int v32 = **v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = v30[1];
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          v30 += 2;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v20);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL v24 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(v52, &v52[2 * v50], v32, 1);
        if (v50)
        {
          unint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v35 = *v33;
            if (*(unsigned char *)(*v33 + 8)) {
              uint64_t v36 = *(void *)(v35 + 16);
            }
            else {
              uint64_t v36 = v35 + 9;
            }
            v23(a1, v36, 0, v33[1], v47, v46, 0);
            v33 += 2;
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, void, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL v24 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        uint64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>((unint64_t)v52, (__n128 *)&v52[2 * v50], v32, 1);
        if (v50)
        {
          unint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v36 = *v33;
            uint64_t v35 = v33[1];
            v33 += 2;
            v23(a1, *(void *)(v36 + 8), 0, v35, v47, v46, 0);
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v13 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v13);
    }
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v6 = *a3;
    LOBYTE(v8) = 6;
    DWORD1(v8) = 0;
    *((void *)&v8 + 1) = v13;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = v6;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v8);
  }
  return v3 == 0;
}

double re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(void *)(a1 + 168));
    LOBYTE(v5[0]) = 7;
    DWORD1(v5[0]) = a2 | 0x20;
    *((void *)&v5[0] + 1) = "entry";
    v5[1] = xmmword_23436C460;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    return re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, v5);
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == 2)
    {
      int v4 = (uint64_t *)*((void *)result + 21);
      v4[4] -= 16;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndObject(v4);
      uint64_t v5 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      ++*(void *)(v5 - 16);
    }
    else
    {
      if (v8) {
        uint64_t v6 = *(unsigned char **)&v9[7];
      }
      else {
        uint64_t v6 = v9;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary entry \"%s\". Expected 2 objects (key+value). Actual number of objects: %lld.", (re::DynamicString *)&v10, v6, *(void *)(*((void *)v1 + 16) + 48 * *((void *)v1 + 14) - 16));
      if (v10 && (v11 & 1) != 0) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      double result = v7;
      if (v7)
      {
        if (v8) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v7 + 40))();
        }
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 16);
    unint64_t v3 = *((void *)result + 14);
    if (*(void *)(v2 + 48 * v3 - 16) == *(void *)(v2 + 48 * v3 - 24))
    {
      int v4 = (uint64_t *)*((void *)result + 21);
      v4[4] -= 16;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteEndArray(v4);
      uint64_t v5 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      ++*(void *)(v5 - 16);
    }
    else
    {
      if (v9) {
        uint64_t v6 = *(unsigned char **)&v10[7];
      }
      else {
        uint64_t v6 = v10;
      }
      uint64_t v7 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)&v11, v6, *(void *)(v7 - 24), *(void *)(v7 - 16));
      if (v11 && (v12 & 1) != 0) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      double result = v8;
      if (v8)
      {
        if (v9) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v8 + 40))();
        }
      }
    }
  }
  return result;
}

void std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(char *a1, char *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v3 = 126 - 2 * __clz((a2 - a1) >> 4);
  uint64_t v5 = a3;
  if (a2 == a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, a2, &v5, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(long long *a1, unint64_t **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(void **)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (unint64_t **)(v10 + 16);
            BOOL v41 = (unint64_t **)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(unint64_t **)(v43 + 16);
                  if (*v45 < **(void **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v79 = v39;
                uint64_t v80 = (unint64_t *)*((void *)a1 + 2);
                if (*v80 < **(void **)a1)
                {
                  uint64_t v81 = (unint64_t *)*((void *)a1 + 3);
                  uint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)uint64_t v82 = *((_OWORD *)v82 - 1);
                    int v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (*v80 < *v83);
                  *uint64_t v82 = v80;
                  v82[1] = v81;
                }
                uint64_t v39 = v79 + 2;
                a1 = (long long *)v79;
              }
              while (v79 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unint64_t **)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (unint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v55 = **v54;
                    unint64_t v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unint64_t v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = **v54;
                  }
                  uint64_t v58 = (unint64_t **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (unint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v65 = **v54;
                        unint64_t v63 = *v54[2];
                        BOOL v64 = v65 >= v63;
                        if (v65 <= v63) {
                          unint64_t v65 = *v54[2];
                        }
                        if (v64) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(void **)v69 < **(void **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if ((unint64_t **)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 < **(void **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, (unint64_t **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 2, (unint64_t **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v14 - 1, v14, (unint64_t **)&a1[v13 + 1]);
            long long v84 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(&a1[v12 >> 1], (unint64_t **)a1, a2 - 2);
          }
          --a3;
          uint64_t v15 = *(unint64_t **)a1;
          unint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unint64_t **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unint64_t *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v86;
            unint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unint64_t *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          unint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unint64_t **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unint64_t *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unint64_t **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t a1, unint64_t **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      char v8 = (unint64_t **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32));
      char v9 = (unint64_t **)(a1 + 48);
      if ((unint64_t **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (unint64_t **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t **)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(long long *a1, unsigned int **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (unsigned int **)(v10 + 16);
            BOOL v41 = (unsigned int **)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(unsigned int **)(v43 + 16);
                  if (*v45 < **(_DWORD **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(_DWORD **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v79 = v39;
                uint64_t v80 = (unsigned int *)*((void *)a1 + 2);
                if (*v80 < **(_DWORD **)a1)
                {
                  uint64_t v81 = (unsigned int *)*((void *)a1 + 3);
                  uint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)uint64_t v82 = *((_OWORD *)v82 - 1);
                    int v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (*v80 < *v83);
                  *uint64_t v82 = v80;
                  v82[1] = v81;
                }
                uint64_t v39 = v79 + 2;
                a1 = (long long *)v79;
              }
              while (v79 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unsigned int **)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (unsigned int **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  uint64_t v58 = (unsigned int **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (unsigned int **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v65 = **v54;
                        unsigned int v63 = *v54[2];
                        BOOL v64 = v65 >= v63;
                        if (v65 <= v63) {
                          unsigned int v65 = *v54[2];
                        }
                        if (v64) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(_DWORD **)v69 < **(_DWORD **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if ((unsigned int **)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(_DWORD **)v69;
                    if (**(_DWORD **)v74 < **(_DWORD **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(_DWORD **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unsigned int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, (unsigned int **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 2, (unsigned int **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v14 - 1, v14, (unsigned int **)&a1[v13 + 1]);
            long long v84 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(&a1[v12 >> 1], (unsigned int **)a1, a2 - 2);
          }
          --a3;
          unint64_t v15 = *(unsigned int **)a1;
          unsigned int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unsigned int **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unsigned int *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v86;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unsigned int *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          unsigned int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unsigned int **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unsigned int *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unsigned int **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      char v8 = (unsigned int **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32));
      char v9 = (unsigned int **)(a1 + 48);
      if ((unsigned int **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned int **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = (unsigned int **)a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(unsigned __int16 **a1, unsigned __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v88 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v88;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(unsigned __int16 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (unsigned __int16 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v80 = v39;
                uint64_t v81 = a1[2];
                if (*v81 < **a1)
                {
                  uint64_t v82 = a1[3];
                  int v83 = v80;
                  do
                  {
                    *(_OWORD *)int v83 = *((_OWORD *)v83 - 1);
                    long long v84 = *(v83 - 4);
                    v83 -= 2;
                  }
                  while (*v81 < *v84);
                  unsigned int *v83 = v81;
                  v83[1] = v82;
                }
                uint64_t v39 = v80 + 2;
                a1 = v80;
              }
              while (v80 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  uint64_t v58 = &v10[2 * v52];
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v63 = **v54;
                        unsigned int v64 = *v54[2];
                        BOOL v65 = v63 >= v64;
                        unsigned int v66 = v63 <= v64 ? *v54[2] : **v54;
                        if (v65) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v66 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v66 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v67 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v68 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v69[2 * v68 + 2];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v67 && **v70 < *v70[2])
                  {
                    v70 += 2;
                    uint64_t v71 = v72;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 16;
                  if (v73 >= 17)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 4) - 2) >> 1;
                    double v75 = &v10[2 * v74];
                    uint64_t v76 = *v70;
                    if (**v75 < **v70)
                    {
                      uint64_t v77 = v70[1];
                      do
                      {
                        uint64_t v78 = v70;
                        uint64_t v70 = v75;
                        *(_OWORD *)uint64_t v78 = *(_OWORD *)v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        double v75 = &v10[2 * v74];
                      }
                      while (**v75 < *v76);
                      *uint64_t v70 = v76;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v85 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v85;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v87 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v87;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v86;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      char v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int16 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v88 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v88;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(unsigned __int8 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (unsigned __int8 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v80 = v39;
                uint64_t v81 = a1[2];
                if (*v81 < **a1)
                {
                  uint64_t v82 = a1[3];
                  int v83 = v80;
                  do
                  {
                    *(_OWORD *)int v83 = *((_OWORD *)v83 - 1);
                    long long v84 = *(v83 - 4);
                    v83 -= 2;
                  }
                  while (*v81 < *v84);
                  unsigned int *v83 = v81;
                  v83[1] = v82;
                }
                uint64_t v39 = v80 + 2;
                a1 = v80;
              }
              while (v80 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  uint64_t v58 = &v10[2 * v52];
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v63 = **v54;
                        unsigned int v64 = *v54[2];
                        BOOL v65 = v63 >= v64;
                        unsigned int v66 = v63 <= v64 ? *v54[2] : **v54;
                        if (v65) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v66 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v66 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v67 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v68 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v69[2 * v68 + 2];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v67 && **v70 < *v70[2])
                  {
                    v70 += 2;
                    uint64_t v71 = v72;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 16;
                  if (v73 >= 17)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 4) - 2) >> 1;
                    double v75 = &v10[2 * v74];
                    uint64_t v76 = *v70;
                    if (**v75 < **v70)
                    {
                      uint64_t v77 = v70[1];
                      do
                      {
                        uint64_t v78 = v70;
                        uint64_t v70 = v75;
                        *(_OWORD *)uint64_t v78 = *(_OWORD *)v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        double v75 = &v10[2 * v74];
                      }
                      while (**v75 < *v76);
                      *uint64_t v70 = v76;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v85 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v85;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v87 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v87;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v86;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      char v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int8 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int8 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (void *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 < **(void **)v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)&a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (__n128 *)a2[-1].n128_u64);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(void **)(v43 + 16);
                  if (*v45 < **(void **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      uint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = (void *)*((void *)a1 + 2);
                if (*v79 < **(void **)a1)
                {
                  uint64_t v80 = (void *)*((void *)a1 + 3);
                  uint64_t v81 = v78;
                  do
                  {
                    __n128 *v81 = v81[-1];
                    uint64_t v82 = (void *)v81[-2].n128_u64[0];
                    --v81;
                  }
                  while (*v79 < *v82);
                  v81->n128_u64[0] = (unint64_t)v79;
                  v81->n128_u64[1] = (unint64_t)v80;
                }
                uint64_t v39 = v78 + 1;
                a1 = (long long *)v78;
              }
              while (&v78[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (uint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    uint64_t v55 = **v54;
                    uint64_t v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      uint64_t v57 = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v57 = **v54;
                  }
                  uint64_t v58 = (uint64_t **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (uint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        uint64_t v65 = **v54;
                        uint64_t v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          uint64_t v65 = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        uint64_t v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(void **)v69 < **(void **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v87;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 < **(void **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (uint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, (uint64_t **)&a1[v12 >> 1], (uint64_t **)&a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 1, v14 - 2, (uint64_t **)&a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 2, (uint64_t **)&a1[v13 + 1], (uint64_t **)&a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v14 - 1, v14, (uint64_t **)&a1[v13 + 1]);
            long long v83 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(&a1[v12 >> 1], (uint64_t **)a1, (uint64_t **)&a2[-1]);
          }
          --a3;
          unsigned int v15 = *(uint64_t **)a1;
          uint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= *(void *)a2[-1].n128_u64[0])
          {
            __n128 v30 = (void **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (void **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v85;
            uint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          uint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (long long *)v21) {
              break;
            }
            unint64_t v23 = (void *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < (long long *)v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v84;
            uint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (void *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (long long *)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      char v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          uint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (void *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    char v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (_DWORD *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)&a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (__n128 *)a2[-1].n128_u64);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(_DWORD **)(v43 + 16);
                  if (*v45 < **(_DWORD **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      int v48 = **(_DWORD **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = (_DWORD *)*((void *)a1 + 2);
                if (*v79 < **(_DWORD **)a1)
                {
                  uint64_t v80 = (_DWORD *)*((void *)a1 + 3);
                  uint64_t v81 = v78;
                  do
                  {
                    __n128 *v81 = v81[-1];
                    uint64_t v82 = (_DWORD *)v81[-2].n128_u64[0];
                    --v81;
                  }
                  while (*v79 < *v82);
                  v81->n128_u64[0] = (unint64_t)v79;
                  v81->n128_u64[1] = (unint64_t)v80;
                }
                uint64_t v39 = v78 + 1;
                a1 = (long long *)v78;
              }
              while (&v78[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (int **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    int v55 = **v54;
                    int v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      int v57 = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    int v57 = **v54;
                  }
                  uint64_t v58 = (int **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (int **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        int v65 = **v54;
                        int v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          int v65 = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        int v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(_DWORD **)v69 < **(_DWORD **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v87;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(_DWORD **)v69;
                    if (**(_DWORD **)v74 < **(_DWORD **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(_DWORD **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, (int **)&a1[v12 >> 1], (int **)&a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 1, v14 - 2, (int **)&a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 2, (int **)&a1[v13 + 1], (int **)&a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v14 - 1, v14, (int **)&a1[v13 + 1]);
            long long v83 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(&a1[v12 >> 1], (int **)a1, (int **)&a2[-1]);
          }
          --a3;
          uint64_t v15 = *(int **)a1;
          int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            __n128 v30 = (_DWORD **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (_DWORD **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (_DWORD *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v85;
            int v34 = *v15;
            do
            {
              uint64_t v35 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (_DWORD *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (long long *)v21) {
              break;
            }
            unint64_t v23 = (_DWORD *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = (_DWORD *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < (long long *)v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v84;
            int v25 = *v15;
            do
            {
              unint64_t v26 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (_DWORD *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (long long *)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(_DWORD **)(a2 - 16) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      char v8 = (_DWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(_DWORD **)v9;
    if (**(_DWORD **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      int v16 = (void *)a1;
LABEL_12:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    char v8 = (_DWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(__int16 **a1, __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      int v48 = **(__int16 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (__int16 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = a1[2];
                if (*v79 < **a1)
                {
                  uint64_t v80 = a1[3];
                  uint64_t v81 = v78;
                  do
                  {
                    *(_OWORD *)uint64_t v81 = *((_OWORD *)v81 - 1);
                    uint64_t v82 = *(v81 - 4);
                    v81 -= 2;
                  }
                  while (*v79 < *v82);
                  __n128 *v81 = v79;
                  v81[1] = v80;
                }
                uint64_t v39 = v78 + 2;
                a1 = v78;
              }
              while (v78 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    int v55 = **v54;
                    int v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      LOWORD(v57) = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    LOWORD(v57) = **v54;
                  }
                  uint64_t v58 = &v10[2 * v52];
                  uint64_t v59 = *v58;
                  if (**v58 <= (__int16)v57)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        int v65 = **v54;
                        int v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          LOWORD(v65) = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        LOWORD(v65) = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (*v59 <= (__int16)v65);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = v10;
                do
                {
                  uint64_t v69 = &v68[2 * v67 + 2];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **v69 < *v69[2])
                  {
                    v69 += 2;
                    uint64_t v70 = v71;
                  }
                  *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if (v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v87;
                  uint64_t v72 = (char *)v69 - (char *)v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = &v10[2 * v73];
                    double v75 = *v69;
                    if (**v74 < **v69)
                    {
                      uint64_t v76 = v69[1];
                      do
                      {
                        uint64_t v77 = v69;
                        uint64_t v69 = v74;
                        *(_OWORD *)uint64_t v77 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = &v10[2 * v73];
                      }
                      while (**v74 < *v75);
                      *uint64_t v69 = v75;
                      v69[1] = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v83 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          int v15 = *a1;
          int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v85;
            int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v84;
            int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(__int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (__int16 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      int v16 = a1;
LABEL_12:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 2;
    int v95 = a2 - 4;
    long long v96 = a2;
    uint64_t v93 = a2 - 6;
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          int v11 = v96;
          uint64_t v12 = (char *)v96 - (char *)v10;
          uint64_t v13 = ((char *)v96 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v35 = v96 - 2;
                if (re::DynamicString::operator<(*(v96 - 2), *v10))
                {
                  long long v100 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v35;
                  *(_OWORD *)uint64_t v35 = v100;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v9);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v9);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            uint64_t v36 = v10 + 2;
            BOOL v38 = v10 == v96 || v36 == v96;
            if (a4)
            {
              if (!v38)
              {
                uint64_t v39 = 0;
                uint64_t v40 = v10;
                do
                {
                  BOOL v41 = v36;
                  uint64_t v42 = v40[2];
                  if (re::DynamicString::operator<(v42, *v40))
                  {
                    uint64_t v43 = v40[3];
                    uint64_t v44 = v39;
                    while (1)
                    {
                      uint64_t v45 = (char *)v10 + v44;
                      *(_OWORD *)((char *)v10 + v44 + 16) = *(_OWORD *)((char *)v10 + v44);
                      if (!v44) {
                        break;
                      }
                      v44 -= 16;
                      if ((re::DynamicString::operator<(v42, *((void *)v45 - 2)) & 1) == 0)
                      {
                        uint64_t v46 = (uint64_t *)((char *)v10 + v44 + 16);
                        goto LABEL_77;
                      }
                    }
                    uint64_t v46 = v10;
LABEL_77:
                    *uint64_t v46 = v42;
                    v46[1] = v43;
                  }
                  uint64_t v36 = v41 + 2;
                  v39 += 16;
                  uint64_t v40 = v41;
                }
                while (v41 + 2 != v96);
              }
            }
            else if (!v38)
            {
              do
              {
                long long v85 = v36;
                uint64_t v86 = a1[2];
                if (re::DynamicString::operator<(v86, *a1))
                {
                  uint64_t v87 = a1[3];
                  long long v88 = v85;
                  do
                  {
                    long long v89 = v88 - 2;
                    *(_OWORD *)long long v88 = *((_OWORD *)v88 - 1);
                    char v90 = re::DynamicString::operator<(v86, *(v88 - 4));
                    long long v88 = v89;
                  }
                  while ((v90 & 1) != 0);
                  *long long v89 = v86;
                  v89[1] = v87;
                }
                uint64_t v36 = v85 + 2;
                a1 = v85;
              }
              while (v85 + 2 != v96);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != v96)
            {
              unint64_t v91 = (char *)v96 - (char *)v10;
              int64_t v47 = (unint64_t)(v13 - 2) >> 1;
              int64_t v48 = v47;
              do
              {
                int64_t v49 = v48;
                if (v47 >= v48)
                {
                  uint64_t v50 = (2 * v48) | 1;
                  int64_t v51 = &a1[2 * v50];
                  uint64_t v52 = 2 * v48 + 2;
                  if (v52 < v13)
                  {
                    uint64_t v53 = *v51;
                    int64_t v54 = v48;
                    uint64_t v55 = v51[2];
                    int v56 = re::DynamicString::operator<(*v51, v55);
                    BOOL v57 = v56 == 0;
                    if (v56) {
                      uint64_t v58 = v55;
                    }
                    else {
                      uint64_t v58 = v53;
                    }
                    int64_t v49 = v54;
                    int64_t v47 = (unint64_t)(v13 - 2) >> 1;
                    if (!v57)
                    {
                      v51 += 2;
                      uint64_t v50 = v52;
                    }
                  }
                  else
                  {
                    uint64_t v58 = *v51;
                  }
                  uint64_t v59 = &a1[2 * v49];
                  uint64_t v60 = *v59;
                  if ((re::DynamicString::operator<(v58, *v59) & 1) == 0)
                  {
                    uint64_t v92 = v59[1];
                    int64_t v94 = v49;
                    do
                    {
                      uint64_t v61 = v59;
                      uint64_t v59 = v51;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v51;
                      if (v47 < v50) {
                        break;
                      }
                      uint64_t v62 = (2 * v50) | 1;
                      int64_t v51 = &a1[2 * v62];
                      uint64_t v63 = 2 * v50 + 2;
                      if (v63 < v13)
                      {
                        uint64_t v64 = *v51;
                        uint64_t v65 = v51[2];
                        int v66 = re::DynamicString::operator<(*v51, v65);
                        BOOL v67 = v66 == 0;
                        if (v66) {
                          uint64_t v68 = v65;
                        }
                        else {
                          uint64_t v68 = v64;
                        }
                        if (!v67) {
                          v51 += 2;
                        }
                        int64_t v47 = (unint64_t)(v13 - 2) >> 1;
                        uint64_t v50 = v67 ? v62 : v63;
                      }
                      else
                      {
                        uint64_t v68 = *v51;
                        uint64_t v50 = (2 * v50) | 1;
                      }
                    }
                    while (!re::DynamicString::operator<(v68, v60));
                    int64_t v49 = v94;
                    uint64_t *v59 = v60;
                    v59[1] = v92;
                  }
                }
                int64_t v48 = v49 - 1;
              }
              while (v49);
              uint64_t v69 = v91 >> 4;
              uint64_t v70 = v96;
              do
              {
                uint64_t v71 = 0;
                long long v101 = *(_OWORD *)a1;
                uint64_t v72 = v69 - 2;
                if (v69 < 2) {
                  uint64_t v72 = v69 - 1;
                }
                uint64_t v73 = v72 >> 1;
                unint64_t v74 = a1;
                do
                {
                  double v75 = &v74[2 * v71 + 2];
                  uint64_t v76 = (2 * v71) | 1;
                  uint64_t v77 = 2 * v71 + 2;
                  if (v77 < v69 && re::DynamicString::operator<(*v75, v74[2 * v71 + 4]))
                  {
                    v75 += 2;
                    uint64_t v76 = v77;
                  }
                  *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
                  unint64_t v74 = v75;
                  uint64_t v71 = v76;
                }
                while (v76 <= v73);
                v70 -= 2;
                if (v75 == v70)
                {
                  *(_OWORD *)double v75 = v101;
                }
                else
                {
                  *(_OWORD *)double v75 = *(_OWORD *)v70;
                  *(_OWORD *)uint64_t v70 = v101;
                  uint64_t v78 = (char *)v75 - (char *)a1 + 16;
                  if (v78 >= 17)
                  {
                    unint64_t v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                    uint64_t v80 = &a1[2 * v79];
                    uint64_t v81 = *v75;
                    if (re::DynamicString::operator<(*v80, *v75))
                    {
                      uint64_t v82 = v75[1];
                      do
                      {
                        long long v83 = v75;
                        double v75 = v80;
                        *(_OWORD *)long long v83 = *(_OWORD *)v80;
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        uint64_t v80 = &a1[2 * v79];
                      }
                      while ((re::DynamicString::operator<(*v80, v81) & 1) != 0);
                      *double v75 = v81;
                      v75[1] = v82;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          int v15 = &v10[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15, v10, v9);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v15, v9);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 2, v15 - 2, v95);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 4, &v10[2 * v14 + 2], v93);
            int v11 = v96;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15 - 2, v15, &v10[2 * v14 + 2]);
            long long v97 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v15;
            *(_OWORD *)int v15 = v97;
          }
          --a3;
          uint64_t v16 = *v10;
          if (a4 & 1) != 0 || (re::DynamicString::operator<(*(v10 - 2), *v10)) {
            break;
          }
          uint64_t v28 = v10[1];
          if (re::DynamicString::operator<(v16, *v9))
          {
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v16, v29) & 1) == 0);
          }
          else
          {
            __n128 v30 = v10 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= v96) {
                break;
              }
              v30 += 2;
            }
            while (!re::DynamicString::operator<(v16, *v10));
          }
          unint64_t v31 = v96;
          if (v10 < v96)
          {
            unint64_t v31 = v96;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            long long v99 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v99;
            do
            {
              uint64_t v33 = v10[2];
              v10 += 2;
            }
            while (!re::DynamicString::operator<(v16, v33));
            do
            {
              uint64_t v34 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v34) & 1) != 0);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v16;
          *(v10 - 1) = v28;
        }
        uint64_t v17 = 0;
        uint64_t v18 = a1[1];
        do
        {
          char v19 = re::DynamicString::operator<(a1[v17 + 2], v16);
          v17 += 2;
        }
        while ((v19 & 1) != 0);
        BOOL v20 = &a1[v17];
        uint64_t v21 = v11;
        if (v17 == 2)
        {
          uint64_t v21 = v11;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while ((re::DynamicString::operator<(v23, v16) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (!re::DynamicString::operator<(v22, v16));
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v98 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v98;
            do
            {
              uint64_t v25 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v25, v16) & 1) != 0);
            do
            {
              uint64_t v26 = *(v24 - 2);
              v24 -= 2;
            }
            while (!re::DynamicString::operator<(v26, v16));
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v96))
      {
        break;
      }
      if (!v27) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v27) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (re::DynamicString::operator<(*(a2 - 2), *a1))
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      char v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (re::DynamicString::operator<(*v9, *v8))
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        int v15 = (char *)a1 + v14;
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if ((re::DynamicString::operator<(v12, *((void *)v15 + 2)) & 1) == 0)
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    char v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                BOOL v38 = (void *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 >> 1 < **(void **)v10 >> 1)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (void **)(v10 + 16), &a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(void **)(v43 + 16);
                  if (*v45 >> 1 < **(void **)v43 >> 1)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >> 1 >= v48 >> 1)
                      {
                        int64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                unint64_t v79 = (unint64_t)v39;
                uint64_t v80 = *(void **)(a1 + 16);
                if (*v80 >> 1 < **(void **)a1 >> 1)
                {
                  uint64_t v81 = *(void *)(a1 + 24);
                  unint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)unint64_t v82 = *(_OWORD *)(v82 - 16);
                    long long v83 = *(void **)(v82 - 32);
                    v82 -= 16;
                  }
                  while (*v80 >> 1 < *v83 >> 1);
                  *(void *)unint64_t v82 = v80;
                  *(void *)(v82 + 8) = v81;
                }
                uint64_t v39 = (__n128 *)(v79 + 16);
                a1 = v79;
              }
              while ((__n128 *)(v79 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  int64_t v54 = (unint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v55 = **v54 >> 1;
                    unint64_t v57 = *v54[2];
                    BOOL v56 = v55 >= v57 >> 1;
                    if (v55 < v57 >> 1) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v57 = **v54;
                    }
                    if (!v56) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = **v54;
                  }
                  uint64_t v58 = (unint64_t **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >> 1 >= **v58 >> 1)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      int64_t v54 = (unint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v63 = **v54;
                        if (v63 >> 1 >= *v54[2] >> 1)
                        {
                          uint64_t v53 = v62;
                        }
                        else
                        {
                          unint64_t v63 = *v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v63 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v63 >> 1 >= *v59 >> 1);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v64 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v65 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v66 = v64 - 2;
                if (v64 < 2) {
                  uint64_t v66 = v64 - 1;
                }
                uint64_t v67 = v66 >> 1;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v65 + 1];
                  uint64_t v70 = (2 * v65) | 1;
                  uint64_t v71 = 2 * v65 + 2;
                  if (v71 < v64 && **(void **)v69 >> 1 < **(void **)(v69 + 16) >> 1)
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v65 = v70;
                }
                while (v70 <= v67);
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 >> 1 < **(void **)v69 >> 1)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 >> 1 < *v75 >> 1);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16 * (v12 >> 1)), &a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 16), (void **)v14 - 2, &a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 32), (void **)(a1 + 16 + 16 * v13), &a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v14 - 1, (void **)v14, (void **)(a1 + 16 + 16 * v13));
            long long v84 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v14;
            long long *v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 16 * (v12 >> 1)), (void **)a1, &a2[-1]);
          }
          --a3;
          int v15 = *(void **)a1;
          unint64_t v16 = **(void **)a1 >> 1;
          if ((a4 & 1) != 0 || v16 > **(void **)(a1 - 16) >> 1) {
            break;
          }
          if (v16 >= *(void *)a2[-1].n128_u64[0] >> 1)
          {
            unint64_t v30 = a1 + 16;
            do
            {
              unint64_t v10 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 16;
            }
            while (v16 >= **(void **)v10 >> 1);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29 >> 1);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32 >> 1);
          }
          uint64_t v33 = *(void *)(a1 + 8);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v86;
            unint64_t v34 = *v15 >> 1;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35 >> 1);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36 >> 1);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 8);
        do
        {
          unint64_t v19 = **(void **)(a1 + v17 + 16);
          v17 += 16;
        }
        while (v16 > v19 >> 1);
        unint64_t v20 = a1 + v17;
        uint64_t v21 = (long long *)a2;
        if (v17 == 16)
        {
          uint64_t v21 = (long long *)a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            uint64_t v23 = (void *)*((void *)v21-- - 2);
          }
          while (v16 <= *v23 >> 1);
        }
        else
        {
          do
            uint64_t v22 = (void *)*((void *)v21-- - 2);
          while (v16 <= *v22 >> 1);
        }
        unint64_t v10 = a1 + v17;
        if (v20 < (unint64_t)v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unint64_t v25 = *v15 >> 1;
            do
            {
              uint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v25 > *v26 >> 1);
            do
              BOOL v27 = (void *)*((void *)v24-- - 2);
            while (v25 <= *v27 >> 1);
          }
          while (v10 < (unint64_t)v24);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) >> 1 < **(void **)a1 >> 1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      char v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 >> 1 < **v8 >> 1)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >> 1 >= v15 >> 1)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    char v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  while (2)
  {
    long long v86 = a2 - 32;
    long long v88 = a2 - 16;
    long long v84 = a2 - 48;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = (a2 - v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v38 = *((void *)a2 - 2);
                uint64_t v37 = a2 - 16;
                if ((*a3)(v38, *(void *)a1))
                {
                  long long v99 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v99;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, v88, a3);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, v88, a3);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, v88, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 383)
          {
            uint64_t v39 = a1 + 16;
            BOOL v41 = a1 == a2 || v39 == a2;
            if (a5)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = a1;
                do
                {
                  uint64_t v44 = *((void *)v43 + 2);
                  uint64_t v45 = *(void *)v43;
                  unint64_t v43 = v39;
                  if ((*a3)(v44, v45))
                  {
                    long long v93 = *(_OWORD *)v43;
                    uint64_t v46 = *(void *)v43;
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)&a1[v47 + 16] = *(_OWORD *)&a1[v47];
                      if (!v47) {
                        break;
                      }
                      char v48 = (*a3)(v46, *(void *)&a1[v47 - 16]);
                      v47 -= 16;
                      if ((v48 & 1) == 0)
                      {
                        int64_t v49 = &a1[v47 + 16];
                        goto LABEL_78;
                      }
                    }
                    int64_t v49 = a1;
LABEL_78:
                    *(_OWORD *)int64_t v49 = v93;
                  }
                  uint64_t v39 = v43 + 16;
                  v42 += 16;
                }
                while (v43 + 16 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = *((void *)a1 + 2);
                uint64_t v79 = *(void *)a1;
                a1 = v39;
                if ((*a3)(v78, v79))
                {
                  long long v95 = *(_OWORD *)a1;
                  uint64_t v80 = *(void *)a1;
                  uint64_t v81 = a1;
                  do
                  {
                    unint64_t v82 = v81 - 16;
                    *(_OWORD *)uint64_t v81 = *((_OWORD *)v81 - 1);
                    char v83 = (*a3)(v80, *((void *)v81 - 4));
                    uint64_t v81 = v82;
                  }
                  while ((v83 & 1) != 0);
                  *(_OWORD *)unint64_t v82 = v95;
                }
                uint64_t v39 = a1 + 16;
              }
              while (a1 + 16 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              unint64_t v85 = v13;
              long long v87 = a2;
              int64_t v50 = (unint64_t)(v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  int64_t v54 = &a1[16 * v53];
                  if (2 * v51 + 2 < v14 && (*a3)(*(void *)v54, *((void *)v54 + 2)))
                  {
                    v54 += 16;
                    uint64_t v53 = 2 * v52 + 2;
                  }
                  unint64_t v55 = &a1[16 * v52];
                  if (((*a3)(*(void *)v54, *(void *)v55) & 1) == 0)
                  {
                    int64_t v94 = v52;
                    long long v89 = *(_OWORD *)v55;
                    uint64_t v56 = *(void *)v55;
                    do
                    {
                      unint64_t v57 = v55;
                      unint64_t v55 = v54;
                      *(_OWORD *)unint64_t v57 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v58 = (2 * v53) | 1;
                      int64_t v54 = &a1[16 * v58];
                      uint64_t v59 = 2 * v53 + 2;
                      if (v59 < v14 && (*a3)(*(void *)v54, *((void *)v54 + 2)))
                      {
                        v54 += 16;
                        uint64_t v58 = v59;
                      }
                      uint64_t v53 = v58;
                    }
                    while (!(*a3)(*(void *)v54, v56));
                    *(_OWORD *)unint64_t v55 = v89;
                    int64_t v52 = v94;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v60 = v87;
              uint64_t v61 = v85 >> 4;
              do
              {
                uint64_t v62 = 0;
                long long v100 = *(_OWORD *)a1;
                uint64_t v63 = v61 - 2;
                if (v61 < 2) {
                  uint64_t v63 = v61 - 1;
                }
                uint64_t v64 = v63 >> 1;
                uint64_t v65 = a1;
                do
                {
                  uint64_t v66 = (uint64_t *)&v65[16 * v62 + 16];
                  uint64_t v67 = (2 * v62) | 1;
                  uint64_t v68 = 2 * v62 + 2;
                  if (v68 < v61 && (*a3)(*v66, *(void *)&v65[16 * v62 + 32]))
                  {
                    v66 += 2;
                    uint64_t v67 = v68;
                  }
                  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
                  uint64_t v65 = (char *)v66;
                  uint64_t v62 = v67;
                }
                while (v67 <= v64);
                uint64_t v69 = (uint64_t *)(v60 - 16);
                if (v66 == v69)
                {
                  uint64_t v70 = v69;
                  *(_OWORD *)uint64_t v66 = v100;
                  uint64_t v72 = v61 - 1;
                }
                else
                {
                  *(_OWORD *)uint64_t v66 = *(_OWORD *)v69;
                  uint64_t v70 = v69;
                  *(_OWORD *)uint64_t v69 = v100;
                  uint64_t v71 = (char *)v66 - a1 + 16;
                  uint64_t v72 = v61 - 1;
                  if (v71 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v71 >> 4) - 2) >> 1;
                    unint64_t v74 = &a1[16 * v73];
                    if ((*a3)(*(void *)v74, *v66))
                    {
                      long long v90 = *(_OWORD *)v66;
                      uint64_t v75 = *v66;
                      do
                      {
                        uint64_t v76 = v66;
                        uint64_t v66 = (uint64_t *)v74;
                        *(_OWORD *)uint64_t v76 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = &a1[16 * v73];
                      }
                      while (((*a3)(*(void *)v74, v75) & 1) != 0);
                      *(_OWORD *)uint64_t v66 = v90;
                    }
                  }
                }
                BOOL v77 = v61 <= 2;
                uint64_t v61 = v72;
                uint64_t v60 = (char *)v70;
              }
              while (!v77);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unint64_t v16 = &a1[16 * ((unint64_t)v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v16, a1, v88, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v16, v88, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)a1 + 2, (void *)v16 - 2, v86, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)a1 + 4, &a1[16 * v15 + 16], v84, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)v16 - 2, v16, &a1[16 * v15 + 16], a3);
            long long v96 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)unint64_t v16 = v96;
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)(*((void *)a1 - 2), *(void *)a1)) {
            break;
          }
          long long v92 = *(_OWORD *)a1;
          uint64_t v29 = *(void *)a1;
          if ((*a3)(*(void *)a1, *(void *)v88))
          {
            unint64_t v12 = a1;
            do
            {
              uint64_t v30 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (((*a3)(v29, v30) & 1) == 0);
          }
          else
          {
            unint64_t v31 = a1 + 16;
            do
            {
              unint64_t v12 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 16;
            }
            while (!(*a3)(v29, *(void *)v12));
          }
          uint64_t v32 = a2;
          if (v12 < a2)
          {
            uint64_t v32 = a2;
            do
            {
              uint64_t v33 = *((void *)v32 - 2);
              v32 -= 16;
            }
            while (((*a3)(v29, v33) & 1) != 0);
          }
          while (v12 < v32)
          {
            long long v98 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v32;
            *(_OWORD *)uint64_t v32 = v98;
            do
            {
              uint64_t v34 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (!(*a3)(v29, v34));
            do
            {
              uint64_t v35 = *((void *)v32 - 2);
              v32 -= 16;
            }
            while (((*a3)(v29, v35) & 1) != 0);
          }
          uint64_t v36 = v12 - 16;
          BOOL v5 = v12 - 16 >= a1;
          BOOL v6 = v12 - 16 == a1;
          if (v12 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)v36;
          }
          a5 = 0;
          *(_OWORD *)uint64_t v36 = v92;
        }
        uint64_t v17 = 0;
        long long v91 = *(_OWORD *)a1;
        uint64_t v18 = *(void *)a1;
        do
        {
          char v19 = (*a3)(*(void *)&a1[v17 + 16], v18);
          v17 += 16;
        }
        while ((v19 & 1) != 0);
        unint64_t v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 16)
        {
          do
          {
            if (v20 >= a2) {
              break;
            }
            uint64_t v23 = *((void *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *((void *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v22, v18));
        }
        unint64_t v12 = &a1[v17];
        if (v20 < a2)
        {
          BOOL v24 = a2;
          do
          {
            long long v97 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v97;
            do
            {
              uint64_t v25 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (((*a3)(v25, v18) & 1) != 0);
            do
            {
              uint64_t v26 = *((void *)v24 - 2);
              v24 -= 16;
            }
            while (!(*a3)(v26, v18));
          }
          while (v12 < v24);
        }
        BOOL v27 = v12 - 16;
        if (v12 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)v27;
        }
        *(_OWORD *)BOOL v27 = v91;
        BOOL v5 = v20 >= a2;
        a2 = v21;
        if (v5) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v12 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v12 - 16, a3);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v12, v21, a3))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v12 - 16;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *(void *)a1))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)char v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      int v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *(void *)v10))
    {
      long long v18 = *(_OWORD *)v11;
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = v12;
      while (1)
      {
        *(_OWORD *)&a1[v15 + 48] = *(_OWORD *)&a1[v15 + 32];
        if (v15 == -32) {
          break;
        }
        char v16 = (*a3)(v14, *(void *)&a1[v15 + 16]);
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          uint64_t v17 = &a1[v15 + 48];
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v17 = v18;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

BOOL re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (long long v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    uint64_t v24 = 0;
    BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, &v24);
    if (!result) {
      return result;
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(a4 + 8);
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  uint64_t v24 = v22;
  BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, &v24);
  if (result)
  {
    if (v22)
    {
      if (*(unsigned char *)(a4 + 8)) {
        uint64_t v23 = *(void *)(a4 + 16);
      }
      else {
        uint64_t v23 = a4 + 9;
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, v23);
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_27:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v19);
  if (v19[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v20);
    if (*(_DWORD *)(v17 + 88) || (re::TypeRegistry::typeInfo(v16[0], *(void *)(v17 + 72), v21), v21[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, v16, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v16, *a3, a3[2]);
  if (v18)
  {
    for (unint64_t i = 0; i < v18; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v16, i, (uint64_t)&v14);
      if (*(unsigned char *)(v15 + 28))
      {
        uint64_t v10 = *(void *)(v15 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v15 + 32);
        uint64_t v12 = *(unsigned int *)(v15 + 24);
        re::TypeRegistry::typeInfo(v14, *(void *)v15, v21);
        uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v22);
        if (!a1[64]) {
          uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, a2 + v12, v13, v13, a4);
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v49);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v45);
  if (v45[0])
  {
    if (!v49[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v46)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
    }
    if (v50 == v46)
    {
      uint64_t v18 = *v52;
      uint64_t v19 = *v48;
      if ((unsigned __int16)*v52 == (unsigned __int16)*v48)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v50, (const re::TypeInfo *)&v46, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, &v50, a5);
      goto LABEL_15;
    }
    if (v51 == v47)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, &v50, &v46, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v50)[1];
      re::TypeInfo::name((re::TypeInfo *)&v46);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v42, *a4, a4[2]);
  if (v43)
  {
    for (unint64_t i = 0; i < v43; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v42, i, (uint64_t)v40);
      if (*(unsigned char *)(v41 + 28))
      {
        uint64_t v29 = *(void *)(v41 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v41 + 32);
        unint64_t v31 = *(re **)(*a4 + 856);
        if (!v31
          || (unint64_t v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v40),
              v31 == -1))
        {
          uint64_t v33 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v54 = v34;
            __int16 v55 = 2080;
            uint64_t v56 = v29;
            _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          uint64_t v35 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v54 + 4);
          uint64_t result = re::internal::translateType(v35, (const re::TypeRegistry *)v38, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v44, (int)v31, (uint64_t)v38);
          uint64_t v32 = *(unsigned int *)(v39 + 24);
          re::TypeRegistry::typeInfo(v38[0], *(void *)v39, buf);
          re::TypeInfo::TypeInfo((uint64_t)v37, (uint64_t)&v54 + 4);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v36, (uint64_t)&v54 + 4);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, a2 + v32, v37, v36, a5);
          }
        }
      }
    }
  }
  return result;
}

BOOL re::serializeBool<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, a2, v13);
}

BOOL re::serializeChar<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(a1 + 24, a2, (uint64_t)v13);
}

BOOL re::serializeI8<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(a1 + 24, a2, v13);
}

BOOL re::serializeI16<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(a1 + 24, a2, v13);
}

BOOL re::serializeI32<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, v13);
}

BOOL re::serializeI64<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unint64_t *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(a1 + 24, a2, v13);
}

BOOL re::serializeU8<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(a1 + 24, a2, v13);
}

BOOL re::serializeU16<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int16 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(a1 + 24, a2, v13);
}

BOOL re::serializeU32<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, a2, v13);
}

BOOL re::serializeU64<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, rapidjson::internal **a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (rapidjson::internal **)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, a2, v13);
}

BOOL re::serializeFloat<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (float *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, v13);
}

BOOL re::serializeDouble<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (double *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, v13);
}

uint64_t re::serializeCString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_18:
      return 0;
    }
    uint64_t v18 = **((void **)this + 2);
    uint64_t v19 = **((void **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19) {
      goto LABEL_18;
    }
    BOOL v21 = WORD1(v18) == WORD1(v19);
    uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    BOOL v21 = v21 && v20 == 0;
    if (!v21) {
      goto LABEL_18;
    }
  }
LABEL_4:
  if (a7)
  {
    LODWORD(v22) = 0;
    int v13 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (int *)&v22);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_22;
  }
  uint64_t v16 = *a4;
  int v23 = 2 * (*a4 != 0);
  uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v23);
  if (!result) {
    return result;
  }
  if (v16)
  {
    if (*a4)
    {
      size_t v17 = strlen(*a4);
      size_t v22 = v17;
      if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22))
      {
        if (v17) {
          re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, (uint64_t)*a4);
        }
        goto LABEL_20;
      }
    }
    else
    {
      size_t v22 = 0;
      if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22))
      {
LABEL_20:
      }
    }
  }
  uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_22:
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  size_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (uint64_t v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    size_t v22 = 0;
    BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22);
    if (!result) {
      return result;
    }
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    size_t v21 = strlen(*(const char **)(a4 + 8));
    size_t v22 = v21;
    BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22);
    if (!result) {
      return result;
    }
    if (v21) {
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, *(void *)(a4 + 8));
    }
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
  }
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, unint64_t **this, unint64_t **a6, int a7)
{
  if (this != a6)
  {
    if (*this != *a6)
    {
      if (re::areSameTranslatedVersion((re *)this, (const re::TypeInfo *)a6, a3)) {
        goto LABEL_4;
      }
LABEL_26:
      return 0;
    }
    uint64_t v21 = *this[2];
    uint64_t v22 = *a6[2];
    if ((unsigned __int16)v21 != (unsigned __int16)v22) {
      goto LABEL_26;
    }
    BOOL v24 = WORD1(v21) == WORD1(v22);
    uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
    BOOL v24 = v24 && v23 == 0;
    if (!v24) {
      goto LABEL_26;
    }
  }
LABEL_4:
  if (!a7)
  {
    unint64_t v14 = *this[2];
    uint64_t v30 = (uint64_t)*this;
    unint64_t v31 = v14;
    LODWORD(v32) = -1;
    v34[0] = 0x258C98EAAF29A10ALL;
    v34[1] = (uint64_t)"CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[](&v30, v34);
    re::StringID::destroyString((re::StringID *)v34);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = v18;
    unint64_t v31 = 0;
    re::DynamicString::setCapacity(&v30, 0);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v16 + 72))(v17, v16, a4, &v30))
    {
      if (v31) {
        uint64_t v19 = v31 >> 1;
      }
      else {
        uint64_t v19 = v31 >> 1;
      }
      v34[0] = v19;
      if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, v34))
      {
        if (v19)
        {
          if (v31) {
            uint64_t v20 = v32;
          }
          else {
            uint64_t v20 = (char *)&v31 + 1;
          }
          re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, (uint64_t)v20);
        }
        if (v30)
        {
          if (v31) {
            (*(void (**)(void))(*(void *)v30 + 40))();
          }
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name((re::TypeInfo *)this);
    }
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    return 0;
  }
  uint64_t v30 = 0;
  BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, &v30);
  if (result)
  {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, const char *a2, int *a3)
{
  unint64_t v14 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40)) {
    return v3 == 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
  }
  int v6 = *a3;
  if ((*a3 - 1) < 2)
  {
LABEL_7:
    LOBYTE(v9) = 9;
    DWORD1(v9) = 0;
    *((void *)&v9 + 1) = v14;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    BOOL v11 = v6 != 0;
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::pushState(a1, &v9);
    return v3 == 0;
  }
  if (!v6)
  {
    long long v7 = *(char **)(a1 + 168);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v7);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v7);
    int v6 = *a3;
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected PointerEncoding.", "!\"Unreachable code\"", "beginPointer", 1054);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(unsigned char *a1, const char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_14:
      return 0;
    }
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 != (unsigned __int16)v16) {
      goto LABEL_14;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_14;
    }
  }
LABEL_4:
  if (!*a4)
  {
    LODWORD(v25) = 0;
    uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
    int v22 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (int *)&v25);
    uint64_t result = 0;
    if (!v22) {
      return result;
    }
    goto LABEL_22;
  }
  if (!a1[336]
    || (uint64_t v25 = *a4,
        (BOOL v11 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a1 + 344), (uint64_t *)&v25)) == 0))
  {
    int v24 = 2;
    if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, &v24))
    {
      uint64_t v19 = (const char *)strlen(*a4);
      uint64_t v25 = v19;
      uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 24), a2, (uint64_t *)&v25);
      if (!result) {
        return result;
      }
      if (v19) {
        re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString((uint64_t)(a1 + 24), (uint64_t)*a4);
      }
      uint64_t v20 = *a4;
      uint64_t v21 = **((void **)this + 2);
      *(void *)&long long v23 = *(void *)this;
      *((void *)&v23 + 1) = v21;
      re::internal::SharedObjectGraph::addObject((uint64_t)(a1 + 336), (uint64_t)v20, &v23);
      return a1[64] == 0;
    }
    return 0;
  }
  int v12 = *v11;
  int v24 = 1;
  LODWORD(v25) = v12;
  uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, &v24);
  if (!result) {
    return result;
  }
  re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((uint64_t)(a1 + 24), (unsigned int *)&v25);
LABEL_22:
  return a1[64] == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, const char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v28 = **((void **)this + 2);
    uint64_t v29 = **((void **)a6 + 2);
    if ((unsigned __int16)v28 == (unsigned __int16)v29)
    {
      BOOL v31 = WORD1(v28) == WORD1(v29);
      uint64_t v30 = (v29 ^ v28) & 0xFFFFFF00000000;
      BOOL v31 = v31 && v30 == 0;
      if (v31) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    int v15 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v32 = re::TypeInfo::name(this), v33 = re::TypeInfo::name(a6), !re::StringID::operator==(v32, v33))))
  {
    return 0;
  }
  int v15 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    uint64_t v20 = *(void *)v49[2];
    *(void *)&long long v47 = v49[0];
    *((void *)&v47 + 1) = v20;
    if (v49[0]) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  re::internal::actualType(a4, (void **)this, &v47);
  if (!(void)v47)
  {
LABEL_15:
    uint64_t v21 = re::TypeInfo::name(this);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, (re **)&v47, &v50);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v51);
  if ((a7 & 1) != 0 || (uint64_t v16 = *a4) == 0)
  {
    LODWORD(v50) = 0;
    BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
    int v27 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (int *)&v50);
    uint64_t result = 0;
    if (v27) {
      goto LABEL_17;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 336))
  {
LABEL_33:
    long long v45 = v47;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v16, &v45);
    int v44 = 2;
    uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v44);
    if (!result) {
      return result;
    }
    if (!isPointerToPolymorphicType)
    {
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, char *, void *, void *, void))(*(void *)a1 + 72))(a1, a2, 0, *a4, v49, v48, 0);
      }
      goto LABEL_45;
    }
    uint64_t v34 = *a4;
    re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v46);
    if (v15)
    {
      uint64_t v35 = (re::TypeRegistry *)v48[0];
      uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)v46);
      re::TypeRegistry::typeInfo(v35, (const re::StringID *)v36, &v50);
      if (!(_BYTE)v50)
      {
        uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v46);
LABEL_45:
        if (*(unsigned char *)(a1 + 336))
        {
          --*(void *)(a1 + 488);
          ++*(_DWORD *)(a1 + 496);
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
      re::TypeInfo::operator=((uint64_t)v52, (uint64_t)v51);
    }
    if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0))
    {
      uint64_t v37 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v52);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, uint64_t, void, char *, unsigned char *, int *, void))(*(void *)a1 + 72))(a1, v37[1], 0, v34, v46, v52, 0);
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    goto LABEL_45;
  }
  uint64_t v50 = *a4;
  uint64_t v17 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 344, (uint64_t *)&v50);
  if (!v17)
  {
    uint64_t v16 = *a4;
    goto LABEL_33;
  }
  LODWORD(v50) = *v17;
  v52[0] = 1;
  BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, v52);
  if (result)
  {
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(a1 + 24, (unsigned int *)&v50);
LABEL_17:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(uint64_t result, unsigned int *a2)
{
  if (!*(unsigned char *)(result + 40))
  {
    int v3 = (_anonymous_namespace_ *)result;
    uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(result, 0, 0);
    if (result)
    {
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)v3, "@ref", a2);
      return (uint64_t)re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v3);
    }
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(void *a1, uint64_t a2)
{
  a1[34] = a2;
  uint64_t v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(void *))(*a1 + 64))(a1);
  uint64_t v4 = a1[34];
  BOOL v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v9 = 48 * v16;
      uint64_t v10 = (uint64_t *)(v17 + 40);
      do
      {
        long long v13 = *(_OWORD *)(v10 - 3);
        uint64_t v11 = *v10;
        v10 += 6;
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc((uint64_t)a1, (uint64_t)&v13, v11);
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720F48;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  return re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E720F48;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  int v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  int v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  int v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  int v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  int v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  int v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  int v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  int v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  int v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  int v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  int v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  int v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  int v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  int v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  int v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  int v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  int v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  int v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        uint64_t v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  BOOL v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (*(void *)this == *(void *)(a1 + 272))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **((void **)this + 2) | 0xFFFFFFFF00000000);
        uint64_t v7 = re::serializeType<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(re::internal **a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  if (*(void *)a2 == *(void *)(a1 + 272))
  {
    uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **(void **)(a2 + 16) | 0xFFFFFFFF00000000);
    uint64_t v2 = re::serializeType<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    if (v3) {
      return *(uint64_t (**)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))v3;
    }
  }
  return v2;
}

uint64_t re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E720FB0;
  re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  re::DynamicArray<unsigned long>::deinit(a1 + 216);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

uint64_t re::serializeType<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::internal **a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
      goto LABEL_295;
    }
    uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 16);
    }
    else {
      int v20 = -1;
    }
    uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 16);
    }
    else {
      int v22 = -1;
    }
    if (v20 != v22)
    {
      uint64_t v26 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      LOBYTE(v195) = v26;
      long long v47 = "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.";
LABEL_76:
      return 0;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_10;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (!re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_295;
        }
LABEL_22:
        uint64_t v23 = re::TypeInfo::name(this);
        unint64_t v24 = (unint64_t)*v23 >> 1;
        if (v24 <= 0xCA3DEFB5)
        {
          if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
          {
            if ((unint64_t)*v23 >> 1 <= 0x2E9355)
            {
              if (v24 != 104431)
              {
                if (v24 == 3029738)
                {
                  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool((uint64_t)(a1 + 3), a2, a4);
                }
                goto LABEL_355;
              }
LABEL_288:
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>((uint64_t)(a1 + 3), a2, (unsigned int *)a4);
            }
            if (v24 == 3052374)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar((uint64_t)(a1 + 3), a2, (uint64_t)a4);
            }
            uint64_t v165 = 3327612;
            goto LABEL_274;
          }
          if ((unint64_t)*v23 >> 1 <= 0xB0F77BD0)
          {
            if (v24 == 97526364)
            {
              return re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)(a1 + 3), a2, (float *)a4);
            }
            uint64_t v51 = 109413500;
            goto LABEL_178;
          }
          if (v24 == 2969009105)
          {
            return re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>((uint64_t)(a1 + 3), a2, (double *)a4);
          }
          if (v24 == 3111160798)
          {
            return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>((uint64_t)(a1 + 3), a2, (char *)a4);
          }
          goto LABEL_355;
        }
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>((uint64_t)(a1 + 3), a2, a4);
            }
            if (v24 == 0x303EE86A734)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>((uint64_t)(a1 + 3), a2, (unsigned __int16 *)a4);
            }
            goto LABEL_355;
          }
          if (v24 == 0x303EE8780EELL)
          {
            return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)(a1 + 3), a2, (unsigned int *)a4);
          }
          if (v24 != 0x303EE88E58DLL)
          {
LABEL_355:
            uint64_t v195 = re::TypeInfo::name(this)[1];
            long long v47 = "Unsupported basic type \"%s\".";
            goto LABEL_76;
          }
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03) {
              goto LABEL_288;
            }
            uint64_t v165 = 0x16749F63A2;
LABEL_274:
            if (v24 == v165)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>((uint64_t)(a1 + 3), a2, (unint64_t *)a4);
            }
            goto LABEL_355;
          }
          if (v24 != 3393056694)
          {
            uint64_t v51 = 0x16749D2549;
LABEL_178:
            if (v24 == v51)
            {
              return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>((uint64_t)(a1 + 3), a2, (__int16 *)a4);
            }
            goto LABEL_355;
          }
        }
        return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 3), a2, (rapidjson::internal **)a4);
      }
      uint64_t v62 = **((void **)this + 2);
      uint64_t v63 = **((void **)a6 + 2);
      if ((unsigned __int16)v62 == (unsigned __int16)v63)
      {
        BOOL v18 = WORD1(v62) == WORD1(v63);
        uint64_t v64 = (v63 ^ v62) & 0xFFFFFF00000000;
        if (v18 && v64 == 0) {
          goto LABEL_22;
        }
      }
      goto LABEL_295;
    case 2:
      if (this == a6) {
        goto LABEL_233;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v66 = **((void **)this + 2);
        uint64_t v67 = **((void **)a6 + 2);
        if ((unsigned __int16)v66 == (unsigned __int16)v67
          && WORD1(v66) == WORD1(v67)
          && ((v67 ^ v66) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_111;
        }
        int v27 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_111:
          if (*(void *)this == *(void *)a6)
          {
            uint64_t v148 = **((void **)this + 2);
            uint64_t v149 = **((void **)a6 + 2);
            if ((unsigned __int16)v148 == (unsigned __int16)v149
              && ((BOOL v18 = WORD1(v148) == WORD1(v149), v150 = (v149 ^ v148) & 0xFFFFFF00000000, v18)
                ? (BOOL v151 = v150 == 0)
                : (BOOL v151 = 0),
                  v151))
            {
LABEL_233:
              BOOL v70 = 0;
            }
            else
            {
              BOOL v70 = 1;
            }
          }
          else
          {
            BOOL v70 = !re::areSameTranslatedVersion(this, a6, a3);
          }
          if (a7)
          {
            __dst.n128_u64[0] = 0;
            uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst);
            if (!result) {
              return result;
            }
            uint64_t v152 = (_anonymous_namespace_ *)(a1 + 3);
LABEL_237:
            return *((unsigned char *)a1 + 64) == 0;
          }
          if (*(_DWORD *)(*((void *)this + 2) + 8) >= 9u)
          {
            uint64_t v195 = re::TypeInfo::name(this)[1];
            long long v47 = "Enum type \"%s\" has invalid size: %zu bytes";
            goto LABEL_76;
          }
          unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(this, (const re::TypeInfo *)a4, a3);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            __dst.n128_u64[0] = 0;
            memcpy(&__dst, a4, *(unsigned int *)(*((void *)this + 2) + 8));
            LOBYTE(v195) = __dst.n128_u8[0];
            re::TypeInfo::name(this);
            long long v47 = "Value %zu is not a valid enum constant of \"%s\".";
            goto LABEL_76;
          }
          unsigned int v154 = EnumConstantIndex;
          if (v70)
          {
            uint64_t v155 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
            if (!v155 || (uint64_t v156 = re::internal::TypeTranslationTable::translateRuntimeEnum(v155, this, v154, a6)) == 0)
            {
              uint64_t v157 = re::TypeInfo::enumConstants(this);
              uint64_t v159 = v154;
              if (v158 > v154)
              {
                uint64_t v195 = *(void *)(v157 + 24 * v154 + 16);
                re::TypeInfo::name(a6);
                long long v47 = "Runtime enum constant \"%s\" does not exist in serialized type \"%s\".";
                goto LABEL_76;
              }
LABEL_372:
              re::internal::assertLog((re::internal *)6, v158, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v159, v158);
              _os_crash();
              __break(1u);
            }
LABEL_304:
            uint64_t v168 = *(const char **)(v156 + 16);
            __dst.n128_u64[0] = strlen(v168);
            if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst))
            {
              re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString((uint64_t)(a1 + 3), (uint64_t)v168);
              uint64_t v152 = (_anonymous_namespace_ *)(a1 + 3);
              goto LABEL_237;
            }
            return 0;
          }
          uint64_t result = re::TypeInfo::enumConstants(this);
          uint64_t v167 = v154;
          if (v166 > v154)
          {
            if (!result) {
              return result;
            }
            uint64_t v156 = result + 24 * v154;
            goto LABEL_304;
          }
LABEL_371:
          re::internal::assertLog((re::internal *)6, v166, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v167, v166);
          _os_crash();
          __break(1u);
          goto LABEL_372;
        }
        int v27 = *((unsigned __int8 *)this + 12);
      }
      if (v27 == *((unsigned __int8 *)a6 + 12))
      {
        uint64_t v68 = re::TypeInfo::name(this);
        uint64_t v69 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v68, v69)) {
          goto LABEL_111;
        }
      }
      goto LABEL_295;
    case 3:
      if (this == a6) {
        goto LABEL_118;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v71 = **((void **)this + 2);
        uint64_t v72 = **((void **)a6 + 2);
        if ((unsigned __int16)v71 == (unsigned __int16)v72
          && WORD1(v71) == WORD1(v72)
          && ((v72 ^ v71) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_118;
        }
        int v28 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_118;
        }
        int v28 = *((unsigned __int8 *)this + 12);
      }
      if (v28 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_295;
      }
LABEL_118:
      if (a7)
      {
        __dst.n128_u8[0] = 0;
        re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional((uint64_t)(a1 + 3), a2, &__dst);
        unint64_t v73 = (_anonymous_namespace_ *)(a1 + 3);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        uint64_t v74 = (*(uint64_t (**)(unsigned __int8 *))(v214 + 80))(a4);
        LOBYTE(v209[0]) = v74 != 0;
        double v75 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional((uint64_t)(a1 + 3), a2, v209);
        if (v74)
        {
          uint64_t v76 = (*(uint64_t (**)(unsigned __int8 *, double))(v214 + 80))(a4, v75);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, uint64_t, rapidjson::internal **, unsigned char *, void))*a1
          }
             + 9))(a1, a2, 0, v76, &v202, v210, 0);
        }
        unint64_t v73 = (_anonymous_namespace_ *)(a1 + 3);
      }
      return *((unsigned char *)a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_133;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v77 = **((void **)this + 2);
        uint64_t v78 = **((void **)a6 + 2);
        if ((unsigned __int16)v77 == (unsigned __int16)v78)
        {
          BOOL v18 = WORD1(v77) == WORD1(v78);
          uint64_t v79 = (v78 ^ v77) & 0xFFFFFF00000000;
          if (v18 && v79 == 0) {
            goto LABEL_133;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_133;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_295;
      }
      uint64_t v81 = *((void *)this + 2);
      uint64_t v82 = *((void *)a6 + 2);
      int v83 = *(_DWORD *)(v82 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v81 + 84) & 0xFFFFFF) != 0)
      {
        if (!v83) {
          goto LABEL_295;
        }
LABEL_133:
        if (a7)
        {
          long long v84 = a1[34];
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
          re::internal::translateType(v84, (const re::TypeRegistry *)v210, (uint64_t)&v202);
          uint64_t v85 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
          if (!v85) {
            goto LABEL_207;
          }
          long long v86 = (void (*)(re::internal **, void, void, void, rapidjson::internal **, rapidjson::internal **, uint64_t))v85;
          uint64_t v87 = *((void *)a6 + 2);
          int v88 = *(_DWORD *)(v87 + 84) & 0xFFFFFF;
          if (v88)
          {
            unint64_t v89 = 0;
            int v90 = 8;
          }
          else
          {
            unint64_t v89 = *(int *)(v87 + 88);
            int v90 = 4;
          }
          __dst.n128_u64[0] = v89;
          long long v96 = (_anonymous_namespace_ *)(a1 + 3);
          uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst, v90);
          if (!result) {
            return result;
          }
          if (v88) {
            BOOL v160 = v89 == 0;
          }
          else {
            BOOL v160 = 1;
          }
          char v161 = v160;
          if (!v160)
          {
            v209[0] = 0;
            v209[1] = 0xFFFFFFFFLL;
            (*((void (**)(re::internal **, void, void *))*a1 + 2))(a1, 0, v209);
          }
          for (; v89; --v89)
            v86(a1, 0, 0, 0, &v202, &v202, 1);
          if (v161) {
            goto LABEL_310;
          }
        }
        else
        {
          re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
          re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
          uint64_t v91 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
          if (!v91) {
            goto LABEL_207;
          }
          long long v92 = (void (*)(re::internal **, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v91;
          long long v93 = (void *)re::ArrayAccessor::size((re::ArrayAccessor *)&__dst, (char *)a4);
          v207[0] = v93;
          int v94 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
          if (v94) {
            int v95 = 8;
          }
          else {
            int v95 = 4;
          }
          long long v96 = (_anonymous_namespace_ *)(a1 + 3);
          uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, (uint64_t *)v207, v95);
          if (!result) {
            return result;
          }
          if (v94) {
            BOOL v97 = v93 == 0;
          }
          else {
            BOOL v97 = 1;
          }
          char v98 = v97;
          if (v97)
          {
            if (!v93) {
              goto LABEL_310;
            }
          }
          else
          {
            uint64_t v169 = *(void *)a4;
            v208[0] = 0;
            v208[1] = 0xFFFFFFFFLL;
            (*((void (**)(re::internal **, uint64_t, uint64_t *))*a1 + 2))(a1, v169, v208);
          }
          unint64_t v170 = 0;
          do
          {
            uint64_t v171 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&__dst, (char *)a4, v170);
            v92(a1, 0, 0, v171, &v202, v210, 0);
            ++v170;
          }
          while (v93 != (void *)v170);
          if (v98)
          {
LABEL_310:
            uint64_t v103 = v96;
LABEL_311:
            re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(v103);
            return *((unsigned char *)a1 + 64) == 0;
          }
        }
        (*((void (**)(re::internal **))*a1 + 3))(a1);
        goto LABEL_310;
      }
      if (!v83 && *(_DWORD *)(v81 + 88) == *(_DWORD *)(v82 + 88)) {
        goto LABEL_133;
      }
      goto LABEL_295;
    case 5:
      if (this == a6) {
        goto LABEL_157;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v99 = **((void **)this + 2);
        uint64_t v100 = **((void **)a6 + 2);
        if ((unsigned __int16)v99 == (unsigned __int16)v100
          && WORD1(v99) == WORD1(v100)
          && ((v100 ^ v99) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_157;
        }
        int v29 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_157;
        }
        int v29 = *((unsigned __int8 *)this + 12);
      }
      if (v29 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_295;
      }
LABEL_157:
      if (a7)
      {
        long long v101 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v101, (const re::TypeRegistry *)v210, (uint64_t)&v202);
        if (!(*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202)) {
          goto LABEL_207;
        }
        __dst.n128_u64[0] = 0;
        BOOL v102 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst, 0);
        uint64_t result = 0;
        if (v102)
        {
          uint64_t v103 = (_anonymous_namespace_ *)(a1 + 3);
          goto LABEL_311;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
      uint64_t v104 = (*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202);
      if (!v104) {
        goto LABEL_207;
      }
      int v105 = (void (*)(re::internal **, void, void, uint64_t, rapidjson::internal **, unsigned char *, void))v104;
      uint64_t v106 = (*(uint64_t (**)(unsigned __int8 *))(v214 + 80))(a4);
      v208[0] = v106;
      long long v96 = (_anonymous_namespace_ *)(a1 + 3);
      BOOL v107 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 3), a2, v208, 0);
      uint64_t result = 0;
      if (!v107) {
        return result;
      }
      if (*(void *)(v214 + 96))
      {
        if (v106)
        {
          for (uint64_t i = 0; i != v106; ++i)
          {
            uint64_t v109 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v214 + 96))(a4, i);
            v105(a1, 0, 0, v109, &v202, v210, 0);
          }
        }
      }
      else
      {
        uint64_t v176 = *(uint64_t (**)(unsigned __int8 *, re::internal *))(v214 + 104);
        if (!v176 || !*(void *)(v214 + 112) || !*(void *)(v214 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst);
          uint64_t v195 = re::TypeInfo::name((re::TypeInfo *)v209)[1];
          long long v47 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_76;
        }
        uint64_t v177 = v176(a4, a1[7]);
        uint64_t v178 = (*(uint64_t (**)(void))(v214 + 112))();
        if (v178)
        {
          uint64_t v179 = v178;
          do
          {
            v105(a1, 0, 0, v179, &v202, v210, 0);
            uint64_t v179 = (*(uint64_t (**)(uint64_t))(v214 + 112))(v177);
          }
          while (v179);
        }
        (*(void (**)(uint64_t, re::internal *))(v214 + 120))(v177, a1[7]);
      }
      goto LABEL_310;
    case 6:
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
      BOOL v31 = re::TypeInfo::name((re::TypeInfo *)&v202);
      int v32 = BYTE4(v203);
      if (BYTE4(v203) != 1) {
        goto LABEL_91;
      }
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v202))
      {
        unint64_t v33 = (unint64_t)*v31 >> 1;
        if (v33 > 0x303EE8780EDLL)
        {
          if (v33 == 0x303EE8780EELL)
          {
            uint64_t v173 = (char *)v31[1];
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
            if (v173 == "uint32_t") {
              return ((uint64_t (*)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            int v174 = strcmp(v173, "uint32_t");
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
            if (!v174) {
              return ((uint64_t (*)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            goto LABEL_318;
          }
          if (v33 != 0x303EE88E58DLL)
          {
LABEL_318:
            __dst.n128_u64[0] = 0x18E6A9A093;
            __dst.n128_u64[1] = (unint64_t)"uint8_t";
            BOOL v175 = re::StringID::operator==(v31, &__dst);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>;
            if (v175) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 0x16749F63A2;
            __dst.n128_u64[1] = (unint64_t)"int64_t";
            if (re::StringID::operator==(v31, &__dst)) {
              return ((uint64_t (*)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>)(a1, a2, a3, a4, this, a6, a7);
            }
            *(void *)uint64_t v210 = 3327612;
            *(void *)&v210[8] = "long";
            BOOL v188 = re::StringID::operator==(v31, v210);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>;
            if (v188) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 104431;
            __dst.n128_u64[1] = (unint64_t)"int";
            BOOL v189 = re::StringID::operator==(v31, &__dst);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>;
            if (v189) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            __dst.n128_u64[0] = 109413500;
            __dst.n128_u64[1] = (unint64_t)"short";
            BOOL v190 = re::StringID::operator==(v31, &__dst);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>;
            if (v190) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            goto LABEL_194;
          }
          unsigned int v114 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (v114 != "uint64_t")
          {
            uint64_t v115 = "uint64_t";
            goto LABEL_314;
          }
        }
        else
        {
          if (v33 != 3393056694)
          {
            if (v33 == 0x303EE86A734)
            {
              uint64_t v34 = (char *)v31[1];
              uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
              if (v34 == "uint16_t") {
                return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
              }
              int v36 = strcmp(v34, "uint16_t");
              uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
              if (!v36) {
                return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
              }
            }
            goto LABEL_318;
          }
          unsigned int v114 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
          if (v114 != "size_t")
          {
            uint64_t v115 = "size_t";
LABEL_314:
            int v172 = strcmp(v114, v115);
            uint64_t v35 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
            if (!v172) {
              return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
            }
            goto LABEL_318;
          }
        }
        return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
      }
      int v32 = BYTE4(v203);
LABEL_91:
      if (v32 == 8)
      {
        unint64_t v54 = (unint64_t)*v31 >> 1;
        if (v54 == 0x22C6ED80D0CLL)
        {
          uint64_t v116 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (v116 == "StringID") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
          int v117 = strcmp(v116, "StringID");
          uint64_t v35 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (!v117) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
        }
        else if (v54 == 0x134375A94D9F7110)
        {
          __int16 v55 = (char *)v31[1];
          uint64_t v35 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (v55 == "DynamicString") {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
          int v56 = strcmp(v55, "DynamicString");
          uint64_t v35 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          if (!v56) {
            return ((uint64_t (*)(void, void, void, void, void, void, void))v35)(a1, a2, a3, a4, this, a6, a7);
          }
        }
      }
LABEL_194:
      if (this == a6) {
        goto LABEL_202;
      }
      if (*(void *)this != *(void *)a6)
      {
        if (re::areSameTranslatedVersion(this, a6, v30)) {
          goto LABEL_202;
        }
        goto LABEL_201;
      }
      uint64_t v118 = **((void **)this + 2);
      uint64_t v119 = **((void **)a6 + 2);
      if ((unsigned __int16)v118 != (unsigned __int16)v119
        || WORD1(v118) != WORD1(v119)
        || ((v119 ^ v118) & 0xFFFFFF00000000) != 0)
      {
LABEL_201:
        if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12)) {
          goto LABEL_202;
        }
LABEL_295:
        return 0;
      }
LABEL_202:
      if (a7)
      {
        uint64_t v120 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v210, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v120, (const re::TypeRegistry *)v210, (uint64_t)&v202);
        uint64_t v121 = a1[34];
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v121, (const re::TypeRegistry *)v209, (uint64_t)v210);
        if ((*((uint64_t (**)(re::internal **, rapidjson::internal **))*a1 + 10))(a1, &v202))
        {
          if ((*((uint64_t (**)(re::internal **, unsigned char *))*a1 + 10))(a1, v210))
          {
            __dst.n128_u64[0] = 0;
            uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary((uint64_t)(a1 + 3), a2, (uint64_t *)&__dst);
            if (result)
            {
              uint64_t v122 = (_anonymous_namespace_ *)(a1 + 3);
              goto LABEL_368;
            }
            return result;
          }
          uint64_t v123 = (re::TypeInfo *)v210;
        }
        else
        {
LABEL_207:
          uint64_t v123 = (re::TypeInfo *)&v202;
        }
        goto LABEL_208;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v208, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v207, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v200, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)v198, (uint64_t)this);
      uint64_t v129 = (*((uint64_t (**)(re::internal **, void *))*a1 + 10))(a1, v209);
      if (!v129)
      {
        uint64_t v123 = (re::TypeInfo *)v209;
LABEL_208:
        uint64_t v196 = re::TypeInfo::name(v123)[1];
        return 0;
      }
      uint64_t v130 = (void (*)(re::internal **, const char *, void, uint64_t, void *, void **, void))v129;
      uint64_t v131 = (*((uint64_t (**)(re::internal **, uint64_t *))*a1 + 10))(a1, v208);
      if (!v131)
      {
        uint64_t v123 = (re::TypeInfo *)v208;
        goto LABEL_208;
      }
      int v132 = (void (*)(re::internal **, const char *, void, uint64_t, uint64_t *, unsigned char *, void))v131;
      unint64_t v133 = (*(uint64_t (**)(unsigned __int8 *))(v199 + 88))(a4);
      unint64_t v197 = v133;
      uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary((uint64_t)(a1 + 3), a2, (uint64_t *)&v197);
      if (!result) {
        return result;
      }
      if (!v133) {
        goto LABEL_367;
      }
      uint64_t v134 = *(void **)this;
      __dst.n128_u64[0] = 0x449AD97C4B77BED4;
      __dst.n128_u64[1] = (unint64_t)"_CompareFunc";
      uint64_t v135 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v134 + 25), &__dst);
      if (!v135)
      {
        re::StringID::destroyString((re::StringID *)&__dst);
LABEL_364:
        uint64_t v191 = (*(uint64_t (**)(unsigned __int8 *, re::internal *))(v199 + 112))(a4, a1[7]);
        (*(void (**)(void))(v199 + 120))();
        do
        {
          double v192 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry((uint64_t)(a1 + 3), 0);
          uint64_t v193 = (*(uint64_t (**)(uint64_t, double))(v199 + 128))(v191, v192);
          v130(a1, "key", 0, v193, v209, v207, 0);
          uint64_t v194 = (*(uint64_t (**)(uint64_t))(v199 + 136))(v191);
          v132(a1, "value", 0, v194, v208, v200, 0);
          re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 3));
          (*(void (**)(uint64_t))(v199 + 120))(v191);
          --v133;
        }
        while (v133);
        (*(void (**)(uint64_t, re::internal *))(v199 + 144))(v191, a1[7]);
        goto LABEL_367;
      }
      unint64_t v136 = *v135;
      re::StringID::destroyString((re::StringID *)&__dst);
      if (!v134) {
        goto LABEL_364;
      }
      unint64_t v137 = *(void *)v209[2];
      __dst.n128_u64[0] = v136;
      __dst.n128_u64[1] = v137;
      LODWORD(v214) = -1;
      uint64_t v138 = (uint64_t (**)(uint64_t, uint64_t))re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v209[0] + 768, (uint64_t *)&__dst);
      if (!v138) {
        goto LABEL_364;
      }
      uint64_t v139 = *v138;
      if (!*v138) {
        goto LABEL_364;
      }
      uint64_t v206 = 0;
      uint64_t v203 = 0;
      unint64_t v204 = 0;
      int v205 = 0;
      unint64_t v202 = a1[7];
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v202, v133);
      ++v205;
      uint64_t v140 = (*(uint64_t (**)(unsigned __int8 *, re::internal *))(v199 + 112))(a4, a1[7]);
      if ((*(unsigned int (**)(void))(v199 + 120))())
      {
        do
        {
          uint64_t v141 = (*(uint64_t (**)(uint64_t))(v199 + 128))(v140);
          uint64_t v142 = (*(uint64_t (**)(uint64_t))(v199 + 136))(v140);
          __dst.n128_u64[0] = v141;
          __dst.n128_u64[1] = v142;
          __n128 v143 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v202, &__dst);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v199 + 120))(v140, v143) & 1) != 0);
      }
      (*(void (**)(uint64_t, re::internal *))(v199 + 144))(v140, a1[7]);
      std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(v206, &v206[16 * v204], v139);
      uint64_t v144 = 0;
      unint64_t v145 = 0;
      if (v133 <= 1) {
        unint64_t v133 = 1;
      }
      do
      {
        double v146 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry((uint64_t)(a1 + 3), 0);
        unint64_t v147 = v204;
        if (v204 <= v145)
        {
          uint64_t v201 = 0;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v210 = 136315906;
          *(void *)&v210[4] = "operator[]";
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = 789;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v145;
          __int16 v211 = 2048;
          unint64_t v212 = v147;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_370:
          uint64_t v201 = 0;
          long long v216 = 0u;
          long long v217 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          __n128 __dst = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v210 = 136315906;
          *(void *)&v210[4] = "operator[]";
          *(_WORD *)&v210[12] = 1024;
          *(_DWORD *)&v210[14] = 789;
          *(_WORD *)&v210[18] = 2048;
          *(void *)&v210[20] = v145;
          __int16 v211 = 2048;
          unint64_t v212 = v147;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_371;
        }
        ((void (*)(re::internal **, const char *, void, void, void *, void **, void, double))v130)(a1, "key", 0, *(void *)&v206[v144], v209, v207, 0, v146);
        unint64_t v147 = v204;
        if (v204 <= v145) {
          goto LABEL_370;
        }
        v132(a1, "value", 0, *(void *)&v206[v144 + 8], v208, v200, 0);
        re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 3));
        ++v145;
        v144 += 16;
      }
      while (v133 != v145);
      if (v202 && v206) {
        (*(void (**)(void))(*(void *)v202 + 40))();
      }
LABEL_367:
      uint64_t v122 = (_anonymous_namespace_ *)(a1 + 3);
LABEL_368:
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(v122);
      return *((unsigned char *)a1 + 64) == 0;
    case 7:
      if (this == a6) {
        goto LABEL_59;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v110 = **((void **)this + 2);
        uint64_t v111 = **((void **)a6 + 2);
        if ((unsigned __int16)v110 != (unsigned __int16)v111) {
          goto LABEL_295;
        }
        BOOL v18 = WORD1(v110) == WORD1(v111);
        uint64_t v112 = (v111 ^ v110) & 0xFFFFFF00000000;
        if (!v18 || v112 != 0) {
          goto LABEL_295;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_295;
      }
LABEL_59:
      uint64_t v37 = (_anonymous_namespace_ *)(a1 + 3);
      uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 3), a2, 16);
      if (a7)
      {
        if (!result) {
          return result;
        }
        unint64_t v202 = 0;
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 3), "tag", &v202);
        if (*(_DWORD *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, 0, (uint64_t)&__dst);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, void, __n128 *, __n128 *, uint64_t))*a1 + 9))(a1, "value", 0, 0, &__dst, &__dst, 1);
          }
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        int64_t v52 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        unint64_t Tag = re::UnionAccessor::readTag(v52, (char *)a4);
        *(void *)uint64_t v210 = Tag;
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 3), "tag", (rapidjson::internal **)v210);
        if (Tag < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, Tag, (uint64_t)&v202);
          if (!*((unsigned char *)a1 + 64)) {
            (*((void (**)(re::internal **, const char *, void, unsigned __int8 *, rapidjson::internal **, rapidjson::internal **, void))*a1
          }
             + 9))(a1, "value", 0, a4, &v202, &v202, 0);
        }
      }
      goto LABEL_357;
    case 8:
      if (!a7) {
        goto LABEL_69;
      }
      if (*(unsigned char *)(*((void *)this + 2) + 49))
      {
        uint64_t v57 = a1[34];
        *(void *)uint64_t v210 = 0x2686EB529B3EE220;
        *(void *)&v210[8] = "DynamicString";
        re::TypeRegistry::typeInfo(v57, (const re::StringID *)v210, &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v202, (uint64_t)&__dst.n128_i64[1]);
        re::StringID::destroyString((re::StringID *)v210);
        uint64_t v58 = (re *)&v202;
        uint64_t v59 = (re::TypeInfo *)&v202;
        uint64_t v60 = (uint64_t)a1;
        uint64_t v61 = a2;
      }
      else
      {
        uint64_t v38 = re::TypeInfo::name(this);
        if ((*v38 & 0xFFFFFFFFFFFFFFFELL) != 0x2686EB529B3EE220
          || (uint64_t v40 = (char *)v38[1], v40 != "DynamicString") && strcmp(v40, "DynamicString"))
        {
LABEL_69:
          uint64_t v41 = *((void *)this + 2);
          if ((*(unsigned char *)(v41 + 48) & 4) == 0)
          {
            uint64_t v37 = (_anonymous_namespace_ *)(a1 + 3);
            BOOL v42 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 3), a2, 0);
            uint64_t result = 0;
            if (!v42) {
              return result;
            }
            uint64_t v43 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
            if (!v43 || *(_DWORD *)(v43 + 16) >= 2u)
            {
              uint64_t v45 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
              if (v45) {
                unsigned __int32 v46 = *(_DWORD *)(v45 + 16);
              }
              else {
                unsigned __int32 v46 = -1;
              }
              __dst.n128_u32[0] = v46;
              re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)(a1 + 3), "@version", (unsigned int *)&__dst);
            }
            if (this == a6) {
              goto LABEL_333;
            }
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v180 = **((void **)this + 2);
              uint64_t v181 = **((void **)a6 + 2);
              if ((unsigned __int16)v180 == (unsigned __int16)v181
                && WORD1(v180) == WORD1(v181)
                && ((v181 ^ v180) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_333;
              }
            }
            else if (re::areSameTranslatedVersion(this, a6, v44))
            {
LABEL_333:
              re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, (uint64_t)a4, (uint64_t *)this, a7);
LABEL_357:
              re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v37);
              return *((unsigned char *)a1 + 64) == 0;
            }
            if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12))
            {
              re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, (uint64_t)a4, (uint64_t *)this, (uint64_t *)a6, a7);
            }
            else
            {
              uint64_t v182 = re::TypeInfo::name(this)[1];
              re::TypeInfo::name(a6);
            }
            goto LABEL_357;
          }
          char v48 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(void *)this, v41);
          re::TypeMemberCollection::operator[](v48, 0, (uint64_t)v210);
          int64_t v49 = &a4[*(unsigned int *)(*(void *)&v210[16] + 24)];
          re::TypeRegistry::typeInfo(*(void **)v210, **(void **)&v210[16], &__dst);
          re::TypeInfo::TypeInfo((uint64_t)v209, (uint64_t)&__dst.n128_i64[1]);
          if (this != a6)
          {
            if (*(void *)this == *(void *)a6)
            {
              uint64_t v162 = **((void **)this + 2);
              uint64_t v163 = *((void *)a6 + 2);
              uint64_t v164 = *(void *)v163;
              if ((unsigned __int16)v162 == (unsigned __int16)*(void *)v163
                && WORD1(v162) == WORD1(v164)
                && ((v164 ^ v162) & 0xFFFFFF00000000) == 0)
              {
                goto LABEL_80;
              }
            }
            else
            {
              if (re::areSameTranslatedVersion(this, a6, v50)) {
                goto LABEL_80;
              }
              uint64_t v163 = *((void *)a6 + 2);
            }
            if (*(_DWORD *)(v163 + 88) == 1)
            {
              re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v202, *(void *)a6, v163);
              re::TypeMemberCollection::operator[]((uint64_t *)&v202, 0, (uint64_t)v207);
              re::TypeRegistry::typeInfo(v207[0], *v207[2], &__dst);
              re::TypeInfo::TypeInfo((uint64_t)v208, (uint64_t)&__dst.n128_i64[1]);
              if (!*((unsigned char *)a1 + 64)) {
                return (*((uint64_t (**)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, void *, uint64_t *, uint64_t))*a1
              }
                        + 9))(a1, a2, a3, v49, v209, v208, a7);
              return 0;
            }
            goto LABEL_295;
          }
LABEL_80:
          if (*((unsigned char *)a1 + 64)) {
            return 0;
          }
          return (*((uint64_t (**)(re::internal **, const char *, const re::TypeInfo *, unsigned __int8 *, void *, void *, uint64_t))*a1
                  + 9))(a1, a2, a3, v49, v209, v209, a7);
        }
        uint64_t v60 = (uint64_t)a1;
        uint64_t v61 = a2;
        uint64_t v58 = this;
        uint64_t v59 = this;
      }
      re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v60, v61, v39, 0, v58, v59, 1);
      return *((unsigned char *)a1 + 64) == 0;
    case 9:
      uint64_t v195 = re::TypeInfo::name(this)[1];
      long long v47 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_76;
    default:
      LOBYTE(v195) = *((unsigned char *)this + 12);
      long long v47 = "Invalid type category. Value = %d";
      goto LABEL_76;
  }
}

BOOL re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, const char *a2, float *a3)
{
  uint64_t v13 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v13);
    }
    float v6 = *a3;
    uint64_t v7 = *(char **)(a1 + 168);
    if (fabsf(v6) == INFINITY)
    {
      int v8 = "-Infinity";
      if (v6 > 0.0) {
        int v8 = "Infinity";
      }
      int v12 = v8;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v7, &v12);
    }
    else
    {
      double v9 = v6;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v7, v9);
    }
    uint64_t v10 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v10 - 16);
  }
  return v3 == 0;
}

BOOL re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, const char *a2, double *a3)
{
  int v12 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v12);
    }
    double v6 = *a3;
    uint64_t v7 = *(char **)(a1 + 168);
    if (fabs(v6) == INFINITY)
    {
      int v8 = "-Infinity";
      if (v6 > 0.0) {
        int v8 = "Infinity";
      }
      uint64_t v11 = v8;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v7, &v11);
    }
    else
    {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v7, v6);
    }
    uint64_t v9 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v9 - 16);
  }
  return v3 == 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(v47, (unint64_t **)&v47[v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          BOOL v31 = *(unint64_t **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(v47, (unsigned int **)&v47[v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[v45];
        do
        {
          BOOL v31 = *(unsigned int **)v29;
          uint64_t v32 = *((void *)v29++ + 1);
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(v47, &v47[2 * v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          BOOL v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v43),
        re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44),
        v42[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v42))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v44);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v43);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v44);
  re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v42);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, unsigned __int8 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(v40 + 88))(a4);
    if (v22)
    {
      long long v47 = 0;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      int v46 = 0;
      uint64_t v43 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v43, v22);
      ++v46;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v40 + 120))())
      {
        do
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(v40 + 128))(v23);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v40 + 136))(v23);
          v48[0].n128_u64[0] = v24;
          v48[0].n128_u64[1] = v25;
          __n128 v26 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v43, v48);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v40 + 120))(v23, v26) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v40 + 144))(v23, v17);
      unint64_t v27 = 126 - 2 * __clz(v45);
      if (v45) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(v47, &v47[2 * v45], v28, 1);
      if (v45)
      {
        int v29 = v47;
        uint64_t v30 = &v47[2 * v45];
        do
        {
          BOOL v31 = *v29;
          uint64_t v32 = v29[1];
          v29 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v48, *v31) = 0;
          v19(a1, v48, 0, v32, v42, v41, 0);
        }
        while (v29 != v30);
      }
      if (v43)
      {
        if (v47) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  unint64_t v33 = re::TypeInfo::name((re::TypeInfo *)v42);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      int64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(v52, (__n128 *)&v52[v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        BOOL v31 = &v52[v50];
        do
        {
          unint64_t v32 = **(void **)v30;
          if ((v32 & 0x8000000000000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unint64_t v32 = -(uint64_t)v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 19
            || (unsigned int v35 = (1233 * (64 - __clz(v32 | 1))) >> 12,
                int64_t v36 = v35 - (std::__itoa::__pow10_64[v35] > v32) + 1,
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v20);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, uint64_t, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      int64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(v52, (__n128 *)&v52[v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        BOOL v31 = &v52[v50];
        do
        {
          unsigned int v32 = **(_DWORD **)v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = *((void *)v30 + 1);
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          ++v30;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v20);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  v54[0] = *MEMORY[0x263EF8340];
  if (this == a6) {
    goto LABEL_13;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49),
        v47[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v47))
  {
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v17 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, __n128 *, void, __int16 *, unsigned char *, unsigned char *, void))v18;
    BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v21 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
    if (v23)
    {
      int64_t v52 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 0;
      int v51 = 0;
      uint64_t v48 = v17;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v23);
      ++v51;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v17);
      if ((*(unsigned int (**)(void))(v45 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v24);
          v53[0].n128_u64[0] = v25;
          v53[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, v53);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v24, v17);
      unint64_t v28 = 126 - 2 * __clz(v50);
      if (v50) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(v52, &v52[2 * v50], v29, 1);
      if (v50)
      {
        uint64_t v30 = v52;
        BOOL v31 = &v52[2 * v50];
        do
        {
          unsigned int v32 = **v30;
          if ((v32 & 0x80000000) != 0)
          {
            v53[0].n128_u8[0] = 45;
            unsigned int v32 = -v32;
            unint64_t v33 = (__n128 *)((char *)v53[0].n128_u64 + 1);
          }
          else
          {
            unint64_t v33 = v53;
          }
          uint64_t v34 = v30[1];
          if ((char *)v54 - (char *)v33 > 9
            || (unsigned int v35 = (1233 * (32 - __clz(v32 | 1))) >> 12,
                int64_t v36 = (((__PAIR64__(v35, v32) - std::__itoa::__pow10_32[v35]) >> 32) + 1),
                uint64_t v37 = v54,
                (char *)v54 - (char *)v33 >= v36))
          {
            uint64_t v37 = std::__itoa::__base_10_u32[abi:nn180100](v33, v32);
          }
          *(unsigned char *)uint64_t v37 = 0;
          v19(a1, v53, 0, v34, v47, v46, 0);
          v30 += 2;
        }
        while (v30 != v31);
      }
      if (v48)
      {
        if (v52) {
          (*(void (**)(void))(*(void *)v48 + 40))();
        }
      }
      BOOL v20 = (_anonymous_namespace_ *)(a1 + 24);
    }
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v20);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v47);
  return 0;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL v24 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        int64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(v52, &v52[2 * v50], v32, 1);
        if (v50)
        {
          unint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v35 = *v33;
            if (*(unsigned char *)(*v33 + 8)) {
              uint64_t v36 = *(void *)(v35 + 16);
            }
            else {
              uint64_t v36 = v35 + 9;
            }
            v23(a1, v36, 0, v33[1], v47, v46, 0);
            v33 += 2;
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID")) {
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)this;
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14) {
      goto LABEL_10;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v48);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v49);
      re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)this);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v47);
      if (!v22)
      {
        uint64_t v37 = re::TypeInfo::name((re::TypeInfo *)v47);
        return 0;
      }
      unint64_t v23 = (void (*)(uint64_t, void, void, uint64_t, unsigned char *, unsigned char *, void))v22;
      BOOL v24 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0);
      BOOL result = 0;
      if (!v24) {
        return result;
      }
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(v45 + 88))(a4);
      if (v26)
      {
        int64_t v52 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v51 = 0;
        uint64_t v48 = v21;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v26);
        ++v51;
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 112))(a4, v21);
        if ((*(unsigned int (**)(void))(v45 + 120))())
        {
          do
          {
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(v45 + 128))(v27);
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v45 + 136))(v27);
            v43.n128_u64[0] = v28;
            v43.n128_u64[1] = v29;
            __n128 v30 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v48, &v43);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v45 + 120))(v27, v30) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 144))(v27, v21);
        unint64_t v31 = 126 - 2 * __clz(v50);
        if (v50) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>((unint64_t)v52, (__n128 *)&v52[2 * v50], v32, 1);
        if (v50)
        {
          unint64_t v33 = v52;
          uint64_t v34 = &v52[2 * v50];
          do
          {
            uint64_t v36 = *v33;
            uint64_t v35 = v33[1];
            v33 += 2;
            v23(a1, *(void *)(v36 + 8), 0, v35, v47, v46, 0);
          }
          while (v33 != v34);
        }
        if (v48)
        {
          if (v52) {
            (*(void (**)(void))(*(void *)v48 + 40))();
          }
        }
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void **)a6;
  uint64_t v14 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v48);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v49);
  uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)v47);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    BOOL v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString")) {
      goto LABEL_14;
    }
  }
  return 0;
}

void std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(char *a1, char *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v3 = 126 - 2 * __clz((a2 - a1) >> 4);
  uint64_t v5 = a3;
  if (a2 == a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, a2, &v5, v4, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(long long *a1, unint64_t **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(void **)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v10, (unint64_t **)(v10 + 16), (unint64_t **)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (unint64_t **)(v10 + 16);
            BOOL v41 = (unint64_t **)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(unint64_t **)(v43 + 16);
                  if (*v45 < **(void **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v79 = v39;
                uint64_t v80 = (unint64_t *)*((void *)a1 + 2);
                if (*v80 < **(void **)a1)
                {
                  uint64_t v81 = (unint64_t *)*((void *)a1 + 3);
                  uint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)uint64_t v82 = *((_OWORD *)v82 - 1);
                    int v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (*v80 < *v83);
                  *uint64_t v82 = v80;
                  v82[1] = v81;
                }
                uint64_t v39 = v79 + 2;
                a1 = (long long *)v79;
              }
              while (v79 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unint64_t **)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (unint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v55 = **v54;
                    unint64_t v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unint64_t v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = **v54;
                  }
                  uint64_t v58 = (unint64_t **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (unint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v65 = **v54;
                        unint64_t v63 = *v54[2];
                        BOOL v64 = v65 >= v63;
                        if (v65 <= v63) {
                          unint64_t v65 = *v54[2];
                        }
                        if (v64) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(void **)v69 < **(void **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if ((unint64_t **)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 < **(void **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, (unint64_t **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1 + 2, (unint64_t **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)v14 - 1, v14, (unint64_t **)&a1[v13 + 1]);
            long long v84 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(&a1[v12 >> 1], (unint64_t **)a1, a2 - 2);
          }
          --a3;
          uint64_t v15 = *(unint64_t **)a1;
          unint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unint64_t **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unint64_t *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v86;
            unint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unint64_t *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          unint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unint64_t **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(unint64_t **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unint64_t *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unint64_t **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t a1, unint64_t **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      int v8 = (unint64_t **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32));
      uint64_t v9 = (unint64_t **)(a1 + 48);
      if ((unint64_t **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (unint64_t **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t **)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(long long *a1, unsigned int **a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = (long long *)(a2 - 2);
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (_OWORD *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v10, (unsigned int **)(v10 + 16), (unsigned int **)(v10 + 32), (__n128 *)(v10 + 48), (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (unsigned int **)(v10 + 16);
            BOOL v41 = (unsigned int **)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(unsigned int **)(v43 + 16);
                  if (*v45 < **(_DWORD **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(_DWORD **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v79 = v39;
                uint64_t v80 = (unsigned int *)*((void *)a1 + 2);
                if (*v80 < **(_DWORD **)a1)
                {
                  uint64_t v81 = (unsigned int *)*((void *)a1 + 3);
                  uint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)uint64_t v82 = *((_OWORD *)v82 - 1);
                    int v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (*v80 < *v83);
                  *uint64_t v82 = v80;
                  v82[1] = v81;
                }
                uint64_t v39 = v79 + 2;
                a1 = (long long *)v79;
              }
              while (v79 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((unsigned int **)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (unsigned int **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  uint64_t v58 = (unsigned int **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (unsigned int **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v65 = **v54;
                        unsigned int v63 = *v54[2];
                        BOOL v64 = v65 >= v63;
                        if (v65 <= v63) {
                          unsigned int v65 = *v54[2];
                        }
                        if (v64) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(_DWORD **)v69 < **(_DWORD **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if ((unsigned int **)v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(_DWORD **)v69;
                    if (**(_DWORD **)v74 < **(_DWORD **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(_DWORD **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (unsigned int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, (unsigned int **)&a1[v12 >> 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 1, v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1 + 2, (unsigned int **)&a1[v13 + 1], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)v14 - 1, v14, (unsigned int **)&a1[v13 + 1]);
            long long v84 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(&a1[v12 >> 1], (unsigned int **)a1, a2 - 2);
          }
          --a3;
          unint64_t v15 = *(unsigned int **)a1;
          unsigned int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = (unsigned int **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = a2;
            do
              uint64_t v32 = (unsigned int *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            _OWORD *v31 = v86;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (unsigned int *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          unsigned int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = (unsigned int **)&a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = *(unsigned int **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (unsigned int *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v10 - 16));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (unsigned int **)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      int v8 = (unsigned int **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32));
      uint64_t v9 = (unsigned int **)(a1 + 48);
      if ((unsigned int **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned int **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = (unsigned int **)a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(unsigned __int16 **a1, unsigned __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v88 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v88;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(unsigned __int16 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (unsigned __int16 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v80 = v39;
                uint64_t v81 = a1[2];
                if (*v81 < **a1)
                {
                  uint64_t v82 = a1[3];
                  int v83 = v80;
                  do
                  {
                    *(_OWORD *)int v83 = *((_OWORD *)v83 - 1);
                    long long v84 = *(v83 - 4);
                    v83 -= 2;
                  }
                  while (*v81 < *v84);
                  unsigned int *v83 = v81;
                  v83[1] = v82;
                }
                uint64_t v39 = v80 + 2;
                a1 = v80;
              }
              while (v80 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  uint64_t v58 = &v10[2 * v52];
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v63 = **v54;
                        unsigned int v64 = *v54[2];
                        BOOL v65 = v63 >= v64;
                        unsigned int v66 = v63 <= v64 ? *v54[2] : **v54;
                        if (v65) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v66 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v66 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v67 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v68 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v69[2 * v68 + 2];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v67 && **v70 < *v70[2])
                  {
                    v70 += 2;
                    uint64_t v71 = v72;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 16;
                  if (v73 >= 17)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 4) - 2) >> 1;
                    double v75 = &v10[2 * v74];
                    uint64_t v76 = *v70;
                    if (**v75 < **v70)
                    {
                      uint64_t v77 = v70[1];
                      do
                      {
                        uint64_t v78 = v70;
                        uint64_t v70 = v75;
                        *(_OWORD *)uint64_t v78 = *(_OWORD *)v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        double v75 = &v10[2 * v74];
                      }
                      while (**v75 < *v76);
                      *uint64_t v70 = v76;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v85 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v85;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v87 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v87;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v86;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)double v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      int v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int16 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v88 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v88;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unsigned int v48 = **(unsigned __int8 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (unsigned __int8 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v80 = v39;
                uint64_t v81 = a1[2];
                if (*v81 < **a1)
                {
                  uint64_t v82 = a1[3];
                  int v83 = v80;
                  do
                  {
                    *(_OWORD *)int v83 = *((_OWORD *)v83 - 1);
                    long long v84 = *(v83 - 4);
                    v83 -= 2;
                  }
                  while (*v81 < *v84);
                  unsigned int *v83 = v81;
                  v83[1] = v82;
                }
                uint64_t v39 = v80 + 2;
                a1 = v80;
              }
              while (v80 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unsigned int v55 = **v54;
                    unsigned int v57 = *v54[2];
                    BOOL v56 = v55 >= v57;
                    if (v55 > v57) {
                      unsigned int v57 = **v54;
                    }
                    if (!v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v57 = **v54;
                  }
                  uint64_t v58 = &v10[2 * v52];
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unsigned int v63 = **v54;
                        unsigned int v64 = *v54[2];
                        BOOL v65 = v63 >= v64;
                        unsigned int v66 = v63 <= v64 ? *v54[2] : **v54;
                        if (v65) {
                          uint64_t v53 = v62;
                        }
                        else {
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v66 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v66 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v67 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v68 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v69[2 * v68 + 2];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v67 && **v70 < *v70[2])
                  {
                    v70 += 2;
                    uint64_t v71 = v72;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(_OWORD *)uint64_t v70 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v70 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 16;
                  if (v73 >= 17)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 4) - 2) >> 1;
                    double v75 = &v10[2 * v74];
                    uint64_t v76 = *v70;
                    if (**v75 < **v70)
                    {
                      uint64_t v77 = v70[1];
                      do
                      {
                        uint64_t v78 = v70;
                        uint64_t v70 = v75;
                        *(_OWORD *)uint64_t v78 = *(_OWORD *)v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        double v75 = &v10[2 * v74];
                      }
                      while (**v75 < *v76);
                      *uint64_t v70 = v76;
                      v70[1] = v77;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v85 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v85;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          unsigned int v15 = *a1;
          unsigned int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v87 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v87;
            unsigned int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          unsigned int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v86;
            unsigned int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)double v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      int v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int8 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unsigned int v16 = (unsigned __int8 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (void *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 < **(void **)v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)&a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (__n128 *)a2[-1].n128_u64);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v10, (uint64_t **)(v10 + 16), (uint64_t **)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(void **)(v43 + 16);
                  if (*v45 < **(void **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      uint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = (void *)*((void *)a1 + 2);
                if (*v79 < **(void **)a1)
                {
                  uint64_t v80 = (void *)*((void *)a1 + 3);
                  uint64_t v81 = v78;
                  do
                  {
                    __n128 *v81 = v81[-1];
                    uint64_t v82 = (void *)v81[-2].n128_u64[0];
                    --v81;
                  }
                  while (*v79 < *v82);
                  v81->n128_u64[0] = (unint64_t)v79;
                  v81->n128_u64[1] = (unint64_t)v80;
                }
                uint64_t v39 = v78 + 1;
                a1 = (long long *)v78;
              }
              while (&v78[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (uint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    uint64_t v55 = **v54;
                    uint64_t v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      uint64_t v57 = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v57 = **v54;
                  }
                  uint64_t v58 = (uint64_t **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (uint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        uint64_t v65 = **v54;
                        uint64_t v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          uint64_t v65 = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        uint64_t v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(void **)v69 < **(void **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v87;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 < **(void **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (uint64_t **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, (uint64_t **)&a1[v12 >> 1], (uint64_t **)&a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 1, v14 - 2, (uint64_t **)&a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1 + 2, (uint64_t **)&a1[v13 + 1], (uint64_t **)&a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)v14 - 1, v14, (uint64_t **)&a1[v13 + 1]);
            long long v83 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(&a1[v12 >> 1], (uint64_t **)a1, (uint64_t **)&a2[-1]);
          }
          --a3;
          unsigned int v15 = *(uint64_t **)a1;
          uint64_t v16 = **(void **)a1;
          if ((a4 & 1) != 0 || **((void **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= *(void *)a2[-1].n128_u64[0])
          {
            __n128 v30 = (void **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (void **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(void **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (void *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v85;
            uint64_t v34 = *v15;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (void *)*((void *)a1 + 1);
        do
          uint64_t v19 = **(void **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (long long *)v21) {
              break;
            }
            unint64_t v23 = (void *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < (long long *)v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v84;
            uint64_t v25 = *v15;
            do
            {
              unint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (void *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (long long *)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      int v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          uint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (void *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    int v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(long long *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (long long *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = (_DWORD *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 < **(_DWORD **)v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)&a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (__n128 *)a2[-1].n128_u64);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v10, (int **)(v10 + 16), (int **)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(_DWORD **)(v43 + 16);
                  if (*v45 < **(_DWORD **)v43)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      int v48 = **(_DWORD **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = (_DWORD *)*((void *)a1 + 2);
                if (*v79 < **(_DWORD **)a1)
                {
                  uint64_t v80 = (_DWORD *)*((void *)a1 + 3);
                  uint64_t v81 = v78;
                  do
                  {
                    __n128 *v81 = v81[-1];
                    uint64_t v82 = (_DWORD *)v81[-2].n128_u64[0];
                    --v81;
                  }
                  while (*v79 < *v82);
                  v81->n128_u64[0] = (unint64_t)v79;
                  v81->n128_u64[1] = (unint64_t)v80;
                }
                uint64_t v39 = v78 + 1;
                a1 = (long long *)v78;
              }
              while (&v78[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = (int **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    int v55 = **v54;
                    int v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      int v57 = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    int v57 = **v54;
                  }
                  uint64_t v58 = (int **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >= **v58)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = (int **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        int v65 = **v54;
                        int v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          int v65 = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        int v65 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v65 >= *v59);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v67 + 1];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **(_DWORD **)v69 < **(_DWORD **)(v69 + 16))
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v87;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(_DWORD **)v69;
                    if (**(_DWORD **)v74 < **(_DWORD **)v69)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(_DWORD **)v74 < *v75);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (int **)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, (int **)&a1[v12 >> 1], (int **)&a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 1, v14 - 2, (int **)&a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1 + 2, (int **)&a1[v13 + 1], (int **)&a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)v14 - 1, v14, (int **)&a1[v13 + 1]);
            long long v83 = *a1;
            *a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(&a1[v12 >> 1], (int **)a1, (int **)&a2[-1]);
          }
          --a3;
          uint64_t v15 = *(int **)a1;
          int v16 = **(_DWORD **)a1;
          if ((a4 & 1) != 0 || **((_DWORD **)a1 - 2) < v16) {
            break;
          }
          if (v16 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            __n128 v30 = (_DWORD **)(a1 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v30;
              if (v30 >= (_DWORD **)a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **(_DWORD **)v10);
          }
          else
          {
            unint64_t v10 = (unint64_t)a1;
            do
            {
              uint64_t v29 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (_DWORD *)*((void *)v31-- - 2);
            while (v16 < *v32);
          }
          unint64_t v33 = (_DWORD *)*((void *)a1 + 1);
          while (v10 < (unint64_t)v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v85;
            int v34 = *v15;
            do
            {
              uint64_t v35 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35);
            do
              uint64_t v36 = (_DWORD *)*((void *)v31-- - 2);
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 16 >= (unint64_t)a1;
          BOOL v5 = v10 - 16 == (void)a1;
          if ((long long *)(v10 - 16) != a1) {
            *a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = (_DWORD *)*((void *)a1 + 1);
        do
          int v19 = **(_DWORD **)&a1[++v17];
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (long long *)v21) {
              break;
            }
            unint64_t v23 = (_DWORD *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = (_DWORD *)v21[-1].n128_u64[0];
            --v21;
          }
          while (*v22 >= v16);
        }
        unint64_t v10 = (unint64_t)&a1[v17];
        if (v20 < (long long *)v21)
        {
          BOOL v24 = (long long *)v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v84;
            int v25 = *v15;
            do
            {
              unint64_t v26 = *(_DWORD **)(v10 + 16);
              v10 += 16;
            }
            while (*v26 < v25);
            do
              uint64_t v27 = (_DWORD *)*((void *)v24-- - 2);
            while (*v27 >= v25);
          }
          while (v10 < (unint64_t)v24);
        }
        if ((long long *)(v10 - 16) != a1) {
          *a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (long long *)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = (long long *)(a2 - 16);
      if (**(_DWORD **)(a2 - 16) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      int v8 = (_DWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(_DWORD **)v9;
    if (**(_DWORD **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      int v16 = (void *)a1;
LABEL_12:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    int v8 = (_DWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(__int16 **a1, __int16 **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v38 = *(a2 - 2);
                uint64_t v37 = a2 - 2;
                if (*v38 < **v10)
                {
                  long long v86 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v86;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (_OWORD *)a2 - 1);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, v10 + 2, (__n128 *)v10 + 2, (__n128 *)v10 + 3, (__n128 *)a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = v10 + 2;
            BOOL v41 = v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = v43[2];
                  if (*v45 < **v43)
                  {
                    uint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v47 + 16) = *(_OWORD *)((char *)v10 + v47);
                      if (!v47) {
                        break;
                      }
                      int v48 = **(__int16 **)((char *)v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >= v48)
                      {
                        uint64_t v49 = (__int16 **)((char *)v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = v39;
                uint64_t v79 = a1[2];
                if (*v79 < **a1)
                {
                  uint64_t v80 = a1[3];
                  uint64_t v81 = v78;
                  do
                  {
                    *(_OWORD *)uint64_t v81 = *((_OWORD *)v81 - 1);
                    uint64_t v82 = *(v81 - 4);
                    v81 -= 2;
                  }
                  while (*v79 < *v82);
                  __n128 *v81 = v79;
                  v81[1] = v80;
                }
                uint64_t v39 = v78 + 2;
                a1 = v78;
              }
              while (v78 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  unint64_t v54 = &v10[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    int v55 = **v54;
                    int v57 = *v54[2];
                    BOOL v56 = v55 < v57;
                    if (v55 > v57) {
                      LOWORD(v57) = **v54;
                    }
                    if (v56)
                    {
                      v54 += 2;
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    LOWORD(v57) = **v54;
                  }
                  uint64_t v58 = &v10[2 * v52];
                  uint64_t v59 = *v58;
                  if (**v58 <= (__int16)v57)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      unint64_t v54 = &v10[2 * v62];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        int v65 = **v54;
                        int v63 = *v54[2];
                        BOOL v64 = v65 < v63;
                        if (v65 <= v63) {
                          LOWORD(v65) = *v54[2];
                        }
                        if (v64) {
                          v54 += 2;
                        }
                        else {
                          uint64_t v53 = v62;
                        }
                      }
                      else
                      {
                        LOWORD(v65) = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (*v59 <= (__int16)v65);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v87 = *(_OWORD *)v10;
                uint64_t v68 = v10;
                do
                {
                  uint64_t v69 = &v68[2 * v67 + 2];
                  uint64_t v70 = (2 * v67) | 1;
                  uint64_t v71 = 2 * v67 + 2;
                  if (v71 < v66 && **v69 < *v69[2])
                  {
                    v69 += 2;
                    uint64_t v70 = v71;
                  }
                  *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = v69;
                  uint64_t v67 = v70;
                }
                while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if (v69 == a2)
                {
                  *(_OWORD *)uint64_t v69 = v87;
                }
                else
                {
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v87;
                  uint64_t v72 = (char *)v69 - (char *)v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = &v10[2 * v73];
                    double v75 = *v69;
                    if (**v74 < **v69)
                    {
                      uint64_t v76 = v69[1];
                      do
                      {
                        uint64_t v77 = v69;
                        uint64_t v69 = v74;
                        *(_OWORD *)uint64_t v77 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = &v10[2 * v73];
                      }
                      while (**v74 < *v75);
                      *uint64_t v69 = v75;
                      v69[1] = v76;
                    }
                  }
                }
                BOOL v56 = v66-- <= 2;
              }
              while (!v56);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v12 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v14 - 2, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v13 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v14 - 2, v14, &a1[2 * v13 + 2]);
            long long v83 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v83;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v12 >> 1)], a1, (_OWORD *)a2 - 1);
          }
          --a3;
          int v15 = *a1;
          int v16 = **a1;
          if ((a4 & 1) != 0 || **(a1 - 2) < v16) {
            break;
          }
          if (v16 >= **(a2 - 2))
          {
            __n128 v30 = a1 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= a2) {
                break;
              }
              v30 += 2;
            }
            while (v16 >= **v10);
          }
          else
          {
            uint64_t v10 = a1;
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while (v16 >= *v29);
          }
          unint64_t v31 = a2;
          if (v10 < a2)
          {
            unint64_t v31 = a2;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v16 < *v32);
          }
          unint64_t v33 = a1[1];
          while (v10 < v31)
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v85;
            int v34 = *v15;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v34 >= *v35);
            do
            {
              uint64_t v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v34 < *v36);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v15;
          *(v10 - 1) = v33;
        }
        uint64_t v17 = 0;
        BOOL v18 = a1[1];
        do
        {
          int v19 = *a1[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        BOOL v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v23 >= v16);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (*v22 >= v16);
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v84 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v84;
            int v25 = *v15;
            do
            {
              unint64_t v26 = v10[2];
              v10 += 2;
            }
            while (*v26 < v25);
            do
            {
              uint64_t v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (*v27 >= v25);
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v15;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v10, a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = a2 - 2;
      if (**(a2 - 2) < **a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)double v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (__n128 *)a1 + 2, (__n128 *)a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      int v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a1 + 2, (_OWORD *)a1 + 2);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(__int16 **)((char *)a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          int v16 = (__int16 **)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      int v16 = a1;
LABEL_12:
      *int v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 2;
    int v95 = a2 - 4;
    long long v96 = a2;
    long long v93 = a2 - 6;
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          int v11 = v96;
          uint64_t v12 = (char *)v96 - (char *)v10;
          uint64_t v13 = ((char *)v96 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v35 = v96 - 2;
                if (re::DynamicString::operator<(*(v96 - 2), *v10))
                {
                  long long v100 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v35;
                  *(_OWORD *)uint64_t v35 = v100;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v9);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v9);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            uint64_t v36 = v10 + 2;
            BOOL v38 = v10 == v96 || v36 == v96;
            if (a4)
            {
              if (!v38)
              {
                uint64_t v39 = 0;
                uint64_t v40 = v10;
                do
                {
                  BOOL v41 = v36;
                  uint64_t v42 = v40[2];
                  if (re::DynamicString::operator<(v42, *v40))
                  {
                    uint64_t v43 = v40[3];
                    uint64_t v44 = v39;
                    while (1)
                    {
                      uint64_t v45 = (char *)v10 + v44;
                      *(_OWORD *)((char *)v10 + v44 + 16) = *(_OWORD *)((char *)v10 + v44);
                      if (!v44) {
                        break;
                      }
                      v44 -= 16;
                      if ((re::DynamicString::operator<(v42, *((void *)v45 - 2)) & 1) == 0)
                      {
                        uint64_t v46 = (uint64_t *)((char *)v10 + v44 + 16);
                        goto LABEL_77;
                      }
                    }
                    uint64_t v46 = v10;
LABEL_77:
                    *uint64_t v46 = v42;
                    v46[1] = v43;
                  }
                  uint64_t v36 = v41 + 2;
                  v39 += 16;
                  uint64_t v40 = v41;
                }
                while (v41 + 2 != v96);
              }
            }
            else if (!v38)
            {
              do
              {
                long long v85 = v36;
                uint64_t v86 = a1[2];
                if (re::DynamicString::operator<(v86, *a1))
                {
                  uint64_t v87 = a1[3];
                  long long v88 = v85;
                  do
                  {
                    long long v89 = v88 - 2;
                    *(_OWORD *)long long v88 = *((_OWORD *)v88 - 1);
                    char v90 = re::DynamicString::operator<(v86, *(v88 - 4));
                    long long v88 = v89;
                  }
                  while ((v90 & 1) != 0);
                  *long long v89 = v86;
                  v89[1] = v87;
                }
                uint64_t v36 = v85 + 2;
                a1 = v85;
              }
              while (v85 + 2 != v96);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != v96)
            {
              unint64_t v91 = (char *)v96 - (char *)v10;
              int64_t v47 = (unint64_t)(v13 - 2) >> 1;
              int64_t v48 = v47;
              do
              {
                int64_t v49 = v48;
                if (v47 >= v48)
                {
                  uint64_t v50 = (2 * v48) | 1;
                  int64_t v51 = &a1[2 * v50];
                  uint64_t v52 = 2 * v48 + 2;
                  if (v52 < v13)
                  {
                    uint64_t v53 = *v51;
                    int64_t v54 = v48;
                    uint64_t v55 = v51[2];
                    int v56 = re::DynamicString::operator<(*v51, v55);
                    BOOL v57 = v56 == 0;
                    if (v56) {
                      uint64_t v58 = v55;
                    }
                    else {
                      uint64_t v58 = v53;
                    }
                    int64_t v49 = v54;
                    int64_t v47 = (unint64_t)(v13 - 2) >> 1;
                    if (!v57)
                    {
                      v51 += 2;
                      uint64_t v50 = v52;
                    }
                  }
                  else
                  {
                    uint64_t v58 = *v51;
                  }
                  uint64_t v59 = &a1[2 * v49];
                  uint64_t v60 = *v59;
                  if ((re::DynamicString::operator<(v58, *v59) & 1) == 0)
                  {
                    uint64_t v92 = v59[1];
                    int64_t v94 = v49;
                    do
                    {
                      uint64_t v61 = v59;
                      uint64_t v59 = v51;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v51;
                      if (v47 < v50) {
                        break;
                      }
                      uint64_t v62 = (2 * v50) | 1;
                      int64_t v51 = &a1[2 * v62];
                      uint64_t v63 = 2 * v50 + 2;
                      if (v63 < v13)
                      {
                        uint64_t v64 = *v51;
                        uint64_t v65 = v51[2];
                        int v66 = re::DynamicString::operator<(*v51, v65);
                        BOOL v67 = v66 == 0;
                        if (v66) {
                          uint64_t v68 = v65;
                        }
                        else {
                          uint64_t v68 = v64;
                        }
                        if (!v67) {
                          v51 += 2;
                        }
                        int64_t v47 = (unint64_t)(v13 - 2) >> 1;
                        uint64_t v50 = v67 ? v62 : v63;
                      }
                      else
                      {
                        uint64_t v68 = *v51;
                        uint64_t v50 = (2 * v50) | 1;
                      }
                    }
                    while (!re::DynamicString::operator<(v68, v60));
                    int64_t v49 = v94;
                    uint64_t *v59 = v60;
                    v59[1] = v92;
                  }
                }
                int64_t v48 = v49 - 1;
              }
              while (v49);
              uint64_t v69 = v91 >> 4;
              uint64_t v70 = v96;
              do
              {
                uint64_t v71 = 0;
                long long v101 = *(_OWORD *)a1;
                uint64_t v72 = v69 - 2;
                if (v69 < 2) {
                  uint64_t v72 = v69 - 1;
                }
                uint64_t v73 = v72 >> 1;
                unint64_t v74 = a1;
                do
                {
                  double v75 = &v74[2 * v71 + 2];
                  uint64_t v76 = (2 * v71) | 1;
                  uint64_t v77 = 2 * v71 + 2;
                  if (v77 < v69 && re::DynamicString::operator<(*v75, v74[2 * v71 + 4]))
                  {
                    v75 += 2;
                    uint64_t v76 = v77;
                  }
                  *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
                  unint64_t v74 = v75;
                  uint64_t v71 = v76;
                }
                while (v76 <= v73);
                v70 -= 2;
                if (v75 == v70)
                {
                  *(_OWORD *)double v75 = v101;
                }
                else
                {
                  *(_OWORD *)double v75 = *(_OWORD *)v70;
                  *(_OWORD *)uint64_t v70 = v101;
                  uint64_t v78 = (char *)v75 - (char *)a1 + 16;
                  if (v78 >= 17)
                  {
                    unint64_t v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                    uint64_t v80 = &a1[2 * v79];
                    uint64_t v81 = *v75;
                    if (re::DynamicString::operator<(*v80, *v75))
                    {
                      uint64_t v82 = v75[1];
                      do
                      {
                        long long v83 = v75;
                        double v75 = v80;
                        *(_OWORD *)long long v83 = *(_OWORD *)v80;
                        if (!v79) {
                          break;
                        }
                        unint64_t v79 = (v79 - 1) >> 1;
                        uint64_t v80 = &a1[2 * v79];
                      }
                      while ((re::DynamicString::operator<(*v80, v81) & 1) != 0);
                      *double v75 = v81;
                      v75[1] = v82;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          int v15 = &v10[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15, v10, v9);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v15, v9);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 2, v15 - 2, v95);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10 + 4, &v10[2 * v14 + 2], v93);
            int v11 = v96;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15 - 2, v15, &v10[2 * v14 + 2]);
            long long v97 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v15;
            *(_OWORD *)int v15 = v97;
          }
          --a3;
          uint64_t v16 = *v10;
          if (a4 & 1) != 0 || (re::DynamicString::operator<(*(v10 - 2), *v10)) {
            break;
          }
          uint64_t v28 = v10[1];
          if (re::DynamicString::operator<(v16, *v9))
          {
            do
            {
              uint64_t v29 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v16, v29) & 1) == 0);
          }
          else
          {
            __n128 v30 = v10 + 2;
            do
            {
              uint64_t v10 = v30;
              if (v30 >= v96) {
                break;
              }
              v30 += 2;
            }
            while (!re::DynamicString::operator<(v16, *v10));
          }
          unint64_t v31 = v96;
          if (v10 < v96)
          {
            unint64_t v31 = v96;
            do
            {
              uint64_t v32 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            long long v99 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v99;
            do
            {
              uint64_t v33 = v10[2];
              v10 += 2;
            }
            while (!re::DynamicString::operator<(v16, v33));
            do
            {
              uint64_t v34 = *(v31 - 2);
              v31 -= 2;
            }
            while ((re::DynamicString::operator<(v16, v34) & 1) != 0);
          }
          BOOL v4 = v10 - 2 >= a1;
          BOOL v5 = v10 - 2 == a1;
          if (v10 - 2 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v16;
          *(v10 - 1) = v28;
        }
        uint64_t v17 = 0;
        uint64_t v18 = a1[1];
        do
        {
          char v19 = re::DynamicString::operator<(a1[v17 + 2], v16);
          v17 += 2;
        }
        while ((v19 & 1) != 0);
        BOOL v20 = &a1[v17];
        uint64_t v21 = v11;
        if (v17 == 2)
        {
          uint64_t v21 = v11;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while ((re::DynamicString::operator<(v23, v16) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (!re::DynamicString::operator<(v22, v16));
        }
        uint64_t v10 = &a1[v17];
        if (v20 < v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v98 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v98;
            do
            {
              uint64_t v25 = v10[2];
              v10 += 2;
            }
            while ((re::DynamicString::operator<(v25, v16) & 1) != 0);
            do
            {
              uint64_t v26 = *(v24 - 2);
              v24 -= 2;
            }
            while (!re::DynamicString::operator<(v26, v16));
          }
          while (v10 < v24);
        }
        if (v10 - 2 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 2) = v16;
        *(v10 - 1) = v18;
        if (v20 >= v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v10 - 2);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v10, v96))
      {
        break;
      }
      if (!v27) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 2;
    if (!v27) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = a2 - 2;
      if (re::DynamicString::operator<(*(a2 - 2), *a1))
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)double v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      int v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (re::DynamicString::operator<(*v9, *v8))
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        int v15 = (char *)a1 + v14;
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if ((re::DynamicString::operator<(v12, *((void *)v15 + 2)) & 1) == 0)
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                BOOL v38 = (void *)a2[-1].n128_u64[0];
                uint64_t v37 = (long long *)&a2[-1];
                if (*v38 >> 1 < **(void **)v10 >> 1)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *v37;
                  long long *v37 = v87;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (void **)(v10 + 16), &a2[-1]);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), a2 - 1);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)v10, (__n128 *)(v10 + 16), (__n128 *)(v10 + 32), (__n128 *)(v10 + 48), a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v39 = (__n128 *)(v10 + 16);
            BOOL v41 = (__n128 *)v10 == a2 || v39 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v10;
                do
                {
                  uint64_t v44 = v39;
                  uint64_t v45 = *(void **)(v43 + 16);
                  if (*v45 >> 1 < **(void **)v43 >> 1)
                  {
                    uint64_t v46 = *(void *)(v43 + 24);
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v47 + 16) = *(_OWORD *)(v10 + v47);
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = **(void **)(v10 + v47 - 16);
                      v47 -= 16;
                      if (*v45 >> 1 >= v48 >> 1)
                      {
                        int64_t v49 = (void *)(v10 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int64_t v49 = (void *)v10;
LABEL_79:
                    void *v49 = v45;
                    v49[1] = v46;
                  }
                  uint64_t v39 = v44 + 1;
                  v42 += 16;
                  unint64_t v43 = (unint64_t)v44;
                }
                while (&v44[1] != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                unint64_t v79 = (unint64_t)v39;
                uint64_t v80 = *(void **)(a1 + 16);
                if (*v80 >> 1 < **(void **)a1 >> 1)
                {
                  uint64_t v81 = *(void *)(a1 + 24);
                  unint64_t v82 = v79;
                  do
                  {
                    *(_OWORD *)unint64_t v82 = *(_OWORD *)(v82 - 16);
                    long long v83 = *(void **)(v82 - 32);
                    v82 -= 16;
                  }
                  while (*v80 >> 1 < *v83 >> 1);
                  *(void *)unint64_t v82 = v80;
                  *(void *)(v82 + 8) = v81;
                }
                uint64_t v39 = (__n128 *)(v79 + 16);
                a1 = v79;
              }
              while ((__n128 *)(v79 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v50 = (v12 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  int64_t v54 = (unint64_t **)(v10 + 16 * v53);
                  if (2 * v52 + 2 < (uint64_t)v12)
                  {
                    unint64_t v55 = **v54 >> 1;
                    unint64_t v57 = *v54[2];
                    BOOL v56 = v55 >= v57 >> 1;
                    if (v55 < v57 >> 1) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v57 = **v54;
                    }
                    if (!v56) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = **v54;
                  }
                  uint64_t v58 = (unint64_t **)(v10 + 16 * v52);
                  uint64_t v59 = *v58;
                  if (v57 >> 1 >= **v58 >> 1)
                  {
                    uint64_t v60 = v58[1];
                    do
                    {
                      uint64_t v61 = v58;
                      uint64_t v58 = v54;
                      *(_OWORD *)uint64_t v61 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v62 = (2 * v53) | 1;
                      int64_t v54 = (unint64_t **)(v10 + 16 * v62);
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v12)
                      {
                        unint64_t v63 = **v54;
                        if (v63 >> 1 >= *v54[2] >> 1)
                        {
                          uint64_t v53 = v62;
                        }
                        else
                        {
                          unint64_t v63 = *v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v63 = **v54;
                        uint64_t v53 = v62;
                      }
                    }
                    while (v63 >> 1 >= *v59 >> 1);
                    re *v58 = v59;
                    v58[1] = v60;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v64 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v65 = 0;
                long long v88 = *(_OWORD *)v10;
                uint64_t v66 = v64 - 2;
                if (v64 < 2) {
                  uint64_t v66 = v64 - 1;
                }
                uint64_t v67 = v66 >> 1;
                uint64_t v68 = (_OWORD *)v10;
                do
                {
                  uint64_t v69 = (uint64_t)&v68[v65 + 1];
                  uint64_t v70 = (2 * v65) | 1;
                  uint64_t v71 = 2 * v65 + 2;
                  if (v71 < v64 && **(void **)v69 >> 1 < **(void **)(v69 + 16) >> 1)
                  {
                    v69 += 16;
                    uint64_t v70 = v71;
                  }
                  *uint64_t v68 = *(_OWORD *)v69;
                  uint64_t v68 = (_OWORD *)v69;
                  uint64_t v65 = v70;
                }
                while (v70 <= v67);
                if ((__n128 *)v69 == --a2)
                {
                  *(_OWORD *)uint64_t v69 = v88;
                }
                else
                {
                  *(__n128 *)uint64_t v69 = *a2;
                  *a2 = (__n128)v88;
                  uint64_t v72 = v69 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                    double v75 = *(void **)v69;
                    if (**(void **)v74 >> 1 < **(void **)v69 >> 1)
                    {
                      uint64_t v76 = *(void *)(v69 + 8);
                      do
                      {
                        uint64_t v77 = (_OWORD *)v69;
                        uint64_t v69 = (uint64_t)v74;
                        _OWORD *v77 = *v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = (_OWORD *)(v10 + 16 * v73);
                      }
                      while (**(void **)v74 >> 1 < *v75 >> 1);
                      *(void *)uint64_t v69 = v75;
                      *(void *)(v69 + 8) = v76;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16 * (v12 >> 1)), &a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 16), (void **)v14 - 2, &a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 32), (void **)(a1 + 16 + 16 * v13), &a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v14 - 1, (void **)v14, (void **)(a1 + 16 + 16 * v13));
            long long v84 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v14;
            long long *v14 = v84;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)(a1 + 16 * (v12 >> 1)), (void **)a1, &a2[-1]);
          }
          --a3;
          int v15 = *(void **)a1;
          unint64_t v16 = **(void **)a1 >> 1;
          if ((a4 & 1) != 0 || v16 > **(void **)(a1 - 16) >> 1) {
            break;
          }
          if (v16 >= *(void *)a2[-1].n128_u64[0] >> 1)
          {
            unint64_t v30 = a1 + 16;
            do
            {
              unint64_t v10 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 16;
            }
            while (v16 >= **(void **)v10 >> 1);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              uint64_t v29 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v16 >= *v29 >> 1);
          }
          unint64_t v31 = (long long *)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v31 = (long long *)a2;
            do
              uint64_t v32 = (void *)*((void *)v31-- - 2);
            while (v16 < *v32 >> 1);
          }
          uint64_t v33 = *(void *)(a1 + 8);
          while (v10 < (unint64_t)v31)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v31;
            long long *v31 = v86;
            unint64_t v34 = *v15 >> 1;
            do
            {
              uint64_t v35 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v34 >= *v35 >> 1);
            do
              uint64_t v36 = (void *)*((void *)v31-- - 2);
            while (v34 < *v36 >> 1);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 8);
        do
        {
          unint64_t v19 = **(void **)(a1 + v17 + 16);
          v17 += 16;
        }
        while (v16 > v19 >> 1);
        unint64_t v20 = a1 + v17;
        uint64_t v21 = (long long *)a2;
        if (v17 == 16)
        {
          uint64_t v21 = (long long *)a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            uint64_t v23 = (void *)*((void *)v21-- - 2);
          }
          while (v16 <= *v23 >> 1);
        }
        else
        {
          do
            uint64_t v22 = (void *)*((void *)v21-- - 2);
          while (v16 <= *v22 >> 1);
        }
        unint64_t v10 = a1 + v17;
        if (v20 < (unint64_t)v21)
        {
          BOOL v24 = v21;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v24;
            long long *v24 = v85;
            unint64_t v25 = *v15 >> 1;
            do
            {
              uint64_t v26 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v25 > *v26 >> 1);
            do
              BOOL v27 = (void *)*((void *)v24-- - 2);
            while (v25 <= *v27 >> 1);
          }
          while (v10 < (unint64_t)v24);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v18;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (__n128 *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) >> 1 < **(void **)a1 >> 1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      int v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((long long *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *(void **)v9;
    if (**(void **)v9 >> 1 < **v8 >> 1)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >> 1 >= v15 >> 1)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    int v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  while (2)
  {
    long long v86 = a2 - 32;
    long long v88 = a2 - 16;
    long long v84 = a2 - 48;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = (a2 - v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v38 = *((void *)a2 - 2);
                uint64_t v37 = a2 - 16;
                if ((*a3)(v38, *(void *)a1))
                {
                  long long v99 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *(_OWORD *)v37;
                  *(_OWORD *)uint64_t v37 = v99;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, v88, a3);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, v88, a3);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, v88, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 383)
          {
            uint64_t v39 = a1 + 16;
            BOOL v41 = a1 == a2 || v39 == a2;
            if (a5)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = a1;
                do
                {
                  uint64_t v44 = *((void *)v43 + 2);
                  uint64_t v45 = *(void *)v43;
                  unint64_t v43 = v39;
                  if ((*a3)(v44, v45))
                  {
                    long long v93 = *(_OWORD *)v43;
                    uint64_t v46 = *(void *)v43;
                    uint64_t v47 = v42;
                    while (1)
                    {
                      *(_OWORD *)&a1[v47 + 16] = *(_OWORD *)&a1[v47];
                      if (!v47) {
                        break;
                      }
                      char v48 = (*a3)(v46, *(void *)&a1[v47 - 16]);
                      v47 -= 16;
                      if ((v48 & 1) == 0)
                      {
                        int64_t v49 = &a1[v47 + 16];
                        goto LABEL_78;
                      }
                    }
                    int64_t v49 = a1;
LABEL_78:
                    *(_OWORD *)int64_t v49 = v93;
                  }
                  uint64_t v39 = v43 + 16;
                  v42 += 16;
                }
                while (v43 + 16 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v78 = *((void *)a1 + 2);
                uint64_t v79 = *(void *)a1;
                a1 = v39;
                if ((*a3)(v78, v79))
                {
                  long long v95 = *(_OWORD *)a1;
                  uint64_t v80 = *(void *)a1;
                  uint64_t v81 = a1;
                  do
                  {
                    unint64_t v82 = v81 - 16;
                    *(_OWORD *)uint64_t v81 = *((_OWORD *)v81 - 1);
                    char v83 = (*a3)(v80, *((void *)v81 - 4));
                    uint64_t v81 = v82;
                  }
                  while ((v83 & 1) != 0);
                  *(_OWORD *)unint64_t v82 = v95;
                }
                uint64_t v39 = a1 + 16;
              }
              while (a1 + 16 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              unint64_t v85 = v13;
              long long v87 = a2;
              int64_t v50 = (unint64_t)(v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  int64_t v54 = &a1[16 * v53];
                  if (2 * v51 + 2 < v14 && (*a3)(*(void *)v54, *((void *)v54 + 2)))
                  {
                    v54 += 16;
                    uint64_t v53 = 2 * v52 + 2;
                  }
                  unint64_t v55 = &a1[16 * v52];
                  if (((*a3)(*(void *)v54, *(void *)v55) & 1) == 0)
                  {
                    int64_t v94 = v52;
                    long long v89 = *(_OWORD *)v55;
                    uint64_t v56 = *(void *)v55;
                    do
                    {
                      unint64_t v57 = v55;
                      unint64_t v55 = v54;
                      *(_OWORD *)unint64_t v57 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v58 = (2 * v53) | 1;
                      int64_t v54 = &a1[16 * v58];
                      uint64_t v59 = 2 * v53 + 2;
                      if (v59 < v14 && (*a3)(*(void *)v54, *((void *)v54 + 2)))
                      {
                        v54 += 16;
                        uint64_t v58 = v59;
                      }
                      uint64_t v53 = v58;
                    }
                    while (!(*a3)(*(void *)v54, v56));
                    *(_OWORD *)unint64_t v55 = v89;
                    int64_t v52 = v94;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v60 = v87;
              uint64_t v61 = v85 >> 4;
              do
              {
                uint64_t v62 = 0;
                long long v100 = *(_OWORD *)a1;
                uint64_t v63 = v61 - 2;
                if (v61 < 2) {
                  uint64_t v63 = v61 - 1;
                }
                uint64_t v64 = v63 >> 1;
                uint64_t v65 = a1;
                do
                {
                  uint64_t v66 = (uint64_t *)&v65[16 * v62 + 16];
                  uint64_t v67 = (2 * v62) | 1;
                  uint64_t v68 = 2 * v62 + 2;
                  if (v68 < v61 && (*a3)(*v66, *(void *)&v65[16 * v62 + 32]))
                  {
                    v66 += 2;
                    uint64_t v67 = v68;
                  }
                  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
                  uint64_t v65 = (char *)v66;
                  uint64_t v62 = v67;
                }
                while (v67 <= v64);
                uint64_t v69 = (uint64_t *)(v60 - 16);
                if (v66 == v69)
                {
                  uint64_t v70 = v69;
                  *(_OWORD *)uint64_t v66 = v100;
                  uint64_t v72 = v61 - 1;
                }
                else
                {
                  *(_OWORD *)uint64_t v66 = *(_OWORD *)v69;
                  uint64_t v70 = v69;
                  *(_OWORD *)uint64_t v69 = v100;
                  uint64_t v71 = (char *)v66 - a1 + 16;
                  uint64_t v72 = v61 - 1;
                  if (v71 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v71 >> 4) - 2) >> 1;
                    unint64_t v74 = &a1[16 * v73];
                    if ((*a3)(*(void *)v74, *v66))
                    {
                      long long v90 = *(_OWORD *)v66;
                      uint64_t v75 = *v66;
                      do
                      {
                        uint64_t v76 = v66;
                        uint64_t v66 = (uint64_t *)v74;
                        *(_OWORD *)uint64_t v76 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = &a1[16 * v73];
                      }
                      while (((*a3)(*(void *)v74, v75) & 1) != 0);
                      *(_OWORD *)uint64_t v66 = v90;
                    }
                  }
                }
                BOOL v77 = v61 <= 2;
                uint64_t v61 = v72;
                uint64_t v60 = (char *)v70;
              }
              while (!v77);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          unint64_t v16 = &a1[16 * ((unint64_t)v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v16, a1, v88, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v16, v88, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)a1 + 2, (void *)v16 - 2, v86, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)a1 + 4, &a1[16 * v15 + 16], v84, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((void *)v16 - 2, v16, &a1[16 * v15 + 16], a3);
            long long v96 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)unint64_t v16 = v96;
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)(*((void *)a1 - 2), *(void *)a1)) {
            break;
          }
          long long v92 = *(_OWORD *)a1;
          uint64_t v29 = *(void *)a1;
          if ((*a3)(*(void *)a1, *(void *)v88))
          {
            unint64_t v12 = a1;
            do
            {
              uint64_t v30 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (((*a3)(v29, v30) & 1) == 0);
          }
          else
          {
            unint64_t v31 = a1 + 16;
            do
            {
              unint64_t v12 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 16;
            }
            while (!(*a3)(v29, *(void *)v12));
          }
          uint64_t v32 = a2;
          if (v12 < a2)
          {
            uint64_t v32 = a2;
            do
            {
              uint64_t v33 = *((void *)v32 - 2);
              v32 -= 16;
            }
            while (((*a3)(v29, v33) & 1) != 0);
          }
          while (v12 < v32)
          {
            long long v98 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v32;
            *(_OWORD *)uint64_t v32 = v98;
            do
            {
              uint64_t v34 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (!(*a3)(v29, v34));
            do
            {
              uint64_t v35 = *((void *)v32 - 2);
              v32 -= 16;
            }
            while (((*a3)(v29, v35) & 1) != 0);
          }
          uint64_t v36 = v12 - 16;
          BOOL v5 = v12 - 16 >= a1;
          BOOL v6 = v12 - 16 == a1;
          if (v12 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)v36;
          }
          a5 = 0;
          *(_OWORD *)uint64_t v36 = v92;
        }
        uint64_t v17 = 0;
        long long v91 = *(_OWORD *)a1;
        uint64_t v18 = *(void *)a1;
        do
        {
          char v19 = (*a3)(*(void *)&a1[v17 + 16], v18);
          v17 += 16;
        }
        while ((v19 & 1) != 0);
        unint64_t v20 = &a1[v17];
        uint64_t v21 = a2;
        if (v17 == 16)
        {
          do
          {
            if (v20 >= a2) {
              break;
            }
            uint64_t v23 = *((void *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
          {
            uint64_t v22 = *((void *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v22, v18));
        }
        unint64_t v12 = &a1[v17];
        if (v20 < a2)
        {
          BOOL v24 = a2;
          do
          {
            long long v97 = *(_OWORD *)v12;
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v97;
            do
            {
              uint64_t v25 = *((void *)v12 + 2);
              v12 += 16;
            }
            while (((*a3)(v25, v18) & 1) != 0);
            do
            {
              uint64_t v26 = *((void *)v24 - 2);
              v24 -= 16;
            }
            while (!(*a3)(v26, v18));
          }
          while (v12 < v24);
        }
        BOOL v27 = v12 - 16;
        if (v12 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)v27;
        }
        *(_OWORD *)BOOL v27 = v91;
        BOOL v5 = v20 >= a2;
        a2 = v21;
        if (v5) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v12 - 16, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v12 - 16, a3);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v12, v21, a3))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = v12 - 16;
    if (!v28) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *(void *)a1))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)int v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      int v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *(void *)v10))
    {
      long long v18 = *(_OWORD *)v11;
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = v12;
      while (1)
      {
        *(_OWORD *)&a1[v15 + 48] = *(_OWORD *)&a1[v15 + 32];
        if (v15 == -32) {
          break;
        }
        char v16 = (*a3)(v14, *(void *)&a1[v15 + 16]);
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          uint64_t v17 = &a1[v15 + 48];
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v17 = v18;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

BOOL re::serializeDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (long long v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    uint64_t v24 = 0;
    BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, &v24);
    if (!result) {
      return result;
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(a4 + 8);
  if (v21) {
    uint64_t v22 = v21 >> 1;
  }
  else {
    uint64_t v22 = v21 >> 1;
  }
  uint64_t v24 = v22;
  BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, &v24);
  if (result)
  {
    if (v22)
    {
      if (*(unsigned char *)(a4 + 8)) {
        uint64_t v23 = *(void *)(a4 + 16);
      }
      else {
        uint64_t v23 = a4 + 9;
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, v23);
    }
    unint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_27:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v19);
  if (v19[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v20);
    if (*(_DWORD *)(v17 + 88) || (re::TypeRegistry::typeInfo(v16[0], *(void *)(v17 + 72), v21), v21[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, v16, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v16, *a3, a3[2]);
  if (v18)
  {
    for (unint64_t i = 0; i < v18; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v16, i, (uint64_t)&v14);
      if (*(unsigned char *)(v15 + 28))
      {
        uint64_t v10 = *(void *)(v15 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v15 + 32);
        uint64_t v12 = *(unsigned int *)(v15 + 24);
        re::TypeRegistry::typeInfo(v14, *(void *)v15, v21);
        uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v22);
        if (!a1[64]) {
          uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, a2 + v12, v13, v13, a4);
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v49);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v45);
  if (v45[0])
  {
    if (!v49[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v46)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
    }
    if (v50 == v46)
    {
      uint64_t v18 = *v52;
      uint64_t v19 = *v48;
      if ((unsigned __int16)*v52 == (unsigned __int16)*v48)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v50, (const re::TypeInfo *)&v46, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, &v50, a5);
      goto LABEL_15;
    }
    if (v51 == v47)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, &v50, &v46, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v50)[1];
      re::TypeInfo::name((re::TypeInfo *)&v46);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v42, *a4, a4[2]);
  if (v43)
  {
    for (unint64_t i = 0; i < v43; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v42, i, (uint64_t)v40);
      if (*(unsigned char *)(v41 + 28))
      {
        uint64_t v29 = *(void *)(v41 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v41 + 32);
        unint64_t v31 = *(re **)(*a4 + 856);
        if (!v31
          || (unint64_t v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v40),
              v31 == -1))
        {
          uint64_t v33 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v54 = v34;
            __int16 v55 = 2080;
            uint64_t v56 = v29;
            _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          uint64_t v35 = *(re::internal **)(a1 + 272);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v54 + 4);
          uint64_t result = re::internal::translateType(v35, (const re::TypeRegistry *)v38, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v44, (int)v31, (uint64_t)v38);
          uint64_t v32 = *(unsigned int *)(v39 + 24);
          re::TypeRegistry::typeInfo(v38[0], *(void *)v39, buf);
          re::TypeInfo::TypeInfo((uint64_t)v37, (uint64_t)&v54 + 4);
          re::TypeRegistry::typeInfo(v40[0], *(void *)v41, buf);
          uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v36, (uint64_t)&v54 + 4);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, a2 + v32, v37, v36, a5);
          }
        }
      }
    }
  }
  return result;
}

BOOL re::serializeBool<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, a2, v13);
}

BOOL re::serializeChar<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(a1 + 24, a2, (uint64_t)v13);
}

BOOL re::serializeI8<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(a1 + 24, a2, v13);
}

BOOL re::serializeI16<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = &v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(a1 + 24, a2, v13);
}

BOOL re::serializeI32<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, v13);
}

BOOL re::serializeI64<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unint64_t *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(a1 + 24, a2, v13);
}

BOOL re::serializeU8<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, int a7)
{
  char v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int8 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(a1 + 24, a2, v13);
}

BOOL re::serializeU16<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *this, re::TypeInfo *a6, int a7)
{
  __int16 v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned __int16 *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(a1 + 24, a2, v13);
}

BOOL re::serializeU32<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (unsigned int *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, a2, v13);
}

BOOL re::serializeU64<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, rapidjson::internal **a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (rapidjson::internal **)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, a2, v13);
}

BOOL re::serializeFloat<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, int a7)
{
  int v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (float *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, v13);
}

BOOL re::serializeDouble<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v19 = 0;
  if (this != a6)
  {
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v15 = **((void **)this + 2);
      uint64_t v16 = **((void **)a6 + 2);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        BOOL v18 = WORD1(v15) == WORD1(v16);
        uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        BOOL v18 = v18 && v17 == 0;
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, a6, a3))
    {
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  if (a7) {
    uint64_t v13 = (double *)&v19;
  }
  else {
    uint64_t v13 = a4;
  }
  return re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, v13);
}

uint64_t re::serializeCString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_18:
      return 0;
    }
    uint64_t v18 = **((void **)this + 2);
    uint64_t v19 = **((void **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19) {
      goto LABEL_18;
    }
    BOOL v21 = WORD1(v18) == WORD1(v19);
    uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    BOOL v21 = v21 && v20 == 0;
    if (!v21) {
      goto LABEL_18;
    }
  }
LABEL_4:
  if (a7)
  {
    LODWORD(v22) = 0;
    int v13 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (int *)&v22);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_22;
  }
  uint64_t v16 = *a4;
  int v23 = 2 * (*a4 != 0);
  uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v23);
  if (!result) {
    return result;
  }
  if (v16)
  {
    if (*a4)
    {
      size_t v17 = strlen(*a4);
      size_t v22 = v17;
      if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22))
      {
        if (v17) {
          re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, (uint64_t)*a4);
        }
        goto LABEL_20;
      }
    }
    else
    {
      size_t v22 = 0;
      if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22))
      {
LABEL_20:
      }
    }
  }
  uint64_t v15 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_22:
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  if (this == a6) {
    goto LABEL_14;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v13 = **((void **)this + 2);
    uint64_t v14 = **((void **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      BOOL v16 = WORD1(v13) == WORD1(v14);
      uint64_t v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      BOOL v16 = v16 && v15 == 0;
      if (v16) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  size_t v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (uint64_t v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    size_t v22 = 0;
    BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22);
    if (!result) {
      return result;
    }
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    size_t v21 = strlen(*(const char **)(a4 + 8));
    size_t v22 = v21;
    BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t *)&v22);
    if (!result) {
      return result;
    }
    if (v21) {
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, *(void *)(a4 + 8));
    }
    uint64_t v20 = (_anonymous_namespace_ *)(a1 + 24);
  }
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, unint64_t **this, unint64_t **a6, int a7)
{
  if (this != a6)
  {
    if (*this != *a6)
    {
      if (re::areSameTranslatedVersion((re *)this, (const re::TypeInfo *)a6, a3)) {
        goto LABEL_4;
      }
LABEL_26:
      return 0;
    }
    uint64_t v21 = *this[2];
    uint64_t v22 = *a6[2];
    if ((unsigned __int16)v21 != (unsigned __int16)v22) {
      goto LABEL_26;
    }
    BOOL v24 = WORD1(v21) == WORD1(v22);
    uint64_t v23 = (v22 ^ v21) & 0xFFFFFF00000000;
    BOOL v24 = v24 && v23 == 0;
    if (!v24) {
      goto LABEL_26;
    }
  }
LABEL_4:
  if (!a7)
  {
    unint64_t v14 = *this[2];
    uint64_t v30 = (uint64_t)*this;
    unint64_t v31 = v14;
    LODWORD(v32) = -1;
    v34[0] = 0x258C98EAAF29A10ALL;
    v34[1] = (uint64_t)"CallbackSerializerAttribute";
    uint64_t v15 = (uint64_t *)re::TypeAttributeCollection::operator[](&v30, v34);
    re::StringID::destroyString((re::StringID *)v34);
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(a1 + 264);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = v18;
    unint64_t v31 = 0;
    re::DynamicString::setCapacity(&v30, 0);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v16 + 72))(v17, v16, a4, &v30))
    {
      if (v31) {
        uint64_t v19 = v31 >> 1;
      }
      else {
        uint64_t v19 = v31 >> 1;
      }
      v34[0] = v19;
      if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, v34))
      {
        if (v19)
        {
          if (v31) {
            uint64_t v20 = v32;
          }
          else {
            uint64_t v20 = (char *)&v31 + 1;
          }
          re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, (uint64_t)v20);
        }
        if (v30)
        {
          if (v31) {
            (*(void (**)(void))(*(void *)v30 + 40))();
          }
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name((re::TypeInfo *)this);
    }
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    return 0;
  }
  uint64_t v30 = 0;
  BOOL result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, &v30);
  if (result)
  {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(unsigned char *a1, const char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_14:
      return 0;
    }
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 != (unsigned __int16)v16) {
      goto LABEL_14;
    }
    BOOL v18 = WORD1(v15) == WORD1(v16);
    uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    BOOL v18 = v18 && v17 == 0;
    if (!v18) {
      goto LABEL_14;
    }
  }
LABEL_4:
  if (!*a4)
  {
    LODWORD(v25) = 0;
    uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
    int v22 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (int *)&v25);
    uint64_t result = 0;
    if (!v22) {
      return result;
    }
    goto LABEL_22;
  }
  if (!a1[336]
    || (uint64_t v25 = *a4,
        (uint64_t v11 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a1 + 344), (uint64_t *)&v25)) == 0))
  {
    int v24 = 2;
    if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, &v24))
    {
      uint64_t v19 = (const char *)strlen(*a4);
      uint64_t v25 = v19;
      uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 24), a2, (uint64_t *)&v25);
      if (!result) {
        return result;
      }
      if (v19) {
        re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString((uint64_t)(a1 + 24), (uint64_t)*a4);
      }
      uint64_t v20 = *a4;
      uint64_t v21 = **((void **)this + 2);
      *(void *)&long long v23 = *(void *)this;
      *((void *)&v23 + 1) = v21;
      re::internal::SharedObjectGraph::addObject((uint64_t)(a1 + 336), (uint64_t)v20, &v23);
      return a1[64] == 0;
    }
    return 0;
  }
  int v12 = *v11;
  int v24 = 1;
  LODWORD(v25) = v12;
  uint64_t v13 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, &v24);
  if (!result) {
    return result;
  }
  re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((uint64_t)(a1 + 24), (unsigned int *)&v25);
LABEL_22:
  return a1[64] == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, const char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  BOOL isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6) {
    goto LABEL_4;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v28 = **((void **)this + 2);
    uint64_t v29 = **((void **)a6 + 2);
    if ((unsigned __int16)v28 == (unsigned __int16)v29)
    {
      BOOL v31 = WORD1(v28) == WORD1(v29);
      uint64_t v30 = (v29 ^ v28) & 0xFFFFFF00000000;
      BOOL v31 = v31 && v30 == 0;
      if (v31) {
        goto LABEL_4;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    int v15 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (uint64_t v32 = re::TypeInfo::name(this), v33 = re::TypeInfo::name(a6), !re::StringID::operator==(v32, v33))))
  {
    return 0;
  }
  int v15 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    uint64_t v20 = *(void *)v49[2];
    *(void *)&long long v47 = v49[0];
    *((void *)&v47 + 1) = v20;
    if (v49[0]) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  re::internal::actualType(a4, (void **)this, &v47);
  if (!(void)v47)
  {
LABEL_15:
    uint64_t v21 = re::TypeInfo::name(this);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, (re **)&v47, &v50);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v51);
  if ((a7 & 1) != 0 || (uint64_t v16 = *a4) == 0)
  {
    LODWORD(v50) = 0;
    BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
    int v27 = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (int *)&v50);
    uint64_t result = 0;
    if (v27) {
      goto LABEL_17;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 336))
  {
LABEL_33:
    long long v45 = v47;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), (uint64_t)v16, &v45);
    int v44 = 2;
    uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, &v44);
    if (!result) {
      return result;
    }
    if (!isPointerToPolymorphicType)
    {
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, char *, void *, void *, void))(*(void *)a1 + 72))(a1, a2, 0, *a4, v49, v48, 0);
      }
      goto LABEL_45;
    }
    uint64_t v34 = *a4;
    re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v46);
    if (v15)
    {
      uint64_t v35 = (re::TypeRegistry *)v48[0];
      uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)v46);
      re::TypeRegistry::typeInfo(v35, (const re::StringID *)v36, &v50);
      if (!(_BYTE)v50)
      {
        uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v46);
LABEL_45:
        if (*(unsigned char *)(a1 + 336))
        {
          --*(void *)(a1 + 488);
          ++*(_DWORD *)(a1 + 496);
        }
        return *(unsigned char *)(a1 + 64) == 0;
      }
      re::TypeInfo::operator=((uint64_t)v52, (uint64_t)v51);
    }
    if (re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, 0))
    {
      uint64_t v37 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v52);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, uint64_t, void, char *, unsigned char *, int *, void))(*(void *)a1 + 72))(a1, v37[1], 0, v34, v46, v52, 0);
      }
      re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    goto LABEL_45;
  }
  uint64_t v50 = *a4;
  uint64_t v17 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 344, (uint64_t *)&v50);
  if (!v17)
  {
    uint64_t v16 = *a4;
    goto LABEL_33;
  }
  LODWORD(v50) = *v17;
  v52[0] = 1;
  BOOL v18 = (_anonymous_namespace_ *)(a1 + 24);
  uint64_t result = re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, v52);
  if (result)
  {
    re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(a1 + 24, (unsigned int *)&v50);
LABEL_17:
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

void re::ServiceRegistry::~ServiceRegistry(re::ServiceRegistry *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 16);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit((uint64_t *)this + 2);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit(v1);
}

{
  uint64_t *v1;
  uint64_t vars8;

  uint64_t v1 = (uint64_t *)((char *)this + 16);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit((uint64_t *)this + 2);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ServiceRegistry::doGetService(re::ServiceRegistry *this, const re::IntrospectionBase *a2, StringID *a3)
{
  re::StringID::StringID((re::StringID *)&v18, a3);
  uint64_t v19 = a2;
  re::StringID::StringID((re::StringID *)v20, &v18);
  re::StringID::destroyString((re::StringID *)&v18);
  unint64_t v5 = re::internal::ServiceKeyHash::operator()((uint64_t)&v21, &v19);
  unint64_t v6 = *((unsigned int *)this + 10);
  if (!v6 || (uint64_t v7 = *(unsigned int *)(*((void *)this + 3) + 4 * (v5 % v6)), v7 == 0x7FFFFFFF))
  {
LABEL_9:
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v8 = *((void *)this + 4);
    long long v9 = v19;
    unint64_t v10 = v20[0];
    uint64_t v11 = (const char *)v20[1];
    while (1)
    {
      uint64_t v12 = v8 + 40 * v7;
      unint64_t v14 = *(const re::IntrospectionBase **)(v12 + 8);
      uint64_t v13 = v12 + 8;
      if (v14 == v9 && (v10 ^ *(void *)(v13 + 8)) <= 1)
      {
        int v15 = *(const char **)(v13 + 16);
        if (v15 == v11 || !strcmp(v15, v11)) {
          break;
        }
      }
      uint64_t v7 = *(_DWORD *)(v8 + 40 * v7) & 0x7FFFFFFF;
      if (v7 == 0x7FFFFFFF) {
        goto LABEL_9;
      }
    }
    uint64_t v16 = *(void *)(v8 + 40 * v7 + 32);
  }
  re::StringID::destroyString((re::StringID *)v20);
  return v16;
}

void *re::allocInfo_ServiceRegistry(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_492, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_492))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F120, "ServiceRegistry");
    __cxa_guard_release(&_MergedGlobals_492);
  }
  return &unk_26AF9F120;
}

void re::initInfo_ServiceRegistry(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x196524EDC9931BE4;
  v5[1] = "ServiceRegistry";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_ServiceRegistry(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ServiceRegistry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ServiceRegistry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ServiceRegistry>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ServiceRegistry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ServiceRegistry>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E721018;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_DWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 52) = 0x7FFFFFFFLL;
}

double re::internal::defaultDestruct<re::ServiceRegistry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (uint64_t *)(a3 + 16);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit((uint64_t *)(a3 + 16));
  return re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit(v3);
}

void re::internal::defaultConstructV2<re::ServiceRegistry>(uint64_t a1)
{
  *(void *)a1 = &unk_26E721018;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 52) = 0x7FFFFFFFLL;
}

double re::internal::defaultDestructV2<re::ServiceRegistry>(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 16);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit((uint64_t *)(a1 + 16));
  return re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit(v1);
}

uint64_t re::introspect_ServiceRegistry(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ServiceRegistry", (uint64_t (*)(re::internal *))re::allocInfo_ServiceRegistry, (re::IntrospectionBase *(*)(void))re::initInfo_ServiceRegistry, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ServiceRegistry>, this);
}

void *re::allocInfo_EntitlementService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_493, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_493))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F1A0, "EntitlementService");
    __cxa_guard_release(&_MergedGlobals_493);
  }
  return &unk_26AF9F1A0;
}

void re::initInfo_EntitlementService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x522BBC3B11E1D0;
  v5[1] = "EntitlementService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_EntitlementService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_EntitlementService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EntitlementService", (uint64_t (*)(re::internal *))re::allocInfo_EntitlementService, (re::IntrospectionBase *(*)(void))re::initInfo_EntitlementService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::EntitlementService>, this);
}

void *re::internal::missingServiceErrorMessage@<X0>(re::internal *this@<X0>, const re::IntrospectionBase *a2@<X1>, re::DynamicString *a3@<X8>)
{
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  re::DynamicString::setCapacity(a3, 0);
  re::DynamicString::append(a3, "Service of type '", 0x11uLL);
  re::getPrettyTypeName(this, (const re::IntrospectionBase *)&v14);
  if ((uint64_t)__s2[0]) {
    uint64_t v7 = __s2[1];
  }
  else {
    uint64_t v7 = (char *)__s2 + 1;
  }
  if ((uint64_t)__s2[0]) {
    size_t v8 = (unint64_t)__s2[0] >> 1;
  }
  else {
    size_t v8 = LOBYTE(__s2[0]) >> 1;
  }
  re::DynamicString::append(a3, v7, v8);
  if (v14 && ((uint64_t)__s2[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  re::StringID::invalid((re::StringID *)&v14);
  if ((v14 ^ *(void *)a2) >= 2)
  {
    re::StringID::destroyString((re::StringID *)&v14);
  }
  else
  {
    long long v9 = (char *)*((void *)a2 + 1);
    if (v9 == __s2[0])
    {
      re::StringID::destroyString((re::StringID *)&v14);
      return re::DynamicString::append(a3, "' is required but is not registered in the service locator.", 0x3BuLL);
    }
    int v10 = strcmp(v9, __s2[0]);
    re::StringID::destroyString((re::StringID *)&v14);
    if (!v10) {
      return re::DynamicString::append(a3, "' is required but is not registered in the service locator.", 0x3BuLL);
    }
  }
  re::DynamicString::append(a3, "' and key '", 0xBuLL);
  uint64_t v11 = (const char *)*((void *)a2 + 1);
  size_t v12 = strlen(v11);
  re::DynamicString::append(a3, v11, v12);
  return re::DynamicString::append(a3, "' is required but is not registered in the service locator.", 0x3BuLL);
}

uint64_t re::BackgroundTask::BackgroundTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  std::__function::__value_func<re::BackgroundTaskResult ()(re::BackgroundTask &)>::__value_func[abi:nn180100](a1 + 8, a3);
  std::__function::__value_func<void ()(re::BackgroundTask &)>::__value_func[abi:nn180100](a1 + 40, a4);
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 1018212795;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  long long v6 = dispatch_group_create();

  uint64_t v7 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v6;

  return a1;
}

void re::BackgroundTask::~BackgroundTask(re::BackgroundTask *this)
{
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 160));
  std::mutex::~mutex((std::mutex *)((char *)this + 96));
  std::__function::__value_func<void ()(re::BackgroundTask &)>::~__value_func[abi:nn180100]((void *)this + 5);
  std::__function::__value_func<re::BackgroundTaskResult ()(re::BackgroundTask &)>::~__value_func[abi:nn180100]((void *)this + 1);
}

uint64_t std::__function::__value_func<re::BackgroundTaskResult ()(re::BackgroundTask &)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *re::foundationThreadingLogObjects(re *this)
{
  {
    re::foundationThreadingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Foundation.Threading");
    qword_2687A18F8 = (uint64_t)os_log_create("com.apple.re", "Foundation.JobSystem");
  }
  return &re::foundationThreadingLogObjects(void)::logObjects;
}

void re::internal::WorkerThread::~WorkerThread(re::internal::WorkerThread *this)
{
  re::internal::WorkerThread::deinit(this);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 464));
  std::mutex::~mutex((std::mutex *)((char *)this + 400));
  re::WorkStealingQueue<re::Job *>::deinit((uint64_t)this + 192);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  uint64_t v2 = (void *)*((void *)this + 8);
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (v2)
  {
    free(v2);
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
  }
  std::thread::~thread((std::thread *)this + 1);
}

void *re::internal::WorkerThread::deinit(void *this)
{
  if (*this)
  {
    uint64_t v1 = this;
    re::WorkStealingQueue<re::Job *>::deinit((uint64_t)(this + 24));
    this = (void *)re::DynamicArray<unsigned long>::deinit((uint64_t)(v1 + 13));
    void *v1 = 0;
  }
  return this;
}

void re::internal::WorkerThread::init(re::internal::WorkerThread *this, re::FiberJobManager *a2, BOOL a3, int a4, re::AlignedAllocator *a5)
{
  *(void *)this = a2;
  unint64_t v8 = *((unsigned int *)a2 + 84);
  *((void *)this + 13) = a5;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 13, v8);
  ++*((_DWORD *)this + 32);
  atomic_store(1uLL, (unint64_t *)this + 24);
  atomic_store(1uLL, (unint64_t *)this + 32);
  uint64_t v9 = (*(uint64_t (**)(re::AlignedAllocator *, uint64_t, uint64_t))(*(void *)a5 + 32))(a5, 32, 8);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v9, (uint64_t)a5, 0x400uLL);
  *((void *)this + 40) = v9;
  *((_DWORD *)this + 96) = 0;
  std::mutex::lock((std::mutex *)((char *)this + 400));
  *((unsigned char *)this + 392) = 0;
  std::mutex::unlock((std::mutex *)((char *)this + 400));
  *((_DWORD *)this + 4) = a4;
  operator new();
}

uint64_t re::internal::WorkerThread::threadFunction(re::internal::WorkerThread *this)
{
  re::DynamicString::format((re::DynamicString *)"Job Service worker %d", (re::DynamicString *)&v8, *((unsigned int *)this + 4));
  if (v9) {
    uint64_t v2 = *(const char **)&v10[7];
  }
  else {
    uint64_t v2 = v10;
  }
  pthread_setname_np(v2);
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  uint64_t v3 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v3) {
    free(v3);
  }
  re::internal::AutoResetEvent::waitOne((re::internal::WorkerThread *)((char *)this + 392));
  *((_DWORD *)this + 20) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 21) = 1;
  *((void *)this + 11) = 0;
  unsigned int FreeFiberIndex = re::FiberJobManager::getFreeFiberIndex(*(re::FiberJobManager **)this);
  re::internal::WorkerThread::switchToCustomFiber(this, FreeFiberIndex);
  double v6 = re::internal::WorkerThread::postFiberSwitch(this, v5);
  uint64_t result = v8;
  if (v8)
  {
    if (v9) {
      return (*(uint64_t (**)(double))(*(void *)v8 + 40))(v6);
    }
  }
  return result;
}

uint64_t re::WorkStealingQueue<re::Job *>::deinit(uint64_t result)
{
  if (*(void *)(result + 128))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(uint64_t **)(result + 128);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::WorkStealingQueue<re::Job *>::CircularArray::deinit(*(uint64_t **)(result + 128));
      re::FixedArray<CoreIKTransform>::deinit(v2);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 40))(v3, v2);
      atomic_store(0, (unint64_t *)(v1 + 128));
    }
  }
  return result;
}

void re::internal::WorkerThread::switchToCustomFiber(re::internal::WorkerThread *this, unsigned int a2)
{
  unsigned int v4 = *((_DWORD *)this + 24);
  if (v4 == -1) {
    Fiber = (char *)this + 24;
  }
  else {
    Fiber = (char *)re::FiberJobManager::getFiber(*(re::FiberJobManager **)this, v4);
  }
  unint64_t v6 = re::FiberJobManager::getFiber(*(re::FiberJobManager **)this, a2);
  *((_DWORD *)this + 24) = a2;
  *((void *)Fiber + 1) = v6;
  jump_fcontext();
  void *v8 = v7;
  v8[1] = 0;
}

double re::internal::WorkerThread::postFiberSwitch(re::internal::WorkerThread *this, uint64_t a2)
{
  switch(*((_DWORD *)this + 21))
  {
    case 1:
    case 5:
      break;
    case 2:
      uint64_t v3 = *((unsigned int *)this + 20);
      unsigned int v4 = (atomic_ullong *)(*(void *)this + 384);
      uint64_t v5 = *(void *)(*(void *)this + 344);
      unint64_t explicit = atomic_load_explicit(v4, memory_order_acquire);
      uint64_t v7 = (_DWORD *)(v5 + (v3 << 7));
      _DWORD *v7 = explicit;
      unint64_t v8 = explicit;
      atomic_compare_exchange_strong(v4, &v8, explicit & 0xFFFFFFFF00000000 | v3);
      if (v8 != explicit)
      {
        unint64_t v9 = v8;
        do
        {
          _DWORD *v7 = v8;
          atomic_compare_exchange_strong(v4, &v9, v8 & 0xFFFFFFFF00000000 | v3);
          BOOL v10 = v9 == v8;
          unint64_t v8 = v9;
        }
        while (!v10);
      }
      break;
    case 3:
      unint64_t v11 = *((void *)this + 11);
      v13.n128_u32[0] = *((_DWORD *)this + 20);
      v13.n128_u64[1] = v11;
      re::DynamicArray<re::RigNodeConstraint>::add((re::internal::WorkerThread *)((char *)this + 104), &v13);
      break;
    case 4:
      re::FiberJobManager::addFiberToWaitList(*(os_unfair_lock_s **)this, *((_DWORD *)this + 20), *((void *)this + 11));
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown fiber state.", "!\"Unreachable code\"", "postFiberSwitch", 237);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233F32ABCLL);
  }
  *(void *)&double result = 0xFFFFFFFFLL;
  *((void *)this + 10) = 0xFFFFFFFFLL;
  *((void *)this + 11) = 0;
  return result;
}

unint64_t re::FiberJobManager::getFiber(re::FiberJobManager *this, unsigned int a2)
{
  if (*((void *)this + 42) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 43) + ((unint64_t)a2 << 7) + 64;
}

void re::internal::WorkerThread::switchToThreadFiber(re::internal::WorkerThread *this)
{
  unint64_t Fiber = re::FiberJobManager::getFiber(*(re::FiberJobManager **)this, *((_DWORD *)this + 24));
  *((_DWORD *)this + 24) = -1;
  *(void *)(Fiber + 8) = (char *)this + 24;
  jump_fcontext();
  void *v4 = v3;
  v4[1] = 0;
}

void re::internal::WorkerThread::runAsync(void *a1, uint64_t a2, unsigned int a3, unsigned int *a4, char a5)
{
  if (a4) {
    *a4 = a3;
  }
  if (a5)
  {
    if ((int)(a3 - 1) >= 0)
    {
      unint64_t v8 = (unint64_t)(a3 - 1) << 6;
      do
      {
        *(void *)(a2 + v8 + 8) = a4;
        uint64_t v14 = a2 + v8;
        re::WorkStealingQueue<re::Job *>::push(a1 + 24, &v14);
        v8 -= 64;
      }
      while (v8 != -64);
    }
  }
  else if (a3)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(a2 + 8) = a4;
      uint64_t v14 = a2;
      re::WorkStealingQueue<re::Job *>::push(a1 + 24, &v14);
      a2 += 64;
      --v9;
    }
    while (v9);
  }
  uint64_t v10 = *(void *)(*a1 + 72);
  if (v10)
  {
    unint64_t v11 = *(uint64_t **)(*a1 + 80);
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v13 + 392));
      v12 -= 8;
    }
    while (v12);
  }
}

uint64_t re::WorkStealingQueue<re::Job *>::push(void *a1, void *a2)
{
  unint64_t v4 = a1[8];
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  unint64_t v6 = (uint64_t *)a1[16];
  if (v4 - explicit > v6[1] - 1)
  {
    unint64_t v6 = (uint64_t *)re::WorkStealingQueue<re::Job *>::CircularArray::grow(v6, explicit, v4);
    atomic_store((unint64_t)v6, a1 + 16);
  }
  uint64_t result = re::WorkStealingQueue<re::Job *>::CircularArray::put((uint64_t)v6, v4, a2);
  __dmb(0xBu);
  a1[8] = v4 + 1;
  return result;
}

uint64_t re::internal::WorkerThread::getWaitingFiber(re::internal::WorkerThread *this, unsigned int *a2)
{
  uint64_t v2 = *((void *)this + 15);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  while (1)
  {
    if (*((void *)this + 15) <= v4)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v5 = *((void *)this + 17);
    if (!atomic_load_explicit(*(atomic_uint *volatile *)(v5 + v3 + 8), memory_order_acquire)) {
      break;
    }
    ++v4;
    v3 += 16;
    if (v2 == v4) {
      return 0;
    }
  }
  *a2 = *(_DWORD *)(v5 + v3);
  re::DynamicArray<re::BufferView>::removeStableAt((void *)this + 13, v4);
  return 2;
}

uint64_t re::internal::WorkerThread::getJob(atomic_ullong *this, re::Job **a2)
{
  if (re::WorkStealingQueue<re::Job *>::pop(this + 24, (uint64_t *)a2)) {
    return 2;
  }
  atomic_ullong v5 = *this;
  unsigned int v6 = *(_DWORD *)(*this + 72);
  if (!v6)
  {
    int v9 = 0;
    char v8 = 0;
LABEL_12:
    uint64_t result = re::WorkStealingQueue<re::Job *>::steal((atomic_ullong *)(v5 + 128), (uint64_t *)a2);
    if (result != 2) {
      return v8 & 1 | (v9 == 1) | (result == 1);
    }
    return result;
  }
  int v7 = 0;
  char v8 = 0;
  int v9 = 0;
  while (1)
  {
    WorkerThread = (atomic_ullong *)re::FiberJobManager::getWorkerThread((re::FiberJobManager *)*this, (v7 + *((_DWORD *)this + 96)) % v6);
    if (WorkerThread == this) {
      goto LABEL_9;
    }
    int v11 = re::WorkStealingQueue<re::Job *>::steal(WorkerThread + 24, (uint64_t *)a2);
    int v9 = v11;
    if (!v11) {
      goto LABEL_9;
    }
    if (v11 != 1) {
      break;
    }
    char v8 = 1;
LABEL_9:
    if (v6 == ++v7)
    {
      atomic_ullong v5 = *this;
      goto LABEL_12;
    }
  }
  if (v11 == 2)
  {
    *((_DWORD *)this + 96) = v7;
    return 2;
  }
  re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Unexpected work stealing result.", "!\"Unreachable code\"", "getJob", 434);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::WorkStealingQueue<re::Job *>::pop(atomic_ullong *a1, uint64_t *a2)
{
  unint64_t v3 = a1[8];
  unint64_t v4 = v3 - 1;
  uint64_t v5 = a1[16];
  a1[8] = v3 - 1;
  __dmb(0xBu);
  atomic_ullong v6 = *a1;
  if (*a1 > v3 - 1)
  {
    BOOL result = 0;
LABEL_5:
    a1[8] = v3;
    return result;
  }
  *a2 = re::WorkStealingQueue<re::Job *>::CircularArray::get(v5, v3 - 1);
  if (v6 == v4)
  {
    unint64_t v8 = v3 - 1;
    atomic_compare_exchange_strong(a1, &v8, v3);
    BOOL result = v8 == v4;
    goto LABEL_5;
  }
  return 1;
}

uint64_t re::FiberJobManager::getWorkerThread(re::FiberJobManager *this, unsigned int a2)
{
  if (*((void *)this + 9) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 10) + 8 * a2);
}

uint64_t re::WorkStealingQueue<re::Job *>::steal(atomic_ullong *a1, uint64_t *a2)
{
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  __dmb(0xBu);
  if (explicit >= atomic_load_explicit(a1 + 8, memory_order_acquire)) {
    return 0;
  }
  *a2 = re::WorkStealingQueue<re::Job *>::CircularArray::get(atomic_load_explicit(a1 + 16, memory_order_acquire), explicit);
  unint64_t v4 = explicit;
  atomic_compare_exchange_strong(a1, &v4, explicit + 1);
  if (v4 == explicit) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (re::internal::WorkerThread::*)(void),re::internal::WorkerThread*>>(uint64_t *a1)
{
  unint64_t v8 = a1;
  uint64_t v2 = std::__thread_local_data();
  unint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[2];
  uint64_t v5 = (void (*)(void *))a1[1];
  atomic_ullong v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (re::internal::WorkerThread::*)(void),re::internal::WorkerThread*>>::reset[abi:nn180100](&v8);
  return 0;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (re::internal::WorkerThread::*)(void),re::internal::WorkerThread*>>::reset[abi:nn180100](uint64_t **result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](v1, 0);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t *re::WorkStealingQueue<re::Job *>::CircularArray::deinit(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    BOOL result = (uint64_t *)re::FixedArray<CoreIKTransform>::deinit(result);
    unint64_t v3 = (uint64_t *)v2[3];
    if (v3)
    {
      re::WorkStealingQueue<re::Job *>::CircularArray::deinit(v2[3]);
      re::FixedArray<CoreIKTransform>::deinit(v3);
      BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 40))(v1, v3);
    }
    v2[3] = 0;
  }
  return result;
}

uint64_t re::WorkStealingQueue<re::Job *>::CircularArray::grow(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 2 * a1[1];
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 32))(*a1, 32, 8);
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v8, v6, v7);
  if (a2 < a3)
  {
    do
    {
      uint64_t v10 = re::WorkStealingQueue<re::Job *>::CircularArray::get((uint64_t)a1, a2);
      re::WorkStealingQueue<re::Job *>::CircularArray::put(v8, a2++, &v10);
    }
    while (a3 != a2);
  }
  *(void *)(v8 + 24) = a1;
  return v8;
}

uint64_t re::WorkStealingQueue<re::Job *>::CircularArray::put(uint64_t result, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  unint64_t v4 = (v3 - 1) & a2;
  if (v3 <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(void *)(*(void *)(result + 16) + 8 * v4) = *a3;
  return result;
}

uint64_t re::WorkStealingQueue<re::Job *>::CircularArray::get(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (v2 - 1) & a2;
  if (v2 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * v3);
}

void re::JobProfiler::~JobProfiler(re::JobProfiler *this)
{
}

void re::JobProfiler::deinit(re::JobProfiler *this)
{
  if (*(void *)this)
  {
    uint64_t v2 = *((void *)this + 9);
    if (v2)
    {
      unint64_t v3 = (int *)*((void *)this + 10);
      unint64_t v4 = &v3[12 * v2];
      do
      {
        int v36 = *v3;
        uint64_t v41 = 0;
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        uint64_t v37 = 0;
        int v40 = 0;
        if (*((void *)v3 + 1))
        {
          unint64_t v5 = *((void *)v3 + 3);
          uint64_t v37 = *((void *)v3 + 1);
          re::DynamicArray<re::internal::JobProfilerThreadData>::setCapacity(&v37, v5);
          ++v40;
          unint64_t v6 = *((void *)v3 + 3);
          if (v6 >= v39)
          {
            re::DynamicArray<re::internal::JobProfilerThreadData>::setCapacity(&v37, *((void *)v3 + 3));
            std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerThreadData *,re::internal::JobProfilerThreadData *,re::internal::JobProfilerThreadData *,0>(*((void *)v3 + 5), *((void *)v3 + 5) + 80 * v39, v41);
            if (v39 != v6)
            {
              uint64_t v9 = *((void *)v3 + 5) + 80 * v39;
              uint64_t v10 = (re::StringID *)(v41 + 80 * v39);
              uint64_t v11 = 80 * v6 - 80 * v39;
              do
              {
                uint64_t v12 = re::StringID::StringID(v10, (const StringID *)v9);
                long long v13 = *(_OWORD *)(v9 + 16);
                long long v14 = *(_OWORD *)(v9 + 32);
                long long v15 = *(_OWORD *)(v9 + 48);
                *(_OWORD *)((char *)v12 + 60) = *(_OWORD *)(v9 + 60);
                *((_OWORD *)v12 + 2) = v14;
                *((_OWORD *)v12 + 3) = v15;
                *((_OWORD *)v12 + 1) = v13;
                v9 += 80;
                uint64_t v10 = (re::StringID *)((char *)v12 + 80);
                v11 -= 80;
              }
              while (v11);
            }
          }
          else
          {
            std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerThreadData *,re::internal::JobProfilerThreadData *,re::internal::JobProfilerThreadData *,0>(*((void *)v3 + 5), *((void *)v3 + 5) + 80 * v6, v41);
            if (v6 != v39)
            {
              unint64_t v7 = (re::StringID *)(v41 + 80 * v6);
              uint64_t v8 = 80 * v39 - 80 * v6;
              do
              {
                re::StringID::destroyString(v7);
                unint64_t v7 = (re::StringID *)((char *)v7 + 80);
                v8 -= 80;
              }
              while (v8);
            }
          }
          unint64_t v39 = v6;
        }
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>::deinitValues((uint64_t)&v36);
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>::deinitValues((uint64_t)&v36);
        re::DynamicArray<re::internal::JobProfilerThreadData>::deinit((uint64_t)&v37);
        v3 += 12;
      }
      while (v3 != v4);
    }
    uint64_t v16 = *((void *)this + 15);
    if (v16)
    {
      uint64_t v17 = (int *)*((void *)this + 16);
      StringID v18 = &v17[12 * v16];
      do
      {
        int v36 = *v17;
        uint64_t v41 = 0;
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        uint64_t v37 = 0;
        int v40 = 0;
        if (*((void *)v17 + 1))
        {
          unint64_t v19 = *((void *)v17 + 3);
          uint64_t v37 = *((void *)v17 + 1);
          re::DynamicArray<re::internal::JobProfilerFiberData>::setCapacity(&v37, v19);
          ++v40;
          unint64_t v20 = *((void *)v17 + 3);
          if (v20 >= v39)
          {
            re::DynamicArray<re::internal::JobProfilerFiberData>::setCapacity(&v37, *((void *)v17 + 3));
            std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerFiberData *,re::internal::JobProfilerFiberData *,re::internal::JobProfilerFiberData *,0>(*((void *)v17 + 5), *((void *)v17 + 5) + 72 * v39, v41);
            if (v39 != v20)
            {
              uint64_t v23 = *((void *)v17 + 5) + 72 * v39;
              uint64_t v24 = (re::StringID *)(v41 + 72 * v39);
              uint64_t v25 = 72 * v20 - 72 * v39;
              do
              {
                uint64_t v26 = re::StringID::StringID(v24, (const StringID *)v23);
                long long v27 = *(_OWORD *)(v23 + 16);
                long long v28 = *(_OWORD *)(v23 + 32);
                long long v29 = *(_OWORD *)(v23 + 48);
                *((_DWORD *)v26 + 16) = *(_DWORD *)(v23 + 64);
                *((_OWORD *)v26 + 2) = v28;
                *((_OWORD *)v26 + 3) = v29;
                *((_OWORD *)v26 + 1) = v27;
                v23 += 72;
                uint64_t v24 = (re::StringID *)((char *)v26 + 72);
                v25 -= 72;
              }
              while (v25);
            }
          }
          else
          {
            std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerFiberData *,re::internal::JobProfilerFiberData *,re::internal::JobProfilerFiberData *,0>(*((void *)v17 + 5), *((void *)v17 + 5) + 72 * v20, v41);
            if (v20 != v39)
            {
              char v21 = (re::StringID *)(v41 + 72 * v20);
              uint64_t v22 = 72 * v39 - 72 * v20;
              do
              {
                re::StringID::destroyString(v21);
                char v21 = (re::StringID *)((char *)v21 + 72);
                v22 -= 72;
              }
              while (v22);
            }
          }
          unint64_t v39 = v20;
        }
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>::deinitValues((uint64_t)&v36);
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>::deinitValues((uint64_t)&v36);
        re::DynamicArray<re::internal::JobProfilerFiberData>::deinit((uint64_t)&v37);
        v17 += 12;
      }
      while (v17 != v18);
    }
    uint64_t v30 = *((void *)this + 18);
    if (v30)
    {
      uint64_t v31 = 48 * v30;
      uint64_t v32 = (uint64_t *)(*((void *)this + 19) + 8);
      do
      {
        int v36 = *((_DWORD *)v32 - 2);
        re::DynamicArray<re::internal::JobProfilerJobData>::DynamicArray((uint64_t)&v37, v32);
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>::deinitValues((uint64_t)&v36);
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>::deinitValues((uint64_t)&v36);
        re::DynamicArray<re::internal::JobProfilerJobData>::deinit((uint64_t)&v37);
        v32 += 6;
        v31 -= 48;
      }
      while (v31);
    }
    uint64_t v33 = *((void *)this + 12);
    if (v33)
    {
      uint64_t v34 = 48 * v33;
      uint64_t v35 = (uint64_t *)(*((void *)this + 13) + 8);
      do
      {
        int v36 = *((_DWORD *)v35 - 2);
        re::DynamicArray<re::internal::JobProfilerJobData>::DynamicArray((uint64_t)&v37, v35);
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>::deinitValues((uint64_t)&v36);
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>::deinitValues((uint64_t)&v36);
        re::DynamicArray<re::internal::JobProfilerJobData>::deinit((uint64_t)&v37);
        v35 += 6;
        v34 -= 48;
      }
      while (v34);
    }
    re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8);
    re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>>::deinit((void *)this + 14);
    re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>>::deinit((void *)this + 17);
    re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>>::deinit((void *)this + 11);
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20);
    *(void *)this = 0;
  }
}

void re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>::deinitValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = v2 + 80 * v1;
    do
    {
      re::StringID::StringID((re::StringID *)v7, (const StringID *)v2);
      long long v4 = *(_OWORD *)(v2 + 16);
      long long v5 = *(_OWORD *)(v2 + 32);
      long long v6 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v2 + 60);
      v7[2] = v5;
      v8[0] = v6;
      v7[1] = v4;
      re::StringID::destroyString((re::StringID *)v7);
      v2 += 80;
    }
    while (v2 != v3);
  }
}

void re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>::deinitValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = v2 + 72 * v1;
    do
    {
      re::StringID::StringID((re::StringID *)v7, (const StringID *)v2);
      long long v4 = *(_OWORD *)(v2 + 16);
      long long v5 = *(_OWORD *)(v2 + 32);
      long long v6 = *(_OWORD *)(v2 + 48);
      int v12 = *(_DWORD *)(v2 + 64);
      long long v10 = v5;
      long long v11 = v6;
      uint64_t v8 = v4;
      uint64_t v9 = 0;
      re::StringID::destroyString((re::StringID *)v7);
      v2 += 72;
    }
    while (v2 != v3);
  }
}

void re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>::deinitValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = v2 + 344 * v1;
    do
    {
      memcpy(__dst, (const void *)v2, sizeof(__dst));
      long long v4 = re::StringID::StringID((re::StringID *)v9, (const StringID *)(v2 + 272));
      long long v5 = *(_OWORD *)(v2 + 288);
      long long v6 = *(_OWORD *)(v2 + 304);
      long long v7 = *(_OWORD *)(v2 + 320);
      uint64_t v13 = *(void *)(v2 + 336);
      uint64_t v11 = *((void *)&v6 + 1);
      long long v12 = v7;
      v9[1] = v5;
      uint64_t v10 = 0;
      re::StringID::destroyString(v4);
      v2 += 344;
    }
    while (v2 != v3);
  }
}

void *re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = v4 + 48 * v2;
      do
      {
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>::deinitValues(v4);
        re::DynamicArray<re::internal::JobProfilerThreadData>::deinit(v4 + 8);
        v4 += 48;
      }
      while (v4 != v5);
      BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = v4 + 48 * v2;
      do
      {
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>::deinitValues(v4);
        re::DynamicArray<re::internal::JobProfilerFiberData>::deinit(v4 + 8);
        v4 += 48;
      }
      while (v4 != v5);
      BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = v4 + 48 * v2;
      do
      {
        re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>::deinitValues(v4);
        re::DynamicArray<re::internal::JobProfilerJobData>::deinit(v4 + 8);
        v4 += 48;
      }
      while (v4 != v5);
      BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::DynamicArray<re::internal::JobProfilerThreadData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::internal::JobProfilerThreadData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 80 * v9;
        uint64_t v11 = v7;
        do
        {
          re::StringID::StringID((re::StringID *)v11, (const StringID *)v8);
          long long v12 = *(_OWORD *)(v8 + 16);
          long long v13 = *(_OWORD *)(v8 + 32);
          long long v14 = *(_OWORD *)(v8 + 48);
          *(_OWORD *)((char *)v11 + 60) = *(_OWORD *)(v8 + 60);
          void v11[2] = v13;
          v11[3] = v14;
          v11[1] = v12;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 80;
          v11 += 5;
          v10 -= 80;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerThreadData *,re::internal::JobProfilerThreadData *,re::internal::JobProfilerThreadData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v5);
      __n128 result = *(__n128 *)(v5 + 16);
      long long v7 = *(_OWORD *)(v5 + 32);
      long long v8 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a3 + 60) = *(_OWORD *)(v5 + 60);
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 4re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = v8;
      *(__n128 *)(a3 + 16) = result;
      v5 += 80;
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

void *re::DynamicArray<re::internal::JobProfilerJobData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::internal::JobProfilerJobData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x158uLL))
        {
          uint64_t v2 = 344 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 344 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 344, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 344 * v9;
        uint64_t v11 = v7;
        do
        {
          memcpy(v11, (const void *)v8, 0x110uLL);
          re::StringID::StringID((re::StringID *)(v11 + 34), (const StringID *)(v8 + 272));
          long long v12 = *(_OWORD *)(v8 + 288);
          long long v13 = *(_OWORD *)(v8 + 304);
          long long v14 = *(_OWORD *)(v8 + 320);
          v11[42] = *(void *)(v8 + 336);
          *((_OWORD *)v11 + 19) = v13;
          *((_OWORD *)v11 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v14;
          *((_OWORD *)v11 + 1re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = v12;
          re::StringID::destroyString((re::StringID *)(v8 + 272));
          v8 += 344;
          v11 += 43;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerJobData *,re::internal::JobProfilerJobData *,re::internal::JobProfilerJobData *,0>(__n128 *__src, __n128 *a2, __n128 *__dst)
{
  if (__src != a2)
  {
    uint64_t v5 = __src;
    do
    {
      memcpy(__dst, v5, 0x110uLL);
      re::StringID::operator=(__dst[17].n128_u64, (uint64_t *)&v5[17]);
      __n128 result = v5[18];
      __n128 v7 = v5[19];
      __n128 v8 = v5[20];
      __dst[21].n128_u64[0] = v5[21].n128_u64[0];
      __dst[19] = v7;
      __dst[20] = v8;
      __dst[18] = result;
      uint64_t v5 = (__n128 *)((char *)v5 + 344);
      __n128 __dst = (__n128 *)((char *)__dst + 344);
    }
    while (v5 != a2);
  }
  return result;
}

void *re::DynamicArray<re::internal::JobProfilerFiberData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::internal::JobProfilerFiberData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            __n128 v7 = (re::StringID *)result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      __n128 v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 72 * v9;
        uint64_t v11 = v7;
        do
        {
          re::StringID::StringID(v11, (const StringID *)v8);
          long long v12 = *(_OWORD *)(v8 + 16);
          long long v13 = *(_OWORD *)(v8 + 32);
          long long v14 = *(_OWORD *)(v8 + 48);
          *((_DWORD *)v11 + 16) = *(_DWORD *)(v8 + 64);
          *((_OWORD *)v11 + 2) = v13;
          *((_OWORD *)v11 + 3) = v14;
          *((_OWORD *)v11 + 1) = v12;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 72;
          uint64_t v11 = (re::StringID *)((char *)v11 + 72);
          v10 -= 72;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerFiberData *,re::internal::JobProfilerFiberData *,re::internal::JobProfilerFiberData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v5);
      __n128 result = *(__n128 *)(v5 + 16);
      long long v7 = *(_OWORD *)(v5 + 32);
      long long v8 = *(_OWORD *)(v5 + 48);
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(v5 + 64);
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 4re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = v8;
      *(__n128 *)(a3 + 16) = result;
      v5 += 72;
      a3 += 72;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::internal::JobProfilerJobData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::internal::JobProfilerJobData>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    if (v6 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<re::internal::JobProfilerJobData>::setCapacity((void *)a1, a2[2]);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerJobData *,re::internal::JobProfilerJobData *,re::internal::JobProfilerJobData *,0>((__n128 *)a2[4], (__n128 *)(a2[4] + 344 * *(void *)(a1 + 16)), *(__n128 **)(a1 + 32));
      uint64_t v10 = *(void *)(a1 + 16);
      if (v10 != v6)
      {
        uint64_t v11 = a2[4];
        uint64_t v12 = v11 + 344 * v6;
        uint64_t v13 = 344 * v10;
        uint64_t v14 = v11 + v13;
        uint64_t v15 = *(void *)(a1 + 32) + v13;
        do
        {
          memcpy((void *)v15, (const void *)v14, 0x110uLL);
          re::StringID::StringID((re::StringID *)(v15 + 272), (const StringID *)(v14 + 272));
          long long v16 = *(_OWORD *)(v14 + 288);
          long long v17 = *(_OWORD *)(v14 + 304);
          long long v18 = *(_OWORD *)(v14 + 320);
          *(void *)(v15 + 336) = *(void *)(v14 + 336);
          *(_OWORD *)(v15 + 304) = v17;
          *(_OWORD *)(v15 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v18;
          *(_OWORD *)(v15 + 28re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = v16;
          v14 += 344;
          v15 += 344;
        }
        while (v14 != v12);
      }
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::internal::JobProfilerJobData *,re::internal::JobProfilerJobData *,re::internal::JobProfilerJobData *,0>((__n128 *)a2[4], (__n128 *)(a2[4] + 344 * v6), *(__n128 **)(a1 + 32));
      uint64_t v7 = *(void *)(a1 + 16);
      if (v6 != v7)
      {
        uint64_t v8 = -344 * v6 + 344 * v7;
        uint64_t v9 = (re::StringID *)(344 * v6 + *(void *)(a1 + 32) + 272);
        do
        {
          re::StringID::destroyString(v9);
          uint64_t v9 = (re::StringID *)((char *)v9 + 344);
          v8 -= 344;
        }
        while (v8);
      }
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t re::DynamicArray<re::internal::JobProfilerThreadData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 80 * v4;
        do
        {
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 80);
          v5 -= 80;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::internal::JobProfilerJobData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 344 * v4;
        unint64_t v6 = (re::StringID *)(v3 + 272);
        do
        {
          re::StringID::destroyString(v6);
          unint64_t v6 = (re::StringID *)((char *)v6 + 344);
          v5 -= 344;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::internal::JobProfilerFiberData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 72 * v4;
        do
        {
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 72);
          v5 -= 72;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

unint64_t re::internal::Fiber::init(re::internal::Fiber *this, void (*a2)(void *), void *a3, uint64_t a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F220, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a4;
    int v11 = __cxa_guard_acquire(&qword_26AF9F220);
    a4 = v12;
    if (v11)
    {
      _MergedGlobals_494 = getpagesize();
      __cxa_guard_release(&qword_26AF9F220);
      a4 = v12;
    }
  }
  uint64_t v7 = _MergedGlobals_494;
  size_t v8 = (a4 + _MergedGlobals_494 - 1) & -_MergedGlobals_494;
  *((void *)this + 6) = v8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, (v7 + 7) & 0xFFFFFFFFFFFFFFF8, v8, 0xC75C8B65uLL);
  uint64_t v9 = memptr;
  *((void *)this + 5) = memptr;
  *(void *)this = result;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  return result;
}

void anonymous namespace'::fiberEntryPoint(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a2 = a1;
  a2[1] = 0;
  (*(void (**)(void))(v2 + 24))(*(void *)(v2 + 32));
  re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Fiber ended without transferring control back to another fiber.", "!\"Unreachable code\"", "fiberEntryPoint", 169);
  _os_crash();
  __break(1u);
}

void DispatchJobManager::~DispatchJobManager(DispatchJobManager *this)
{
}

void DispatchJobManager::currentWorkerThreadIndex(DispatchJobManager *this, uint64_t a2)
{
}

void DispatchJobManager::run(dispatch_queue_t *this, re::Job *a2)
{
  DispatchJobManager::runAsync((uint64_t)this, (uint64_t)a2, 1u, &v3);
  while (atomic_load_explicit((atomic_uint *volatile)&v3, memory_order_acquire))
    dispatch_sync(this[1], &__block_literal_global_44);
}

void DispatchJobManager::runAsync(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4 = a2;
  if (a4)
  {
    *a4 = a3;
    if (!a3) {
      return;
    }
    uint64_t v6 = a3;
    uint64_t v7 = (unsigned int **)(a2 + 8);
    do
    {
      re::StringID *v7 = a4;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  if (a3)
  {
    uint64_t v8 = MEMORY[0x263EF8330];
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(NSObject **)(a1 + 8);
      block[0] = v8;
      block[1] = 0x40000000;
      block[2] = ___ZN18DispatchJobManager8runAsyncEPN2re3JobEjPNSt3__16atomicIiEEb_block_invoke;
      block[3] = &__block_descriptor_tmp_33;
      block[4] = v4;
      dispatch_async(v10, block);
      v4 += 64;
      --v9;
    }
    while (v9);
  }
}

void DispatchJobManager::waitFor(uint64_t a1, atomic_uint *a2)
{
  while (atomic_load_explicit(a2, memory_order_acquire))
    dispatch_sync(*(dispatch_queue_t *)(a1 + 8), &__block_literal_global_44);
}

uint64_t ___ZN18DispatchJobManager8runAsyncEPN2re3JobEjPNSt3__16atomicIiEEb_block_invoke(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  unsigned int v3 = *(atomic_uint **)(*(void *)(a1 + 32) + 8);
  if (v3) {
    atomic_fetch_add_explicit(v3, 0xFFFFFFFF, memory_order_release);
  }
  return result;
}

uint64_t DispatchJobManager::numberOfThreads(DispatchJobManager *this)
{
  return 4;
}

uint64_t DispatchJobManager::profiler(DispatchJobManager *this)
{
  return 0;
}

uint64_t DispatchJobManager::highPriorityAndQOSOptout(DispatchJobManager *this)
{
  return 0;
}

void re::internal::setThreadPriority(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  int v2 = (int)a2;
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(_DWORD *)v5.__opaque = 0;
  v5.sched_priority = (int)a2;
  unsigned int v3 = (re *)pthread_setschedparam(this, 2, &v5);
  if (v3 == -1)
  {
    uint64_t v4 = *re::foundationThreadingLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v7 = v2;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Failed to change thread to priority to %d", buf, 8u);
    }
  }
}

re::BackgroundTaskManager *re::BackgroundTaskManager::BackgroundTaskManager(re::BackgroundTaskManager *this)
{
  *(void *)this = &unk_26E721108;
  *((_DWORD *)this + 2) = 0;
  int v2 = (_anonymous_namespace_ *)re::DataArray<re::BackgroundTask>::DataArray((uint64_t)this + 16, 100);
  *((void *)this + re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerFiberData>>::deinit((void *)this + 14) = 0;
  *((void *)this + re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerJobData>>::deinit((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 10) = 0;
  unsigned int v3 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)this + 10, 0x64uLL);
  ++*((_DWORD *)this + 26);
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(_OWORD *)((char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 3re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)this + 16, 0x64uLL);
  ++*((_DWORD *)this + 38);
  *((void *)this + 25) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 4re::FixedArray<re::internal::JobProfilerDataBuffer<re::internal::JobProfilerThreadData>>::deinit((void *)this + 8) = 0;
  *((void *)this + 21) = 0;
  re::DynamicArray<float *>::setCapacity((void *)this + 21, 0x64uLL);
  ++*((_DWORD *)this + 48);
  return this;
}