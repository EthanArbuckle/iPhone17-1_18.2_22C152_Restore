BOOL re::anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0::operator()(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(void *)(a1 + 8);
  if (v5 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    v7 = a1 + 24;
  }
  else {
    v7 = *(void *)(a1 + 32);
  }
  if (*(void *)(v7 + 536 * a2 + 8) <= (unint64_t)a3) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(v7 + 536 * a2 + 16)) {
    v8 = v7 + 536 * a2 + 24;
  }
  else {
    v8 = *(void *)(v7 + 536 * a2 + 32);
  }
  if (v5 <= a4) {
    goto LABEL_20;
  }
  if (v6) {
    v9 = a1 + 24;
  }
  else {
    v9 = *(void *)(a1 + 32);
  }
  if (*(void *)(v9 + 536 * a4 + 8) <= (unint64_t)a5)
  {
LABEL_21:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(void *)(v8 + 8 * a3);
  if (*(unsigned char *)(v9 + 536 * a4 + 16)) {
    v11 = v9 + 536 * a4 + 24;
  }
  else {
    v11 = *(void *)(v9 + 536 * a4 + 32);
  }
  return v10 < *(void *)(v11 + 8 * a5);
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::anonymous namespace'::PartInstance*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (v8)
  {
    if (v9)
    {
      long long v34 = *(_OWORD *)(a1 + 32);
      long long v38 = *(_OWORD *)(a1 + 48);
      long long v42 = *(_OWORD *)(a1 + 64);
      __n128 v26 = *(__n128 *)a1;
      long long v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      long long v11 = *(_OWORD *)(a3 + 64);
      long long v13 = *(_OWORD *)(a3 + 16);
      long long v12 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = v11;
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = v12;
    }
    else
    {
      long long v37 = *(_OWORD *)(a1 + 32);
      long long v41 = *(_OWORD *)(a1 + 48);
      long long v45 = *(_OWORD *)(a1 + 64);
      __n128 v29 = *(__n128 *)a1;
      long long v33 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 64);
      long long v22 = *(_OWORD *)(a2 + 16);
      long long v21 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v20;
      *(_OWORD *)(a1 + 16) = v22;
      *(_OWORD *)(a1 + 32) = v21;
      *(_OWORD *)(a2 + 48) = v41;
      *(_OWORD *)(a2 + 64) = v45;
      *(__n128 *)a2 = v29;
      *(_OWORD *)(a2 + 16) = v33;
      *(_OWORD *)(a2 + 32) = v37;
      long long v34 = *(_OWORD *)(a2 + 32);
      long long v38 = *(_OWORD *)(a2 + 48);
      long long v42 = *(_OWORD *)(a2 + 64);
      __n128 v26 = *(__n128 *)a2;
      long long v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v23 = *(_OWORD *)(a3 + 64);
      long long v25 = *(_OWORD *)(a3 + 16);
      long long v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v23;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a2 + 32) = v24;
    }
    *(_OWORD *)(a3 + 48) = v38;
    *(_OWORD *)(a3 + 64) = v42;
    __n128 result = v26;
    *(__n128 *)a3 = v26;
    *(_OWORD *)(a3 + 16) = v30;
    *(_OWORD *)(a3 + 32) = v34;
  }
  else if (v9)
  {
    long long v35 = *(_OWORD *)(a2 + 32);
    long long v39 = *(_OWORD *)(a2 + 48);
    long long v43 = *(_OWORD *)(a2 + 64);
    __n128 v27 = *(__n128 *)a2;
    long long v31 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v14 = *(_OWORD *)(a3 + 64);
    long long v16 = *(_OWORD *)(a3 + 16);
    long long v15 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v14;
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)(a3 + 48) = v39;
    *(_OWORD *)(a3 + 64) = v43;
    *(__n128 *)a3 = v27;
    *(_OWORD *)(a3 + 16) = v31;
    *(_OWORD *)(a3 + 32) = v35;
    {
      long long v36 = *(_OWORD *)(a1 + 32);
      long long v40 = *(_OWORD *)(a1 + 48);
      long long v44 = *(_OWORD *)(a1 + 64);
      __n128 v28 = *(__n128 *)a1;
      long long v32 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 64);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v18 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v17;
      *(_OWORD *)(a1 + 16) = v19;
      *(_OWORD *)(a1 + 32) = v18;
      *(_OWORD *)(a2 + 48) = v40;
      *(_OWORD *)(a2 + 64) = v44;
      __n128 result = v28;
      *(__n128 *)a2 = v28;
      *(_OWORD *)(a2 + 16) = v32;
      *(_OWORD *)(a2 + 32) = v36;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::anonymous namespace'::PartInstance*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v8 = (_OWORD *)(a2 - 80);
      long long v50 = *(_OWORD *)(a1 + 32);
      long long v56 = *(_OWORD *)(a1 + 48);
      long long v62 = *(_OWORD *)(a1 + 64);
      long long v38 = *(_OWORD *)a1;
      long long v44 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *v8;
      long long v9 = v8[4];
      long long v11 = v8[1];
      long long v10 = v8[2];
      *(_OWORD *)(a1 + 48) = v8[3];
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
      v8[3] = v56;
      v8[4] = v62;
      BOOL result = 1;
      *BOOL v8 = v38;
      v8[1] = v44;
      v8[2] = v50;
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      long long v23 = (long long *)(a1 + 80);
      long long v24 = (long long *)(a1 + 160);
      long long v25 = (long long *)(a1 + 240);
      unsigned int v26 = *(_DWORD *)(a2 - 80);
      unsigned int v27 = *(_DWORD *)(a2 - 76);
      __n128 v28 = (long long *)(a2 - 80);
      long long v52 = *(_OWORD *)(a1 + 272);
      long long v58 = *(_OWORD *)(a1 + 288);
      long long v64 = *(_OWORD *)(a1 + 304);
      long long v40 = *v25;
      long long v46 = *(_OWORD *)(a1 + 256);
      *long long v25 = *v28;
      long long v29 = v28[4];
      long long v31 = v28[1];
      long long v30 = v28[2];
      *(_OWORD *)(a1 + 288) = v28[3];
      *(_OWORD *)(a1 + 304) = v29;
      *(_OWORD *)(a1 + 256) = v31;
      *(_OWORD *)(a1 + 272) = v30;
      v28[3] = v58;
      v28[4] = v64;
      *__n128 v28 = v40;
      v28[1] = v46;
      v28[2] = v52;
      long long v53 = *(_OWORD *)(a1 + 192);
      long long v59 = *(_OWORD *)(a1 + 208);
      long long v65 = *(_OWORD *)(a1 + 224);
      long long v41 = *v24;
      long long v47 = *(_OWORD *)(a1 + 176);
      long long v32 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v32;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 304);
      long long v33 = *(_OWORD *)(a1 + 256);
      *long long v24 = *v25;
      *(_OWORD *)(a1 + 176) = v33;
      *(_OWORD *)(a1 + 288) = v59;
      *(_OWORD *)(a1 + 304) = v65;
      *(_OWORD *)(a1 + 256) = v47;
      *(_OWORD *)(a1 + 272) = v53;
      *long long v25 = v41;
      long long v54 = *(_OWORD *)(a1 + 112);
      long long v60 = *(_OWORD *)(a1 + 128);
      long long v66 = *(_OWORD *)(a1 + 144);
      long long v42 = *v23;
      long long v48 = *(_OWORD *)(a1 + 96);
      long long v34 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v34;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 224);
      long long v35 = *(_OWORD *)(a1 + 176);
      *long long v23 = *v24;
      *(_OWORD *)(a1 + 96) = v35;
      *(_OWORD *)(a1 + 208) = v60;
      *(_OWORD *)(a1 + 224) = v66;
      *(_OWORD *)(a1 + 176) = v48;
      *(_OWORD *)(a1 + 192) = v54;
      *long long v24 = v42;
      long long v55 = *(_OWORD *)(a1 + 32);
      long long v61 = *(_OWORD *)(a1 + 48);
      long long v67 = *(_OWORD *)(a1 + 64);
      long long v43 = *(_OWORD *)a1;
      long long v49 = *(_OWORD *)(a1 + 16);
      long long v36 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v36;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 144);
      long long v37 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v37;
      *(_OWORD *)(a1 + 128) = v61;
      *(_OWORD *)(a1 + 144) = v67;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v55;
      BOOL result = 1;
      *long long v23 = v43;
      return result;
    default:
      long long v12 = (unsigned int *)(a1 + 160);
      uint64_t v13 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    {
      unsigned int v16 = *(_DWORD *)v13;
      unsigned int v17 = *(_DWORD *)(v13 + 4);
      long long v51 = *(_OWORD *)(v13 + 40);
      long long v57 = *(_OWORD *)(v13 + 56);
      uint64_t v63 = *(void *)(v13 + 72);
      uint64_t v18 = v14;
      long long v39 = *(_OWORD *)(v13 + 8);
      long long v45 = *(_OWORD *)(v13 + 24);
      while (1)
      {
        uint64_t v19 = a1 + v18;
        long long v20 = *(_OWORD *)(a1 + v18 + 208);
        *(_OWORD *)(v19 + 272) = *(_OWORD *)(a1 + v18 + 192);
        *(_OWORD *)(v19 + 288) = v20;
        *(_OWORD *)(v19 + 304) = *(_OWORD *)(a1 + v18 + 224);
        long long v21 = *(_OWORD *)(a1 + v18 + 176);
        *(_OWORD *)(v19 + 240) = *(_OWORD *)(a1 + v18 + 160);
        *(_OWORD *)(v19 + 256) = v21;
        if (v18 == -160) {
          break;
        }
        v18 -= 80;
        {
          uint64_t v22 = a1 + v18 + 240;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v22 = v16;
      *(_DWORD *)(v22 + 4) = v17;
      *(_OWORD *)(v22 + 24) = v45;
      *(_OWORD *)(v22 + 40) = v51;
      *(_OWORD *)(v22 + 56) = v57;
      *(void *)(v22 + 72) = v63;
      ++v15;
      *(_OWORD *)(v22 + 8) = v39;
      if (v15 == 8) {
        return v13 + 80 == a2;
      }
    }
    long long v12 = (unsigned int *)v13;
    v14 += 80;
    v13 += 80;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::combineParts(re::MeshAssetModel &,re::MeshAssetData const&,re::DynamicOverflowArray<re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>,64ul> &,re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul> const&,unsigned int)::$_0 &,re::anonymous namespace'::PartInstance*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  {
    long long v26 = *(_OWORD *)(a3 + 32);
    long long v29 = *(_OWORD *)(a3 + 48);
    long long v32 = *(_OWORD *)(a3 + 64);
    long long v20 = *(_OWORD *)a3;
    long long v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v11 = *(_OWORD *)(a4 + 64);
    long long v13 = *(_OWORD *)(a4 + 16);
    long long v12 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v11;
    *(_OWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a4 + 48) = v29;
    *(_OWORD *)(a4 + 64) = v32;
    *(_OWORD *)a4 = v20;
    *(_OWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 32) = v26;
    {
      long long v27 = *(_OWORD *)(a2 + 32);
      long long v30 = *(_OWORD *)(a2 + 48);
      long long v33 = *(_OWORD *)(a2 + 64);
      long long v21 = *(_OWORD *)a2;
      long long v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v14 = *(_OWORD *)(a3 + 64);
      long long v16 = *(_OWORD *)(a3 + 16);
      long long v15 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v15;
      *(_OWORD *)(a3 + 48) = v30;
      *(_OWORD *)(a3 + 64) = v33;
      *(_OWORD *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v24;
      *(_OWORD *)(a3 + 32) = v27;
      {
        long long v28 = *(_OWORD *)(a1 + 32);
        long long v31 = *(_OWORD *)(a1 + 48);
        long long v34 = *(_OWORD *)(a1 + 64);
        __n128 v22 = *(__n128 *)a1;
        long long v25 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v17 = *(_OWORD *)(a2 + 64);
        long long v19 = *(_OWORD *)(a2 + 16);
        long long v18 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v17;
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v18;
        *(_OWORD *)(a2 + 48) = v31;
        *(_OWORD *)(a2 + 64) = v34;
        __n128 result = v22;
        *(__n128 *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v28;
      }
    }
  }
  return result;
}

void *re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(void *result, unint64_t a2)
{
  v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    __n128 result = (void *)re::DynamicOverflowArray<unsigned long,256ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 256;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 0x100 || (v7 & 1) == 0))
    {
      if (a2 < 0x101)
      {
        long long v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          long long v16 = v4 + 3;
        }
        else {
          long long v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        long long v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          long long v12 = v10;
          if (v4[2]) {
            long long v13 = v4 + 3;
          }
          else {
            long long v13 = (const void *)v4[4];
          }
          __n128 result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      __n128 result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

unsigned char *re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(unsigned char *a1)
{
  if (*a1) {
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)(a1 + 8));
  }
  else {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  }
  return a1;
}

void std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26E6CDDF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6CDDF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  re::makeMeshPayloadWithMeshAsset((re *)(v1 + 8), *(Device ***)(a1 + 16), *(void *)(a1 + 24), &v5);
  uint64_t v2 = (void **)(v1 + 288);
  if ((REMultiBufferMeshPayload **)(v1 + 288) != &v5)
  {
    v3 = v5;
    uint64_t v5 = 0;
    v4 = *v2;
    *uint64_t v2 = v3;
  }
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E6CDE70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6CDE70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  re::makeMeshCollectionWithMeshPayload((id *)(v1 + 288), (id *)(v1 + 296), (uint64_t)v3);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v1 + 248, (uint64_t)v3);
  return re::DynamicArray<re::MeshModel>::deinit((uint64_t)v3);
}

uint64_t std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1,std::allocator<re::MeshAsset::createRuntimeData(re::mtl::Device const&,re::MeshPayloadStorageMode)::$_1>,void ()(void)>::target_type()
{
}

uint64_t re::FixedArray<re::AABB>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)__n128 result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = result;
  __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 16);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    __n128 result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    int32x4_t v7 = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v8 = 0x7F0000007FLL;
    *((void *)&v8 + 1) = 0x7F0000007FLL;
    do
    {
      *(int32x4_t *)__n128 result = v7;
      *(_OWORD *)(result + 16) = v8;
      result += 32;
      --v6;
    }
    while (v6);
  }
  *(void *)&long long v9 = 0x7F0000007FLL;
  *((void *)&v9 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)__n128 result = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(result + 16) = v9;
  return result;
}

void re::AssetHandle::mutateAssetCommon(re::AssetHandle *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (!*(unsigned char *)(v2 + 257))
  {
    uint64_t v3 = *(re **)(v2 + 24);
    if (v3) {
      re::AssetManager::deviceAssetPath((uint64_t)v3, (uint64_t)this, 0, 13, v7);
    }
    else {
      v7[0] = 0;
    }
    uint64_t v4 = *re::assetsLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = re::AssetHandle::assetInfo(this);
      if (v5[17]) {
        unint64_t v6 = (char *)v5[18];
      }
      else {
        unint64_t v6 = (char *)v5 + 137;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v11 = v6;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Trying to mutate, an immutable asset: %s. This asset needs to be created using mutable asset API instead.", buf, 0xCu);
    }
    if (v7[0] && v8 && (v9 & 1) != 0) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    uint64_t v2 = *((void *)this + 1);
  }
  if (!*(unsigned char *)(v2 + 256) && (int)[(id)(*(void *)(v2 + 712) + 8) retainCount] >= 2) {
    re::AssetHandle::internalCloneAssetFromSharedAsset(this);
  }
}

uint64_t re::AssetHandle::loadedAsset<re::MeshAsset>(re::MeshAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  re::MeshAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::MeshAsset::assetType(void)::type, 1);
}

uint64_t re::DynamicArray<re::AssetHandle>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::AssetHandle>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AssetHandle>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t *re::DynamicArray<re::AssetHandle>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::AssetHandle>::setCapacity(a1, *(void *)(a2 + 16));
    __n128 result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 24 * a1[2]), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 3 * v9;
      uint64_t v11 = (const re::AssetHandle *)(*(void *)(a2 + 32) + 8 * v10);
      __n128 result = (uint64_t *)(a1[4] + 8 * v10);
      uint64_t v12 = 24 * v4 - 8 * v10;
      do
      {
        long long v13 = re::AssetHandle::AssetHandle((re::AssetHandle *)result, v11);
        uint64_t v11 = (const re::AssetHandle *)((char *)v11 + 24);
        __n128 result = (uint64_t *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    __n128 result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 24 * v4), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      __n128 result = (uint64_t *)(a1[4] + 24 * v4);
      uint64_t v7 = 24 * v6 - 24 * v4;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)result);
        __n128 result = (uint64_t *)(v8 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::AssetHandle::operator=(a3, v4);
      v4 += 3;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26E6CDEF0;
  return result;
}

void std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6CDEF0;
}

re *std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::MeshAsset>((re *)"operator()", 1263, *a2);
}

uint64_t std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::MeshAssetLoader::serializableAsset(void *)::$_0,std::allocator<re::MeshAssetLoader::serializableAsset(void *)::$_0>,void ()(void *)>::target_type()
{
}

void re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_212, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

unsigned char *re::Result<re::MeshAssetModel,re::DetailedError>::~Result(unsigned char *a1)
{
  if (*a1)
  {
    re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 488));
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)(a1 + 448));
    re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit((uint64_t)(a1 + 408));
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)(a1 + 368));
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit((uint64_t)(a1 + 328));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 288));
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)(a1 + 248));
    re::DynamicArray<re::MeshAssetPart>::deinit((uint64_t)(a1 + 208));
    re::DynamicArray<re::MeshAssetSkinningData>::deinit((uint64_t)(a1 + 168));
    re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)(a1 + 128));
    re::StringID::destroyString((re::StringID *)(a1 + 16));
  }
  else
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  }
  return a1;
}

void re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)__n128 v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DataArrayHandle<re::MeshModel>,unsigned int,re::Hash<re::DataArrayHandle<re::MeshModel>>,re::EqualTo<re::DataArrayHandle<re::MeshModel>>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(void *)v13;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *(_DWORD *)(v13 + 8);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

uint64_t re::Result<re::MeshAssetData,re::DetailedError>::Result(uint64_t result, uint64_t a2)
{
  *(unsigned char *)__n128 result = 1;
  *(void *)(result + 40) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(result + 8) = *(void *)a2;
  *(void *)(result + 16) = v2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(result + 24);
  *(void *)(result + 24) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v3;
  uint64_t v4 = *(void *)(result + 40);
  *(void *)(result + 40) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 32);
  *(void *)(result + 80) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(result + 48) = *(void *)(a2 + 40);
  *(void *)(result + 56) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(result + 64);
  *(void *)(result + 64) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v6;
  uint64_t v7 = *(void *)(result + 80);
  *(void *)(result + 80) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 72);
  *(void *)(result + 120) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 88) = 0;
  *(_DWORD *)(result + 112) = 0;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(result + 88) = *(void *)(a2 + 80);
  *(void *)(result + 96) = v8;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v9 = *(void *)(result + 104);
  *(void *)(result + 104) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v9;
  uint64_t v10 = *(void *)(result + 120);
  *(void *)(result + 120) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 112);
  *(void *)(result + 160) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(void *)(result + 128) = 0;
  *(_DWORD *)(result + 152) = 0;
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(result + 128) = *(void *)(a2 + 120);
  *(void *)(result + 136) = v11;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v12 = *(void *)(result + 144);
  *(void *)(result + 144) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = v12;
  uint64_t v13 = *(void *)(result + 160);
  *(void *)(result + 160) = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 152);
  return result;
}

void re::DynamicArray<re::MeshAssetSkeleton>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = 112 * v2;
    do
    {
      re::FixedArray<CoreIKTransform>::deinit(v3 + 11);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 8);
      re::FixedArray<CoreIKTransform>::deinit(v3 + 5);
      re::FixedArray<re::StringID>::deinit(v3 + 2);
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 14;
      v4 -= 112;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicOverflowArray<unsigned int,128ul>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (!*result)
  {
    __n128 result = (void *)re::DynamicOverflowArray<unsigned int,128ul>::setCapacity(v4, a2);
    int v8 = *((_DWORD *)v4 + 4) + 2;
    goto LABEL_5;
  }
  int v6 = *((_DWORD *)result + 4);
  if (v6) {
    uint64_t v7 = 128;
  }
  else {
    uint64_t v7 = result[3];
  }
  if (v7 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 0x80 || (v6 & 1) == 0))
    {
      if (a2 >= 0x81)
      {
        if (a2 >> 62)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 4, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 4 * a2;
          uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 4 * a2, 4);
          if (v10)
          {
            uint64_t v12 = v10;
            if (v4[2]) {
              uint64_t v13 = v4 + 3;
            }
            else {
              uint64_t v13 = (const void *)v4[4];
            }
            __n128 result = memcpy(v10, v13, 4 * v4[1]);
            int v17 = *((_DWORD *)v4 + 4);
            if ((v17 & 1) == 0)
            {
              __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
              int v17 = *((_DWORD *)v4 + 4);
            }
            *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
            v4[3] = a2;
            v4[4] = v12;
            return result;
          }
        }
        re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v14 = result + 3;
      uint64_t v15 = v4[4];
      if (v6) {
        unint64_t v16 = v4 + 3;
      }
      else {
        unint64_t v16 = (const void *)v4[4];
      }
      memcpy(v14, v16, 4 * v9);
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
      int v8 = *((_DWORD *)v4 + 4) | 1;
LABEL_5:
      *((_DWORD *)v4 + 4) = v8;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::DynamicOverflowArray<unsigned long long,64ul>,128ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 128;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 0x80 || (v7 & 1) == 0))
    {
      if (a2 < 0x81)
      {
        uint64_t v14 = a1[4];
        if (v7) {
          uint64_t v15 = a1 + 3;
        }
        else {
          uint64_t v15 = (void *)a1[4];
        }
        if (v9)
        {
          unint64_t v16 = 0;
          uint64_t v17 = 536 * v9;
          do
          {
            re::DynamicOverflowArray<unsigned long long,64ul>::DynamicOverflowArray((uint64_t)&a1[v16 / 8 + 3], (uint64_t)&v15[v16 / 8]);
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)&v15[v16 / 8]);
            v16 += 536;
          }
          while (v17 != v16);
          uint64_t result = *a1;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v14);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x218uLL))
      {
        uint64_t v2 = 536 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 536 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            uint64_t v13 = (uint64_t)(a1 + 3);
          }
          else {
            uint64_t v13 = a1[4];
          }
          uint64_t v18 = a1[1];
          if (v18)
          {
            uint64_t v19 = 536 * v18;
            uint64_t v20 = result;
            do
            {
              re::DynamicOverflowArray<unsigned long long,64ul>::DynamicOverflowArray(v20, v13);
              uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v13);
              v13 += 536;
              v20 += 536;
              v19 -= 536;
            }
            while (v19);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 536, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<unsigned long long,64ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)(a1 + 24);
  *(void *)(a1 + 32) = 0;
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    *(_DWORD *)(a1 + 16) = 3;
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v6;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v7;
LABEL_18:
    int v14 = 2;
    goto LABEL_19;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  if (!v8)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
    *(void *)a1 = *(void *)a2;
    goto LABEL_18;
  }
  *(void *)a1 = *(void *)a2;
  re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity((void *)a1, v8);
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v9 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v9 = *(const void **)(a2 + 32);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = v4;
  if ((v11 & 1) == 0) {
    int v12 = *(void **)(a1 + 32);
  }
  if (v10)
  {
    memmove(v12, v9, 8 * v10);
    int v11 = *(_DWORD *)(a1 + 16);
  }
  if ((v11 & 1) == 0) {
    uint64_t v4 = *(char **)(a1 + 32);
  }
  if (*(_DWORD *)(a2 + 16)) {
    uint64_t v13 = a2 + 24;
  }
  else {
    uint64_t v13 = *(void *)(a2 + 32);
  }
  memcpy(&v4[8 * *(void *)(a1 + 8)], (const void *)(v13 + 8 * *(void *)(a1 + 8)), 8 * v8 - 8 * *(void *)(a1 + 8));
  *(void *)(a1 + 8) = v8;
  *(void *)(a2 + 8) = 0;
  int v14 = 4;
LABEL_19:
  *(_DWORD *)(a2 + 16) = ((*(_DWORD *)(a2 + 16) & 0xFFFFFFFE) + v14) | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(a1 + 16) += 2;
  return a1;
}

void *re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<unsigned long long,64ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 64;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 0x40 || (v7 & 1) == 0))
    {
      if (a2 < 0x41)
      {
        int v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          unint64_t v16 = v4 + 3;
        }
        else {
          unint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if ((v3 & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 40))(result, *(void *)(a1 + 40));
      int v3 = *(_DWORD *)(a1 + 16);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = (v3 | 1) + 2;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>,64ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    int v7 = *((_DWORD *)a1 + 4) + 2;
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a1 + 4);
  if (v5) {
    uint64_t v6 = 64;
  }
  else {
    uint64_t v6 = a1[4];
  }
  if (v6 != a2)
  {
    unint64_t v8 = a1[1];
    if (v8 <= a2 && (a2 > 0x40 || (v5 & 1) == 0))
    {
      if (a2 >= 0x41)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 5152 * a2, 16);
        if (v9)
        {
          uint64_t v11 = v9;
          if (a1[2]) {
            uint64_t v12 = (uint64_t)(a1 + 4);
          }
          else {
            uint64_t v12 = a1[5];
          }
          int v15 = *((_DWORD *)a1 + 4);
          if ((v15 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[5]);
            int v15 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v15 & 0xFFFFFFFE;
          a1[4] = a2;
          a1[5] = v11;
        }
        else
        {
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, 5152 * a2, *(void *)(*a1 + 8));
          uint64_t result = _os_crash();
          __break(1u);
        }
        return result;
      }
      uint64_t v13 = a1[5];
      if (v5) {
        uint64_t v14 = (uint64_t)(a1 + 4);
      }
      else {
        uint64_t v14 = a1[5];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, v13);
      int v7 = *((_DWORD *)a1 + 4) | 1;
LABEL_5:
      *((_DWORD *)a1 + 4) = v7;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    for (uint64_t i = 0; v5 + i != a2; i += 5152)
    {
      _X22 = a3 + i;
      _X23 = v5 + i;
      *(void *)_X22 = 0;
      *(void *)(_X22 + 8) = 0;
      *(_DWORD *)(_X22 + 16) = 1;
      *(void *)(a3 + i + 32) = 0;
      uint64_t v9 = (uint64_t *)(a3 + i + 32);
      *(void *)(_X22 + 40) = 0;
      __asm
      {
        PRFM            #0, [X23,#0x2850]
        PRFM            #0, [X22,#0x2848]
      }
      if (*(_DWORD *)(v5 + i + 16))
      {
        unint64_t v19 = *(void *)(_X23 + 8);
        if (v19)
        {
          uint64_t v20 = v5 + i;
          *(void *)_X22 = *(void *)(v5 + i);
          if (*(unsigned char *)(_X23 + 16)) {
            signed int v21 = (const void *)(v20 + 32);
          }
          else {
            signed int v21 = *(const void **)(v20 + 40);
          }
          int v22 = *(_DWORD *)(_X22 + 16);
          long long v23 = (void *)(a3 + i + 32);
          if ((v22 & 1) == 0) {
            long long v23 = *(void **)(_X22 + 40);
          }
          uint64_t v24 = *(void *)(_X22 + 8);
          if (v24)
          {
            memmove(v23, v21, 80 * v24);
            int v22 = *(_DWORD *)(_X22 + 16);
          }
          if ((v22 & 1) == 0) {
            uint64_t v9 = *(uint64_t **)(_X22 + 40);
          }
          if (*(_DWORD *)(_X23 + 16)) {
            uint64_t v25 = v20 + 32;
          }
          else {
            uint64_t v25 = *(void *)(v20 + 40);
          }
          memcpy(&v9[10 * *(void *)(_X22 + 8)], (const void *)(v25 + 80 * *(void *)(_X22 + 8)), 80 * v19 - 80 * *(void *)(_X22 + 8));
          *(void *)(_X22 + 8) = v19;
          *(void *)(_X23 + 8) = 0;
          int v26 = 4;
          goto LABEL_21;
        }
        *(void *)_X22 = *(void *)_X23;
      }
      else
      {
        *(_DWORD *)(_X22 + 16) = 3;
        uint64_t v16 = *(void *)(_X23 + 8);
        *(void *)_X22 = *(void *)_X23;
        *(void *)(_X22 + 8) = v16;
        *(void *)_X23 = 0;
        *(void *)(_X23 + 8) = 0;
        uint64_t v17 = *(void *)(_X22 + 40);
        *(void *)(_X22 + 40) = *(void *)(_X23 + 40);
        *(void *)(_X23 + 40) = v17;
        *(_DWORD *)(_X23 + 16) = *(_DWORD *)(_X23 + 16) & 0xFFFFFFFE | *(_DWORD *)(_X22 + 16) & 1;
        *(_DWORD *)(_X22 + 16) &= ~1u;
        uint64_t v18 = *v9;
        *uint64_t v9 = *(void *)(_X23 + 32);
        *(void *)(_X23 + 32) = v18;
      }
      int v26 = 2;
LABEL_21:
      *(_DWORD *)(_X23 + 16) = ((*(_DWORD *)(_X23 + 16) & 0xFFFFFFFE) + v26) | *(_DWORD *)(_X23 + 16) & 1;
      *(_DWORD *)(_X22 + 16) += 2;
    }
  }
  return result;
}

void *re::DynamicOverflowArray<re::anonymous namespace'::PartInstance,64ul>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 64;
  }
  else {
    uint64_t v8 = result[4];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 0x40 || (v7 & 1) == 0))
    {
      if (a2 < 0x41)
      {
        uint64_t v14 = result + 4;
        uint64_t v15 = v4[5];
        if (v7) {
          uint64_t v16 = v4 + 4;
        }
        else {
          uint64_t v16 = (const void *)v4[5];
        }
        memcpy(v14, v16, 80 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x50uLL))
      {
        uint64_t v2 = 80 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 80 * a2, 16);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 4;
          }
          else {
            uint64_t v13 = (const void *)v4[5];
          }
          uint64_t result = memcpy(v10, v13, 80 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[5]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 80, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::DynamicArray<re::MeshAssetInstance>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshAssetInstance>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetInstance>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    unint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<re::AssetHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AssetHandle>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AssetHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AssetHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AssetHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AssetHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AssetHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::AssetHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AssetHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::AssetHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::AssetHandle>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::AssetHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AssetHandle>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::AssetHandle>::add(this, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * *((void *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::AssetHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AssetHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void re::DynamicArray<re::AssetHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 24 * a2;
    unint64_t v9 = a2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 24 * v4;
      do
      {
        unint64_t v7 = (void *)(*(void *)(a1 + 32) + v6);
        *unint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::AssetHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::AssetHandle>::clear((re::AssetHandle *)a2);
  }
  else
  {
    re::DynamicArray<re::AssetHandle>::deinit(a2);
    *(void *)a2 = a4;
    re::DynamicArray<re::AssetHandle>::setCapacity((void *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::AssetHandle>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(void **)a3, *(void *)(*(void *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      long long v11 = *(char **)(a2 + 32);
      uint64_t v12 = 24 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::DrawableQueueManager::~DrawableQueueManager(re::DrawableQueueManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);
  *((void *)this + 1) = 0;

  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {

    *((void *)this + 8) = 0;
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
}

void re::DrawableQueueManager::setActiveScene(re::DrawableQueueManager *this, re::ecs2::Scene *a2)
{
  if (!*((void *)this + 10))
  {
    uint64_t v2 = *((void *)this + 8);
    *((void *)this + 10) = a2;
    if (v2)
    {
      do
      {
        uint64_t v3 = v2;
        uint64_t v2 = *(void *)(v2 + 24);
      }
      while (v2);
      if (!*(void *)(v3 + 16)) {
        re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(*((void *)a2 + 13) + 304), (uint64_t *)this + 8);
      }
    }
  }
}

void re::DrawableQueueManager::removeActiveScene(re::DrawableQueueManager *this, re::ecs2::Scene *a2)
{
  if (*((re::ecs2::Scene **)this + 10) == a2)
  {
    uint64_t v3 = (re::ecs2::Entity *)*((void *)this + 8);
    if (v3) {
      re::ecs2::Entity::removeFromSceneOrParent(v3);
    }
    *((void *)this + 10) = 0;
  }
}

void re::DrawableQueueManager::registerDrawableQueueBackedTexture(re::DrawableQueueManager *this, re::TextureAsset *a2)
{
  unint64_t v5 = this;
  unint64_t v6 = *((unsigned int *)this + 10);
  unint64_t v7 = (unint64_t)a2 ^ ((unint64_t)a2 >> 30);
  if (v6)
  {
    unint64_t v8 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
    uint64_t v9 = *(unsigned int *)(*((void *)this + 3) + 4 * ((v8 ^ (v8 >> 31)) % v6));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v18 = *((void *)this + 4);
      if (*(re::TextureAsset **)(v18 + 24 * v9 + 16) == a2) {
        return;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v18 + 24 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(re::TextureAsset **)(v18 + 24 * v9 + 16) == a2) {
          return;
        }
      }
    }
  }
  uint64_t v10 = *((void *)a2 + 12);
  if (!*(unsigned char *)(v10 + 295))
  {
    if (!*(void *)(v10 + 400))
    {
      int v26 = (re::ecs2::Entity **)((char *)this + 64);
      if (!*((void *)this + 8))
      {
        long long v27 = re::ecs2::EntityFactory::instance(this);
        re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v27, 4uLL, (re::ecs2::Entity **)&location);
        long long v28 = *v26;
        id v29 = location;
        *int v26 = (re::ecs2::Entity *)location;
        if (v28)
        {

          id v29 = *v26;
        }
        *((_DWORD *)v29 + 72) |= 0x1400u;
        id location = (id)0x2676308E13D52C60;
        long long v62 = "DrawableQueueSyncRoot";
        re::StringID::operator=((unint64_t *)v29 + 34, (uint64_t *)&location);
        re::StringID::destroyString((re::StringID *)&location);
        this = (re::DrawableQueueManager *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*((void *)v5 + 8) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v30 = *((void *)v5 + 10);
        if (v30) {
          re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(*(void *)(v30 + 104) + 304), (uint64_t *)v5 + 8);
        }
      }
      long long v32 = re::ecs2::EntityFactory::instance(v31);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v32, 4uLL, &v60);
      long long v33 = (unint64_t *)v60;
      *((_DWORD *)v60 + 72) |= 0x1400u;
      v59[0] = 0x214F808969F915E6;
      v59[1] = (uint64_t)"DrawableQueue";
      re::StringID::operator=(v33 + 34, v59);
      re::StringID::destroyString((re::StringID *)v59);
      re::ecs2::Entity::setParentInternal((re::ecs2::Entity *)v33, *v26, 0xFFFFFFFFFFFFFFFFLL);
      re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::create(v59);
      uint64_t v34 = v59[0];
      *(_DWORD *)(v59[0] + 28) = 0;
      uint64_t v2 = v33 + 4;
      uint64_t v58 = v34;
      id v35 = (id)(v34 + 8);
      re::ecs2::EntityComponentCollection::add((uint64_t)(v33 + 4), &v58, 1);
      if (v58)
      {

        uint64_t v58 = 0;
      }
      uint64_t v36 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v33 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      uint64_t v37 = v59[0];
      uint64_t v3 = (void *)*((void *)a2 + 12);
      v3[50] = v59[0];
      uint64_t v38 = v3[51];
      if (v38 != v36)
      {
        uint64_t v2 = (void *)v36;
        if (v36)
        {
          id v39 = (id)(v36 + 8);
          uint64_t v38 = v3[51];
        }
        if (v38) {

        }
        v3[51] = v2;
        uint64_t v37 = v59[0];
      }
      if (v37) {

      }
      if (v60) {
      if (location && (v62 & 1) != 0)
      }
        (*(void (**)(void))(*(void *)location + 40))();
    }
    unint64_t v19 = (void *)*((void *)v5 + 12);
    if (v19) {
      goto LABEL_21;
    }
    id v20 = *(id *)(*((void *)v5 + 1) + 184);
    if (v20)
    {
      uint64_t v2 = v20;
      uint64_t v3 = objc_msgSend(objc_msgSend(MEMORY[0x263F12818], sel_alloc), sel_init);
      objc_msgSend(v3, sel_setCommitSynchronously_, 1);
      id v22 = objc_msgSend(v2, sel_newCommandQueueWithDescriptor_, v3);

      [v22 setBackgroundGPUPriority:2];
      long long v23 = (void *)*((void *)v5 + 12);
      *((void *)v5 + 12) = v22;

      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF770E0, memory_order_acquire))
      {
LABEL_18:
        id v24 = (id)_MergedGlobals_63;
        [*((id *)v5 + 12) setLabel:v24];

        if (v3) {
        unint64_t v19 = (void *)*((void *)v5 + 12);
        }
LABEL_21:
        uint64_t v25 = *((void *)a2 + 12);
        id v57 = v19;
        re::ObjCObject::operator=((id *)(v25 + 56), &v57);

        goto LABEL_48;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) A device is required to create a command queue", "false", "registerDrawableQueueBackedTexture", 81);
      _os_crash();
      __break(1u);
    }
    if (__cxa_guard_acquire(&qword_26AF770E0))
    {
      long long v54 = re::ns::String::String((re::ns::String *)&_MergedGlobals_63, (re::ns *)"DrawableQueueMipMapGenQueue");
      __cxa_guard_release((__guard *)v54 + 1);
    }
    goto LABEL_18;
  }
  uint64_t v11 = *((void *)this + 10);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 104);
    uint64_t v13 = *(void *)(v12 + 328);
    if (v13)
    {
      uint64_t v14 = *(uint64_t **)(v12 + 344);
      uint64_t v15 = 8 * v13;
      while (1)
      {
        uint64_t v16 = *v14;
        *(void *)&v56.var0 = 0;
        v56.var1 = "";
        uint64_t v17 = re::ecs2::Entity::findInHierarchyByName(v16, &v56);
        re::StringID::destroyString((re::StringID *)&v56);
        if (v17) {
          break;
        }
        ++v14;
        v15 -= 8;
        if (!v15) {
          goto LABEL_48;
        }
      }
      uint64_t v40 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v40) {
        long long v41 = (void *)(v40 + 8);
      }
      else {
        long long v41 = 0;
      }
      objc_initWeak(&location, v41);
      uint64_t v42 = *((void *)a2 + 12);
      id to = 0;
      objc_moveWeak(&to, &location);
      long long v43 = (id *)(v42 + 48);
      if (&to != v43)
      {
        objc_destroyWeak(v43);
        *long long v43 = 0;
        objc_moveWeak(v43, &to);
      }
      objc_destroyWeak(&to);
      id to = 0;
      objc_destroyWeak(&location);
    }
  }
LABEL_48:
  unint64_t v44 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v7) ^ ((0xBF58476D1CE4E5B9 * v7) >> 27));
  unint64_t v45 = v44 ^ (v44 >> 31);
  unint64_t v46 = *((unsigned int *)v5 + 10);
  if (v46)
  {
    unint64_t v47 = v45 % v46;
    uint64_t v48 = *(unsigned int *)(*((void *)v5 + 3) + 4 * (v45 % v46));
    if (v48 != 0x7FFFFFFF)
    {
      uint64_t v49 = *((void *)v5 + 4);
      if (*(re::TextureAsset **)(v49 + 24 * v48 + 16) == a2) {
        return;
      }
      while (1)
      {
        LODWORD(v48) = *(_DWORD *)(v49 + 24 * v48 + 8) & 0x7FFFFFFF;
        if (v48 == 0x7FFFFFFF) {
          break;
        }
        if (*(re::TextureAsset **)(v49 + 24 * v48 + 16) == a2) {
          return;
        }
      }
    }
  }
  else
  {
    LODWORD(v47) = 0;
  }
  uint64_t v50 = *((unsigned int *)v5 + 13);
  if (v50 == 0x7FFFFFFF)
  {
    uint64_t v50 = *((unsigned int *)v5 + 12);
    int v51 = v50;
    if (v50 == v46)
    {
      re::HashSetBase<re::TextureAsset *,re::TextureAsset *,re::internal::ValueAsKey<re::TextureAsset *>,re::Hash<re::TextureAsset *>,re::EqualTo<re::TextureAsset *>,true,false>::setCapacity((uint64_t)v5 + 16, 2 * *((_DWORD *)v5 + 11));
      LODWORD(v47) = v45 % *((unsigned int *)v5 + 10);
      int v51 = *((_DWORD *)v5 + 12);
    }
    *((_DWORD *)v5 + 12) = v51 + 1;
    uint64_t v52 = *((void *)v5 + 4);
    int v53 = *(_DWORD *)(v52 + 24 * v50 + 8);
  }
  else
  {
    uint64_t v52 = *((void *)v5 + 4);
    int v53 = *(_DWORD *)(v52 + 24 * v50 + 8);
    *((_DWORD *)v5 + 13) = v53 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v52 + 24 * v50 + 8) = v53 | 0x80000000;
  *(_DWORD *)(*((void *)v5 + 4) + 24 * v50 + 8) = *(_DWORD *)(*((void *)v5 + 4) + 24 * v50 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v5 + 3) + 4 * v47);
  *(void *)(*((void *)v5 + 4) + 24 * v50) = v45;
  *(void *)(*((void *)v5 + 4) + 24 * v50 + 16) = a2;
  *(_DWORD *)(*((void *)v5 + 3) + 4 * v47) = v50;
  ++*((_DWORD *)v5 + 11);
  ++*((_DWORD *)v5 + 14);
}

void re::DrawableQueueManager::unregisterDrawableQueueBackedTexture(re::DrawableQueueManager *this, unint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 96);
  if (!*(unsigned char *)(v4 + 295))
  {
    uint64_t v5 = *(void *)(v4 + 400);
    if (v5)
    {
      unint64_t v6 = *(re::ecs2::Entity **)(v5 + 16);
      if (v6)
      {
        re::ecs2::Entity::removeFromSceneOrParent(v6);
        uint64_t v4 = *(void *)(a2 + 96);
      }
      *(void *)(v4 + 400) = 0;
    }
  }
  unint64_t v7 = *((unsigned int *)this + 10);
  if (v7)
  {
    unint64_t v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v9 = (v8 ^ (v8 >> 31)) % v7;
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = *(unsigned int *)(v10 + 4 * v9);
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *((void *)this + 4);
      if (*(void *)(v12 + 24 * v11 + 16) == a2)
      {
        *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)(v12 + 24 * v11 + 8) & 0x7FFFFFFF;
LABEL_13:
        uint64_t v14 = *((void *)this + 4);
        uint64_t v15 = v14 + 24 * v11;
        int v18 = *(_DWORD *)(v15 + 8);
        uint64_t v17 = (int *)(v15 + 8);
        int v16 = v18;
        if (v18 < 0)
        {
          *uint64_t v17 = v16 & 0x7FFFFFFF;
          uint64_t v14 = *((void *)this + 4);
          int v16 = *(_DWORD *)(v14 + 24 * v11 + 8);
        }
        int v19 = *((_DWORD *)this + 14);
        *(_DWORD *)(v14 + 24 * v11 + 8) = *((_DWORD *)this + 13) | v16 & 0x80000000;
        --*((_DWORD *)this + 11);
        *((_DWORD *)this + 13) = v11;
        *((_DWORD *)this + 14) = v19 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v13 = v11;
          LODWORD(v11) = *(_DWORD *)(v12 + 24 * v11 + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v12 + 24 * v11 + 16) == a2)
          {
            *(_DWORD *)(v12 + 24 * v13 + 8) = *(_DWORD *)(v12 + 24 * v13 + 8) & 0x80000000 | *(_DWORD *)(v12 + 24 * v11 + 8) & 0x7FFFFFFF;
            goto LABEL_13;
          }
        }
      }
    }
  }
}

void re::DrawableQueueManager::afterFrameUpdate(re::DrawableQueueManager *this)
{
  if (*((_DWORD *)this + 11))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (int *)(*((void *)this + 4) + 8);
      while (1)
      {
        int v5 = *v4;
        v4 += 6;
        if (v5 < 0) {
          break;
        }
        if (v2 == ++v3)
        {
          LODWORD(v3) = *((_DWORD *)this + 12);
          break;
        }
      }
    }
    else
    {
      LODWORD(v3) = 0;
    }
    if (v2 == v3)
    {
      BOOL v6 = 0;
    }
    else
    {
      BOOL v6 = 0;
      uint64_t v7 = v3;
      do
      {
        uint64_t v8 = *(void *)(*((void *)this + 4) + 24 * v7 + 16);
        uint64_t v9 = *(void *)(*((void *)this + 1) + 104);
        if (v9) {
          uint64_t v10 = (re::RenderFrame *)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *((void *)this + 11);
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 360);
          uint64_t v13 = v12 ? *(void *)(v12 + 24) : 1;
          uint64_t v14 = *(void *)(v8 + 96);
          if ((*(unsigned char *)(v14 + 295) || !*(unsigned char *)(v14 + 46) || *(void *)(v14 + 376) >= 2uLL)
            && *(unsigned char *)(v14 + 294)
            && *(void *)(v14 + 376) == v13)
          {
            uint64_t v15 = re::DrawableQueue::latestPresentableDrawable((re::DrawableQueue *)v14, v10);
            if (v15) {
              re::TextureAsset::setMetalTexture_fromDrawableQueue(v8, *((re::ImportGraphicsContext **)this + 1), (void **)(v15 + 16), *(unsigned __int8 *)(*(void *)(v8 + 96) + 296));
            }
            int v16 = *(re::DrawableQueue **)(v8 + 96);
            BOOL v6 = v6 || *((unsigned char *)v16 + 292) != 0;
            re::DrawableQueue::afterFrameUpdate(v16);
          }
        }
        if (*((_DWORD *)this + 12) <= (v3 + 1)) {
          int v17 = v3 + 1;
        }
        else {
          int v17 = *((_DWORD *)this + 12);
        }
        while (1)
        {
          uint64_t v7 = (v3 + 1);
          if (v17 - 1 == v3) {
            break;
          }
          LODWORD(v3) = v3 + 1;
          int v18 = v7;
          if ((*(_DWORD *)(*((void *)this + 4) + 24 * v7 + 8) & 0x80000000) != 0) {
            goto LABEL_37;
          }
        }
        int v18 = v17;
LABEL_37:
        LODWORD(v3) = v18;
      }
      while (v2 != v18);
    }
    *((unsigned char *)this + 72) = v6;
  }
}

void re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::create(void *a1@<X8>)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 56, 0);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6CE060;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *a1 = v3;
}

uint64_t re::DrawableQueueManager::hasNewRenderData(re::DrawableQueueManager *this)
{
  return *((unsigned __int8 *)this + 72);
}

void re::HashSetBase<re::TextureAsset *,re::TextureAsset *,re::internal::ValueAsKey<re::TextureAsset *>,re::Hash<re::TextureAsset *>,re::EqualTo<re::TextureAsset *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)long long v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashSetBase<re::TextureAsset *,re::TextureAsset *,re::internal::ValueAsKey<re::TextureAsset *>,re::Hash<re::TextureAsset *>,re::EqualTo<re::TextureAsset *>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 16) = *v14;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::ecs2::DrawableQueueSyncComponent::~DrawableQueueSyncComponent(re::ecs2::DrawableQueueSyncComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ecs2::DrawableQueueSyncComponent *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *re::allocInfo_FontFile(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_64, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_64))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77188, "FontFile");
    __cxa_guard_release(&_MergedGlobals_64);
  }
  return &unk_26AF77188;
}

void re::initInfo_FontFile(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x3B0333E3516;
  v18[1] = "FontFile";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF770F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF770F0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "fontName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77148 = v8;
      long long v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "sdfTexture";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF77150 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "layout";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x3800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF77158 = v16;
      __cxa_guard_release(&qword_26AF770F0);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF77148;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FontFile>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FontFile>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FontFile>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FontFile>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

double re::internal::defaultConstruct<re::FontFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  double result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  return result;
}

double re::internal::defaultDestruct<re::FontFile>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 56));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

double re::internal::defaultConstructV2<re::FontFile>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  re::DynamicString::setCapacity(a1, 0);
  double result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  return result;
}

double re::internal::defaultDestructV2<re::FontFile>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 56));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::introspect_FontFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FontFile", (uint64_t (*)(re::internal *))re::allocInfo_FontFile, (re::IntrospectionBase *(*)(void))re::initInfo_FontFile, (void (*)(re::IntrospectionBase *))&qword_26AF770F8, this);
}

void *re::allocInfo_FontAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77100))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77200, "FontAsset");
    __cxa_guard_release(&qword_26AF77100);
  }
  return &unk_26AF77200;
}

void re::initInfo_FontAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x72563404CF82;
  v11[1] = "FontAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77110, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77110);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      long long v7 = (re *)qword_26AF770F8;
      if (!qword_26AF770F8)
      {
        long long v7 = (re *)re::allocInfo_FontFile(v5);
        qword_26AF770F8 = (uint64_t)v7;
        re::initInfo_FontFile(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "fontFile";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF77108 = v9;
      __cxa_guard_release(&qword_26AF77110);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF77108;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FontAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FontAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FontAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FontAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::FontAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  double result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  return result;
}

double re::internal::defaultDestruct<re::FontAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 56));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

double re::internal::defaultConstructV2<re::FontAsset>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  re::DynamicString::setCapacity(a1, 0);
  double result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  return result;
}

double re::internal::defaultDestructV2<re::FontAsset>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 56));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::introspect_FontAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FontAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontAsset>, this);
}

void *re::allocInfo_FontLayout(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77118))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77278, "FontLayout");
    __cxa_guard_release(&qword_26AF77118);
  }
  return &unk_26AF77278;
}

void re::initInfo_FontLayout(re *this, re::IntrospectionBase *a2)
{
  v23[0] = 0xDD870702A30F2;
  v23[1] = "FontLayout";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77120, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77120);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "lineHeight";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77160 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v10 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "glyphBounds";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF77168 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::IntrospectionInfo<re::DynamicArray<re::Vector2<float>>>::get(1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "glyphOffsetMatrix";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x3000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF77170 = v14;
      unint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v16 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "glyphTexcoordBounds";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5800000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF77178 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "belowBaselineHeight";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x400000005;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF77180 = v21;
      __cxa_guard_release(&qword_26AF77120);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF77160;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FontLayout>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FontLayout>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FontLayout>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FontLayout>;
  re::IntrospectionRegistry::add(this, v3);
  long long v22 = v24;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(int a1)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info = (uint64_t)&unk_26E6CE398;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v2 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v2) {
      return &re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info;
    }
    uint64_t v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
  }
  long long v5 = (re *)re::introspect_Vector4F((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v6 = re::introspectionSharedMutex(v5);
      std::__shared_mutex_base::unlock(v6);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)v5;
    re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::isInitialized = 1;
    int v9 = *((_DWORD *)v5 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info, 0);
    qword_268773538 = 0x2800000003;
    dword_268773540 = v9;
    word_268773544 = 0;
    *(void *)&xmmword_268773548 = 0;
    *((void *)&xmmword_268773548 + 1) = 0xFFFFFFFFLL;
    qword_268773558 = v8;
    unk_268773560 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info = (uint64_t)&unk_26E6CE398;
    re::IntrospectionRegistry::add(v10, v11);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
    if (BYTE8(v14)) {
      long long v12 = v15;
    }
    else {
      long long v12 = (char *)&v14 + 9;
    }
    if (void)v14 && (BYTE8(v14)) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    long long v14 = *(_OWORD *)(v8 + 32);
    xmmword_268773548 = v13;
    re::StringID::destroyString((re::StringID *)v16);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::FontLayout>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::FontLayout>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 88);
  re::DynamicArray<unsigned long>::deinit(a3 + 48);
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::FontLayout>(uint64_t a1)
{
  *(void *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::FontLayout>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 88);
  re::DynamicArray<unsigned long>::deinit(a1 + 48);
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

void *re::allocInfo_FontLayoutAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77130))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF772F0, "FontLayoutAsset");
    __cxa_guard_release(&qword_26AF77130);
  }
  return &unk_26AF772F0;
}

void re::initInfo_FontLayoutAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x56B75454A73C8BEELL;
  v11[1] = "FontLayoutAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77140, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77140);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      long long v7 = (re *)qword_26AF77128;
      if (!qword_26AF77128)
      {
        long long v7 = (re *)re::allocInfo_FontLayout(v5);
        qword_26AF77128 = (uint64_t)v7;
        re::initInfo_FontLayout(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "fontLayout";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF77138 = v9;
      __cxa_guard_release(&qword_26AF77140);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF77138;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FontLayoutAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FontLayoutAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FontLayoutAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FontLayoutAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::FontLayoutAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::FontLayoutAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 88);
  re::DynamicArray<unsigned long>::deinit(a3 + 48);
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::FontLayoutAsset>(uint64_t a1)
{
  *(void *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::FontLayoutAsset>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 88);
  re::DynamicArray<unsigned long>::deinit(a1 + 48);
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

uint64_t re::introspect_FontLayoutAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FontLayoutAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontLayoutAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontLayoutAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontLayoutAsset>, this);
}

void re::makeFontID(re *this@<X0>, re::StringID *a2@<X8>)
{
  uint64_t v4 = (char *)re::AssetHandle::assetInfo(this);
  if (*((void *)v4 + 13)) {
    long long v5 = (const char *)*((void *)v4 + 14);
  }
  else {
    long long v5 = v4 + 105;
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = "";
}

uint64_t *re::FontAsset::assetType(re::FontAsset *this)
{
  {
    re::FontAsset::assetType(void)::type = (uint64_t)"Font";
    qword_26879E5A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::FontAsset::assetType(void)::type);
  }
  return &re::FontAsset::assetType(void)::type;
}

char **re::FontAssetLoader::introspectionType(re::FontAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::FontAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"FontAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[175];
}

uint64_t re::FontAssetLoader::registerAsset(re::FontAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::AssetLoader::registerAsset(this, a2, a3);
  if (v6 || !re::ServiceLocator::serviceOrNull<re::RenderManager>(*((void *)this + 1))) {
    return v6;
  }
  uint64_t v7 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(a2 + 32));
  uint64_t v8 = (re::AssetHandle *)(a2 + 56);
  re::FontLayoutAsset::assetType((re::FontLayoutAsset *)v7);
  uint64_t v9 = re::AssetHandle::assetWithType((re::AssetHandle *)(a2 + 56), (const re::AssetType *)&re::FontLayoutAsset::assetType(void)::type, 0);
  if (!v9)
  {
    long long v10 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unint64_t v15 = re::AssetHandle::assetInfo(v8);
      if (v15[17]) {
        uint64_t v16 = (char *)v15[18];
      }
      else {
        uint64_t v16 = (char *)v15 + 137;
      }
      v18.var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315138;
      *(void *)(&v18.var0 + 1) = v16;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v18, 0xCu);
    }
  }
  uint64_t v11 = (_anonymous_namespace_ *)re::ServiceLocator::service<re::RenderManager>(*((void *)this + 1));
  uint64_t v12 = *((void *)v11 + 9);
  if (*((void *)a3 + 13)) {
    long long v13 = (const char *)*((void *)a3 + 14);
  }
  else {
    long long v13 = (char *)a3 + 105;
  }
  *(void *)&v18.var0 = 0;
  v18.var1 = "";
  if (!*(_DWORD *)(v7 + 240))
  {
    re::TextManager::addFont(v12, &v18, (void **)(v7 + 160), v9);
    re::StringID::destroyString((re::StringID *)&v18);
    return v6;
  }
  uint64_t v17 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
  return re::AssetHandle::asset<re::TextureAsset>(v17);
}

uint64_t re::AssetHandle::asset<re::TextureAsset>(re::TextureAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = re::TextureAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::FontAssetLoader::unregisterAsset(re::FontAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  if (re::ServiceLocator::serviceOrNull<re::RenderManager>(*((void *)this + 1)))
  {
    long long v5 = (_anonymous_namespace_ *)re::ServiceLocator::service<re::RenderManager>(*((void *)this + 1));
    uint64_t v6 = (re::TextManager *)*((void *)v5 + 9);
    if (*((void *)a3 + 13)) {
      uint64_t v7 = (const char *)*((void *)a3 + 14);
    }
    else {
      uint64_t v7 = (char *)a3 + 105;
    }
    v8[0] = 0;
    v8[1] = "";
    re::TextManager::removeFont(v6, (const re::FontID *)v8);
    re::StringID::destroyString((re::StringID *)v8);
  }
}

re *re::FontAssetLoader::unloadAsset(re::FontAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::FontAsset>((re *)"unloadAsset", 107, a2);
}

re *re::internal::destroyPersistent<re::FontAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 56));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 32));
    v5.n128_f64[0] = re::DynamicString::deinit((re::DynamicString *)a3);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 40);
    return (re *)v6(v4, a3, v5);
  }
  return result;
}

BOOL re::FontAssetLoader::isSupportedSourceExtension(re::FontAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "refont") == 0;
}

re::AssetHandle *re::FontAssetLoader::findDependencies@<X0>(re::FontAssetLoader *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  re::DynamicArray<re::AssetHandle>::setCapacity((void *)a3, 2uLL);
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 32));
  return re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 56));
}

uint64_t *re::FontLayoutAsset::assetType(re::FontLayoutAsset *this)
{
  {
    re::FontLayoutAsset::assetType(void)::type = (uint64_t)"FontLayout";
    qword_26879E5C8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::FontLayoutAsset::assetType(void)::type);
  }
  return &re::FontLayoutAsset::assetType(void)::type;
}

char **re::FontLayoutAssetLoader::introspectionType(re::FontLayoutAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::FontLayoutAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"FontLayoutAsset", (uint64_t (*)(re::internal *))re::allocInfo_FontLayoutAsset, (re::IntrospectionBase *(*)(void))re::initInfo_FontLayoutAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FontLayoutAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[177];
}

re *re::FontLayoutAssetLoader::unloadAsset(re::FontLayoutAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::FontLayoutAsset>((re *)"unloadAsset", 138, a2);
}

re *re::internal::destroyPersistent<re::FontLayoutAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<unsigned long>::deinit(a3 + 88);
    re::DynamicArray<unsigned long>::deinit(a3 + 48);
    re::DynamicArray<unsigned long>::deinit(a3 + 8);
    __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::FontLayoutAssetLoader::isSupportedSourceExtension(re::FontLayoutAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "refontlayout") == 0;
}

void re::FontAssetLoader::~FontAssetLoader(re::FontAssetLoader *this)
{
}

void re::FontLayoutAssetLoader::~FontLayoutAssetLoader(re::FontLayoutAssetLoader *this)
{
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  int v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<re::Vector4<float>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Vector4<float>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::Vector4<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Vector4<float>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::Vector4<float>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::Vector4<float>>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::Vector4<float>>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::Vector4<float>>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::Vector4<float>>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::Vector4<float>>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Vector4<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __n128 v10 = 0uLL;
  re::DynamicArray<re::Vector4<float>>::add(this, &v10);
  int v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 16 * *((void *)this + 2) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::Vector4<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Vector4<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::Vector4<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::Vector4<float>>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (v4 < a2)
    {
      __n128 v5 = (void *)(*(void *)(a1 + 32) + 16 * v4);
      uint64_t v6 = 16 * a2 - 16 * v4;
      if (v6 >= 1) {
        bzero(v5, 16 * (((unint64_t)v6 >> 4) - ((unint64_t)v6 > 0xF)) + 16);
      }
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::Vector4<float>>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::Vector4<float>>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::Vector4<float>>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      __n128 v10 = *(char **)(a1 + 32);
      uint64_t v11 = 16 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 16;
        v11 -= 16;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 16 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t *re::StateParameterBlackboardAsset::assetType(re::StateParameterBlackboardAsset *this)
{
  {
    re::StateParameterBlackboardAsset::assetType(void)::type = (uint64_t)"StateParameterBlackboard";
    qword_26879E5E8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::StateParameterBlackboardAsset::assetType(void)::type);
  }
  return &re::StateParameterBlackboardAsset::assetType(void)::type;
}

_anonymous_namespace_ *re::StateParameterBlackboardAsset::initWithInitData(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = result;
  if (a2)
  {
    unint64_t v10 = *(void *)(a2 + 8);
    uint64_t result = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=((void *)v8 + 1, a2);
  }
  if (a3)
  {
    unint64_t v11 = *(void *)(a3 + 8);
    uint64_t result = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=((void *)v8 + 4, a3);
  }
  if (a4)
  {
    unint64_t v12 = *(void *)(a4 + 8);
    uint64_t result = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=((void *)v8 + 7, a4);
  }
  if (a5)
  {
    long long v13 = (void *)((char *)v8 + 80);
    unint64_t v14 = *(void *)(a5 + 8);
    return (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::operator=(v13, a5);
  }
  return result;
}

void *re::FixedArray<re::StateParameterData>::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*a1)
    {
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::StateParameterData>::init<>(a1, v4, *(void *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::StateParameterData>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

void *re::StateParameterBlackboardAsset::deinit(re::StateParameterBlackboardAsset *this)
{
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 4);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 7);
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 10);
}

re *re::StateParameterBlackboardAssetLoader::unloadAsset(re *this, void (***a2)(void))
{
  if (a2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return this;
}

BOOL re::StateParameterBlackboardAssetLoader::isSupportedSourceExtension(re::StateParameterBlackboardAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "restateparameterblackboard") == 0;
}

uint64_t re::StateParameterBlackboardAssetLoader::introspectionType(re::StateParameterBlackboardAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF773A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF773A8))
  {
    qword_26AF773A0 = re::internal::getOrCreateInfo((re::internal *)"StateParameterBlackboardAsset", (uint64_t (*)(re::internal *))re::allocInfo_StateParameterBlackboardAsset, (re::IntrospectionBase *(*)(void))re::initInfo_StateParameterBlackboardAsset, (void (*)(re::IntrospectionBase *))&unk_26AF77398, 0);
    __cxa_guard_release(&qword_26AF773A8);
  }
  return qword_26AF773A0;
}

void *re::allocInfo_StateParameterData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77370, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77370))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77428, "StateParameterData");
    __cxa_guard_release(&qword_26AF77370);
  }
  return &unk_26AF77428;
}

void re::initInfo_StateParameterData(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xA476DA435AE1EC04;
  v14[1] = "StateParameterData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77378, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77378);
    if (v4)
    {
      __n128 v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "parameterName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF773B8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "bindPath";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF773C0 = v12;
      __cxa_guard_release(&qword_26AF77378);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF773B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::StateParameterData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::StateParameterData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::StateParameterData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::StateParameterData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::StateParameterData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[2] = 0;
  a3[3] = "";
}

void re::internal::defaultDestruct<re::StateParameterData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::StateParameterData>(void *result)
{
  *uint64_t result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  return result;
}

void re::internal::defaultDestructV2<re::StateParameterData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_StateParameterBlackboardAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77388))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF774A0, "StateParameterBlackboardAsset");
    __cxa_guard_release(&qword_26AF77388);
  }
  return &unk_26AF774A0;
}

void re::initInfo_StateParameterBlackboardAsset(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x454837C49FFCB722;
  v14[1] = "StateParameterBlackboardAsset";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77390, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77390);
    if (v4)
    {
      __n128 v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "stateParameterIntData";
      *(void *)(v6 + 16) = &qword_26AF773E8;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0x800000001;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF773C8 = v6;
      uint64_t v7 = (re *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "stateParameterFloatData";
      *(void *)(v8 + 16) = &qword_26AF773E8;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x2000000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF773D0 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "stateParameterBoolData";
      *(void *)(v10 + 16) = &qword_26AF773E8;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x3800000003;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF773D8 = v10;
      unint64_t v11 = (re *)re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get(v11);
      uint64_t v12 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "stateParameterTriggerData";
      *(void *)(v12 + 16) = &qword_26AF773E8;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000004;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF773E0 = v12;
      __cxa_guard_release(&qword_26AF77390);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF773C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::StateParameterBlackboardAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::StateParameterBlackboardAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::StateParameterBlackboardAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::StateParameterBlackboardAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::IntrospectionInfo<re::FixedArray<re::StateParameterData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF773B0, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF773B0);
    if (a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF773E8);
      qword_26AF773E8 = (uint64_t)&unk_26E6CE588;
      __cxa_guard_release(&qword_26AF773B0);
    }
  }
  if ((_MergedGlobals_65 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77380;
    if (qword_26AF77380
      || (uint64_t v1 = re::allocInfo_StateParameterData(a1),
          qword_26AF77380 = (uint64_t)v1,
          re::initInfo_StateParameterData((re *)v1, v2),
          (_MergedGlobals_65 & 1) == 0))
    {
      _MergedGlobals_65 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF773E8, 0);
      qword_26AF773F8 = 0x1800000004;
      dword_26AF77400 = v3;
      word_26AF77404 = 0;
      *(void *)&xmmword_26AF77408 = 0;
      *((void *)&xmmword_26AF77408 + 1) = 0xFFFFFFFFLL;
      qword_26AF77418 = (uint64_t)v1;
      unk_26AF77420 = 0;
      qword_26AF773E8 = (uint64_t)&unk_26E6CE588;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF773E8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF77408 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::StateParameterBlackboardAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E6CE620;
  double result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::StateParameterBlackboardAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::StateParameterBlackboardAsset>(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CE620;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::StateParameterBlackboardAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void re::StateParameterBlackboardAssetLoader::~StateParameterBlackboardAssetLoader(re::StateParameterBlackboardAssetLoader *this)
{
}

void *re::FixedArray<re::StateParameterData>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *double result = 0;
      result[1] = "";
      result[2] = 0;
      result[3] = "";
      result += 4;
      --v6;
    }
    while (v6);
  }
  *double result = 0;
  result[1] = "";
  result[2] = 0;
  result[3] = "";
  return result;
}

uint64_t *re::FixedArray<re::StateParameterData>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v4, *(uint64_t **)(a2 + 16), (uint64_t *)(*(void *)(a2 + 16) + 32 * v2), *(unint64_t **)(a1 + 16));
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  double result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::IntrospectionFixedArray<re::StateParameterData>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::StateParameterData>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::StateParameterData>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void *re::IntrospectionFixedArray<re::StateParameterData>::destroy(uint64_t a1, void *a2)
{
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a2);
}

void *re::IntrospectionFixedArray<re::StateParameterData>::init(uint64_t a1, void *a2, re *a3, int a4, unint64_t a5)
{
  double result = re::FixedArray<re::StateParameterData>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      double result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 32;
    }
    while (a5 != v12);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::StateParameterData>::deinit(uint64_t a1, void *a2)
{
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::StateParameterData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::StateParameterData>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::StateParameterData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *double result = a3;
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(void *a1)
{
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a1);
  return re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(void *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(a1);
  uint64_t v8 = (_anonymous_namespace_ *)re::FixedArray<re::StateParameterData>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      long long v10 = (char *)a1[2];
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 32 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::StateParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::StateParameterBlackboardAsset::~StateParameterBlackboardAsset(re::StateParameterBlackboardAsset *this)
{
  re::StateParameterBlackboardAsset::~StateParameterBlackboardAsset(this);
  JUMPOUT(0x237DBCBD0);
}

{
  void *v2;

  *(void *)this = &unk_26E6CE620;
  uint64_t v2 = (void *)((char *)this + 8);
  re::StateParameterBlackboardAsset::deinit(this);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 10);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 7);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((void *)this + 4);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v2);
}

void *re::allocInfo_MeshDeformationIndex(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77520))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77610, "MeshDeformationIndex");
    __cxa_guard_release(&qword_26AF77520);
  }
  return &unk_26AF77610;
}

void re::initInfo_MeshDeformationIndex(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xC334BB550CBA431ELL;
  v13[1] = "MeshDeformationIndex";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77528, memory_order_acquire) & 1) == 0)
  {
    char v4 = (re *)__cxa_guard_acquire(&qword_26AF77528);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "meshIdentifier";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF77570 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_size_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "deformationIndex";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF77578 = v11;
      __cxa_guard_release(&qword_26AF77528);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF77570;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshDeformationIndex>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshDeformationIndex>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshDeformationIndex>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshDeformationIndex>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::MeshDeformationIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = "";
  *(void *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::MeshDeformationIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshDeformationIndex>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = "";
  *(void *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshDeformationIndex>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void *re::allocInfo_MeshDeformationAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77538, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77538))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77688, "MeshDeformationAsset");
    __cxa_guard_release(&qword_26AF77538);
  }
  return &unk_26AF77688;
}

void re::initInfo_MeshDeformationAsset(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xC334BB550BDDC75ALL;
  v10[1] = "MeshDeformationAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77540, memory_order_acquire) & 1) == 0)
  {
    char v4 = (re *)__cxa_guard_acquire(&qword_26AF77540);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::DeformationStackDefinition>>::get();
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "stackDefinitions";
      *(void *)(v6 + 16) = &qword_26AF77590;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF77580 = v6;
      uint64_t v7 = (re *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::DynamicArray<re::MeshDeformationIndex>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "meshDeformations";
      *(void *)(v8 + 16) = qword_26AF775D0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x2800000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77588 = v8;
      __cxa_guard_release(&qword_26AF77540);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF77580;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshDeformationAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshDeformationAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshDeformationAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshDeformationAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::IntrospectionInfo<re::DynamicArray<re::DeformationStackDefinition>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77550, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77550))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF77590);
    qword_26AF77590 = (uint64_t)&unk_26E6CE7A8;
    __cxa_guard_release(&qword_26AF77550);
  }
  if ((_MergedGlobals_66 & 1) == 0)
  {
    uint64_t v0 = re::introspect_DeformationStackDefinition((re::IntrospectionBase **)1);
    if ((_MergedGlobals_66 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_66 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF77590, 0);
      qword_26AF775A0 = 0x2800000003;
      dword_26AF775A8 = v2;
      word_26AF775AC = 0;
      *(void *)&xmmword_26AF775B0 = 0;
      *((void *)&xmmword_26AF775B0 + 1) = 0xFFFFFFFFLL;
      qword_26AF775C0 = v1;
      unk_26AF775C8 = 0;
      qword_26AF77590 = (uint64_t)&unk_26E6CE7A8;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF77590, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF775B0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshDeformationIndex>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77558, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF77558);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF775D0);
      qword_26AF775D0[0] = (uint64_t)&unk_26E6CE840;
      __cxa_guard_release(&qword_26AF77558);
    }
  }
  if ((byte_26AF77519 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77530;
    if (qword_26AF77530
      || (uint64_t v1 = re::allocInfo_MeshDeformationIndex(a1),
          qword_26AF77530 = (uint64_t)v1,
          re::initInfo_MeshDeformationIndex((re *)v1, v2),
          (byte_26AF77519 & 1) == 0))
    {
      byte_26AF77519 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF775D0, 0);
      unk_26AF775E0 = 0x2800000003;
      unk_26AF775E8 = v3;
      unk_26AF775EC = 0;
      *(void *)&xmmword_26AF775F0 = 0;
      *((void *)&xmmword_26AF775F0 + 1) = 0xFFFFFFFFLL;
      unk_26AF77600 = v1;
      unk_26AF77608 = 0;
      qword_26AF775D0[0] = (uint64_t)&unk_26E6CE840;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)qword_26AF775D0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF775F0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::MeshDeformationAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshDeformationAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::DeformationStackDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshDeformationAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshDeformationAsset>(uint64_t a1)
{
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::DeformationStackDefinition>::deinit(a1);
}

uint64_t *re::MeshDeformationAsset::assetType(re::MeshDeformationAsset *this)
{
  {
    re::MeshDeformationAsset::assetType(void)::type = (uint64_t)"MeshDeformation";
    qword_26879E608 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MeshDeformationAsset::assetType(void)::type);
  }
  return &re::MeshDeformationAsset::assetType(void)::type;
}

void *re::MeshDeformationAsset::init(re::MeshDeformationAsset *this, re::Allocator *a2)
{
  int v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(void *)this = v2;
  re::DynamicArray<re::DeformationStackDefinition>::setCapacity(this, 0);
  *((void *)this + 5) = v2;
  char v4 = (char *)this + 40;
  ++*((_DWORD *)v4 - 4);
  double result = re::DynamicArray<re::MeshDeformationIndex>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  return result;
}

void re::MeshDeformationAsset::init(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 440))
  {
    char v4 = a4;
    if (a3) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = &re::MeshDeformationAsset::init(re::MeshAsset const&,re::DefaultDeformationOptions const*,re::Allocator *)::kDefaultDeformationOptions;
    }
    if (!a4)
    {
    }
    *(void *)a1 = v4;
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a1, 0);
    *(void *)(a1 + 40) = v4;
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)(a1 + 40), 0);
    ++*(_DWORD *)(a1 + 64);
    if (*(unsigned char *)(a2 + 952)) {
      uint64_t v8 = (uint64_t *)(a2 + 416);
    }
    else {
      uint64_t v8 = (uint64_t *)(a2 + 24);
    }
    uint64_t v9 = *v8;
    if (*v8)
    {
      unint64_t v10 = 0;
      do
      {
        unint64_t v11 = *(void *)(a2 + 416);
        if (v11 <= v10)
        {
          uint64_t v14 = 0;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v15 = 136315906;
          uint64_t v16 = "operator[]";
          __int16 v17 = 1024;
          int v18 = 797;
          __int16 v19 = 2048;
          unint64_t v20 = v10;
          __int16 v21 = 2048;
          unint64_t v22 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v12 = (const StringID *)re::DataArray<re::MeshModel>::tryGet(*(void *)(a2 + 440) + 8, *(void *)(*(void *)(a2 + 432) + 8 * v10));
        re::StringID::StringID((re::StringID *)&v13, v12);
        re::MeshDeformationAsset::addDefaultModelStackDefinitions((_anonymous_namespace_ *)a1, (const char *)v12, 2, &v13, (uint64_t)v7);
        re::StringID::destroyString((re::StringID *)&v13);
        ++v10;
      }
      while (v9 != v10);
    }
  }
}

{
  uint64_t *v4;
  void *v7;
  uint64_t v8;
  StringID *v9;
  uint64_t v10;
  StringID v11;

  char v4 = a4;
  if (a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = &re::MeshDeformationAsset::init(re::MeshAssetData const&,re::DefaultDeformationOptions const*,re::Allocator *)::kDefaultDeformationOptions;
  }
  if (!a4)
  {
  }
  *(void *)a1 = v4;
  re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a1, 0);
  *(void *)(a1 + 40) = v4;
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)(a1 + 40), 0);
  ++*(_DWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(StringID **)(a2 + 32);
    unint64_t v10 = v8 << 9;
    do
    {
      re::StringID::StringID((re::StringID *)&v11, v9);
      re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshAssetModel>((_anonymous_namespace_ *)a1, v9, 2, &v11, (uint64_t)v7);
      re::StringID::destroyString((re::StringID *)&v11);
      v9 += 32;
      v10 -= 512;
    }
    while (v10);
  }
}

void re::MeshDeformationAsset::addDefaultModelStackDefinitions(_anonymous_namespace_ *a1, const char *a2, char a3, StringID *a4, uint64_t a5)
{
  re::StringID::StringID((re::StringID *)&v9, a4);
  re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshModel>(a1, a2, a3, &v9, a5);
  re::StringID::destroyString((re::StringID *)&v9);
}

_anonymous_namespace_ *re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshAssetModel>(_anonymous_namespace_ *result, void *a2, char a3, const StringID *a4, uint64_t a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  unint64_t v6 = a2[26];
  if (v6)
  {
    uint64_t v8 = a2;
    id v57 = result;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v11 = 0;
    unint64_t v58 = v6;
    long long v59 = v8;
    do
    {
      unint64_t v12 = v8[26];
      if (v12 <= v11)
      {
        *(void *)v70 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v66 = 136315906;
        *(void *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 797;
        *(_WORD *)&v66[18] = 2048;
        *(void *)&v66[20] = v11;
        __int16 v67 = 2048;
        *(void *)v68 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        uint64_t v65 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 468;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v11;
        __int16 v71 = 2048;
        v72 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        *(void *)v70 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v66 = 136315906;
        *(void *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(void *)&v66[20] = v5;
        __int16 v67 = 2048;
        *(void *)v68 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        *(void *)v70 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        unint64_t v51 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v66 = 136315906;
        *(void *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(void *)&v66[20] = v5;
        __int16 v67 = 2048;
        *(void *)v68 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        uint64_t v65 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 797;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v51;
        __int16 v71 = 2048;
        v72 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        uint64_t v65 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 797;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v51;
        __int16 v71 = 2048;
        v72 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v13 = v8[28];
      *(void *)&v68[2] = 0;
      memset(v66, 0, sizeof(v66));
      if (*(unsigned char *)a5 && (uint64_t v14 = v8[16]) != 0)
      {
        int v15 = (unsigned __int16 *)(v8[18] + 48);
        uint64_t v16 = 56 * v14;
        while (1)
        {
          int v17 = *v15;
          v15 += 28;
          if (v11 == v17) {
            break;
          }
          v16 -= 56;
          if (!v16) {
            goto LABEL_9;
          }
        }
        memset(v70, 0, 24);
        **(_DWORD **)&v70[16] = *(_DWORD *)(a5 + 8);
        *(void *)&long long v73 = 0x1954B86F1FEF5A4;
        *((void *)&v73 + 1) = "Blend Shape";
        long long v74 = *(_OWORD *)v70;
        uint64_t v29 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v29;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v10 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        char v18 = 1;
      }
      else
      {
LABEL_9:
        char v18 = 0;
      }
      if (*(unsigned char *)(a5 + 6))
      {
        memset(v70, 0, 24);
        **(unsigned char **)&v70[16] = *(unsigned char *)(a5 + 17);
        *(void *)&long long v73 = 0x70EBDC9CD6B5D4E4;
        *((void *)&v73 + 1) = "OffsetsDeformer";
        long long v74 = *(_OWORD *)v70;
        uint64_t v19 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v19;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v10 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        char v18 = 1;
      }
      char v20 = 0;
      uint64_t v21 = v13 + (v11 << 8);
      if (*(unsigned char *)(a5 + 1) && v8[21] > v11)
      {
        if (*(_DWORD *)(v8[23] + 144 * v11) == -1)
        {
          char v20 = 0;
        }
        else
        {
          uint64_t v61 = v13;
          char v22 = *(unsigned char *)(a5 + 13);
          uint64_t v23 = *(void *)(v21 + 16);
          char v60 = *(unsigned char *)(a5 + 12);
          if (v23)
          {
            int v24 = 0;
            int v25 = 0;
            long long v26 = (const char **)(*(void *)(v21 + 32) + 16);
            uint64_t v27 = 80 * v23;
            do
            {
              if ((unint64_t)*(v26 - 1)) {
                uint64_t v28 = *v26;
              }
              else {
                uint64_t v28 = (char *)v26 - 7;
              }
              uint64_t v10 = strcmp(v28, "vertexAdjacencies");
              if (v10)
              {
                uint64_t v10 = strcmp(v28, "accumulatedVertexValence");
                v25 |= v10 == 0;
              }
              else
              {
                int v24 = 1;
              }
              v26 += 10;
              v27 -= 80;
            }
            while (v27);
          }
          else
          {
            int v25 = 0;
            int v24 = 0;
          }
          char v30 = v24 & v25;
          if (v24 & v25) {
            char v31 = v22;
          }
          else {
            char v31 = 1;
          }
          memset(v70, 0, 24);
          uint64_t v32 = *(void *)&v70[16];
          **(unsigned char **)&v70[16] = v60;
          *(unsigned char *)(v32 + 1) = v31;
          *(void *)&long long v73 = 0x4550755B7A2;
          *((void *)&v73 + 1) = "Skinning";
          long long v74 = *(_OWORD *)v70;
          uint64_t v33 = *(void *)&v70[16];
          memset(v70, 0, 24);
          *(void *)&long long v75 = v33;
          re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
          unint64_t v6 = v58;
          uint64_t v8 = v59;
          uint64_t v13 = v61;
          if ((void)v74)
          {
            if (*((void *)&v74 + 1))
            {
              (*(void (**)(void))(*(void *)v74 + 40))();
              *((void *)&v74 + 1) = 0;
              *(void *)&long long v75 = 0;
            }
            *(void *)&long long v74 = 0;
          }
          re::StringID::destroyString((re::StringID *)&v73);
          uint64_t v10 = *(void *)v70;
          if (*(void *)v70 && *(void *)&v70[8]) {
            uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
          }
          v18 |= v30;
          char v20 = 1;
        }
      }
      if (*(unsigned char *)(a5 + 5))
      {
        *(void *)&long long v73 = a5 + 16;
        *((void *)&v73 + 1) = 1;
        memset(v70, 0, 24);
        re::FixedArray<unsigned char>::copy(v70, (const void **)&v73);
        *(void *)&long long v73 = 0x5ADE39698BF7F040;
        *((void *)&v73 + 1) = "SmoothDeformer";
        long long v74 = *(_OWORD *)v70;
        uint64_t v34 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v34;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void))(*(void *)v74 + 40))();
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v10 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        char v20 = 1;
        char v18 = 1;
      }
      if (*(unsigned char *)(a5 + 2) && (v18 & 1) != 0)
      {
        memset(v70, 0, 24);
        **(unsigned char **)&v70[16] = *(unsigned char *)(a5 + 14);
        *(void *)&long long v73 = 0xABCEC87F22A13454;
        *((void *)&v73 + 1) = "Renormalization";
        long long v74 = *(_OWORD *)v70;
        uint64_t v35 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v35;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void))(*(void *)v74 + 40))();
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v10 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
      }
      if (*(unsigned char *)(a5 + 3) && *(_DWORD *)(v13 + (v11 << 8) + 64))
      {
        *(void *)&long long v73 = 0xA6B838C1BF1BB512;
        *((void *)&v73 + 1) = "OpenSubdivViewIndependentComputeStep";
        *(void *)&long long v75 = 0;
        long long v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void))(*(void *)v74 + 40))();
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        *(void *)&long long v73 = 0xC6F7B7A81D0D03C8;
        *((void *)&v73 + 1) = "OpenSubdivViewDependentComputeStep";
        *(void *)&long long v75 = 0;
        long long v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void))(*(void *)v74 + 40))();
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
      char v36 = v20 ^ 1;
      if (!*(unsigned char *)(a5 + 4)) {
        char v36 = 1;
      }
      if ((v36 & 1) == 0)
      {
        memset(v70, 0, 24);
        **(unsigned char **)&v70[16] = *(unsigned char *)(a5 + 15);
        *(void *)&long long v73 = 0x32458CCC0A585AB0;
        *((void *)&v73 + 1) = "Bounding Box Calculation";
        long long v74 = *(_OWORD *)v70;
        uint64_t v37 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v37;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void))(*(void *)v74 + 40))();
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        if (*(void *)v70 && *(void *)&v70[8]) {
          (*(void (**)(void))(**(void **)v70 + 40))();
        }
      }
      uint64_t v38 = *(void *)(v21 + 16);
      if (v38)
      {
        id v39 = (void *)(*(void *)(v21 + 32) + 16);
        uint64_t v40 = 80 * v38;
        while (1)
        {
          long long v41 = (*(v39 - 1) & 1) != 0 ? (const char *)*v39 : (char *)v39 - 7;
          if (!strcmp(v41, "simplifiedVertexPositions")) {
            break;
          }
          v39 += 10;
          v40 -= 80;
          if (!v40) {
            goto LABEL_105;
          }
        }
        *(void *)&long long v73 = 0x906B1D4E64D3F318;
        *((void *)&v73 + 1) = "PrepareSimplifiedMeshBuffer";
        *(void *)&long long v75 = 0;
        long long v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void))(*(void *)v74 + 40))();
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
LABEL_105:
      if (*(unsigned char *)(a5 + 7))
      {
        uint64_t v42 = *(void *)(v21 + 16);
        if (v42)
        {
          long long v43 = (void *)(*(void *)(v21 + 32) + 16);
          uint64_t v44 = 80 * v42;
          while (1)
          {
            unint64_t v45 = (*(v43 - 1) & 1) != 0 ? (const char *)*v43 : (char *)v43 - 7;
            unint64_t v46 = (_anonymous_namespace_ *)strcmp(v45, "tension");
            if (!v46) {
              break;
            }
            v43 += 10;
            v44 -= 80;
            if (!v44) {
              goto LABEL_121;
            }
          }
          *(void *)&long long v73 = a5 + 18;
          *((void *)&v73 + 1) = 1;
          memset(v70, 0, 24);
          re::FixedArray<unsigned char>::copy(v70, (const void **)&v73);
          *(void *)&long long v73 = 0x241C51C064;
          *((void *)&v73 + 1) = "Tension";
          long long v74 = *(_OWORD *)v70;
          uint64_t v47 = *(void *)&v70[16];
          memset(v70, 0, 24);
          *(void *)&long long v75 = v47;
          re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
          if ((void)v74)
          {
            if (*((void *)&v74 + 1))
            {
              (*(void (**)(void))(*(void *)v74 + 40))();
              *((void *)&v74 + 1) = 0;
              *(void *)&long long v75 = 0;
            }
            *(void *)&long long v74 = 0;
          }
          re::StringID::destroyString((re::StringID *)&v73);
          if (*(void *)v70 && *(void *)&v70[8]) {
            (*(void (**)(void))(**(void **)v70 + 40))();
          }
        }
      }
LABEL_121:
      uint64_t v5 = v63;
      if ((unint64_t)v63 <= v11) {
        goto LABEL_146;
      }
      uint64_t v48 = v64;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v64 + 40 * v11, (uint64_t)v66);
      uint64_t v10 = re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v66);
      ++v11;
    }
    while (v11 != v6);
    if (v6 >= 2)
    {
      uint64_t v49 = (uint64_t *)(v48 + 72);
      uint64_t v50 = 1;
      while (1)
      {
        if (v5 == (uint64_t *)v50) {
          goto LABEL_147;
        }
        if (!re::DynamicArray<re::DeformationDefinition>::operator==(v48, *(v49 - 2), *v49)) {
          break;
        }
        ++v50;
        v49 += 5;
        if (v6 == v50) {
          goto LABEL_128;
        }
      }
      unint64_t v51 = 0;
      while ((uint64_t *)v51 != v5)
      {
        StringID v9 = *(uint64_t **)(v48 + 40 * v51 + 16);
        if (v9)
        {
          uint64_t v52 = (void *)*((void *)v57 + 2);
          if (v52)
          {
            uint64_t v8 = 0;
            uint64_t v53 = *((void *)v57 + 4);
            uint64_t v54 = *(void *)(v48 + 40 * v51 + 32);
            while (!re::DynamicArray<re::DeformationDefinition>::operator==(v53, (uint64_t)v9, v54))
            {
              uint64_t v8 = (void *)((char *)v8 + 1);
              v53 += 40;
              if (v52 == v8) {
                goto LABEL_137;
              }
            }
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            StringID v9 = (uint64_t *)v59[26];
            if ((unint64_t)v9 <= v51) {
              goto LABEL_150;
            }
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(v59[28] + (v51 << 8) + 72));
            uint64_t v69 = (uint64_t)v8;
          }
          else
          {
LABEL_137:
            re::DynamicArray<re::DeformationStackDefinition>::add(v57, v48 + 40 * v51);
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            uint64_t v8 = (void *)v59[26];
            if ((unint64_t)v8 <= v51) {
              goto LABEL_149;
            }
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(v59[28] + (v51 << 8) + 72));
            uint64_t v69 = *((void *)v57 + 2) - 1;
          }
          re::DynamicArray<re::MeshDeformationIndex>::add((void *)v57 + 5, (uint64_t)v66);
          re::StringID::destroyString((re::StringID *)&v66[24]);
          re::StringID::destroyString((re::StringID *)&v66[8]);
          unint64_t v6 = v58;
        }
        if (++v51 == v6) {
          return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
        }
      }
      goto LABEL_148;
    }
LABEL_128:
    if (*(void *)(v48 + 16))
    {
      re::DynamicArray<re::DeformationStackDefinition>::add(v57, v48);
      LOBYTE(v73) = a3;
      re::StringID::StringID((re::StringID *)((char *)&v73 + 8), a4);
      *((void *)&v74 + 1) = 0;
      *(void *)&long long v75 = "";
      *((void *)&v75 + 1) = *((void *)v57 + 2) - 1;
      re::DynamicArray<re::MeshDeformationIndex>::add((void *)v57 + 5, (uint64_t)&v73);
      re::StringID::destroyString((re::StringID *)((char *)&v74 + 8));
      re::StringID::destroyString((re::StringID *)((char *)&v73 + 8));
    }
    return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
  }
  return result;
}

uint64_t re::DynamicArray<re::DeformationStackDefinition>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::DynamicArray<re::DeformationDefinition>::deinit(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshDeformationIndex>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        unint64_t v6 = (re::StringID *)(v3 + 24);
        do
        {
          re::StringID::destroyString(v6);
          re::StringID::destroyString((re::StringID *)((char *)v6 - 16));
          unint64_t v6 = (re::StringID *)((char *)v6 + 48);
          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MeshDeformationAsset::addDefaultModelStackDefinitionsForAllInstances(re::MeshDeformationAsset *this, const re::MeshAsset *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 55))
  {
    uint64_t v3 = *((void *)a2 + 47);
    if (v3)
    {
      for (unint64_t i = 0; i != v3; ++i)
      {
        unint64_t v6 = *((void *)a2 + 47);
        if (v6 <= i)
        {
          uint64_t v10 = 0;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v19 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v11 = 136315906;
          unint64_t v12 = "operator[]";
          __int16 v13 = 1024;
          int v14 = 797;
          __int16 v15 = 2048;
          unint64_t v16 = i;
          __int16 v17 = 2048;
          unint64_t v18 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v7 = re::DataArray<re::MeshInstance>::tryGet(*((void *)a2 + 55) + 72, *(void *)(*((void *)a2 + 49) + 8 * i));
        uint64_t v8 = (const char *)re::DataArray<re::MeshModel>::tryGet(*((void *)a2 + 55) + 8, *(void *)(v7 + 16));
        re::StringID::StringID((re::StringID *)&v9, (const StringID *)v7);
        re::MeshDeformationAsset::addDefaultModelStackDefinitions(this, v8, 1, &v9, (uint64_t)&re::MeshDeformationAsset::addDefaultModelStackDefinitionsForAllInstances(re::MeshAsset const&)::kDefaultDeformationOptions);
        re::StringID::destroyString((re::StringID *)&v9);
      }
    }
  }
}

uint64_t re::MeshDeformationAsset::addDefaultModelStackDefinitionForModel(re::MeshDeformationAsset *this, const re::MeshAsset *a2, unint64_t a3)
{
  if (*((void *)a2 + 52) <= a3) {
    return 0;
  }
  uint64_t v3 = *((void *)a2 + 55);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = (const StringID *)re::DataArray<re::MeshModel>::tryGet(v3 + 8, *(void *)(*((void *)a2 + 54) + 8 * a3));
  re::StringID::StringID((re::StringID *)&v7, v5);
  re::MeshDeformationAsset::addDefaultModelStackDefinitions(this, (const char *)v5, 2, &v7, (uint64_t)&re::MeshDeformationAsset::addDefaultModelStackDefinitionForModel(re::MeshAsset const&,unsigned long)::kDefaultDeformationOptions);
  re::StringID::destroyString((re::StringID *)&v7);
  return 1;
}

uint64_t re::MeshDeformationAsset::addDefaultModelStackDefinitionForInstance(re::MeshDeformationAsset *this, const re::MeshAsset *a2, unint64_t a3)
{
  if (*((void *)a2 + 47) <= a3) {
    return 0;
  }
  uint64_t v4 = *((void *)a2 + 55);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = re::DataArray<re::MeshInstance>::tryGet(v4 + 72, *(void *)(*((void *)a2 + 49) + 8 * a3));
  StringID v7 = (const char *)re::DataArray<re::MeshModel>::tryGet(*((void *)a2 + 55) + 8, *(void *)(v6 + 16));
  re::StringID::StringID((re::StringID *)&v10, (const StringID *)v6);
  uint64_t v8 = 1;
  re::MeshDeformationAsset::addDefaultModelStackDefinitions(this, v7, 1, &v10, (uint64_t)&re::MeshDeformationAsset::addDefaultModelStackDefinitionForInstance(re::MeshAsset const&,unsigned long)::kDefaultDeformationOptions);
  re::StringID::destroyString((re::StringID *)&v10);
  return v8;
}

_anonymous_namespace_ *re::MeshDeformationAsset::addDefaultModelStackDefinitionsImpl<re::MeshModel>(_anonymous_namespace_ *result, const char *a2, char a3, const StringID *a4, uint64_t a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  unint64_t v7 = *((void *)a2 + 7);
  if (v7)
  {
    StringID v9 = a2;
    long long v59 = result;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v60 = v7;
    unint64_t v12 = 0;
    unint64_t v58 = v9;
    do
    {
      unint64_t v13 = *((void *)v9 + 7);
      if (v13 <= v12)
      {
        *(void *)v70 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v66 = 136315906;
        *(void *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 476;
        *(_WORD *)&v66[18] = 2048;
        *(void *)&v66[20] = v12;
        __int16 v67 = 2048;
        *(void *)v68 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        uint64_t v65 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 468;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v12;
        __int16 v71 = 2048;
        v72 = (uint64_t *)v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        *(void *)v70 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v66 = 136315906;
        *(void *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(void *)&v66[20] = v6;
        __int16 v67 = 2048;
        *(void *)v68 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_139:
        *(void *)v70 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v66 = 136315906;
        *(void *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 468;
        *(_WORD *)&v66[18] = 2048;
        *(void *)&v66[20] = v6;
        __int16 v67 = 2048;
        *(void *)v68 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        uint64_t v65 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 476;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v5;
        __int16 v71 = 2048;
        v72 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        uint64_t v65 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        *(_WORD *)&v70[12] = 1024;
        *(_DWORD *)&v70[14] = 476;
        *(_WORD *)&v70[18] = 2048;
        *(void *)&v70[20] = v5;
        __int16 v71 = 2048;
        v72 = (uint64_t *)v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v14 = *((void *)v9 + 8);
      *(void *)&v68[2] = 0;
      memset(v66, 0, sizeof(v66));
      if (*(unsigned char *)a5
        && (uint64_t v15 = *((void *)v9 + 12)) != 0
        && *(void *)(v15 + 40) > v12
        && *(_DWORD *)(*(void *)(v15 + 48) + 4 * v12) != -1)
      {
        memset(v70, 0, 24);
        **(_DWORD **)&v70[16] = *(_DWORD *)(a5 + 8);
        *(void *)&long long v73 = 0x1954B86F1FEF5A4;
        *((void *)&v73 + 1) = "Blend Shape";
        long long v74 = *(_OWORD *)v70;
        uint64_t v16 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v16;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v11 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        char v17 = 1;
      }
      else
      {
        char v17 = 0;
      }
      if (*(unsigned char *)(a5 + 6))
      {
        memset(v70, 0, 24);
        **(unsigned char **)&v70[16] = *(unsigned char *)(a5 + 17);
        *(void *)&long long v73 = 0x70EBDC9CD6B5D4E4;
        *((void *)&v73 + 1) = "OffsetsDeformer";
        long long v74 = *(_OWORD *)v70;
        uint64_t v18 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v18;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v11 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        char v17 = 1;
      }
      if (*(unsigned char *)(a5 + 1)
        && (uint64_t v19 = *((void *)v9 + 22)) != 0
        && *(void *)(v19 + 8) > v12
        && *(_DWORD *)(*(void *)(v19 + 16) + 72 * v12 + 4) != -1)
      {
        char v55 = *(unsigned char *)(a5 + 13);
        char v56 = *(unsigned char *)(a5 + 12);
        uint64_t v57 = v14;
        uint64_t v20 = v14 + 560 * v12;
        uint64_t v21 = *(void *)(v20 + 344);
        if (v21)
        {
          int v22 = 0;
          int v23 = 0;
          uint64_t v24 = 16 * v21;
          int v25 = (const char **)(*(void *)(v20 + 352) + 8);
          do
          {
            long long v26 = *v25;
            uint64_t v11 = strcmp(*v25, "vertexAdjacencies");
            if (v11)
            {
              uint64_t v11 = strcmp(v26, "accumulatedVertexValence");
              v23 |= v11 == 0;
            }
            else
            {
              int v22 = 1;
            }
            v25 += 2;
            v24 -= 16;
          }
          while (v24);
        }
        else
        {
          int v23 = 0;
          int v22 = 0;
        }
        char v42 = v22 & v23;
        if (v22 & v23) {
          char v43 = v55;
        }
        else {
          char v43 = 1;
        }
        memset(v70, 0, 24);
        uint64_t v44 = *(void *)&v70[16];
        **(unsigned char **)&v70[16] = v56;
        *(unsigned char *)(v44 + 1) = v43;
        *(void *)&long long v73 = 0x4550755B7A2;
        *((void *)&v73 + 1) = "Skinning";
        long long v74 = *(_OWORD *)v70;
        uint64_t v45 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v45;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        uint64_t v14 = v57;
        StringID v9 = v58;
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v11 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        v17 |= v42;
        char v27 = 1;
      }
      else
      {
        char v27 = 0;
      }
      if (*(unsigned char *)(a5 + 5))
      {
        *(void *)&long long v73 = a5 + 16;
        *((void *)&v73 + 1) = 1;
        memset(v70, 0, 24);
        re::FixedArray<unsigned char>::copy(v70, (const void **)&v73);
        *(void *)&long long v73 = 0x5ADE39698BF7F040;
        *((void *)&v73 + 1) = "SmoothDeformer";
        long long v74 = *(_OWORD *)v70;
        uint64_t v28 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v28;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v11 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
        char v27 = 1;
        char v17 = 1;
      }
      if (*(unsigned char *)(a5 + 2) && (v17 & 1) != 0)
      {
        memset(v70, 0, 24);
        **(unsigned char **)&v70[16] = *(unsigned char *)(a5 + 14);
        *(void *)&long long v73 = 0xABCEC87F22A13454;
        *((void *)&v73 + 1) = "Renormalization";
        long long v74 = *(_OWORD *)v70;
        uint64_t v29 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v29;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        uint64_t v11 = *(void *)v70;
        if (*(void *)v70 && *(void *)&v70[8]) {
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)v70 + 40))();
        }
      }
      uint64_t v5 = "tension";
      if (*(unsigned char *)(a5 + 3) && *(_DWORD *)(v14 + 560 * v12 + 532))
      {
        *(void *)&long long v73 = 0xA6B838C1BF1BB512;
        *((void *)&v73 + 1) = "OpenSubdivViewIndependentComputeStep";
        *(void *)&long long v75 = 0;
        long long v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        *(void *)&long long v73 = 0xC6F7B7A81D0D03C8;
        *((void *)&v73 + 1) = "OpenSubdivViewDependentComputeStep";
        *(void *)&long long v75 = 0;
        long long v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
      char v30 = v27 ^ 1;
      if (!*(unsigned char *)(a5 + 4)) {
        char v30 = 1;
      }
      if ((v30 & 1) == 0)
      {
        memset(v70, 0, 24);
        **(unsigned char **)&v70[16] = *(unsigned char *)(a5 + 15);
        *(void *)&long long v73 = 0x32458CCC0A585AB0;
        *((void *)&v73 + 1) = "Bounding Box Calculation";
        long long v74 = *(_OWORD *)v70;
        uint64_t v31 = *(void *)&v70[16];
        memset(v70, 0, 24);
        *(void *)&long long v75 = v31;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
        if (*(void *)v70 && *(void *)&v70[8]) {
          (*(void (**)(void))(**(void **)v70 + 40))();
        }
      }
      uint64_t v32 = v14 + 560 * v12;
      uint64_t v33 = *(void *)(v32 + 344);
      if (v33)
      {
        uint64_t v34 = (const char **)(*(void *)(v32 + 352) + 8);
        uint64_t v35 = 16 * v33;
        while (strcmp(*v34, "simplifiedVertexPositions"))
        {
          v34 += 2;
          v35 -= 16;
          if (!v35) {
            goto LABEL_87;
          }
        }
        *(void *)&long long v73 = 0x906B1D4E64D3F318;
        *((void *)&v73 + 1) = "PrepareSimplifiedMeshBuffer";
        *(void *)&long long v75 = 0;
        long long v74 = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
        if ((void)v74)
        {
          if (*((void *)&v74 + 1))
          {
            (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
            *((void *)&v74 + 1) = 0;
            *(void *)&long long v75 = 0;
          }
          *(void *)&long long v74 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v73);
      }
LABEL_87:
      if (*(unsigned char *)(a5 + 7))
      {
        uint64_t v36 = *(void *)(v32 + 344);
        if (v36)
        {
          uint64_t v37 = (const char **)(*(void *)(v32 + 352) + 8);
          uint64_t v38 = 16 * v36;
          while (1)
          {
            id v39 = (_anonymous_namespace_ *)strcmp(*v37, "tension");
            if (!v39) {
              break;
            }
            v37 += 2;
            v38 -= 16;
            if (!v38) {
              goto LABEL_100;
            }
          }
          *(void *)&long long v73 = a5 + 18;
          *((void *)&v73 + 1) = 1;
          memset(v70, 0, 24);
          re::FixedArray<unsigned char>::copy(v70, (const void **)&v73);
          *(void *)&long long v73 = 0x241C51C064;
          *((void *)&v73 + 1) = "Tension";
          long long v74 = *(_OWORD *)v70;
          uint64_t v40 = *(void *)&v70[16];
          memset(v70, 0, 24);
          *(void *)&long long v75 = v40;
          re::DynamicArray<re::DeformationDefinition>::add(v66, (uint64_t *)&v73);
          if ((void)v74)
          {
            if (*((void *)&v74 + 1))
            {
              (*(void (**)(void, void))(*(void *)v74 + 40))(v74, v75);
              *((void *)&v74 + 1) = 0;
              *(void *)&long long v75 = 0;
            }
            *(void *)&long long v74 = 0;
          }
          re::StringID::destroyString((re::StringID *)&v73);
          if (*(void *)v70 && *(void *)&v70[8]) {
            (*(void (**)(void))(**(void **)v70 + 40))();
          }
        }
      }
LABEL_100:
      uint64_t v6 = v63;
      if ((unint64_t)v63 <= v12) {
        goto LABEL_137;
      }
      uint64_t v41 = v64;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v64 + 40 * v12, (uint64_t)v66);
      uint64_t v11 = re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v66);
      ++v12;
    }
    while (v12 != v60);
    unint64_t v46 = (const char *)v60;
    uint64_t v47 = v59;
    if (v60 >= 2)
    {
      uint64_t v48 = (uint64_t *)(v41 + 72);
      uint64_t v49 = 1;
      while (1)
      {
        if (v6 == (const char *)v49) {
          goto LABEL_138;
        }
        if (!re::DynamicArray<re::DeformationDefinition>::operator==(v41, *(v48 - 2), *v48)) {
          break;
        }
        ++v49;
        v48 += 5;
        if (v60 == v49) {
          goto LABEL_120;
        }
      }
      uint64_t v5 = 0;
      uint64_t v61 = (_anonymous_namespace_ *)((char *)v59 + 40);
      while (v5 != v6)
      {
        StringID v9 = *(const char **)(v41 + 40 * (void)v5 + 16);
        if (v9)
        {
          uint64_t v50 = (uint64_t *)*((void *)v47 + 2);
          if (v50)
          {
            StringID v10 = 0;
            uint64_t v51 = *((void *)v59 + 4);
            uint64_t v52 = *(void *)(v41 + 40 * (void)v5 + 32);
            while (!re::DynamicArray<re::DeformationDefinition>::operator==(v51, (uint64_t)v9, v52))
            {
              StringID v10 = (uint64_t *)((char *)v10 + 1);
              v51 += 40;
              if (v50 == v10) {
                goto LABEL_129;
              }
            }
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            StringID v9 = (const char *)*((void *)v58 + 7);
            unint64_t v46 = (const char *)v60;
            if (v9 <= v5) {
              goto LABEL_141;
            }
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(*((void *)v58 + 8) + 560 * (void)v5 + 504));
            uint64_t v69 = (uint64_t)v10;
            re::DynamicArray<re::MeshDeformationIndex>::add(v61, (uint64_t)v66);
            re::StringID::destroyString((re::StringID *)&v66[24]);
            re::StringID::destroyString((re::StringID *)&v66[8]);
            uint64_t v47 = v59;
          }
          else
          {
LABEL_129:
            uint64_t v47 = v59;
            re::DynamicArray<re::DeformationStackDefinition>::add(v59, v41 + 40 * (void)v5);
            v66[0] = a3;
            re::StringID::StringID((re::StringID *)&v66[8], a4);
            StringID v10 = (uint64_t *)*((void *)v58 + 7);
            if (v10 <= (uint64_t *)v5) {
              goto LABEL_140;
            }
            re::StringID::StringID((re::StringID *)&v66[24], (const StringID *)(*((void *)v58 + 8) + 560 * (void)v5 + 504));
            uint64_t v69 = *((void *)v59 + 2) - 1;
            re::DynamicArray<re::MeshDeformationIndex>::add(v61, (uint64_t)v66);
            re::StringID::destroyString((re::StringID *)&v66[24]);
            re::StringID::destroyString((re::StringID *)&v66[8]);
            unint64_t v46 = (const char *)v60;
          }
        }
        if (++v5 == v46) {
          return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
        }
      }
      goto LABEL_139;
    }
LABEL_120:
    if (*(void *)(v41 + 16))
    {
      re::DynamicArray<re::DeformationStackDefinition>::add(v59, v41);
      LOBYTE(v73) = a3;
      re::StringID::StringID((re::StringID *)((char *)&v73 + 8), a4);
      *((void *)&v74 + 1) = 0;
      *(void *)&long long v75 = "";
      *((void *)&v75 + 1) = *((void *)v59 + 2) - 1;
      re::DynamicArray<re::MeshDeformationIndex>::add((void *)v59 + 5, (uint64_t)&v73);
      re::StringID::destroyString((re::StringID *)((char *)&v74 + 8));
      re::StringID::destroyString((re::StringID *)((char *)&v73 + 8));
    }
    return (_anonymous_namespace_ *)re::FixedArray<re::DeformationStackDefinition>::deinit(&v62);
  }
  return result;
}

void re::MeshDeformationAsset::forceVertexFrameSkinning(re::MeshDeformationAsset *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return;
  }
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = v2 + 40 * v1;
  do
  {
    unint64_t v4 = *(void *)(v2 + 16);
    if (!v4) {
      goto LABEL_24;
    }
    unint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t v8 = 16;
    while (1)
    {
      unint64_t v9 = *(void *)(v7 + v8 - 16) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && v9 == 0xABCEC87F22A13454) {
        break;
      }
      if (v9 == 0x4550755B7A2)
      {
        uint64_t v11 = *(char **)(v7 + v8 - 8);
        BOOL v6 = v11 == "Skinning" || strcmp(v11, "Skinning") == 0;
        goto LABEL_14;
      }
LABEL_13:
      BOOL v6 = 0;
LABEL_14:
      ++v5;
      v8 += 40;
      if (v4 == v5) {
        goto LABEL_24;
      }
    }
    StringID v10 = *(char **)(v7 + v8 - 8);
    if (v10 != "Renormalization" && strcmp(v10, "Renormalization")) {
      goto LABEL_13;
    }
    uint64_t v12 = v3;
    if (v4 <= v5 - 1)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_27:
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v13 = v7 + v8;
    if (*(void *)(v7 + v8 - 32) != 2)
    {
      uint64_t v14 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v13 - 40));
      **(_WORD **)(v13 - 24) = 0;
      unint64_t v4 = *(void *)(v2 + 16);
    }
    *(unsigned char *)(*(void *)(v13 - 24) + 1) = 1;
    if (v4 <= v5) {
      goto LABEL_27;
    }
    uint64_t v15 = *(void *)(v2 + 32);
    if (v4 - 1 > v5)
    {
      uint64_t v16 = v15 + 40 * v4;
      char v17 = (uint64_t *)(v15 + v8);
      uint64_t v18 = *(void *)(v16 - 40);
      uint64_t v19 = *(void *)(v16 - 32);
      *(void *)(v16 - 40) = 0;
      *(void *)(v16 - 32) = "";
      uint64_t v20 = *(v17 - 1);
      unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *(v17 - 2) & 1;
      *(v17 - 1) = v19;
      *(void *)&long long v24 = v21;
      *((void *)&v24 + 1) = v20;
      *(v17 - 2) = v18;
      re::StringID::destroyString((re::StringID *)&v24);
      re::FixedArray<float>::operator=(v17, (uint64_t *)(v16 - 24));
      unint64_t v4 = *(void *)(v2 + 16);
      uint64_t v15 = *(void *)(v2 + 32);
    }
    uint64_t v3 = v12;
    uint64_t v22 = v15 + 40 * v4;
    int v23 = (re::StringID *)(v22 - 40);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v22 - 24));
    re::StringID::destroyString(v23);
    --*(void *)(v2 + 16);
    ++*(_DWORD *)(v2 + 24);
LABEL_24:
    v2 += 40;
  }
  while (v2 != v3);
}

void re::MeshDeformationAssetLoader::initializeUsedDeformers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 181))
    {
      uint64_t v3 = *(void **)(v2 + 40);
      if (v3)
      {
        unint64_t v5 = (os_unfair_lock_s *)(a1 + 16);
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
        uint64_t v6 = *(void *)(a2 + 16);
        if (v6)
        {
          uint64_t v7 = *(void *)(a2 + 32);
          uint64_t v8 = v7 + 40 * v6;
          do
          {
            uint64_t v9 = *(void *)(v7 + 16);
            if (v9)
            {
              StringID v10 = *(void **)(v7 + 32);
              uint64_t v11 = 40 * v9;
              do
              {
                uint64_t v12 = (unsigned __int8 *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v3 + 171), v10);
                if (v12)
                {
                  uint64_t v13 = v3[5 * *v12 + 81];
                  (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, *v3);
                }
                v10 += 5;
                v11 -= 40;
              }
              while (v11);
            }
            v7 += 40;
          }
          while (v7 != v8);
        }
        os_unfair_lock_unlock(v5);
      }
    }
  }
}

re *re::MeshDeformationAssetLoader::unloadAsset(re::MeshDeformationAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"unloadAsset", 671, a2);
}

re *re::internal::destroyPersistent<re::MeshDeformationAsset>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a3 + 40);
    re::DynamicArray<re::DeformationStackDefinition>::deinit(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::MeshDeformationAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL re::MeshDeformationAssetLoader::isSupportedSourceExtension(re::MeshDeformationAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "remeshdeforms") == 0;
}

uint64_t re::MeshDeformationAssetLoader::introspectionType(re::MeshDeformationAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77568, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77568))
  {
    qword_26AF77560 = re::internal::getOrCreateInfo((re::internal *)"MeshDeformationAsset", (uint64_t (*)(re::internal *))re::allocInfo_MeshDeformationAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MeshDeformationAsset, (void (*)(re::IntrospectionBase *))&unk_26AF77548, 0);
    __cxa_guard_release(&qword_26AF77568);
  }
  return qword_26AF77560;
}

void re::MeshDeformationAssetLoader::~MeshDeformationAssetLoader(re::MeshDeformationAssetLoader *this)
{
}

void *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DeformationStackDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::DeformationStackDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationStackDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DeformationStackDefinition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DeformationStackDefinition>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::DeformationStackDefinition>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DeformationStackDefinition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::DeformationStackDefinition>::add(this, (uint64_t)v10);
  re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * *((void *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationStackDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DeformationStackDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void *re::DynamicArray<re::DeformationStackDefinition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::DeformationStackDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 40 * v9;
        uint64_t v11 = v7 + 4;
        do
        {
          *uint64_t v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 4) = *(void *)v8;
          *(v11 - 3) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 2);
          *(v11 - 2) = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          uint64_t v14 = *v11;
          *uint64_t v11 = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<re::DeformationDefinition>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::DeformationStackDefinition>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::DynamicArray<re::DeformationDefinition>::deinit(v3[4] + v8);
      ++v9;
      v8 += 40;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::DynamicArray<re::DeformationDefinition>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::FixedArray<CoreIKTransform>::deinit(v3 + 2);
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 5;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(uint64_t **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::DeformationStackDefinition>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::DeformationStackDefinition>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 40 * v4;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)(v5 + 8) = v6;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v7;
  uint64_t v8 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::DeformationStackDefinition>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DeformationStackDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DeformationStackDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::DeformationStackDefinition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::DeformationStackDefinition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::DeformationStackDefinition>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::DynamicArray<re::DeformationStackDefinition>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 40 * v2;
    do
    {
      uint64_t result = re::DynamicArray<re::DeformationDefinition>::deinit(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationStackDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshDeformationIndex>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshDeformationIndex>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshDeformationIndex>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshDeformationIndex>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshDeformationIndex>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshDeformationIndex>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshDeformationIndex>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshDeformationIndex>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  v11[0] = 0;
  v11[1] = "";
  v12[0] = 0;
  v12[1] = "";
  uint64_t v12[2] = 0;
  re::DynamicArray<re::MeshDeformationIndex>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 48 * *((void *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshDeformationIndex>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshDeformationIndex>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void *re::DynamicArray<re::MeshDeformationIndex>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::MeshDeformationIndex>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[6 * v9];
        uint64_t v11 = v7;
        do
        {
          *(unsigned char *)uint64_t v11 = *(unsigned char *)v8;
          uint64_t v13 = (re::StringID *)(v8 + 1);
          char v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          void v11[2] = v8[2];
          void v8[2] = "";
          v8[1] = 0;
          uint64_t v15 = v8[3];
          uint64_t v14 = (re::StringID *)(v8 + 3);
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[3] = *(void *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          uint64_t v16 = *((void *)v14 + 2);
          v11[4] = *((void *)v14 + 1);
          *(void *)uint64_t v14 = 0;
          *((void *)v14 + 1) = "";
          v11[5] = v16;
          re::StringID::destroyString(v14);
          re::StringID::destroyString(v13);
          uint64_t v8 = (void *)((char *)v14 + 24);
          v11 += 6;
        }
        while (v8 != v10);
        uint64_t v8 = (void *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::MeshDeformationIndex>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 48 * a2 + 24;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      ++v9;
      v8 += 48;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 48 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(unsigned char *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = "";
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = "";
        *(void *)(v7 + 40) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::MeshDeformationIndex>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshDeformationIndex>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 48 * v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + 8) = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = "";
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(v5 + 24) = *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = "";
  *(void *)(v5 + 40) = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::MeshDeformationIndex>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshDeformationIndex>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshDeformationIndex>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshDeformationIndex>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshDeformationIndex>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::MeshDeformationIndex>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 48 * v2;
    unint64_t v4 = (re::StringID *)(*(void *)(a1 + 32) + 24);
    do
    {
      re::StringID::destroyString(v4);
      re::StringID::destroyString((re::StringID *)((char *)v4 - 16));
      unint64_t v4 = (re::StringID *)((char *)v4 + 48);
      v3 -= 48;
    }
    while (v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshDeformationIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::FixedArray<re::DeformationStackDefinition>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40 * a3, 8);
  a1[2] = result;
  if (!result)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)(result + 32) = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)uint64_t result = 0;
      *(_DWORD *)(result + 24) = 0;
      result += 40;
      --v7;
    }
    while (v7);
  }
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *re::DynamicArray<re::DeformationDefinition>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::DeformationDefinition>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = (unint64_t *)(v3[4] + 40 * v4);
  uint64_t v6 = *a2;
  *uint64_t v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  unint64_t v7 = a2[3];
  v5[2] = a2[2];
  v5[3] = v7;
  a2[2] = 0;
  a2[3] = 0;
  unint64_t v8 = v5[4];
  v5[4] = a2[4];
  a2[4] = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::DeformationDefinition>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DeformationDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DeformationDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::DeformationDefinition>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::DeformationDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[5 * v9];
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          *uint64_t v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *uint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *unint64_t v8 = 0;
          v8[1] = (uint64_t)"";
          void v11[2] = 0;
          v11[3] = 0;
          v11[4] = 0;
          void v11[2] = v8[2];
          void v8[2] = 0;
          uint64_t v13 = v11[4];
          uint64_t v14 = v8[4];
          v11[3] = v8[3];
          v11[4] = v14;
          v8[3] = 0;
          v8[4] = v13;
          re::FixedArray<CoreIKTransform>::deinit(v8 + 2);
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 5;
          v11 += 5;
        }
        while (v8 != v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::FixedArray<unsigned char>::copy(void *result, const void **a2)
{
  size_t v2 = result[1];
  if ((const void *)v2 == a2[1])
  {
    if (v2)
    {
      uint64_t v3 = *a2;
      unint64_t v4 = (void *)result[2];
      return memmove(v4, v3, v2);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::DynamicArray<re::DeformationDefinition>::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) != a2) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 40 * a2;
  while (1)
  {
    BOOL result = re::StringID::operator==((void *)v4, (void *)a3);
    if (!result) {
      break;
    }
    size_t v7 = *(void *)(v4 + 24);
    if (v7 != *(void *)(a3 + 24) || memcmp(*(const void **)(v4 + 32), *(const void **)(a3 + 32), v7)) {
      return 0;
    }
    v4 += 40;
    a3 += 40;
    if (v4 == v5) {
      return 1;
    }
  }
  return result;
}

void *re::FixedArray<re::DeformationStackDefinition>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = 40 * v2;
      do
      {
        re::DynamicArray<re::DeformationDefinition>::deinit(v4);
        v4 += 40;
        v5 -= 40;
      }
      while (v5);
      BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

uint64_t *re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType()
{
  {
    re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType(void)::type = (uint64_t)"AnimationScene";
    qword_2687735B8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType(void)::type;
}

void re::AnimationSceneEntityData::prepareEntityHierarchyForAnimationScene(re::AnimationSceneEntityData *this, re::ecs2::Entity *a2, re::ecs2::Entity *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a2 + 21);
  size_t v7 = (_anonymous_namespace_ *)snprintf(__str, 0x2BuLL, "%s%p", "animationsceneintialized::", this);
  if ((int)v7 >= 42) {
    int v8 = 42;
  }
  else {
    int v8 = (int)v7;
  }
  size_t v9 = v8;
  v11[0] = 0;
  v11[1] = "";
  if (!v6)
  {
    uint64_t v10 = (re::KeyValueStore *)(re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 32);
    goto LABEL_8;
  }
  if (!re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v6 + 88, v11))
  {
    uint64_t v10 = (re::KeyValueStore *)(v6 + 32);
LABEL_8:
    __str[0] = 1;
    re::KeyValueStore::addOrReplaceValue<BOOL>(v10, (const re::StringID *)v11, __str);
  }
  re::StringID::destroyString((re::StringID *)v11);
}

uint64_t re::KeyValueStore::addOrReplaceValue<BOOL>(re::KeyValueStore *a1, const re::StringID *a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t)a1 + 8;
  size_t v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (!v7) {
    goto LABEL_5;
  }
  int v8 = (const re::IntrospectionBase **)v7;
  size_t v9 = *v7;
  {
    uint64_t v14 = v9;
    size_t v9 = v14;
    if (v12)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v13);
      size_t v9 = v14;
    }
  }
  if (v9 != re::introspect<BOOL>(void)::info)
  {
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, a2);
LABEL_5:
    {
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v11);
      }
    }
    uint64_t v15 = re::introspect<BOOL>(void)::info;
    re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, (StringID *)a2, &v15);
    return re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 56, (StringID *)a2, a3);
  }
  return re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 56, (StringID *)a2, a3);
}

void anonymous namespace'::doPrepareEntityHierarchyForAnimationScene(uint64_t this, const re::AnimationSceneEntityData *a2, re::ecs2::Entity *a3)
{
  uint64_t v5 = (void *)this;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = (const re::AnimationSceneEntityData *)((char *)a2 + 32);
  size_t v7 = (re::ecs2::NetworkComponent *)*((void *)a2 + 25);
  if (*(unsigned char *)(this + 56))
  {
    if (!*((void *)a2 + 21)) {
      this = re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    int v8 = (const re::ecs2::Component *)*((void *)a2 + 30);
    if (!v8)
    {
      this = re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      int v8 = (const re::ecs2::Component *)this;
    }
    if (a3 && v7) {
      re::ecs2::NetworkComponent::markDirty(v7, v8);
    }
  }
  if (v5[9])
  {
    if (!*((void *)a2 + 21)) {
      re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    size_t v9 = (uint64_t *)*((void *)a2 + 29);
    if (!v9) {
      size_t v9 = (uint64_t *)re::ecs2::EntityComponentCollection::add(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    uint64_t v10 = (re::SkeletalPoseDefinitionAsset *)re::AssetHandle::operator=((uint64_t)(v9 + 4), v5 + 8);
    this = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>(v10);
    if (this)
    {
      uint64_t v11 = (_anonymous_namespace_ *)this;
    }
    if (a3 && v7) {
      re::ecs2::NetworkComponent::markDirty(v7, (const re::ecs2::Component *)v9);
    }
  }
  uint64_t v12 = v5[4];
  if (v12)
  {
    uint64_t v13 = (_anonymous_namespace_ *)v5[6];
    uint64_t v14 = (_anonymous_namespace_ *)((char *)v13 + 88 * v12);
    do
    {
      uint64_t v15 = *((void *)a2 + 41);
      if (!v15) {
        goto LABEL_28;
      }
      uint64_t v16 = (const re::AnimationSceneEntityData **)*((void *)a2 + 43);
      uint64_t v17 = 8 * v15;
      while (1)
      {
        uint64_t v18 = *v16;
        this = re::StringID::operator==((void *)*v16 + 34, v13);
        if (this) {
          break;
        }
        ++v16;
        v17 -= 8;
        if (!v17) {
          goto LABEL_28;
        }
      }
      if (v18)
      {
      }
      else
      {
LABEL_28:
        uint64_t v20 = *re::assetTypesLogObjects((re *)this);
        this = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          uint64_t v21 = *((void *)a2 + 35);
          uint64_t v22 = *((void *)v13 + 1);
          *(_DWORD *)buf = 136315394;
          uint64_t v24 = v21;
          __int16 v25 = 2080;
          uint64_t v26 = v22;
          _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Animation Scene entity (%s) could not locate expected child (%s).", buf, 0x16u);
        }
      }
      uint64_t v13 = (_anonymous_namespace_ *)((char *)v13 + 88);
    }
    while (v13 != v14);
  }
}

void re::AnimationSceneEntityData::markTargetEntityAsDirty(re::AnimationSceneEntityData *this, re::ecs2::Entity *a2, BOOL a3)
{
  uint64_t v6 = (re::ecs2::NetworkComponent *)*((void *)a2 + 25);
  if (v6 && (!*((void *)v6 + 4) || RESyncableIsAuthoritative()))
  {
    if (*((unsigned char *)this + 56))
    {
      if (!a3)
      {
        size_t v7 = (const re::ecs2::Component *)*((void *)a2 + 30);
        if (!v7) {
          goto LABEL_12;
        }
LABEL_11:
        re::ecs2::NetworkComponent::markDirty(v6, v7);
        goto LABEL_12;
      }
LABEL_10:
      size_t v7 = (const re::ecs2::Component *)*((void *)a2 + 21);
      if (!v7) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    if (!*((void *)this + 9)) {
      goto LABEL_12;
    }
    if (a3) {
      goto LABEL_10;
    }
    size_t v7 = (const re::ecs2::Component *)*((void *)a2 + 29);
    if (v7) {
      goto LABEL_11;
    }
  }
LABEL_12:
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    size_t v9 = (re::AnimationSceneEntityData *)*((void *)this + 6);
    uint64_t v10 = (re::AnimationSceneEntityData *)((char *)v9 + 88 * v8);
    do
    {
      uint64_t v11 = *((void *)a2 + 41);
      if (v11)
      {
        uint64_t v12 = (re::ecs2::Entity **)*((void *)a2 + 43);
        uint64_t v13 = 8 * v11;
        while (1)
        {
          uint64_t v14 = *v12;
          if (re::StringID::operator==((void *)*v12 + 34, v9)) {
            break;
          }
          ++v12;
          v13 -= 8;
          if (!v13) {
            goto LABEL_21;
          }
        }
        if (v14) {
          re::AnimationSceneEntityData::markTargetEntityAsDirty(v9, v14, a3);
        }
      }
LABEL_21:
      size_t v9 = (re::AnimationSceneEntityData *)((char *)v9 + 88);
    }
    while (v9 != v10);
  }
}

void *re::allocInfo_AnimationSceneEntityData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77708, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77708))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF777C8, "AnimationSceneEntityData");
    __cxa_guard_release(&qword_26AF77708);
  }
  return &unk_26AF777C8;
}

void re::initInfo_AnimationSceneEntityData(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xAD7EB69D45DE37AALL;
  v20[1] = "AnimationSceneEntityData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77710, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77710);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      size_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "entityName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77768 = v8;
      size_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::AnimationSceneEntityData>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "childrenData";
      *(void *)(v10 + 16) = &qword_26AF77788;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF77770 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_BOOL((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "transformAnimation";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x3800000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF77778 = v14;
      uint64_t v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::introspect_AssetHandle((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "skeletalPoseDefinition";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x4000000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF77780 = v18;
      __cxa_guard_release(&qword_26AF77710);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF77768;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AnimationSceneEntityData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AnimationSceneEntityData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AnimationSceneEntityData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AnimationSceneEntityData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

void re::IntrospectionInfo<re::DynamicArray<re::AnimationSceneEntityData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77750, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF77750);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF77788);
      qword_26AF77788 = (uint64_t)&unk_26E6CE8D8;
      __cxa_guard_release(&qword_26AF77750);
    }
  }
  if ((_MergedGlobals_67 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77718;
    if (qword_26AF77718
      || (uint64_t v1 = re::allocInfo_AnimationSceneEntityData(a1),
          qword_26AF77718 = (uint64_t)v1,
          re::initInfo_AnimationSceneEntityData((re *)v1, v2),
          (_MergedGlobals_67 & 1) == 0))
    {
      _MergedGlobals_67 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF77788, 0);
      qword_26AF77798 = 0x2800000003;
      dword_26AF777A0 = v3;
      word_26AF777A4 = 0;
      *(void *)&xmmword_26AF777A8 = 0;
      *((void *)&xmmword_26AF777A8 + 1) = 0xFFFFFFFFLL;
      qword_26AF777B8 = (uint64_t)v1;
      unk_26AF777C0 = 0;
      qword_26AF77788 = (uint64_t)&unk_26E6CE8D8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF77788, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      size_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF777A8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::AnimationSceneEntityData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 64) = 0;
}

void re::internal::defaultDestruct<re::AnimationSceneEntityData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 64));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a3 + 16);
  re::StringID::destroyString((re::StringID *)a3);
}

uint64_t re::internal::defaultConstructV2<re::AnimationSceneEntityData>(uint64_t result)
{
  *(void *)BOOL result = 0;
  *(void *)(result + 8) = "";
  *(void *)(result + 48) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 64) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AnimationSceneEntityData>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 64));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1 + 16);
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_AnimationScene(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77720))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77840, "AnimationScene");
    __cxa_guard_release(&qword_26AF77720);
  }
  return &unk_26AF77840;
}

void re::initInfo_AnimationScene(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0xC56CB686DAA8D710;
  v15[1] = "AnimationScene";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77728, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77728);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      size_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "rootTimeline";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77758 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      long long v10 = v9;
      long long v11 = (re *)qword_26AF77718;
      if (!qword_26AF77718)
      {
        long long v11 = (re *)re::allocInfo_AnimationSceneEntityData(v9);
        qword_26AF77718 = (uint64_t)v11;
        re::initInfo_AnimationSceneEntityData(v11, v12);
      }
      uint64_t v13 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "rootEntityData";
      *(void *)(v13 + 16) = v11;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x1800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF77760 = v13;
      __cxa_guard_release(&qword_26AF77728);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF77758;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AnimationScene>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AnimationScene>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AnimationScene>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AnimationScene>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

double re::internal::defaultConstruct<re::AnimationScene>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 32) = "";
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AnimationScene>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (re::StringID *)(a3 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 88));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a3 + 40);
  re::StringID::destroyString(v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

double re::internal::defaultConstructV2<re::AnimationScene>(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = "";
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AnimationScene>(uint64_t a1)
{
  uint64_t v2 = (re::StringID *)(a1 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 88));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1 + 40);
  re::StringID::destroyString(v2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t re::introspect_AnimationScene(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationScene", (uint64_t (*)(re::internal *))re::allocInfo_AnimationScene, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationScene, (void (*)(re::IntrospectionBase *))&qword_26AF77730, this);
}

void *re::allocInfo_AnimationSceneAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77738))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF778B8, "AnimationSceneAsset");
    __cxa_guard_release(&qword_26AF77738);
  }
  return &unk_26AF778B8;
}

void re::initInfo_AnimationSceneAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x36338DCE93270890;
  v11[1] = "AnimationSceneAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77748, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77748);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      size_t v7 = (re *)qword_26AF77730;
      if (!qword_26AF77730)
      {
        size_t v7 = (re *)re::allocInfo_AnimationScene(v5);
        qword_26AF77730 = (uint64_t)v7;
        re::initInfo_AnimationScene(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "data";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF77740 = v9;
      __cxa_guard_release(&qword_26AF77748);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF77740;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

double re::internal::defaultConstruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 32) = "";
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double re::internal::defaultConstructV2<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = "";
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  return result;
}

uint64_t re::introspect_AnimationSceneAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSceneAsset", (uint64_t (*)(re::internal *))re::allocInfo_AnimationSceneAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationSceneAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>, this);
}

uint64_t re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::SkeletalPoseDefinitionAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, unsigned char *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(unsigned char *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, void *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, unsigned char *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + 32 * v9;
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned char *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 8);
  *(unsigned char *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 32 * v9 + 8), a4);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(void *)&v15[16] + v10 + 8));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

void *re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AnimationSceneEntityData>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::AnimationSceneEntityData>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  memset(v11, 0, sizeof(v11));
  v10[1] = (uint64_t)"";
  memset(v12, 0, 24);
  re::DynamicArray<re::AnimationSceneEntityData>::add(this, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)v11);
  re::StringID::destroyString((re::StringID *)v10);
  long long v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 88 * *((void *)this + 2) - 88);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AnimationSceneEntityData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 88 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 88 * a3;
}

uint64_t re::DynamicArray<re::AnimationSceneEntityData>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 88 * v4;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 64));
          re::DynamicArray<re::AnimationSceneEntityData>::deinit(v3 + 16);
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 88;
          v5 -= 88;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          uint64_t v2 = 88 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = (void *)(v8 + 88 * v9);
        unint64_t v11 = (unint64_t *)(v8 + 64);
        unint64_t v12 = v7;
        do
        {
          char v13 = *(v11 - 8);
          *unint64_t v12 = *v12 & 0xFFFFFFFFFFFFFFFELL | *(v11 - 8) & 1;
          *unint64_t v12 = *(v11 - 8) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v12[1] = *(v11 - 7);
          *(v11 - 7) = (unint64_t)"";
          *(v11 - 8) = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 10) = 0;
          void v12[3] = 0;
          void v12[4] = 0;
          uint64_t v12[2] = 0;
          unint64_t v14 = *(v11 - 5);
          uint64_t v12[2] = *(v11 - 6);
          *(v11 - 6) = 0;
          void v12[3] = v14;
          *(v11 - 5) = 0;
          unint64_t v15 = v12[4];
          void v12[4] = *(v11 - 4);
          *(v11 - 4) = v15;
          unint64_t v16 = v12[6];
          v12[6] = *(v11 - 2);
          *(v11 - 2) = v16;
          ++*((_DWORD *)v11 - 6);
          ++*((_DWORD *)v12 + 10);
          *((unsigned char *)v12 + 56) = *((unsigned char *)v11 - 8);
          v12[9] = 0;
          v12[10] = 0;
          v12[8] = 0;
          v12[9] = v11[1];
          v11[1] = 0;
          unint64_t v17 = v12[8];
          v12[8] = 0;
          v12[8] = *v11;
          *unint64_t v11 = v17;
          unint64_t v18 = v12[10];
          v12[10] = v11[2];
          void v11[2] = v18;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)(v11 - 6));
          re::StringID::destroyString((re::StringID *)(v11 - 8));
          long long v19 = v11 + 3;
          v11 += 11;
          v12 += 11;
        }
        while (v19 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::AnimationSceneEntityData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 88 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 32) + v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 64));
      re::DynamicArray<re::AnimationSceneEntityData>::deinit(v10 + 16);
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 88;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 88 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = "";
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 40) = 0;
        *(unsigned char *)(v7 + 56) = 0;
        *(void *)(v7 + 72) = 0;
        *(void *)(v7 + 80) = 0;
        *(void *)(v7 + 64) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::AnimationSceneEntityData>::add(void *this, uint64_t *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::AnimationSceneEntityData>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 88 * v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  *(void *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 16) = 0;
  uint64_t v7 = a2[3];
  *(void *)(v5 + 16) = a2[2];
  *(void *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v8 = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = a2[4];
  a2[4] = v8;
  uint64_t v9 = *(void *)(v5 + 48);
  *(void *)(v5 + 48) = a2[6];
  a2[6] = v9;
  ++*((_DWORD *)a2 + 10);
  ++*(_DWORD *)(v5 + 40);
  *(unsigned char *)(v5 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = a2[9];
  a2[9] = 0;
  uint64_t v10 = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 64) = a2[8];
  a2[8] = v10;
  uint64_t v11 = *(void *)(v5 + 80);
  *(void *)(v5 + 80) = a2[10];
  a2[10] = v11;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::AnimationSceneEntityData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AnimationSceneEntityData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::AnimationSceneEntityData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 88 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::AnimationSceneEntityData>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 88 * v2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 64));
      re::DynamicArray<re::AnimationSceneEntityData>::deinit(v3 + 16);
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 88;
      v4 -= 88;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 88 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AnimationSceneEntityData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset(uint64_t a1)
{
  uint64_t v2 = (re::StringID *)(a1 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 88));
  re::DynamicArray<re::AnimationSceneEntityData>::deinit(a1 + 40);
  re::StringID::destroyString(v2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t *re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType()
{
  {
    re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType(void)::type = (uint64_t)"AssignedMeshDeformation";
    qword_268773600 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType(void)::type;
}

void *re::allocInfo_AssignedMeshDeformation(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77938))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF779B8, "AssignedMeshDeformation");
    __cxa_guard_release(&qword_26AF77938);
  }
  return &unk_26AF779B8;
}

void re::initInfo_AssignedMeshDeformation(re *this, re::IntrospectionBase *a2)
{
  v8[0] = 0x100A83A7AE6FEAAALL;
  v8[1] = "AssignedMeshDeformation";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77948, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77948);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::MeshIdentifierAsset>>::get();
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "deformedMeshAssets";
      *(void *)(v6 + 16) = &qword_26AF77978;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF77940 = v6;
      __cxa_guard_release(&qword_26AF77948);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF77940;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AssignedMeshDeformation>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AssignedMeshDeformation>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AssignedMeshDeformation>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AssignedMeshDeformation>;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshIdentifierAsset>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77970))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF77978);
    qword_26AF77978 = (uint64_t)&unk_26E6CE970;
    __cxa_guard_release(&qword_26AF77970);
  }
  if ((_MergedGlobals_68 & 1) == 0)
  {
    uint64_t v0 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
    if ((_MergedGlobals_68 & 1) == 0)
    {
      uint64_t v1 = v0;
      _MergedGlobals_68 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF77978, 0);
      qword_26AF77988 = 0x2800000003;
      dword_26AF77990 = v2;
      word_26AF77994 = 0;
      *(void *)&xmmword_26AF77998 = 0;
      *((void *)&xmmword_26AF77998 + 1) = 0xFFFFFFFFLL;
      qword_26AF779A8 = v1;
      unk_26AF779B0 = 0;
      qword_26AF77978 = (uint64_t)&unk_26E6CE970;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF77978, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      uint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF77998 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::internal::defaultConstruct<re::AssignedMeshDeformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::AssignedMeshDeformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::MeshIdentifierAsset>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::AssignedMeshDeformation>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *re::allocInfo_AssignedMeshDeformationAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77958, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77958))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77A30, "AssignedMeshDeformationAsset");
    __cxa_guard_release(&qword_26AF77958);
  }
  return &unk_26AF77A30;
}

void re::initInfo_AssignedMeshDeformationAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xF3256EF769E2536;
  v11[1] = "AssignedMeshDeformationAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77968, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77968);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77950;
      if (!qword_26AF77950)
      {
        uint64_t v7 = (re *)re::allocInfo_AssignedMeshDeformation(v5);
        qword_26AF77950 = (uint64_t)v7;
        re::initInfo_AssignedMeshDeformation(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "data";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF77960 = v9;
      __cxa_guard_release(&qword_26AF77968);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF77960;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::internal::defaultConstruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::MeshIdentifierAsset>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_AssignedMeshDeformationAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssignedMeshDeformationAsset", (uint64_t (*)(re::internal *))re::allocInfo_AssignedMeshDeformationAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AssignedMeshDeformationAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>, this);
}

uint64_t re::DeformedMeshAssetsMap::deformedIndex(re::DeformedMeshAssetsMap *this, unsigned int a2, int a3)
{
  unint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    if (*((void *)this + 6) <= (unint64_t)a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      unint64_t v4 = (*(_DWORD *)(*((void *)this + 7) + 4 * a2) + a3);
      if (v3 > v4) {
        return *(unsigned int *)(*((void *)this + 4) + 4 * v4);
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0xFFFFFFFFLL;
}

void *re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        long long v10 = &v8[5 * v9];
        uint64_t v11 = v7;
        do
        {
          *(unsigned char *)uint64_t v11 = *(unsigned char *)v8;
          uint64_t v13 = (re::StringID *)(v8 + 1);
          char v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          void v11[2] = v8[2];
          void v8[2] = "";
          v8[1] = 0;
          uint64_t v15 = v8[3];
          char v14 = (re::StringID *)(v8 + 3);
          _OWORD v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          _OWORD v11[3] = *(void *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[4] = *((void *)v14 + 1);
          *(void *)char v14 = 0;
          *((void *)v14 + 1) = "";
          re::StringID::destroyString(v14);
          re::StringID::destroyString(v13);
          uint64_t v8 = (void *)((char *)v14 + 16);
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = (void *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshIdentifierAsset>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshIdentifierAsset>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::MeshIdentifierAsset>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  v11[0] = 0;
  v11[1] = "";
  v12[0] = 0;
  v12[1] = "";
  re::DynamicArray<re::MeshIdentifierAsset>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * *((void *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshIdentifierAsset>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

uint64_t re::DynamicArray<re::MeshIdentifierAsset>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        uint64_t v6 = (re::StringID *)(v3 + 24);
        do
        {
          re::StringID::destroyString(v6);
          re::StringID::destroyString((re::StringID *)((char *)v6 - 16));
          uint64_t v6 = (re::StringID *)((char *)v6 + 40);
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::MeshIdentifierAsset>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 40 * a2 + 24;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      ++v9;
      v8 += 40;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(unsigned char *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = "";
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = "";
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::MeshIdentifierAsset>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshIdentifierAsset>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 40 * v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + 8) = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = "";
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(v5 + 24) = *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = "";
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::MeshIdentifierAsset>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshIdentifierAsset>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = 40 * v8;
      uint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + 24);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        uint64_t v10 = (re::StringID *)((char *)v10 + 40);
        v9 -= 40;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshIdentifierAsset>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshIdentifierAsset>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 40 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshIdentifierAsset>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(re::AudioAssetLoadStrategyFactory *this, re::AudioService *a2)
{
  if (this)
  {
    (*(void (**)(re::AudioAssetLoadStrategyFactory *, re::AudioService *))(*(void *)this + 544))(this, a2);
    operator new();
  }
  operator new();
}

uint64_t *re::ShaderLibraryAsset::assetType(re::ShaderLibraryAsset *this)
{
  {
    re::ShaderLibraryAsset::assetType(void)::type = (uint64_t)"ShaderLibrary";
    qword_26879E628 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ShaderLibraryAsset::assetType(void)::type);
  }
  return &re::ShaderLibraryAsset::assetType(void)::type;
}

uint64_t re::ShaderLibraryAsset::ShaderLibraryAsset(uint64_t a1, id *a2)
{
  *(void *)a1 = &unk_26E6CEA08;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 40), 0);
  *(void *)(a1 + 80) = 0;
  re::ObjCObject::operator=((id *)(a1 + 80), a2);
  return a1;
}

uint64_t re::ShaderLibraryAssetLoaderNameRemapper::remapLibraryName@<X0>(re::ShaderLibraryAssetLoaderNameRemapper *this@<X0>, const char *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  *a3 = 0;
  uint64_t v5 = (os_unfair_lock_s *)*((void *)this + 1);
  re::AssetPath::invalidAssetPath(v6, (uint64_t)&v8);
  re::AssetManager::lookupAssetPathString(v5, (const re::DynamicString *)&v13, (const re::AssetPath *)&v8, (uint64_t)v15);
  if ((void)v11)
  {
    if (BYTE8(v11)) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
    long long v11 = 0u;
    long long v12 = 0u;
  }
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  if (v15[0])
  {
    LOBYTE(v8) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v9, (const re::DynamicString *)&v16);
    re::Optional<re::DynamicString>::operator=(a3, &v8);
    if ((_BYTE)v8)
    {
      if (v9 && (v10 & 1) != 0) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  uint64_t result = v16;
  if (v16)
  {
    if (v17) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v18);
    }
  }
  return result;
}

void sub_23340B534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (a15)
  {
    uint64_t v24 = (_OWORD *)(v22 + 40);
    if (a16) {
      (*(void (**)(void))(*(void *)a15 + 40))();
    }
    *uint64_t v24 = 0u;
    v24[1] = 0u;
  }
  if (a11 && (a12 & 1) != 0) {
    (*(void (**)(void))(*(void *)a11 + 40))();
  }
  if (a20)
  {
    if (a21) {
      (*(void (**)(void))(*(void *)a20 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::ShaderLibraryAssetLoader::registerAsset(re::ShaderLibraryAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t result = re::ServiceLocator::serviceOrNull<re::RenderManager>(*((void *)this + 1));
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  if (!*((void *)this + 6))
  {
    uint64_t v8 = re::ServiceLocator::serviceOrNull<re::AssetService>(*((void *)this + 1));
    if (v8)
    {
      *((void *)this + 6) = v8;
      *(void *)(*(void *)(v7 + 56) + 312) = (char *)this + 40;
    }
  }
  uint64_t v9 = (void *)*((void *)a2 + 10);
  if (v9)
  {
    re::DynamicString::format((re::DynamicString *)"memorylib_%lu", (re::DynamicString *)&v69, [v9 hash]);
    if (v69.st_ino) {
      char v10 = *(const char **)&v69.st_uid;
    }
    else {
      char v10 = (char *)&v69.st_ino + 1;
    }
    *(void *)&long long buf = v10;
    *((void *)&buf + 1) = strlen(v10);
    re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (uint64_t)&buf);
    long long v11 = *(re::ShaderManager **)(v7 + 56);
    *(void *)&long long buf = re::ShaderManager::getLibraryHash(v11, v10);
    long long v12 = (re *)re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v11 + 264, (uint64_t *)&buf);
    if (v12)
    {
      uint64_t v13 = *re::assetTypesLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Registering library (%s) that already exists in shader manager. Library will be overwritten.", (uint8_t *)&buf, 0xCu);
      }
    }
    char v14 = *(re::ShaderManager **)(v7 + 56);
    unint64_t LibraryHash = re::ShaderManager::getLibraryHash(v14, v10);
    re::ShaderManager::installLibrary(v14, LibraryHash, (id *)a2 + 10);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>((uint64_t)this + 104, (re::DynamicString *)(a2 + 8), (const re::DynamicString *)&v69);
    uint64_t v16 = *(void *)&v69.st_dev;
    if (*(void *)&v69.st_dev && (v69.st_ino & 1) != 0)
    {
      char v17 = *(char **)&v69.st_uid;
LABEL_15:
      (*(void (**)(uint64_t, char *))(*(void *)v16 + 40))(v16, v17);
    }
  }
  else
  {
    unint64_t v18 = *((void *)a2 + 2);
    if (v18) {
      unint64_t v19 = v18 >> 1;
    }
    else {
      unint64_t v19 = v18 >> 1;
    }
    if (v19)
    {
      BOOL v20 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)this + 104, (uint64_t)(a2 + 8));
      if (!v20)
      {
        uint64_t v36 = (id)*re::assetTypesLogObjects((re *)v20);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          uint64_t v57 = (char *)*((void *)a3 + 18);
          if ((*((unsigned char *)a3 + 136) & 1) == 0) {
            uint64_t v57 = (char *)a3 + 137;
          }
          if (a2[16]) {
            unint64_t v58 = (char *)*((void *)a2 + 3);
          }
          else {
            unint64_t v58 = a2 + 17;
          }
          v69.st_dev = 136315394;
          *(void *)&v69.st_mode = v57;
          WORD2(v69.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v69.st_ino + 6) = (__darwin_ino64_t)v58;
          _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, "Registration failed for asset '%s'. Could not find library key for %s.", (uint8_t *)&v69, 0x16u);
        }

        return 2;
      }
      unint64_t v21 = re::Hash<re::DynamicString>::operator()((uint64_t)&v69, (uint64_t)(a2 + 8));
      uint64_t v22 = 0x7FFFFFFFLL;
      if (*((void *)this + 13))
      {
        uint64_t v23 = *(unsigned int *)(*((void *)this + 14) + 4 * (v21 % *((unsigned int *)this + 32)));
        if (v23 != 0x7FFFFFFF)
        {
          uint64_t v24 = *((void *)this + 15);
          uint64_t v22 = 0x7FFFFFFFLL;
          while (!re::DynamicString::operator==(v24 + 80 * v23 + 16, (uint64_t)(a2 + 8)))
          {
            uint64_t v23 = *(_DWORD *)(v24 + 80 * v23 + 8) & 0x7FFFFFFF;
            if (v23 == 0x7FFFFFFF) {
              goto LABEL_62;
            }
          }
          uint64_t v22 = v23;
        }
      }
LABEL_62:
      uint64_t v38 = *((void *)this + 15);
      if (*(unsigned char *)(v38 + 80 * v22 + 56)) {
        id v39 = *(const char **)(v38 + 80 * v22 + 64);
      }
      else {
        id v39 = (const char *)(v38 + 80 * v22 + 57);
      }
      __darwin_ino64_t v40 = strlen(v39);
      *(void *)&v69.st_dev = v39;
      v69.st_ino = v40;
      re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (uint64_t)&v69);
    }
    else
    {
      __int16 v25 = re::DynamicString::DynamicString((re::DynamicString *)&buf, (const re::DynamicString *)(a2 + 40));
      uint64_t v26 = *((void *)&buf + 1) >> 1;
      if ((BYTE8(buf) & 1) == 0) {
        uint64_t v26 = BYTE8(buf) >> 1;
      }
      if (!v26)
      {
        uint64_t v37 = (id)*re::assetTypesLogObjects(v25);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          if (*((void *)a3 + 17)) {
            unint64_t v60 = (char *)*((void *)a3 + 18);
          }
          else {
            unint64_t v60 = (char *)a3 + 137;
          }
          v69.st_dev = 136315138;
          *(void *)&v69.st_mode = v60;
          _os_log_error_impl(&dword_233120000, v37, OS_LOG_TYPE_ERROR, "Registration failed for asset '%s', currentMetallibPath is Empty!", (uint8_t *)&v69, 0xCu);
        }

        if (void)buf && (BYTE8(buf)) {
          (*(void (**)(void))(*(void *)buf + 40))();
        }
        return 2;
      }
      if (BYTE8(buf)) {
        uint64_t v27 = v68;
      }
      else {
        uint64_t v27 = (char *)&buf + 9;
      }
      long long v28 = *(re::ShaderManager **)(v7 + 56);
      *(void *)&v69.st_dev = re::ShaderManager::getLibraryHash(v28, v27);
      uint64_t v29 = (re *)re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v28 + 264, (uint64_t *)&v69.st_dev);
      if (v29)
      {
        char v30 = *re::assetTypesLogObjects(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v69.st_dev = 136315138;
          *(void *)&v69.st_mode = v27;
          _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Registering library (%s) that already exists in shader manager. Library will be overwritten.", (uint8_t *)&v69, 0xCu);
        }
      }
      re::ShaderManager::makeLibraryWithFile(*(void ***)(v7 + 56), v27, (re::ns *)v27, v27);
      uint64_t v31 = (_anonymous_namespace_ *)re::DynamicString::rfind((uint64_t)&buf, 46, v65);
      if (v65[0])
      {
        size_t v32 = v66;
        if (v66)
        {
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          uint64_t v62 = 0;
          re::DynamicString::setCapacity(&v61, v32 + 25);
          if (BYTE8(buf)) {
            uint64_t v33 = v68;
          }
          else {
            uint64_t v33 = (char *)&buf + 9;
          }
          re::DynamicString::append((re::DynamicString *)&v61, v33, v32);
          re::DynamicString::append((re::DynamicString *)&v61, "-binaryarchive.metallib", 0x18uLL);
          if (v62) {
            uint64_t v34 = v63;
          }
          else {
            uint64_t v34 = (char *)&v62 + 1;
          }
          if (!stat(v34, &v69))
          {
            if (v62) {
              uint64_t v35 = v63;
            }
            else {
              uint64_t v35 = (char *)&v62 + 1;
            }
            re::ShaderManager::makeAndAddBinaryArchive(*(re::ShaderManager **)(v7 + 56), v35, v35);
          }
          if (v61 && (v62 & 1) != 0) {
            (*(void (**)(void))(*v61 + 40))();
          }
        }
      }
      uint64_t v16 = buf;
      if (void)buf && (BYTE8(buf))
      {
        char v17 = v68;
        goto LABEL_15;
      }
    }
  }
  uint64_t v41 = *(re::ShaderManager **)(v7 + 56);
  char v42 = (const re::DynamicString *)(a2 + 40);
  re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)(a2 + 40));
  if (v69.st_ino) {
    char v43 = *(const char **)&v69.st_uid;
  }
  else {
    char v43 = (char *)&v69.st_ino + 1;
  }
  *(void *)&long long buf = re::ShaderManager::getLibraryHash(v41, v43);
  uint64_t v44 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v41 + 264, (uint64_t *)&buf);
  uint64_t v45 = buf;
  if (!v44) {
    uint64_t v45 = 0;
  }
  *((void *)a2 + 9) = v45;
  unint64_t v46 = *(re **)&v69.st_dev;
  if (*(void *)&v69.st_dev && (v69.st_ino & 1) != 0)
  {
    unint64_t v46 = (re *)(*(uint64_t (**)(void))(**(void **)&v69.st_dev + 40))();
    uint64_t v45 = *((void *)a2 + 9);
  }
  if (!v45)
  {
    uint64_t v47 = *re::assetTypesLogObjects(v46);
    uint64_t v48 = (re *)os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    if (v48)
    {
      char v55 = v47;
      re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)(a2 + 40));
      char v56 = (v69.st_ino & 1) != 0 ? *(__darwin_ino64_t **)&v69.st_uid : (__darwin_ino64_t *)((char *)&v69.st_ino + 1);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v56;
      _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "Unable to get a library hash for %s", (uint8_t *)&buf, 0xCu);

      uint64_t v48 = *(re **)&v69.st_dev;
      if (*(void *)&v69.st_dev)
      {
        if (v69.st_ino) {
          uint64_t v48 = (re *)(*(uint64_t (**)(void))(**(void **)&v69.st_dev + 40))();
        }
      }
    }
    if (!*((void *)a2 + 9))
    {
      uint64_t v54 = (id)*re::assetTypesLogObjects(v48);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        if (*((void *)a3 + 17)) {
          long long v59 = (char *)*((void *)a3 + 18);
        }
        else {
          long long v59 = (char *)a3 + 137;
        }
        v69.st_dev = 136315138;
        *(void *)&v69.st_mode = v59;
        _os_log_error_impl(&dword_233120000, v54, OS_LOG_TYPE_ERROR, "Registration failed for asset '%s'", (uint8_t *)&v69, 0xCu);
      }

      return 2;
    }
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)(a2 + 40));
  BOOL v49 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)this + 56, (uint64_t)&v69);
  if (*(void *)&v69.st_dev && (v69.st_ino & 1) != 0) {
    (*(void (**)(void))(**(void **)&v69.st_dev + 40))();
  }
  if (v49)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v69, v42);
    unint64_t v50 = re::Hash<re::DynamicString>::operator()((uint64_t)&buf, (uint64_t)&v69);
    uint64_t v51 = 0x7FFFFFFFLL;
    if (*((void *)this + 7))
    {
      uint64_t v52 = *(unsigned int *)(*((void *)this + 8) + 4 * (v50 % *((unsigned int *)this + 20)));
      if (v52 != 0x7FFFFFFF)
      {
        uint64_t v53 = *((void *)this + 9);
        uint64_t v51 = 0x7FFFFFFFLL;
        while (!re::DynamicString::operator==(v53 + 56 * v52 + 16, (uint64_t)&v69))
        {
          uint64_t v52 = *(_DWORD *)(v53 + 56 * v52 + 8) & 0x7FFFFFFF;
          if (v52 == 0x7FFFFFFF) {
            goto LABEL_92;
          }
        }
        uint64_t v51 = v52;
      }
    }
LABEL_92:
    ++*(_DWORD *)(*((void *)this + 9) + 56 * v51 + 48);
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v69, v42);
    LODWORD(buf) = 1;
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)this + 56, (re::DynamicString *)&v69, &buf);
  }
  if (*(void *)&v69.st_dev)
  {
    if (v69.st_ino) {
      (*(void (**)(void))(**(void **)&v69.st_dev + 40))();
    }
  }
  return 0;
}

void sub_23340BEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a11 && (a12 & 1) != 0) {
    (*(void (**)(void))(*(void *)a11 + 40))();
  }
  if (a17)
  {
    if (a18) {
      (*(void (**)(void))(*(void *)a17 + 40))();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 56 * v9;
  return v12 + 48;
}

void re::ShaderLibraryAssetLoader::preloadAssets(re::ShaderLibraryAssetLoader *this)
{
  uint64_t v2 = re::ServiceLocator::service<re::AssetService>(*((void *)this + 1));
  (*(void (**)(long long *__return_ptr))(*(void *)v2 + 8))(&v6);
  long long v4 = *((_OWORD *)this + 1);
  int v3 = (re::ShaderLibraryAssetLoader *)((char *)this + 16);
  *(_OWORD *)int v3 = v6;
  long long v6 = v4;
  uint64_t v5 = *((void *)v3 + 2);
  *((void *)v3 + 2) = v7;
  uint64_t v7 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 352))(v2)) {
    re::AssetHandle::loadAsync(v3);
  }
}

uint64_t re::ShaderLibraryAssetLoader::unregisterAsset(re::ShaderLibraryAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::RenderManager>(*((void *)this + 1));
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = (const re::DynamicString *)(a2 + 40);
  re::DynamicString::DynamicString((re::DynamicString *)&v32, v7);
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v30, (uint64_t)&v32);
  uint64_t v9 = 0x7FFFFFFFLL;
  if (*((void *)this + 7))
  {
    uint64_t v10 = *(unsigned int *)(*((void *)this + 8) + 4 * (v8 % *((unsigned int *)this + 20)));
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *((void *)this + 9);
      uint64_t v9 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v11 + 56 * v10 + 16, (uint64_t)&v32))
      {
        uint64_t v10 = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = v10;
    }
  }
LABEL_9:
  --*(_DWORD *)(*((void *)this + 9) + 56 * v9 + 48);
  if (v32 && (v33 & 1) != 0) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v32, v7);
  unint64_t v12 = re::Hash<re::DynamicString>::operator()((uint64_t)&v30, (uint64_t)&v32);
  if (*((void *)this + 7))
  {
    uint64_t v13 = *((void *)this + 9);
    uint64_t v14 = *(unsigned int *)(*((void *)this + 8) + 4 * (v12 % *((unsigned int *)this + 20)));
    if (v14 != 0x7FFFFFFF)
    {
      while (!re::DynamicString::operator==(v13 + 56 * v14 + 16, (uint64_t)&v32))
      {
        uint64_t v14 = *(_DWORD *)(v13 + 56 * v14 + 8) & 0x7FFFFFFF;
        if (v14 == 0x7FFFFFFF) {
          goto LABEL_18;
        }
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v13 = *((void *)this + 9);
  }
LABEL_18:
  uint64_t v14 = 0x7FFFFFFFLL;
LABEL_19:
  int v15 = *(_DWORD *)(v13 + 56 * v14 + 48);
  uint64_t result = v32;
  if (v32 && (v33 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v32 + 40))();
  }
  if (v15 <= 0)
  {
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    int v35 = 0;
    uint64_t v16 = *((unsigned int *)this + 34);
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = (int *)(*((void *)this + 15) + 8);
      while (1)
      {
        int v19 = *v18;
        v18 += 20;
        if (v19 < 0) {
          break;
        }
        if (v16 == ++v17)
        {
          LODWORD(v17) = *((_DWORD *)this + 34);
          break;
        }
      }
    }
    else
    {
      LODWORD(v17) = 0;
    }
    if (v16 != v17)
    {
      BOOL v20 = (char *)this + 104;
      uint64_t v21 = v17;
      do
      {
        uint64_t v22 = *((void *)this + 15) + 80 * v21;
        re::DynamicString::DynamicString((re::DynamicString *)&v30, v7);
        BOOL v23 = re::DynamicString::operator==(v22 + 48, (uint64_t)&v30);
        if (v30 && (v31 & 1) != 0) {
          (*(void (**)(void))(*(void *)v30 + 40))();
        }
        if (v23) {
          re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v32, (re::DynamicString *)(v22 + 16));
        }
        if (*((_DWORD *)this + 34) <= (v17 + 1)) {
          int v24 = v17 + 1;
        }
        else {
          int v24 = *((_DWORD *)this + 34);
        }
        while (1)
        {
          uint64_t v21 = (v17 + 1);
          if (v24 - 1 == v17) {
            break;
          }
          LODWORD(v17) = v17 + 1;
          int v25 = v21;
          if ((*(_DWORD *)(*((void *)this + 15) + 80 * v21 + 8) & 0x80000000) != 0) {
            goto LABEL_43;
          }
        }
        int v25 = v24;
LABEL_43:
        LODWORD(v17) = v25;
      }
      while (v16 != v25);
      if (v34)
      {
        uint64_t v26 = v36;
        uint64_t v27 = 32 * v34;
        do
        {
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)v20, v26);
          v26 += 32;
          v27 -= 32;
        }
        while (v27);
      }
    }
    uint64_t v28 = *(void *)(v6 + 56);
    re::DynamicString::DynamicString((re::DynamicString *)&v30, v7);
    unint64_t v29 = re::Hash<re::DynamicString>::operator()((uint64_t)&v37, (uint64_t)&v30);
    re::ShaderManager::releaseLibrary(v28, v29);
    if (v30)
    {
      if (v31) {
        (*(void (**)(void))(*(void *)v30 + 40))();
      }
    }
    return re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v32);
  }
  return result;
}

void sub_23340C4D0(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a2)
  {
    if (a3) {
      (*(void (**)(void))(*(void *)a2 + 40))();
    }
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

re *re::ShaderLibraryAssetLoader::unloadAsset(re::ShaderLibraryAssetLoader *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::ShaderLibraryAsset>((re *)"unloadAsset", 308, a2);
}

re *re::internal::destroyPersistent<re::ShaderLibraryAsset>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::ShaderLibraryAssetLoader::isSupportedSourceExtension(re::ShaderLibraryAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "metallib") || strcasecmp(a2, "hmshaderlib") == 0;
}

void re::ShaderLibraryAssetLoader::findDependencies(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

char **re::ShaderLibraryAssetLoader::introspectionType(re::ShaderLibraryAssetLoader *this)
{
  uint64_t v1 = &off_268773000;
  {
    uint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::ShaderLibraryAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"ShaderLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_ShaderLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ShaderLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShaderLibraryAsset>, 0);
      uint64_t v1 = &off_268773000;
    }
  }
  return v1[194];
}

uint64_t re::ShaderLibraryAssetLoader::allocateSampleAsset(re::ShaderLibraryAssetLoader *this)
{
  uint64_t v1 = re::AssetHandle::asset<re::ShaderLibraryAsset>((re::ShaderLibraryAssetLoader *)((char *)this + 16));
  uint64_t v2 = re::globalAllocators((re *)v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(void *)uint64_t v3 = &unk_26E6CEA08;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v3 + 8), 0);
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  re::DynamicString::setCapacity((void *)(v3 + 40), 0);
  *(void *)(v3 + 80) = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v8, (const re::DynamicString *)(v1 + 40));
  if (v9) {
    uint64_t v5 = *(const char **)&v10[7];
  }
  else {
    uint64_t v5 = v10;
  }
  size_t v6 = strlen(v5);
  v11[0] = v5;
  v11[1] = v6;
  re::DynamicString::operator=((re::DynamicString *)(v3 + 40), (uint64_t)v11);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return v3;
}

uint64_t re::AssetHandle::asset<re::ShaderLibraryAsset>(re::ShaderLibraryAsset *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::ShaderLibraryAsset::assetType(a1);
  uint64_t v2 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::ShaderLibraryAsset::assetType(void)::type, 0);
  if (!v2)
  {
    uint64_t v3 = (id)*re::assetsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = re::AssetHandle::assetInfo(a1);
      if (v5[17]) {
        size_t v6 = (char *)v5[18];
      }
      else {
        size_t v6 = (char *)v5 + 137;
      }
      int v7 = 136315138;
      uint64_t v8 = v6;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v7, 0xCu);
    }
  }
  return v2;
}

void *re::allocInfo_ShaderLibraryAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_69, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_69))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF77AC8, "ShaderLibraryAsset");
    __cxa_guard_release(&_MergedGlobals_69);
  }
  return &unk_26AF77AC8;
}

void re::initInfo_ShaderLibraryAsset(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xEC9A67660EC0D734;
  v14[1] = "ShaderLibraryAsset";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77AB0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77AB0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "networkIdentifier";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77AB8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "serializedLibraryPath";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF77AC0 = v12;
      __cxa_guard_release(&qword_26AF77AB0);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF77AB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ShaderLibraryAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ShaderLibraryAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ShaderLibraryAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ShaderLibraryAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void sub_23340CC20(_Unwind_Exception *a1)
{
}

void *re::internal::defaultConstruct<re::ShaderLibraryAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)a3 = &unk_26E6CEA08;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  uint64_t v4 = (void *)(a3 + 8);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(v3 + 40) = 0u;
  v3 += 40;
  *(_OWORD *)(v3 + 16) = 0u;
  uint64_t result = re::DynamicString::setCapacity((void *)v3, 0);
  *(void *)(v3 + 40) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ShaderLibraryAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::ShaderLibraryAsset>(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = &unk_26E6CEA08;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(_OWORD *)(v1 + 40) = 0u;
  v1 += 40;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t result = re::DynamicString::setCapacity((void *)v1, 0);
  *(void *)(v1 + 40) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ShaderLibraryAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_ShaderLibraryAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShaderLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_ShaderLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ShaderLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShaderLibraryAsset>, this);
}

void re::ShaderLibraryAssetLoader::~ShaderLibraryAssetLoader(re::ShaderLibraryAssetLoader *this)
{
  *(void *)this = &unk_26E6CEA68;
  uint64_t v2 = (re::ShaderLibraryAssetLoader *)((char *)this + 16);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 7);
  re::AssetHandle::~AssetHandle(v2);
}

{
  re::AssetHandle *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CEA68;
  uint64_t v2 = (re::ShaderLibraryAssetLoader *)((char *)this + 16);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 7);
  re::AssetHandle::~AssetHandle(v2);
  JUMPOUT(0x237DBCBD0);
}

void re::ShaderLibraryAsset::~ShaderLibraryAsset(id *this)
{
  re::ShaderLibraryAsset::~ShaderLibraryAsset(this);
  JUMPOUT(0x237DBCBD0);
}

{
  *this = &unk_26E6CEA08;

  re::DynamicString::deinit((re::DynamicString *)(this + 5));
  re::DynamicString::deinit((re::DynamicString *)(this + 1));
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _DWORD *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void sub_23340D174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_28, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void sub_23340D484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340D668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340D734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23340D7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340D880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340DB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340DD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340DDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23340DE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340E130(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23340E2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340E4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23340E594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::SharedTexturePayload::make(id *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, RESharedTexturePayload **a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = (re *)objc_msgSend(*a1, sel_isShareable);
  if (v10)
  {
    uint64_t v11 = [RESharedTexturePayload alloc];
    os_log_t log = (os_log_t)*a1;
    if (*(unsigned char *)(a4 + 8)) {
      uint64_t v12 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v12 = a4 + 9;
    }
    uint64_t v14 = [NSString stringWithUTF8String:v12];
    long long v15 = [(RESharedTexturePayload *)v11 initWithTexture:log isLimitedRenderAsset:a2 semantic:a3 colorSpace:v14];
    *a5 = v15;
  }
  else
  {
    loga = (id)*re::assetTypesLogObjects(v10);
    if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = objc_msgSend(objc_msgSend(*a1, sel_label), sel_cStringUsingEncoding_, 4);
      *(_DWORD *)long long buf = 136315138;
      id v19 = v13;
      _os_log_impl(&dword_233120000, loga, OS_LOG_TYPE_DEFAULT, "Attempted to share an unshareable texture '%s'", buf, 0xCu);
    }

    *a5 = 0;
  }
}

void sub_23340E80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::SharedTexturePayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  long long v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    long long v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_23340E8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *re::SharedTexturePayload::handle(id *this)
{
  uint64_t v1 = [*this handle];

  return v1;
}

void re::SharedTexturePayload::colorSpace(id *this@<X0>, re::DynamicString *a2@<X8>)
{
  id v4 = [*this colorSpace];
  uint64_t v3 = (_anonymous_namespace_ *)[v4 UTF8String];
}

void sub_23340E96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::IOSurfaceTexturePayload::make(id *a1@<X0>, REIOSurfaceTexturePayload **a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v4 = objc_msgSend(*a1, sel_iosurface);
  if (v4)
  {
    long long v5 = -[REIOSurfaceTexturePayload initWithIOSurface:plane:pixelFormat:]([REIOSurfaceTexturePayload alloc], "initWithIOSurface:plane:pixelFormat:", v4, objc_msgSend(*a1, sel_iosurfacePlane), objc_msgSend(*a1, sel_pixelFormat));
    *a2 = v5;
  }
  else
  {
    id v6 = (id)*re::assetTypesLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = objc_msgSend(objc_msgSend(*a1, sel_label), sel_cStringUsingEncoding_, 4);
      int v8 = 136315138;
      id v9 = v7;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Attempted to share an unshareable texture '%s'", (uint8_t *)&v8, 0xCu);
    }

    *a2 = 0;
  }
}

void sub_23340EAF8(_Unwind_Exception *exception_object)
{
}

void re::IOSurfaceTexturePayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  long long v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    long long v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_23340EB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::IOSurfaceTexturePayload::makeTextureWithDevice(id *this@<X0>, id *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v5 = *this;
  id v6 = [v5 ioSurface];
  uint64_t v7 = [v5 planeIndex];
  if ([v6 planeCount])
  {
    uint64_t v8 = [v6 widthOfPlaneAtIndex:v7];
    id v9 = (re *)[v6 heightOfPlaneAtIndex:v7];
  }
  else
  {
    uint64_t v8 = [v6 width];
    id v9 = (re *)[v6 height];
  }
  uint64_t v10 = v9;
  if (v8 && v9)
  {
    uint64_t v11 = [v5 pixelFormat];
    id v12 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
    objc_msgSend(v12, sel_setTextureType_, 2);
    objc_msgSend(v12, sel_setWidth_, v8);
    objc_msgSend(v12, sel_setHeight_, v10);
    objc_msgSend(v12, sel_setPixelFormat_, v11);
    objc_msgSend(v12, sel_setMipmapLevelCount_, 1);
    objc_msgSend(v12, sel_setUsage_, 1);
    objc_msgSend(v12, sel_setStorageMode_, 0);
    re::mtl::Device::makeTextureWithIOSurface(v12, a2, (uint64_t)v6, v7, a3);
    if (v12) {
  }
    }
  else
  {
    id v13 = *re::assetTypesLogObjects(v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14[0] = 67109376;
      v14[1] = v8;
      __int16 v15 = 1024;
      int v16 = (int)v10;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Attempted to create an IOSurfaceTexturePayload with invalid size: [%d, %d]", (uint8_t *)v14, 0xEu);
    }
    *a3 = 0;
  }
}

void sub_23340EDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::DrawableQueueTexturePayload::make(id *a1@<X0>, REDrawableQueueTexturePayload **a2@<X8>)
{
  id v4 = [REDrawableQueueTexturePayload alloc];
  id v6 = *a1;
  id v5 = -[REDrawableQueueTexturePayload initWithDrawableQueue:placeholderTexture:](v4, "initWithDrawableQueue:placeholderTexture:");
  *a2 = v5;
}

void sub_23340EE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::DrawableQueueTexturePayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    id v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_23340EF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void re::DrawableQueueTexturePayload::drawableQueue(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this drawableQueue];
  *a2 = v3;
}

void re::DrawableQueueTexturePayload::placeholderTexture(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this placeholderTexture];
  *a2 = v3;
}

uint64_t re::bufferIdentifierForMeshAttribute(re *this, const re::StringID *a2)
{
  if (re::StringID::operator==(this, re::MeshAttributeNames::kIndexTriangles)) {
    return 4;
  }
  if (re::StringID::operator==(this, re::MeshAttributeNames::kVertexAdjacentFaces)
    || re::StringID::operator==(this, re::MeshAttributeNames::kAccumulatedVertexValence)
    || re::StringID::operator==(this, re::MeshAttributeNames::kSimplifiedAnimationJointIndices)
    || re::StringID::operator==(this, re::MeshAttributeNames::kSimplifiedAnimationInfluenceEndIndices)
    || re::StringID::operator==(this, re::MeshAttributeNames::kSimplifiedAnimationSkinningInfluences))
  {
    return 5;
  }
  if (re::StringID::operator==(this, re::MeshAttributeNames::kPatchControlHullIndices)
    || re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivStencilSizes)
    || re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivStencilIndices))
  {
    return 7;
  }
  uint64_t v3 = 7;
  if (!re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivStencilOffsets))
  {
    if (re::StringID::operator==(this, re::MeshAttributeNames::kOpenSubdivUVIndices)) {
      return 7;
    }
    else {
      return 0;
    }
  }
  return v3;
}

void re::VideoChannelTextureHandles::invalidate(re::VideoChannelTextureHandles *this)
{
  re::TextureHandle::invalidate(this);
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 16));
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 32));
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 48));
  re::TextureHandle::invalidate((re::VideoChannelTextureHandles *)((char *)this + 64));
  uint64_t v3 = *((void *)this + 16);
  uint64_t v2 = (char *)this + 128;
  *((void *)v2 - 4) = 0;
  *((void *)v2 - 3) = 0;
  *((_DWORD *)v2 - 4) = 0;
  *((_DWORD *)v2 - 2) = 0;
  if (v3) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)v2);
  }
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
}

void anonymous namespace'::registerOrSetTexture(os_unfair_lock_s *a1, re::TextureHandle *a2, void **a3)
{
  if (*a3)
  {
    if (*((void *)a2 + 1)) {
      BOOL v4 = *(void *)a2 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      re::TextureManager::registerTexture(a1, a3, v5);
      re::TextureHandle::operator=(a2, (re::TextureHandle *)v5);
      re::TextureHandle::invalidate((re::TextureHandle *)v5);
    }
    else
    {
      re::TextureHandle::setMetalTexture(a2, a3);
    }
  }
}

void re::VideoChannelTextureHandles::setTextures(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3, char a4, char a5, char a6, CFTypeRef *a7, __int16 *a8, char a9)
{
  BOOL v23 = 0;
  re::VideoObject<re::VideoTextureBase>::setRef((int)&v23, &v23, *a3);
  if (v23)
  {
    re::VideoTextureBase::metalTexture(&v23, &v22);
    unsigned int v17 = objc_msgSend(v22, sel_pixelFormat);
  }
  else
  {
    id v18 = *(id *)(a2 + 16);
    id v22 = v18;
    if (*(void *)(a1 + 8) && *(void *)a1 && v18)
    {
      re::TextureHandle::setMetalTexture((const re::TextureHandle *)a1, &v22);
      id v18 = v22;
    }
    unsigned int v17 = objc_msgSend(v18, sel_pixelFormat);
  }
  *(_DWORD *)(a1 + 96) = v17;
  if (v22) {

  }
  id v22 = 0;
  re::VideoObject<re::VideoTextureBase>::setRef((int)&v22, (__CVBuffer **)&v22, a3[1]);
  if (v22)
  {
    re::VideoTextureBase::metalTexture((__CVBuffer **)&v22, &v21);
    *(_DWORD *)(a1 + 100) = objc_msgSend(v21, sel_pixelFormat);
    if (v21) {
  }
    }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 16));
    *(_DWORD *)(a1 + 100) = 0;
  }
  id v21 = 0;
  re::VideoObject<re::VideoTextureBase>::setRef((int)&v21, (__CVBuffer **)&v21, a3[2]);
  if (v21)
  {
    re::VideoTextureBase::metalTexture((__CVBuffer **)&v21, &v20);
    *(_DWORD *)(a1 + 104) = objc_msgSend(v20, sel_pixelFormat);
    if (v20) {
  }
    }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 32));
    *(_DWORD *)(a1 + 104) = 0;
  }
  *(unsigned char *)(a1 + 120) = a4;
  *(unsigned char *)(a1 + 123) = a5;
  *(unsigned char *)(a1 + 121) = a6;
  re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 128, (const void **)(a1 + 128), *a7);
  __int16 v19 = *a8;
  *(unsigned char *)(a1 + 138) = *((unsigned char *)a8 + 2);
  *(_WORD *)(a1 + 136) = v19;
  *(unsigned char *)(a1 + 122) = a9;
  if (v21) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v21);
  }
  if (v22) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v22);
  }
  if (v23) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v23);
  }
}

void sub_23340F440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, id a10, id a11, uint64_t a12)
{
  if (a11) {

  }
  if (a12) {
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&a12);
  }
  _Unwind_Resume(exception_object);
}

void re::VideoChannelTextureHandles::setFallbackTextures(re::VideoChannelTextureHandles *this, id *a2)
{
  id v4 = a2[2];
  id v12 = v4;
  id v11 = a2[2];
  id v10 = a2[3];
  if (*((void *)this + 1) && *(void *)this && v4) {
    re::TextureHandle::setMetalTexture(this, &v12);
  }
  if (*((void *)this + 3) && *((void *)this + 2) && v11) {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 16), &v11);
  }
  if (*((void *)this + 5) && *((void *)this + 4) && v10) {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 32), &v10);
  }
  *((_DWORD *)this + 24) = objc_msgSend(v12, sel_pixelFormat);
  *((_DWORD *)this + 25) = objc_msgSend(v11, sel_pixelFormat);
  *((_DWORD *)this + 26) = objc_msgSend(v10, sel_pixelFormat);
  id v5 = a2[2];
  id v9 = v5;
  if (*((void *)this + 7) && *((void *)this + 6) && v5)
  {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 48), &v9);
    id v5 = v9;
  }
  if (*((void *)this + 9) && *((void *)this + 8) && v5)
  {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 64), &v9);
    id v5 = v9;
  }
  *((_DWORD *)this + 27) = objc_msgSend(v5, sel_pixelFormat, v9);
  unsigned int v6 = objc_msgSend(v9, sel_pixelFormat);
  uint64_t v8 = *((void *)this + 16);
  id v7 = (const void **)((char *)this + 128);
  *((_DWORD *)v7 - 4) = v6;
  *((unsigned char *)v7 - 8) = 0;
  *((unsigned char *)v7 - 5) = 0;
  if (v8) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v7);
  }
  *id v7 = 0;
  if (v9) {

  }
  if (v10) {
  if (v11)
  }

  if (v12) {
}
  }

void sub_23340F678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, id a10, id a11, id a12)
{
  if (a9) {

  }
  if (a10) {
  if (a11)
  }

  if (a12) {
  _Unwind_Resume(exception_object);
  }
}

void re::VideoChannelTextureHandles::setScreenFallbackTextures(re::VideoChannelTextureHandles *this, id *a2)
{
  id v4 = a2[2];
  id v12 = v4;
  id v5 = a2[2];
  id v11 = v5;
  id v6 = a2[3];
  id v10 = v6;
  if (*((void *)this + 1) && *(void *)this && v4) {
    re::TextureHandle::setMetalTexture(this, &v12);
  }
  if (*((void *)this + 3) && *((void *)this + 2) && v5) {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 16), &v11);
  }
  if (*((void *)this + 5) && *((void *)this + 4) && v6) {
    re::TextureHandle::setMetalTexture((re::VideoChannelTextureHandles *)((char *)this + 32), &v10);
  }
  *((_DWORD *)this + 24) = objc_msgSend(v12, sel_pixelFormat);
  *((_DWORD *)this + 25) = objc_msgSend(v11, sel_pixelFormat);
  unsigned int v7 = objc_msgSend(v10, sel_pixelFormat);
  uint64_t v9 = *((void *)this + 16);
  uint64_t v8 = (const void **)((char *)this + 128);
  *((_DWORD *)v8 - 6) = v7;
  *((unsigned char *)v8 - 8) = 0;
  *((unsigned char *)v8 - 5) = 0;
  if (v9) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v8);
  }
  *uint64_t v8 = 0;
  if (v10) {

  }
  if (v11) {
  if (v12)
  }
}

void sub_23340F7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11, id a12)
{
  if (a10) {

  }
  if (a11) {
  if (a12)
  }

  _Unwind_Resume(exception_object);
}

void re::VideoChannelTextureHandles::setTextures(uint64_t a1, uint64_t a2, id *a3, char a4, char a5, char a6, CFTypeRef *a7, __int16 *a8, char a9)
{
  id v25 = *a3;
  if (v25)
  {
    *(_DWORD *)(a1 + 96) = objc_msgSend(v25, sel_pixelFormat);
    id v17 = v25;
    if (!v25) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  id v20 = *(id *)(a2 + 16);
  id v24 = v20;
  if (*(void *)(a1 + 8) && *(void *)a1 && v20)
  {
    re::TextureHandle::setMetalTexture((const re::TextureHandle *)a1, &v24);
    id v20 = v24;
  }
  *(_DWORD *)(a1 + 96) = objc_msgSend(v20, sel_pixelFormat, v24);
  id v17 = v24;
  if (v24) {
LABEL_3:
  }

LABEL_4:
  id v25 = a3[1];
  if (v25)
  {
    unsigned int v18 = objc_msgSend(v25, sel_pixelFormat);
    id v19 = v25;
    *(_DWORD *)(a1 + 100) = v18;
    if (v19) {
  }
    }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 16));
    *(_DWORD *)(a1 + 100) = 0;
  }
  id v25 = a3[2];
  if (v25)
  {
    unsigned int v21 = objc_msgSend(v25, sel_pixelFormat);
    id v22 = v25;
    *(_DWORD *)(a1 + 104) = v21;
    if (v22) {
  }
    }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 32));
    *(_DWORD *)(a1 + 104) = 0;
  }
  *(unsigned char *)(a1 + 120) = a4;
  *(unsigned char *)(a1 + 123) = a5;
  *(unsigned char *)(a1 + 121) = a6;
  re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 128, (const void **)(a1 + 128), *a7);
  __int16 v23 = *a8;
  *(unsigned char *)(a1 + 138) = *((unsigned char *)a8 + 2);
  *(_WORD *)(a1 + 136) = v23;
  *(unsigned char *)(a1 + 122) = a9;
}

void sub_23340F9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  if (a9) {

  }
  _Unwind_Resume(exception_object);
}

void re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(__CVBuffer **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    CVPixelBufferRelease(v1);
  }
  else
  {
    uint64_t v2 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Video m_object is NULL", v3, 2u);
    }
  }
}

void re::VideoObject<re::VideoColorTransformBase>::setRef(int a1, const void **a2, CFTypeRef cf)
{
  if (*a2) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a2);
  }
  *a2 = cf;
  if (cf)
  {
    CFRetain(cf);
  }
}

void re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    CFRelease(v1);
  }
  else
  {
    uint64_t v2 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Video m_object is NULL", v3, 2u);
    }
  }
}

re::AssetHandle *re::TimelineClipAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 72));
}

void *re::TimelineGroupAssetData::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 11);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    uint64_t result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 11);
  }
  if (v4)
  {
    unsigned int v7 = (re::AssetHandle *)*((void *)v3 + 13);
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      unsigned int v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::TimelineClipAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 72;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

void *re::TimelineGroupAssetData::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[11];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    uint64_t result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[11];
  }
  if (v4)
  {
    uint64_t v7 = v3[13];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      uint64_t result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void re::introspectionTable_TimelineAssetData(re *this)
{
  if ((_MergedGlobals_70 & 1) == 0)
  {
    _MergedGlobals_70 = 1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B50, memory_order_acquire) & 1) == 0)
    {
      inited = (re *)__cxa_guard_acquire(&qword_26AF77B50);
      if (inited)
      {
        qword_268799410 = (uint64_t)"TimelineClipAssetData";
        uint64_t v2 = (re *)qword_26AF77B80;
        if (!qword_26AF77B80)
        {
          uint64_t v2 = (re *)re::allocInfo_TimelineClipAssetData(inited);
          qword_26AF77B80 = (uint64_t)v2;
          re::initInfo_TimelineClipAssetData(v2, v3);
        }
        qword_268799418 = (uint64_t)v2;
        unk_268799420 = 0;
        qword_268799428 = 1;
        dword_268799430 = 0;
        qword_268799438 = (uint64_t)"TimelineGroupAssetData";
        uint64_t v4 = (re *)qword_26AF77BD0;
        if (!qword_26AF77BD0)
        {
          uint64_t v4 = (re *)re::allocInfo_TimelineGroupAssetData(inited);
          qword_26AF77BD0 = (uint64_t)v4;
          re::initInfo_TimelineGroupAssetData(v4, v5);
        }
        qword_268799440 = (uint64_t)v4;
        *(void *)algn_268799448 = 0;
        qword_268799450 = 2;
        dword_268799458 = 0;
        qword_268799460 = (uint64_t)"FloatAnimationClipAssetData";
        unint64_t v6 = (re *)qword_26AF77BE8;
        if (!qword_26AF77BE8)
        {
          unint64_t v6 = (re *)re::allocInfo_FloatAnimationClipAssetData(inited);
          qword_26AF77BE8 = (uint64_t)v6;
          re::initInfo_FloatAnimationClipAssetData(v6, v7);
        }
        qword_268799468 = (uint64_t)v6;
        unk_268799470 = 0;
        qword_268799478 = 3;
        dword_268799480 = 0;
        qword_268799488 = (uint64_t)"DoubleAnimationClipAssetData";
        uint64_t v8 = (re *)qword_26AF77C00;
        if (!qword_26AF77C00)
        {
          uint64_t v8 = (re *)re::allocInfo_DoubleAnimationClipAssetData(inited);
          qword_26AF77C00 = (uint64_t)v8;
          re::initInfo_DoubleAnimationClipAssetData(v8, v9);
        }
        qword_268799490 = (uint64_t)v8;
        *(void *)algn_268799498 = 0;
        qword_2687994A0 = 4;
        dword_2687994A8 = 0;
        qword_2687994B0 = (uint64_t)"Vector2FAnimationClipAssetData";
        id v10 = (re *)qword_26AF77C18;
        if (!qword_26AF77C18)
        {
          id v10 = (re *)re::allocInfo_Vector2FAnimationClipAssetData(inited);
          qword_26AF77C18 = (uint64_t)v10;
          re::initInfo_Vector2FAnimationClipAssetData(v10, v11);
        }
        qword_2687994B8 = (uint64_t)v10;
        unk_2687994C0 = 0;
        qword_2687994C8 = 5;
        dword_2687994D0 = 0;
        qword_2687994D8 = (uint64_t)"Vector3FAnimationClipAssetData";
        id v12 = (re *)qword_26AF77C30;
        if (!qword_26AF77C30)
        {
          id v12 = (re *)re::allocInfo_Vector3FAnimationClipAssetData(inited);
          qword_26AF77C30 = (uint64_t)v12;
          re::initInfo_Vector3FAnimationClipAssetData(v12, v13);
        }
        qword_2687994E0 = (uint64_t)v12;
        *(void *)algn_2687994E8 = 0;
        qword_2687994F0 = 6;
        dword_2687994F8 = 0;
        qword_268799500 = (uint64_t)"Vector4FAnimationClipAssetData";
        uint64_t v14 = (re *)qword_26AF77C48;
        if (!qword_26AF77C48)
        {
          uint64_t v14 = (re *)re::allocInfo_Vector4FAnimationClipAssetData(inited);
          qword_26AF77C48 = (uint64_t)v14;
          re::initInfo_Vector4FAnimationClipAssetData(v14, v15);
        }
        qword_268799508 = (uint64_t)v14;
        unk_268799510 = 0;
        qword_268799518 = 7;
        dword_268799520 = 0;
        qword_268799528 = (uint64_t)"QuaternionFAnimationClipAssetData";
        int v16 = (re *)qword_26AF77C60;
        if (!qword_26AF77C60)
        {
          int v16 = (re *)re::allocInfo_QuaternionFAnimationClipAssetData(inited);
          qword_26AF77C60 = (uint64_t)v16;
          re::initInfo_QuaternionFAnimationClipAssetData(v16, v17);
        }
        qword_268799530 = (uint64_t)v16;
        *(void *)algn_268799538 = 0;
        qword_268799540 = 8;
        dword_268799548 = 0;
        qword_268799550 = (uint64_t)"SRTAnimationClipAssetData";
        unsigned int v18 = (re *)qword_26AF77C78;
        if (!qword_26AF77C78)
        {
          unsigned int v18 = (re *)re::allocInfo_SRTAnimationClipAssetData(inited);
          qword_26AF77C78 = (uint64_t)v18;
          re::initInfo_SRTAnimationClipAssetData(v18, v19);
        }
        qword_268799558 = (uint64_t)v18;
        unk_268799560 = 0;
        qword_268799568 = 9;
        dword_268799570 = 0;
        qword_268799578 = (uint64_t)"SkeletalPoseAnimationClipAssetData";
        id v20 = (re *)qword_26AF77C90;
        if (!qword_26AF77C90)
        {
          id v20 = (re *)re::allocInfo_SkeletalPoseAnimationClipAssetData(inited);
          qword_26AF77C90 = (uint64_t)v20;
          re::initInfo_SkeletalPoseAnimationClipAssetData(v20, v21);
        }
        qword_268799580 = (uint64_t)v20;
        *(void *)algn_268799588 = 0;
        qword_268799590 = 10;
        dword_268799598 = 0;
        qword_2687995A0 = (uint64_t)"FloatAnimationAssetData";
        id v22 = (re *)qword_26AF77CC0;
        if (!qword_26AF77CC0)
        {
          id v22 = (re *)re::allocInfo_FloatAnimationAssetData(inited);
          qword_26AF77CC0 = (uint64_t)v22;
          re::initInfo_FloatAnimationAssetData(v22, v23);
        }
        qword_2687995A8 = (uint64_t)v22;
        unk_2687995B0 = 0;
        qword_2687995B8 = 11;
        dword_2687995C0 = 0;
        qword_2687995C8 = (uint64_t)"DoubleAnimationAssetData";
        id v24 = (re *)qword_26AF77CD8;
        if (!qword_26AF77CD8)
        {
          id v24 = (re *)re::allocInfo_DoubleAnimationAssetData(inited);
          qword_26AF77CD8 = (uint64_t)v24;
          re::initInfo_DoubleAnimationAssetData(v24, v25);
        }
        qword_2687995D0 = (uint64_t)v24;
        *(void *)algn_2687995D8 = 0;
        qword_2687995E0 = 12;
        dword_2687995E8 = 0;
        qword_2687995F0 = (uint64_t)"Vector2FAnimationAssetData";
        uint64_t v26 = (re *)qword_26AF77CF0;
        if (!qword_26AF77CF0)
        {
          uint64_t v26 = (re *)re::allocInfo_Vector2FAnimationAssetData(inited);
          qword_26AF77CF0 = (uint64_t)v26;
          re::initInfo_Vector2FAnimationAssetData(v26, v27);
        }
        qword_2687995F8 = (uint64_t)v26;
        unk_268799600 = 0;
        qword_268799608 = 13;
        dword_268799610 = 0;
        qword_268799618 = (uint64_t)"Vector3FAnimationAssetData";
        uint64_t v28 = (re *)qword_26AF77D08;
        if (!qword_26AF77D08)
        {
          uint64_t v28 = (re *)re::allocInfo_Vector3FAnimationAssetData(inited);
          qword_26AF77D08 = (uint64_t)v28;
          re::initInfo_Vector3FAnimationAssetData(v28, v29);
        }
        qword_268799620 = (uint64_t)v28;
        *(void *)algn_268799628 = 0;
        qword_268799630 = 14;
        dword_268799638 = 0;
        qword_268799640 = (uint64_t)"Vector4FAnimationAssetData";
        uint64_t v30 = (re *)qword_26AF77D20;
        if (!qword_26AF77D20)
        {
          uint64_t v30 = (re *)re::allocInfo_Vector4FAnimationAssetData(inited);
          qword_26AF77D20 = (uint64_t)v30;
          re::initInfo_Vector4FAnimationAssetData(v30, v31);
        }
        qword_268799648 = (uint64_t)v30;
        unk_268799650 = 0;
        qword_268799658 = 15;
        dword_268799660 = 0;
        qword_268799668 = (uint64_t)"QuaternionFAnimationAssetData";
        uint64_t v32 = (re *)qword_26AF77D38;
        if (!qword_26AF77D38)
        {
          uint64_t v32 = (re *)re::allocInfo_QuaternionFAnimationAssetData(inited);
          qword_26AF77D38 = (uint64_t)v32;
          re::initInfo_QuaternionFAnimationAssetData(v32, v33);
        }
        qword_268799670 = (uint64_t)v32;
        *(void *)algn_268799678 = 0;
        qword_268799680 = 16;
        dword_268799688 = 0;
        qword_268799690 = (uint64_t)"SRTAnimationAssetData";
        uint64_t v34 = (re *)qword_26AF77D50;
        if (!qword_26AF77D50)
        {
          uint64_t v34 = (re *)re::allocInfo_SRTAnimationAssetData(inited);
          qword_26AF77D50 = (uint64_t)v34;
          inited = (re *)re::initInfo_SRTAnimationAssetData(v34, v35);
        }
        qword_268799698 = (uint64_t)v34;
        unk_2687996A0 = 0;
        qword_2687996A8 = 17;
        dword_2687996B0 = 0;
        qword_2687996B8 = (uint64_t)"SkeletalPoseAnimationAssetData";
        uint64_t v36 = (re *)qword_26AF77D68;
        if (!qword_26AF77D68)
        {
          uint64_t v36 = (re *)re::allocInfo_SkeletalPoseAnimationAssetData(inited);
          qword_26AF77D68 = (uint64_t)v36;
          re::initInfo_SkeletalPoseAnimationAssetData(v36, v37);
        }
        qword_2687996C0 = (uint64_t)v36;
        *(void *)algn_2687996C8 = 0;
        qword_2687996D0 = 18;
        dword_2687996D8 = 0;
        qword_2687996E0 = (uint64_t)"FloatKeyframeAnimationAssetData";
        uint64_t v38 = (re *)qword_26AF77D98;
        if (!qword_26AF77D98)
        {
          uint64_t v38 = (re *)re::allocInfo_FloatKeyframeAnimationAssetData(inited);
          qword_26AF77D98 = (uint64_t)v38;
          re::initInfo_FloatKeyframeAnimationAssetData(v38, v39);
        }
        qword_2687996E8 = (uint64_t)v38;
        unk_2687996F0 = 0;
        qword_2687996F8 = 19;
        dword_268799700 = 0;
        qword_268799708 = (uint64_t)"DoubleKeyframeAnimationAssetData";
        __darwin_ino64_t v40 = (re *)qword_26AF77DB0;
        if (!qword_26AF77DB0)
        {
          __darwin_ino64_t v40 = (re *)re::allocInfo_DoubleKeyframeAnimationAssetData(inited);
          qword_26AF77DB0 = (uint64_t)v40;
          re::initInfo_DoubleKeyframeAnimationAssetData(v40, v41);
        }
        qword_268799710 = (uint64_t)v40;
        *(void *)algn_268799718 = 0;
        qword_268799720 = 20;
        dword_268799728 = 0;
        qword_268799730 = (uint64_t)"Vector2FKeyframeAnimationAssetData";
        char v42 = (re *)qword_26AF77DC8;
        if (!qword_26AF77DC8)
        {
          char v42 = (re *)re::allocInfo_Vector2FKeyframeAnimationAssetData(inited);
          qword_26AF77DC8 = (uint64_t)v42;
          re::initInfo_Vector2FKeyframeAnimationAssetData(v42, v43);
        }
        qword_268799738 = (uint64_t)v42;
        unk_268799740 = 0;
        qword_268799748 = 21;
        dword_268799750 = 0;
        qword_268799758 = (uint64_t)"Vector3FKeyframeAnimationAssetData";
        uint64_t v44 = (re *)qword_26AF77DE0;
        if (!qword_26AF77DE0)
        {
          uint64_t v44 = (re *)re::allocInfo_Vector3FKeyframeAnimationAssetData(inited);
          qword_26AF77DE0 = (uint64_t)v44;
          re::initInfo_Vector3FKeyframeAnimationAssetData(v44, v45);
        }
        qword_268799760 = (uint64_t)v44;
        *(void *)algn_268799768 = 0;
        qword_268799770 = 22;
        dword_268799778 = 0;
        qword_268799780 = (uint64_t)"Vector4FKeyframeAnimationAssetData";
        unint64_t v46 = (re *)qword_26AF77DF8;
        if (!qword_26AF77DF8)
        {
          unint64_t v46 = (re *)re::allocInfo_Vector4FKeyframeAnimationAssetData(inited);
          qword_26AF77DF8 = (uint64_t)v46;
          re::initInfo_Vector4FKeyframeAnimationAssetData(v46, v47);
        }
        qword_268799788 = (uint64_t)v46;
        unk_268799790 = 0;
        qword_268799798 = 23;
        dword_2687997A0 = 0;
        qword_2687997A8 = (uint64_t)"QuaternionFKeyframeAnimationAssetData";
        uint64_t v48 = (re *)qword_26AF77E10;
        if (!qword_26AF77E10)
        {
          uint64_t v48 = (re *)re::allocInfo_QuaternionFKeyframeAnimationAssetData(inited);
          qword_26AF77E10 = (uint64_t)v48;
          re::initInfo_QuaternionFKeyframeAnimationAssetData(v48, v49);
        }
        qword_2687997B0 = (uint64_t)v48;
        *(void *)algn_2687997B8 = 0;
        qword_2687997C0 = 24;
        dword_2687997C8 = 0;
        qword_2687997D0 = (uint64_t)"SRTKeyframeAnimationAssetData";
        unint64_t v50 = (re *)qword_26AF77E28;
        if (!qword_26AF77E28)
        {
          unint64_t v50 = (re *)re::allocInfo_SRTKeyframeAnimationAssetData(inited);
          qword_26AF77E28 = (uint64_t)v50;
          re::initInfo_SRTKeyframeAnimationAssetData(v50, v51);
        }
        qword_2687997D8 = (uint64_t)v50;
        unk_2687997E0 = 0;
        qword_2687997E8 = 25;
        dword_2687997F0 = 0;
        qword_2687997F8 = (uint64_t)"SkeletalPoseKeyframeAnimationAssetData";
        uint64_t v52 = (re *)qword_26AF77E40;
        if (!qword_26AF77E40)
        {
          uint64_t v52 = (re *)re::allocInfo_SkeletalPoseKeyframeAnimationAssetData(inited);
          qword_26AF77E40 = (uint64_t)v52;
          re::initInfo_SkeletalPoseKeyframeAnimationAssetData(v52, v53);
        }
        qword_268799800 = (uint64_t)v52;
        *(void *)algn_268799808 = 0;
        qword_268799810 = 26;
        dword_268799818 = 0;
        qword_268799820 = (uint64_t)"FloatSampledAnimationAssetData";
        uint64_t v54 = (re *)qword_26AF77E70;
        if (!qword_26AF77E70)
        {
          uint64_t v54 = (re *)re::allocInfo_FloatSampledAnimationAssetData(inited);
          qword_26AF77E70 = (uint64_t)v54;
          re::initInfo_FloatSampledAnimationAssetData(v54, v55);
        }
        qword_268799828 = (uint64_t)v54;
        unk_268799830 = 0;
        qword_268799838 = 27;
        dword_268799840 = 0;
        qword_268799848 = (uint64_t)"DoubleSampledAnimationAssetData";
        char v56 = (re *)qword_26AF77E88;
        if (!qword_26AF77E88)
        {
          char v56 = (re *)re::allocInfo_DoubleSampledAnimationAssetData(inited);
          qword_26AF77E88 = (uint64_t)v56;
          re::initInfo_DoubleSampledAnimationAssetData(v56, v57);
        }
        qword_268799850 = (uint64_t)v56;
        *(void *)algn_268799858 = 0;
        qword_268799860 = 28;
        dword_268799868 = 0;
        qword_268799870 = (uint64_t)"Vector2FSampledAnimationAssetData";
        unint64_t v58 = (re *)qword_26AF77EA0;
        if (!qword_26AF77EA0)
        {
          unint64_t v58 = (re *)re::allocInfo_Vector2FSampledAnimationAssetData(inited);
          qword_26AF77EA0 = (uint64_t)v58;
          re::initInfo_Vector2FSampledAnimationAssetData(v58, v59);
        }
        qword_268799878 = (uint64_t)v58;
        unk_268799880 = 0;
        qword_268799888 = 29;
        dword_268799890 = 0;
        qword_268799898 = (uint64_t)"Vector3FSampledAnimationAssetData";
        unint64_t v60 = (re *)qword_26AF77EB8;
        if (!qword_26AF77EB8)
        {
          unint64_t v60 = (re *)re::allocInfo_Vector3FSampledAnimationAssetData(inited);
          qword_26AF77EB8 = (uint64_t)v60;
          re::initInfo_Vector3FSampledAnimationAssetData(v60, v61);
        }
        qword_2687998A0 = (uint64_t)v60;
        *(void *)algn_2687998A8 = 0;
        qword_2687998B0 = 30;
        dword_2687998B8 = 0;
        qword_2687998C0 = (uint64_t)"Vector4FSampledAnimationAssetData";
        uint64_t v62 = (re *)qword_26AF77ED0;
        if (!qword_26AF77ED0)
        {
          uint64_t v62 = (re *)re::allocInfo_Vector4FSampledAnimationAssetData(inited);
          qword_26AF77ED0 = (uint64_t)v62;
          re::initInfo_Vector4FSampledAnimationAssetData(v62, v63);
        }
        qword_2687998C8 = (uint64_t)v62;
        unk_2687998D0 = 0;
        qword_2687998D8 = 31;
        dword_2687998E0 = 0;
        qword_2687998E8 = (uint64_t)"QuaternionFSampledAnimationAssetData";
        uint64_t v64 = (re *)qword_26AF77EE8;
        if (!qword_26AF77EE8)
        {
          uint64_t v64 = (re *)re::allocInfo_QuaternionFSampledAnimationAssetData(inited);
          qword_26AF77EE8 = (uint64_t)v64;
          re::initInfo_QuaternionFSampledAnimationAssetData(v64, v65);
        }
        qword_2687998F0 = (uint64_t)v64;
        *(void *)algn_2687998F8 = 0;
        qword_268799900 = 32;
        dword_268799908 = 0;
        qword_268799910 = (uint64_t)"SRTSampledAnimationAssetData";
        size_t v66 = (re *)qword_26AF77F00;
        if (!qword_26AF77F00)
        {
          size_t v66 = (re *)re::allocInfo_SRTSampledAnimationAssetData(inited);
          qword_26AF77F00 = (uint64_t)v66;
          re::initInfo_SRTSampledAnimationAssetData(v66, v67);
        }
        qword_268799918 = (uint64_t)v66;
        unk_268799920 = 0;
        qword_268799928 = 33;
        dword_268799930 = 0;
        qword_268799938 = (uint64_t)"SkeletalPoseSampledAnimationAssetData";
        v68 = (re *)qword_26AF77F18;
        if (!qword_26AF77F18)
        {
          v68 = (re *)re::allocInfo_SkeletalPoseSampledAnimationAssetData(inited);
          qword_26AF77F18 = (uint64_t)v68;
          re::initInfo_SkeletalPoseSampledAnimationAssetData(v68, v69);
        }
        qword_268799940 = (uint64_t)v68;
        *(void *)algn_268799948 = 0;
        qword_268799950 = 34;
        dword_268799958 = 0;
        qword_268799960 = (uint64_t)"OrbitAnimationAssetData";
        uint64_t v70 = (re *)qword_26AF77F48;
        if (!qword_26AF77F48)
        {
          uint64_t v70 = (re *)re::allocInfo_OrbitAnimationAssetData(inited);
          qword_26AF77F48 = (uint64_t)v70;
          re::initInfo_OrbitAnimationAssetData(v70, v71);
        }
        qword_268799968 = (uint64_t)v70;
        unk_268799970 = 0;
        qword_268799978 = 37;
        dword_268799980 = 0;
        qword_268799988 = (uint64_t)"AnimationStateTimelineAssetData";
        v72 = (re *)qword_26AF77F60;
        if (!qword_26AF77F60)
        {
          v72 = (re *)re::allocInfo_AnimationStateTimelineAssetData(inited);
          qword_26AF77F60 = (uint64_t)v72;
          re::initInfo_AnimationStateTimelineAssetData(v72, v73);
        }
        qword_268799990 = (uint64_t)v72;
        *(void *)algn_268799998 = 0;
        qword_2687999A0 = 38;
        dword_2687999A8 = 0;
        qword_2687999B0 = (uint64_t)"FloatAnimationBlendTreeAssetData";
        long long v74 = (re *)qword_26AF77F78;
        if (!qword_26AF77F78)
        {
          long long v74 = (re *)re::allocInfo_FloatAnimationBlendTreeAssetData(inited);
          qword_26AF77F78 = (uint64_t)v74;
          re::initInfo_FloatAnimationBlendTreeAssetData(v74, v75);
        }
        qword_2687999B8 = (uint64_t)v74;
        unk_2687999C0 = 0;
        qword_2687999C8 = 39;
        dword_2687999D0 = 0;
        qword_2687999D8 = (uint64_t)"DoubleAnimationBlendTreeAssetData";
        long long v76 = (re *)qword_26AF77F90;
        if (!qword_26AF77F90)
        {
          long long v76 = (re *)re::allocInfo_DoubleAnimationBlendTreeAssetData(inited);
          qword_26AF77F90 = (uint64_t)v76;
          re::initInfo_DoubleAnimationBlendTreeAssetData(v76, v77);
        }
        qword_2687999E0 = (uint64_t)v76;
        *(void *)algn_2687999E8 = 0;
        qword_2687999F0 = 40;
        dword_2687999F8 = 0;
        qword_268799A00 = (uint64_t)"Vector2FAnimationBlendTreeAssetData";
        uint64_t v78 = (re *)qword_26AF77FA8;
        if (!qword_26AF77FA8)
        {
          uint64_t v78 = (re *)re::allocInfo_Vector2FAnimationBlendTreeAssetData(inited);
          qword_26AF77FA8 = (uint64_t)v78;
          re::initInfo_Vector2FAnimationBlendTreeAssetData(v78, v79);
        }
        qword_268799A08 = (uint64_t)v78;
        unk_268799A10 = 0;
        qword_268799A18 = 41;
        dword_268799A20 = 0;
        qword_268799A28 = (uint64_t)"Vector3FAnimationBlendTreeAssetData";
        v80 = (re *)qword_26AF77FC0;
        if (!qword_26AF77FC0)
        {
          v80 = (re *)re::allocInfo_Vector3FAnimationBlendTreeAssetData(inited);
          qword_26AF77FC0 = (uint64_t)v80;
          re::initInfo_Vector3FAnimationBlendTreeAssetData(v80, v81);
        }
        qword_268799A30 = (uint64_t)v80;
        *(void *)algn_268799A38 = 0;
        qword_268799A40 = 42;
        dword_268799A48 = 0;
        qword_268799A50 = (uint64_t)"Vector4FAnimationBlendTreeAssetData";
        v82 = (re *)qword_26AF77FD8;
        if (!qword_26AF77FD8)
        {
          v82 = (re *)re::allocInfo_Vector4FAnimationBlendTreeAssetData(inited);
          qword_26AF77FD8 = (uint64_t)v82;
          re::initInfo_Vector4FAnimationBlendTreeAssetData(v82, v83);
        }
        qword_268799A58 = (uint64_t)v82;
        unk_268799A60 = 0;
        qword_268799A68 = 43;
        dword_268799A70 = 0;
        qword_268799A78 = (uint64_t)"QuaternionFAnimationBlendTreeAssetData";
        v84 = (re *)qword_26AF77FF0;
        if (!qword_26AF77FF0)
        {
          v84 = (re *)re::allocInfo_QuaternionFAnimationBlendTreeAssetData(inited);
          qword_26AF77FF0 = (uint64_t)v84;
          re::initInfo_QuaternionFAnimationBlendTreeAssetData(v84, v85);
        }
        qword_268799A80 = (uint64_t)v84;
        *(void *)algn_268799A88 = 0;
        qword_268799A90 = 44;
        dword_268799A98 = 0;
        qword_268799AA0 = (uint64_t)"SRTAnimationBlendTreeAssetData";
        v86 = (re *)qword_26AF78008;
        if (!qword_26AF78008)
        {
          v86 = (re *)re::allocInfo_SRTAnimationBlendTreeAssetData(inited);
          qword_26AF78008 = (uint64_t)v86;
          re::initInfo_SRTAnimationBlendTreeAssetData(v86, v87);
        }
        qword_268799AA8 = (uint64_t)v86;
        unk_268799AB0 = 0;
        qword_268799AB8 = 45;
        dword_268799AC0 = 0;
        qword_268799AC8 = (uint64_t)"SkeletalPoseAnimationBlendTreeAssetData";
        v88 = (re *)qword_26AF78020;
        if (!qword_26AF78020)
        {
          v88 = (re *)re::allocInfo_SkeletalPoseAnimationBlendTreeAssetData(inited);
          qword_26AF78020 = (uint64_t)v88;
          re::initInfo_SkeletalPoseAnimationBlendTreeAssetData(v88, v89);
        }
        qword_268799AD0 = (uint64_t)v88;
        *(void *)algn_268799AD8 = 0;
        qword_268799AE0 = 46;
        dword_268799AE8 = 0;
        qword_268799AF0 = (uint64_t)"EventTimelineAssetData";
        v90 = (re *)qword_26AF780F0;
        if (!qword_26AF780F0)
        {
          v90 = (re *)re::allocInfo_EventTimelineAssetData(inited);
          qword_26AF780F0 = (uint64_t)v90;
          re::initInfo_EventTimelineAssetData(v90, v91);
        }
        qword_268799AF8 = (uint64_t)v90;
        unk_268799B00 = 0;
        qword_268799B08 = 48;
        dword_268799B10 = 0;
        qword_268799B18 = (uint64_t)"BlendShapeWeightsAnimationAssetData";
        v92 = (re *)qword_26AF77D80;
        if (!qword_26AF77D80)
        {
          v92 = (re *)re::allocInfo_BlendShapeWeightsAnimationAssetData(inited);
          qword_26AF77D80 = (uint64_t)v92;
          re::initInfo_BlendShapeWeightsAnimationAssetData(v92, v93);
        }
        qword_268799B20 = (uint64_t)v92;
        *(void *)algn_268799B28 = 0;
        qword_268799B30 = 50;
        dword_268799B38 = 0;
        qword_268799B40 = (uint64_t)"BlendShapeWeightsSampledAnimationAssetData";
        v94 = (re *)qword_26AF77F30;
        if (!qword_26AF77F30)
        {
          v94 = (re *)re::allocInfo_BlendShapeWeightsSampledAnimationAssetData(inited);
          qword_26AF77F30 = (uint64_t)v94;
          re::initInfo_BlendShapeWeightsSampledAnimationAssetData(v94, v95);
        }
        qword_268799B48 = (uint64_t)v94;
        unk_268799B50 = 0;
        qword_268799B58 = 59;
        dword_268799B60 = 0;
        qword_268799B68 = (uint64_t)"BlendShapeWeightsAnimationClipAssetData";
        v96 = (re *)qword_26AF77CA8;
        if (!qword_26AF77CA8)
        {
          v96 = (re *)re::allocInfo_BlendShapeWeightsAnimationClipAssetData(inited);
          qword_26AF77CA8 = (uint64_t)v96;
          re::initInfo_BlendShapeWeightsAnimationClipAssetData(v96, v97);
        }
        qword_268799B70 = (uint64_t)v96;
        *(void *)algn_268799B78 = 0;
        qword_268799B80 = 60;
        dword_268799B88 = 0;
        qword_268799B90 = (uint64_t)"BlendShapeWeightsKeyframeAnimationAssetData";
        v98 = (re *)qword_26AF77E58;
        if (!qword_26AF77E58)
        {
          v98 = (re *)re::allocInfo_BlendShapeWeightsKeyframeAnimationAssetData(inited);
          qword_26AF77E58 = (uint64_t)v98;
          re::initInfo_BlendShapeWeightsKeyframeAnimationAssetData(v98, v99);
        }
        qword_268799B98 = (uint64_t)v98;
        unk_268799BA0 = 0;
        qword_268799BA8 = 61;
        dword_268799BB0 = 0;
        __cxa_guard_release(&qword_26AF77B50);
      }
    }
    dword_26AF78160 = 49;
    qword_26AF78168 = (uint64_t)&qword_268799410;
  }
}

void *re::allocInfo_TimelineAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77B58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797868, "TimelineAssetData");
    __cxa_guard_release(&qword_26AF77B58);
  }
  return &unk_268797868;
}

void re::initInfo_TimelineAssetData(re *this, re::IntrospectionBase *a2)
{
  v28[0] = 0x113B1170876036B2;
  v28[1] = "TimelineAssetData";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77B60);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_TimelineType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 32, 8);
      *(_DWORD *)uint64_t v8 = 3;
      *(void *)(v8 + 8) = v7;
      *(void *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 8;
      qword_26AF78438 = v8;
      uint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::introspectionTable_TimelineAssetData(v9);
      id v10 = (re *)(*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 16, 8);
      *(_DWORD *)id v10 = 2;
      *((void *)v10 + 1) = &dword_26AF78160;
      qword_26AF78440 = (uint64_t)v10;
      id v11 = re::introspectionAllocator(v10);
      id v13 = re::introspect_int((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "animationLayer";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0xC00000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF78448 = v14;
      __int16 v15 = re::introspectionAllocator((re *)v14);
      id v17 = re::introspect_FillMode((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "fillMode";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x1000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF78450 = v18;
      id v19 = re::introspectionAllocator((re *)v18);
      unsigned int v21 = re::IntrospectionInfo<re::StringID>::get(1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "name";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x1800000003;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF78458 = v22;
      __int16 v23 = re::introspectionAllocator((re *)v22);
      id v25 = re::IntrospectionInfo<re::DynamicString>::get(1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "targetPath";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x2800000004;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF78460 = v26;
      __cxa_guard_release(&qword_26AF77B60);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF78438;
  re::IntrospectionRegistry::add(this, v3);
  long long v27 = v29;
}

uint64_t re::introspect_TimelineAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineAssetData", (uint64_t (*)(re::internal *))re::allocInfo_TimelineAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77B68, this);
}

void *re::allocInfo_TimelineClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77B70))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687978E0, "TimelineClipAssetData");
    __cxa_guard_release(&qword_26AF77B70);
  }
  return &unk_2687978E0;
}

void re::initInfo_TimelineClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v44[0] = 0x180D6CB9D5D9D4D2;
  v44[1] = "TimelineClipAssetData";
  re::StringID::destroyString((re::StringID *)v44);
  *((_OWORD *)this + 2) = v45;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77B78);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797348 = v9;
      id v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_AssetHandle((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "clipSource";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797350 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v14, v15);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "clipStart";
      *(void *)(v16 + 16) = &qword_26AF78860;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x6000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_268797358 = v16;
      id v17 = re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v17, v18);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "clipEnd";
      *(void *)(v19 + 16) = &qword_26AF78860;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x7000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_268797360 = v19;
      id v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_double((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipOffset";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x8000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797368 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_BOOL((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipReversed";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797370 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_double((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "delay";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797378 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v32, v33);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "duration";
      *(void *)(v34 + 16) = &qword_26AF78860;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x9800000007;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_268797380 = v34;
      int v35 = re::introspectionAllocator((re *)v34);
      char v37 = re::introspect_float((re *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "speed";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA800000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797388 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_LoopBehavior((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "loopBehavior";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xAC00000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797390 = v42;
      __cxa_guard_release(&qword_26AF77B78);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + 8) = &qword_268797348;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TimelineClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TimelineClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TimelineClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TimelineClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v43 = v45;
}

void re::IntrospectionInfo<re::Optional<double>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF780F8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF78860);
    qword_26AF78860 = (uint64_t)&unk_26E6CEC80;
    __cxa_guard_release(&qword_26AF780F8);
  }
  if ((byte_26AF77B42 & 1) == 0)
  {
    uint64_t v2 = re::introspect_double((re *)1, a2);
    if ((byte_26AF77B42 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF77B42 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78860, 0);
      qword_26AF78870 = 0x100000000DLL;
      dword_26AF78878 = v4;
      word_26AF7887C = 0;
      *(void *)&xmmword_26AF78880 = 0;
      *((void *)&xmmword_26AF78880 + 1) = 0xFFFFFFFFLL;
      qword_26AF78890 = v3;
      qword_26AF78898 = 0;
      qword_26AF78860 = (uint64_t)&unk_26E6CEC80;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF78860, (const re::IntrospectionBase *)&v9);
      if (BYTE8(v9)) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = (char *)&v9 + 9;
      }
      if ((void)v9)
      {
        if (BYTE8(v9)) {
          (*(void (**)(void))(*(void *)v9 + 40))();
        }
      }
      long long v9 = *(_OWORD *)(v3 + 32);
      xmmword_26AF78880 = v8;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::TimelineClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 1);
  *(void *)uint64_t result = &unk_26E6CEBD0;
  *(unsigned char *)(result + 112) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(unsigned char *)(result + 152) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(_DWORD *)(result + 168) = 1065353216;
  *(unsigned char *)(result + 172) = 0;
  return result;
}

void re::internal::defaultDestruct<re::TimelineClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::TimelineClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 1);
  *(void *)uint64_t result = &unk_26E6CEBD0;
  *(unsigned char *)(result + 112) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(unsigned char *)(result + 152) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(_DWORD *)(result + 168) = 1065353216;
  *(unsigned char *)(result + 172) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TimelineClipAssetData>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SkeletalPoseAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77B88))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797958, "SkeletalPoseAssetData");
    __cxa_guard_release(&qword_26AF77B88);
  }
  return &unk_268797958;
}

void re::initInfo_SkeletalPoseAssetData(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x1C1B4EE87EA175E0;
  v12[1] = "SkeletalPoseAssetData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77B90, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77B90);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v6 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "jointTransforms";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF78170 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_SkeletalPose((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 64, 8);
      *(_DWORD *)uint64_t v10 = 6;
      *(void *)(v10 + 8) = 2;
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = re::skeletalPoseAssetDataUpgrade;
      *(unsigned char *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      qword_26AF78178 = v10;
      __cxa_guard_release(&qword_26AF77B90);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF78170;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

uint64_t re::skeletalPoseAssetDataUpgrade(uint64_t a1, uint64_t a2, void *a3)
{
  re::FixedArray<re::GenericSRT<float>>::operator=(a3, a2 + 16);
  return 1;
}

void re::internal::defaultConstruct<re::SkeletalPoseAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t re::internal::defaultDestruct<re::SkeletalPoseAssetData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::FixedArray<CoreIKTransform>::deinit(a3);
}

void *re::internal::defaultConstructV2<re::SkeletalPoseAssetData>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *re::allocInfo_BlendShapeWeightsAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77BA0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687979D0, "BlendShapeWeightsAssetData");
    __cxa_guard_release(&qword_26AF77BA0);
  }
  return &unk_2687979D0;
}

void re::initInfo_BlendShapeWeightsAssetData(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x881012FFB378BC1ELL;
  v10[1] = "BlendShapeWeightsAssetData";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BB0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77BB0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "weights";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF77BA8 = v8;
      __cxa_guard_release(&qword_26AF77BB0);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF77BA8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void re::internal::defaultConstruct<re::BlendShapeWeightsAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

uint64_t re::internal::defaultDestruct<re::BlendShapeWeightsAssetData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::FixedArray<CoreIKTransform>::deinit(a3);
}

void *re::internal::defaultConstructV2<re::BlendShapeWeightsAssetData>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *re::allocInfo_TimelineGroupAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77BC0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797A48, "TimelineGroupAssetData");
    __cxa_guard_release(&qword_26AF77BC0);
  }
  return &unk_268797A48;
}

void re::initInfo_TimelineGroupAssetData(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0x81187C4B31D4B78;
  v15[1] = "TimelineGroupAssetData";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BC8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77BC8);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78180 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "timelines";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78188 = v13;
      __cxa_guard_release(&qword_26AF77BC8);
    }
  }
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF78180;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TimelineGroupAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TimelineGroupAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TimelineGroupAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TimelineGroupAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

uint64_t re::internal::defaultConstruct<re::TimelineGroupAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 2);
  *(void *)uint64_t result = &unk_26E6CEC28;
  *(void *)(result + 104) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void re::internal::defaultDestruct<re::TimelineGroupAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 9));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::TimelineGroupAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 2);
  *(void *)uint64_t result = &unk_26E6CEC28;
  *(void *)(result + 104) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TimelineGroupAssetData>(void *a1)
{
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 9));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_FloatAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77BD8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797AC0, "FloatAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77BD8);
  }
  return &unk_268797AC0;
}

void re::initInfo_FloatAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x81043F4DEFE98304;
  v48[1] = "FloatAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BE0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77BE0);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797438 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797440 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_268797448 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_268797450 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797458 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797460 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797468 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_268797470 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797478 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797480 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_268797488 = v46;
      __cxa_guard_release(&qword_26AF77BE0);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_268797438;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FloatAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FloatAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FloatAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FloatAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::FloatAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 3);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CED00;
  return result;
}

void re::internal::defaultDestruct<re::FloatAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CED70;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::FloatAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 3);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CED00;
  return result;
}

void re::internal::defaultDestructV2<re::FloatAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CED70;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_DoubleAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77BF0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797B38, "DoubleAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77BF0);
  }
  return &unk_268797B38;
}

void re::initInfo_DoubleAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x85C7595DE59F22EELL;
  v48[1] = "DoubleAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77BF8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77BF8);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797490 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797498 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2687974A0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2687974A8 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2687974B0 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2687974B8 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2687974C0 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_2687974C8 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2687974D0 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_2687974D8 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_2687974E0 = v46;
      __cxa_guard_release(&qword_26AF77BF8);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_268797490;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DoubleAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DoubleAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DoubleAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DoubleAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::DoubleAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 4);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CEDB0;
  return result;
}

void re::internal::defaultDestruct<re::DoubleAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CEE38;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::DoubleAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 4);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CEDB0;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CEE38;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector2FAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C08))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797BB0, "Vector2FAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C08);
  }
  return &unk_268797BB0;
}

void re::initInfo_Vector2FAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0xF3DCDF9C9990FFALL;
  v48[1] = "Vector2FAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C10, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77C10);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2687974E8 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2687974F0 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2687974F8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_268797500 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797508 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797510 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797518 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_268797520 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797528 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797530 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_268797538 = v46;
      __cxa_guard_release(&qword_26AF77C10);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_2687974E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector2FAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector2FAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector2FAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector2FAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::Vector2FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 5);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CEEB8;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CEF40;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::Vector2FAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 5);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CEEB8;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CEF40;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector3FAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797C28, "Vector3FAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C20);
  }
  return &unk_268797C28;
}

void re::initInfo_Vector3FAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x447BD129C19C2DB8;
  v48[1] = "Vector3FAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C28, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77C28);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797540 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797548 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_268797550 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_268797558 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797560 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797568 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797570 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_268797578 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797580 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797588 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_268797590 = v46;
      __cxa_guard_release(&qword_26AF77C28);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_268797540;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector3FAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector3FAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector3FAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector3FAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::Vector3FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 6);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CEFC0;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CF048;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::Vector3FAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 6);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CEFC0;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CF048;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector4FAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797CA0, "Vector4FAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C38);
  }
  return &unk_268797CA0;
}

void re::initInfo_Vector4FAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x79B9D459B99F4B76;
  v48[1] = "Vector4FAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C40, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77C40);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797598 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2687975A0 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2687975A8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2687975B0 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2687975B8 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2687975C0 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2687975C8 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_2687975D0 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2687975D8 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_2687975E0 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_2687975E8 = v46;
      __cxa_guard_release(&qword_26AF77C40);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_268797598;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector4FAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector4FAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector4FAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector4FAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::Vector4FAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 7);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF0C8;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CF150;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::Vector4FAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 7);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF0C8;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CF150;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_QuaternionFAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797D18, "QuaternionFAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C50);
  }
  return &unk_268797D18;
}

void re::initInfo_QuaternionFAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0xAA4CD8A06333BE1CLL;
  v48[1] = "QuaternionFAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C58, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77C58);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2687975F0 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2687975F8 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_268797600 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_268797608 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797610 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797618 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797620 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_268797628 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797630 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797638 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_268797640 = v46;
      __cxa_guard_release(&qword_26AF77C58);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_2687975F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::QuaternionFAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::QuaternionFAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::QuaternionFAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 8);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF1D0;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CF258;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::QuaternionFAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 8);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF1D0;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CF258;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SRTAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797D90, "SRTAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C68);
  }
  return &unk_268797D90;
}

void re::initInfo_SRTAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0xD82E923A091050B6;
  v48[1] = "SRTAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C70, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77C70);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797648 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797650 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_268797658 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_268797660 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797668 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797670 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797678 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_268797680 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797688 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797690 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_268797698 = v46;
      __cxa_guard_release(&qword_26AF77C70);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_268797648;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SRTAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SRTAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SRTAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SRTAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::SRTAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 9);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF2D8;
  return result;
}

void re::internal::defaultDestruct<re::SRTAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CF360;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::SRTAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 9);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF2D8;
  return result;
}

void re::internal::defaultDestructV2<re::SRTAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CF360;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SkeletalPoseAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797E08, "SkeletalPoseAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C80);
  }
  return &unk_268797E08;
}

void re::initInfo_SkeletalPoseAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0xE138794DB1523760;
  v48[1] = "SkeletalPoseAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C88, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77C88);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2687976A0 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2687976A8 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2687976B0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2687976B8 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2687976C0 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2687976C8 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2687976D0 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_2687976D8 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2687976E0 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_2687976E8 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_2687976F0 = v46;
      __cxa_guard_release(&qword_26AF77C88);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_2687976A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 10);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF3E0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CF468;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::SkeletalPoseAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 10);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF3E0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CF468;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_BlendShapeWeightsAnimationClipAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77C98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77C98))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797E80, "BlendShapeWeightsAnimationClipAssetData");
    __cxa_guard_release(&qword_26AF77C98);
  }
  return &unk_268797E80;
}

void re::initInfo_BlendShapeWeightsAnimationClipAssetData(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0xC1495BD0AAB385E2;
  v48[1] = "BlendShapeWeightsAnimationClipAssetData";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CA0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77CA0);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2687976F8 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797700 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_AssetHandle((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "clipSource";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_268797708 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "clipStart";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_268797710 = v20;
      unsigned int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "clipEnd";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797718 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_double((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clipOffset";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x8800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_268797720 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "clipReversed";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_268797728 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v34 = re::introspect_double((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "delay";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_268797730 = v35;
      uint64_t v36 = re::introspectionAllocator((re *)v35);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v36, v37);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "duration";
      *(void *)(v38 + 16) = &qword_26AF78860;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0xA000000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_268797738 = v38;
      id v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "speed";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xB000000009;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_268797740 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      long long v45 = re::introspect_LoopBehavior((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "loopBehavior";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xB40000000ALL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_268797748 = v46;
      __cxa_guard_release(&qword_26AF77CA0);
    }
  }
  *((void *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_2687976F8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsAnimationClipAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsAnimationClipAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationClipAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationClipAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

uint64_t re::internal::defaultConstruct<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 60);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF4E8;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6CF570;
  int v4 = (re::DynamicString *)(a3 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

uint64_t re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationClipAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 60);
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(_DWORD *)(result + 176) = 1065353216;
  *(unsigned char *)(result + 180) = 0;
  *(void *)uint64_t result = &unk_26E6CF4E8;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationClipAssetData>(void *a1)
{
  *a1 = &unk_26E6CF570;
  uint64_t v2 = (re::DynamicString *)(a1 + 5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_FloatAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77CB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797EF8, "FloatAnimationAssetData");
    __cxa_guard_release(&qword_26AF77CB0);
  }
  return &unk_268797EF8;
}

void re::initInfo_FloatAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v33[0] = 0x3AD6F4DDD7D2CDE4;
  v33[1] = "FloatAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CB8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF77CB8);
    if (v4)
    {
      unint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78498 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF784A0 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF784A8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::Optional<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "from";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF784B0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      id v24 = re::IntrospectionInfo<re::Optional<float>>::get(1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "to";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x6000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF784B8 = v25;
      uint64_t v26 = re::introspectionAllocator((re *)v25);
      uint64_t v28 = re::IntrospectionInfo<re::Optional<float>>::get(1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "by";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x6800000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF784C0 = v29;
      uint64_t v30 = re::introspectionAllocator((re *)v29);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "easingFunction";
      *(void *)(v31 + 16) = &qword_26AF788A0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x7000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF784C8 = v31;
      __cxa_guard_release(&qword_26AF77CB8);
    }
  }
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78498;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FloatAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FloatAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FloatAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FloatAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v32 = v34;
}

uint64_t *re::IntrospectionInfo<re::Optional<float>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info = (uint64_t)&unk_26E6CF5F0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  unint64_t v6 = (re *)re::introspect_float((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info, 0);
    qword_268773640 = 0x80000000DLL;
    dword_268773648 = v10;
    word_26877364C = 0;
    *(void *)&xmmword_268773650 = 0;
    *((void *)&xmmword_268773650 + 1) = 0xFFFFFFFFLL;
    qword_268773660 = v9;
    unk_268773668 = 0;
    re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info = (uint64_t)&unk_26E6CF5F0;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268773650 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<float>>::get(BOOL)::info;
}

void re::IntrospectionInfo<re::EasingFunction *>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78100))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_26AF788A0);
    __cxa_guard_release(&qword_26AF78100);
  }
  if ((byte_26AF77B43 & 1) == 0)
  {
    byte_26AF77B43 = 1;
    uint64_t v0 = re::introspect_EasingFunction((re::IntrospectionBase **)1);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF788A0, 0);
    qword_26AF788B0 = 0x800000001;
    dword_26AF788B8 = 8;
    word_26AF788BC = 0;
    *(void *)&xmmword_26AF788C0 = 0;
    *((void *)&xmmword_26AF788C0 + 1) = 0xFFFFFFFFLL;
    qword_26AF788A0 = (uint64_t)&unk_26E6CDA08;
    qword_26AF788D0 = v0;
    qword_26AF788D8 = 0;
    re::IntrospectionRegistry::add(v1, v2);
    re::getPrettyTypeName((re *)&qword_26AF788A0, (const re::IntrospectionBase *)&v6);
    if (BYTE8(v6)) {
      int v3 = v7;
    }
    else {
      int v3 = (char *)&v6 + 9;
    }
    if (void)v6 && (BYTE8(v6)) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
    if (v8 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      long long v4 = v6;
    }
    else
    {
      long long v6 = *(_OWORD *)(v0 + 32);
      long long v4 = v5;
    }
    xmmword_26AF788C0 = v4;
    re::StringID::destroyString((re::StringID *)&v8);
  }
}

uint64_t re::internal::defaultConstruct<re::FloatAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 11);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)uint64_t result = &unk_26E6D3618;
  return result;
}

uint64_t re::internal::defaultDestruct<re::FloatAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<float>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::FloatAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 11);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)uint64_t result = &unk_26E6D3618;
  return result;
}

void *re::allocInfo_DoubleAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77CC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797F70, "DoubleAnimationAssetData");
    __cxa_guard_release(&qword_26AF77CC8);
  }
  return &unk_268797F70;
}

void re::initInfo_DoubleAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v30[0] = 0xC8A4BF5B7858F2CELL;
  v30[1] = "DoubleAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CD0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77CD0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF784D0 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF784D8 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF784E0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v18, v19);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "from";
      *(void *)(v20 + 16) = &qword_26AF78860;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x5800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF784E8 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "to";
      *(void *)(v23 + 16) = &qword_26AF78860;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x6800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF784F0 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::Optional<double>>::get((uint64_t)v24, v25);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "by";
      *(void *)(v26 + 16) = &qword_26AF78860;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x7800000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF784F8 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "easingFunction";
      *(void *)(v28 + 16) = &qword_26AF788A0;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x8800000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF78500 = v28;
      __cxa_guard_release(&qword_26AF77CD0);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF784D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DoubleAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DoubleAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DoubleAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DoubleAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

uint64_t re::internal::defaultConstruct<re::DoubleAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 12);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)uint64_t result = &unk_26E6CF670;
  return result;
}

uint64_t re::internal::defaultDestruct<re::DoubleAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<double>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::DoubleAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 12);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)uint64_t result = &unk_26E6CF670;
  return result;
}

void *re::allocInfo_Vector2FAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77CE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268797FE8, "Vector2FAnimationAssetData");
    __cxa_guard_release(&qword_26AF77CE0);
  }
  return &unk_268797FE8;
}

void re::initInfo_Vector2FAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0x2550EAB3730B45DALL;
  v27[1] = "Vector2FAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CE8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77CE8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78508 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      id v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78510 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78518 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get();
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "from";
      *(void *)(v19 + 16) = &qword_26AF788E0;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x5800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF78520 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get();
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "to";
      *(void *)(v21 + 16) = &qword_26AF788E0;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x6800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78528 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get();
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "by";
      *(void *)(v23 + 16) = &qword_26AF788E0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78530 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "easingFunction";
      *(void *)(v25 + 16) = &qword_26AF788A0;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x8800000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78538 = v25;
      __cxa_guard_release(&qword_26AF77CE8);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78508;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector2FAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector2FAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector2FAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector2FAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

void re::IntrospectionInfo<re::Optional<re::Vector2<float>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78108))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF788E0);
    qword_26AF788E0 = (uint64_t)&unk_26E6CF720;
    __cxa_guard_release(&qword_26AF78108);
  }
  if ((byte_26AF77B44 & 1) == 0)
  {
    uint64_t v0 = re::introspect_Vector2F((re::IntrospectionBase **)1);
    if ((byte_26AF77B44 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF77B44 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF788E0, 0);
      qword_26AF788F0 = 0x100000000DLL;
      dword_26AF788F8 = v2;
      word_26AF788FC = 0;
      *(void *)&xmmword_26AF78900 = 0;
      *((void *)&xmmword_26AF78900 + 1) = 0xFFFFFFFFLL;
      qword_26AF78910 = v1;
      qword_26AF78918 = 0;
      qword_26AF788E0 = (uint64_t)&unk_26E6CF720;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF788E0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        long long v5 = *(const char **)&v15[7];
      }
      else {
        long long v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      long long v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginOptionalType((uint64_t)&v13, v11, 0x10uLL, 8uLL, &v12);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v13, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF78900 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::Vector2FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 13);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)uint64_t result = &unk_26E6CF7A0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::Vector2FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Vector2<float>>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::Vector2FAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 13);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)uint64_t result = &unk_26E6CF7A0;
  return result;
}

void *re::allocInfo_Vector3FAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77CF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77CF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798060, "Vector3FAnimationAssetData");
    __cxa_guard_release(&qword_26AF77CF8);
  }
  return &unk_268798060;
}

void re::initInfo_Vector3FAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v30[0] = 0xF47507A9424EF298;
  v30[1] = "Vector3FAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D00, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D00);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78540 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78548 = v13;
      char v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78550 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v19 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "from";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x6000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78558 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v22 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "to";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x8000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78560 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      uint64_t v25 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "by";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0xA000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF78568 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "easingFunction";
      *(void *)(v28 + 16) = &qword_26AF788A0;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0xC000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF78570 = v28;
      __cxa_guard_release(&qword_26AF77D00);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78540;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector3FAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector3FAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector3FAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector3FAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

uint64_t *re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(int a1)
{
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info = (uint64_t)&unk_26E6CF850;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v2 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v2) {
      return &re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info;
    }
    long long v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
  }
  long long v5 = (re *)re::introspect_Vector3F((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      long long v6 = re::introspectionSharedMutex(v5);
      std::__shared_mutex_base::unlock(v6);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)v5;
    re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::isInitialized = 1;
    int v9 = *((_DWORD *)v5 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info, 0);
    qword_268773690 = 0x200000000DLL;
    dword_268773698 = v9;
    word_26877369C = 0;
    *(void *)&xmmword_2687736A0 = 0;
    *((void *)&xmmword_2687736A0 + 1) = 0xFFFFFFFFLL;
    qword_2687736B0 = v8;
    unk_2687736B8 = 0;
    re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info = (uint64_t)&unk_26E6CF850;
    re::IntrospectionRegistry::add(v10, v11);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
    if (BYTE8(v14)) {
      long long v12 = v15;
    }
    else {
      long long v12 = (char *)&v14 + 9;
    }
    if (void)v14 && (BYTE8(v14)) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    long long v14 = *(_OWORD *)(v8 + 32);
    xmmword_2687736A0 = v13;
    re::StringID::destroyString((re::StringID *)v16);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(BOOL)::info;
}

uint64_t re::internal::defaultConstruct<re::Vector3FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 14);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6CF8D0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::Vector3FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Vector3<float>>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::Vector3FAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 14);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6CF8D0;
  return result;
}

void *re::allocInfo_Vector4FAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77D10))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687980D8, "Vector4FAnimationAssetData");
    __cxa_guard_release(&qword_26AF77D10);
  }
  return &unk_2687980D8;
}

void re::initInfo_Vector4FAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0xC399249F11929F56;
  v27[1] = "Vector4FAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D18, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D18);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78578 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78580 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78588 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get();
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "from";
      *(void *)(v19 + 16) = &qword_26AF78920;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x6000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF78590 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get();
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "to";
      *(void *)(v21 + 16) = &qword_26AF78920;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x8000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78598 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get();
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "by";
      *(void *)(v23 + 16) = &qword_26AF78920;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0xA000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF785A0 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "easingFunction";
      *(void *)(v25 + 16) = &qword_26AF788A0;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0xC000000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF785A8 = v25;
      __cxa_guard_release(&qword_26AF77D18);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78578;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector4FAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector4FAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector4FAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector4FAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

void re::IntrospectionInfo<re::Optional<re::Vector4<float>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78110))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF78920);
    qword_26AF78920 = (uint64_t)&unk_26E6CF980;
    __cxa_guard_release(&qword_26AF78110);
  }
  if ((byte_26AF77B45 & 1) == 0)
  {
    uint64_t v0 = re::introspect_Vector4F((re::IntrospectionBase **)1);
    if ((byte_26AF77B45 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF77B45 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78920, 0);
      qword_26AF78930 = 0x200000000DLL;
      dword_26AF78938 = v2;
      word_26AF7893C = 0;
      *(void *)&xmmword_26AF78940 = 0;
      *((void *)&xmmword_26AF78940 + 1) = 0xFFFFFFFFLL;
      qword_26AF78950 = v1;
      qword_26AF78958 = 0;
      qword_26AF78920 = (uint64_t)&unk_26E6CF980;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF78920, (const re::IntrospectionBase *)&v13);
      if (v14) {
        long long v5 = *(const char **)&v15[7];
      }
      else {
        long long v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      long long v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginOptionalType((uint64_t)&v13, v11, 0x20uLL, 0x10uLL, &v12);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v13, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF78940 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::Vector4FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 15);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6CFA00;
  return result;
}

uint64_t re::internal::defaultDestruct<re::Vector4FAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Vector4<float>>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::Vector4FAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 15);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6CFA00;
  return result;
}

void *re::allocInfo_QuaternionFAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77D28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798150, "QuaternionFAnimationAssetData");
    __cxa_guard_release(&qword_26AF77D28);
  }
  return &unk_268798150;
}

void re::initInfo_QuaternionFAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0x744531879CE654FCLL;
  v27[1] = "QuaternionFAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D30, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D30);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF785B0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF785B8 = v13;
      char v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF785C0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get();
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "from";
      *(void *)(v19 + 16) = &qword_26AF78960;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x6000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF785C8 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get();
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "to";
      *(void *)(v21 + 16) = &qword_26AF78960;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x8000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF785D0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get();
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "by";
      *(void *)(v23 + 16) = &qword_26AF78960;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0xA000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF785D8 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "easingFunction";
      *(void *)(v25 + 16) = &qword_26AF788A0;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0xC000000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF785E0 = v25;
      __cxa_guard_release(&qword_26AF77D30);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF785B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::QuaternionFAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::QuaternionFAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

void re::IntrospectionInfo<re::Optional<re::Quaternion<float>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78118))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF78960);
    qword_26AF78960 = (uint64_t)&unk_26E6CFAB0;
    __cxa_guard_release(&qword_26AF78118);
  }
  if ((byte_26AF77B46 & 1) == 0)
  {
    uint64_t v0 = re::introspect_QuaternionF((re::IntrospectionBase **)1);
    if ((byte_26AF77B46 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF77B46 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78960, 0);
      qword_26AF78970 = 0x200000000DLL;
      dword_26AF78978 = v2;
      word_26AF7897C = 0;
      *(void *)&xmmword_26AF78980 = 0;
      *((void *)&xmmword_26AF78980 + 1) = 0xFFFFFFFFLL;
      qword_26AF78990 = v1;
      qword_26AF78998 = 0;
      qword_26AF78960 = (uint64_t)&unk_26E6CFAB0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF78960, (const re::IntrospectionBase *)&v13);
      if (v14) {
        long long v5 = *(const char **)&v15[7];
      }
      else {
        long long v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      long long v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginOptionalType((uint64_t)&v13, v11, 0x20uLL, 0x10uLL, &v12);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v13, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF78980 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::QuaternionFAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 16);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6CFB30;
  return result;
}

uint64_t re::internal::defaultDestruct<re::QuaternionFAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::Quaternion<float>>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::QuaternionFAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 16);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6CFB30;
  return result;
}

void *re::allocInfo_SRTAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77D40))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687981C8, "SRTAnimationAssetData");
    __cxa_guard_release(&qword_26AF77D40);
  }
  return &unk_2687981C8;
}

void re::initInfo_SRTAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0xCD25914272D84496;
  v27[1] = "SRTAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D48, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D48);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF785E8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF785F0 = v13;
      char v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF785F8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get();
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "from";
      *(void *)(v19 + 16) = &qword_26AF789A0;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x6000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF78600 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get();
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "to";
      *(void *)(v21 + 16) = &qword_26AF789A0;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0xA000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78608 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get();
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "by";
      *(void *)(v23 + 16) = &qword_26AF789A0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0xE000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78610 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "easingFunction";
      *(void *)(v25 + 16) = &qword_26AF788A0;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x12000000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78618 = v25;
      __cxa_guard_release(&qword_26AF77D48);
    }
  }
  *((void *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF785E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SRTAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SRTAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SRTAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SRTAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

void re::IntrospectionInfo<re::Optional<re::GenericSRT<float>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78120))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF789A0);
    qword_26AF789A0 = (uint64_t)&unk_26E6CFBE0;
    __cxa_guard_release(&qword_26AF78120);
  }
  if ((byte_26AF77B47 & 1) == 0)
  {
    uint64_t v0 = re::introspect_SRT((re::IntrospectionBase **)1);
    if ((byte_26AF77B47 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF77B47 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF789A0, 0);
      qword_26AF789B0 = 0x400000000DLL;
      dword_26AF789B8 = v2;
      word_26AF789BC = 0;
      *(void *)&xmmword_26AF789C0 = 0;
      *((void *)&xmmword_26AF789C0 + 1) = 0xFFFFFFFFLL;
      qword_26AF789D0 = v1;
      qword_26AF789D8 = 0;
      qword_26AF789A0 = (uint64_t)&unk_26E6CFBE0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF789A0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        long long v5 = *(const char **)&v15[7];
      }
      else {
        long long v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      long long v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginOptionalType((uint64_t)&v13, v11, 0x40uLL, 0x10uLL, &v12);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v13, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF789C0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::SRTAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 17);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(unsigned char *)(result + 224) = 0;
  *(void *)(result + 288) = 0;
  *(void *)uint64_t result = &unk_26E6CFC60;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SRTAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData(a3);
}

uint64_t re::internal::defaultConstructV2<re::SRTAnimationAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 17);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(unsigned char *)(result + 224) = 0;
  *(void *)(result + 288) = 0;
  *(void *)uint64_t result = &unk_26E6CFC60;
  return result;
}

uint64_t re::introspect_SRTAnimationAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D50, this);
}

void *re::allocInfo_SkeletalPoseAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77D58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&_MergedGlobals_357, "SkeletalPoseAnimationAssetData");
    __cxa_guard_release(&qword_26AF77D58);
  }
  return &_MergedGlobals_357;
}

void re::initInfo_SkeletalPoseAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v43[0] = 0x8BC7078C7E9C1040;
  v43[1] = "SkeletalPoseAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v43);
  *((_OWORD *)this + 2) = v44;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D60, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D60);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797750 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_268797758 = v13;
      char v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_268797760 = v17;
      uint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get(v18);
      uint64_t v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "from";
      *(void *)(v19 + 16) = &qword_26AF789E0;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x5800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_268797768 = v19;
      uint64_t v20 = (re *)re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get(v20);
      uint64_t v21 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "to";
      *(void *)(v21 + 16) = &qword_26AF789E0;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x7800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_268797770 = v21;
      uint64_t v22 = (re *)re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get(v22);
      uint64_t v23 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "by";
      *(void *)(v23 + 16) = &qword_26AF789E0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x9800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_268797778 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "easingFunction";
      *(void *)(v25 + 16) = &qword_26AF788A0;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0xB800000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_268797780 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_AssetHandle((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "skeleton";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0xC000000007;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_268797788 = v29;
      uint64_t v30 = re::introspectionAllocator((re *)v29);
      long long v32 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "fromJointNames";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0xD800000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_268797790 = v33;
      long long v34 = re::introspectionAllocator((re *)v33);
      uint64_t v36 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "toJointNames";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x10000000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_268797798 = v37;
      uint64_t v38 = re::introspectionAllocator((re *)v37);
      __darwin_ino64_t v40 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v39);
      uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = "byJointNames";
      *(void *)(v41 + 16) = v40;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0x1280000000ALL;
      *(_DWORD *)(v41 + 40) = 0;
      *(void *)(v41 + 48) = 0;
      *(void *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_2687977A0 = v41;
      __cxa_guard_release(&qword_26AF77D60);
    }
  }
  *((void *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_268797750;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v42 = v44;
}

void re::IntrospectionInfo<re::Optional<re::SkeletalPoseAssetData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78128, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF78128);
    if (a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF789E0);
      qword_26AF789E0 = (uint64_t)&unk_26E6CFD10;
      __cxa_guard_release(&qword_26AF78128);
    }
  }
  if ((byte_26AF77B48 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77B98;
    if (qword_26AF77B98
      || (uint64_t v1 = re::allocInfo_SkeletalPoseAssetData(a1),
          qword_26AF77B98 = (uint64_t)v1,
          re::initInfo_SkeletalPoseAssetData((re *)v1, v2),
          (byte_26AF77B48 & 1) == 0))
    {
      byte_26AF77B48 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF789E0, 0);
      qword_26AF789F0 = 0x200000000DLL;
      dword_26AF789F8 = v3;
      word_26AF789FC = 0;
      *(void *)&xmmword_26AF78A00 = 0;
      *((void *)&xmmword_26AF78A00 + 1) = 0xFFFFFFFFLL;
      qword_26AF78A10 = (uint64_t)v1;
      qword_26AF78A18 = 0;
      qword_26AF789E0 = (uint64_t)&unk_26E6CFD10;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF789E0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x20uLL, 8uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF78A00 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info = (uint64_t)&unk_26E6CFD90;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  long long v6 = (re *)re::IntrospectionInfo<re::StringID>::get(1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info, 0);
    qword_2687736E0 = 0x2800000003;
    dword_2687736E8 = v10;
    word_2687736EC = 0;
    *(void *)&xmmword_2687736F0 = 0;
    *((void *)&xmmword_2687736F0 + 1) = 0xFFFFFFFFLL;
    qword_268773700 = v9;
    unk_268773708 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info = (uint64_t)&unk_26E6CFD90;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      long long v13 = v16;
    }
    else {
      long long v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_2687736F0 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::SkeletalPoseAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 18);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v3 + 88) = 0;
  *(unsigned char *)(v3 + 120) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)uint64_t v3 = &unk_26E6CFE28;
  *(void *)(v3 + 328) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_DWORD *)(v3 + 320) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SkeletalPoseAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a3 + 296);
  re::DynamicArray<re::StringID>::deinit(a3 + 256);
  re::DynamicArray<re::StringID>::deinit(a3 + 216);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 192));
  return re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData(a3);
}

double re::internal::defaultConstructV2<re::SkeletalPoseAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 18);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v1 + 88) = 0;
  *(unsigned char *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 152) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)uint64_t v1 = &unk_26E6CFE28;
  *(void *)(v1 + 328) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_DWORD *)(v1 + 280) = 0;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_DWORD *)(v1 + 320) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 240) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SkeletalPoseAnimationAssetData>(uint64_t a1)
{
  re::DynamicArray<re::StringID>::deinit(a1 + 296);
  re::DynamicArray<re::StringID>::deinit(a1 + 256);
  re::DynamicArray<re::StringID>::deinit(a1 + 216);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 192));
  return re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData(a1);
}

void *re::allocInfo_BlendShapeWeightsAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77D70))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687982B8, "BlendShapeWeightsAnimationAssetData");
    __cxa_guard_release(&qword_26AF77D70);
  }
  return &unk_2687982B8;
}

void re::initInfo_BlendShapeWeightsAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v39[0] = 0x25CA19AF0A5CEFC2;
  v39[1] = "BlendShapeWeightsAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v39);
  *((_OWORD *)this + 2) = v40;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D78, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D78);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_268797398 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2687973A0 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2687973A8 = v17;
      uint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get(v18);
      uint64_t v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "from";
      *(void *)(v19 + 16) = &qword_26AF78A20;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x5800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2687973B0 = v19;
      uint64_t v20 = (re *)re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get(v20);
      uint64_t v21 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "to";
      *(void *)(v21 + 16) = &qword_26AF78A20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x7800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2687973B8 = v21;
      uint64_t v22 = (re *)re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get(v22);
      uint64_t v23 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "by";
      *(void *)(v23 + 16) = &qword_26AF78A20;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x9800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2687973C0 = v23;
      id v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::EasingFunction *>::get();
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "easingFunction";
      *(void *)(v25 + 16) = &qword_26AF788A0;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0xB800000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2687973C8 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "fromWeightNames";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0xC000000007;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2687973D0 = v29;
      uint64_t v30 = re::introspectionAllocator((re *)v29);
      long long v32 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "toWeightNames";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0xE800000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2687973D8 = v33;
      long long v34 = re::introspectionAllocator((re *)v33);
      uint64_t v36 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "byWeightNames";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x11000000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_2687973E0 = v37;
      __cxa_guard_release(&qword_26AF77D78);
    }
  }
  *((void *)this + 2) = 0x13800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + 8) = &qword_268797398;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v38 = v40;
}

void re::IntrospectionInfo<re::Optional<re::BlendShapeWeightsAssetData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78130, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF78130);
    if (a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF78A20);
      qword_26AF78A20 = (uint64_t)&unk_26E6CFED8;
      __cxa_guard_release(&qword_26AF78130);
    }
  }
  if ((byte_26AF77B49 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77BB8;
    if (qword_26AF77BB8
      || (uint64_t v1 = re::allocInfo_BlendShapeWeightsAssetData(a1),
          qword_26AF77BB8 = (uint64_t)v1,
          re::initInfo_BlendShapeWeightsAssetData((re *)v1, v2),
          (byte_26AF77B49 & 1) == 0))
    {
      byte_26AF77B49 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78A20, 0);
      qword_26AF78A30 = 0x200000000DLL;
      dword_26AF78A38 = v3;
      word_26AF78A3C = 0;
      *(void *)&xmmword_26AF78A40 = 0;
      *((void *)&xmmword_26AF78A40 + 1) = 0xFFFFFFFFLL;
      qword_26AF78A50 = (uint64_t)v1;
      qword_26AF78A58 = 0;
      qword_26AF78A20 = (uint64_t)&unk_26E6CFED8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF78A20, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x20uLL, 8uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF78A40 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 50);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v3 + 88) = 0;
  *(unsigned char *)(v3 + 120) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 192) = 0;
  *(void *)uint64_t v3 = &unk_26E6CFF58;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  *(void *)(v3 + 304) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_DWORD *)(v3 + 256) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_DWORD *)(v3 + 296) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a3 + 272);
  re::DynamicArray<re::StringID>::deinit(a3 + 232);
  re::DynamicArray<re::StringID>::deinit(a3 + 192);
  return re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData(a3);
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 50);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v1 + 88) = 0;
  *(unsigned char *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 152) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 192) = 0;
  *(void *)uint64_t v1 = &unk_26E6CFF58;
  *(void *)(v1 + 200) = 0;
  *(void *)(v1 + 208) = 0;
  *(_DWORD *)(v1 + 216) = 0;
  *(void *)(v1 + 304) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_DWORD *)(v1 + 256) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_DWORD *)(v1 + 296) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BlendShapeWeightsAnimationAssetData>(uint64_t a1)
{
  re::DynamicArray<re::StringID>::deinit(a1 + 272);
  re::DynamicArray<re::StringID>::deinit(a1 + 232);
  re::DynamicArray<re::StringID>::deinit(a1 + 192);
  return re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData(a1);
}

void *re::allocInfo_FloatKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77D88))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798330, "FloatKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77D88);
  }
  return &unk_268798330;
}

void re::initInfo_FloatKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0xC4EF9F04D0096C00;
  v27[1] = "FloatKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77D90, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77D90);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78320 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78328 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78330 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78338 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      id v24 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "values";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x7800000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78340 = v25;
      __cxa_guard_release(&qword_26AF77D90);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF78320;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FloatKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FloatKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FloatKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FloatKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

double re::internal::defaultConstruct<re::FloatKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 19);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0008;
  return result;
}

void re::internal::defaultDestruct<re::FloatKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0078;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::FloatKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 19);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0008;
  return result;
}

void re::internal::defaultDestructV2<re::FloatKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0078;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_DoubleKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77DA0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687983A8, "DoubleKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77DA0);
  }
  return &unk_2687983A8;
}

void re::initInfo_DoubleKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0x1F76A011B0B906EALL;
  v27[1] = "DoubleKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DA8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77DA8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78348 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78350 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78358 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78360 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      id v24 = re::IntrospectionInfo<re::DynamicArray<double>>::get(1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "values";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x7800000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78368 = v25;
      __cxa_guard_release(&qword_26AF77DA8);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF78348;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DoubleKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DoubleKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DoubleKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DoubleKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<double>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info = (uint64_t)&unk_26E6D00B8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  long long v6 = (re *)re::introspect_double((re *)1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info, 0);
    qword_268773730 = 0x2800000003;
    dword_268773738 = v10;
    word_26877373C = 0;
    *(void *)&xmmword_268773740 = 0;
    *((void *)&xmmword_268773740 + 1) = 0xFFFFFFFFLL;
    qword_268773750 = v9;
    unk_268773758 = 0;
    re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info = (uint64_t)&unk_26E6D00B8;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268773740 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<double>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::DoubleKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 20);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0150;
  return result;
}

void re::internal::defaultDestruct<re::DoubleKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D01C0;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::DoubleKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 20);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0150;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D01C0;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector2FKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77DB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798420, "Vector2FKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77DB8);
  }
  return &unk_268798420;
}

void re::initInfo_Vector2FKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x6927DBC5FC9D8DF6;
  v26[1] = "Vector2FKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DC0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77DC0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78370 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78378 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78380 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78388 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v23 = re::IntrospectionInfo<re::DynamicArray<re::Vector2<float>>>::get(1);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "values";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF78390 = v24;
      __cxa_guard_release(&qword_26AF77DC0);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF78370;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector2FKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector2FKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector2FKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector2FKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

double re::internal::defaultConstruct<re::Vector2FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 21);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0200;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0270;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector2FKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 21);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0200;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0270;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector3FKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77DD0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798498, "Vector3FKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77DD0);
  }
  return &unk_268798498;
}

void re::initInfo_Vector3FKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0xFC505665DE3F9CB4;
  v26[1] = "Vector3FKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DD8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77DD8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78398 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF783A0 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF783A8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF783B0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v23 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "values";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF783B8 = v24;
      __cxa_guard_release(&qword_26AF77DD8);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF78398;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector3FKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector3FKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector3FKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector3FKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

double re::internal::defaultConstruct<re::Vector3FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 22);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D02B0;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0320;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector3FKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 22);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D02B0;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0320;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector4FKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77DE8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798510, "Vector4FKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77DE8);
  }
  return &unk_268798510;
}

void re::initInfo_Vector4FKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x8F78D105BFE1AB72;
  v26[1] = "Vector4FKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77DF0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77DF0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF783C0 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF783C8 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF783D0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF783D8 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v23 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "values";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF783E0 = v24;
      __cxa_guard_release(&qword_26AF77DF0);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF783C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector4FKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector4FKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector4FKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector4FKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

double re::internal::defaultConstruct<re::Vector4FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 23);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0360;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D03D0;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector4FKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 23);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0360;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D03D0;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_QuaternionFKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798588, "QuaternionFKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E00);
  }
  return &unk_268798588;
}

void re::initInfo_QuaternionFKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x7ACD97FBCF105B18;
  v26[1] = "QuaternionFKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E08, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E08);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF783E8 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF783F0 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF783F8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78400 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      uint64_t v23 = re::IntrospectionInfo<re::DynamicArray<re::Quaternion<float>>>::get(1);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "values";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x7800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF78408 = v24;
      __cxa_guard_release(&qword_26AF77E08);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF783E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::QuaternionFKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::QuaternionFKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

double re::internal::defaultConstruct<re::QuaternionFKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 24);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0410;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0480;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::QuaternionFKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 24);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0410;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0480;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SRTKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E18))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798600, "SRTKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E18);
  }
  return &unk_268798600;
}

void re::initInfo_SRTKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x79FFE5F38CE10B2;
  v25[1] = "SRTKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E20, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E20);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78410 = v9;
      int v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78418 = v13;
      long long v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78420 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78428 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::DynamicArray<re::GenericSRT<float>>>::get();
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "values";
      *(void *)(v23 + 16) = &qword_26AF78A60;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78430 = v23;
      __cxa_guard_release(&qword_26AF77E20);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF78410;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SRTKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SRTKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SRTKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SRTKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void re::IntrospectionInfo<re::DynamicArray<re::GenericSRT<float>>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78138, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78138))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF78A60);
    qword_26AF78A60 = (uint64_t)&unk_26E6D04C0;
    __cxa_guard_release(&qword_26AF78138);
  }
  if ((byte_26AF77B4A & 1) == 0)
  {
    uint64_t v0 = re::introspect_SRT((re::IntrospectionBase **)1);
    if ((byte_26AF77B4A & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF77B4A = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78A60, 0);
      qword_26AF78A70 = 0x2800000003;
      dword_26AF78A78 = v2;
      word_26AF78A7C = 0;
      *(void *)&xmmword_26AF78A80 = 0;
      *((void *)&xmmword_26AF78A80 + 1) = 0xFFFFFFFFLL;
      qword_26AF78A90 = v1;
      qword_26AF78A98 = 0;
      qword_26AF78A60 = (uint64_t)&unk_26E6D04C0;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF78A60, (const re::IntrospectionBase *)&v13);
      if (v14) {
        long long v5 = *(const char **)&v15[7];
      }
      else {
        long long v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      long long v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF78A80 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

double re::internal::defaultConstruct<re::SRTKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 25);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0558;
  return result;
}

void re::internal::defaultDestruct<re::SRTKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D05C8;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::SRTKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 25);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0558;
  return result;
}

void re::internal::defaultDestructV2<re::SRTKeyframeAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D05C8;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SkeletalPoseKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E30))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798678, "SkeletalPoseKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E30);
  }
  return &unk_268798678;
}

void re::initInfo_SkeletalPoseKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v33[0] = 0x1C7366FF8B08925CLL;
  v33[1] = "SkeletalPoseKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E38, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E38);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78620 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78628 = v13;
      char v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78630 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78638 = v21;
      uint64_t v22 = (re *)re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseAssetData>>::get(v22);
      uint64_t v23 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "values";
      *(void *)(v23 + 16) = &qword_26AF78AA0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78640 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      long long v26 = re::introspect_AssetHandle((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "skeleton";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0xA000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF78648 = v27;
      long long v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "jointNames";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0xB800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF78650 = v31;
      __cxa_guard_release(&qword_26AF77E38);
    }
  }
  *((void *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78620;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v32 = v34;
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseAssetData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78140, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF78140);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF78AA0);
      qword_26AF78AA0 = (uint64_t)&unk_26E6D0608;
      __cxa_guard_release(&qword_26AF78140);
    }
  }
  if ((byte_26AF77B4B & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77B98;
    if (qword_26AF77B98
      || (uint64_t v1 = re::allocInfo_SkeletalPoseAssetData(a1),
          qword_26AF77B98 = (uint64_t)v1,
          re::initInfo_SkeletalPoseAssetData((re *)v1, v2),
          (byte_26AF77B4B & 1) == 0))
    {
      byte_26AF77B4B = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78AA0, 0);
      qword_26AF78AB0 = 0x2800000003;
      dword_26AF78AB8 = v3;
      word_26AF78ABC = 0;
      *(void *)&xmmword_26AF78AC0 = 0;
      *((void *)&xmmword_26AF78AC0 + 1) = 0xFFFFFFFFLL;
      qword_26AF78AD0 = (uint64_t)v1;
      qword_26AF78AD8 = 0;
      qword_26AF78AA0 = (uint64_t)&unk_26E6D0608;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF78AA0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF78AC0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::SkeletalPoseKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 26);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D06A0;
  *(void *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_DWORD *)(v3 + 208) = 0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalPoseKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a3 + 23));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 20));
  *a3 = &unk_26E6D0710;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::SkeletalPoseKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 26);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D06A0;
  *(void *)(v1 + 216) = 0;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_DWORD *)(v1 + 208) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseKeyframeAnimationAssetData>(void *a1)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 23));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 20));
  *a1 = &unk_26E6D0710;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_BlendShapeWeightsKeyframeAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687986F0, "BlendShapeWeightsKeyframeAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E48);
  }
  return &unk_2687986F0;
}

void re::initInfo_BlendShapeWeightsKeyframeAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v29[0] = 0xEC78F2B93E3ACFDELL;
  v29[1] = "BlendShapeWeightsKeyframeAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E50, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E50);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78468 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78470 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78478 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "times";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x5000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78480 = v21;
      uint64_t v22 = (re *)re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsAssetData>>::get(v22);
      uint64_t v23 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "values";
      *(void *)(v23 + 16) = &qword_26AF78AE0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78488 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      long long v26 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "weightNames";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0xA000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF78490 = v27;
      __cxa_guard_release(&qword_26AF77E50);
    }
  }
  *((void *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF78468;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

void re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsAssetData>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78148, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF78148);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF78AE0);
      qword_26AF78AE0 = (uint64_t)&unk_26E6D0750;
      __cxa_guard_release(&qword_26AF78148);
    }
  }
  if ((byte_26AF77B4C & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF77BB8;
    if (qword_26AF77BB8
      || (uint64_t v1 = re::allocInfo_BlendShapeWeightsAssetData(a1),
          qword_26AF77BB8 = (uint64_t)v1,
          re::initInfo_BlendShapeWeightsAssetData((re *)v1, v2),
          (byte_26AF77B4C & 1) == 0))
    {
      byte_26AF77B4C = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78AE0, 0);
      qword_26AF78AF0 = 0x2800000003;
      dword_26AF78AF8 = v3;
      word_26AF78AFC = 0;
      *(void *)&xmmword_26AF78B00 = 0;
      *((void *)&xmmword_26AF78B00 + 1) = 0xFFFFFFFFLL;
      qword_26AF78B10 = (uint64_t)v1;
      qword_26AF78B18 = 0;
      qword_26AF78AE0 = (uint64_t)&unk_26E6D0750;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF78AE0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        long long v6 = *(const char **)&v16[7];
      }
      else {
        long long v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF78B00 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeWeightsKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 61);
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)uint64_t v3 = &unk_26E6D07E8;
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = 0;
  *(_DWORD *)(v3 + 184) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsKeyframeAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a3 + 20));
  *a3 = &unk_26E6D0858;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a3 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 61);
  *(_WORD *)(v1 + 72) = 256;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)uint64_t v1 = &unk_26E6D07E8;
  *(void *)(v1 + 192) = 0;
  *(void *)(v1 + 168) = 0;
  *(void *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsKeyframeAnimationAssetData>(void *a1)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 20));
  *a1 = &unk_26E6D0858;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_FloatSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E60))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798768, "FloatSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E60);
  }
  return &unk_268798768;
}

void re::initInfo_FloatSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v35[0] = 0x9D1CC4B9BF4754A8;
  v35[1] = "FloatSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E68, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E68);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78658 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78660 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78668 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78670 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78678 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF78680 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      long long v32 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "values";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x5800000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF78688 = v33;
      __cxa_guard_release(&qword_26AF77E68);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78658;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FloatSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FloatSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FloatSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FloatSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v34 = v36;
}

double re::internal::defaultConstruct<re::FloatSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 27);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0898;
  return result;
}

void re::internal::defaultDestruct<re::FloatSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0908;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::FloatSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 27);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0898;
  return result;
}

void re::internal::defaultDestructV2<re::FloatSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0908;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_DoubleSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687987E0, "DoubleSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E78);
  }
  return &unk_2687987E0;
}

void re::initInfo_DoubleSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v35[0] = 0xC952ABFC3A23B47ELL;
  v35[1] = "DoubleSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E80, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E80);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78690 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78698 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF786A0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF786A8 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF786B0 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF786B8 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      long long v32 = re::IntrospectionInfo<re::DynamicArray<double>>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "values";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x5800000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF786C0 = v33;
      __cxa_guard_release(&qword_26AF77E80);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78690;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DoubleSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DoubleSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DoubleSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DoubleSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v34 = v36;
}

double re::internal::defaultConstruct<re::DoubleSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 28);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0948;
  return result;
}

void re::internal::defaultDestruct<re::DoubleSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D09B8;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::DoubleSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 28);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0948;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D09B8;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector2FSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77E90))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798858, "Vector2FSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77E90);
  }
  return &unk_268798858;
}

void re::initInfo_Vector2FSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0x791E9523134C1BF2;
  v34[1] = "Vector2FSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77E98, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77E98);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF786C8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF786D0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF786D8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF786E0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF786E8 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF786F0 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      uint64_t v31 = re::IntrospectionInfo<re::DynamicArray<re::Vector2<float>>>::get(1);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "values";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF786F8 = v32;
      __cxa_guard_release(&qword_26AF77E98);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF786C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector2FSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector2FSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector2FSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector2FSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::Vector2FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 29);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D09F8;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0A68;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector2FSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 29);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D09F8;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0A68;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector3FSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77EA8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687988D0, "Vector3FSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77EA8);
  }
  return &unk_2687988D0;
}

void re::initInfo_Vector3FSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0x5493805185EE3D74;
  v34[1] = "Vector3FSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EB0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77EB0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78700 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78708 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78710 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78718 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78720 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF78728 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      uint64_t v31 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "values";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF78730 = v32;
      __cxa_guard_release(&qword_26AF77EB0);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78700;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector3FSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector3FSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector3FSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector3FSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::Vector3FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 30);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0AA8;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0B18;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector3FSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 30);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0AA8;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0B18;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector4FSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77EC0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798948, "Vector4FSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77EC0);
  }
  return &unk_268798948;
}

void re::initInfo_Vector4FSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0x30086B7FF8905EF6;
  v34[1] = "Vector4FSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EC8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77EC8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78738 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78740 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78748 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78750 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78758 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF78760 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      uint64_t v31 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "values";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF78768 = v32;
      __cxa_guard_release(&qword_26AF77EC8);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78738;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector4FSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector4FSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector4FSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector4FSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::Vector4FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 31);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0B58;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0BC8;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector4FSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 31);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0B58;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0BC8;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_QuaternionFSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77ED8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77ED8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687989C0, "QuaternionFSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77ED8);
  }
  return &unk_2687989C0;
}

void re::initInfo_QuaternionFSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0xD48706902A9A2290;
  v34[1] = "QuaternionFSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EE0, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77EE0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78770 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78778 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78780 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF78788 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78790 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF78798 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      uint64_t v31 = re::IntrospectionInfo<re::DynamicArray<re::Quaternion<float>>>::get(1);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "values";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x5800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF787A0 = v32;
      __cxa_guard_release(&qword_26AF77EE0);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF78770;
  *((void *)this + 9) = re::internal::defaultConstruct<re::QuaternionFSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::QuaternionFSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::QuaternionFSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 32);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0C08;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0C78;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::QuaternionFSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 32);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0C08;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0C78;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SRTSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77EF0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798A38, "SRTSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77EF0);
  }
  return &unk_268798A38;
}

void re::initInfo_SRTSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v33[0] = 0x236485BCA9E251B6;
  v33[1] = "SRTSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77EF8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77EF8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF787A8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF787B0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF787B8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF787C0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF787C8 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF787D0 = v29;
      long long v30 = re::introspectionAllocator((re *)v29);
      re::IntrospectionInfo<re::DynamicArray<re::GenericSRT<float>>>::get();
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "values";
      *(void *)(v31 + 16) = &qword_26AF78A60;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x5800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF787D8 = v31;
      __cxa_guard_release(&qword_26AF77EF8);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + 8) = &qword_26AF787A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SRTSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SRTSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SRTSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SRTSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v32 = v34;
}

double re::internal::defaultConstruct<re::SRTSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 33);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0CB8;
  return result;
}

void re::internal::defaultDestruct<re::SRTSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D0D28;
  long long v4 = (re::DynamicString *)(a3 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::SRTSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 33);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0CB8;
  return result;
}

void re::internal::defaultDestructV2<re::SRTSampledAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D0D28;
  int v2 = (re::DynamicString *)(a1 + 5);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SkeletalPoseSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F08))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798AB0, "SkeletalPoseSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77F08);
  }
  return &unk_268798AB0;
}

void re::initInfo_SkeletalPoseSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v53[0] = 0xFAC62E45F6DBF2CCLL;
  v53[1] = "SkeletalPoseSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v53);
  *((_OWORD *)this + 2) = v54;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F10, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77F10);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2687977A8 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2687977B0 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2687977B8 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2687977C0 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2687977C8 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2687977D0 = v29;
      long long v30 = (re *)re::introspectionAllocator((re *)v29);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseAssetData>>::get(v30);
      uint64_t v31 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "values";
      *(void *)(v31 + 16) = &qword_26AF78AA0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x5800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2687977D8 = v31;
      long long v32 = re::introspectionAllocator((re *)v31);
      long long v34 = re::introspect_AssetHandle((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "skeleton";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x8000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_2687977E0 = v35;
      long long v36 = re::introspectionAllocator((re *)v35);
      long long v38 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v37);
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "jointNames";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x9800000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_2687977E8 = v39;
      long long v40 = re::introspectionAllocator((re *)v39);
      long long v42 = re::introspect_BOOL((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "scaleChannelMask";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0xC000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_2687977F0 = v43;
      long long v44 = re::introspectionAllocator((re *)v43);
      uint64_t v46 = re::introspect_BOOL((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "rotationChannelMask";
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0xC10000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_2687977F8 = v47;
      uint64_t v48 = re::introspectionAllocator((re *)v47);
      unint64_t v50 = re::introspect_BOOL((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "translationChannelMask";
      *(void *)(v51 + 16) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0xC20000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_268797800 = v51;
      __cxa_guard_release(&qword_26AF77F10);
    }
  }
  *((void *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((void *)this + 8) = &qword_2687977A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v52 = v54;
}

double re::internal::defaultConstruct<re::SkeletalPoseSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 34);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0D68;
  *(void *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  *(_WORD *)(v3 + 192) = 257;
  *(unsigned char *)(v3 + 194) = 1;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalPoseSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a3 + 19));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 16));
  *a3 = &unk_26E6D0DD8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::SkeletalPoseSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 34);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0D68;
  *(void *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_DWORD *)(v1 + 176) = 0;
  *(_WORD *)(v1 + 192) = 257;
  *(unsigned char *)(v1 + 194) = 1;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseSampledAnimationAssetData>(void *a1)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 19));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  *a1 = &unk_26E6D0DD8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_BlendShapeWeightsSampledAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798B28, "BlendShapeWeightsSampledAnimationAssetData");
    __cxa_guard_release(&qword_26AF77F20);
  }
  return &unk_268798B28;
}

void re::initInfo_BlendShapeWeightsSampledAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v37[0] = 0xC7AD95E0998AFD0ALL;
  v37[1] = "BlendShapeWeightsSampledAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v37);
  *((_OWORD *)this + 2) = v38;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F28, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77F28);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF787E0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF787E8 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "enableInterpolation";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4900000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF787F0 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v20 = re::introspect_float((re *)1, v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "frameInterval";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = 0x4C00000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_26AF787F8 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_float((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "startTime";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF78800 = v25;
      long long v26 = re::introspectionAllocator((re *)v25);
      long long v28 = re::introspect_float((re *)1, v27);
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v26 + 32))(v26, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "endTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x5400000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF78808 = v29;
      long long v30 = (re *)re::introspectionAllocator((re *)v29);
      re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsAssetData>>::get(v30);
      uint64_t v31 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "values";
      *(void *)(v31 + 16) = &qword_26AF78AE0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x5800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF78810 = v31;
      long long v32 = re::introspectionAllocator((re *)v31);
      long long v34 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "weightNames";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x8000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF78818 = v35;
      __cxa_guard_release(&qword_26AF77F28);
    }
  }
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((void *)this + 8) = &qword_26AF787E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsSampledAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsSampledAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsSampledAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsSampledAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v36 = v38;
}

double re::internal::defaultConstruct<re::BlendShapeWeightsSampledAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 59);
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0E18;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsSampledAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a3 + 16));
  *a3 = &unk_26E6D0E88;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a3 + 11));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsSampledAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 59);
  *(_WORD *)(v1 + 72) = 256;
  *(_DWORD *)(v1 + 76) = 1023969417;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0E18;
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 136) = 0;
  *(void *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 152) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsSampledAnimationAssetData>(void *a1)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 16));
  *a1 = &unk_26E6D0E88;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)(a1 + 11));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_OrbitAnimationAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798BA0, "OrbitAnimationAssetData");
    __cxa_guard_release(&qword_26AF77F38);
  }
  return &unk_268798BA0;
}

void re::initInfo_OrbitAnimationAssetData(re *this, re::IntrospectionBase *a2)
{
  v37[0] = 0x3D39B8489028CAC0;
  v37[1] = "OrbitAnimationAssetData";
  re::StringID::destroyString((re::StringID *)v37);
  *((_OWORD *)this + 2) = v38;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F40, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77F40);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78820 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "isAdditive";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x4800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF78828 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_float((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "duration";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x4C00000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78830 = v17;
      uint64_t v18 = re::introspectionAllocator((re *)v17);
      uint64_t v19 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "axis";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x5000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78838 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v22 = re::introspect_SRT((re::IntrospectionBase **)1);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "startTransform";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x6000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF78840 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      long long v26 = re::introspect_BOOL((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "spinClockwise";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x9000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF78848 = v27;
      long long v28 = re::introspectionAllocator((re *)v27);
      long long v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "orientToPath";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x9100000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF78850 = v31;
      long long v32 = re::introspectionAllocator((re *)v31);
      long long v34 = re::introspect_float((re *)1, v33);
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *(void *)(v35 + 8) = "rotations";
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = 0;
      *(void *)(v35 + 32) = 0x9400000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      *(void *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_26AF78858 = v35;
      __cxa_guard_release(&qword_26AF77F40);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((void *)this + 8) = &qword_26AF78820;
  *((void *)this + 9) = re::internal::defaultConstruct<re::OrbitAnimationAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::OrbitAnimationAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::OrbitAnimationAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::OrbitAnimationAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v36 = v38;
}

double re::internal::defaultConstruct<re::OrbitAnimationAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 37);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)uint64_t v3 = &unk_26E6D0EC8;
  *(_DWORD *)(v3 + 76) = 1065353216;
  double result = 0.0078125;
  *(_OWORD *)(v3 + 80) = xmmword_23435FD60;
  *(void *)(v3 + 96) = 0x3F8000003F800000;
  *(void *)(v3 + 104) = 1065353216;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0x3F80000000000000;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(_WORD *)(v3 + 144) = 1;
  *(_DWORD *)(v3 + 148) = 1065353216;
  return result;
}

void re::internal::defaultDestruct<re::OrbitAnimationAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D3730;
  uint64_t v3 = (re::StringID *)(a3 + 3);
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString(v3);
}

double re::internal::defaultConstructV2<re::OrbitAnimationAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 37);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)uint64_t v1 = &unk_26E6D0EC8;
  *(_DWORD *)(v1 + 76) = 1065353216;
  double result = 0.0078125;
  *(_OWORD *)(v1 + 80) = xmmword_23435FD60;
  *(void *)(v1 + 96) = 0x3F8000003F800000;
  *(void *)(v1 + 104) = 1065353216;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0x3F80000000000000;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = 0;
  *(_WORD *)(v1 + 144) = 1;
  *(_DWORD *)(v1 + 148) = 1065353216;
  return result;
}

void re::internal::defaultDestructV2<re::OrbitAnimationAssetData>(void *a1)
{
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_AnimationStateTimelineAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798C18, "AnimationStateTimelineAssetData");
    __cxa_guard_release(&qword_26AF77F50);
  }
  return &unk_268798C18;
}

void re::initInfo_AnimationStateTimelineAssetData(re *this, re::IntrospectionBase *a2)
{
  v19[0] = 0xDC48FE4832FCDED8;
  v19[1] = "AnimationStateTimelineAssetData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F58, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77F58);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF781F0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_double((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "startTime";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x5000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF781F8 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      long long v16 = re::introspect_double((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "endTime";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x5800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF78200 = v17;
      __cxa_guard_release(&qword_26AF77F58);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF781F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AnimationStateTimelineAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AnimationStateTimelineAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AnimationStateTimelineAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::AnimationStateTimelineAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v18 = v20;
}

uint64_t re::internal::defaultConstruct<re::AnimationStateTimelineAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a3, 38);
  *(unsigned char *)(result + 72) = 0;
  *(void *)uint64_t result = &unk_26E6D0F20;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::AnimationStateTimelineAssetData>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultConstructV2<re::AnimationStateTimelineAssetData>(uint64_t a1)
{
  uint64_t result = re::TimelineAssetData::TimelineAssetData(a1, 38);
  *(unsigned char *)(result + 72) = 0;
  *(void *)uint64_t result = &unk_26E6D0F20;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::AnimationStateTimelineAssetData>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_FloatAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798C90, "FloatAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77F68);
  }
  return &unk_268798C90;
}

void re::initInfo_FloatAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x6825313C501E7D66;
  v22[1] = "FloatAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F70, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF77F70);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78220 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF78228 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF78230 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78238 = v20;
      __cxa_guard_release(&qword_26AF77F70);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF78220;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FloatAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FloatAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FloatAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FloatAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::FloatAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 39);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D0FD0;
  return result;
}

void re::internal::defaultDestruct<re::FloatAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D1040;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::FloatAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 39);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D0FD0;
  return result;
}

void re::internal::defaultDestructV2<re::FloatAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D1040;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_DoubleAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798D08, "DoubleAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77F80);
  }
  return &unk_268798D08;
}

void re::initInfo_DoubleAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x5E7E51CB85623FBCLL;
  v22[1] = "DoubleAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F88, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77F88);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78240 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF78248 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF78250 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78258 = v20;
      __cxa_guard_release(&qword_26AF77F88);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF78240;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DoubleAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DoubleAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DoubleAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DoubleAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::DoubleAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 40);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D1080;
  return result;
}

void re::internal::defaultDestruct<re::DoubleAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D10F0;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::DoubleAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 40);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D1080;
  return result;
}

void re::internal::defaultDestructV2<re::DoubleAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D10F0;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector2FAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77F98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77F98))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798D80, "Vector2FAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77F98);
  }
  return &unk_268798D80;
}

void re::initInfo_Vector2FAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x4AF48CA0B60E9A30;
  v22[1] = "Vector2FAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77FA0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78260 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF78268 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF78270 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78278 = v20;
      __cxa_guard_release(&qword_26AF77FA0);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF78260;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector2FAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector2FAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector2FAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector2FAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::Vector2FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 41);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D1130;
  return result;
}

void re::internal::defaultDestruct<re::Vector2FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D11A0;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector2FAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 41);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D1130;
  return result;
}

void re::internal::defaultDestructV2<re::Vector2FAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D11A0;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector3FAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77FB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798DF8, "Vector3FAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77FB0);
  }
  return &unk_268798DF8;
}

void re::initInfo_Vector3FAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x1CDB65FD08AE6332;
  v22[1] = "Vector3FAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77FB8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78280 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF78288 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF78290 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78298 = v20;
      __cxa_guard_release(&qword_26AF77FB8);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF78280;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector3FAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector3FAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector3FAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector3FAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::Vector3FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 42);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D11E0;
  return result;
}

void re::internal::defaultDestruct<re::Vector3FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D1250;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector3FAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 42);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D11E0;
  return result;
}

void re::internal::defaultDestructV2<re::Vector3FAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D1250;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_Vector4FAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77FC8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798E70, "Vector4FAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77FC8);
  }
  return &unk_268798E70;
}

void re::initInfo_Vector4FAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xEEC23F595B4E2C34;
  v22[1] = "Vector4FAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FD0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77FD0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF782A0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF782A8 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF782B0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF782B8 = v20;
      __cxa_guard_release(&qword_26AF77FD0);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF782A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::Vector4FAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::Vector4FAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::Vector4FAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::Vector4FAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::Vector4FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 43);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D1290;
  return result;
}

void re::internal::defaultDestruct<re::Vector4FAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D1300;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::Vector4FAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 43);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D1290;
  return result;
}

void re::internal::defaultDestructV2<re::Vector4FAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D1300;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_QuaternionFAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77FE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798EE8, "QuaternionFAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77FE0);
  }
  return &unk_268798EE8;
}

void re::initInfo_QuaternionFAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x6E06572531F5714ELL;
  v22[1] = "QuaternionFAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FE8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF77FE8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF782C0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF782C8 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF782D0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF782D8 = v20;
      __cxa_guard_release(&qword_26AF77FE8);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF782C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::QuaternionFAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::QuaternionFAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::QuaternionFAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::QuaternionFAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::QuaternionFAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 44);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D1340;
  return result;
}

void re::internal::defaultDestruct<re::QuaternionFAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D13B0;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::QuaternionFAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 44);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D1340;
  return result;
}

void re::internal::defaultDestructV2<re::QuaternionFAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D13B0;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SRTAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF77FF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF77FF8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798F60, "SRTAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF77FF8);
  }
  return &unk_268798F60;
}

void re::initInfo_SRTAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x7B80BD2EFFEE6EF4;
  v22[1] = "SRTAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78000, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78000);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF782E0 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF782E8 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF782F0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF782F8 = v20;
      __cxa_guard_release(&qword_26AF78000);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF782E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SRTAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SRTAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SRTAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SRTAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::SRTAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 45);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D13F0;
  return result;
}

void re::internal::defaultDestruct<re::SRTAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D1460;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::SRTAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 45);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D13F0;
  return result;
}

void re::internal::defaultDestructV2<re::SRTAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D1460;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

void *re::allocInfo_SkeletalPoseAnimationBlendTreeAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78010, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78010))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268798FD8, "SkeletalPoseAnimationBlendTreeAssetData");
    __cxa_guard_release(&qword_26AF78010);
  }
  return &unk_268798FD8;
}

void re::initInfo_SkeletalPoseAnimationBlendTreeAssetData(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x11A6898F504228ALL;
  v22[1] = "SkeletalPoseAnimationBlendTreeAssetData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78018, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78018);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78300 = v9;
      long long v10 = re::introspectionAllocator((re *)v9);
      uint64_t v11 = re::introspect_AnimationBlendTreeDefinition((re::IntrospectionBase **)1);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_blendTreeDefinition";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x5000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF78308 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_clips";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0xF800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF78310 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "isAdditive";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF78318 = v20;
      __cxa_guard_release(&qword_26AF78018);
    }
  }
  *((void *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF78300;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseAnimationBlendTreeAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseAnimationBlendTreeAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseAnimationBlendTreeAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseAnimationBlendTreeAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::SkeletalPoseAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = re::TimelineAssetData::TimelineAssetData(a3, 46);
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(void *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(void *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(void *)uint64_t v3 = &unk_26E6D14A0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalPoseAnimationBlendTreeAssetData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6D1528;
  uint64_t v4 = (uint64_t)(a3 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a3 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v4);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a3 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a3 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a3 + 10));
  *a3 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a3 + 5));
  re::StringID::destroyString((re::StringID *)(a3 + 3));
}

double re::internal::defaultConstructV2<re::SkeletalPoseAnimationBlendTreeAssetData>(uint64_t a1)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData(a1, 46);
  *(unsigned char *)(v1 + 72) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(void *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 168) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_DWORD *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(void *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)uint64_t v1 = &unk_26E6D14A0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseAnimationBlendTreeAssetData>(void *a1)
{
  *a1 = &unk_26E6D1528;
  uint64_t v2 = (uint64_t)(a1 + 26);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(a1 + 31));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)(a1 + 10));
  *a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
}

uint64_t *re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info = (uint64_t)&unk_26E6D1648;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  long long v6 = (re *)re::introspect_uint8_t((re *)1, a2);
  if (re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info, 0);
    qword_268773780 = 0x1800000004;
    dword_268773788 = v10;
    word_26877378C = 0;
    *(void *)&xmmword_268773790 = 0;
    *((void *)&xmmword_268773790 + 1) = 0xFFFFFFFFLL;
    qword_2687737A0 = v9;
    unk_2687737A8 = 0;
    re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info = (uint64_t)&unk_26E6D1648;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268773790 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(BOOL)::info;
}

void *re::allocInfo_TimelineEventData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78040))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268799050, "TimelineEventData");
    __cxa_guard_release(&qword_26AF78040);
  }
  return &unk_268799050;
}

void re::initInfo_TimelineEventData(re *this, re::IntrospectionBase *a2)
{
  uint64_t v123 = 0x113B17C5EE537C06;
  v124 = "TimelineEventData";
  re::StringID::destroyString((re::StringID *)&v123);
  *((_OWORD *)this + 2) = v116;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78038, memory_order_acquire) & 1) != 0
    || (uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78038), !v4))
  {
LABEL_2:
    *((void *)this + 2) = 0x23000000008;
    *((_DWORD *)this + 6) = 8;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 12;
    *((void *)this + 8) = &qword_268797808;
    *((void *)this + 9) = re::internal::defaultConstruct<re::TimelineEventData>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 10) = re::internal::defaultDestruct<re::TimelineEventData>;
    *((void *)this + 13) = re::internal::defaultConstructV2<re::TimelineEventData>;
    *((void *)this + 14) = re::internal::defaultDestructV2<re::TimelineEventData>;
    re::IntrospectionRegistry::add(this, v3);
    long long v115 = v116;
    return;
  }
  long long v5 = re::introspectionAllocator(v4);
  uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v8 = 1;
  *(void *)(v8 + 8) = "m_eventType";
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 1;
  *(_DWORD *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_268797808 = v8;
  uint64_t v9 = re::introspectionAllocator((re *)v8);
  uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
  *(_DWORD *)uint64_t v12 = 1;
  *(void *)(v12 + 8) = "m_times";
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = 0x1000000002;
  *(_DWORD *)(v12 + 40) = 0;
  *(void *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 64) = 0;
  qword_268797810 = v12;
  uint64_t v13 = re::introspectionAllocator((re *)v12);
  long long v15 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v14);
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)(v16 + 8) = "m_durations";
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = 0x3800000003;
  *(_DWORD *)(v16 + 40) = 0;
  *(void *)(v16 + 48) = 0;
  *(void *)(v16 + 56) = 0;
  *(_DWORD *)(v16 + 64) = 0;
  qword_268797818 = v16;
  long long v18 = re::introspectionAllocator((re *)v16);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78150))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2687973E8);
    qword_2687973E8 = (uint64_t)&unk_26E6D15A8;
    __cxa_guard_release(&qword_26AF78150);
  }
  if ((byte_26AF77B4D & 1) == 0)
  {
    uint64_t v19 = (re *)re::IntrospectionInfo<re::StringID>::get(1, v17);
    uint64_t v20 = (uint64_t)v19;
    long long v21 = (void *)qword_26AF780D8;
    if (!qword_26AF780D8)
    {
      long long v21 = re::allocInfo_TimelineEventParameterDescription(v19);
      qword_26AF780D8 = (uint64_t)v21;
      re::initInfo_TimelineEventParameterDescription((re *)v21, v22);
    }
    if ((byte_26AF77B4D & 1) == 0)
    {
      byte_26AF77B4D = 1;
      int v23 = *((_DWORD *)v21 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2687973E8, 0);
      qword_2687973F8 = 0x3000000007;
      dword_268797400 = v23;
      word_268797404 = 0;
      *(void *)&xmmword_268797408 = 0;
      *((void *)&xmmword_268797408 + 1) = 0xFFFFFFFFLL;
      qword_268797418 = v20;
      unk_268797420 = 0;
      qword_268797428 = (uint64_t)v21;
      unk_268797430 = 0;
      qword_2687973E8 = (uint64_t)&unk_26E6D15A8;
      re::IntrospectionRegistry::add(v24, v25);
      re::getPrettyTypeName((re *)&qword_2687973E8, (const re::IntrospectionBase *)&v123);
      if (v124) {
        long long v26 = v125;
      }
      else {
        long long v26 = (char *)&v124 + 1;
      }
      if (v123 && (v124 & 1) != 0) {
        (*(void (**)(void))(*(void *)v123 + 40))();
      }
      StringID v27 = *(StringID *)(v20 + 32);
      long long v118 = *((_OWORD *)v21 + 2);
      StringID v119 = v27;
      long long v28 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v120);
      if (v28)
      {
        uint64_t v29 = *v28;
        *((void *)&v117 + 1) = v29;
      }
      else
      {
        uint64_t v123 = 0x449AD97C4B77BED4;
        v124 = "_CompareFunc";
        long long v30 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v123);
        if (v30)
        {
          uint64_t v31 = *v30;
          re::StringID::destroyString((re::StringID *)&v123);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v123);
          *(void *)&v129.var0 = 0x449AD97C4B77BED4;
          v129.var1 = "_CompareFunc";
          long long v32 = (void *)v123;
          uint64_t v31 = (uint64_t)v124;
          re::StringID::destroyString((re::StringID *)&v129);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v129, (uint64_t)&v124);
        if (!v32
          || (long long v33 = *v130,
              uint64_t v123 = v31,
              v124 = v33,
              LODWORD(v125) = -1,
              (long long v34 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v129.var0 + 768, &v123)) == 0)|| !*(void *)v34)
        {
          StringID v128 = v119;
          uint64_t v126 = (uint64_t)v32;
          v127 = (const char *)v31;
        }
        long long v121 = v118;
        StringID v122 = v119;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v123, v120, 1, 0x30uLL, 8uLL, (long long *)&v122, &v121);
        re::TypeBuilder::setConstructor((uint64_t)&v123, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v123, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v123, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v123, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v123, v35);
      }
      xmmword_268797408 = v117;
      re::StringID::destroyString((re::StringID *)v120);
    }
  }
  uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
  *(_DWORD *)uint64_t v36 = 1;
  *(void *)(v36 + 8) = "m_typeMap";
  *(void *)(v36 + 16) = &qword_2687973E8;
  *(void *)(v36 + 24) = 0;
  *(void *)(v36 + 32) = 0x8800000004;
  *(_DWORD *)(v36 + 40) = 0;
  *(void *)(v36 + 48) = 0;
  *(void *)(v36 + 56) = 0;
  *(_DWORD *)(v36 + 64) = 0;
  qword_268797820 = v36;
  uint64_t v37 = (re *)re::introspectionAllocator((re *)v36);
  long long v38 = v37;
  uint64_t v39 = (re *)qword_26AF78060;
  if (!qword_26AF78060)
  {
    uint64_t v39 = (re *)re::allocInfo_EventParameterFloatArray(v37);
    qword_26AF78060 = (uint64_t)v39;
    re::initInfo_EventParameterFloatArray(v39, v40);
  }
  uint64_t v41 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
  *(_DWORD *)uint64_t v41 = 1;
  *(void *)(v41 + 8) = "m_floatData";
  *(void *)(v41 + 16) = v39;
  *(void *)(v41 + 24) = 0;
  *(void *)(v41 + 32) = 0xB800000005;
  *(_DWORD *)(v41 + 40) = 0;
  *(void *)(v41 + 48) = 0;
  *(void *)(v41 + 56) = 0;
  *(_DWORD *)(v41 + 64) = 0;
  qword_268797828 = v41;
  long long v42 = (re *)re::introspectionAllocator((re *)v41);
  uint64_t v43 = v42;
  long long v44 = (re *)qword_26AF78078;
  if (!qword_26AF78078)
  {
    long long v44 = (re *)re::allocInfo_EventParameterIntArray(v42);
    qword_26AF78078 = (uint64_t)v44;
    re::initInfo_EventParameterIntArray(v44, v45);
  }
  uint64_t v46 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
  *(_DWORD *)uint64_t v46 = 1;
  *(void *)(v46 + 8) = "m_intData";
  *(void *)(v46 + 16) = v44;
  *(void *)(v46 + 24) = 0;
  *(void *)(v46 + 32) = 0xE800000006;
  *(_DWORD *)(v46 + 40) = 0;
  *(void *)(v46 + 48) = 0;
  *(void *)(v46 + 56) = 0;
  *(_DWORD *)(v46 + 64) = 0;
  qword_268797830 = v46;
  uint64_t v47 = (re *)re::introspectionAllocator((re *)v46);
  uint64_t v48 = v47;
  long long v49 = (re *)qword_26AF78090;
  if (!qword_26AF78090)
  {
    long long v49 = (re *)re::allocInfo_EventParameterStringArray(v47);
    qword_26AF78090 = (uint64_t)v49;
    re::initInfo_EventParameterStringArray(v49, v50);
  }
  uint64_t v51 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
  *(_DWORD *)uint64_t v51 = 1;
  *(void *)(v51 + 8) = "m_stringData";
  *(void *)(v51 + 16) = v49;
  *(void *)(v51 + 24) = 0;
  *(void *)(v51 + 32) = 0x11800000007;
  *(_DWORD *)(v51 + 40) = 0;
  *(void *)(v51 + 48) = 0;
  *(void *)(v51 + 56) = 0;
  *(_DWORD *)(v51 + 64) = 0;
  qword_268797838 = v51;
  long long v52 = (re *)re::introspectionAllocator((re *)v51);
  uint64_t v53 = v52;
  long long v54 = (re *)qword_26AF780A8;
  if (!qword_26AF780A8)
  {
    long long v54 = (re *)re::allocInfo_EventParameterVector4Array(v52);
    qword_26AF780A8 = (uint64_t)v54;
    re::initInfo_EventParameterVector4Array(v54, v55);
  }
  uint64_t v56 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
  *(_DWORD *)uint64_t v56 = 1;
  *(void *)(v56 + 8) = "m_vector4Data";
  *(void *)(v56 + 16) = v54;
  *(void *)(v56 + 24) = 0;
  *(void *)(v56 + 32) = 0x14800000008;
  *(_DWORD *)(v56 + 40) = 0;
  *(void *)(v56 + 48) = 0;
  *(void *)(v56 + 56) = 0;
  *(_DWORD *)(v56 + 64) = 0;
  qword_268797840 = v56;
  unint64_t v58 = re::introspectionAllocator((re *)v56);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78028, memory_order_acquire) & 1) == 0)
  {
    v95 = (re *)__cxa_guard_acquire(&qword_26AF78028);
    if (v95)
    {
      v96 = re::introspectionAllocator(v95);
      v97 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v96 + 32))(v96, 24, 8);
      *(_DWORD *)v97 = 1;
      *((void *)v97 + 1) = -1;
      *((void *)v97 + 2) = "REAnimatableValueTypeInvalid";
      qword_2687972B8 = (uint64_t)v97;
      v98 = re::introspectionAllocator(v97);
      v99 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v98 + 32))(v98, 24, 8);
      *(_DWORD *)v99 = 1;
      *((void *)v99 + 1) = 0;
      *((void *)v99 + 2) = "REAnimatableValueTypeFloat";
      qword_2687972C0 = (uint64_t)v99;
      v100 = re::introspectionAllocator(v99);
      v101 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v100 + 32))(v100, 24, 8);
      *(_DWORD *)v101 = 1;
      *((void *)v101 + 1) = 1;
      *((void *)v101 + 2) = "REAnimatableValueTypeDouble";
      qword_2687972C8 = (uint64_t)v101;
      v102 = re::introspectionAllocator(v101);
      v103 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v102 + 32))(v102, 24, 8);
      *(_DWORD *)v103 = 1;
      *((void *)v103 + 1) = 2;
      *((void *)v103 + 2) = "REAnimatableValueTypeVector2F";
      qword_2687972D0 = (uint64_t)v103;
      v104 = re::introspectionAllocator(v103);
      v105 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v104 + 32))(v104, 24, 8);
      *(_DWORD *)v105 = 1;
      *((void *)v105 + 1) = 3;
      *((void *)v105 + 2) = "REAnimatableValueTypeVector3F";
      qword_2687972D8 = (uint64_t)v105;
      v106 = re::introspectionAllocator(v105);
      v107 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v106 + 32))(v106, 24, 8);
      *(_DWORD *)v107 = 1;
      *((void *)v107 + 1) = 4;
      *((void *)v107 + 2) = "REAnimatableValueTypeVector4F";
      qword_2687972E0 = (uint64_t)v107;
      v108 = re::introspectionAllocator(v107);
      v109 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v108 + 32))(v108, 24, 8);
      *(_DWORD *)v109 = 1;
      *((void *)v109 + 1) = 5;
      *((void *)v109 + 2) = "REAnimatableValueTypeQuaternionF";
      qword_2687972E8 = (uint64_t)v109;
      v110 = re::introspectionAllocator(v109);
      v111 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v110 + 32))(v110, 24, 8);
      *(_DWORD *)v111 = 1;
      *((void *)v111 + 1) = 6;
      *((void *)v111 + 2) = "REAnimatableValueTypeSRT";
      qword_2687972F0 = (uint64_t)v111;
      v112 = re::introspectionAllocator(v111);
      uint64_t v113 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v112 + 32))(v112, 24, 8);
      *(_DWORD *)uint64_t v113 = 1;
      *(void *)(v113 + 8) = 7;
      *(void *)(v113 + 16) = "REAnimatableValueTypeSkeletalPose";
      qword_2687972F8 = v113;
      __cxa_guard_release(&qword_26AF78028);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78030))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_268797300, "REAnimatableValueType", 1, 1, 1, 1);
    qword_268797300 = (uint64_t)&unk_26E715E00;
    qword_268797340 = (uint64_t)&re::introspect_REAnimatableValueType(BOOL)::enumTable;
    dword_268797310 = 9;
    __cxa_guard_release(&qword_26AF78030);
  }
  if (byte_26AF77B41)
  {
LABEL_63:
    uint64_t v81 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, 72, 8);
    *(_DWORD *)uint64_t v81 = 1;
    *(void *)(v81 + 8) = "m_animatedType";
    *(void *)(v81 + 16) = &qword_268797300;
    *(void *)(v81 + 24) = 0;
    *(void *)(v81 + 32) = 0x1D800000009;
    *(_DWORD *)(v81 + 40) = 0;
    *(void *)(v81 + 48) = 0;
    *(void *)(v81 + 56) = 0;
    *(_DWORD *)(v81 + 64) = 0;
    qword_268797848 = v81;
    v82 = (re *)re::introspectionAllocator((re *)v81);
    v83 = v82;
    v84 = (re *)qword_26AF780C0;
    if (!qword_26AF780C0)
    {
      v84 = (re *)re::allocInfo_EventParameterDataArray(v82);
      qword_26AF780C0 = (uint64_t)v84;
      re::initInfo_EventParameterDataArray(v84, v85);
    }
    uint64_t v86 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v83 + 32))(v83, 72, 8);
    *(_DWORD *)uint64_t v86 = 1;
    *(void *)(v86 + 8) = "m_userData";
    *(void *)(v86 + 16) = v84;
    *(void *)(v86 + 24) = 0;
    *(void *)(v86 + 32) = 0x1780000000ALL;
    *(_DWORD *)(v86 + 40) = 0;
    *(void *)(v86 + 48) = 0;
    *(void *)(v86 + 56) = 0;
    *(_DWORD *)(v86 + 64) = 0;
    qword_268797850 = v86;
    v87 = re::introspectionAllocator((re *)v86);
    v89 = re::introspect_BOOL((re *)1, v88);
    uint64_t v90 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v87 + 32))(v87, 72, 8);
    *(_DWORD *)uint64_t v90 = 1;
    *(void *)(v90 + 8) = "m_reversible";
    *(void *)(v90 + 16) = v89;
    *(void *)(v90 + 24) = 0;
    *(void *)(v90 + 32) = 0x2000000000BLL;
    *(_DWORD *)(v90 + 40) = 0;
    *(void *)(v90 + 48) = 0;
    *(void *)(v90 + 56) = 0;
    *(_DWORD *)(v90 + 64) = 0;
    qword_268797858 = v90;
    v91 = re::introspectionAllocator((re *)v90);
    v93 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v92);
    uint64_t v94 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v91 + 32))(v91, 72, 8);
    *(_DWORD *)uint64_t v94 = 1;
    *(void *)(v94 + 8) = "m_constantParameters";
    *(void *)(v94 + 16) = v93;
    *(void *)(v94 + 24) = 0;
    *(void *)(v94 + 32) = 0x1E00000000CLL;
    *(_DWORD *)(v94 + 40) = 0;
    *(void *)(v94 + 48) = 0;
    *(void *)(v94 + 56) = 0;
    *(_DWORD *)(v94 + 64) = 0;
    qword_268797860 = v94;
    __cxa_guard_release(&qword_26AF78038);
    goto LABEL_2;
  }
  byte_26AF77B41 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_268797300, v57);
  uint64_t v126 = 0x2B6E2394F1C7DEB4;
  v127 = "REAnimatableValueType";
  uint64_t v123 = 6104748;
  v124 = "char";
  long long v59 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v123);
  if (v59)
  {
    unint64_t v60 = *v59;
    re::StringID::destroyString((re::StringID *)&v123);
    uint64_t v61 = (unsigned int *)qword_268797340;
    v129.var1 = v60;
    re::TypeBuilder::beginEnumType((uint64_t)&v123, &v126, 1, 1, (uint64_t)&v129);
    unint64_t v63 = *v61;
    if (v63)
    {
      for (unint64_t i = 0; i < v63; ++i)
      {
        uint64_t v65 = *(void *)(*((void *)v61 + 1) + 8 * i);
        if (*(_DWORD *)v65 == 1)
        {
          size_t v66 = *(char **)(v65 + 16);
          if (v66)
          {
            uint64_t v67 = *v66;
            if (*v66)
            {
              char v68 = v66[1];
              if (v68)
              {
                stat v69 = (unsigned __int8 *)(v66 + 2);
                do
                {
                  uint64_t v67 = 31 * v67 + v68;
                  int v70 = *v69++;
                  char v68 = v70;
                }
                while (v70);
              }
            }
          }
          else
          {
            uint64_t v67 = 0;
          }
          uint64_t v71 = *(void *)(v65 + 8);
          *(void *)&v128.var0 = 2 * v67;
          v128.var1 = v66;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v123, v71, &v128);
          re::StringID::destroyString((re::StringID *)&v128);
          unint64_t v63 = *v61;
        }
      }
      if (v63)
      {
        for (unint64_t j = 0; j < v63; ++j)
        {
          uint64_t v73 = *(void *)(*((void *)v61 + 1) + 8 * j);
          if (*(_DWORD *)v73 == 2)
          {
            long long v74 = *(char **)(v73 + 16);
            if (v74)
            {
              uint64_t v75 = *v74;
              if (*v74)
              {
                char v76 = v74[1];
                if (v76)
                {
                  long long v77 = (unsigned __int8 *)(v74 + 2);
                  do
                  {
                    uint64_t v75 = 31 * v75 + v76;
                    int v78 = *v77++;
                    char v76 = v78;
                  }
                  while (v78);
                }
              }
            }
            else
            {
              uint64_t v75 = 0;
            }
            uint64_t v79 = *(void *)(v73 + 8);
            *(void *)&v128.var0 = 2 * v75;
            v128.var1 = v74;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v123, v79, &v128);
            re::StringID::destroyString((re::StringID *)&v128);
            unint64_t v63 = *v61;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v123, v80);
    xmmword_268797320 = (__int128)v128;
    re::StringID::destroyString((re::StringID *)&v126);
    goto LABEL_63;
  }
  re::StringID::destroyString((re::StringID *)&v123);
  re::internal::assertLog((re::internal *)5, v114, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAnimatableValueType");
  _os_crash();
  __break(1u);
}

double re::internal::defaultConstruct<re::TimelineEventData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_DWORD *)(a3 + 120) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 156) = 0u;
  *(void *)(a3 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 216) = 0;
  *(void *)(a3 + 464) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 252) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 300) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 348) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 396) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 444) = 0u;
  *(unsigned char *)(a3 + 472) = -1;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(unsigned char *)(a3 + 512) = 1;
  *(void *)(a3 + 552) = 0;
  *(void *)(a3 + 536) = 0;
  *(_DWORD *)(a3 + 544) = 0;
  *(_OWORD *)(a3 + 520) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::TimelineEventData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 520);

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a3 + 480));
  re::DynamicArray<re::ObjCObject>::deinit(a3 + 432);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 384);
  re::DynamicArray<unsigned long>::deinit(a3 + 336);
  re::DynamicArray<re::StringID>::deinit(a3 + 288);
  re::DynamicArray<unsigned long>::deinit(a3 + 240);
  re::DynamicArray<unsigned long>::deinit(a3 + 192);
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 136));
  re::DynamicArray<unsigned long>::deinit(a3 + 96);
  re::DynamicArray<unsigned long>::deinit(a3 + 56);
  re::DynamicArray<unsigned long>::deinit(a3 + 16);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::TimelineEventData>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = "";
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(void *)(a1 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(unsigned char *)(a1 + 472) = -1;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(unsigned char *)(a1 + 512) = 1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::TimelineEventData>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 520);

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 480));
  re::DynamicArray<re::ObjCObject>::deinit(a1 + 432);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 384);
  re::DynamicArray<unsigned long>::deinit(a1 + 336);
  re::DynamicArray<re::StringID>::deinit(a1 + 288);
  re::DynamicArray<unsigned long>::deinit(a1 + 240);
  re::DynamicArray<unsigned long>::deinit(a1 + 192);
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 136));
  re::DynamicArray<unsigned long>::deinit(a1 + 96);
  re::DynamicArray<unsigned long>::deinit(a1 + 56);
  re::DynamicArray<unsigned long>::deinit(a1 + 16);
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_EventParameterFloatArray(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78050))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687990C8, "EventParameterFloatArray");
    __cxa_guard_release(&qword_26AF78050);
  }
  return &unk_2687990C8;
}

void re::initInfo_EventParameterFloatArray(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x784085696EA0F218;
  v14[1] = "EventParameterFloatArray";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78058, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78058);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "numParamsPerEvent";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF78190 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "parameters";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF78198 = v12;
      __cxa_guard_release(&qword_26AF78058);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF78190;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventParameterFloatArray>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventParameterFloatArray>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventParameterFloatArray>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EventParameterFloatArray>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::EventParameterFloatArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterFloatArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterFloatArray>(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterFloatArray>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

void *re::allocInfo_EventParameterIntArray(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78068))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268799140, "EventParameterIntArray");
    __cxa_guard_release(&qword_26AF78068);
  }
  return &unk_268799140;
}

void re::initInfo_EventParameterIntArray(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xF60099BB89454E32;
  v14[1] = "EventParameterIntArray";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78070, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78070);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "numParamsPerEvent";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF781A0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<int>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "parameters";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF781A8 = v12;
      __cxa_guard_release(&qword_26AF78070);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF781A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventParameterIntArray>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventParameterIntArray>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventParameterIntArray>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EventParameterIntArray>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::EventParameterIntArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterIntArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterIntArray>(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterIntArray>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

void *re::allocInfo_EventParameterStringArray(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78080))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687991B8, "EventParameterStringArray");
    __cxa_guard_release(&qword_26AF78080);
  }
  return &unk_2687991B8;
}

void re::initInfo_EventParameterStringArray(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x901D6332C27CF5F2;
  v14[1] = "EventParameterStringArray";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78088, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78088);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "numParamsPerEvent";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF781B0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "parameters";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF781B8 = v12;
      __cxa_guard_release(&qword_26AF78088);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF781B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventParameterStringArray>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventParameterStringArray>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventParameterStringArray>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EventParameterStringArray>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::EventParameterStringArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterStringArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::StringID>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterStringArray>(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterStringArray>(uint64_t a1)
{
  return re::DynamicArray<re::StringID>::deinit(a1 + 8);
}

void *re::allocInfo_EventParameterVector4Array(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78098))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&_MergedGlobals_358, "EventParameterVector4Array");
    __cxa_guard_release(&qword_26AF78098);
  }
  return &_MergedGlobals_358;
}

void re::initInfo_EventParameterVector4Array(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x755284B38F8DEAEELL;
  v13[1] = "EventParameterVector4Array";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF780A0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "numParamsPerEvent";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF781C0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v10 = re::IntrospectionInfo<re::DynamicArray<re::Vector4<float>>>::get(1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "parameters";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF781C8 = v11;
      __cxa_guard_release(&qword_26AF780A0);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF781C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventParameterVector4Array>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventParameterVector4Array>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventParameterVector4Array>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EventParameterVector4Array>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

double re::internal::defaultConstruct<re::EventParameterVector4Array>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterVector4Array>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterVector4Array>(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterVector4Array>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

void *re::allocInfo_EventParameterDataArray(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF780B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_2687992A8, "EventParameterDataArray");
    __cxa_guard_release(&qword_26AF780B0);
  }
  return &unk_2687992A8;
}

void re::initInfo_EventParameterDataArray(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xCA12954DAFAB3680;
  v13[1] = "EventParameterDataArray";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF780B8);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "numParamsPerEvent";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF781D0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::FixedArray<unsigned char>>>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "parameters";
      *(void *)(v11 + 16) = &_MergedGlobals_356;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF781D8 = v11;
      __cxa_guard_release(&qword_26AF780B8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF781D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventParameterDataArray>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventParameterDataArray>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventParameterDataArray>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EventParameterDataArray>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::DynamicArray<re::FixedArray<unsigned char>>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78158))
  {
    *(void *)re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&_MergedGlobals_356) = &unk_26E6D16E0;
    __cxa_guard_release(&qword_26AF78158);
  }
  if ((byte_26AF77B4E & 1) == 0)
  {
    uint64_t v2 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, a2);
    if ((byte_26AF77B4E & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF77B4E = 1;
      int v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&_MergedGlobals_356, 0);
      qword_268797288 = 0x2800000003;
      dword_268797290 = v4;
      word_268797294 = 0;
      *(void *)&xmmword_268797298 = 0;
      *((void *)&xmmword_268797298 + 1) = 0xFFFFFFFFLL;
      qword_2687972A8 = v3;
      unk_2687972B0 = 0;
      _MergedGlobals_356 = (uint64_t)&unk_26E6D16E0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&_MergedGlobals_356, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_268797298 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

double re::internal::defaultConstruct<re::EventParameterDataArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::EventParameterDataArray>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 8);
}

double re::internal::defaultConstructV2<re::EventParameterDataArray>(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::EventParameterDataArray>(uint64_t a1)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 8);
}

void *re::allocInfo_TimelineEventParameterDescription(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF780C8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268799320, "TimelineEventParameterDescription");
    __cxa_guard_release(&qword_26AF780C8);
  }
  return &unk_268799320;
}

void re::initInfo_TimelineEventParameterDescription(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xC66E9C766DEB81D8;
  v14[1] = "TimelineEventParameterDescription";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780D0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF780D0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "index";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF781E0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_size_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "type";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF781E8 = v12;
      __cxa_guard_release(&qword_26AF780D0);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF781E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TimelineEventParameterDescription>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TimelineEventParameterDescription>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TimelineEventParameterDescription>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TimelineEventParameterDescription>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::allocInfo_EventTimelineAssetData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF780E0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_268799398, "EventTimelineAssetData");
    __cxa_guard_release(&qword_26AF780E0);
  }
  return &unk_268799398;
}

void re::initInfo_EventTimelineAssetData(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x7F4FDB2050CD383ELL;
  v20[1] = "EventTimelineAssetData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF780E8, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF780E8);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      long long v6 = v5;
      uint64_t v7 = (re *)qword_26AF77B68;
      if (!qword_26AF77B68)
      {
        uint64_t v7 = (re *)re::allocInfo_TimelineAssetData(v5);
        qword_26AF77B68 = (uint64_t)v7;
        re::initInfo_TimelineAssetData(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "TimelineAssetData";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF78208 = v9;
      uint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      long long v11 = v10;
      uint64_t v12 = (re *)qword_26AF78048;
      if (!qword_26AF78048)
      {
        uint64_t v12 = (re *)re::allocInfo_TimelineEventData(v10);
        qword_26AF78048 = (uint64_t)v12;
        re::initInfo_TimelineEventData(v12, v13);
      }
      uint64_t v14 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "m_eventData";
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x5000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF78210 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::introspect_BOOL((re *)1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "isAdditive";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0x4800000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF78218 = v18;
      __cxa_guard_release(&qword_26AF780E8);
    }
  }
  *((void *)this + 2) = 0x28000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF78208;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventTimelineAssetData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventTimelineAssetData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventTimelineAssetData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::EventTimelineAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::EventTimelineAssetData>(int a1, int a2, re::EventTimelineAssetData *this)
{
  return re::EventTimelineAssetData::EventTimelineAssetData(this);
}

void re::internal::defaultDestruct<re::EventTimelineAssetData>(int a1, int a2, re::EventTimelineAssetData *this)
{
}

uint64_t re::internal::convertToAssetData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v287 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 176, 8);
      uint64_t v46 = re::TimelineAssetData::TimelineAssetData(v5, 1);
      *(void *)uint64_t v46 = &unk_26E6CEBD0;
      *(unsigned char *)(v46 + 112) = 0;
      *(void *)(v46 + 128) = 0;
      *(unsigned char *)(v46 + 136) = 0;
      *(void *)(v46 + 144) = 0;
      *(unsigned char *)(v46 + 152) = 0;
      *(void *)(v46 + 80) = 0;
      *(void *)(v46 + 88) = 0;
      *(void *)(v46 + 72) = 0;
      *(unsigned char *)(v46 + 96) = 0;
      *(_DWORD *)(v46 + 168) = 1065353216;
      *(unsigned char *)(v46 + 172) = 0;
      *(_DWORD *)(v46 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v46 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v46 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      long long v47 = *(_OWORD *)(v5 + 72);
      *(_OWORD *)(v5 + 72) = v283[0];
      v283[0] = v47;
      uint64_t v48 = *(void *)(v5 + 88);
      *(void *)(v5 + 88) = *(void *)&v283[1];
      *(void *)&v283[1] = v48;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
      if (*(unsigned char *)(v5 + 96) || *(unsigned char *)(a1 + 80))
      {
        if (!*(unsigned char *)(v5 + 96) || *(unsigned char *)(a1 + 80))
        {
          if (!*(unsigned char *)(v5 + 96) && *(unsigned char *)(a1 + 80)) {
            *(unsigned char *)(v5 + 96) = 1;
          }
          *(void *)(v5 + 104) = *(void *)(a1 + 88);
        }
        else
        {
          *(unsigned char *)(v5 + 96) = 0;
        }
      }
      if (*(unsigned char *)(v5 + 112) || *(unsigned char *)(a1 + 96))
      {
        if (!*(unsigned char *)(v5 + 112) || *(unsigned char *)(a1 + 96))
        {
          if (!*(unsigned char *)(v5 + 112) && *(unsigned char *)(a1 + 96)) {
            *(unsigned char *)(v5 + 112) = 1;
          }
          *(void *)(v5 + 120) = *(void *)(a1 + 104);
        }
        else
        {
          *(unsigned char *)(v5 + 112) = 0;
        }
      }
      *(void *)(v5 + 128) = *(void *)(a1 + 112);
      *(unsigned char *)(v5 + 136) = *(unsigned char *)(a1 + 120);
      *(void *)(v5 + 144) = *(void *)(a1 + 128);
      if (*(unsigned char *)(v5 + 152) || *(unsigned char *)(a1 + 136))
      {
        if (!*(unsigned char *)(v5 + 152) || *(unsigned char *)(a1 + 136))
        {
          if (!*(unsigned char *)(v5 + 152) && *(unsigned char *)(a1 + 136)) {
            *(unsigned char *)(v5 + 152) = 1;
          }
          *(void *)(v5 + 160) = *(void *)(a1 + 144);
        }
        else
        {
          *(unsigned char *)(v5 + 152) = 0;
        }
      }
      *(_DWORD *)(v5 + 168) = *(_DWORD *)(a1 + 152);
      *(unsigned char *)(v5 + 172) = *(unsigned char *)(a1 + 156);
      return v5;
    case 2:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 112, 8);
      uint64_t v49 = re::TimelineAssetData::TimelineAssetData(v5, 2);
      *(void *)uint64_t v49 = &unk_26E6CEC28;
      *(void *)(v49 + 72) = 0;
      unint64_t v50 = (void *)(v49 + 72);
      *(void *)(v49 + 104) = 0;
      *(void *)(v49 + 80) = 0;
      *(void *)(v49 + 88) = 0;
      *(_DWORD *)(v49 + 96) = 0;
      *(_DWORD *)(v49 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v49 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v49 + 24), (uint64_t *)(a1 + 24));
      uint64_t v51 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      unint64_t v52 = *(void *)(a1 + 80);
      re::DynamicArray<re::AssetHandle>::setCapacity(v50, v52);
      ++*(_DWORD *)(v5 + 96);
      if (*(void *)(a1 + 80))
      {
        unint64_t v53 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add(v50, (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v53;
        }
        while (v53 < *(void *)(a1 + 80));
      }
      return v5;
    case 3:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 3);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CED00;
      goto LABEL_222;
    case 4:
    case 6:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 4);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CEDB0;
      goto LABEL_222;
    case 5:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 5);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CEEB8;
      goto LABEL_222;
    case 7:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 7);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CF0C8;
      goto LABEL_222;
    case 8:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 8);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CF1D0;
      goto LABEL_222;
    case 9:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 9);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CF2D8;
      goto LABEL_222;
    case 0xA:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 10);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CF3E0;
      goto LABEL_222;
    case 0xB:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 120, 8);
      uint64_t v54 = re::TimelineAssetData::TimelineAssetData(v5, 11);
      *(unsigned char *)(v54 + 72) = 0;
      *(void *)(v54 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v54 + 88) = 0;
      *(unsigned char *)(v54 + 96) = 0;
      *(unsigned char *)(v54 + 104) = 0;
      *(void *)(v54 + 112) = 0;
      *(void *)uint64_t v54 = &unk_26E6D3618;
      *(_DWORD *)(v54 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v54 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v54 + 24), (uint64_t *)(a1 + 24));
      char v55 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      int v56 = *(unsigned __int8 *)(a1 + 88);
      if (*(unsigned char *)(v5 + 88)) {
        BOOL v57 = 0;
      }
      else {
        BOOL v57 = v56 == 0;
      }
      if (!v57)
      {
        if (*(unsigned char *)(v5 + 88)) {
          BOOL v58 = v56 == 0;
        }
        else {
          BOOL v58 = 0;
        }
        if (v58)
        {
          *(unsigned char *)(v5 + 88) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 88)) {
            BOOL v59 = 1;
          }
          else {
            BOOL v59 = v56 == 0;
          }
          if (!v59) {
            *(unsigned char *)(v5 + 88) = 1;
          }
          *(_DWORD *)(v5 + 92) = *(_DWORD *)(a1 + 92);
        }
      }
      int v223 = *(unsigned __int8 *)(a1 + 96);
      if (*(unsigned char *)(v5 + 96)) {
        BOOL v224 = 0;
      }
      else {
        BOOL v224 = v223 == 0;
      }
      if (!v224)
      {
        if (*(unsigned char *)(v5 + 96)) {
          BOOL v225 = v223 == 0;
        }
        else {
          BOOL v225 = 0;
        }
        if (v225)
        {
          *(unsigned char *)(v5 + 96) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 96)) {
            BOOL v226 = 1;
          }
          else {
            BOOL v226 = v223 == 0;
          }
          if (!v226) {
            *(unsigned char *)(v5 + 96) = 1;
          }
          *(_DWORD *)(v5 + 100) = *(_DWORD *)(a1 + 100);
        }
      }
      int v241 = *(unsigned __int8 *)(a1 + 104);
      if (*(unsigned char *)(v5 + 104)) {
        BOOL v242 = 0;
      }
      else {
        BOOL v242 = v241 == 0;
      }
      if (!v242)
      {
        if (*(unsigned char *)(v5 + 104)) {
          BOOL v243 = v241 == 0;
        }
        else {
          BOOL v243 = 0;
        }
        if (v243)
        {
          *(unsigned char *)(v5 + 104) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 104)) {
            BOOL v244 = 1;
          }
          else {
            BOOL v244 = v241 == 0;
          }
          if (!v244) {
            *(unsigned char *)(v5 + 104) = 1;
          }
          *(_DWORD *)(v5 + 108) = *(_DWORD *)(a1 + 108);
        }
      }
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(void *)(v5 + 80) = *(void *)(a1 + 80);
      uint64_t v261 = *(void *)(a1 + 112);
      if (v261)
      {
      }
      else
      {
        uint64_t v262 = 0;
      }
      *(void *)(v5 + 112) = v262;
      return v5;
    case 0xC:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 144, 8);
      uint64_t v60 = re::TimelineAssetData::TimelineAssetData(v5, 12);
      *(unsigned char *)(v60 + 72) = 0;
      *(void *)(v60 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v60 + 88) = 0;
      *(unsigned char *)(v60 + 104) = 0;
      *(unsigned char *)(v60 + 120) = 0;
      *(void *)(v60 + 136) = 0;
      *(void *)uint64_t v60 = &unk_26E6CF670;
      *(_DWORD *)(v60 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v60 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v60 + 24), (uint64_t *)(a1 + 24));
      uint64_t v61 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      int v62 = *(unsigned __int8 *)(a1 + 88);
      if (*(unsigned char *)(v5 + 88)) {
        BOOL v63 = 0;
      }
      else {
        BOOL v63 = v62 == 0;
      }
      if (!v63)
      {
        if (*(unsigned char *)(v5 + 88)) {
          BOOL v64 = v62 == 0;
        }
        else {
          BOOL v64 = 0;
        }
        if (v64)
        {
          *(unsigned char *)(v5 + 88) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 88)) {
            BOOL v65 = 1;
          }
          else {
            BOOL v65 = v62 == 0;
          }
          if (!v65) {
            *(unsigned char *)(v5 + 88) = 1;
          }
          *(void *)(v5 + 96) = *(void *)(a1 + 96);
        }
      }
      int v227 = *(unsigned __int8 *)(a1 + 104);
      if (*(unsigned char *)(v5 + 104)) {
        BOOL v228 = 0;
      }
      else {
        BOOL v228 = v227 == 0;
      }
      if (!v228)
      {
        if (*(unsigned char *)(v5 + 104)) {
          BOOL v229 = v227 == 0;
        }
        else {
          BOOL v229 = 0;
        }
        if (v229)
        {
          *(unsigned char *)(v5 + 104) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 104)) {
            BOOL v230 = 1;
          }
          else {
            BOOL v230 = v227 == 0;
          }
          if (!v230) {
            *(unsigned char *)(v5 + 104) = 1;
          }
          *(void *)(v5 + 112) = *(void *)(a1 + 112);
        }
      }
      int v245 = *(unsigned __int8 *)(a1 + 120);
      if (*(unsigned char *)(v5 + 120)) {
        BOOL v246 = 0;
      }
      else {
        BOOL v246 = v245 == 0;
      }
      if (v246) {
        goto LABEL_415;
      }
      if (*(unsigned char *)(v5 + 120)) {
        BOOL v247 = v245 == 0;
      }
      else {
        BOOL v247 = 0;
      }
      if (v247) {
        goto LABEL_414;
      }
      if (*(unsigned char *)(v5 + 120)) {
        BOOL v248 = 1;
      }
      else {
        BOOL v248 = v245 == 0;
      }
      if (!v248) {
        *(unsigned char *)(v5 + 120) = 1;
      }
      *(void *)(v5 + 128) = *(void *)(a1 + 128);
      goto LABEL_415;
    case 0xD:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 144, 8);
      uint64_t v66 = re::TimelineAssetData::TimelineAssetData(v5, 13);
      *(unsigned char *)(v66 + 72) = 0;
      *(void *)(v66 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v66 + 88) = 0;
      *(unsigned char *)(v66 + 104) = 0;
      *(unsigned char *)(v66 + 120) = 0;
      *(void *)(v66 + 136) = 0;
      *(void *)uint64_t v66 = &unk_26E6CF7A0;
      *(_DWORD *)(v66 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v66 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v66 + 24), (uint64_t *)(a1 + 24));
      uint64_t v61 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      int v67 = *(unsigned __int8 *)(a1 + 88);
      if (*(unsigned char *)(v5 + 88)) {
        BOOL v68 = 0;
      }
      else {
        BOOL v68 = v67 == 0;
      }
      if (!v68)
      {
        if (*(unsigned char *)(v5 + 88)) {
          BOOL v69 = v67 == 0;
        }
        else {
          BOOL v69 = 0;
        }
        if (v69)
        {
          *(unsigned char *)(v5 + 88) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 88)) {
            BOOL v70 = 1;
          }
          else {
            BOOL v70 = v67 == 0;
          }
          if (!v70) {
            *(unsigned char *)(v5 + 88) = 1;
          }
          *(void *)(v5 + 96) = *(void *)(a1 + 96);
        }
      }
      int v231 = *(unsigned __int8 *)(a1 + 104);
      if (*(unsigned char *)(v5 + 104)) {
        BOOL v232 = 0;
      }
      else {
        BOOL v232 = v231 == 0;
      }
      if (!v232)
      {
        if (*(unsigned char *)(v5 + 104)) {
          BOOL v233 = v231 == 0;
        }
        else {
          BOOL v233 = 0;
        }
        if (v233)
        {
          *(unsigned char *)(v5 + 104) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 104)) {
            BOOL v234 = 1;
          }
          else {
            BOOL v234 = v231 == 0;
          }
          if (!v234) {
            *(unsigned char *)(v5 + 104) = 1;
          }
          *(void *)(v5 + 112) = *(void *)(a1 + 112);
        }
      }
      int v249 = *(unsigned __int8 *)(a1 + 120);
      if (*(unsigned char *)(v5 + 120)) {
        BOOL v250 = 0;
      }
      else {
        BOOL v250 = v249 == 0;
      }
      if (v250) {
        goto LABEL_415;
      }
      if (*(unsigned char *)(v5 + 120)) {
        BOOL v251 = v249 == 0;
      }
      else {
        BOOL v251 = 0;
      }
      if (v251)
      {
LABEL_414:
        *(unsigned char *)(v5 + 120) = 0;
      }
      else
      {
        if (*(unsigned char *)(v5 + 120)) {
          BOOL v252 = 1;
        }
        else {
          BOOL v252 = v249 == 0;
        }
        if (!v252) {
          *(unsigned char *)(v5 + 120) = 1;
        }
        *(void *)(v5 + 128) = *(void *)(a1 + 128);
      }
LABEL_415:
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(void *)(v5 + 80) = *(void *)(a1 + 80);
      uint64_t v253 = *(void *)(a1 + 136);
      if (v253)
      {
      }
      else
      {
        uint64_t v254 = 0;
      }
      *(void *)(v5 + 136) = v254;
      return v5;
    case 0xE:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 208, 16);
      uint64_t v71 = re::TimelineAssetData::TimelineAssetData(v5, 14);
      *(unsigned char *)(v71 + 72) = 0;
      *(void *)(v71 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v71 + 96) = 0;
      *(unsigned char *)(v71 + 128) = 0;
      *(unsigned char *)(v71 + 160) = 0;
      *(void *)(v71 + 192) = 0;
      v72 = &unk_26E6CF8D0;
      goto LABEL_104;
    case 0xF:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 208, 16);
      uint64_t v71 = re::TimelineAssetData::TimelineAssetData(v5, 15);
      *(unsigned char *)(v71 + 72) = 0;
      *(void *)(v71 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v71 + 96) = 0;
      *(unsigned char *)(v71 + 128) = 0;
      *(unsigned char *)(v71 + 160) = 0;
      *(void *)(v71 + 192) = 0;
      v72 = &unk_26E6CFA00;
      goto LABEL_104;
    case 0x10:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 208, 16);
      uint64_t v71 = re::TimelineAssetData::TimelineAssetData(v5, 16);
      *(unsigned char *)(v71 + 72) = 0;
      *(void *)(v71 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v71 + 96) = 0;
      *(unsigned char *)(v71 + 128) = 0;
      *(unsigned char *)(v71 + 160) = 0;
      *(void *)(v71 + 192) = 0;
      v72 = &unk_26E6CFB30;
LABEL_104:
      *(void *)uint64_t v71 = v72;
      *(_DWORD *)(v71 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v71 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v71 + 24), (uint64_t *)(a1 + 24));
      uint64_t v73 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      int v74 = *(unsigned __int8 *)(a1 + 96);
      if (*(unsigned char *)(v5 + 96)) {
        BOOL v75 = 0;
      }
      else {
        BOOL v75 = v74 == 0;
      }
      if (!v75)
      {
        if (*(unsigned char *)(v5 + 96)) {
          BOOL v76 = v74 == 0;
        }
        else {
          BOOL v76 = 0;
        }
        if (v76)
        {
          *(unsigned char *)(v5 + 96) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 96)) {
            BOOL v77 = 1;
          }
          else {
            BOOL v77 = v74 == 0;
          }
          if (!v77) {
            *(unsigned char *)(v5 + 96) = 1;
          }
          *(_OWORD *)(v5 + 112) = *(_OWORD *)(a1 + 112);
        }
      }
      int v213 = *(unsigned __int8 *)(a1 + 128);
      if (*(unsigned char *)(v5 + 128)) {
        BOOL v214 = 0;
      }
      else {
        BOOL v214 = v213 == 0;
      }
      if (!v214)
      {
        if (*(unsigned char *)(v5 + 128)) {
          BOOL v215 = v213 == 0;
        }
        else {
          BOOL v215 = 0;
        }
        if (v215)
        {
          *(unsigned char *)(v5 + 128) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 128)) {
            BOOL v216 = 1;
          }
          else {
            BOOL v216 = v213 == 0;
          }
          if (!v216) {
            *(unsigned char *)(v5 + 128) = 1;
          }
          *(_OWORD *)(v5 + 144) = *(_OWORD *)(a1 + 144);
        }
      }
      int v217 = *(unsigned __int8 *)(a1 + 160);
      if (*(unsigned char *)(v5 + 160)) {
        BOOL v218 = 0;
      }
      else {
        BOOL v218 = v217 == 0;
      }
      if (!v218)
      {
        if (*(unsigned char *)(v5 + 160)) {
          BOOL v219 = v217 == 0;
        }
        else {
          BOOL v219 = 0;
        }
        if (v219)
        {
          *(unsigned char *)(v5 + 160) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 160)) {
            BOOL v220 = 1;
          }
          else {
            BOOL v220 = v217 == 0;
          }
          if (!v220) {
            *(unsigned char *)(v5 + 160) = 1;
          }
          *(_OWORD *)(v5 + 176) = *(_OWORD *)(a1 + 176);
        }
      }
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(void *)(v5 + 80) = *(void *)(a1 + 80);
      uint64_t v221 = *(void *)(a1 + 192);
      if (v221)
      {
      }
      else
      {
        uint64_t v222 = 0;
      }
      *(void *)(v5 + 192) = v222;
      return v5;
    case 0x11:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 304, 16);
      uint64_t v78 = re::TimelineAssetData::TimelineAssetData(v5, 17);
      *(unsigned char *)(v78 + 72) = 0;
      *(void *)(v78 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v78 + 96) = 0;
      *(unsigned char *)(v78 + 160) = 0;
      *(unsigned char *)(v78 + 224) = 0;
      *(void *)(v78 + 288) = 0;
      *(void *)uint64_t v78 = &unk_26E6CFC60;
      *(_DWORD *)(v78 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v78 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v78 + 24), (uint64_t *)(a1 + 24));
      uint64_t v79 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      int v80 = *(unsigned __int8 *)(a1 + 96);
      if (*(unsigned char *)(v5 + 96)) {
        BOOL v81 = 0;
      }
      else {
        BOOL v81 = v80 == 0;
      }
      if (!v81)
      {
        if (*(unsigned char *)(v5 + 96)) {
          BOOL v82 = v80 == 0;
        }
        else {
          BOOL v82 = 0;
        }
        if (v82)
        {
          *(unsigned char *)(v5 + 96) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 96)) {
            BOOL v83 = 1;
          }
          else {
            BOOL v83 = v80 == 0;
          }
          if (!v83) {
            *(unsigned char *)(v5 + 96) = 1;
          }
          long long v84 = *(_OWORD *)(a1 + 112);
          long long v85 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(v5 + 128) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v5 + 144) = v85;
          *(_OWORD *)(v5 + 112) = v84;
        }
      }
      int v235 = *(unsigned __int8 *)(a1 + 160);
      if (*(unsigned char *)(v5 + 160)) {
        BOOL v236 = 0;
      }
      else {
        BOOL v236 = v235 == 0;
      }
      if (!v236)
      {
        if (*(unsigned char *)(v5 + 160)) {
          BOOL v237 = v235 == 0;
        }
        else {
          BOOL v237 = 0;
        }
        if (v237)
        {
          *(unsigned char *)(v5 + 160) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 160)) {
            BOOL v238 = 1;
          }
          else {
            BOOL v238 = v235 == 0;
          }
          if (!v238) {
            *(unsigned char *)(v5 + 160) = 1;
          }
          long long v239 = *(_OWORD *)(a1 + 176);
          long long v240 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(v5 + 192) = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(v5 + 208) = v240;
          *(_OWORD *)(v5 + 176) = v239;
        }
      }
      int v255 = *(unsigned __int8 *)(a1 + 224);
      if (*(unsigned char *)(v5 + 224)) {
        BOOL v256 = 0;
      }
      else {
        BOOL v256 = v255 == 0;
      }
      if (!v256)
      {
        if (*(unsigned char *)(v5 + 224)) {
          BOOL v257 = v255 == 0;
        }
        else {
          BOOL v257 = 0;
        }
        if (v257)
        {
          *(unsigned char *)(v5 + 224) = 0;
        }
        else
        {
          if (*(unsigned char *)(v5 + 224)) {
            BOOL v258 = 1;
          }
          else {
            BOOL v258 = v255 == 0;
          }
          if (!v258) {
            *(unsigned char *)(v5 + 224) = 1;
          }
          long long v259 = *(_OWORD *)(a1 + 240);
          long long v260 = *(_OWORD *)(a1 + 272);
          *(_OWORD *)(v5 + 256) = *(_OWORD *)(a1 + 256);
          *(_OWORD *)(v5 + 272) = v260;
          *(_OWORD *)(v5 + 240) = v259;
        }
      }
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(void *)(v5 + 80) = *(void *)(a1 + 80);
      uint64_t v263 = *(void *)(a1 + 288);
      if (v263)
      {
      }
      else
      {
        uint64_t v264 = 0;
      }
      *(void *)(v5 + 288) = v264;
      return v5;
    case 0x12:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 336, 8);
      uint64_t v86 = re::TimelineAssetData::TimelineAssetData(v5, 18);
      *(unsigned char *)(v86 + 72) = 0;
      *(unsigned char *)(v86 + 88) = 0;
      v87 = (unsigned __int8 *)(v86 + 88);
      *(unsigned char *)(v86 + 120) = 0;
      v88 = (unsigned __int8 *)(v86 + 120);
      *(unsigned char *)(v86 + 152) = 0;
      v89 = (unsigned __int8 *)(v86 + 152);
      *(void *)(v86 + 80) = 0x3FF0000000000000;
      *(void *)(v86 + 184) = 0;
      *(void *)uint64_t v86 = &unk_26E6CFE28;
      *(void *)(v86 + 328) = 0;
      *(_OWORD *)(v86 + 248) = 0u;
      *(_OWORD *)(v86 + 264) = 0u;
      *(_DWORD *)(v86 + 280) = 0;
      *(_OWORD *)(v86 + 288) = 0u;
      *(_OWORD *)(v86 + 304) = 0u;
      *(_DWORD *)(v86 + 320) = 0;
      *(_OWORD *)(v86 + 192) = 0u;
      *(_OWORD *)(v86 + 208) = 0u;
      *(_OWORD *)(v86 + 224) = 0u;
      *(_DWORD *)(v86 + 240) = 0;
      *(_DWORD *)(v86 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v86 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v86 + 24), (uint64_t *)(a1 + 24));
      uint64_t v37 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (*(unsigned char *)(a1 + 88))
      {
        uint64_t v90 = *(void *)(*(void *)(a1 + 176) + 192);
        *(void *)&v283[0] = *(void *)(*(void *)(a1 + 176) + 200);
        *((void *)&v283[0] + 1) = v90;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 216), (uint64_t)v283);
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v280, a1 + 112);
        LOBYTE(v283[0]) = 1;
        *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v280;
        uint64_t v91 = *(void *)&v280[16];
        memset(v280, 0, 24);
        *((void *)&v283[1] + 1) = v91;
        re::Optional<re::SkeletalPoseAssetData>::operator=(v87, (uint64_t *)v283);
        if (LOBYTE(v283[0]) && *((void *)&v283[0] + 1))
        {
          if (*(void *)&v283[1])
          {
            (*(void (**)(void))(**((void **)&v283[0] + 1) + 40))();
            v283[1] = 0uLL;
          }
          *((void *)&v283[0] + 1) = 0;
        }
        uint64_t v37 = *(_anonymous_namespace_ **)v280;
        if (*(void *)v280 && *(void *)&v280[8]) {
          uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v280 + 40))();
        }
      }
      if (*(unsigned char *)(a1 + 184))
      {
        uint64_t v92 = *(void *)(*(void *)(a1 + 272) + 192);
        *(void *)&v283[0] = *(void *)(*(void *)(a1 + 272) + 200);
        *((void *)&v283[0] + 1) = v92;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 256), (uint64_t)v283);
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v280, a1 + 208);
        LOBYTE(v283[0]) = 1;
        *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v280;
        uint64_t v93 = *(void *)&v280[16];
        memset(v280, 0, 24);
        *((void *)&v283[1] + 1) = v93;
        re::Optional<re::SkeletalPoseAssetData>::operator=(v88, (uint64_t *)v283);
        if (LOBYTE(v283[0]) && *((void *)&v283[0] + 1))
        {
          if (*(void *)&v283[1])
          {
            (*(void (**)(void))(**((void **)&v283[0] + 1) + 40))();
            v283[1] = 0uLL;
          }
          *((void *)&v283[0] + 1) = 0;
        }
        uint64_t v37 = *(_anonymous_namespace_ **)v280;
        if (*(void *)v280 && *(void *)&v280[8]) {
          uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v280 + 40))();
        }
      }
      if (*(unsigned char *)(a1 + 280))
      {
        uint64_t v94 = *(void *)(*(void *)(a1 + 368) + 192);
        *(void *)&v283[0] = *(void *)(*(void *)(a1 + 368) + 200);
        *((void *)&v283[0] + 1) = v94;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 296), (uint64_t)v283);
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v280, a1 + 304);
        LOBYTE(v283[0]) = 1;
        *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v280;
        uint64_t v95 = *(void *)&v280[16];
        memset(v280, 0, 24);
        *((void *)&v283[1] + 1) = v95;
        re::Optional<re::SkeletalPoseAssetData>::operator=(v89, (uint64_t *)v283);
        if (LOBYTE(v283[0]) && *((void *)&v283[0] + 1))
        {
          if (*(void *)&v283[1])
          {
            (*(void (**)(void))(**((void **)&v283[0] + 1) + 40))();
            v283[1] = 0uLL;
          }
          *((void *)&v283[0] + 1) = 0;
        }
        uint64_t v37 = *(_anonymous_namespace_ **)v280;
        if (*(void *)v280 && *(void *)&v280[8]) {
          uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v280 + 40))();
        }
      }
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(void *)(v5 + 80) = *(void *)(a1 + 80);
      uint64_t v44 = *(void *)(a1 + 376);
      if (!v44) {
        goto LABEL_160;
      }
      goto LABEL_43;
    case 0x13:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v96 = re::TimelineAssetData::TimelineAssetData(v5, 19);
      *(_WORD *)(v96 + 72) = 256;
      *(void *)(v96 + 88) = 0;
      *(void *)(v96 + 96) = 0;
      *(_DWORD *)(v96 + 104) = 0;
      *(void *)(v96 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v96 + 80);
      v98 = (_anonymous_namespace_ *)(v96 + 120);
      *(void *)(v96 + 152) = 0;
      *(_OWORD *)(v96 + 112) = 0u;
      *(_OWORD *)(v96 + 128) = 0u;
      *(_DWORD *)(v96 + 144) = 0;
      *(void *)uint64_t v96 = &unk_26E6D0008;
      *(_DWORD *)(v96 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v96 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v96 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v99 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v99;
      re::DynamicArray<float>::operator=(v98, (uint64_t)v283);
      goto LABEL_169;
    case 0x14:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v100 = re::TimelineAssetData::TimelineAssetData(v5, 20);
      *(_WORD *)(v100 + 72) = 256;
      *(void *)(v100 + 88) = 0;
      *(void *)(v100 + 96) = 0;
      *(_DWORD *)(v100 + 104) = 0;
      *(void *)(v100 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v100 + 80);
      v101 = (_anonymous_namespace_ *)(v100 + 120);
      *(void *)(v100 + 152) = 0;
      *(_OWORD *)(v100 + 112) = 0u;
      *(_OWORD *)(v100 + 128) = 0u;
      *(_DWORD *)(v100 + 144) = 0;
      *(void *)uint64_t v100 = &unk_26E6D0150;
      *(_DWORD *)(v100 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v100 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v100 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v102 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v102;
      re::DynamicArray<double>::operator=(v101, (uint64_t)v283);
      goto LABEL_169;
    case 0x15:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v103 = re::TimelineAssetData::TimelineAssetData(v5, 21);
      *(_WORD *)(v103 + 72) = 256;
      *(void *)(v103 + 88) = 0;
      *(void *)(v103 + 96) = 0;
      *(_DWORD *)(v103 + 104) = 0;
      *(void *)(v103 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v103 + 80);
      v104 = (_anonymous_namespace_ *)(v103 + 120);
      *(void *)(v103 + 152) = 0;
      *(_OWORD *)(v103 + 112) = 0u;
      *(_OWORD *)(v103 + 128) = 0u;
      *(_DWORD *)(v103 + 144) = 0;
      *(void *)uint64_t v103 = &unk_26E6D0200;
      *(_DWORD *)(v103 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v103 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v103 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v105 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v105;
      re::DynamicArray<re::Vector2<float>>::operator=(v104, (uint64_t)v283);
      goto LABEL_169;
    case 0x16:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v106 = re::TimelineAssetData::TimelineAssetData(v5, 22);
      *(_WORD *)(v106 + 72) = 256;
      *(void *)(v106 + 88) = 0;
      *(void *)(v106 + 96) = 0;
      *(_DWORD *)(v106 + 104) = 0;
      *(void *)(v106 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v106 + 80);
      v107 = (_anonymous_namespace_ *)(v106 + 120);
      *(void *)(v106 + 152) = 0;
      *(_OWORD *)(v106 + 112) = 0u;
      *(_OWORD *)(v106 + 128) = 0u;
      *(_DWORD *)(v106 + 144) = 0;
      *(void *)uint64_t v106 = &unk_26E6D02B0;
      *(_DWORD *)(v106 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v106 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v106 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v108 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v108;
      re::DynamicArray<re::Vector3<float>>::operator=(v107, (uint64_t)v283);
      goto LABEL_169;
    case 0x17:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v109 = re::TimelineAssetData::TimelineAssetData(v5, 23);
      *(_WORD *)(v109 + 72) = 256;
      *(void *)(v109 + 88) = 0;
      *(void *)(v109 + 96) = 0;
      *(_DWORD *)(v109 + 104) = 0;
      *(void *)(v109 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v109 + 80);
      v110 = (_anonymous_namespace_ *)(v109 + 120);
      *(void *)(v109 + 152) = 0;
      *(_OWORD *)(v109 + 112) = 0u;
      *(_OWORD *)(v109 + 128) = 0u;
      *(_DWORD *)(v109 + 144) = 0;
      *(void *)uint64_t v109 = &unk_26E6D0360;
      *(_DWORD *)(v109 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v109 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v109 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v111 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v111;
      re::DynamicArray<re::Vector4<float>>::operator=(v110, (uint64_t)v283);
      goto LABEL_169;
    case 0x18:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v112 = re::TimelineAssetData::TimelineAssetData(v5, 24);
      *(_WORD *)(v112 + 72) = 256;
      *(void *)(v112 + 88) = 0;
      *(void *)(v112 + 96) = 0;
      *(_DWORD *)(v112 + 104) = 0;
      *(void *)(v112 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v112 + 80);
      uint64_t v113 = (_anonymous_namespace_ *)(v112 + 120);
      *(void *)(v112 + 152) = 0;
      *(_OWORD *)(v112 + 112) = 0u;
      *(_OWORD *)(v112 + 128) = 0u;
      *(_DWORD *)(v112 + 144) = 0;
      *(void *)uint64_t v112 = &unk_26E6D0410;
      *(_DWORD *)(v112 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v112 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v112 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v114 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v114;
      re::DynamicArray<re::Quaternion<float>>::operator=(v113, (uint64_t)v283);
      goto LABEL_169;
    case 0x19:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 8);
      uint64_t v115 = re::TimelineAssetData::TimelineAssetData(v5, 25);
      *(_WORD *)(v115 + 72) = 256;
      *(void *)(v115 + 88) = 0;
      *(void *)(v115 + 96) = 0;
      *(_DWORD *)(v115 + 104) = 0;
      *(void *)(v115 + 80) = 0;
      v97 = (_anonymous_namespace_ *)(v115 + 80);
      long long v116 = (_anonymous_namespace_ *)(v115 + 120);
      *(void *)(v115 + 152) = 0;
      *(_OWORD *)(v115 + 112) = 0u;
      *(_OWORD *)(v115 + 128) = 0u;
      *(_DWORD *)(v115 + 144) = 0;
      *(void *)uint64_t v115 = &unk_26E6D0558;
      *(_DWORD *)(v115 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v115 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v115 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v117 = *(void *)(a1 + 112);
      *(void *)&v283[0] = *(void *)(a1 + 120);
      *((void *)&v283[0] + 1) = v117;
      re::DynamicArray<re::GenericSRT<float>>::operator=(v116, (uint64_t)v283);
LABEL_169:
      *(_WORD *)(v5 + 72) = *(_WORD *)(a1 + 72);
      uint64_t v118 = *(void *)(a1 + 88);
      *(void *)&v283[0] = *(void *)(a1 + 96);
      *((void *)&v283[0] + 1) = v118;
      re::DynamicArray<float>::operator=(v97, (uint64_t)v283);
      return v5;
    case 0x1A:
      uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 224, 8);
      uint64_t v120 = re::TimelineAssetData::TimelineAssetData(v119, 26);
      *(_WORD *)(v120 + 72) = 256;
      *(void *)(v120 + 80) = 0;
      long long v121 = (_anonymous_namespace_ *)(v120 + 80);
      *(void *)(v120 + 88) = 0;
      *(void *)(v120 + 96) = 0;
      *(_DWORD *)(v120 + 104) = 0;
      *(void *)(v120 + 152) = 0;
      *(_OWORD *)(v120 + 112) = 0u;
      *(_OWORD *)(v120 + 128) = 0u;
      *(_DWORD *)(v120 + 144) = 0;
      *(void *)uint64_t v120 = &unk_26E6D06A0;
      *(void *)(v120 + 216) = 0;
      *(_OWORD *)(v120 + 160) = 0u;
      *(_OWORD *)(v120 + 176) = 0u;
      *(_OWORD *)(v120 + 192) = 0u;
      *(_DWORD *)(v120 + 208) = 0;
      *(_DWORD *)(v120 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v120 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v120 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v119 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(void *)(a1 + 112)) {
        goto LABEL_255;
      }
      uint64_t v122 = *(void *)(*(void *)(*(void *)(a1 + 120) + 80) + 192);
      *(void *)&v283[0] = *(void *)(*(void *)(*(void *)(a1 + 120) + 80) + 200);
      *((void *)&v283[0] + 1) = v122;
      re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v119 + 184), (uint64_t)v283);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)(v119 + 120), *(void *)(a1 + 112));
      if (!*(void *)(a1 + 112)) {
        goto LABEL_255;
      }
      uint64_t v123 = 0;
      unint64_t v124 = 0;
      uint64_t v125 = 16;
      while (1)
      {
        unint64_t v126 = *(void *)(v119 + 136);
        if (v126 <= v124) {
          break;
        }
        re::FixedArray<re::GenericSRT<float>>::operator=((void *)(*(void *)(v119 + 152) + v123), *(void *)(a1 + 120) + v125);
        ++v124;
        v125 += 88;
        v123 += 24;
        if (v124 >= *(void *)(a1 + 112)) {
          goto LABEL_255;
        }
      }
      long long v285 = 0u;
      long long v286 = 0u;
      long long v284 = 0u;
      memset(v283, 0, sizeof(v283));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v280 = 136315906;
      *(void *)&v280[4] = "operator[]";
      *(_WORD *)&v280[12] = 1024;
      *(_DWORD *)&v280[14] = 789;
      *(_WORD *)&v280[18] = 2048;
      *(void *)&v280[20] = v124;
      __int16 v281 = 2048;
      unint64_t v282 = v126;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_490;
    case 0x1B:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v127 = re::TimelineAssetData::TimelineAssetData(v5, 27);
      *(_WORD *)(v127 + 72) = 256;
      *(_DWORD *)(v127 + 76) = 1023969417;
      StringID v128 = (_anonymous_namespace_ *)(v127 + 88);
      *(void *)(v127 + 120) = 0;
      *(_OWORD *)(v127 + 80) = 0u;
      *(_OWORD *)(v127 + 96) = 0u;
      *(_DWORD *)(v127 + 112) = 0;
      *(void *)uint64_t v127 = &unk_26E6D0898;
      *(_DWORD *)(v127 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v127 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v127 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v129 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v129;
      re::DynamicArray<float>::operator=(v128, (uint64_t)v283);
      goto LABEL_220;
    case 0x1C:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v130 = re::TimelineAssetData::TimelineAssetData(v5, 28);
      *(_WORD *)(v130 + 72) = 256;
      *(_DWORD *)(v130 + 76) = 1023969417;
      v131 = (_anonymous_namespace_ *)(v130 + 88);
      *(void *)(v130 + 120) = 0;
      *(_OWORD *)(v130 + 80) = 0u;
      *(_OWORD *)(v130 + 96) = 0u;
      *(_DWORD *)(v130 + 112) = 0;
      *(void *)uint64_t v130 = &unk_26E6D0948;
      *(_DWORD *)(v130 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v130 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v130 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v132 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v132;
      re::DynamicArray<double>::operator=(v131, (uint64_t)v283);
      goto LABEL_220;
    case 0x1D:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v133 = re::TimelineAssetData::TimelineAssetData(v5, 29);
      *(_WORD *)(v133 + 72) = 256;
      *(_DWORD *)(v133 + 76) = 1023969417;
      v134 = (_anonymous_namespace_ *)(v133 + 88);
      *(void *)(v133 + 120) = 0;
      *(_OWORD *)(v133 + 80) = 0u;
      *(_OWORD *)(v133 + 96) = 0u;
      *(_DWORD *)(v133 + 112) = 0;
      *(void *)uint64_t v133 = &unk_26E6D09F8;
      *(_DWORD *)(v133 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v133 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v133 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v135 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v135;
      re::DynamicArray<re::Vector2<float>>::operator=(v134, (uint64_t)v283);
      goto LABEL_220;
    case 0x1E:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v136 = re::TimelineAssetData::TimelineAssetData(v5, 30);
      *(_WORD *)(v136 + 72) = 256;
      *(_DWORD *)(v136 + 76) = 1023969417;
      v137 = (_anonymous_namespace_ *)(v136 + 88);
      *(void *)(v136 + 120) = 0;
      *(_OWORD *)(v136 + 80) = 0u;
      *(_OWORD *)(v136 + 96) = 0u;
      *(_DWORD *)(v136 + 112) = 0;
      *(void *)uint64_t v136 = &unk_26E6D0AA8;
      *(_DWORD *)(v136 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v136 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v136 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v138 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v138;
      re::DynamicArray<re::Vector3<float>>::operator=(v137, (uint64_t)v283);
      goto LABEL_220;
    case 0x1F:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v139 = re::TimelineAssetData::TimelineAssetData(v5, 31);
      *(_WORD *)(v139 + 72) = 256;
      *(_DWORD *)(v139 + 76) = 1023969417;
      v140 = (_anonymous_namespace_ *)(v139 + 88);
      *(void *)(v139 + 120) = 0;
      *(_OWORD *)(v139 + 80) = 0u;
      *(_OWORD *)(v139 + 96) = 0u;
      *(_DWORD *)(v139 + 112) = 0;
      *(void *)uint64_t v139 = &unk_26E6D0B58;
      *(_DWORD *)(v139 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v139 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v139 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v141 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v141;
      re::DynamicArray<re::Vector4<float>>::operator=(v140, (uint64_t)v283);
      goto LABEL_220;
    case 0x20:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v142 = re::TimelineAssetData::TimelineAssetData(v5, 32);
      *(_WORD *)(v142 + 72) = 256;
      *(_DWORD *)(v142 + 76) = 1023969417;
      v143 = (_anonymous_namespace_ *)(v142 + 88);
      *(void *)(v142 + 120) = 0;
      *(_OWORD *)(v142 + 80) = 0u;
      *(_OWORD *)(v142 + 96) = 0u;
      *(_DWORD *)(v142 + 112) = 0;
      *(void *)uint64_t v142 = &unk_26E6D0C08;
      *(_DWORD *)(v142 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v142 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v142 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v144 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v144;
      re::DynamicArray<re::Quaternion<float>>::operator=(v143, (uint64_t)v283);
      goto LABEL_220;
    case 0x21:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 128, 8);
      uint64_t v145 = re::TimelineAssetData::TimelineAssetData(v5, 33);
      *(_WORD *)(v145 + 72) = 256;
      *(_DWORD *)(v145 + 76) = 1023969417;
      v146 = (_anonymous_namespace_ *)(v145 + 88);
      *(void *)(v145 + 120) = 0;
      *(_OWORD *)(v145 + 80) = 0u;
      *(_OWORD *)(v145 + 96) = 0u;
      *(_DWORD *)(v145 + 112) = 0;
      *(void *)uint64_t v145 = &unk_26E6D0CB8;
      *(_DWORD *)(v145 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v145 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v145 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      uint64_t v147 = *(void *)(a1 + 96);
      *(void *)&v283[0] = *(void *)(a1 + 104);
      *((void *)&v283[0] + 1) = v147;
      re::DynamicArray<re::GenericSRT<float>>::operator=(v146, (uint64_t)v283);
      goto LABEL_220;
    case 0x22:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 200, 8);
      uint64_t v148 = re::TimelineAssetData::TimelineAssetData(v5, 34);
      *(_WORD *)(v148 + 72) = 256;
      *(_DWORD *)(v148 + 76) = 1023969417;
      *(void *)(v148 + 120) = 0;
      *(_OWORD *)(v148 + 80) = 0u;
      *(_OWORD *)(v148 + 96) = 0u;
      *(_DWORD *)(v148 + 112) = 0;
      *(void *)uint64_t v148 = &unk_26E6D0D68;
      *(void *)(v148 + 184) = 0;
      *(_OWORD *)(v148 + 128) = 0u;
      *(_OWORD *)(v148 + 144) = 0u;
      *(_OWORD *)(v148 + 160) = 0u;
      *(_DWORD *)(v148 + 176) = 0;
      *(_WORD *)(v148 + 192) = 257;
      *(unsigned char *)(v148 + 194) = 1;
      *(_DWORD *)(v148 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v148 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v148 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(void *)(a1 + 96)) {
        goto LABEL_188;
      }
      uint64_t v149 = *(void *)(*(void *)(*(void *)(a1 + 104) + 80) + 192);
      *(void *)&v283[0] = *(void *)(*(void *)(*(void *)(a1 + 104) + 80) + 200);
      *((void *)&v283[0] + 1) = v149;
      re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 152), (uint64_t)v283);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)(v5 + 88), *(void *)(a1 + 96));
      if (!*(void *)(a1 + 96)) {
        goto LABEL_188;
      }
      unint64_t v126 = 0;
      long long v121 = 0;
      uint64_t v150 = 16;
      do
      {
        unint64_t v124 = *(void *)(v5 + 104);
        if (v124 <= (unint64_t)v121)
        {
LABEL_490:
          long long v285 = 0u;
          long long v286 = 0u;
          long long v284 = 0u;
          memset(v283, 0, sizeof(v283));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(void *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 789;
          *(_WORD *)&v280[18] = 2048;
          *(void *)&v280[20] = v121;
          __int16 v281 = 2048;
          unint64_t v282 = v124;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_491:
          long long v285 = 0u;
          long long v286 = 0u;
          long long v284 = 0u;
          memset(v283, 0, sizeof(v283));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(void *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 789;
          *(_WORD *)&v280[18] = 2048;
          *(void *)&v280[20] = v121;
          __int16 v281 = 2048;
          unint64_t v282 = v124;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_492:
          long long v285 = 0u;
          long long v286 = 0u;
          long long v284 = 0u;
          memset(v283, 0, sizeof(v283));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(void *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 789;
          *(_WORD *)&v280[18] = 2048;
          *(void *)&v280[20] = v124;
          __int16 v281 = 2048;
          unint64_t v282 = v126;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::FixedArray<re::GenericSRT<float>>::operator=((void *)(*(void *)(v5 + 120) + v126), *(void *)(a1 + 104) + v150);
        long long v121 = (_anonymous_namespace_ *)((char *)v121 + 1);
        v150 += 88;
        v126 += 24;
      }
      while ((unint64_t)v121 < *(void *)(a1 + 96));
LABEL_188:
      *(_WORD *)(v5 + 72) = *(_WORD *)(a1 + 72);
      *(void *)(v5 + 76) = *(void *)(a1 + 76);
      *(_DWORD *)(v5 + 84) = *(_DWORD *)(a1 + 84);
      *(unsigned char *)(v5 + 192) = *(unsigned char *)(a1 + 112);
      *(_WORD *)(v5 + 193) = *(_WORD *)(a1 + 113);
      return v5;
    case 0x25:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 160, 16);
      uint64_t v151 = re::TimelineAssetData::TimelineAssetData(v5, 37);
      *(unsigned char *)(v151 + 72) = 0;
      *(void *)uint64_t v151 = &unk_26E6D0EC8;
      *(_DWORD *)(v151 + 76) = 1065353216;
      *(_OWORD *)(v151 + 80) = xmmword_23435FD60;
      *(void *)(v151 + 96) = 0x3F8000003F800000;
      *(void *)(v151 + 104) = 1065353216;
      *(void *)(v151 + 112) = 0;
      *(void *)(v151 + 120) = 0x3F80000000000000;
      *(void *)(v151 + 128) = 0;
      *(void *)(v151 + 136) = 0;
      *(_WORD *)(v151 + 144) = 1;
      *(_DWORD *)(v151 + 148) = 1065353216;
      *(_DWORD *)(v151 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v151 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v151 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(_DWORD *)(v5 + 76) = *(_DWORD *)(a1 + 76);
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 96);
      long long v152 = *(_OWORD *)(a1 + 128);
      long long v153 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(v5 + 112) = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(v5 + 128) = v153;
      *(_OWORD *)(v5 + 96) = v152;
      return v5;
    case 0x26:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 96, 8);
      uint64_t v154 = re::TimelineAssetData::TimelineAssetData(v5, 38);
      *(unsigned char *)(v154 + 72) = 0;
      *(void *)uint64_t v154 = &unk_26E6D0F20;
      *(void *)(v154 + 80) = 0;
      *(void *)(v154 + 88) = 0;
      *(_DWORD *)(v154 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v154 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v154 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 80);
      return v5;
    case 0x27:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v155 = re::TimelineAssetData::TimelineAssetData(v5, 39);
      *(unsigned char *)(v155 + 72) = 0;
      *(void *)(v155 + 88) = 0;
      *(void *)(v155 + 96) = 0;
      *(_DWORD *)(v155 + 104) = 0;
      *(void *)(v155 + 80) = 0;
      uint64_t v156 = v155 + 80;
      uint64_t v157 = v155 + 120;
      *(void *)(v155 + 152) = 0;
      *(_DWORD *)(v155 + 160) = 0;
      *(void *)(v155 + 176) = 0;
      *(void *)(v155 + 184) = 0;
      *(_DWORD *)(v155 + 192) = 0;
      *(void *)(v155 + 168) = 0;
      uint64_t v158 = v155 + 168;
      uint64_t v159 = v155 + 208;
      *(_OWORD *)(v155 + 200) = 0u;
      *(_OWORD *)(v155 + 216) = 0u;
      *(_DWORD *)(v155 + 232) = 0;
      *(_OWORD *)(v155 + 112) = 0u;
      *(_OWORD *)(v155 + 128) = 0u;
      *(_DWORD *)(v155 + 144) = 0;
      *(void *)(v155 + 280) = 0;
      *(_DWORD *)(v155 + 272) = 0;
      *(_OWORD *)(v155 + 240) = 0u;
      *(_OWORD *)(v155 + 256) = 0u;
      *(void *)uint64_t v155 = &unk_26E6D0FD0;
      *(_DWORD *)(v155 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v155 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v155 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v156, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v157, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v158, (uint64_t *)(a1 + 544));
      v160 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v159, (uint64_t *)(a1 + 584));
      unint64_t v161 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v161);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v162 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v162;
        }
        while (v162 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x28:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v163 = re::TimelineAssetData::TimelineAssetData(v5, 40);
      *(unsigned char *)(v163 + 72) = 0;
      *(void *)(v163 + 88) = 0;
      *(void *)(v163 + 96) = 0;
      *(_DWORD *)(v163 + 104) = 0;
      *(void *)(v163 + 80) = 0;
      uint64_t v164 = v163 + 80;
      uint64_t v165 = v163 + 120;
      *(void *)(v163 + 152) = 0;
      *(_DWORD *)(v163 + 160) = 0;
      *(void *)(v163 + 176) = 0;
      *(void *)(v163 + 184) = 0;
      *(_DWORD *)(v163 + 192) = 0;
      *(void *)(v163 + 168) = 0;
      uint64_t v166 = v163 + 168;
      uint64_t v167 = v163 + 208;
      *(_OWORD *)(v163 + 200) = 0u;
      *(_OWORD *)(v163 + 216) = 0u;
      *(_DWORD *)(v163 + 232) = 0;
      *(_OWORD *)(v163 + 112) = 0u;
      *(_OWORD *)(v163 + 128) = 0u;
      *(_DWORD *)(v163 + 144) = 0;
      *(void *)(v163 + 280) = 0;
      *(_DWORD *)(v163 + 272) = 0;
      *(_OWORD *)(v163 + 240) = 0u;
      *(_OWORD *)(v163 + 256) = 0u;
      *(void *)uint64_t v163 = &unk_26E6D1080;
      *(_DWORD *)(v163 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v163 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v163 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v164, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v165, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v166, (uint64_t *)(a1 + 544));
      v168 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v167, (uint64_t *)(a1 + 584));
      unint64_t v169 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v169);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v170 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v170;
        }
        while (v170 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x29:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v8 = re::TimelineAssetData::TimelineAssetData(v5, 41);
      *(unsigned char *)(v8 + 72) = 0;
      *(void *)(v8 + 88) = 0;
      *(void *)(v8 + 96) = 0;
      *(_DWORD *)(v8 + 104) = 0;
      *(void *)(v8 + 80) = 0;
      uint64_t v9 = v8 + 80;
      uint64_t v10 = v8 + 120;
      *(void *)(v8 + 152) = 0;
      *(_DWORD *)(v8 + 160) = 0;
      *(void *)(v8 + 176) = 0;
      *(void *)(v8 + 184) = 0;
      *(_DWORD *)(v8 + 192) = 0;
      *(void *)(v8 + 168) = 0;
      uint64_t v11 = v8 + 168;
      uint64_t v12 = v8 + 208;
      *(_OWORD *)(v8 + 200) = 0u;
      *(_OWORD *)(v8 + 216) = 0u;
      *(_DWORD *)(v8 + 232) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_DWORD *)(v8 + 144) = 0;
      *(void *)(v8 + 280) = 0;
      *(_DWORD *)(v8 + 272) = 0;
      *(_OWORD *)(v8 + 240) = 0u;
      *(_OWORD *)(v8 + 256) = 0u;
      *(void *)uint64_t v8 = &unk_26E6D1130;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v8 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v8 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v9, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v10, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v11, (uint64_t *)(a1 + 544));
      long long v13 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v12, (uint64_t *)(a1 + 584));
      unint64_t v14 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v14);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v15 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v15;
        }
        while (v15 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x2A:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v16 = re::TimelineAssetData::TimelineAssetData(v5, 42);
      *(unsigned char *)(v16 + 72) = 0;
      *(void *)(v16 + 88) = 0;
      *(void *)(v16 + 96) = 0;
      *(_DWORD *)(v16 + 104) = 0;
      *(void *)(v16 + 80) = 0;
      uint64_t v17 = v16 + 80;
      uint64_t v18 = v16 + 120;
      *(void *)(v16 + 152) = 0;
      *(_DWORD *)(v16 + 160) = 0;
      *(void *)(v16 + 176) = 0;
      *(void *)(v16 + 184) = 0;
      *(_DWORD *)(v16 + 192) = 0;
      *(void *)(v16 + 168) = 0;
      uint64_t v19 = v16 + 168;
      uint64_t v20 = v16 + 208;
      *(_OWORD *)(v16 + 200) = 0u;
      *(_OWORD *)(v16 + 216) = 0u;
      *(_DWORD *)(v16 + 232) = 0;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 128) = 0u;
      *(_DWORD *)(v16 + 144) = 0;
      *(void *)(v16 + 280) = 0;
      *(_DWORD *)(v16 + 272) = 0;
      *(_OWORD *)(v16 + 240) = 0u;
      *(_OWORD *)(v16 + 256) = 0u;
      *(void *)uint64_t v16 = &unk_26E6D11E0;
      *(_DWORD *)(v16 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v16 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v16 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v17, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v18, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v19, (uint64_t *)(a1 + 544));
      long long v21 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v20, (uint64_t *)(a1 + 584));
      unint64_t v22 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v22);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v23 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v23;
        }
        while (v23 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x2B:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v171 = re::TimelineAssetData::TimelineAssetData(v5, 43);
      *(unsigned char *)(v171 + 72) = 0;
      *(void *)(v171 + 88) = 0;
      *(void *)(v171 + 96) = 0;
      *(_DWORD *)(v171 + 104) = 0;
      *(void *)(v171 + 80) = 0;
      uint64_t v172 = v171 + 80;
      uint64_t v173 = v171 + 120;
      *(void *)(v171 + 152) = 0;
      *(_DWORD *)(v171 + 160) = 0;
      *(void *)(v171 + 176) = 0;
      *(void *)(v171 + 184) = 0;
      *(_DWORD *)(v171 + 192) = 0;
      *(void *)(v171 + 168) = 0;
      uint64_t v174 = v171 + 168;
      uint64_t v175 = v171 + 208;
      *(_OWORD *)(v171 + 200) = 0u;
      *(_OWORD *)(v171 + 216) = 0u;
      *(_DWORD *)(v171 + 232) = 0;
      *(_OWORD *)(v171 + 112) = 0u;
      *(_OWORD *)(v171 + 128) = 0u;
      *(_DWORD *)(v171 + 144) = 0;
      *(void *)(v171 + 280) = 0;
      *(_DWORD *)(v171 + 272) = 0;
      *(_OWORD *)(v171 + 240) = 0u;
      *(_OWORD *)(v171 + 256) = 0u;
      *(void *)uint64_t v171 = &unk_26E6D1290;
      *(_DWORD *)(v171 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v171 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v171 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v172, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v173, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v174, (uint64_t *)(a1 + 544));
      v176 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v175, (uint64_t *)(a1 + 584));
      unint64_t v177 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v177);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v178 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v178;
        }
        while (v178 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x2C:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v179 = re::TimelineAssetData::TimelineAssetData(v5, 44);
      *(unsigned char *)(v179 + 72) = 0;
      *(void *)(v179 + 88) = 0;
      *(void *)(v179 + 96) = 0;
      *(_DWORD *)(v179 + 104) = 0;
      *(void *)(v179 + 80) = 0;
      uint64_t v180 = v179 + 80;
      uint64_t v181 = v179 + 120;
      *(void *)(v179 + 152) = 0;
      *(_DWORD *)(v179 + 160) = 0;
      *(void *)(v179 + 176) = 0;
      *(void *)(v179 + 184) = 0;
      *(_DWORD *)(v179 + 192) = 0;
      *(void *)(v179 + 168) = 0;
      uint64_t v182 = v179 + 168;
      uint64_t v183 = v179 + 208;
      *(_OWORD *)(v179 + 200) = 0u;
      *(_OWORD *)(v179 + 216) = 0u;
      *(_DWORD *)(v179 + 232) = 0;
      *(_OWORD *)(v179 + 112) = 0u;
      *(_OWORD *)(v179 + 128) = 0u;
      *(_DWORD *)(v179 + 144) = 0;
      *(void *)(v179 + 280) = 0;
      *(_DWORD *)(v179 + 272) = 0;
      *(_OWORD *)(v179 + 240) = 0u;
      *(_OWORD *)(v179 + 256) = 0u;
      *(void *)uint64_t v179 = &unk_26E6D1340;
      *(_DWORD *)(v179 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v179 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v179 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v180, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v181, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v182, (uint64_t *)(a1 + 544));
      v184 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v183, (uint64_t *)(a1 + 584));
      unint64_t v185 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v185);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v186 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v186;
        }
        while (v186 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x2D:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v24 = re::TimelineAssetData::TimelineAssetData(v5, 45);
      *(unsigned char *)(v24 + 72) = 0;
      *(void *)(v24 + 88) = 0;
      *(void *)(v24 + 96) = 0;
      *(_DWORD *)(v24 + 104) = 0;
      *(void *)(v24 + 80) = 0;
      uint64_t v25 = v24 + 80;
      uint64_t v26 = v24 + 120;
      *(void *)(v24 + 152) = 0;
      *(_DWORD *)(v24 + 160) = 0;
      *(void *)(v24 + 176) = 0;
      *(void *)(v24 + 184) = 0;
      *(_DWORD *)(v24 + 192) = 0;
      *(void *)(v24 + 168) = 0;
      uint64_t v27 = v24 + 168;
      uint64_t v28 = v24 + 208;
      *(_OWORD *)(v24 + 200) = 0u;
      *(_OWORD *)(v24 + 216) = 0u;
      *(_DWORD *)(v24 + 232) = 0;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_OWORD *)(v24 + 128) = 0u;
      *(_DWORD *)(v24 + 144) = 0;
      *(void *)(v24 + 280) = 0;
      *(_DWORD *)(v24 + 272) = 0;
      *(_OWORD *)(v24 + 240) = 0u;
      *(_OWORD *)(v24 + 256) = 0u;
      *(void *)uint64_t v24 = &unk_26E6D13F0;
      *(_DWORD *)(v24 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v24 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v24 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v25, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v26, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v27, (uint64_t *)(a1 + 544));
      uint64_t v29 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v28, (uint64_t *)(a1 + 584));
      unint64_t v30 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v30);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v31 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v31;
        }
        while (v31 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x2E:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 288, 8);
      uint64_t v187 = re::TimelineAssetData::TimelineAssetData(v5, 46);
      *(unsigned char *)(v187 + 72) = 0;
      *(void *)(v187 + 88) = 0;
      *(void *)(v187 + 96) = 0;
      *(_DWORD *)(v187 + 104) = 0;
      *(void *)(v187 + 80) = 0;
      uint64_t v188 = v187 + 80;
      uint64_t v189 = v187 + 120;
      *(void *)(v187 + 152) = 0;
      *(_DWORD *)(v187 + 160) = 0;
      *(void *)(v187 + 176) = 0;
      *(void *)(v187 + 184) = 0;
      *(_DWORD *)(v187 + 192) = 0;
      *(void *)(v187 + 168) = 0;
      uint64_t v190 = v187 + 168;
      uint64_t v191 = v187 + 208;
      *(_OWORD *)(v187 + 200) = 0u;
      *(_OWORD *)(v187 + 216) = 0u;
      *(_DWORD *)(v187 + 232) = 0;
      *(_OWORD *)(v187 + 112) = 0u;
      *(_OWORD *)(v187 + 128) = 0u;
      *(_DWORD *)(v187 + 144) = 0;
      *(void *)(v187 + 280) = 0;
      *(_DWORD *)(v187 + 272) = 0;
      *(_OWORD *)(v187 + 240) = 0u;
      *(_OWORD *)(v187 + 256) = 0u;
      *(void *)uint64_t v187 = &unk_26E6D14A0;
      *(_DWORD *)(v187 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v187 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v187 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v188, (uint64_t *)(a1 + 456));
      re::DynamicArray<re::RigGraphConnection>::operator=(v189, (uint64_t *)(a1 + 496));
      *(_DWORD *)(v5 + 160) = *(_DWORD *)(a1 + 536);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v190, (uint64_t *)(a1 + 544));
      v192 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v191, (uint64_t *)(a1 + 584));
      unint64_t v193 = *(void *)(a1 + 312);
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v5 + 248), v193);
      ++*(_DWORD *)(v5 + 272);
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      if (*(void *)(a1 + 312))
      {
        unint64_t v194 = 0;
        do
        {
          re::DynamicArray<re::AssetHandle>::add((void *)(v5 + 248), (uint64_t *)v283);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
          ++v194;
        }
        while (v194 < *(void *)(a1 + 312));
      }
      return v5;
    case 0x30:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 640, 8);
      re::EventTimelineAssetData::EventTimelineAssetData((re::EventTimelineAssetData *)v5);
      uint64_t v195 = *(void *)(a1 + 80);
      uint64_t v196 = v195 + 24;
      uint64_t v198 = v197 + 80;
      re::StringID::operator=((unint64_t *)(v197 + 80), (uint64_t *)(v195 + 24));
      re::DynamicArray<float>::operator=(v5 + 96, (uint64_t *)(v195 + 40));
      re::DynamicArray<float>::operator=(v5 + 136, (uint64_t *)(v195 + 80));
      re::DynamicArray<float>::operator=(v5 + 176, (uint64_t *)(v195 + 120));
      if (v198 != v195 + 24)
      {
        uint64_t v199 = *(void *)(v195 + 160);
        if (*(void *)(v5 + 216))
        {
          uint64_t v200 = v5 + 216;
          if (v199)
          {
            re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(v200, v195 + 160);
            ++*(_DWORD *)(v5 + 256);
          }
          else
          {
            re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(v200);
          }
        }
        else if (v199)
        {
          if (*(_DWORD *)(v195 + 188) <= 3u) {
            signed int v265 = 3;
          }
          else {
            signed int v265 = *(_DWORD *)(v195 + 188);
          }
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v5 + 216, v199, v265);
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(v5 + 216, v195 + 160);
        }
      }
      *(void *)(v5 + 264) = *(void *)(v195 + 208);
      re::DynamicArray<float>::operator=(v5 + 272, (uint64_t *)(v195 + 216));
      *(void *)(v5 + 312) = *(void *)(v195 + 256);
      re::DynamicArray<float>::operator=(v5 + 320, (uint64_t *)(v195 + 264));
      *(void *)(v5 + 360) = *(void *)(v195 + 304);
      re::DynamicArray<re::StringID>::operator=(v5 + 368, (uint64_t *)(v195 + 312));
      *(void *)(v5 + 408) = *(void *)(v195 + 352);
      if (v198 == v196)
      {
        *(void *)(v5 + 456) = *(void *)(v195 + 400);
        *(void *)(v5 + 504) = *(void *)(v195 + 448);
      }
      else
      {
        uint64_t v266 = *(void *)(v195 + 360);
        if (*(void *)(v5 + 416))
        {
          if (v266) {
            re::DynamicArray<re::Vector4<float>>::copy((void **)(v5 + 416), v195 + 360);
          }
          else {
            *(void *)(v5 + 432) = 0;
          }
          ++*(_DWORD *)(v5 + 440);
        }
        else if (v266)
        {
          unint64_t v267 = *(void *)(v195 + 376);
          *(void *)(v5 + 416) = v266;
          re::DynamicArray<re::Vector4<float>>::setCapacity((void *)(v5 + 416), v267);
          ++*(_DWORD *)(v5 + 440);
          re::DynamicArray<re::Vector4<float>>::copy((void **)(v5 + 416), v195 + 360);
        }
        *(void *)(v5 + 456) = *(void *)(v195 + 400);
        uint64_t v268 = *(void *)(v195 + 408);
        if (*(void *)(v5 + 464))
        {
          uint64_t v269 = v5 + 464;
          if (v268)
          {
            re::DynamicArray<re::FixedArray<unsigned char>>::copy(v269, v195 + 408);
            ++*(_DWORD *)(v5 + 488);
          }
          else
          {
            re::DynamicArray<re::FixedArray<unsigned char>>::clear(v269);
          }
        }
        else if (v268)
        {
          unint64_t v270 = *(void *)(v195 + 424);
          *(void *)(v5 + 464) = v268;
          re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)(v5 + 464), v270);
          ++*(_DWORD *)(v5 + 488);
          re::DynamicArray<re::FixedArray<unsigned char>>::copy(v5 + 464, v195 + 408);
        }
        *(void *)(v5 + 504) = *(void *)(v195 + 448);
        uint64_t v271 = *(void *)(v195 + 456);
        if (*(void *)(v5 + 512))
        {
          if (v271)
          {
            re::DynamicArray<re::ObjCObject>::copy((void *)(v5 + 512), v195 + 456);
          }
          else
          {
            uint64_t v273 = *(void *)(v5 + 528);
            *(void *)(v5 + 528) = 0;
            if (v273)
            {
              v274 = *(void ***)(v5 + 544);
              uint64_t v275 = 8 * v273;
              do
              {
                v276 = *v274++;

                v275 -= 8;
              }
              while (v275);
            }
          }
          ++*(_DWORD *)(v5 + 536);
        }
        else if (v271)
        {
          unint64_t v272 = *(void *)(v195 + 472);
          *(void *)(v5 + 512) = v271;
          re::DynamicArray<re::ObjCObject>::setCapacity((void *)(v5 + 512), v272);
          ++*(_DWORD *)(v5 + 536);
          re::DynamicArray<re::ObjCObject>::copy((void *)(v5 + 512), v195 + 456);
        }
      }
      *(unsigned char *)(v5 + 552) = *(unsigned char *)(v195 + 496);
      re::FixedArray<unsigned char>::operator=((uint64_t *)(v5 + 560), (uint64_t *)(v195 + 504));
      re::ObjCObject::operator=((id *)(v5 + 584), (id *)(v195 + 528));
      *(unsigned char *)(v5 + 592) = *(unsigned char *)(v195 + 536);
      if (v198 != v196)
      {
        uint64_t v277 = *(void *)(v195 + 544);
        if (*(void *)(v5 + 600))
        {
          if (v277) {
            re::DynamicArray<char const*>::copy((void **)(v5 + 600), v195 + 544);
          }
          else {
            *(void *)(v5 + 616) = 0;
          }
          ++*(_DWORD *)(v5 + 624);
        }
        else if (v277)
        {
          unint64_t v278 = *(void *)(v195 + 560);
          *(void *)(v5 + 600) = v277;
          re::DynamicArray<float *>::setCapacity((void *)(v5 + 600), v278);
          ++*(_DWORD *)(v5 + 624);
          re::DynamicArray<char const*>::copy((void **)(v5 + 600), v195 + 544);
        }
      }
      *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v5 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v5 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      return v5;
    case 0x32:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 312, 8);
      uint64_t v32 = re::TimelineAssetData::TimelineAssetData(v5, 50);
      *(unsigned char *)(v32 + 72) = 0;
      *(void *)(v32 + 80) = 0x3FF0000000000000;
      *(unsigned char *)(v32 + 88) = 0;
      long long v33 = (unsigned __int8 *)(v32 + 88);
      *(unsigned char *)(v32 + 120) = 0;
      long long v34 = (unsigned __int8 *)(v32 + 120);
      *(unsigned char *)(v32 + 152) = 0;
      uint64_t v35 = (unsigned __int8 *)(v32 + 152);
      *(void *)(v32 + 184) = 0;
      *(void *)(v32 + 192) = 0;
      uint64_t v36 = (_anonymous_namespace_ *)(v32 + 192);
      *(void *)uint64_t v32 = &unk_26E6CFF58;
      *(void *)(v32 + 200) = 0;
      *(void *)(v32 + 208) = 0;
      *(_DWORD *)(v32 + 216) = 0;
      *(void *)(v32 + 304) = 0;
      *(_OWORD *)(v32 + 224) = 0u;
      *(_OWORD *)(v32 + 240) = 0u;
      *(_DWORD *)(v32 + 256) = 0;
      *(_OWORD *)(v32 + 264) = 0u;
      *(_OWORD *)(v32 + 280) = 0u;
      *(_DWORD *)(v32 + 296) = 0;
      *(_DWORD *)(v32 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v32 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(a1 + 24));
      uint64_t v37 = re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (*(unsigned char *)(a1 + 88))
      {
        uint64_t v38 = *(void *)(*(void *)(a1 + 120) + 32);
        *(void *)&v283[0] = *(void *)(*(void *)(a1 + 120) + 40);
        *((void *)&v283[0] + 1) = v38;
        re::DynamicArray<re::StringID>::operator=(v36, (uint64_t)v283);
        re::FixedArray<float>::FixedArray((uint64_t *)v280, a1 + 96);
        LOBYTE(v283[0]) = 1;
        *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v280;
        uint64_t v39 = *(void *)&v280[16];
        memset(v280, 0, 24);
        *((void *)&v283[1] + 1) = v39;
        re::Optional<re::SkeletalPoseAssetData>::operator=(v33, (uint64_t *)v283);
        if (LOBYTE(v283[0]) && *((void *)&v283[0] + 1))
        {
          if (*(void *)&v283[1])
          {
            (*(void (**)(void))(**((void **)&v283[0] + 1) + 40))();
            v283[1] = 0uLL;
          }
          *((void *)&v283[0] + 1) = 0;
        }
        uint64_t v37 = *(_anonymous_namespace_ **)v280;
        if (*(void *)v280 && *(void *)&v280[8]) {
          uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v280 + 40))();
        }
      }
      if (*(unsigned char *)(a1 + 128))
      {
        uint64_t v40 = *(void *)(*(void *)(a1 + 160) + 32);
        *(void *)&v283[0] = *(void *)(*(void *)(a1 + 160) + 40);
        *((void *)&v283[0] + 1) = v40;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 232), (uint64_t)v283);
        re::FixedArray<float>::FixedArray((uint64_t *)v280, a1 + 136);
        LOBYTE(v283[0]) = 1;
        *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v280;
        uint64_t v41 = *(void *)&v280[16];
        memset(v280, 0, 24);
        *((void *)&v283[1] + 1) = v41;
        re::Optional<re::SkeletalPoseAssetData>::operator=(v34, (uint64_t *)v283);
        if (LOBYTE(v283[0]) && *((void *)&v283[0] + 1))
        {
          if (*(void *)&v283[1])
          {
            (*(void (**)(void))(**((void **)&v283[0] + 1) + 40))();
            v283[1] = 0uLL;
          }
          *((void *)&v283[0] + 1) = 0;
        }
        uint64_t v37 = *(_anonymous_namespace_ **)v280;
        if (*(void *)v280 && *(void *)&v280[8]) {
          uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v280 + 40))();
        }
      }
      if (*(unsigned char *)(a1 + 168))
      {
        uint64_t v42 = *(void *)(*(void *)(a1 + 200) + 32);
        *(void *)&v283[0] = *(void *)(*(void *)(a1 + 200) + 40);
        *((void *)&v283[0] + 1) = v42;
        re::DynamicArray<re::StringID>::operator=((_anonymous_namespace_ *)(v5 + 272), (uint64_t)v283);
        re::FixedArray<float>::FixedArray((uint64_t *)v280, a1 + 176);
        LOBYTE(v283[0]) = 1;
        *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)v280;
        uint64_t v43 = *(void *)&v280[16];
        memset(v280, 0, 24);
        *((void *)&v283[1] + 1) = v43;
        re::Optional<re::SkeletalPoseAssetData>::operator=(v35, (uint64_t *)v283);
        if (LOBYTE(v283[0]) && *((void *)&v283[0] + 1))
        {
          if (*(void *)&v283[1])
          {
            (*(void (**)(void))(**((void **)&v283[0] + 1) + 40))();
            v283[1] = 0uLL;
          }
          *((void *)&v283[0] + 1) = 0;
        }
        uint64_t v37 = *(_anonymous_namespace_ **)v280;
        if (*(void *)v280 && *(void *)&v280[8]) {
          uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v280 + 40))();
        }
      }
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      *(void *)(v5 + 80) = *(void *)(a1 + 80);
      uint64_t v44 = *(void *)(a1 + 208);
      if (v44)
      {
LABEL_43:
      }
      else
      {
LABEL_160:
        uint64_t v45 = 0;
      }
      *(void *)(v5 + 184) = v45;
      return v5;
    case 0x3B:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 168, 8);
      uint64_t v201 = re::TimelineAssetData::TimelineAssetData(v5, 59);
      *(_WORD *)(v201 + 72) = 256;
      *(_DWORD *)(v201 + 76) = 1023969417;
      *(void *)(v201 + 128) = 0;
      v202 = (_anonymous_namespace_ *)(v201 + 128);
      *(void *)(v201 + 120) = 0;
      *(_OWORD *)(v201 + 80) = 0u;
      *(_OWORD *)(v201 + 96) = 0u;
      *(_DWORD *)(v201 + 112) = 0;
      *(void *)uint64_t v201 = &unk_26E6D0E18;
      *(void *)(v201 + 160) = 0;
      *(void *)(v201 + 136) = 0;
      *(void *)(v201 + 144) = 0;
      *(_DWORD *)(v201 + 152) = 0;
      *(_DWORD *)(v201 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v201 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v201 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(void *)(a1 + 96)) {
        goto LABEL_220;
      }
      uint64_t v203 = *(void *)(*(void *)(*(void *)(a1 + 104) + 24) + 32);
      *(void *)&v283[0] = *(void *)(*(void *)(*(void *)(a1 + 104) + 24) + 40);
      *((void *)&v283[0] + 1) = v203;
      re::DynamicArray<re::StringID>::operator=(v202, (uint64_t)v283);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)(v5 + 88), *(void *)(a1 + 96));
      if (!*(void *)(a1 + 96)) {
        goto LABEL_220;
      }
      unint64_t v126 = 0;
      uint64_t v204 = 0;
      long long v121 = 0;
      while (1)
      {
        unint64_t v124 = *(void *)(v5 + 104);
        if (v124 <= (unint64_t)v121) {
          break;
        }
        re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v5 + 120) + v126), *(void *)(a1 + 104) + v204);
        long long v121 = (_anonymous_namespace_ *)((char *)v121 + 1);
        v204 += 32;
        v126 += 24;
        if ((unint64_t)v121 >= *(void *)(a1 + 96))
        {
LABEL_220:
          *(_WORD *)(v5 + 72) = *(_WORD *)(a1 + 72);
          *(void *)(v5 + 76) = *(void *)(a1 + 76);
          *(_DWORD *)(v5 + 84) = *(_DWORD *)(a1 + 84);
          return v5;
        }
      }
      goto LABEL_491;
    case 0x3C:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 184, 8);
      uint64_t v6 = re::TimelineAssetData::TimelineAssetData(v5, 60);
      *(unsigned char *)(v6 + 72) = 0;
      *(unsigned char *)(v6 + 120) = 0;
      *(void *)(v6 + 136) = 0;
      *(unsigned char *)(v6 + 144) = 0;
      *(void *)(v6 + 152) = 0;
      *(unsigned char *)(v6 + 160) = 0;
      *(void *)(v6 + 88) = 0;
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 176) = 1065353216;
      *(unsigned char *)(v6 + 180) = 0;
      uint64_t v7 = &unk_26E6CF4E8;
LABEL_222:
      *(void *)uint64_t v6 = v7;
      *(_DWORD *)(v6 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v6 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v6 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v5 + 40), (re::DynamicString *)(a1 + 40));
      *(unsigned char *)(v5 + 72) = *(unsigned char *)(a1 + 72);
      long long v205 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v5 + 80) = v283[0];
      v283[0] = v205;
      uint64_t v206 = *(void *)(v5 + 96);
      *(void *)(v5 + 96) = *(void *)&v283[1];
      *(void *)&v283[1] = v206;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v283);
      if (*(unsigned char *)(v5 + 104) || *(unsigned char *)(a1 + 88))
      {
        if (!*(unsigned char *)(v5 + 104) || *(unsigned char *)(a1 + 88))
        {
          if (!*(unsigned char *)(v5 + 104) && *(unsigned char *)(a1 + 88)) {
            *(unsigned char *)(v5 + 104) = 1;
          }
          *(void *)(v5 + 112) = *(void *)(a1 + 96);
        }
        else
        {
          *(unsigned char *)(v5 + 104) = 0;
        }
      }
      if (*(unsigned char *)(v5 + 120) || *(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(v5 + 120) || *(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(v5 + 120) && *(unsigned char *)(a1 + 104)) {
            *(unsigned char *)(v5 + 120) = 1;
          }
          *(void *)(v5 + 128) = *(void *)(a1 + 112);
        }
        else
        {
          *(unsigned char *)(v5 + 120) = 0;
        }
      }
      *(void *)(v5 + 136) = *(void *)(a1 + 120);
      *(unsigned char *)(v5 + 144) = *(unsigned char *)(a1 + 128);
      *(void *)(v5 + 152) = *(void *)(a1 + 136);
      if (*(unsigned char *)(v5 + 160) || *(unsigned char *)(a1 + 144))
      {
        if (!*(unsigned char *)(v5 + 160) || *(unsigned char *)(a1 + 144))
        {
          if (!*(unsigned char *)(v5 + 160) && *(unsigned char *)(a1 + 144)) {
            *(unsigned char *)(v5 + 160) = 1;
          }
          *(void *)(v5 + 168) = *(void *)(a1 + 152);
        }
        else
        {
          *(unsigned char *)(v5 + 160) = 0;
        }
      }
      *(_DWORD *)(v5 + 176) = *(_DWORD *)(a1 + 160);
      *(unsigned char *)(v5 + 180) = *(unsigned char *)(a1 + 164);
      return v5;
    case 0x3D:
      uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 200, 8);
      uint64_t v207 = re::TimelineAssetData::TimelineAssetData(v119, 61);
      *(_WORD *)(v207 + 72) = 256;
      *(void *)(v207 + 80) = 0;
      long long v121 = (_anonymous_namespace_ *)(v207 + 80);
      *(_DWORD *)(v207 + 104) = 0;
      *(void *)(v207 + 88) = 0;
      *(void *)(v207 + 96) = 0;
      *(void *)(v207 + 160) = 0;
      v208 = (_anonymous_namespace_ *)(v207 + 160);
      *(void *)(v207 + 152) = 0;
      *(_OWORD *)(v207 + 112) = 0u;
      *(_OWORD *)(v207 + 128) = 0u;
      *(_DWORD *)(v207 + 144) = 0;
      *(void *)uint64_t v207 = &unk_26E6D07E8;
      *(void *)(v207 + 192) = 0;
      *(void *)(v207 + 168) = 0;
      *(void *)(v207 + 176) = 0;
      *(_DWORD *)(v207 + 184) = 0;
      *(_DWORD *)(v207 + 12) = *(_DWORD *)(a1 + 12);
      *(unsigned char *)(v207 + 16) = *(unsigned char *)(a1 + 16);
      re::StringID::operator=((unint64_t *)(v207 + 24), (uint64_t *)(a1 + 24));
      re::DynamicString::operator=((re::DynamicString *)(v119 + 40), (re::DynamicString *)(a1 + 40));
      if (!*(void *)(a1 + 112)) {
        goto LABEL_255;
      }
      uint64_t v209 = *(void *)(*(void *)(*(void *)(a1 + 120) + 24) + 32);
      *(void *)&v283[0] = *(void *)(*(void *)(*(void *)(a1 + 120) + 24) + 40);
      *((void *)&v283[0] + 1) = v209;
      re::DynamicArray<re::StringID>::operator=(v208, (uint64_t)v283);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)(v119 + 120), *(void *)(a1 + 112));
      if (!*(void *)(a1 + 112)) {
        goto LABEL_255;
      }
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      unint64_t v124 = 0;
      while (1)
      {
        unint64_t v126 = *(void *)(v119 + 136);
        if (v126 <= v124) {
          break;
        }
        re::FixedArray<float>::operator=((uint64_t *)(*(void *)(v119 + 152) + v210), *(void *)(a1 + 120) + v211);
        ++v124;
        v211 += 32;
        v210 += 24;
        if (v124 >= *(void *)(a1 + 112))
        {
LABEL_255:
          *(_WORD *)(v119 + 72) = *(_WORD *)(a1 + 72);
          uint64_t v212 = *(void *)(a1 + 88);
          *(void *)&v283[0] = *(void *)(a1 + 96);
          *((void *)&v283[0] + 1) = v212;
          re::DynamicArray<float>::operator=(v121, (uint64_t)v283);
          return 0;
        }
      }
      goto LABEL_492;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected timeline type.", "!\"Unreachable code\"", "convertToAssetData", 1704);
      _os_crash();
      __break(1u);
      JUMPOUT(0x23342E400);
  }
}

uint64_t re::internal::convertToTimeline(re::internal *this, const re::TimelineAssetData *a2, re::Allocator *a3)
{
  if (this)
  {
    switch(*((_DWORD *)this + 2))
    {
      case 1:
        uint64_t v4 = re::Allocator::create<re::TimelineClip>((uint64_t)a2);
        return v4;
      case 2:
        uint64_t v4 = (uint64_t)re::Allocator::create<re::TimelineGroup>((uint64_t)a2);
        return v4;
      case 3:
        uint64_t v4 = re::Allocator::create<re::FloatAnimationClip>((uint64_t)a2);
        return v4;
      case 4:
        uint64_t v4 = re::Allocator::create<re::DoubleAnimationClip>((uint64_t)a2);
        return v4;
      case 5:
        uint64_t v4 = re::Allocator::create<re::Vector2FAnimationClip>((uint64_t)a2);
        return v4;
      case 6:
        uint64_t v4 = re::Allocator::create<re::Vector3FAnimationClip>((uint64_t)a2);
        return v4;
      case 7:
        uint64_t v4 = re::Allocator::create<re::Vector4FAnimationClip>((uint64_t)a2);
        return v4;
      case 8:
        uint64_t v4 = re::Allocator::create<re::QuaternionFAnimationClip>((uint64_t)a2);
        return v4;
      case 9:
        uint64_t v4 = re::Allocator::create<re::SRTAnimationClip>((uint64_t)a2);
        return v4;
      case 0xA:
        uint64_t v4 = re::Allocator::create<re::SkeletalPoseAnimationClip>((uint64_t)a2);
        return v4;
      case 0xB:
        uint64_t v4 = re::Allocator::create<re::FloatAnimation>((uint64_t)a2);
        return v4;
      case 0xC:
        uint64_t v4 = re::Allocator::create<re::DoubleAnimation>((uint64_t)a2);
        return v4;
      case 0xD:
        uint64_t v4 = re::Allocator::create<re::Vector2FAnimation>((uint64_t)a2);
        return v4;
      case 0xE:
        uint64_t v4 = re::Allocator::create<re::Vector3FAnimation>((uint64_t)a2);
        return v4;
      case 0xF:
        uint64_t v4 = re::Allocator::create<re::Vector4FAnimation>((uint64_t)a2);
        return v4;
      case 0x10:
        uint64_t v4 = re::Allocator::create<re::QuaternionFAnimation>((uint64_t)a2);
        return v4;
      case 0x11:
        uint64_t v4 = re::Allocator::create<re::SRTAnimation>((uint64_t)a2);
        return v4;
      case 0x12:
        uint64_t v4 = re::Allocator::create<re::SkeletalPoseAnimation>((uint64_t)a2);
        return v4;
      case 0x13:
        re::Allocator::create<re::FloatKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v8;
        return v4;
      case 0x14:
        re::Allocator::create<re::DoubleKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v9;
        return v4;
      case 0x15:
        re::Allocator::create<re::Vector2FKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v10;
        return v4;
      case 0x16:
        re::Allocator::create<re::Vector3FKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v11;
        return v4;
      case 0x17:
        re::Allocator::create<re::Vector4FKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v12;
        return v4;
      case 0x18:
        re::Allocator::create<re::QuaternionFKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v13;
        return v4;
      case 0x19:
        re::Allocator::create<re::SRTKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v14;
        return v4;
      case 0x1A:
        re::Allocator::create<re::SkeletalPoseKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v15;
        return v4;
      case 0x1B:
        re::Allocator::create<re::FloatSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v16;
        return v4;
      case 0x1C:
        re::Allocator::create<re::DoubleSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v17;
        return v4;
      case 0x1D:
        re::Allocator::create<re::Vector2FSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v18;
        return v4;
      case 0x1E:
        re::Allocator::create<re::Vector3FSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v19;
        return v4;
      case 0x1F:
        re::Allocator::create<re::Vector4FSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v20;
        return v4;
      case 0x20:
        re::Allocator::create<re::QuaternionFSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v21;
        return v4;
      case 0x21:
        re::Allocator::create<re::SRTSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v22;
        return v4;
      case 0x22:
        re::Allocator::create<re::SkeletalPoseSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v23;
        *(unsigned char *)(v4 + 112) = *((unsigned char *)this + 192);
        *(_WORD *)(v4 + 113) = *(_WORD *)((char *)this + 193);
        return v4;
      case 0x25:
        re::Allocator::create<re::OrbitAnimation>((uint64_t)a2);
        uint64_t v4 = v24;
        *(unsigned char *)(v4 + 72) = *((unsigned char *)this + 72);
        *(_DWORD *)(v4 + 76) = *((_DWORD *)this + 19);
        *(_OWORD *)(v4 + 96) = *((_OWORD *)this + 5);
        long long v25 = *((_OWORD *)this + 6);
        long long v26 = *((_OWORD *)this + 8);
        *(_OWORD *)(v4 + 144) = *((_OWORD *)this + 7);
        *(_OWORD *)(v4 + 160) = v26;
        *(_OWORD *)(v4 + 128) = v25;
        *(_WORD *)(v4 + 84) = *((_WORD *)this + 72);
        *(_DWORD *)(v4 + 80) = *((_DWORD *)this + 37);
        return v4;
      case 0x26:
        uint64_t v4 = re::Allocator::create<re::AudioAnimationTimeline>((uint64_t)a2);
        return v4;
      case 0x27:
        return createAnimationBlendTreeFromAssetData<float>((unint64_t)this, a2);
      case 0x28:
        return createAnimationBlendTreeFromAssetData<double>((unint64_t)this, a2);
      case 0x29:
        return createAnimationBlendTreeFromAssetData<re::Vector2<float>>((unint64_t)this, a2);
      case 0x2A:
        return createAnimationBlendTreeFromAssetData<re::Vector3<float>>((unint64_t)this, a2);
      case 0x2B:
        return createAnimationBlendTreeFromAssetData<re::Vector4<float>>((unint64_t)this, a2);
      case 0x2C:
        return createAnimationBlendTreeFromAssetData<re::Quaternion<float>>((unint64_t)this, a2);
      case 0x2D:
        return createAnimationBlendTreeFromAssetData<re::GenericSRT<float>>((unint64_t)this, a2);
      case 0x2E:
        return createAnimationBlendTreeFromAssetData<re::SkeletalPose>((unint64_t)this, a2);
      case 0x30:
        uint64_t v4 = re::Allocator::create<re::EventTimeline>((uint64_t)a2);
        *(unsigned char *)(v4 + 72) = *((unsigned char *)this + 72);
        return v4;
      case 0x32:
        uint64_t v4 = re::Allocator::create<re::BlendShapeWeightsAnimation>((uint64_t)a2);
        return v4;
      case 0x3B:
        re::Allocator::create<re::BlendShapeWeightsSampledAnimation>((uint64_t)a2);
        uint64_t v4 = v27;
        return v4;
      case 0x3C:
        uint64_t v4 = re::Allocator::create<re::BlendShapeWeightsAnimationClip>((uint64_t)a2);
        return v4;
      case 0x3D:
        re::Allocator::create<re::BlendShapeWeightsKeyframeAnimation>((uint64_t)a2);
        uint64_t v4 = v28;
        return v4;
      default:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) Unexpected timeline type.", "!\"Unreachable code\"", "convertToTimeline", 2074);
        _os_crash();
        __break(1u);
        JUMPOUT(0x23342EBC4);
    }
  }
  return 0;
}

uint64_t re::Allocator::create<re::TimelineClip>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 160, 8);
  uint64_t result = re::Timeline::Timeline(v1, 1);
  *(void *)uint64_t result = &unk_26E6C2678;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(void *)(result + 112) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  *(_DWORD *)(result + 152) = 1065353216;
  *(unsigned char *)(result + 156) = 0;
  return result;
}

float anonymous namespace'::convertTimelineClip(_anonymous_namespace_ *this, const re::TimelineAssetData *a2, re::Timeline *a3)
{
  *((_DWORD *)a2 + 3) = *((_DWORD *)this + 3);
  *((unsigned char *)a2 + 16) = *((unsigned char *)this + 16);
  re::StringID::operator=((unint64_t *)a2 + 3, (uint64_t *)this + 3);
  re::DynamicString::operator=((const re::TimelineAssetData *)((char *)a2 + 40), (_anonymous_namespace_ *)((char *)this + 40));
  *((void *)a2 + 9) = 0;
  int v5 = *((unsigned __int8 *)this + 96);
  if (*((unsigned char *)a2 + 80)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*((unsigned char *)a2 + 80)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *((unsigned char *)a2 + 80) = 0;
    }
    else
    {
      if (!*((unsigned char *)a2 + 80) && *((unsigned char *)this + 96)) {
        *((unsigned char *)a2 + 80) = 1;
      }
      *((void *)a2 + 11) = *((void *)this + 13);
    }
  }
  if (*((unsigned char *)a2 + 96) || *((unsigned char *)this + 112))
  {
    if (!*((unsigned char *)a2 + 96) || *((unsigned char *)this + 112))
    {
      if (!*((unsigned char *)a2 + 96) && *((unsigned char *)this + 112)) {
        *((unsigned char *)a2 + 96) = 1;
      }
      *((void *)a2 + 13) = *((void *)this + 15);
    }
    else
    {
      *((unsigned char *)a2 + 96) = 0;
    }
  }
  *((void *)a2 + 14) = *((void *)this + 16);
  *((unsigned char *)a2 + 120) = *((unsigned char *)this + 136);
  *((void *)a2 + 16) = *((void *)this + 18);
  if (*((unsigned char *)a2 + 136) || *((unsigned char *)this + 152))
  {
    if (!*((unsigned char *)a2 + 136) || *((unsigned char *)this + 152))
    {
      if (!*((unsigned char *)a2 + 136) && *((unsigned char *)this + 152)) {
        *((unsigned char *)a2 + 136) = 1;
      }
      *((void *)a2 + 18) = *((void *)this + 20);
    }
    else
    {
      *((unsigned char *)a2 + 136) = 0;
    }
  }
  float result = *((float *)this + 42);
  *((float *)a2 + 38) = result;
  *((unsigned char *)a2 + 156) = *((unsigned char *)this + 172);
  return result;
}

void *re::Allocator::create<re::TimelineGroup>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 96, 8);
  float result = (void *)re::Timeline::Timeline(v1, 2);
  *float result = &unk_26E6C28D8;
  result[10] = 0;
  result[11] = 0;
  result[9] = 0;
  return result;
}

void anonymous namespace'::convertTimelineGroup(_anonymous_namespace_ *this, const re::TimelineAssetData *a2, re::Timeline *a3)
{
  *((_DWORD *)a2 + 3) = *((_DWORD *)this + 3);
  *((unsigned char *)a2 + 16) = *((unsigned char *)this + 16);
  re::StringID::operator=((unint64_t *)a2 + 3, (uint64_t *)this + 3);
  int v5 = re::DynamicString::operator=((const re::TimelineAssetData *)((char *)a2 + 40), (_anonymous_namespace_ *)((char *)this + 40));
  unint64_t v6 = *((void *)this + 11);
  uint64_t v7 = *((void *)a2 + 10);
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
      *(void *)(*((void *)a2 + 11) + 8 * i) = 0;
  }
}

uint64_t re::Allocator::create<re::FloatAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::FloatAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::FloatAnimationClip::FloatAnimationClip(v1);
}

float anonymous namespace'::convertAnimationClip<re::FloatAnimationClipAssetData,re::FloatAnimationClip>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  if (*(unsigned char *)(a2 + 88) || *(unsigned char *)(a1 + 104))
  {
    if (!*(unsigned char *)(a2 + 88) || *(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a2 + 88) && *(unsigned char *)(a1 + 104)) {
        *(unsigned char *)(a2 + 88) = 1;
      }
      *(void *)(a2 + 96) = *(void *)(a1 + 112);
    }
    else
    {
      *(unsigned char *)(a2 + 88) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 104) || *(unsigned char *)(a1 + 120))
  {
    if (!*(unsigned char *)(a2 + 104) || *(unsigned char *)(a1 + 120))
    {
      if (!*(unsigned char *)(a2 + 104) && *(unsigned char *)(a1 + 120)) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      *(void *)(a2 + 112) = *(void *)(a1 + 128);
    }
    else
    {
      *(unsigned char *)(a2 + 104) = 0;
    }
  }
  *(void *)(a2 + 120) = *(void *)(a1 + 136);
  *(unsigned char *)(a2 + 128) = *(unsigned char *)(a1 + 144);
  *(void *)(a2 + 136) = *(void *)(a1 + 152);
  if (*(unsigned char *)(a2 + 144) || *(unsigned char *)(a1 + 160))
  {
    if (!*(unsigned char *)(a2 + 144) || *(unsigned char *)(a1 + 160))
    {
      if (!*(unsigned char *)(a2 + 144) && *(unsigned char *)(a1 + 160)) {
        *(unsigned char *)(a2 + 144) = 1;
      }
      *(void *)(a2 + 152) = *(void *)(a1 + 168);
    }
    else
    {
      *(unsigned char *)(a2 + 144) = 0;
    }
  }
  float result = *(float *)(a1 + 176);
  *(float *)(a2 + 160) = result;
  *(unsigned char *)(a2 + 164) = *(unsigned char *)(a1 + 180);
  return result;
}

uint64_t re::Allocator::create<re::DoubleAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  uint64_t result = re::Timeline::Timeline(v1, 4);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1868;
  return result;
}

uint64_t re::Allocator::create<re::Vector2FAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::Vector2FAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::Vector2FAnimationClip::Vector2FAnimationClip(v1);
}

uint64_t re::Allocator::create<re::Vector3FAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::Vector3FAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::Vector3FAnimationClip::Vector3FAnimationClip(v1);
}

uint64_t re::Allocator::create<re::Vector4FAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::Vector4FAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::Vector4FAnimationClip::Vector4FAnimationClip(v1);
}

uint64_t re::Allocator::create<re::QuaternionFAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::QuaternionFAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::QuaternionFAnimationClip::QuaternionFAnimationClip(v1);
}

uint64_t re::Allocator::create<re::SRTAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::SRTAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::SRTAnimationClip::SRTAnimationClip(v1);
}

uint64_t re::Allocator::create<re::SkeletalPoseAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (re::SkeletalPoseAnimationClip *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  return re::SkeletalPoseAnimationClip::SkeletalPoseAnimationClip(v1);
}

uint64_t re::Allocator::create<re::FloatAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 120, 8);
  uint64_t result = re::Timeline::Timeline(v1, 11);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)uint64_t result = &unk_26E6BFFE8;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::FloatAnimationAssetData,re::FloatAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  int v5 = *(unsigned __int8 *)(a1 + 88);
  if (*(unsigned char *)(a2 + 88)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*(unsigned char *)(a2 + 88)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(unsigned char *)(a2 + 88) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 88) && *(unsigned char *)(a1 + 88)) {
        *(unsigned char *)(a2 + 88) = 1;
      }
      *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 92);
    }
  }
  if (*(unsigned char *)(a2 + 96)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(unsigned char *)(a1 + 96) == 0;
  }
  if (!v8)
  {
    if (!*(unsigned char *)(a2 + 96) || *(unsigned char *)(a1 + 96))
    {
      if (!*(unsigned char *)(a2 + 96) && *(unsigned char *)(a1 + 96)) {
        *(unsigned char *)(a2 + 96) = 1;
      }
      *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 100);
    }
    else
    {
      *(unsigned char *)(a2 + 96) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 104) || *(unsigned char *)(a1 + 104))
  {
    if (!*(unsigned char *)(a2 + 104) || *(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a2 + 104) && *(unsigned char *)(a1 + 104)) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 108);
    }
    else
    {
      *(unsigned char *)(a2 + 104) = 0;
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 112);
  if (v9)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 112) = result;
  return result;
}

uint64_t re::Allocator::create<re::DoubleAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 144, 8);
  uint64_t result = re::Timeline::Timeline(v1, 12);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)uint64_t result = &unk_26E6D1C90;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::DoubleAnimationAssetData,re::DoubleAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  int v5 = *(unsigned __int8 *)(a1 + 88);
  if (*(unsigned char *)(a2 + 88)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*(unsigned char *)(a2 + 88)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(unsigned char *)(a2 + 88) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 88) && *(unsigned char *)(a1 + 88)) {
        *(unsigned char *)(a2 + 88) = 1;
      }
      *(void *)(a2 + 96) = *(void *)(a1 + 96);
    }
  }
  if (*(unsigned char *)(a2 + 104)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(unsigned char *)(a1 + 104) == 0;
  }
  if (!v8)
  {
    if (!*(unsigned char *)(a2 + 104) || *(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a2 + 104) && *(unsigned char *)(a1 + 104)) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      *(void *)(a2 + 112) = *(void *)(a1 + 112);
    }
    else
    {
      *(unsigned char *)(a2 + 104) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 120) || *(unsigned char *)(a1 + 120))
  {
    if (!*(unsigned char *)(a2 + 120) || *(unsigned char *)(a1 + 120))
    {
      if (!*(unsigned char *)(a2 + 120) && *(unsigned char *)(a1 + 120)) {
        *(unsigned char *)(a2 + 120) = 1;
      }
      *(void *)(a2 + 128) = *(void *)(a1 + 128);
    }
    else
    {
      *(unsigned char *)(a2 + 120) = 0;
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 136);
  if (v9)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 136) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector2FAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 144, 8);
  uint64_t result = re::Timeline::Timeline(v1, 13);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 136) = 0;
  *(void *)uint64_t result = &unk_26E6D1D28;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::Vector2FAnimationAssetData,re::Vector2FAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  int v5 = *(unsigned __int8 *)(a1 + 88);
  if (*(unsigned char *)(a2 + 88)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*(unsigned char *)(a2 + 88)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(unsigned char *)(a2 + 88) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 88) && *(unsigned char *)(a1 + 88)) {
        *(unsigned char *)(a2 + 88) = 1;
      }
      *(void *)(a2 + 96) = *(void *)(a1 + 96);
    }
  }
  if (*(unsigned char *)(a2 + 104)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(unsigned char *)(a1 + 104) == 0;
  }
  if (!v8)
  {
    if (!*(unsigned char *)(a2 + 104) || *(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a2 + 104) && *(unsigned char *)(a1 + 104)) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      *(void *)(a2 + 112) = *(void *)(a1 + 112);
    }
    else
    {
      *(unsigned char *)(a2 + 104) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 120) || *(unsigned char *)(a1 + 120))
  {
    if (!*(unsigned char *)(a2 + 120) || *(unsigned char *)(a1 + 120))
    {
      if (!*(unsigned char *)(a2 + 120) && *(unsigned char *)(a1 + 120)) {
        *(unsigned char *)(a2 + 120) = 1;
      }
      *(void *)(a2 + 128) = *(void *)(a1 + 128);
    }
    else
    {
      *(unsigned char *)(a2 + 120) = 0;
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 136);
  if (v9)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 136) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector3FAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 208, 16);
  uint64_t result = re::Timeline::Timeline(v1, 14);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6D1DC0;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::Vector3FAnimationAssetData,re::Vector3FAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  int v5 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a2 + 96)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*(unsigned char *)(a2 + 96)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(unsigned char *)(a2 + 96) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 96) && *(unsigned char *)(a1 + 96)) {
        *(unsigned char *)(a2 + 96) = 1;
      }
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
    }
  }
  if (*(unsigned char *)(a2 + 128)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(unsigned char *)(a1 + 128) == 0;
  }
  if (!v8)
  {
    if (!*(unsigned char *)(a2 + 128) || *(unsigned char *)(a1 + 128))
    {
      if (!*(unsigned char *)(a2 + 128) && *(unsigned char *)(a1 + 128)) {
        *(unsigned char *)(a2 + 128) = 1;
      }
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
    }
    else
    {
      *(unsigned char *)(a2 + 128) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 160) || *(unsigned char *)(a1 + 160))
  {
    if (!*(unsigned char *)(a2 + 160) || *(unsigned char *)(a1 + 160))
    {
      if (!*(unsigned char *)(a2 + 160) && *(unsigned char *)(a1 + 160)) {
        *(unsigned char *)(a2 + 160) = 1;
      }
      *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
    }
    else
    {
      *(unsigned char *)(a2 + 160) = 0;
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 192) = result;
  return result;
}

uint64_t re::Allocator::create<re::Vector4FAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 208, 16);
  uint64_t result = re::Timeline::Timeline(v1, 15);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6D1E58;
  return result;
}

uint64_t re::Allocator::create<re::QuaternionFAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 208, 16);
  uint64_t result = re::Timeline::Timeline(v1, 16);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 192) = 0;
  *(void *)uint64_t result = &unk_26E6D1EF0;
  return result;
}

uint64_t re::Allocator::create<re::SRTAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 304, 16);
  uint64_t result = re::Timeline::Timeline(v1, 17);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(unsigned char *)(result + 224) = 0;
  *(void *)(result + 288) = 0;
  *(void *)uint64_t result = &unk_26E6D1F88;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::SRTAnimationAssetData,re::SRTAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  int v5 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a2 + 96)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*(unsigned char *)(a2 + 96)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(unsigned char *)(a2 + 96) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 96) && *(unsigned char *)(a1 + 96)) {
        *(unsigned char *)(a2 + 96) = 1;
      }
      long long v8 = *(_OWORD *)(a1 + 112);
      long long v9 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a2 + 144) = v9;
      *(_OWORD *)(a2 + 112) = v8;
    }
  }
  if (*(unsigned char *)(a2 + 160)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(unsigned char *)(a1 + 160) == 0;
  }
  if (!v10)
  {
    if (!*(unsigned char *)(a2 + 160) || *(unsigned char *)(a1 + 160))
    {
      if (!*(unsigned char *)(a2 + 160) && *(unsigned char *)(a1 + 160)) {
        *(unsigned char *)(a2 + 160) = 1;
      }
      long long v11 = *(_OWORD *)(a1 + 176);
      long long v12 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a2 + 208) = v12;
      *(_OWORD *)(a2 + 176) = v11;
    }
    else
    {
      *(unsigned char *)(a2 + 160) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 224) || *(unsigned char *)(a1 + 224))
  {
    if (!*(unsigned char *)(a2 + 224) || *(unsigned char *)(a1 + 224))
    {
      if (!*(unsigned char *)(a2 + 224) && *(unsigned char *)(a1 + 224)) {
        *(unsigned char *)(a2 + 224) = 1;
      }
      long long v13 = *(_OWORD *)(a1 + 240);
      long long v14 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a2 + 272) = v14;
      *(_OWORD *)(a2 + 240) = v13;
    }
    else
    {
      *(unsigned char *)(a2 + 224) = 0;
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 288);
  if (v15)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 288) = result;
  return result;
}

uint64_t re::Allocator::create<re::SkeletalPoseAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 384, 8);
  uint64_t result = re::Timeline::Timeline(v1, 18);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 184) = 0;
  *(unsigned char *)(result + 280) = 0;
  *(void *)(result + 376) = 0;
  *(void *)uint64_t result = &unk_26E6D2020;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::SkeletalPoseAnimationAssetData,re::SkeletalPoseAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  unint64_t v30 = 0;
  v27[1] = 0;
  unint64_t v28 = 0;
  int v29 = 0;
  int v5 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v27, 3uLL);
  ++v29;
  if (*(unsigned char *)(a1 + 88))
  {
    re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v40, a1 + 216);
    BOOL v6 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v27, &v40);
    if ((void)v40) {

    }
    re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)&v32);
    re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a2 + 88), (uint64_t *)&v40);
    if ((_BYTE)v40) {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v40 + 8));
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v32);
    int v5 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::operator=((void *)(a2 + 112), a1 + 96);
  }
  if (*(unsigned char *)(a1 + 120))
  {
    unint64_t v7 = v28;
    if (!v28) {
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    long long v9 = v30;
    uint64_t v10 = *(void *)(a1 + 272);
    while (1)
    {
      uint64_t v11 = v9[v8];
      if (*(void *)(v11 + 192) == v10)
      {
        if (!v10)
        {
LABEL_18:
          if (v8 >= v7)
          {
LABEL_19:
            re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v40, a1 + 256);
            int v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v27, &v40);
            if ((void)v40) {

            }
            unint64_t v7 = v28;
            unint64_t v8 = v28 - 1;
          }
          if (v7 > v8)
          {
            re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)&v32);
            re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a2 + 184), (uint64_t *)&v40);
            if ((_BYTE)v40) {
              re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v40 + 8));
            }
            re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v32);
            int v5 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::operator=((void *)(a2 + 208), a1 + 128);
            break;
          }
          uint64_t v31 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v40 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v32 = 136315906;
          long long v33 = "operator[]";
          __int16 v34 = 1024;
          int v35 = 789;
          __int16 v36 = 2048;
          unint64_t v37 = v8;
          __int16 v38 = 2048;
          unint64_t v39 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          uint64_t v31 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v40 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v32 = 136315906;
          long long v33 = "operator[]";
          __int16 v34 = 1024;
          int v35 = 789;
          __int16 v36 = 2048;
          unint64_t v37 = v8;
          __int16 v38 = 2048;
          unint64_t v39 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v12 = *(void **)(v11 + 200);
        long long v13 = *(void **)(a1 + 288);
        uint64_t v14 = 16 * v10;
        while (1)
        {
          int v5 = (_anonymous_namespace_ *)re::StringID::operator==(v12, v13);
          if (!v5) {
            break;
          }
          v12 += 2;
          v13 += 2;
          v14 -= 16;
          if (!v14) {
            goto LABEL_18;
          }
        }
      }
      if (++v8 == v7) {
        goto LABEL_19;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 152)) {
    goto LABEL_45;
  }
  unint64_t v7 = v28;
  if (!v28) {
    goto LABEL_38;
  }
  unint64_t v8 = 0;
  uint64_t v15 = v30;
  uint64_t v16 = *(void *)(a1 + 312);
  while (1)
  {
    uint64_t v17 = v15[v8];
    if (*(void *)(v17 + 192) == v16) {
      break;
    }
LABEL_35:
    if (++v8 == v7) {
      goto LABEL_38;
    }
  }
  if (v16)
  {
    uint64_t v18 = *(void **)(v17 + 200);
    uint64_t v19 = *(void **)(a1 + 328);
    uint64_t v20 = 16 * v16;
    do
    {
      int v5 = (_anonymous_namespace_ *)re::StringID::operator==(v18, v19);
      if (!v5) {
        goto LABEL_35;
      }
      v18 += 2;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
  }
  if (v8 >= v7)
  {
LABEL_38:
    re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v40, a1 + 296);
    int v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v27, &v40);
    if ((void)v40) {

    }
    unint64_t v7 = v28;
    unint64_t v8 = v28 - 1;
  }
  if (v7 <= v8) {
    goto LABEL_58;
  }
  re::Optional<re::SkeletalPose>::Optional((uint64_t)&v40, (uint64_t)&v32);
  re::Optional<re::SkeletalPose>::operator=((unsigned __int8 *)(a2 + 280), (uint64_t *)&v40);
  if ((_BYTE)v40) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)((char *)&v40 + 8));
  }
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v32);
  int v5 = (_anonymous_namespace_ *)re::FixedArray<re::GenericSRT<float>>::operator=((void *)(a2 + 304), a1 + 160);
LABEL_45:
  uint64_t v21 = v27[0];
  if (v27[0])
  {
    uint64_t v22 = v30;
    if (v30)
    {
      if (v28)
      {
        uint64_t v23 = 8 * v28;
        uint64_t v24 = v30;
        do
        {
          if (*v24)
          {

            *uint64_t v24 = 0;
          }
          ++v24;
          v23 -= 8;
        }
        while (v23);
      }
      int v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v21 + 40))(v21, v22);
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v25 = *(void *)(a1 + 184);
  if (v25)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 376) = result;
  return result;
}

double re::Allocator::create<re::FloatKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 19);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D20B8;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::FloatKeyframeAnimationAssetData,re::FloatKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::DoubleKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 20);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2150;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::DoubleKeyframeAnimationAssetData,re::DoubleKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<double>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::Vector2FKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 21);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D21E8;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::Vector2FKeyframeAnimationAssetData,re::Vector2FKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::Vector3FKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 22);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2280;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::Vector3FKeyframeAnimationAssetData,re::Vector3FKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::Vector4FKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 23);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2318;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::Vector4FKeyframeAnimationAssetData,re::Vector4FKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::QuaternionFKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 24);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D23B0;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::QuaternionFKeyframeAnimationAssetData,re::QuaternionFKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::SRTKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 25);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2448;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::SRTKeyframeAnimationAssetData,re::SRTKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = v4;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(a2 + 104), (uint64_t)&v7);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = v5;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v7);
}

double re::Allocator::create<re::SkeletalPoseKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 26);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D24E0;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::SkeletalPoseKeyframeAnimationAssetData,re::SkeletalPoseKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v12, a1 + 184);
  unint64_t v5 = *(void *)(a1 + 136);
  if (*(void *)(a1 + 136))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 16;
    while (1)
    {
      unint64_t v9 = *(void *)(a2 + 112);
      if (v9 <= v7) {
        break;
      }
      re::SkeletalPose::init((uint64_t *)(*(void *)(a2 + 120) + v8 - 16), &v12);
      unint64_t v9 = *(void *)(a1 + 136);
      if (v9 <= v7) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(a2 + 112);
      if (v9 <= v7) {
        goto LABEL_12;
      }
      re::FixedArray<re::GenericSRT<float>>::operator=((void *)(*(void *)(a2 + 120) + v8), *(void *)(a1 + 152) + v6);
      ++v7;
      v6 += 24;
      v8 += 88;
      if (v7 >= *(void *)(a1 + 136)) {
        goto LABEL_7;
      }
    }
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    uint64_t v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 468;
    __int16 v18 = 2048;
    unint64_t v19 = v7;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    uint64_t v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v7;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    uint64_t v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 468;
    __int16 v18 = 2048;
    unint64_t v19 = v7;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v12) {

  }
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 96);
  *(void *)&long long v22 = *(void *)(a1 + 112);
  *((void *)&v22 + 1) = v10;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v22);
}

double re::Allocator::create<re::FloatSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 27);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2578;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::FloatSampledAnimationAssetData,re::FloatSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::DoubleSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 28);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2610;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::DoubleSampledAnimationAssetData,re::DoubleSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<double>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::Vector2FSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 29);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D26A8;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::Vector2FSampledAnimationAssetData,re::Vector2FSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::Vector3FSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 30);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2740;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::Vector3FSampledAnimationAssetData,re::Vector3FSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::Vector4FSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 31);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D27D8;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::Vector4FSampledAnimationAssetData,re::Vector4FSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::QuaternionFSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 32);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2870;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::QuaternionFSampledAnimationAssetData,re::QuaternionFSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::SRTSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 33);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D2908;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::SRTSampledAnimationAssetData,re::SRTSampledAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 104);
  v6[0] = *(void *)(a1 + 120);
  v6[1] = v4;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(a2 + 88), (uint64_t)v6);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::SkeletalPoseSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 120, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 34);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6C1190;
  *(_WORD *)(v2 + 112) = 257;
  *(unsigned char *)(v2 + 114) = 1;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::SkeletalPoseSampledAnimationAssetData,re::SkeletalPoseSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>((re *)&v11, a1 + 152);
  unint64_t v5 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 104))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 16;
    while (1)
    {
      unint64_t v9 = *(void *)(a2 + 96);
      if (v9 <= v7) {
        break;
      }
      re::SkeletalPose::init((uint64_t *)(*(void *)(a2 + 104) + v8 - 16), &v11);
      unint64_t v9 = *(void *)(a1 + 104);
      if (v9 <= v7) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(a2 + 96);
      if (v9 <= v7) {
        goto LABEL_12;
      }
      re::FixedArray<re::GenericSRT<float>>::operator=((void *)(*(void *)(a2 + 104) + v8), *(void *)(a1 + 120) + v6);
      ++v7;
      v6 += 24;
      v8 += 88;
      if (v7 >= *(void *)(a1 + 104)) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    int v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 468;
    __int16 v17 = 2048;
    unint64_t v18 = v7;
    __int16 v19 = 2048;
    unint64_t v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    uint64_t v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    int v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 797;
    __int16 v17 = 2048;
    unint64_t v18 = v7;
    __int16 v19 = 2048;
    unint64_t v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    uint64_t v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    int v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 468;
    __int16 v17 = 2048;
    unint64_t v18 = v7;
    __int16 v19 = 2048;
    unint64_t v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v11) {

  }
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

double re::Allocator::create<re::OrbitAnimation>(uint64_t a1)
{
  uint64_t v1 = (re::OrbitAnimation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 224, 16);
  return re::OrbitAnimation::OrbitAnimation(v1);
}

re::DynamicString *anonymous namespace'::convertTimeline<re::OrbitAnimationAssetData,re::OrbitAnimation>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
}

uint64_t re::Allocator::create<re::AudioAnimationTimeline>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 96, 8);
  uint64_t result = re::Timeline::Timeline(v1, 38);
  *(unsigned char *)(result + 72) = 0;
  *(void *)uint64_t result = &unk_26E6C3EC0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  return result;
}

__n128 anonymous namespace'::convertAudioAnimationTimeline<re::AnimationStateTimelineAssetData,re::AudioAnimationTimeline>(__n128 *a1, __n128 *a2)
{
  a2->n128_u32[3] = a1->n128_u32[3];
  a2[1].n128_u8[0] = a1[1].n128_u8[0];
  re::StringID::operator=(&a2[1].n128_u64[1], &a1[1].n128_i64[1]);
  re::DynamicString::operator=((re::DynamicString *)&a2[2].n128_i8[8], (re::DynamicString *)&a1[2].n128_i8[8]);
  __n128 result = a1[5];
  a2[5] = result;
  return result;
}

uint64_t createAnimationBlendTreeFromAssetData<float>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 39);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D29A0;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<float>::buildRig((uint64_t)v83, &v48, (void *)v32, v26, (unint64_t *)v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<double>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 40);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D2AD0;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<double>::buildRig((uint64_t)v83, &v48, v32, v26, v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Vector2<float>>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 41);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D2C00;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<re::Vector2<float>>::buildRig((uint64_t)v83, &v48, (void *)v32, v26, (unint64_t *)v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Vector3<float>>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 42);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D2D30;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<re::Vector3<float>>::buildRig((uint64_t)v83, &v48, (void *)v32, v26, (unint64_t *)v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Vector4<float>>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 43);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D2E60;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<double>::buildRig((uint64_t)v83, &v48, v32, v26, v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::Quaternion<float>>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 44);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D2F90;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<re::Quaternion<float>>::buildRig((uint64_t)v83, &v48, (void *)v32, v26, (unint64_t *)v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::GenericSRT<float>>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 45);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D30C0;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<re::GenericSRT<float>>::buildRig((uint64_t)v83, &v48, (void *)v32, v26, (unint64_t *)v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t createAnimationBlendTreeFromAssetData<re::SkeletalPose>(unint64_t a1, re::Allocator *a2)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  int v52 = 0;
  unint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0x7FFFFFFFLL;
  re::StringID::invalid((re::StringID *)v55);
  memset(v56, 0, sizeof(v56));
  int v57 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v60, 0, sizeof(v60));
  int v59 = 0;
  int v61 = 0;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  memset(v64, 0, sizeof(v64));
  int v65 = 0;
  int v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  uint64_t v69 = 0x7FFFFFFFLL;
  char v70 = 0;
  memset(v72, 0, sizeof(v72));
  int v73 = 0;
  uint64_t v74 = 0x7FFFFFFFLL;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  int v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v89[1] = 0;
  v89[0] = 0;
  int v90 = 1;
  uint64_t v93 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, a2);
  unint64_t v46 = a1;
  re::AnimationBlendTreeBuilder<float>::init((uint64_t)&v48, a1 + 80, (uint64_t)a2);
  unint64_t v86 = 0;
  unint64_t v6 = v51;
  unint64_t v51 = 0;
  if (v6)
  {
    uint64_t v7 = 80 * v6;
    uint64_t v8 = (re::StringID *)(*(void *)v53 + 64);
    do
    {
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)((char *)v8 - 16));
      re::DynamicArray<unsigned long>::deinit((uint64_t)v8 - 56);
      uint64_t v8 = (re::StringID *)((char *)v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  ++v52;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)&v53[8]);
  v87[0] = 0;
  uint64_t v10 = v71;
  if (v71[2])
  {
    uint64_t v2 = (unint64_t *)&v98;
    unint64_t v11 = 80;
    a1 = 1;
    uint64_t v3 = "";
    while (1)
    {
      v96[0] = -1;
      unint64_t v12 = v51;
      if (v51 >= v50)
      {
        unint64_t v13 = v51 + 1;
        if (v50 < v51 + 1)
        {
          if (v49)
          {
            unint64_t v14 = 8;
            if (v50) {
              unint64_t v14 = 2 * v50;
            }
            if (v14 <= v13) {
              unint64_t v15 = v51 + 1;
            }
            else {
              unint64_t v15 = v14;
            }
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v15);
          }
          else
          {
            re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(&v49, v13);
            ++v52;
          }
        }
        unint64_t v12 = v51;
      }
      uint64_t v16 = *(void *)v53 + 80 * v12;
      *(void *)uint64_t v16 = -1;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      memset(&v96[1], 0, 24);
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)&v97[1] = 0u;
      LODWORD(v97[0]) = 1;
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 56) = "";
      v97[3] = "";
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = "";
      *((void *)&v98 + 1) = "";
      *(void *)&long long v98 = 0;
      ++v51;
      ++v52;
      re::StringID::destroyString((re::StringID *)&v98);
      re::StringID::destroyString((re::StringID *)&v97[2]);
      if (v96[1] && v97[1]) {
        (*(void (**)(void))(*(void *)v96[1] + 40))();
      }
      uint64_t v17 = v87[0];
      unint64_t v18 = v71[2];
      if (v18 <= v87[0]) {
        break;
      }
      unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v53[8], (StringID *)(v71[4] + 88 * v87[0]++), v87);
      uint64_t v10 = v71;
      if (v87[0] >= (unint64_t)v71[2]) {
        goto LABEL_22;
      }
    }
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v17;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v11;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v3;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v18;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    unint64_t v88 = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = a1;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 797;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v83[0] = 0;
    long long v98 = 0u;
    memset(v97, 0, sizeof(v97));
    memset(v96, 0, sizeof(v96));
    unint64_t v26 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v102 = 136315906;
    *(void *)&v102[4] = "operator[]";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 789;
    *(_WORD *)&v102[18] = 2048;
    *(void *)&v102[20] = v2;
    __int16 v103 = 2048;
    *(void *)v104 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
LABEL_22:
  if (v10[7])
  {
    unint64_t v11 = 0;
    uint64_t v19 = 112;
    while (1)
    {
      uint64_t v20 = v10[9] + v19;
      re::StringID::StringID((re::StringID *)v83, (const StringID *)(v20 - 80));
      unint64_t v18 = v71[7];
      if (v18 <= v11) {
        goto LABEL_106;
      }
      a1 = v20 - 112;
      re::StringID::StringID((re::StringID *)v87, (const StringID *)(v71[9] + v19));
      uint64_t v2 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 32));
      long long v21 = (const char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v53[8], (void *)(v20 - 112));
      BOOL v22 = !v2 || v21 == 0;
      if (v22) {
        break;
      }
      a1 = *v2;
      unint64_t v18 = v51;
      if (v51 <= *v2) {
        goto LABEL_107;
      }
      long long v23 = v21;
      re::DynamicArray<unsigned long>::add((void *)(*(void *)v53 + 80 * a1 + 8), v21);
      uint64_t v3 = *v23;
      a1 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)v53;
      *(void *)(*(void *)v53 + 80 * (void)v3) = *v2;
      unint64_t v18 = (unint64_t)*v23;
      if (a1 <= (unint64_t)*v23) {
        goto LABEL_109;
      }
      re::StringID::operator=((unint64_t *)(v24 + 80 * v18 + 48), v87);
      a1 = (unint64_t)*v23;
      unint64_t v18 = v51;
      if (v51 <= (unint64_t)*v23) {
        goto LABEL_110;
      }
      re::StringID::operator=((unint64_t *)(*(void *)v53 + 80 * a1 + 64), v83);
      re::StringID::destroyString((re::StringID *)v87);
      re::StringID::destroyString((re::StringID *)v83);
      ++v11;
      uint64_t v10 = v71;
      v19 += 160;
      if (v11 >= v71[7]) {
        goto LABEL_36;
      }
    }
    re::StringID::destroyString((re::StringID *)v87);
    re::StringID::destroyString((re::StringID *)v83);
  }
LABEL_36:
  if (!v51)
  {
LABEL_76:
    re::DynamicString::format((re::DynamicString *)"A root node without a parent was not found.", (re::DynamicString *)v96);
    goto LABEL_93;
  }
  unint64_t v11 = 0;
  unint64_t v47 = 0;
  char v25 = 0;
  uint64_t v2 = 0;
  unint64_t v26 = -1;
  uint64_t v27 = 32;
  while (1)
  {
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_111;
    }
    BOOL isBlend = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v71[4] + v27 - 32));
    if (isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_112;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22) {
          goto LABEL_80;
        }
      }
      unint64_t v29 = *(void *)(*(void *)v53 + v11 + 24);
      if (v29 <= 1)
      {
        __int16 v38 = "A blend node was found, with missing inputs.";
        goto LABEL_92;
      }
      if (v29 != 2)
      {
        if (v70) {
          goto LABEL_78;
        }
        char v25 = 1;
      }
      goto LABEL_65;
    }
    unint64_t v18 = v71[2];
    if (v18 <= (unint64_t)v2) {
      goto LABEL_113;
    }
    unint64_t v30 = (StringID *)(v71[4] + v27);
    if (re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kClip))
    {
      uint64_t v31 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v72, v30, &v86);
      ++v86;
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_114;
      }
      if (*(void *)(*(void *)v53 + v11) >= v51)
      {
        __int16 v38 = "A clip node was found, with no parent blend operation.";
        goto LABEL_92;
      }
      if (*(void *)(*(void *)v53 + v11 + 24))
      {
        __int16 v38 = "All clip nodes should be leaf nodes, but one found with child.";
        goto LABEL_92;
      }
      goto LABEL_65;
    }
    BOOL isBlend = re::StringID::operator==(&v30[-1], re::AnimationBlendTreeNodeDescription::kInput);
    if (!isBlend)
    {
      a1 = v51;
      if (v51 <= (unint64_t)v2) {
        goto LABEL_116;
      }
      if (*(void *)(*(void *)v53 + v11) == -1)
      {
        BOOL v22 = v26 == -1;
        unint64_t v26 = (unint64_t)v2;
        if (!v22)
        {
LABEL_80:
          __int16 v38 = "Multiple roots found.";
          goto LABEL_92;
        }
      }
      char v70 = 1;
      if (v25)
      {
LABEL_78:
        __int16 v38 = "A blend node was found with too many inputs. Blend nodes that use a rig must have exactly 2 inputs.";
        goto LABEL_92;
      }
      char v25 = 0;
      goto LABEL_65;
    }
    a1 = v51;
    if (v51 <= (unint64_t)v2) {
      goto LABEL_115;
    }
    if (*(void *)(*(void *)v53 + v11) >= v51)
    {
      __int16 v38 = "An external sample or input was found, with no parent blend operation.";
      goto LABEL_92;
    }
    if (*(void *)(*(void *)v53 + v11 + 24)) {
      break;
    }
    ++v47;
LABEL_65:
    uint64_t v2 = (unint64_t *)((char *)v2 + 1);
    v11 += 80;
    v27 += 88;
    if ((unint64_t)v2 >= a1)
    {
      if (v26 != -1)
      {
        unint64_t v11 = v71[2];
        if (v11 > v26)
        {
          unint64_t v11 = v71[4];
          uint64_t v32 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 624, 8);
          uint64_t v33 = re::Timeline::Timeline(v32, 46);
          *(void *)(v33 + 80) = 0;
          uint64_t v34 = v33 + 80;
          *(unsigned char *)(v33 + 72) = 0;
          *(void *)(v33 + 88) = 0;
          *(void *)(v33 + 96) = 0;
          *(_DWORD *)(v33 + 104) = 0;
          *(_OWORD *)(v33 + 112) = 0u;
          *(_OWORD *)(v33 + 128) = 0u;
          *(_DWORD *)(v33 + 144) = 0;
          *(_OWORD *)(v33 + 152) = 0u;
          *(_OWORD *)(v33 + 168) = 0u;
          *(_DWORD *)(v33 + 184) = 0;
          *(_OWORD *)(v33 + 192) = 0u;
          *(_OWORD *)(v33 + 208) = 0u;
          *(_DWORD *)(v33 + 224) = 0;
          *(_OWORD *)(v33 + 232) = 0u;
          *(_OWORD *)(v33 + 248) = 0u;
          *(_DWORD *)(v33 + 264) = 0;
          int v35 = (void *)(v33 + 376);
          __int16 v36 = (void *)(v33 + 416);
          *(void *)(v33 + 528) = 0;
          *(_DWORD *)(v33 + 536) = 0;
          *(void *)(v33 + 552) = 0;
          *(void *)(v33 + 544) = 0;
          *(_DWORD *)(v33 + 568) = 0;
          *(void *)(v33 + 560) = 0;
          *(void *)(v33 + 616) = 0;
          *(_DWORD *)(v33 + 608) = 0;
          *(_OWORD *)(v33 + 576) = 0u;
          *(_OWORD *)(v33 + 592) = 0u;
          *(_DWORD *)(v33 + 520) = 0;
          *(_OWORD *)(v33 + 488) = 0u;
          *(_OWORD *)(v33 + 504) = 0u;
          *(_DWORD *)(v33 + 400) = 0;
          *(_OWORD *)(v33 + 368) = 0u;
          *(_OWORD *)(v33 + 384) = 0u;
          *(_OWORD *)(v33 + 336) = 0u;
          *(_OWORD *)(v33 + 352) = 0u;
          *(_OWORD *)(v33 + 304) = 0u;
          *(_OWORD *)(v33 + 320) = 0u;
          *(_OWORD *)(v33 + 272) = 0u;
          *(_OWORD *)(v33 + 288) = 0u;
          *(_DWORD *)(v33 + 440) = 0;
          *(_OWORD *)(v33 + 408) = 0u;
          *(_OWORD *)(v33 + 424) = 0u;
          *(_OWORD *)(v33 + 448) = 0u;
          *(_OWORD *)(v33 + 464) = 0u;
          *(_DWORD *)(v33 + 480) = 0;
          *(void *)uint64_t v33 = &unk_26E6D31F0;
          re::FixedArray<re::Timeline const*>::init<>((uint64_t *)(v33 + 304), (uint64_t)v48, v86);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 328), (uint64_t)v48, v86 + 1);
          re::FixedArray<unsigned long>::init<>((uint64_t *)(v32 + 352), (uint64_t)v48, v86);
          *(void *)(v32 + 416) = v48;
          re::DynamicArray<re::StringID>::setCapacity(v36, v47);
          ++*(_DWORD *)(v32 + 440);
          v87[0] = 0;
          unint64_t v88 = 0;
          if (v70)
          {
            re::RigGraphDefinitionBuilder::init(&v66[1], (uint64_t)v48, (uint64_t)v55, (uint64_t)v89);
            re::AnimationBlendTreeBuilder<re::SkeletalPose>::buildRig((uint64_t)v83, &v48, (void *)v32, v26, (unint64_t *)v87);
            if (!LOBYTE(v83[0]))
            {
              uint64_t v42 = v85;
              uint64_t v43 = v83[3];
              char v44 = v84;
              goto LABEL_94;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(&v66[1], *(const char **)(v11 + 88 * v26 + 8), "output", "output", "", 0, (uint64_t)v80);
            unint64_t v37 = v46;
            if (!v80[0] && (void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            uint64_t v105 = 0;
            *(void *)&v104[2] = 0;
            int v106 = 1;
            uint64_t v109 = 0;
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            int v110 = 0;
            uint64_t v113 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v118 = 0;
            long long v115 = 0u;
            long long v116 = 0u;
            int v114 = 0;
            int v117 = 0;
            *(void *)&v102[16] = v89;
            v102[24] = 0;
            *(void *)uint64_t v102 = v48;
            *(void *)&v102[8] = 0;
            re::RigGraphCompilation::init((re::RigGraphCompilation *)&v104[2], v48);
            re::RigGraphSystem::buildFromDefinition((uint64_t)v48, v55, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v34, (uint64_t)v96);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 120, (uint64_t)&v97[1]);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 160, (uint64_t)v99);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 200, (uint64_t)v100);
            re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v32 + 240, (uint64_t)v101);
            re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)v101);
            re::DynamicArray<re::StringID>::deinit((uint64_t)v100);
            re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)v99);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v97[1]);
            re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)v96);
            re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v104[2]);
          }
          else
          {
            re::DynamicArray<re::StringID>::resize((uint64_t)v36, v47);
            re::FixedArray<re::AnimationBlendTreeNode>::init<>((uint64_t *)(v32 + 280), (uint64_t)v48, v51);
            *(void *)(v32 + 376) = v48;
            re::DynamicArray<re::StringID>::setCapacity(v35, 0);
            ++*(_DWORD *)(v32 + 400);
            re::DynamicArray<re::StringID>::resize((uint64_t)v35, v51);
            if (!*(void *)(v32 + 288))
            {
LABEL_118:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              unint64_t v26 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 468;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = 0;
              __int16 v103 = 2048;
              *(void *)v104 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_119;
            }
            uint64_t v39 = *(void *)(v32 + 296);
            *(_DWORD *)uint64_t v39 = 1065353216;
            unint64_t v11 = v51;
            if (v51 <= v26)
            {
LABEL_119:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 789;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_120:
              v83[0] = 0;
              long long v98 = 0u;
              memset(v97, 0, sizeof(v97));
              memset(v96, 0, sizeof(v96));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v102 = 136315906;
              *(void *)&v102[4] = "operator[]";
              *(_WORD *)&v102[12] = 1024;
              *(_DWORD *)&v102[14] = 797;
              *(_WORD *)&v102[18] = 2048;
              *(void *)&v102[20] = v26;
              __int16 v103 = 2048;
              *(void *)v104 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(unsigned char *)(v39 + 6) = *(void *)(*(void *)v53 + 80 * v26 + 24);
            unint64_t v11 = v71[2];
            if (v11 <= v26) {
              goto LABEL_120;
            }
            *(unsigned char *)(v39 + 7) = re::StringID::operator==((void *)(v71[4] + 88 * v26 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
            *(_WORD *)(v39 + 4) = 1;
            re::AnimationBlendTreeBuilder<float>::addChildren(&v48, v32, v26, 1, v87, &v88);
            unint64_t v37 = v46;
          }
          if (v77)
          {
            for (unint64_t i = 0; i < v77; ++i)
              re::AnimationBlendTree<float>::addClip(v32, i, *(_anonymous_namespace_ **)(v79 + 8 * i));
          }
          long long v41 = v71;
          re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(v32 + 456, v71);
          re::DynamicArray<re::RigGraphConnection>::operator=(v32 + 496, v41 + 5);
          *(_DWORD *)(v32 + 536) = *((_DWORD *)v41 + 20);
          re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v32 + 544, v41 + 11);
          re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v32 + 584, v41 + 16);
          *(_DWORD *)(v32 + 12) = *(_DWORD *)(v37 + 12);
          *(unsigned char *)(v32 + 16) = *(unsigned char *)(v37 + 16);
          re::StringID::operator=((unint64_t *)(v32 + 24), (uint64_t *)(v37 + 24));
          re::DynamicString::operator=((re::DynamicString *)(v32 + 40), (re::DynamicString *)(v37 + 40));
          *(unsigned char *)(v32 + 72) = *(unsigned char *)(v37 + 72);
          goto LABEL_97;
        }
LABEL_117:
        v83[0] = 0;
        long long v98 = 0u;
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 797;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v26;
        __int16 v103 = 2048;
        *(void *)v104 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_76;
    }
  }
  __int16 v38 = "All external input nodes should be leaf nodes, but one found with child.";
LABEL_92:
LABEL_93:
  uint64_t v42 = v96[2];
  uint64_t v43 = v96[0];
  char v44 = v96[1];
LABEL_94:
  uint64_t v32 = 0;
  if (v43 && (v44 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v42);
    uint64_t v32 = 0;
  }
LABEL_97:
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0) {
    (*(void (**)(void))(*(void *)v89[0] + 40))();
  }
  if (v75)
  {
    if (v79) {
      (*(void (**)(void))(*(void *)v75 + 40))();
    }
    uint64_t v79 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v75 = 0;
    ++v78;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v72);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v67);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v64[8]);
  re::DynamicArray<re::RigGraphConnection>::deinit(&v62[1]);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v60[8]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v58 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v56);
  re::StringID::destroyString((re::StringID *)v55);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v53[8]);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)&v49);
  return v32;
}

uint64_t re::Allocator::create<re::EventTimeline>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 88, 8);
  uint64_t result = re::Timeline::Timeline(v1, 48);
  *(unsigned char *)(result + 72) = 0;
  *(void *)uint64_t result = &unk_26E6C2FB0;
  *(void *)(result + 80) = 0;
  return result;
}

uint64_t re::Allocator::create<re::BlendShapeWeightsAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 216, 8);
  uint64_t result = re::Timeline::Timeline(v1, 50);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0x3FF0000000000000;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 168) = 0;
  *(void *)(result + 208) = 0;
  *(void *)uint64_t result = &unk_26E6D3320;
  return result;
}

uint64_t anonymous namespace'::convertFromToByAnimation<re::BlendShapeWeightsAnimationAssetData,re::BlendShapeWeightsAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v33 = 0;
  v30[1] = 0;
  unint64_t v31 = 0;
  int v32 = 0;
  unint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v30, 3uLL);
  ++v32;
  if (*(unsigned char *)(a1 + 88))
  {
    re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v36, a1 + 192);
    unint64_t v6 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v30, &v36);
    if ((void)v36) {

    }
    uint64_t v7 = v33;
    memset(v35, 0, 32);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v35[24], *v7);
    re::Optional<re::BlendShapeWeights>::Optional((uint64_t)&v36, (uint64_t)v35);
    re::Optional<re::BlendShapeWeights>::operator=((uint64_t *)(a2 + 88), (unsigned __int8 *)&v36);
    if ((_BYTE)v36) {
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)((char *)&v36 + 8));
    }
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v35);
    unint64_t v5 = (_anonymous_namespace_ *)re::FixedArray<float>::operator=((uint64_t *)(a2 + 96), a1 + 96);
  }
  if (*(unsigned char *)(a1 + 120))
  {
    unint64_t v8 = v31;
    if (!v31) {
      goto LABEL_19;
    }
    unint64_t v9 = 0;
    uint64_t v10 = v33;
    uint64_t v11 = *(void *)(a1 + 248);
    while (1)
    {
      uint64_t v12 = v10[v9];
      if (*(void *)(v12 + 32) == v11)
      {
        if (!v11)
        {
LABEL_18:
          if (v9 >= v8)
          {
LABEL_19:
            re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v36, a1 + 232);
            unint64_t v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v30, &v36);
            if ((void)v36) {

            }
            unint64_t v8 = v31;
            unint64_t v9 = v31 - 1;
          }
          if (v8 > v9)
          {
            uint64_t v16 = v33;
            memset(v35, 0, 32);
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v35[24], v16[v9]);
            re::Optional<re::BlendShapeWeights>::Optional((uint64_t)&v36, (uint64_t)v35);
            re::Optional<re::BlendShapeWeights>::operator=((uint64_t *)(a2 + 128), (unsigned __int8 *)&v36);
            if ((_BYTE)v36) {
              re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)((char *)&v36 + 8));
            }
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v35);
            unint64_t v5 = (_anonymous_namespace_ *)re::FixedArray<float>::operator=((uint64_t *)(a2 + 136), a1 + 128);
            break;
          }
          uint64_t v34 = 0;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v36 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v35 = 136315906;
          *(void *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 789;
          *(_WORD *)&v35[18] = 2048;
          *(void *)&v35[20] = v9;
          *(_WORD *)&v35[28] = 2048;
          *(void *)&v35[30] = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          uint64_t v34 = 0;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v36 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v35 = 136315906;
          *(void *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 789;
          *(_WORD *)&v35[18] = 2048;
          *(void *)&v35[20] = v9;
          *(_WORD *)&v35[28] = 2048;
          *(void *)&v35[30] = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        unint64_t v13 = *(void **)(v12 + 40);
        unint64_t v14 = *(void **)(a1 + 264);
        uint64_t v15 = 16 * v11;
        while (1)
        {
          unint64_t v5 = (_anonymous_namespace_ *)re::StringID::operator==(v13, v14);
          if (!v5) {
            break;
          }
          v13 += 2;
          v14 += 2;
          v15 -= 16;
          if (!v15) {
            goto LABEL_18;
          }
        }
      }
      if (++v9 == v8) {
        goto LABEL_19;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 152)) {
    goto LABEL_45;
  }
  unint64_t v8 = v31;
  if (!v31) {
    goto LABEL_38;
  }
  unint64_t v9 = 0;
  uint64_t v17 = v33;
  uint64_t v18 = *(void *)(a1 + 288);
  while (1)
  {
    uint64_t v19 = v17[v9];
    if (*(void *)(v19 + 32) == v18) {
      break;
    }
LABEL_35:
    if (++v9 == v8) {
      goto LABEL_38;
    }
  }
  if (v18)
  {
    uint64_t v20 = *(void **)(v19 + 40);
    long long v21 = *(void **)(a1 + 304);
    uint64_t v22 = 16 * v18;
    do
    {
      unint64_t v5 = (_anonymous_namespace_ *)re::StringID::operator==(v20, v21);
      if (!v5) {
        goto LABEL_35;
      }
      v20 += 2;
      v21 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  if (v9 >= v8)
  {
LABEL_38:
    re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v36, a1 + 272);
    unint64_t v5 = re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add((_anonymous_namespace_ *)v30, &v36);
    if ((void)v36) {

    }
    unint64_t v8 = v31;
    unint64_t v9 = v31 - 1;
  }
  if (v8 <= v9) {
    goto LABEL_58;
  }
  long long v23 = v33;
  memset(v35, 0, 32);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v35[24], v23[v9]);
  re::Optional<re::BlendShapeWeights>::Optional((uint64_t)&v36, (uint64_t)v35);
  re::Optional<re::BlendShapeWeights>::operator=((uint64_t *)(a2 + 168), (unsigned __int8 *)&v36);
  if ((_BYTE)v36) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)((char *)&v36 + 8));
  }
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v35);
  unint64_t v5 = (_anonymous_namespace_ *)re::FixedArray<float>::operator=((uint64_t *)(a2 + 176), a1 + 160);
LABEL_45:
  uint64_t v24 = v30[0];
  if (v30[0])
  {
    char v25 = v33;
    if (v33)
    {
      if (v31)
      {
        uint64_t v26 = 8 * v31;
        uint64_t v27 = v33;
        do
        {
          if (*v27)
          {

            *uint64_t v27 = 0;
          }
          ++v27;
          v26 -= 8;
        }
        while (v26);
      }
      unint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v24 + 40))(v24, v25);
    }
  }
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 184);
  if (v28)
  {
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a2 + 208) = result;
  return result;
}

double re::Allocator::create<re::BlendShapeWeightsSampledAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 112, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 59);
  *(_WORD *)(v2 + 72) = 256;
  *(_DWORD *)(v2 + 76) = 1023969417;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D33B8;
  return result;
}

float anonymous namespace'::convertSampledAnimation<re::BlendShapeWeightsSampledAnimationAssetData,re::BlendShapeWeightsSampledAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v11, a1 + 128);
  unint64_t v5 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 104))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      unint64_t v9 = *(void *)(a2 + 96);
      if (v9 <= v8) {
        break;
      }
      re::BlendShapeWeights::init((uint64_t *)(*(void *)(a2 + 104) + v6), &v11);
      unint64_t v9 = *(void *)(a1 + 104);
      if (v9 <= v8) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(a2 + 96);
      if (v9 <= v8) {
        goto LABEL_12;
      }
      re::FixedArray<float>::operator=((uint64_t *)(*(void *)(a2 + 104) + v6), *(void *)(a1 + 120) + v7);
      ++v8;
      v7 += 24;
      v6 += 32;
      if (v8 >= *(void *)(a1 + 104)) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    unint64_t v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 468;
    __int16 v17 = 2048;
    unint64_t v18 = v8;
    __int16 v19 = 2048;
    unint64_t v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    uint64_t v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    unint64_t v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 797;
    __int16 v17 = 2048;
    unint64_t v18 = v8;
    __int16 v19 = 2048;
    unint64_t v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    uint64_t v12 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    unint64_t v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 468;
    __int16 v17 = 2048;
    unint64_t v18 = v8;
    __int16 v19 = 2048;
    unint64_t v20 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v11) {

  }
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  *(void *)(a2 + 76) = *(void *)(a1 + 76);
  float result = *(float *)(a1 + 84);
  *(float *)(a2 + 84) = result;
  return result;
}

uint64_t re::Allocator::create<re::BlendShapeWeightsAnimationClip>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 168, 8);
  uint64_t result = re::Timeline::Timeline(v1, 60);
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D3450;
  return result;
}

double re::Allocator::create<re::BlendShapeWeightsKeyframeAnimation>(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 128, 8);
  uint64_t v2 = re::Timeline::Timeline(v1, 61);
  *(_WORD *)(v2 + 72) = 256;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(void *)uint64_t v2 = &unk_26E6D3580;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::convertKeyframeAnimation<re::BlendShapeWeightsKeyframeAnimationAssetData,re::BlendShapeWeightsKeyframeAnimation>(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  re::StringID::operator=((unint64_t *)(a2 + 24), (uint64_t *)(a1 + 24));
  re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (re::DynamicString *)(a1 + 40));
  uint64_t v4 = re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>((re *)&v12, a1 + 160);
  unint64_t v5 = *(void *)(a1 + 136);
  if (*(void *)(a1 + 136))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      unint64_t v9 = *(void *)(a2 + 112);
      if (v9 <= v8) {
        break;
      }
      re::BlendShapeWeights::init((uint64_t *)(*(void *)(a2 + 120) + v6), &v12);
      unint64_t v9 = *(void *)(a1 + 136);
      if (v9 <= v8) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(a2 + 112);
      if (v9 <= v8) {
        goto LABEL_12;
      }
      re::FixedArray<float>::operator=((uint64_t *)(*(void *)(a2 + 120) + v6), *(void *)(a1 + 152) + v7);
      ++v8;
      v7 += 24;
      v6 += 32;
      if (v8 >= *(void *)(a1 + 136)) {
        goto LABEL_7;
      }
    }
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    __int16 v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 468;
    __int16 v18 = 2048;
    unint64_t v19 = v8;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    __int16 v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v8;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    __int16 v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 468;
    __int16 v18 = 2048;
    unint64_t v19 = v8;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  if (v12) {

  }
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 96);
  *(void *)&long long v22 = *(void *)(a1 + 112);
  *((void *)&v22 + 1) = v10;
  return re::FixedArray<int>::operator=((_anonymous_namespace_ *)(a2 + 80), (uint64_t)&v22);
}

uint64_t re::internal::registerAndResolveTimelineDependencies(re::internal *this, const re::TimelineAssetData *a2, re::Timeline *a3)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  int v3 = *((_DWORD *)this + 2) - 1;
  uint64_t result = 0;
  switch(v3)
  {
    case 0:
      uint64_t v10 = *((void *)this + 10);
      if (v10)
      {
        unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
        if (v11 == 3) {
          return 2;
        }
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v88, (re::internal *)((char *)this + 72));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v88);
      uint64_t v9 = *((void *)a2 + 9);
      return v9 == 0;
    case 1:
      unint64_t v12 = *((void *)a2 + 10);
      if (v12)
      {
        unint64_t v13 = 0;
        uint64_t v14 = *((void *)a2 + 11);
        char v15 = 1;
        for (unint64_t i = 8; ; i += 24)
        {
          if (!*(void *)(v14 + 8 * v13))
          {
            unint64_t v17 = *((void *)this + 11);
            if (v17 <= v13)
            {
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              unint64_t v74 = v17;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 797;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = v74;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_162:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              unint64_t v75 = v17;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 797;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = v75;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_163:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              unint64_t v76 = v21;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = v76;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_164:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              unint64_t v77 = v12;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = v77;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_165:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_166:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_167:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_168:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_169:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_170:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_171:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_172:
              uint64_t v80 = 0;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              *(_OWORD *)unint64_t v88 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v81 = 136315906;
              *(void *)&v81[4] = "operator[]";
              __int16 v82 = 1024;
              int v83 = 468;
              __int16 v84 = 2048;
              unint64_t v85 = v13;
              __int16 v86 = 2048;
              unint64_t v87 = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            uint64_t v18 = *(void *)(*((void *)this + 13) + i);
            if (v18)
            {
              unsigned int v19 = atomic_load((unsigned int *)(v18 + 704));
              if (v19 == 3) {
                return 2;
              }
              unint64_t v17 = *((void *)this + 11);
            }
            if (v17 <= v13) {
              goto LABEL_162;
            }
            re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 13) + i - 8));
            unint64_t v21 = *((void *)a2 + 10);
            if (v21 <= v13) {
              goto LABEL_163;
            }
            *(void *)(*((void *)a2 + 11) + 8 * v13) = Timeline;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
            unint64_t v12 = *((void *)a2 + 10);
            if (v12 <= v13) {
              goto LABEL_164;
            }
            uint64_t v14 = *((void *)a2 + 11);
            v15 &= *(void *)(v14 + 8 * v13) != 0;
          }
          if (++v13 >= v12) {
            return (v15 & 1) == 0;
          }
        }
      }
      char v15 = 1;
      return (v15 & 1) == 0;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 59:
      uint64_t v7 = *((void *)this + 11);
      if (v7)
      {
        unsigned int v8 = atomic_load((unsigned int *)(v7 + 704));
        if (v8 == 3) {
          return 2;
        }
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v88, (re::internal *)((char *)this + 80));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v88);
      uint64_t v9 = *((void *)a2 + 10);
      return v9 == 0;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 36:
    case 37:
    case 47:
    case 49:
    case 58:
    case 60:
      return result;
    case 17:
      uint64_t v22 = *((void *)this + 25);
      if (!v22) {
        goto LABEL_62;
      }
      unsigned int v23 = atomic_load((unsigned int *)(v22 + 704));
      if (v23 == 3) {
        return 2;
      }
      long long v24 = (re::internal *)((char *)this + 192);
      uint64_t v25 = *((void *)this + 25);
      if (!v25) {
        goto LABEL_157;
      }
      unsigned int v26 = atomic_load((unsigned int *)(v25 + 704));
      if (v26 != 2) {
        goto LABEL_157;
      }
      uint64_t v27 = *((void *)this + 25);
      if (!v27) {
        goto LABEL_62;
      }
      uint64_t v28 = *(uint64_t **)(v27 + 264);
      if (v28 != re::SkeletonAsset::assetType(0)) {
        return 0;
      }
      unint64_t v29 = (const re::Skeleton *)(re::AssetHandle::asset<re::SkeletonAsset>(v24) + 88);
      v88[0] = 0;
      if (*((unsigned char *)a2 + 88))
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v88, *((void *)a2 + 22));
        re::SkeletalPoseJointDefinition::setSkeleton(v88[0], v29);
      }
      *(void *)long long v81 = 0;
      if (*((unsigned char *)a2 + 184))
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v81, *((void *)a2 + 34));
        if (*(re::SkeletalPoseJointDefinition **)v81 != v88[0]) {
          re::SkeletalPoseJointDefinition::setSkeleton(*(re::SkeletalPoseJointDefinition **)v81, v29);
        }
      }
      int v78 = 0;
      if (*((unsigned char *)a2 + 280))
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v78, *((void *)a2 + 46));
        unint64_t v30 = v78;
        if (v78 != v88[0] && v78 != *(re::SkeletalPoseJointDefinition **)v81)
        {
          re::SkeletalPoseJointDefinition::setSkeleton(v78, v29);
          unint64_t v30 = v78;
        }
        if (v30) {
      }
        }
      if (*(void *)v81) {

      }
      if (!v88[0]) {
        return 0;
      }
      unint64_t v31 = (char *)v88[0] + 8;
      goto LABEL_61;
    case 25:
      uint64_t v32 = *((void *)this + 21);
      if (!v32) {
        goto LABEL_62;
      }
      unsigned int v33 = atomic_load((unsigned int *)(v32 + 704));
      if (v33 == 3) {
        return 2;
      }
      long long v24 = (re::internal *)((char *)this + 160);
      uint64_t v34 = *((void *)this + 21);
      if (!v34) {
        goto LABEL_157;
      }
      unsigned int v35 = atomic_load((unsigned int *)(v34 + 704));
      if (v35 != 2) {
        goto LABEL_157;
      }
      uint64_t v36 = *((void *)this + 21);
      if (!v36) {
        goto LABEL_62;
      }
      long long v37 = *(uint64_t **)(v36 + 264);
      if (v37 != re::SkeletonAsset::assetType(0) || !*((void *)a2 + 14)) {
        return 0;
      }
      uint64_t v38 = *((void *)a2 + 15);
      goto LABEL_59;
    case 33:
      uint64_t v39 = *((void *)this + 17);
      if (!v39) {
        goto LABEL_62;
      }
      unsigned int v40 = atomic_load((unsigned int *)(v39 + 704));
      if (v40 == 3) {
        return 2;
      }
      long long v24 = (re::internal *)((char *)this + 128);
      uint64_t v41 = *((void *)this + 17);
      if (v41 && (unsigned int v42 = atomic_load((unsigned int *)(v41 + 704)), v42 == 2))
      {
        uint64_t v43 = *((void *)this + 17);
        if (v43)
        {
          char v44 = *(uint64_t **)(v43 + 264);
          if (v44 == re::SkeletonAsset::assetType(0) && *((void *)a2 + 12))
          {
            uint64_t v38 = *((void *)a2 + 13);
LABEL_59:
            uint64_t v45 = *(void *)(v38 + 80);
            if (v45)
            {
              id v46 = (id)(v45 + 8);
              uint64_t v47 = re::AssetHandle::asset<re::SkeletonAsset>(v24);
              re::SkeletalPoseJointDefinition::setSkeleton((re::SkeletalPoseJointDefinition *)v45, (const re::Skeleton *)(v47 + 88));
              unint64_t v31 = (char *)(v45 + 8);
LABEL_61:
            }
            else
            {
              uint64_t v73 = re::AssetHandle::asset<re::SkeletonAsset>(v24);
              re::SkeletalPoseJointDefinition::setSkeleton(0, (const re::Skeleton *)(v73 + 88));
            }
          }
        }
        else
        {
LABEL_62:
          re::SkeletonAsset::assetType(0);
        }
        return 0;
      }
      else
      {
LABEL_157:
        re::AssetHandle::loadAsync(v24);
        return 1;
      }
    case 38:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v48 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v48));
        if (!v79) {
          break;
        }
        unsigned int v50 = atomic_load((unsigned int *)(v79 + 704));
        if (v50 == 3) {
          break;
        }
        uint64_t v51 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (!v51)
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
          goto LABEL_73;
        }
        re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v51 + 16));
        unint64_t i = *((void *)a2 + 39);
        if (i <= v13) {
          goto LABEL_165;
        }
        if (*(void *)(*((void *)a2 + 40) + 8 * v13))
        {
LABEL_73:
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
          ++v13;
          v48 += 24;
          if (v13 >= *((void *)this + 33)) {
            return v49 & 1;
          }
          continue;
        }
        break;
      }
LABEL_152:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
      return 2;
    case 39:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v52 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v52));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v53 = atomic_load((unsigned int *)(v79 + 704));
        if (v53 == 3) {
          goto LABEL_152;
        }
        uint64_t v54 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v54)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v54 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_166;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v52 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
        continue;
      }
    case 40:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v55 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v55));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v56 = atomic_load((unsigned int *)(v79 + 704));
        if (v56 == 3) {
          goto LABEL_152;
        }
        uint64_t v57 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v57)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v57 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_167;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v55 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
        continue;
      }
    case 41:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v58 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v58));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v59 = atomic_load((unsigned int *)(v79 + 704));
        if (v59 == 3) {
          goto LABEL_152;
        }
        uint64_t v60 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v60)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v60 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_168;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v58 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
        continue;
      }
    case 42:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v61 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v61));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v62 = atomic_load((unsigned int *)(v79 + 704));
        if (v62 == 3) {
          goto LABEL_152;
        }
        uint64_t v63 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v63)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v63 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_169;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v61 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
        continue;
      }
    case 43:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v64 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v64));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v65 = atomic_load((unsigned int *)(v79 + 704));
        if (v65 == 3) {
          goto LABEL_152;
        }
        uint64_t v66 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v66)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v66 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_170;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v64 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
        continue;
      }
    case 44:
      if (!*((void *)this + 33)) {
        goto LABEL_154;
      }
      uint64_t v67 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (1)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v67));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v68 = atomic_load((unsigned int *)(v79 + 704));
        if (v68 == 3) {
          goto LABEL_152;
        }
        uint64_t v69 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v69)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v69 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_171;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v67 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
      }
    case 45:
      if (!*((void *)this + 33))
      {
LABEL_154:
        char v49 = 0;
        return v49 & 1;
      }
      uint64_t v70 = 0;
      unint64_t v13 = 0;
      char v49 = 0;
      while (2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v78, (const re::AssetHandle *)(*((void *)this + 35) + v70));
        if (!v79) {
          goto LABEL_152;
        }
        unsigned int v71 = atomic_load((unsigned int *)(v79 + 704));
        if (v71 == 3) {
          goto LABEL_152;
        }
        uint64_t v72 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v78);
        if (v72)
        {
          re::AnimationBlendTree<float>::addClip((uint64_t)a2, v13, *(_anonymous_namespace_ **)(v72 + 16));
          unint64_t i = *((void *)a2 + 39);
          if (i <= v13) {
            goto LABEL_172;
          }
          if (!*(void *)(*((void *)a2 + 40) + 8 * v13)) {
            goto LABEL_152;
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)&v78);
          char v49 = 1;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v78);
        ++v13;
        v70 += 24;
        if (v13 >= *((void *)this + 33)) {
          return v49 & 1;
        }
        continue;
      }
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) Unexpected timeline type.", "!\"Unreachable code\"", "registerAndResolveTimelineDependencies", 2246);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2334409CCLL);
  }
}

uint64_t re::internal::destroy(uint64_t this, re::Timeline *a2, Allocator *a3)
{
  if (this)
  {
    uint64_t v4 = (void (***)(void, re::Timeline *, Allocator *))this;
    int v5 = *(_DWORD *)(this + 8);
    switch(v5)
    {
      case 11:
        uint64_t v6 = *(void (****)(void, re::Timeline *, Allocator *))(this + 112);
        if (v6) {
          goto LABEL_10;
        }
        break;
      case 12:
      case 13:
        uint64_t v6 = *(void (****)(void, re::Timeline *, Allocator *))(this + 136);
        if (v6) {
          goto LABEL_10;
        }
        break;
      case 14:
      case 15:
      case 16:
        uint64_t v6 = *(void (****)(void, re::Timeline *, Allocator *))(this + 192);
        if (v6) {
          goto LABEL_10;
        }
        break;
      case 17:
        uint64_t v6 = *(void (****)(void, re::Timeline *, Allocator *))(this + 288);
        if (v6) {
          goto LABEL_10;
        }
        break;
      case 18:
        uint64_t v6 = *(void (****)(void, re::Timeline *, Allocator *))(this + 376);
        if (v6) {
          goto LABEL_10;
        }
        break;
      default:
        if (v5 == 50)
        {
          uint64_t v6 = *(void (****)(void, re::Timeline *, Allocator *))(this + 208);
          if (v6)
          {
LABEL_10:
            (**v6)(v6, a2, a3);
            (*(void (**)(re::Timeline *, void (***)(void, re::Timeline *, Allocator *)))(*(void *)a2 + 40))(a2, v6);
          }
        }
        break;
    }
    (**v4)(v4, a2, a3);
    uint64_t v7 = *(uint64_t (**)(re::Timeline *, void (***)(void, re::Timeline *, Allocator *)))(*(void *)a2 + 40);
    return v7(a2, v4);
  }
  return this;
}

void re::TimelineClipAssetData::~TimelineClipAssetData(re::TimelineClipAssetData *this)
{
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::TimelineClipAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::TimelineClipAssetData *)((char *)this + 24));
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::TimelineClipAssetData *)((char *)this + 72));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::TimelineClipAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::TimelineClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::TimelineClipAssetData::clone(re::TimelineClipAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 176, 8);
  *(void *)uint64_t v4 = &unk_26E6D3730;
  char v5 = *((unsigned char *)this + 16);
  *(void *)(v4 + 8) = *((void *)this + 1);
  *(unsigned char *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::TimelineClipAssetData *)((char *)this + 40));
  *(void *)uint64_t v4 = &unk_26E6CEBD0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 72), (re::TimelineClipAssetData *)((char *)this + 72));
  int v6 = *((unsigned __int8 *)this + 96);
  *(unsigned char *)(v4 + 96) = v6;
  if (v6) {
    *(void *)(v4 + 104) = *((void *)this + 13);
  }
  int v7 = *((unsigned __int8 *)this + 112);
  *(unsigned char *)(v4 + 112) = v7;
  if (v7) {
    *(void *)(v4 + 120) = *((void *)this + 15);
  }
  long long v8 = *((_OWORD *)this + 8);
  *(void *)(v4 + 144) = *((void *)this + 18);
  *(_OWORD *)(v4 + 128) = v8;
  int v9 = *((unsigned __int8 *)this + 152);
  *(unsigned char *)(v4 + 152) = v9;
  if (v9) {
    *(void *)(v4 + 160) = *((void *)this + 20);
  }
  int v10 = *((_DWORD *)this + 42);
  *(unsigned char *)(v4 + 172) = *((unsigned char *)this + 172);
  *(_DWORD *)(v4 + 168) = v10;
  return v4;
}

uint64_t re::TimelineClipAssetData::typeInfo(re::TimelineClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_TimelineClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77B80, 0);
}

void re::TimelineGroupAssetData::~TimelineGroupAssetData(re::TimelineGroupAssetData *this)
{
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::TimelineGroupAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::TimelineGroupAssetData *)((char *)this + 24));
}

{
  uint64_t vars8;

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::TimelineGroupAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::TimelineGroupAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::TimelineGroupAssetData::clone(re::TimelineGroupAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 112, 8);
  *(void *)uint64_t v4 = &unk_26E6D3730;
  char v5 = *((unsigned char *)this + 16);
  *(void *)(v4 + 8) = *((void *)this + 1);
  *(unsigned char *)(v4 + 16) = v5;
  re::StringID::StringID((re::StringID *)(v4 + 24), (const StringID *)((char *)this + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v4 + 40), (re::TimelineGroupAssetData *)((char *)this + 40));
  *(void *)uint64_t v4 = &unk_26E6CEC28;
  re::DynamicArray<re::AssetHandle>::DynamicArray(v4 + 72, (uint64_t *)this + 9);
  return v4;
}

uint64_t re::TimelineGroupAssetData::typeInfo(re::TimelineGroupAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineGroupAssetData", (uint64_t (*)(re::internal *))re::allocInfo_TimelineGroupAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineGroupAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77BD0, 0);
}

re::AssetHandle *anonymous namespace'::findAssetHandle<re::Timeline>(re::AssetHandle *result, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    LODWORD(v3) = 0x7FFFFFFF;
    if (*(void *)a3)
    {
      unint64_t v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      uint64_t v5 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(a3 + 24)));
      if (v5 != 0x7FFFFFFF)
      {
        uint64_t v6 = *(void *)(a3 + 16);
        if (*(void *)(v6 + 48 * v5 + 16) == a2)
        {
          LODWORD(v3) = v5;
        }
        else
        {
          uint64_t v3 = v5;
          while (1)
          {
            LODWORD(v3) = *(_DWORD *)(v6 + 48 * v3 + 8) & 0x7FFFFFFF;
            if (v3 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v6 + 48 * v3 + 16) == a2) {
              return re::AssetHandle::AssetHandle(result, (const re::AssetHandle *)(*(void *)(a3 + 16) + 48 * v3 + 24));
            }
          }
          LODWORD(v3) = 0x7FFFFFFF;
        }
      }
    }
    return re::AssetHandle::AssetHandle(result, (const re::AssetHandle *)(*(void *)(a3 + 16) + 48 * v3 + 24));
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::FixedArray<unsigned char>>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(result + 32);
    uint64_t v4 = 24 * v2;
    do
    {
      uint64_t result = re::FixedArray<CoreIKTransform>::deinit(v3);
      v3 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t anonymous namespace'::loadTimeline(re::TimelineAsset *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (v1)
  {
    uint64_t v3 = *(uint64_t **)(v1 + 264);
    if (v3 == re::TimelineAsset::assetType(a1))
    {
      uint64_t v4 = re::AssetHandle::loadedAsset<re::TimelineAsset>(a1);
      if (v4) {
        return *(void *)(v4 + 16);
      }
      re::AssetHandle::loadAsync(a1);
    }
  }
  else
  {
    re::TimelineAsset::assetType(a1);
  }
  return 0;
}

uint64_t re::AssetHandle::loadedAsset<re::TimelineAsset>(re::TimelineAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::TimelineAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::AssetHandle::asset<re::SkeletonAsset>(re::SkeletonAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::SkeletonAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        int v7 = (char *)v6[18];
      }
      else {
        int v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      int v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::SkeletalPoseJointDefinition::setSkeleton(re::SkeletalPoseJointDefinition *this, const re::Skeleton *a2)
{
  re::StringID::operator=((unint64_t *)this + 3, (uint64_t *)a2);
  re::FixedArray<re::StringID>::operator=((unint64_t *)this + 5, (uint64_t)a2 + 16);
  re::FixedArray<unsigned int>::operator=((uint64_t *)this + 8, (uint64_t)a2 + 40);
  re::FixedArray<re::GenericSRT<float>>::operator=((void *)this + 11, (uint64_t)a2 + 64);
  re::FixedArray<re::Matrix4x4<float>>::operator=((uint64_t *)this + 14, (uint64_t)a2 + 88);
  return re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 136, (uint64_t)a2 + 112);
}

void re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  int v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    int v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x10uLL, 8uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<double>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<double>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<double>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<double>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<double>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 8) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<double>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(void *)(result + 8) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t re::TimelineAssetData::TimelineAssetData(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26E6D3730;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = "";
  uint64_t v3 = (re::DynamicString *)(a1 + 40);
  return a1;
}

void re::FloatAnimationClipAssetData::~FloatAnimationClipAssetData(re::FloatAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CED70;
  uint64_t v2 = (re::FloatAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::FloatAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CED70;
  uint64_t v2 = (re::FloatAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::FloatAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::FloatAnimationClipAssetData::clone(re::FloatAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<float>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CED00;
  return result;
}

uint64_t re::FloatAnimationClipAssetData::typeInfo(re::FloatAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77BE8, 0);
}

re::AssetHandle *re::AnimationClipAssetData<float>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<float>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<float>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<float>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CED70;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<float>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6D36F0;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::DoubleAnimationClipAssetData::~DoubleAnimationClipAssetData(re::DoubleAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CEE38;
  uint64_t v2 = (re::DoubleAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::DoubleAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CEE38;
  uint64_t v2 = (re::DoubleAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::DoubleAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::DoubleAnimationClipAssetData::clone(re::DoubleAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<double>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CEDB0;
  return result;
}

uint64_t re::DoubleAnimationClipAssetData::typeInfo(re::DoubleAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C00, 0);
}

re::AssetHandle *re::AnimationClipAssetData<double>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<double>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<double>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<double>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CEE38;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<double>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CEE78;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::Vector2FAnimationClipAssetData::~Vector2FAnimationClipAssetData(re::Vector2FAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CEF40;
  uint64_t v2 = (re::Vector2FAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::Vector2FAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CEF40;
  uint64_t v2 = (re::Vector2FAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::Vector2FAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector2FAnimationClipAssetData::clone(re::Vector2FAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CEEB8;
  return result;
}

uint64_t re::Vector2FAnimationClipAssetData::typeInfo(re::Vector2FAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C18, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Vector2<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::Vector2<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Vector2<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CEF40;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::Vector2<float>>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CEF80;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::Vector3FAnimationClipAssetData::~Vector3FAnimationClipAssetData(re::Vector3FAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CF048;
  uint64_t v2 = (re::Vector3FAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::Vector3FAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CF048;
  uint64_t v2 = (re::Vector3FAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::Vector3FAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector3FAnimationClipAssetData::clone(re::Vector3FAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CEFC0;
  return result;
}

uint64_t re::Vector3FAnimationClipAssetData::typeInfo(re::Vector3FAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C30, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Vector3<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::Vector3<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Vector3<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CF048;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::Vector3<float>>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CF088;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::Vector4FAnimationClipAssetData::~Vector4FAnimationClipAssetData(re::Vector4FAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CF150;
  uint64_t v2 = (re::Vector4FAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::Vector4FAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CF150;
  uint64_t v2 = (re::Vector4FAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::Vector4FAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector4FAnimationClipAssetData::clone(re::Vector4FAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF0C8;
  return result;
}

uint64_t re::Vector4FAnimationClipAssetData::typeInfo(re::Vector4FAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C48, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Vector4<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::Vector4<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Vector4<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CF150;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::Vector4<float>>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CF190;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::QuaternionFAnimationClipAssetData::~QuaternionFAnimationClipAssetData(re::QuaternionFAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CF258;
  uint64_t v2 = (re::QuaternionFAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::QuaternionFAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CF258;
  uint64_t v2 = (re::QuaternionFAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::QuaternionFAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::QuaternionFAnimationClipAssetData::clone(re::QuaternionFAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF1D0;
  return result;
}

uint64_t re::QuaternionFAnimationClipAssetData::typeInfo(re::QuaternionFAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C60, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::Quaternion<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::Quaternion<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Quaternion<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CF258;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::Quaternion<float>>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CF298;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::SRTAnimationClipAssetData::~SRTAnimationClipAssetData(re::SRTAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CF360;
  uint64_t v2 = (re::SRTAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::SRTAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CF360;
  uint64_t v2 = (re::SRTAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::SRTAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SRTAnimationClipAssetData::clone(re::SRTAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF2D8;
  return result;
}

uint64_t re::SRTAnimationClipAssetData::typeInfo(re::SRTAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C78, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::GenericSRT<float>>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::GenericSRT<float>>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CF360;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CF3A0;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::SkeletalPoseAnimationClipAssetData::~SkeletalPoseAnimationClipAssetData(re::SkeletalPoseAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CF468;
  uint64_t v2 = (re::SkeletalPoseAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CF468;
  uint64_t v2 = (re::SkeletalPoseAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SkeletalPoseAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SkeletalPoseAnimationClipAssetData::clone(re::SkeletalPoseAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF3E0;
  return result;
}

uint64_t re::SkeletalPoseAnimationClipAssetData::typeInfo(re::SkeletalPoseAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77C90, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::SkeletalPoseAssetData>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::SkeletalPoseAssetData>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::SkeletalPoseAssetData>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CF468;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::SkeletalPoseAssetData>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CF4A8;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::BlendShapeWeightsAnimationClipAssetData::~BlendShapeWeightsAnimationClipAssetData(re::BlendShapeWeightsAnimationClipAssetData *this)
{
  *(void *)this = &unk_26E6CF570;
  uint64_t v2 = (re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CF570;
  uint64_t v2 = (re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 40);
  re::AssetHandle::~AssetHandle((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 80));
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::BlendShapeWeightsAnimationClipAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::BlendShapeWeightsAnimationClipAssetData::clone(re::BlendShapeWeightsAnimationClipAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 184, 8);
  uint64_t result = (void *)re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF4E8;
  return result;
}

uint64_t re::BlendShapeWeightsAnimationClipAssetData::typeInfo(re::BlendShapeWeightsAnimationClipAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsAnimationClipAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsAnimationClipAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsAnimationClipAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77CA8, 0);
}

re::AssetHandle *re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 80));
}

void *re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 80;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::BlendShapeWeightsAssetData>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6CF570;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 10), (const re::AssetHandle *)(a2 + 80));
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(unsigned char *)(a1 + 104) = v5;
  if (v5) {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  int v6 = *(unsigned __int8 *)(a2 + 120);
  *(unsigned char *)(a1 + 120) = v6;
  if (v6) {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 160);
  *(unsigned char *)(a1 + 160) = v8;
  if (v8) {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
  }
  int v9 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v9;
  return a1;
}

uint64_t re::AnimationAssetData<re::BlendShapeWeightsAssetData>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6CF5B0;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  int v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    int v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 8uLL, 4uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<float>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<float>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<float>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<float>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<float>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<float>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 4;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<float>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  if (a2)
  {
    int v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::FloatAnimationAssetData::~FloatAnimationAssetData(re::FloatAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<float>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::FloatAnimationAssetData::clone(re::FloatAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 120, 8);
  uint64_t result = (void *)re::FromToByAnimationAssetData<float>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6D3618;
  return result;
}

uint64_t re::FloatAnimationAssetData::typeInfo(re::FloatAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77CC0, 0);
}

uint64_t re::FromToByAnimationAssetData<float>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6D36B0;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 112));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

re *re::internal::destroyPersistent<re::EasingFunction>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    int v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::FromToByAnimationAssetData<float>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<float>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6D36B0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  re::FromToByAnimationAssetData<float>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<float>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 88)) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      *(unsigned char *)(a1 + 88) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 88)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6) {
        *(unsigned char *)(a1 + 88) = 1;
      }
      *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    if (*(unsigned char *)(a1 + 96)) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      *(unsigned char *)(a1 + 96) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96) && *(unsigned char *)(a2 + 96)) {
        *(unsigned char *)(a1 + 96) = 1;
      }
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    }
  }
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(unsigned char *)(a2 + 104) == 0;
  }
  if (!v10)
  {
    if (!*(unsigned char *)(a1 + 104) || *(unsigned char *)(a2 + 104))
    {
      if (!*(unsigned char *)(a1 + 104) && *(unsigned char *)(a2 + 104)) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    }
    else
    {
      *(unsigned char *)(a1 + 104) = 0;
    }
  }
  uint64_t v11 = *(void *)(a2 + 112);
  if (v11)
  {
  }
  return a1;
}

void re::DoubleAnimationAssetData::~DoubleAnimationAssetData(re::DoubleAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<double>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::DoubleAnimationAssetData::clone(re::DoubleAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 144, 8);
  uint64_t result = (void *)re::FromToByAnimationAssetData<double>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF670;
  return result;
}

uint64_t re::DoubleAnimationAssetData::typeInfo(re::DoubleAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77CD8, 0);
}

uint64_t re::FromToByAnimationAssetData<double>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CF6E0;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 136));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<double>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<double>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CF6E0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 104) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(void *)(v4 + 136) = 0;
  re::FromToByAnimationAssetData<double>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<double>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 88)) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      *(unsigned char *)(a1 + 88) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 88)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6) {
        *(unsigned char *)(a1 + 88) = 1;
      }
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    if (*(unsigned char *)(a1 + 104)) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      *(unsigned char *)(a1 + 104) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 104) && *(unsigned char *)(a2 + 104)) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
    }
  }
  if (*(unsigned char *)(a1 + 120)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(unsigned char *)(a2 + 120) == 0;
  }
  if (!v10)
  {
    if (!*(unsigned char *)(a1 + 120) || *(unsigned char *)(a2 + 120))
    {
      if (!*(unsigned char *)(a1 + 120) && *(unsigned char *)(a2 + 120)) {
        *(unsigned char *)(a1 + 120) = 1;
      }
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
    }
    else
    {
      *(unsigned char *)(a1 + 120) = 0;
    }
  }
  uint64_t v11 = *(void *)(a2 + 136);
  if (v11)
  {
  }
  return a1;
}

void *re::IntrospectionOptional<re::Vector2<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Vector2<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::Vector2<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Vector2<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Vector2<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 8) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Vector2<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(void *)(result + 8) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::Vector2FAnimationAssetData::~Vector2FAnimationAssetData(re::Vector2FAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Vector2<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector2FAnimationAssetData::clone(re::Vector2FAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 144, 8);
  uint64_t result = (void *)re::FromToByAnimationAssetData<re::Vector2<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF7A0;
  return result;
}

uint64_t re::Vector2FAnimationAssetData::typeInfo(re::Vector2FAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77CF0, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Vector2<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CF810;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 136));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector2<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::Vector2<float>>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CF810;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 104) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(void *)(v4 + 136) = 0;
  re::FromToByAnimationAssetData<re::Vector2<float>>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector2<float>>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 88)) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      *(unsigned char *)(a1 + 88) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 88)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6) {
        *(unsigned char *)(a1 + 88) = 1;
      }
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    if (*(unsigned char *)(a1 + 104)) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      *(unsigned char *)(a1 + 104) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 104) && *(unsigned char *)(a2 + 104)) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
    }
  }
  if (*(unsigned char *)(a1 + 120)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(unsigned char *)(a2 + 120) == 0;
  }
  if (!v10)
  {
    if (!*(unsigned char *)(a1 + 120) || *(unsigned char *)(a2 + 120))
    {
      if (!*(unsigned char *)(a1 + 120) && *(unsigned char *)(a2 + 120)) {
        *(unsigned char *)(a1 + 120) = 1;
      }
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
    }
    else
    {
      *(unsigned char *)(a1 + 120) = 0;
    }
  }
  uint64_t v11 = *(void *)(a2 + 136);
  if (v11)
  {
  }
  return a1;
}

void re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  BOOL v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    BOOL v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x20uLL, 0x10uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<re::Vector3<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Vector3<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::Vector3<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Vector3<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Vector3<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Vector3<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 16;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, long long *a2)
{
  if (a2)
  {
    long long v3 = *a2;
    if (*(unsigned char *)result)
    {
      long long v2 = *a2;
    }
    else
    {
      *(unsigned char *)uint64_t result = 1;
      long long v2 = v3;
    }
    *(_OWORD *)(result + 16) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::Vector3FAnimationAssetData::~Vector3FAnimationAssetData(re::Vector3FAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Vector3<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector3FAnimationAssetData::clone(re::Vector3FAnimationAssetData *this, re::Allocator *a2)
{
  long long v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 208, 16);
  uint64_t result = (void *)re::FromToByAnimationAssetData<re::Vector3<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CF8D0;
  return result;
}

uint64_t re::Vector3FAnimationAssetData::typeInfo(re::Vector3FAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D08, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Vector3<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CF940;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 192));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector3<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::Vector3<float>>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CF940;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(void *)(v4 + 192) = 0;
  re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v3 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 96)) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      *(unsigned char *)(a1 + 96) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 96)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6) {
        *(unsigned char *)(a1 + 96) = 1;
      }
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned char *)(a1 + 128)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    if (*(unsigned char *)(a1 + 128)) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 128) && *(unsigned char *)(a2 + 128)) {
        *(unsigned char *)(a1 + 128) = 1;
      }
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    }
  }
  if (*(unsigned char *)(a1 + 160)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(unsigned char *)(a2 + 160) == 0;
  }
  if (!v10)
  {
    if (!*(unsigned char *)(a1 + 160) || *(unsigned char *)(a2 + 160))
    {
      if (!*(unsigned char *)(a1 + 160) && *(unsigned char *)(a2 + 160)) {
        *(unsigned char *)(a1 + 160) = 1;
      }
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    }
    else
    {
      *(unsigned char *)(a1 + 160) = 0;
    }
  }
  uint64_t v11 = *(void *)(a2 + 192);
  if (v11)
  {
  }
  return a1;
}

void *re::IntrospectionOptional<re::Vector4<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Vector4<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::Vector4<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Vector4<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Vector4<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Vector4<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 16;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Vector4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, long long *a2)
{
  if (a2)
  {
    long long v3 = *a2;
    if (*(unsigned char *)result)
    {
      long long v2 = *a2;
    }
    else
    {
      *(unsigned char *)uint64_t result = 1;
      long long v2 = v3;
    }
    *(_OWORD *)(result + 16) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::Vector4FAnimationAssetData::~Vector4FAnimationAssetData(re::Vector4FAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Vector4<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector4FAnimationAssetData::clone(re::Vector4FAnimationAssetData *this, re::Allocator *a2)
{
  long long v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 208, 16);
  uint64_t result = (void *)re::FromToByAnimationAssetData<re::Vector4<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CFA00;
  return result;
}

uint64_t re::Vector4FAnimationAssetData::typeInfo(re::Vector4FAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D20, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Vector4<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CFA70;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 192));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Vector4<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::Vector4<float>>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CFA70;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(void *)(v4 + 192) = 0;
  re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(v4, a2);
  return a1;
}

void *re::IntrospectionOptional<re::Quaternion<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Quaternion<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::Quaternion<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Quaternion<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Quaternion<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_OWORD *)(a2 + 16) = xmmword_23435FBB0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Quaternion<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 16;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, long long *a2)
{
  if (a2)
  {
    long long v3 = *a2;
    if (*(unsigned char *)result)
    {
      long long v2 = *a2;
    }
    else
    {
      *(unsigned char *)uint64_t result = 1;
      long long v2 = v3;
    }
    *(_OWORD *)(result + 16) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void re::QuaternionFAnimationAssetData::~QuaternionFAnimationAssetData(re::QuaternionFAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::Quaternion<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::QuaternionFAnimationAssetData::clone(re::QuaternionFAnimationAssetData *this, re::Allocator *a2)
{
  long long v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 208, 16);
  uint64_t result = (void *)re::FromToByAnimationAssetData<re::Quaternion<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CFB30;
  return result;
}

uint64_t re::QuaternionFAnimationAssetData::typeInfo(re::QuaternionFAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D38, 0);
}

uint64_t re::FromToByAnimationAssetData<re::Quaternion<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CFBA0;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 192));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::Quaternion<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::Quaternion<float>>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CFBA0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(void *)(v4 + 192) = 0;
  re::FromToByAnimationAssetData<re::Vector3<float>>::operator=(v4, a2);
  return a1;
}

void *re::IntrospectionOptional<re::GenericSRT<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::GenericSRT<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::GenericSRT<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::GenericSRT<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::GenericSRT<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 16) = 0x3F8000003F800000;
    *(void *)(a2 + 24) = 1065353216;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0x3F80000000000000;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::GenericSRT<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 16;
  if (!v2) {
    return 0;
  }
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, long long *a2)
{
  if (a2)
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    int v2 = (_OWORD *)(a1 + 16);
    if (*(unsigned char *)a1)
    {
      long long v3 = *a2;
      long long v4 = a2[2];
      *(_OWORD *)(a1 + 32) = a2[1];
      *(_OWORD *)(a1 + 48) = v4;
      *int v2 = v3;
    }
    else
    {
      *(unsigned char *)a1 = 1;
      *int v2 = v6;
      *(_OWORD *)(a1 + 32) = v7;
      *(void *)&long long v3 = v8;
      *(_OWORD *)(a1 + 48) = v8;
    }
  }
  else if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
  }
  return *(double *)&v3;
}

void re::SRTAnimationAssetData::~SRTAnimationAssetData(re::SRTAnimationAssetData *this)
{
  re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::SRTAnimationAssetData::clone(re::SRTAnimationAssetData *this, re::Allocator *a2)
{
  long long v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 304, 16);
  uint64_t result = (void *)re::FromToByAnimationAssetData<re::GenericSRT<float>>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *uint64_t result = &unk_26E6CFC60;
  return result;
}

uint64_t re::SRTAnimationAssetData::typeInfo(re::SRTAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D50, 0);
}

uint64_t re::FromToByAnimationAssetData<re::GenericSRT<float>>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CFCD0;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 288));
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::GenericSRT<float>>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CFCD0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 288) = 0;
  re::FromToByAnimationAssetData<re::GenericSRT<float>>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::GenericSRT<float>>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v3 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a1 + 96)) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      *(unsigned char *)(a1 + 96) = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 96)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6) {
        *(unsigned char *)(a1 + 96) = 1;
      }
      long long v7 = *(_OWORD *)(a2 + 112);
      long long v8 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v8;
      *(_OWORD *)(a1 + 112) = v7;
    }
  }
  int v9 = *(unsigned __int8 *)(a2 + 160);
  if (*(unsigned char *)(a1 + 160)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10)
  {
    if (*(unsigned char *)(a1 + 160)) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      *(unsigned char *)(a1 + 160) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 160) && *(unsigned char *)(a2 + 160)) {
        *(unsigned char *)(a1 + 160) = 1;
      }
      long long v12 = *(_OWORD *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 176) = v12;
    }
  }
  if (*(unsigned char *)(a1 + 224)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *(unsigned char *)(a2 + 224) == 0;
  }
  if (!v14)
  {
    if (!*(unsigned char *)(a1 + 224) || *(unsigned char *)(a2 + 224))
    {
      if (!*(unsigned char *)(a1 + 224) && *(unsigned char *)(a2 + 224)) {
        *(unsigned char *)(a1 + 224) = 1;
      }
      long long v15 = *(_OWORD *)(a2 + 240);
      long long v16 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = v16;
      *(_OWORD *)(a1 + 240) = v15;
    }
    else
    {
      *(unsigned char *)(a1 + 224) = 0;
    }
  }
  uint64_t v17 = *(void *)(a2 + 288);
  if (v17)
  {
  }
  return a1;
}

void *re::IntrospectionOptional<re::SkeletalPoseAssetData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::SkeletalPoseAssetData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::SkeletalPoseAssetData>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::SkeletalPoseAssetData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

unsigned __int8 *re::IntrospectionOptional<re::SkeletalPoseAssetData>::setHasValue(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3)
  {
    LOBYTE(v4) = 1;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    BOOL v5 = 0;
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = re::Optional<re::SkeletalPoseAssetData>::operator=(a2, &v4);
  if ((_BYTE)v4)
  {
    uint64_t result = v5;
    if (v5)
    {
      if (v6) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::IntrospectionOptional<re::SkeletalPoseAssetData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::Optional<re::SkeletalPoseAssetData>::operator=(unsigned __int8 *a1, uint64_t *a2)
{
  int v3 = *a1;
  int v4 = *(unsigned __int8 *)a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      re::FixedArray<CoreIKTransform>::deinit(v6);
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::FixedArray<float>::operator=(v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        *((void *)a1 + 2) = 0;
        *((void *)a1 + 3) = 0;
        *uint64_t v6 = 0;
        uint64_t v9 = a2[2];
        *((void *)a1 + 1) = a2[1];
        *((void *)a1 + 2) = v9;
        a2[1] = 0;
        a2[2] = 0;
        uint64_t v10 = *((void *)a1 + 3);
        *((void *)a1 + 3) = a2[3];
        a2[3] = v10;
      }
    }
  }
  return a1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned __int8 *a1, uint64_t a2)
{
  if (a2)
  {
    LOBYTE(v4) = 1;
    re::FixedArray<re::GenericSRT<float>>::FixedArray(v5, a2);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = re::Optional<re::SkeletalPoseAssetData>::operator=(a1, &v4);
  if ((_BYTE)v4)
  {
    uint64_t result = (unsigned __int8 *)v5[0];
    if (v5[0])
    {
      if (v5[1]) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v5[0] + 40))();
      }
    }
  }
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  BOOL v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<re::StringID>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::StringID>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::StringID>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::StringID>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::StringID>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::StringID>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::StringID>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::StringID>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::StringID>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::StringID>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::StringID>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::StringID>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  re::DynamicArray<re::StringID>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  BOOL v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 16 * *((void *)this + 2) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::StringID>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::StringID>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::StringID>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 16 * a2;
    unint64_t v9 = a2;
    do
    {
      re::StringID::destroyString((re::StringID *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 16;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::StringID>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 16 * v4;
      do
      {
        BOOL v7 = (void *)(*(void *)(a1 + 32) + v6);
        *BOOL v7 = 0;
        v7[1] = "";
        v6 += 16;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::StringID>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::StringID>::clear(a2);
  }
  else
  {
    re::DynamicArray<re::StringID>::deinit(a2);
    *(void *)a2 = a4;
    re::DynamicArray<re::StringID>::setCapacity((void *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::StringID>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(void **)a3, *(void *)(*(void *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      long long v11 = *(char **)(a2 + 32);
      uint64_t v12 = 16 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 16 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::SkeletalPoseAnimationAssetData::~SkeletalPoseAnimationAssetData(re::SkeletalPoseAnimationAssetData *this)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 296);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 256);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 216);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationAssetData *)((char *)this + 192));
  re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData((uint64_t)this);
}

{
  uint64_t vars8;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 296);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 256);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 216);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseAnimationAssetData *)((char *)this + 192));
  re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SkeletalPoseAnimationAssetData::clone(re::SkeletalPoseAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 336, 8);
  unint64_t v5 = (void *)re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6CFE28;
  uint64_t v6 = (uint64_t)(v5 + 27);
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v5 + 24), (re::SkeletalPoseAnimationAssetData *)((char *)this + 192));
  re::DynamicArray<re::StringID>::DynamicArray(v6, (uint64_t *)this + 27);
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 256, (uint64_t *)this + 32);
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 296, (uint64_t *)this + 37);
  return v4;
}

uint64_t re::SkeletalPoseAnimationAssetData::typeInfo(re::SkeletalPoseAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D68, 0);
}

re::AssetHandle *re::SkeletalPoseAnimationAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 192));
}

void *re::SkeletalPoseAnimationAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 192;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CFE98;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 184));
  if (*(unsigned char *)(a1 + 152)) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 160));
  }
  if (*(unsigned char *)(a1 + 120)) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 88)) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 96));
  }
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::SkeletalPoseAssetData>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CFE98;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(unsigned char *)(v4 + 152) = 0;
  *(void *)(v4 + 184) = 0;
  re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::SkeletalPoseAssetData>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned char *)(a1 + 88), (unsigned __int8 *)(a2 + 88));
  re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned char *)(a1 + 120), (unsigned __int8 *)(a2 + 120));
  uint64_t v4 = (_anonymous_namespace_ *)re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned char *)(a1 + 152), (unsigned __int8 *)(a2 + 152));
  uint64_t v5 = *(void *)(a2 + 184);
  if (v5)
  {
  }
  return a1;
}

unsigned char *re::Optional<re::SkeletalPoseAssetData>::operator=(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      re::FixedArray<CoreIKTransform>::deinit(v6);
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::FixedArray<re::GenericSRT<float>>::operator=(v6, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::FixedArray<re::GenericSRT<float>>::FixedArray(v6, (uint64_t)(a2 + 8));
      }
    }
  }
  return a1;
}

void *re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

unsigned __int8 *re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::setHasValue(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3)
  {
    LOBYTE(v4) = 1;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    BOOL v5 = 0;
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = re::Optional<re::SkeletalPoseAssetData>::operator=(a2, &v4);
  if ((_BYTE)v4)
  {
    uint64_t result = v5;
    if (v5)
    {
      if (v6) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::IntrospectionOptional<re::BlendShapeWeightsAssetData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned __int8 *a1, uint64_t a2)
{
  if (a2)
  {
    LOBYTE(v4) = 1;
    re::FixedArray<float>::FixedArray(v5, a2);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = re::Optional<re::SkeletalPoseAssetData>::operator=(a1, &v4);
  if ((_BYTE)v4)
  {
    uint64_t result = (unsigned __int8 *)v5[0];
    if (v5[0])
    {
      if (v5[1]) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v5[0] + 40))();
      }
    }
  }
  return result;
}

void re::BlendShapeWeightsAnimationAssetData::~BlendShapeWeightsAnimationAssetData(re::BlendShapeWeightsAnimationAssetData *this)
{
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 232);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 192);
  re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData((uint64_t)this);
}

{
  uint64_t vars8;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 232);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 192);
  re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::BlendShapeWeightsAnimationAssetData::clone(re::BlendShapeWeightsAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 312, 8);
  BOOL v5 = (void *)re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::FromToByAnimationAssetData(v4, (uint64_t)this);
  *BOOL v5 = &unk_26E6CFF58;
  uint64_t v6 = (uint64_t)(v5 + 29);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)(v5 + 24), (uint64_t *)this + 24);
  re::DynamicArray<re::StringID>::DynamicArray(v6, (uint64_t *)this + 29);
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 272, (uint64_t *)this + 34);
  return v4;
}

uint64_t re::BlendShapeWeightsAnimationAssetData::typeInfo(re::BlendShapeWeightsAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D80, 0);
}

uint64_t re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::~FromToByAnimationAssetData(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CFFC8;
  re::internal::destroyPersistent<re::EasingFunction>((re *)"~FromToByAnimationAssetData", 371, *(void (****)(void))(a1 + 184));
  if (*(unsigned char *)(a1 + 152)) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 160));
  }
  if (*(unsigned char *)(a1 + 120)) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 88)) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 96));
  }
  *(void *)a1 = &unk_26E6D3730;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::FromToByAnimationAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::AnimationAssetData<re::BlendShapeWeightsAssetData>::AnimationAssetData(a1, a2);
  *(void *)uint64_t v4 = &unk_26E6CFFC8;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(unsigned char *)(v4 + 152) = 0;
  *(void *)(v4 + 184) = 0;
  re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::operator=(v4, a2);
  return a1;
}

uint64_t re::FromToByAnimationAssetData<re::BlendShapeWeightsAssetData>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  re::Optional<re::BlendShapeWeightsAssetData>::operator=((unsigned char *)(a1 + 88), (unsigned __int8 *)(a2 + 88));
  re::Optional<re::BlendShapeWeightsAssetData>::operator=((unsigned char *)(a1 + 120), (unsigned __int8 *)(a2 + 120));
  uint64_t v4 = (_anonymous_namespace_ *)re::Optional<re::BlendShapeWeightsAssetData>::operator=((unsigned char *)(a1 + 152), (unsigned __int8 *)(a2 + 152));
  uint64_t v5 = *(void *)(a2 + 184);
  if (v5)
  {
  }
  return a1;
}

unsigned char *re::Optional<re::BlendShapeWeightsAssetData>::operator=(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      re::FixedArray<CoreIKTransform>::deinit(v6);
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::FixedArray<float>::operator=(v6, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::FixedArray<float>::FixedArray(v6, (uint64_t)(a2 + 8));
      }
    }
  }
  return a1;
}

void re::FloatKeyframeAnimationAssetData::~FloatKeyframeAnimationAssetData(re::FloatKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0078;
  int v2 = (re::FloatKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0078;
  int v2 = (re::FloatKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::FloatKeyframeAnimationAssetData::clone(re::FloatKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  int v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<float>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0078;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<float>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D0008;
  return v4;
}

uint64_t re::FloatKeyframeAnimationAssetData::typeInfo(re::FloatKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77D98, 0);
}

void re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  BOOL v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    unint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<double>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<double>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<double>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<double>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<double>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<double>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<double>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<double>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  re::DynamicArray<double>::add(this, (double *)&v10);
  BOOL v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 8 * *((void *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<double>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<double>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 8 * a3;
}

void re::DynamicArray<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<float *>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (v4 < a2)
    {
      uint64_t v5 = (void *)(*(void *)(a1 + 32) + 8 * v4);
      uint64_t v6 = 8 * a2 - 8 * v4;
      if (v6 >= 1) {
        bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
      }
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 8 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<double>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::DoubleKeyframeAnimationAssetData::~DoubleKeyframeAnimationAssetData(re::DoubleKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D01C0;
  uint64_t v2 = (re::DoubleKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D01C0;
  uint64_t v2 = (re::DoubleKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::DoubleKeyframeAnimationAssetData::clone(re::DoubleKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<double>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D01C0;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<char const*>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D0150;
  return v4;
}

uint64_t re::DoubleKeyframeAnimationAssetData::typeInfo(re::DoubleKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77DB0, 0);
}

void re::Vector2FKeyframeAnimationAssetData::~Vector2FKeyframeAnimationAssetData(re::Vector2FKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0270;
  uint64_t v2 = (re::Vector2FKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0270;
  uint64_t v2 = (re::Vector2FKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector2FKeyframeAnimationAssetData::clone(re::Vector2FKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<re::Vector2<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0270;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D0200;
  return v4;
}

uint64_t re::Vector2FKeyframeAnimationAssetData::typeInfo(re::Vector2FKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77DC8, 0);
}

void re::Vector3FKeyframeAnimationAssetData::~Vector3FKeyframeAnimationAssetData(re::Vector3FKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0320;
  uint64_t v2 = (re::Vector3FKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0320;
  uint64_t v2 = (re::Vector3FKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector3FKeyframeAnimationAssetData::clone(re::Vector3FKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<re::Vector3<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0320;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::Vector3<float>>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D02B0;
  return v4;
}

uint64_t re::Vector3FKeyframeAnimationAssetData::typeInfo(re::Vector3FKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77DE0, 0);
}

uint64_t re::DynamicArray<re::Vector3<float>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Quaternion<float>>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void re::Vector4FKeyframeAnimationAssetData::~Vector4FKeyframeAnimationAssetData(re::Vector4FKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D03D0;
  uint64_t v2 = (re::Vector4FKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D03D0;
  uint64_t v2 = (re::Vector4FKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector4FKeyframeAnimationAssetData::clone(re::Vector4FKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<re::Vector4<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D03D0;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::Vector4<float>>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D0360;
  return v4;
}

uint64_t re::Vector4FKeyframeAnimationAssetData::typeInfo(re::Vector4FKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77DF8, 0);
}

void re::QuaternionFKeyframeAnimationAssetData::~QuaternionFKeyframeAnimationAssetData(re::QuaternionFKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0480;
  uint64_t v2 = (re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0480;
  uint64_t v2 = (re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::QuaternionFKeyframeAnimationAssetData::clone(re::QuaternionFKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<re::Quaternion<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0480;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::Vector3<float>>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D0410;
  return v4;
}

uint64_t re::QuaternionFKeyframeAnimationAssetData::typeInfo(re::QuaternionFKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77E10, 0);
}

void *re::IntrospectionDynamicArray<re::GenericSRT<float>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::GenericSRT<float>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::GenericSRT<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::GenericSRT<float>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::GenericSRT<float>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::GenericSRT<float>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::GenericSRT<float>>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::GenericSRT<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0x3F8000003F800000;
  v10[1] = 1065353216;
  uint64_t v10[2] = 0;
  uint64_t v10[3] = 0x3F80000000000000;
  v10[4] = 0;
  v10[5] = 0;
  re::DynamicArray<re::Matrix3x3<float>>::add(this, (uint64_t)v10);
  BOOL v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 48 * *((void *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::GenericSRT<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::GenericSRT<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void *re::DynamicArray<re::GenericSRT<float>>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      uint64_t v6 = (void *)(v5 + 48 * v4);
      uint64_t v7 = v5 + 48 * a2 - (void)v6;
      if (v7 >= 1)
      {
        unint64_t v8 = v7 / 0x30uLL + 1;
        do
        {
          *uint64_t v6 = 0x3F8000003F800000;
          v6[1] = 1065353216;
          void v6[2] = 0;
          v6[3] = 0x3F80000000000000;
          --v8;
          v6[4] = 0;
          v6[5] = 0;
          v6 += 6;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::GenericSRT<float>>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::GenericSRT<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::SRTKeyframeAnimationAssetData::~SRTKeyframeAnimationAssetData(re::SRTKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D05C8;
  uint64_t v2 = (re::SRTKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D05C8;
  uint64_t v2 = (re::SRTKeyframeAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SRTKeyframeAnimationAssetData::clone(re::SRTKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 8);
  uint64_t v5 = re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D05C8;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::GenericSRT<float>>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D0558;
  return v4;
}

uint64_t re::SRTKeyframeAnimationAssetData::typeInfo(re::SRTKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77E28, 0);
}

uint64_t re::DynamicArray<re::GenericSRT<float>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Matrix3x3<float>>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(a4 + 8);
  unint64_t v9 = *(void *)(a4 + 16);
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(void *)a4)
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    unint64_t v9 = *(void *)(a4 + 16);
  }
  uint64_t v15 = (void *)(*(void *)(a4 + 32) + 24 * v9);
  *uint64_t v15 = 0;
  v15[1] = 0;
  void v15[2] = 0;
  uint64_t v16 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v17 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 24 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[3 * v9];
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = 0;
          v11[1] = 0;
          uint64_t v11[2] = 0;
          uint64_t v12 = v8[1];
          *uint64_t v11 = *v8;
          v11[1] = v12;
          *unint64_t v8 = 0;
          v8[1] = 0;
          uint64_t v13 = v11[2];
          uint64_t v11[2] = v8[2];
          void v8[2] = v13;
          re::FixedArray<CoreIKTransform>::deinit(v8);
          v8 += 3;
          v11 += 3;
        }
        while (v8 != v10);
        unint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::SkeletalPoseAssetData>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 24 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v3[4] + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 24 * v4;
      do
      {
        uint64_t v7 = (void *)(v3[4] + v6);
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      unint64_t v9 = *(uint64_t **)(a1 + 32);
      uint64_t v10 = 24 * v8;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v9);
        v9 += 3;
        v10 -= 24;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 24 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 24;
        v14 -= 24;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::SkeletalPoseKeyframeAnimationAssetData::~SkeletalPoseKeyframeAnimationAssetData(re::SkeletalPoseKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0710;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t vars8;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 160));
  *(void *)this = &unk_26E6D0710;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SkeletalPoseKeyframeAnimationAssetData::clone(re::SkeletalPoseKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 224, 8);
  uint64_t v5 = re::AnimationAssetData<re::SkeletalPoseAssetData>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0710;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::SkeletalPoseAssetData>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D06A0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 20), (re::SkeletalPoseKeyframeAnimationAssetData *)((char *)this + 160));
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)(v4 + 23), (uint64_t *)this + 23);
  return v4;
}

uint64_t re::SkeletalPoseKeyframeAnimationAssetData::typeInfo(re::SkeletalPoseKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77E40, 0);
}

re::AssetHandle *re::SkeletalPoseKeyframeAnimationAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 160));
}

void *re::SkeletalPoseKeyframeAnimationAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 160;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

uint64_t re::DynamicArray<re::SkeletalPoseAssetData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SkeletalPoseAssetData>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicArray<re::SkeletalPoseAssetData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, *(void *)(a2 + 16));
    uint64_t result = (void *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 24 * *(void *)(a1 + 16), *(void **)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 != v4)
    {
      uint64_t v10 = 3 * v9;
      uint64_t v11 = *(void *)(a2 + 32) + 8 * v10;
      uint64_t result = (void *)(*(void *)(a1 + 32) + 8 * v10);
      uint64_t v12 = 24 * v4 - 8 * v10;
      do
      {
        uint64_t v13 = re::FixedArray<re::GenericSRT<float>>::FixedArray(result, v11);
        v11 += 24;
        uint64_t result = v13 + 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = (void *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 24 * v4, *(void **)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 16);
    if (v4 != v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(a1 + 32) + 24 * v4);
      uint64_t v8 = 24 * v6 - 24 * v4;
      do
      {
        uint64_t result = (void *)re::FixedArray<CoreIKTransform>::deinit(v7);
        v7 += 3;
        v8 -= 24;
      }
      while (v8);
    }
  }
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<re::GenericSRT<float>>::operator=(a3, v4);
      v4 += 24;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::BlendShapeWeightsAssetData>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = (void *)(*((void *)this + 4) + 24 * v8);
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  uint64_t v11 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::BlendShapeWeightsAssetData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)(a1 + 32);
      uint64_t v10 = 24 * v8;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v9);
        v9 += 3;
        v10 -= 24;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 24 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 24;
        v14 -= 24;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::BlendShapeWeightsKeyframeAnimationAssetData::~BlendShapeWeightsKeyframeAnimationAssetData(re::BlendShapeWeightsKeyframeAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0858;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t vars8;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160);
  *(void *)this = &unk_26E6D0858;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 120);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::BlendShapeWeightsKeyframeAnimationAssetData::clone(re::BlendShapeWeightsKeyframeAnimationAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 200, 8);
  uint64_t v5 = re::AnimationAssetData<re::BlendShapeWeightsAssetData>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0858;
  *(unsigned char *)(v5 + 73) = *((unsigned char *)this + 73);
  re::DynamicArray<float>::DynamicArray(v5 + 80, (uint64_t *)this + 10);
  re::DynamicArray<re::BlendShapeWeightsAssetData>::DynamicArray((uint64_t)(v4 + 15), (uint64_t *)this + 15);
  void *v4 = &unk_26E6D07E8;
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)(v4 + 20), (uint64_t *)this + 20);
  return v4;
}

uint64_t re::BlendShapeWeightsKeyframeAnimationAssetData::typeInfo(re::BlendShapeWeightsKeyframeAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsKeyframeAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsKeyframeAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsKeyframeAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77E58, 0);
}

uint64_t re::DynamicArray<re::BlendShapeWeightsAssetData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BlendShapeWeightsAssetData>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t *re::DynamicArray<re::BlendShapeWeightsAssetData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity((void *)a1, *(void *)(a2 + 16));
    uint64_t result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 24 * *(void *)(a1 + 16), *(uint64_t **)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 != v4)
    {
      uint64_t v10 = 3 * v9;
      uint64_t v11 = *(void *)(a2 + 32) + 8 * v10;
      uint64_t result = (uint64_t *)(*(void *)(a1 + 32) + 8 * v10);
      uint64_t v12 = 24 * v4 - 8 * v10;
      do
      {
        uint64_t v13 = re::FixedArray<float>::FixedArray(result, v11);
        v11 += 24;
        uint64_t result = v13 + 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 24 * v4, *(uint64_t **)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 16);
    if (v4 != v6)
    {
      unint64_t v7 = (uint64_t *)(*(void *)(a1 + 32) + 24 * v4);
      uint64_t v8 = 24 * v6 - 24 * v4;
      do
      {
        uint64_t result = (uint64_t *)re::FixedArray<CoreIKTransform>::deinit(v7);
        v7 += 3;
        v8 -= 24;
      }
      while (v8);
    }
  }
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,re::BlendShapeWeightsAssetData *,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<float>::operator=(a3, v4);
      v4 += 24;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::FloatSampledAnimationAssetData::~FloatSampledAnimationAssetData(re::FloatSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0908;
  uint64_t v2 = (re::FloatSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0908;
  uint64_t v2 = (re::FloatSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::FloatSampledAnimationAssetData::clone(re::FloatSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<float>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0908;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<float>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0898;
  return v4;
}

uint64_t re::FloatSampledAnimationAssetData::typeInfo(re::FloatSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77E70, 0);
}

void re::DoubleSampledAnimationAssetData::~DoubleSampledAnimationAssetData(re::DoubleSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D09B8;
  uint64_t v2 = (re::DoubleSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D09B8;
  uint64_t v2 = (re::DoubleSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::DoubleSampledAnimationAssetData::clone(re::DoubleSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<double>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D09B8;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0948;
  return v4;
}

uint64_t re::DoubleSampledAnimationAssetData::typeInfo(re::DoubleSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77E88, 0);
}

void re::Vector2FSampledAnimationAssetData::~Vector2FSampledAnimationAssetData(re::Vector2FSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0A68;
  uint64_t v2 = (re::Vector2FSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0A68;
  uint64_t v2 = (re::Vector2FSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector2FSampledAnimationAssetData::clone(re::Vector2FSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::Vector2<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0A68;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D09F8;
  return v4;
}

uint64_t re::Vector2FSampledAnimationAssetData::typeInfo(re::Vector2FSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77EA0, 0);
}

void re::Vector3FSampledAnimationAssetData::~Vector3FSampledAnimationAssetData(re::Vector3FSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0B18;
  uint64_t v2 = (re::Vector3FSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0B18;
  uint64_t v2 = (re::Vector3FSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector3FSampledAnimationAssetData::clone(re::Vector3FSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::Vector3<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0B18;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<re::Vector3<float>>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0AA8;
  return v4;
}

uint64_t re::Vector3FSampledAnimationAssetData::typeInfo(re::Vector3FSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77EB8, 0);
}

void re::Vector4FSampledAnimationAssetData::~Vector4FSampledAnimationAssetData(re::Vector4FSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0BC8;
  uint64_t v2 = (re::Vector4FSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0BC8;
  uint64_t v2 = (re::Vector4FSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector4FSampledAnimationAssetData::clone(re::Vector4FSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::Vector4<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0BC8;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<re::Vector4<float>>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0B58;
  return v4;
}

uint64_t re::Vector4FSampledAnimationAssetData::typeInfo(re::Vector4FSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77ED0, 0);
}

void re::QuaternionFSampledAnimationAssetData::~QuaternionFSampledAnimationAssetData(re::QuaternionFSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0C78;
  uint64_t v2 = (re::QuaternionFSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0C78;
  uint64_t v2 = (re::QuaternionFSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::QuaternionFSampledAnimationAssetData::clone(re::QuaternionFSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::Quaternion<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0C78;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<re::Vector3<float>>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0C08;
  return v4;
}

uint64_t re::QuaternionFSampledAnimationAssetData::typeInfo(re::QuaternionFSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77EE8, 0);
}

void re::SRTSampledAnimationAssetData::~SRTSampledAnimationAssetData(re::SRTSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0D28;
  uint64_t v2 = (re::SRTSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTSampledAnimationAssetData *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D0D28;
  uint64_t v2 = (re::SRTSampledAnimationAssetData *)((char *)this + 40);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SRTSampledAnimationAssetData::clone(re::SRTSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0D28;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<re::GenericSRT<float>>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0CB8;
  return v4;
}

uint64_t re::SRTSampledAnimationAssetData::typeInfo(re::SRTSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F00, 0);
}

void re::SkeletalPoseSampledAnimationAssetData::~SkeletalPoseSampledAnimationAssetData(re::SkeletalPoseSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0DD8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t vars8;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152);
  re::AssetHandle::~AssetHandle((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 128));
  *(void *)this = &unk_26E6D0DD8;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SkeletalPoseSampledAnimationAssetData::clone(re::SkeletalPoseSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 200, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::SkeletalPoseAssetData>::AnimationAssetData(v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0DD8;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<re::SkeletalPoseAssetData>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  *(void *)uint64_t v4 = &unk_26E6D0D68;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v4 + 128), (re::SkeletalPoseSampledAnimationAssetData *)((char *)this + 128));
  re::DynamicArray<re::StringID>::DynamicArray(v4 + 152, (uint64_t *)this + 19);
  __int16 v7 = *((_WORD *)this + 96);
  *(unsigned char *)(v4 + 194) = *((unsigned char *)this + 194);
  *(_WORD *)(v4 + 192) = v7;
  return v4;
}

uint64_t re::SkeletalPoseSampledAnimationAssetData::typeInfo(re::SkeletalPoseSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F18, 0);
}

re::AssetHandle *re::SkeletalPoseSampledAnimationAssetData::findDependencies(uint64_t a1, _anonymous_namespace_ *this)
{
  return re::DynamicArray<re::AssetHandle>::add(this, (re::AssetHandle *)(a1 + 128));
}

void *re::SkeletalPoseSampledAnimationAssetData::findAssetHandleFields(uint64_t a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = a1 + 128;
  return re::DynamicArray<re::TransitionCondition *>::add(this, &v3);
}

void re::BlendShapeWeightsSampledAnimationAssetData::~BlendShapeWeightsSampledAnimationAssetData(re::BlendShapeWeightsSampledAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D0E88;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::BlendShapeWeightsSampledAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimationAssetData *)((char *)this + 24));
}

{
  uint64_t vars8;

  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128);
  *(void *)this = &unk_26E6D0E88;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 88);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::BlendShapeWeightsSampledAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimationAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::BlendShapeWeightsSampledAnimationAssetData::clone(re::BlendShapeWeightsSampledAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 168, 8);
  unint64_t v5 = (void *)re::AnimationAssetData<re::BlendShapeWeightsAssetData>::AnimationAssetData((uint64_t)v4, (uint64_t)this);
  *unint64_t v5 = &unk_26E6D0E88;
  uint64_t v6 = *(void *)((char *)this + 73);
  v5[10] = *((void *)this + 10);
  *(void *)((char *)v5 + 73) = v6;
  re::DynamicArray<re::BlendShapeWeightsAssetData>::DynamicArray((uint64_t)(v5 + 11), (uint64_t *)this + 11);
  void *v4 = &unk_26E6D0E18;
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)(v4 + 16), (uint64_t *)this + 16);
  return v4;
}

uint64_t re::BlendShapeWeightsSampledAnimationAssetData::typeInfo(re::BlendShapeWeightsSampledAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsSampledAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsSampledAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsSampledAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F30, 0);
}

void re::OrbitAnimationAssetData::~OrbitAnimationAssetData(re::OrbitAnimationAssetData *this)
{
  *(void *)this = &unk_26E6D3730;
  uint64_t v1 = (re::OrbitAnimationAssetData *)((char *)this + 24);
  re::DynamicString::deinit((re::OrbitAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6D3730;
  uint64_t v1 = (re::OrbitAnimationAssetData *)((char *)this + 24);
  re::DynamicString::deinit((re::OrbitAnimationAssetData *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

__n128 re::OrbitAnimationAssetData::clone(re::OrbitAnimationAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 160, 16);
  uint64_t v5 = re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData(v4, (uint64_t)this);
  *(void *)uint64_t v5 = &unk_26E6D0EC8;
  *(_OWORD *)(v5 + 76) = *(_OWORD *)((char *)this + 76);
  __n128 result = *(__n128 *)((char *)this + 92);
  long long v7 = *(_OWORD *)((char *)this + 108);
  long long v8 = *(_OWORD *)((char *)this + 124);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v5 + 124) = v8;
  *(_OWORD *)(v5 + 108) = v7;
  *(__n128 *)(v5 + 92) = result;
  return result;
}

uint64_t re::OrbitAnimationAssetData::typeInfo(re::OrbitAnimationAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OrbitAnimationAssetData", (uint64_t (*)(re::internal *))re::allocInfo_OrbitAnimationAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_OrbitAnimationAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F48, 0);
}

void re::AnimationStateTimelineAssetData::~AnimationStateTimelineAssetData(re::AnimationStateTimelineAssetData *this)
{
  *(void *)this = &unk_26E6D3730;
  uint64_t v1 = (re::AnimationStateTimelineAssetData *)((char *)this + 24);
  re::DynamicString::deinit((re::AnimationStateTimelineAssetData *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6D3730;
  uint64_t v1 = (re::AnimationStateTimelineAssetData *)((char *)this + 24);
  re::DynamicString::deinit((re::AnimationStateTimelineAssetData *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

__n128 re::AnimationStateTimelineAssetData::clone(re::AnimationStateTimelineAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 96, 8);
  uint64_t v5 = (__n128 *)re::AnimationAssetData<re::AudioAnimationState>::AnimationAssetData(v4, (uint64_t)this);
  v5->n128_u64[0] = (unint64_t)&unk_26E6D0F20;
  __n128 result = *((__n128 *)this + 5);
  v5[5] = result;
  return result;
}

uint64_t re::AnimationStateTimelineAssetData::typeInfo(re::AnimationStateTimelineAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationStateTimelineAssetData", (uint64_t (*)(re::internal *))re::allocInfo_AnimationStateTimelineAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationStateTimelineAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F60, 0);
}

uint64_t re::AnimationAssetData<re::AudioAnimationState>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6D0F90;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void re::FloatAnimationBlendTreeAssetData::~FloatAnimationBlendTreeAssetData(re::FloatAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D1040;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::FloatAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::FloatAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D1040;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::FloatAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::FloatAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::FloatAnimationBlendTreeAssetData::clone(re::FloatAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<float>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D0FD0;
  return result;
}

uint64_t re::FloatAnimationBlendTreeAssetData::typeInfo(re::FloatAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FloatAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_FloatAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_FloatAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F78, 0);
}

void *re::AnimationBlendTreeAssetData<float>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    long long v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      long long v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<float>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<float>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<float>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D1040;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *>((uint64_t)&v15, *(void *)(a2 + 32), *(void *)(a2 + 32) + 88 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v11 = a1[4];
      uint64_t v12 = 88 * v9;
      uint64_t v13 = 88 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v11 + v12), (const StringID *)(v10 + v12));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 16), (const StringID *)(v10 + v12 + 16));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 32), (const StringID *)(v10 + v12 + 32));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 48), (const StringID *)(v10 + v12 + 48));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 64), (const StringID *)(v10 + v12 + 64));
        *(_DWORD *)(v11 + v12 + 80) = *(_DWORD *)(v10 + v12 + 80);
        v10 += 88;
        v13 -= 88;
        v11 += 88;
      }
      while (v12 != v13);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *>((uint64_t)&v14, *(void *)(a2 + 32), *(void *)(a2 + 32) + 88 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = 88 * v4;
      uint64_t v8 = 88 * v5;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 64));
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 48));
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 32));
        re::StringID::destroyString((re::StringID *)(v6 + v7 + 16));
        re::StringID::destroyString((re::StringID *)(v6 + v7));
        v6 += 88;
        v8 -= 88;
      }
      while (v7 != v8);
    }
  }
  a1[2] = v4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *,re::AnimationBlendTreeNodeDescription *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 16), (uint64_t *)(a2 + v7 + 16));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 32), (uint64_t *)(a2 + v7 + 32));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 48), (uint64_t *)(a2 + v7 + 48));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 64), (uint64_t *)(a2 + v7 + 64));
    *(_DWORD *)(a4 + v7 + 80) = *(_DWORD *)(a2 + v7 + 80);
    v7 += 88;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::RigGraphConnection>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::RigGraphConnection>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigGraphConnection>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::RigGraphConnection>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::RigGraphConnection>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphConnection *,re::RigGraphConnection *,re::RigGraphConnection *>((uint64_t)&v6, *(void *)(a2 + 32), *(void *)(a2 + 32) + 160 * a1[2], a1[4]);
    re::ObjectHelper::copyConstruct<re::RigGraphConnection>((re::StringID *)(a1[4] + 160 * a1[2]), *(void *)(a2 + 32) + 160 * a1[2], *(void *)(a2 + 32) + 160 * v4);
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphConnection *,re::RigGraphConnection *,re::RigGraphConnection *>((uint64_t)&v5, *(void *)(a2 + 32), *(void *)(a2 + 32) + 160 * v4, a1[4]);
    re::ObjectHelper::destroy<re::RigGraphConnection>(a1[4] + 160 * v4, a1[4] + 160 * a1[2]);
  }
  a1[2] = v4;
}

re::StringID *re::ObjectHelper::copyConstruct<re::RigGraphConnection>(re::StringID *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    char v5 = result;
    uint64_t v6 = 0;
    do
    {
      re::StringID::StringID((re::StringID *)((char *)v5 + v6), (const StringID *)(a2 + v6));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 16), (const StringID *)(a2 + v6 + 16));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 32), (const StringID *)(a2 + v6 + 32));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 48), (const StringID *)(a2 + v6 + 48));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 64), (const StringID *)(a2 + v6 + 64));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 80), (const StringID *)(a2 + v6 + 80));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 96), (const StringID *)(a2 + v6 + 96));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 112), (const StringID *)(a2 + v6 + 112));
      re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 128), (const StringID *)(a2 + v6 + 128));
      __n128 result = re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 144), (const StringID *)(a2 + v6 + 144));
      v6 += 160;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigGraphConnection *,re::RigGraphConnection *,re::RigGraphConnection *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 16), (uint64_t *)(a2 + v7 + 16));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 32), (uint64_t *)(a2 + v7 + 32));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 48), (uint64_t *)(a2 + v7 + 48));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 64), (uint64_t *)(a2 + v7 + 64));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 80), (uint64_t *)(a2 + v7 + 80));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 96), (uint64_t *)(a2 + v7 + 96));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 112), (uint64_t *)(a2 + v7 + 112));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 128), (uint64_t *)(a2 + v7 + 128));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 144), (uint64_t *)(a2 + v7 + 144));
    v7 += 160;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::BlendSpaceAxisDefinition>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BlendSpaceAxisDefinition>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::BlendSpaceAxisDefinition>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::BlendSpaceAxisDefinition>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *>((uint64_t)&v14, *(void *)(a2 + 32), *(void *)(a2 + 32) + 48 * a1[2], a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = a1[4];
      uint64_t v11 = 48 * v8;
      uint64_t v12 = 48 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 16), (const StringID *)(v9 + v11 + 16));
        *(_OWORD *)(v10 + v11 + 32) = *(_OWORD *)(v9 + v11 + 32);
        v9 += 48;
        v12 -= 48;
        v10 += 48;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *>((uint64_t)&v13, *(void *)(a2 + 32), *(void *)(a2 + 32) + 48 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = a1[4] + 48 * v4;
      uint64_t v7 = 48 * v5 - 48 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *,re::BlendSpaceAxisDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  uint64_t v5 = a4 + 16;
  uint64_t v6 = a2 + 16;
  do
  {
    re::StringID::operator=((unint64_t *)(v5 - 16), (uint64_t *)(v6 - 16));
    re::StringID::operator=((unint64_t *)v5, (uint64_t *)v6);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v6 + 16);
    v5 += 48;
    uint64_t v7 = v6 + 32;
    v6 += 48;
  }
  while (v7 != v4);
  return v4;
}

uint64_t re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::BlendSpaceSampleDefinition>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::BlendSpaceSampleDefinition>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *>((uint64_t)&v15, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + (a1[2] << 6)), a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = a1[4];
      uint64_t v11 = v8 << 6;
      uint64_t v12 = v4 << 6;
      do
      {
        char v13 = re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v9 + v11 + 16);
        re::DynamicArray<float>::DynamicArray((uint64_t)v13 + 24, (uint64_t *)(v9 + v11 + 24));
        v9 += 64;
        v12 -= 64;
        v10 += 64;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + (v4 << 6)), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = (re::StringID *)(a1[4] + (v4 << 6));
      uint64_t v7 = (v5 << 6) - (v4 << 6);
      do
      {
        re::DynamicArray<unsigned long>::deinit((uint64_t)v6 + 24);
        re::StringID::destroyString(v6);
        uint64_t v6 = (re::StringID *)((char *)v6 + 64);
        v7 -= 64;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *,re::BlendSpaceSampleDefinition *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a3;
  uint64_t v5 = a4 + 24;
  uint64_t v6 = a2 + 3;
  do
  {
    re::StringID::operator=((unint64_t *)(v5 - 24), v6 - 3);
    *(_DWORD *)(v5 - 8) = *((_DWORD *)v6 - 2);
    re::DynamicArray<float>::operator=(v5, v6);
    v5 += 64;
    uint64_t v7 = v6 + 5;
    v6 += 8;
  }
  while (v7 != v4);
  return v4;
}

void re::DoubleAnimationBlendTreeAssetData::~DoubleAnimationBlendTreeAssetData(re::DoubleAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D10F0;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::DoubleAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::DoubleAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D10F0;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::DoubleAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::DoubleAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::DoubleAnimationBlendTreeAssetData::clone(re::DoubleAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<double>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D1080;
  return result;
}

uint64_t re::DoubleAnimationBlendTreeAssetData::typeInfo(re::DoubleAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DoubleAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_DoubleAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_DoubleAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77F90, 0);
}

void *re::AnimationBlendTreeAssetData<double>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<double>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<double>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<double>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D10F0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::Vector2FAnimationBlendTreeAssetData::~Vector2FAnimationBlendTreeAssetData(re::Vector2FAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D11A0;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::Vector2FAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::Vector2FAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D11A0;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::Vector2FAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::Vector2FAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector2FAnimationBlendTreeAssetData::clone(re::Vector2FAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<re::Vector2<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D1130;
  return result;
}

uint64_t re::Vector2FAnimationBlendTreeAssetData::typeInfo(re::Vector2FAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector2FAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector2FAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector2FAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77FA8, 0);
}

void *re::AnimationBlendTreeAssetData<re::Vector2<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<re::Vector2<float>>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Vector2<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Vector2<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D11A0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::Vector3FAnimationBlendTreeAssetData::~Vector3FAnimationBlendTreeAssetData(re::Vector3FAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D1250;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::Vector3FAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::Vector3FAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D1250;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::Vector3FAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::Vector3FAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector3FAnimationBlendTreeAssetData::clone(re::Vector3FAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<re::Vector3<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D11E0;
  return result;
}

uint64_t re::Vector3FAnimationBlendTreeAssetData::typeInfo(re::Vector3FAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector3FAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector3FAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector3FAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77FC0, 0);
}

void *re::AnimationBlendTreeAssetData<re::Vector3<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<re::Vector3<float>>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Vector3<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Vector3<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D1250;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::Vector4FAnimationBlendTreeAssetData::~Vector4FAnimationBlendTreeAssetData(re::Vector4FAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D1300;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::Vector4FAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::Vector4FAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D1300;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::Vector4FAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::Vector4FAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::Vector4FAnimationBlendTreeAssetData::clone(re::Vector4FAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<re::Vector4<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D1290;
  return result;
}

uint64_t re::Vector4FAnimationBlendTreeAssetData::typeInfo(re::Vector4FAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Vector4FAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_Vector4FAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_Vector4FAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77FD8, 0);
}

void *re::AnimationBlendTreeAssetData<re::Vector4<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<re::Vector4<float>>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Vector4<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Vector4<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D1300;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::QuaternionFAnimationBlendTreeAssetData::~QuaternionFAnimationBlendTreeAssetData(re::QuaternionFAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D13B0;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::QuaternionFAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::QuaternionFAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D13B0;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::QuaternionFAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::QuaternionFAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::QuaternionFAnimationBlendTreeAssetData::clone(re::QuaternionFAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<re::Quaternion<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D1340;
  return result;
}

uint64_t re::QuaternionFAnimationBlendTreeAssetData::typeInfo(re::QuaternionFAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"QuaternionFAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_QuaternionFAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_QuaternionFAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF77FF0, 0);
}

void *re::AnimationBlendTreeAssetData<re::Quaternion<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<re::Quaternion<float>>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::Quaternion<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::Quaternion<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D13B0;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::SRTAnimationBlendTreeAssetData::~SRTAnimationBlendTreeAssetData(re::SRTAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D1460;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SRTAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SRTAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D1460;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SRTAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SRTAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SRTAnimationBlendTreeAssetData::clone(re::SRTAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D13F0;
  return result;
}

uint64_t re::SRTAnimationBlendTreeAssetData::typeInfo(re::SRTAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SRTAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SRTAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SRTAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF78008, 0);
}

void *re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::GenericSRT<float>>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::GenericSRT<float>>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D1460;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

void re::SkeletalPoseAnimationBlendTreeAssetData::~SkeletalPoseAnimationBlendTreeAssetData(re::SkeletalPoseAnimationBlendTreeAssetData *this)
{
  *(void *)this = &unk_26E6D1528;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SkeletalPoseAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseAnimationBlendTreeAssetData *)((char *)this + 24));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D1528;
  uint64_t v2 = (char *)this + 208;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)v2);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::RigGraphConnection>::deinit((void *)this + 15);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit((uint64_t)this + 80);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::SkeletalPoseAnimationBlendTreeAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseAnimationBlendTreeAssetData *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void *re::SkeletalPoseAnimationBlendTreeAssetData::clone(re::SkeletalPoseAnimationBlendTreeAssetData *this, re::Allocator *a2)
{
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 288, 8);
  __n128 result = (void *)re::AnimationBlendTreeAssetData<re::SkeletalPose>::AnimationBlendTreeAssetData(v4, (uint64_t)this);
  *__n128 result = &unk_26E6D14A0;
  return result;
}

uint64_t re::SkeletalPoseAnimationBlendTreeAssetData::typeInfo(re::SkeletalPoseAnimationBlendTreeAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseAnimationBlendTreeAssetData", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseAnimationBlendTreeAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseAnimationBlendTreeAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF78020, 0);
}

void *re::AnimationBlendTreeAssetData<re::SkeletalPose>::findDependencies(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 33);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<re::AssetHandle>::setCapacity(this, v6);
    uint64_t v4 = *((void *)v3 + 33);
  }
  if (v4)
  {
    uint64_t v7 = (re::AssetHandle *)*((void *)v3 + 35);
    uint64_t v8 = 24 * v4;
    do
    {
      __n128 result = re::DynamicArray<re::AssetHandle>::add(this, v7);
      uint64_t v7 = (re::AssetHandle *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

void *re::AnimationBlendTreeAssetData<re::SkeletalPose>::findAssetHandleFields(void *result, _anonymous_namespace_ *this)
{
  uint64_t v3 = result;
  uint64_t v4 = result[33];
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v4 + *((void *)this + 2);
  if (v5 < v6)
  {
    __n128 result = re::DynamicArray<float *>::setCapacity(this, v6);
    uint64_t v4 = v3[33];
  }
  if (v4)
  {
    uint64_t v7 = v3[35];
    uint64_t v8 = 24 * v4;
    do
    {
      uint64_t v9 = v7;
      __n128 result = re::DynamicArray<re::TransitionCondition *>::add(this, &v9);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t re::AnimationBlendTreeAssetData<re::SkeletalPose>::AnimationBlendTreeAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)re::AnimationAssetData<re::SkeletalPose>::AnimationAssetData(a1, a2);
  void *v4 = &unk_26E6D1528;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::DynamicArray((uint64_t)(v4 + 10), (uint64_t *)(a2 + 80));
  re::DynamicArray<re::RigGraphConnection>::DynamicArray(a1 + 120, (uint64_t *)(a2 + 120));
  *(_DWORD *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = *(_DWORD *)(a2 + 160);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::DynamicArray(a1 + 168, (uint64_t *)(a2 + 168));
  re::DynamicArray<re::BlendSpaceSampleDefinition>::DynamicArray(a1 + 208, (uint64_t *)(a2 + 208));
  re::DynamicArray<re::AssetHandle>::DynamicArray(a1 + 248, (uint64_t *)(a2 + 248));
  return a1;
}

uint64_t re::AnimationAssetData<re::SkeletalPose>::AnimationAssetData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E6D3730;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 40), (const re::DynamicString *)(a2 + 40));
  *(void *)a1 = &unk_26E6D1568;
  *(unsigned char *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

void *re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  long long v10 = 0uLL;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 10;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 40 * v10 + 8, *(void *)(a2 + 16) + 40 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 40 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

uint64_t re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _OWORD *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 40 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 40 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_OWORD *)(v10 + 40 * v9 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 40 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 40 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 40 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 40 * v4 + 24;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 40 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 10;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    unsigned int v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionFixedArray<unsigned char>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned char>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<unsigned char>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned char>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

void re::IntrospectionFixedArray<unsigned char>::init(uint64_t a1, void *a2, re *a3, int a4, uint64_t a5)
{
  re::FixedArray<BOOL>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    unint64_t v10 = 0;
    do
    {
      if (a2[1] <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10++));
    }
    while (a5 != v10);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned char>::deinit(uint64_t a1, uint64_t *a2)
{
  return re::FixedArray<CoreIKTransform>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<unsigned char>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned char>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

unint64_t re::IntrospectionFixedArray<unsigned char>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + a3;
}

void *re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  return re::FixedArray<CoreIKTransform>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, uint64_t a4)
{
  re::FixedArray<CoreIKTransform>::deinit(a1);
  re::FixedArray<BOOL>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v12);
    re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)&v13);
    uint64_t v9 = a1[1];
    if (v9)
    {
      unint64_t v10 = (void **)a1[2];
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v11, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v11, v10, a3, 0);
        unint64_t v10 = (void **)((char *)v10 + 1);
        --v9;
      }
      while (v9);
    }
  }
}

unint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::FixedArray<unsigned char>>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = (void *)(*((void *)this + 4) + 24 * v8);
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  long long v11 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<unsigned char>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::FixedArray<unsigned char>>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<unsigned char>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

double re::EventTimelineAssetData::EventTimelineAssetData(re::EventTimelineAssetData *this)
{
  uint64_t v1 = re::TimelineAssetData::TimelineAssetData((uint64_t)this, 48);
  *(unsigned char *)(v1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)uint64_t v1 = &unk_26E6D1778;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = "";
  *(void *)(v1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_DWORD *)(v1 + 120) = 0;
  *(_OWORD *)(v1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_DWORD *)(v1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 0;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184) = 0u;
  *(_DWORD *)(v1 + 200) = 0;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 236) = 0u;
  *(void *)(v1 + 252) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 296) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(void *)(v1 + 544) = 0;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 332) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 380) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 428) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 476) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 524) = 0u;
  *(unsigned char *)(v1 + 552) = -1;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(unsigned char *)(v1 + 592) = 1;
  *(void *)(v1 + 632) = 0;
  *(void *)(v1 + 616) = 0;
  *(_DWORD *)(v1 + 624) = 0;
  *(_OWORD *)(v1 + 600) = 0u;
  return result;
}

void re::EventTimelineAssetData::~EventTimelineAssetData(re::EventTimelineAssetData *this)
{
  re::EventTimelineAssetData::~EventTimelineAssetData(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::StringID *v2;

  uint64_t v2 = (re::EventTimelineAssetData *)((char *)this + 80);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 600);

  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 70);
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)this + 512);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 464);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 416);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 368);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 27);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 176);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 136);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96);
  re::StringID::destroyString(v2);
  *(void *)this = &unk_26E6D3730;
  re::DynamicString::deinit((re::EventTimelineAssetData *)((char *)this + 40));
  re::StringID::destroyString((re::EventTimelineAssetData *)((char *)this + 24));
}

uint64_t re::EventTimelineAssetData::clone(re::EventTimelineAssetData *this, re::Allocator *a2)
{
  int v3 = re::globalAllocators(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 640, 8);
  uint64_t v5 = (void *)re::AnimationAssetData<float>::AnimationAssetData(v4, (uint64_t)this);
  *uint64_t v5 = &unk_26E6D1778;
  re::TimelineEventData::TimelineEventData((re::TimelineEventData *)(v5 + 10), (re::EventTimelineAssetData *)((char *)this + 80));
  return v4;
}

uint64_t re::EventTimelineAssetData::typeInfo(re::EventTimelineAssetData *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EventTimelineAssetData", (uint64_t (*)(re::internal *))re::allocInfo_EventTimelineAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_EventTimelineAssetData, (void (*)(re::IntrospectionBase *))&qword_26AF780F0, 0);
}

_anonymous_namespace_ *re::DynamicArray<re::StringID>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::StringID>::copy((unint64_t *)this, *(uint64_t **)a2, v4);
      re::DynamicArray<re::StringID>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      re::DynamicArray<re::StringID>::clear((uint64_t)this);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::StringID>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::StringID>::copy((unint64_t *)this, *(uint64_t **)a2, *(void *)(a2 + 8));
  }
  return this;
}

unint64_t *re::DynamicArray<re::StringID>::copy(unint64_t *this, uint64_t *a2, unint64_t a3)
{
  if (a3)
  {
    int v3 = this;
    unint64_t v4 = this[2];
    if (v4 == -1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v4 >= a3)
    {
      this = (unint64_t *)this[4];
      uint64_t v12 = 16 * a3;
      do
      {
        uint64_t v13 = re::StringID::operator=(this, a2);
        a2 += 2;
        this = v13 + 2;
        v12 -= 16;
      }
      while (v12);
    }
    else
    {
      re::DynamicArray<re::StringID>::growCapacity(this, a3);
      unint64_t v7 = v3[2];
      this = (unint64_t *)v3[4];
      if (v7)
      {
        uint64_t v8 = 16 * v7;
        uint64_t v9 = a2;
        do
        {
          uint64_t v10 = re::StringID::operator=(this, v9);
          v9 += 2;
          this = v10 + 2;
          v8 -= 16;
        }
        while (v8);
        this = (unint64_t *)v3[4];
        unint64_t v11 = v3[2];
      }
      else
      {
        unint64_t v11 = 0;
      }
      if (v7 != a3)
      {
        uint64_t v14 = (const StringID *)&a2[2 * v7];
        this += 2 * v11;
        uint64_t v15 = 16 * a3 - 16 * v7;
        do
        {
          uint64_t v16 = re::StringID::StringID((re::StringID *)this, v14++);
          this = (unint64_t *)((char *)v16 + 16);
          v15 -= 16;
        }
        while (v15);
      }
      v3[2] = a3;
    }
    ++*((_DWORD *)v3 + 6);
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<float>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<float>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<float>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<int>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<float>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<double>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<double>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<double>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<float *>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<double>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

void *re::DynamicArray<double>::copy(void *this, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  unint64_t v5 = a2;
  unint64_t v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(void *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 8 * a2), __src, 8 * a4);
  }
  else
  {
    re::DynamicArray<float *>::growCapacity(this, a2 + a4);
    unint64_t v10 = v6[2] - v5;
    unint64_t v11 = &__src[8 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 8 * v5), __src, 8 * v10);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 8 * v5), v11, &__src[8 * v4] - v11);
    void v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Vector2<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector2<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<unsigned long>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector2<float>>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

void *re::DynamicArray<re::Vector2<float>>::copy(void *this, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  unint64_t v5 = a2;
  unint64_t v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(void *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 8 * a2), __src, 8 * a4);
  }
  else
  {
    re::DynamicArray<unsigned long>::growCapacity(this, a2 + a4);
    unint64_t v10 = v6[2] - v5;
    unint64_t v11 = &__src[8 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 8 * v5), __src, 8 * v10);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 8 * v5), v11, &__src[8 * v4] - v11);
    void v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Vector3<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

void *re::DynamicArray<re::Vector3<float>>::copy(void *this, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  unint64_t v5 = a2;
  unint64_t v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(void *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 16 * a2), __src, 16 * a4);
  }
  else
  {
    re::DynamicArray<re::Vector3<float>>::growCapacity(this, a2 + a4);
    unint64_t v10 = v6[2] - v5;
    unint64_t v11 = &__src[16 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 16 * v5), __src, 16 * v10);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 16 * v5), v11, &__src[16 * v4] - v11);
    void v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Vector4<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector4<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Vector4<float>>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Vector4<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector4<float>>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

void *re::DynamicArray<re::Vector4<float>>::copy(void *this, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  unint64_t v5 = a2;
  unint64_t v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(void *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 16 * a2), __src, 16 * a4);
  }
  else
  {
    re::DynamicArray<re::Vector4<float>>::growCapacity(this, a2 + a4);
    unint64_t v10 = v6[2] - v5;
    unint64_t v11 = &__src[16 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 16 * v5), __src, 16 * v10);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 16 * v5), v11, &__src[16 * v4] - v11);
    void v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::Quaternion<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Quaternion<float>>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Vector3<float>>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::GenericSRT<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::GenericSRT<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::GenericSRT<float>>::resize(this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Matrix3x3<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::GenericSRT<float>>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

void *re::DynamicArray<re::GenericSRT<float>>::copy(void *this, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return this;
  }
  unint64_t v5 = a2;
  unint64_t v6 = this;
  unint64_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(void *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 48 * a2), __src, 48 * a4);
  }
  else
  {
    re::DynamicArray<re::Matrix3x3<float>>::growCapacity(this, a2 + a4);
    unint64_t v10 = v6[2] - v5;
    unint64_t v11 = &__src[48 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 48 * v5), __src, 48 * v10);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 48 * v5), v11, &__src[48 * v4] - v11);
    void v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeNodeDescription>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::AnimationBlendTreeNodeDescription>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::AnimationBlendTreeNodeDescription>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::RigGraphConnection>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RigGraphConnection>::copy((void *)a1, (uint64_t)a2);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = 0;
        re::ObjectHelper::destroy<re::RigGraphConnection>(*(void *)(a1 + 32), *(void *)(a1 + 32) + 160 * v6);
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::RigGraphConnection>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RigGraphConnection>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::BlendSpaceAxisDefinition>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::BlendSpaceAxisDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::BlendSpaceAxisDefinition>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::BlendSpaceSampleDefinition>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::BlendSpaceSampleDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::BlendSpaceSampleDefinition>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::FloatAnimationClip::FloatAnimationClip(re::FloatAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 3);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D17D0;
  return result;
}

void re::FloatAnimationClip::~FloatAnimationClip(re::FloatAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::FloatAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::FloatAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::FloatAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::FloatAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::DoubleAnimationClip::~DoubleAnimationClip(re::DoubleAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::DoubleAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::DoubleAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::DoubleAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::DoubleAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Vector2FAnimationClip::Vector2FAnimationClip(re::Vector2FAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 5);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1900;
  return result;
}

void re::Vector2FAnimationClip::~Vector2FAnimationClip(re::Vector2FAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector2FAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector2FAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector2FAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector2FAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Vector3FAnimationClip::Vector3FAnimationClip(re::Vector3FAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 6);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1998;
  return result;
}

void re::Vector3FAnimationClip::~Vector3FAnimationClip(re::Vector3FAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector3FAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector3FAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector3FAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector3FAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Vector4FAnimationClip::Vector4FAnimationClip(re::Vector4FAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 7);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1A30;
  return result;
}

void re::Vector4FAnimationClip::~Vector4FAnimationClip(re::Vector4FAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector4FAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector4FAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector4FAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector4FAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::QuaternionFAnimationClip::QuaternionFAnimationClip(re::QuaternionFAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 8);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1AC8;
  return result;
}

void re::QuaternionFAnimationClip::~QuaternionFAnimationClip(re::QuaternionFAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::QuaternionFAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::QuaternionFAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::QuaternionFAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::QuaternionFAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SRTAnimationClip::SRTAnimationClip(re::SRTAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 9);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1B60;
  return result;
}

void re::SRTAnimationClip::~SRTAnimationClip(re::SRTAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::SRTAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::SRTAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::SRTAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::SRTAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SkeletalPoseAnimationClip::SkeletalPoseAnimationClip(re::SkeletalPoseAnimationClip *this)
{
  uint64_t result = re::Timeline::Timeline((uint64_t)this, 10);
  *(unsigned char *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 1065353216;
  *(_WORD *)(result + 164) = 0;
  *(void *)uint64_t result = &unk_26E6D1BF8;
  return result;
}

void re::SkeletalPoseAnimationClip::~SkeletalPoseAnimationClip(re::SkeletalPoseAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::SkeletalPoseAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::SkeletalPoseAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::SkeletalPoseAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::SkeletalPoseAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::DoubleAnimation::~DoubleAnimation(re::DoubleAnimation *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::DoubleAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::DoubleAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::DoubleAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::DoubleAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::Vector2FAnimation::~Vector2FAnimation(re::Vector2FAnimation *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector2FAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector2FAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector2FAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector2FAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::Vector3FAnimation::~Vector3FAnimation(re::Vector3FAnimation *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector3FAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector3FAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector3FAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector3FAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::Vector4FAnimation::~Vector4FAnimation(re::Vector4FAnimation *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector4FAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector4FAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::Vector4FAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::Vector4FAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::QuaternionFAnimation::~QuaternionFAnimation(re::QuaternionFAnimation *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::QuaternionFAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::QuaternionFAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::QuaternionFAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::QuaternionFAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::SRTAnimation::~SRTAnimation(re::SRTAnimation *this)
{
  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::SRTAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::SRTAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  uint64_t v1 = (re::SRTAnimation *)((char *)this + 24);
  re::DynamicString::deinit((re::SRTAnimation *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::SkeletalPoseAnimation::~SkeletalPoseAnimation(re::SkeletalPoseAnimation *this)
{
  *(void *)this = &unk_26E6C3550;
  if (*((unsigned char *)this + 280)) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 288));
  }
  if (*((unsigned char *)this + 184)) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 192));
  }
  if (*((unsigned char *)this + 88)) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 96));
  }
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit((re::SkeletalPoseAnimation *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseAnimation *)((char *)this + 24));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6C3550;
  if (*((unsigned char *)this + 280)) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 288));
  }
  if (*((unsigned char *)this + 184)) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 192));
  }
  if (*((unsigned char *)this + 88)) {
    re::SkeletalPose::~SkeletalPose((re::SkeletalPoseAnimation *)((char *)this + 96));
  }
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit((re::SkeletalPoseAnimation *)((char *)this + 40));
  re::StringID::destroyString((re::SkeletalPoseAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

_anonymous_namespace_ *re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::add(_anonymous_namespace_ *result, void *a2)
{
  int v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(result, v8);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  *(void *)(*((void *)v3 + 4) + 8 * v4) = *a2;
  *a2 = 0;
  *((void *)v3 + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::SharedPtr<re::SkeletalPoseJointDefinition>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_15;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        unint64_t v11 = v7;
        uint64_t v12 = (void *)v5[4];
        do
        {
          *v11++ = *v12;
          *v12++ = 0;
          v10 -= 8;
        }
        while (v10);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t *re::make::shared::object<re::SkeletalPoseJointDefinition,re::DynamicArray<re::StringID> const&,decltype(nullptr)>(re *a1, uint64_t a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  unint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 256, 8);
  uint64_t v6 = *(void *)(a2 + 16);
  v8[0] = *(void *)(a2 + 32);
  v8[1] = v6;
  *(void *)a1 = v5;
  return result;
}

void re::FloatKeyframeAnimation::~FloatKeyframeAnimation(re::FloatKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2A58;
  uint64_t v2 = (re::FloatKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2A58;
  uint64_t v2 = (re::FloatKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::DoubleKeyframeAnimation::~DoubleKeyframeAnimation(re::DoubleKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2AD8;
  uint64_t v2 = (re::DoubleKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2AD8;
  uint64_t v2 = (re::DoubleKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

_anonymous_namespace_ *re::FixedArray<double>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (*(void *)a1) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::SkinningInfluence>::copy(a1, (const void **)a2);
  }
  return a1;
}

void re::FixedArray<double>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    uint64_t v8 = (void *)((char *)v8 + v5 - 8);
  }
  *uint64_t v8 = 0;
}

void re::Vector2FKeyframeAnimation::~Vector2FKeyframeAnimation(re::Vector2FKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2B58;
  uint64_t v2 = (re::Vector2FKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2B58;
  uint64_t v2 = (re::Vector2FKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::Vector3FKeyframeAnimation::~Vector3FKeyframeAnimation(re::Vector3FKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2BD8;
  uint64_t v2 = (re::Vector3FKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2BD8;
  uint64_t v2 = (re::Vector3FKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::Vector4FKeyframeAnimation::~Vector4FKeyframeAnimation(re::Vector4FKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2C58;
  uint64_t v2 = (re::Vector4FKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2C58;
  uint64_t v2 = (re::Vector4FKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

_anonymous_namespace_ *re::FixedArray<re::Vector4<float>>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  if (*(void *)a1) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::Vector4<float>>::copy(a1, (const void **)a2);
  }
  return a1;
}

void *re::FixedArray<re::Vector4<float>>::copy(void *result, const void **a2)
{
  uint64_t v2 = (const void *)result[1];
  if (v2 == a2[1])
  {
    if (v2)
    {
      uint64_t v3 = *a2;
      unint64_t v4 = (void *)result[2];
      return memmove(v4, v3, 16 * (void)v2);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::FixedArray<re::Vector4<float>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 16 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    uint64_t v8 = (void *)((char *)v8 + v5 - 16);
  }
  *uint64_t v8 = 0;
  v8[1] = 0;
}

void re::QuaternionFKeyframeAnimation::~QuaternionFKeyframeAnimation(re::QuaternionFKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2CD8;
  uint64_t v2 = (re::QuaternionFKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2CD8;
  uint64_t v2 = (re::QuaternionFKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::SRTKeyframeAnimation::~SRTKeyframeAnimation(re::SRTKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2D58;
  uint64_t v2 = (re::SRTKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2D58;
  uint64_t v2 = (re::SRTKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::SkeletalPoseKeyframeAnimation::~SkeletalPoseKeyframeAnimation(re::SkeletalPoseKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2DD8;
  uint64_t v2 = (re::SkeletalPoseKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<re::SkeletalPose>::deinit((void *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2DD8;
  uint64_t v2 = (re::SkeletalPoseKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<re::SkeletalPose>::deinit((void *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SkeletalPoseKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::FixedArray<re::SkeletalPose>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x2E8BA2E8BA2E8BBLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 88, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 88 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)(result + 64) = 0;
      *(void *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)uint64_t result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(void *)(result + 8) = "";
      *(_DWORD *)(result + 64) = 0;
      *(void *)(result + 80) = 0;
      result += 88;
      --v6;
    }
    while (v6);
  }
  *(void *)(result + 64) = 0;
  *(void *)(result + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 8) = "";
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 80) = 0;
  return result;
}

void re::FloatSampledAnimation::~FloatSampledAnimation(re::FloatSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0C50;
  uint64_t v2 = (re::FloatSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0C50;
  uint64_t v2 = (re::FloatSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::FloatSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::DoubleSampledAnimation::~DoubleSampledAnimation(re::DoubleSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0CD0;
  uint64_t v2 = (re::DoubleSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0CD0;
  uint64_t v2 = (re::DoubleSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::DoubleSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::Vector2FSampledAnimation::~Vector2FSampledAnimation(re::Vector2FSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0D50;
  uint64_t v2 = (re::Vector2FSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0D50;
  uint64_t v2 = (re::Vector2FSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector2FSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::Vector3FSampledAnimation::~Vector3FSampledAnimation(re::Vector3FSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0DD0;
  uint64_t v2 = (re::Vector3FSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0DD0;
  uint64_t v2 = (re::Vector3FSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector3FSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::Vector4FSampledAnimation::~Vector4FSampledAnimation(re::Vector4FSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0E50;
  uint64_t v2 = (re::Vector4FSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0E50;
  uint64_t v2 = (re::Vector4FSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::Vector4FSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::QuaternionFSampledAnimation::~QuaternionFSampledAnimation(re::QuaternionFSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0ED0;
  uint64_t v2 = (re::QuaternionFSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0ED0;
  uint64_t v2 = (re::QuaternionFSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::QuaternionFSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::SRTSampledAnimation::~SRTSampledAnimation(re::SRTSampledAnimation *this)
{
  *(void *)this = &unk_26E6C0F50;
  uint64_t v2 = (re::SRTSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C0F50;
  uint64_t v2 = (re::SRTSampledAnimation *)((char *)this + 40);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::SRTSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::AnimationBlendTreeBuilder<float>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a3;
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity((void *)(a1 + 8), 0x40uLL);
  ++*(_DWORD *)(a1 + 32);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 48, a3, 64);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a2;
}

void *re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[10 * v9];
        unint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v8;
          v11[5] = 0;
          *unint64_t v11 = v12;
          v11[1] = 0;
          *((_DWORD *)v11 + 8) = 0;
          uint64_t v11[2] = 0;
          _OWORD v11[3] = 0;
          uint64_t v13 = (uint64_t)(v8 + 1);
          uint64_t v14 = v8[2];
          v11[1] = v8[1];
          v8[1] = 0;
          uint64_t v11[2] = v14;
          void v8[2] = 0;
          uint64_t v15 = v11[3];
          _OWORD v11[3] = v8[3];
          v8[3] = v15;
          uint64_t v16 = v11[5];
          v11[5] = v8[5];
          v8[5] = v16;
          ++*((_DWORD *)v8 + 8);
          ++*((_DWORD *)v11 + 8);
          uint64_t v17 = (re::StringID *)(v8 + 6);
          LOBYTE(v16) = v8[6];
          v11[6] = v11[6] & 0xFFFFFFFFFFFFFFFELL | v8[6] & 1;
          v11[6] = v8[6] & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
          v11[7] = v8[7];
          v8[7] = "";
          v8[6] = 0;
          uint64_t v19 = v8[8];
          uint64_t v18 = (re::StringID *)(v8 + 8);
          v11[8] = v11[8] & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
          v11[8] = *(void *)v18 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
          v11[9] = *((void *)v18 + 1);
          *(void *)uint64_t v18 = 0;
          *((void *)v18 + 1) = "";
          re::StringID::destroyString(v18);
          re::StringID::destroyString(v17);
          re::DynamicArray<unsigned long>::deinit(v13);
          uint64_t v8 = (void *)((char *)v18 + 16);
          v11 += 10;
        }
        while (v8 != v10);
        uint64_t v8 = (void *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

BOOL re::AnimationBlendTreeNodeDescription::isBlend(re::AnimationBlendTreeNodeDescription *this)
{
  uint64_t v1 = (void *)((char *)this + 16);
  if (re::StringID::operator==((void *)this + 2, re::AnimationBlendTreeNodeDescription::kBlend)) {
    return 1;
  }
  return re::StringID::operator==(v1, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
}

uint64_t re::AnimationBlendTreeBuilder<float>::buildRig(uint64_t a1, void *a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = __str;
  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_120;
  }
  uint64_t v8 = a2[50];
  uint64_t v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    uint64_t v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    unint64_t v61 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v96 = 2048;
    *(void *)(v5 + 20) = v61;
    __int16 v98 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = (const char **)(v12 + 88 * a4);
  uint64_t v14 = v13[1];
  unint64_t v15 = a4;
  unint64_t v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    BOOL v16 = re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    uint64_t v17 = 0x7B26A3B4060ALL;
    if (v16)
    {
      uint64_t v17 = 0x36B719AB4B6;
      uint64_t v18 = "AddFloat";
    }
    else
    {
      uint64_t v18 = "LerpFloat";
    }
    *(void *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (void)v85)
    {
      if (BYTE8(v85)) {
        (*(void (**)(void))(*(void *)v85 + 40))();
      }
      long long v85 = 0u;
      long long v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip) {
         && !re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  }
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((void)v82)
      {
        if (BYTE8(v82)) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        long long v82 = 0u;
        long long v83 = 0u;
      }
    }
  }
  uint64_t v19 = v11 + 80 * v15;
  uint64_t v21 = *(void *)(v19 + 24);
  __int16 v20 = (void *)(v19 + 24);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (void *)(v11 + 80 * v15 + 40);
    uint64_t v66 = (const char **)(a2 + 39);
    uint64_t v63 = (_anonymous_namespace_ *)(a3 + 52);
    uint64_t v64 = v23;
    unsigned int v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<float>::buildRig(v78, a2, a3, *(void *)(*v23 + 8 * (void)v22), a5);
      if (!v78[0] && (void)v79)
      {
        if (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        long long v79 = 0u;
        long long v80 = 0u;
      }
      long long v24 = (void *)*v20;
      if (*v20 <= (unint64_t)v22) {
        break;
      }
      uint64_t v25 = *(char **)(*v23 + 8 * (void)v22);
      unint64_t v15 = a2[3];
      if (v15 <= (unint64_t)v25) {
        goto LABEL_111;
      }
      uint64_t v26 = a2[50];
      unint64_t v15 = *(void *)(v26 + 16);
      if (v15 <= (unint64_t)v25) {
        goto LABEL_112;
      }
      unint64_t v27 = v68;
      if (v15 <= v68) {
        goto LABEL_113;
      }
      uint64_t v28 = a5;
      uint64_t v29 = a2[5];
      unint64_t v15 = *(void *)(v26 + 32);
      unint64_t v30 = v15 + 88 * (void)v25;
      uint64_t v31 = v29 + 80 * (void)v25;
      unsigned int v33 = *(char **)(v31 + 72);
      uint64_t v32 = (void *)(v31 + 72);
      uint64_t v67 = v33;
      uint64_t v34 = *(const char **)(v29 + 80 * (void)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          uint64_t v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          uint64_t v36 = (char *)v68;
          if ((unint64_t)a5 <= v68) {
            goto LABEL_119;
          }
          uint64_t v34 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (void)v25 + 80));
            if (v88) {
              long long v37 = v90;
            }
            else {
              long long v37 = v89;
            }
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if ((uint64_t)v100.var1) {
              uint64_t v38 = (const char *)v101;
            }
            else {
              uint64_t v38 = (char *)&v100.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (void)v76)
            {
              if (BYTE8(v76)) {
                (*(void (**)(void))(*(void *)v76 + 40))();
              }
              long long v76 = 0u;
              long long v77 = 0u;
            }
            if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v100.var0 + 40))();
            }
            unint64_t v39 = v15 + 88 * (void)v25;
            unint64_t v41 = *(void *)(v39 + 64);
            unsigned int v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (unsigned int v42 = *(unsigned char **)(v15 + 88 * (void)v25 + 72)) != 0 && !*v42) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(void *)(v30 + 8));
            }
            else {
              re::StringID::StringID((re::StringID *)&v100, v40);
            }
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            uint64_t v34 = "input2";
          }
        }
        else
        {
          uint64_t v34 = "input1";
        }
      }
      if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v88) {
          uint64_t v43 = v90;
        }
        else {
          uint64_t v43 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          char v44 = (const char *)v101;
        }
        else {
          char v44 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        unsigned int v23 = v64;
        __int16 v20 = v65;
        if (!v72[0] && (void)v73)
        {
          if (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          long long v73 = 0u;
          long long v74 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        *(void *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        uint64_t v45 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (void *)(v15 + 88 * (void)v25 + 32));
        id v46 = (char *)*a5;
        unint64_t v15 = a3[45];
        if (v15 <= *a5)
        {
          uint64_t v91 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          uint64_t v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 468;
          __int16 v96 = 2048;
          v97 = v46;
          __int16 v98 = 2048;
          uint64_t v99 = (void *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v91 = 0;
          uint64_t v6 = __str;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          uint64_t v5 = v36;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          uint64_t v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 797;
          __int16 v96 = 2048;
          v97 = v5;
          __int16 v98 = 2048;
          uint64_t v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          unint64_t v60 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v96 = 2048;
          *(void *)(v5 + 20) = v60;
          __int16 v98 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(void *)(a3[46] + 8 * (void)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v88) {
          uint64_t v47 = v90;
        }
        else {
          uint64_t v47 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          uint64_t v48 = (const char *)v101;
        }
        else {
          uint64_t v48 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (void)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        unsigned int v23 = v64;
        __int16 v20 = v65;
        if (!v69[0] && (void)v70)
        {
          if (BYTE8(v70)) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
          long long v70 = 0u;
          long long v71 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (void)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (void)v25))
          && *(v32 - 1) <= 1uLL)
        {
          char v49 = v67;
          if (*v32 && !*(unsigned char *)*v32) {
            char v49 = "output";
          }
        }
        else
        {
          char v49 = v67;
        }
        if (v88) {
          unsigned int v50 = v90;
        }
        else {
          unsigned int v50 = v89;
        }
        uint64_t v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(unsigned char *)&v100.var0)
        {
          unsigned int v53 = *re::animationLogObjects(v51);
          uint64_t v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
        a5 = v28;
        unsigned int v23 = v64;
        __int16 v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22) {
        goto LABEL_103;
      }
    }
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v25 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    uint64_t v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    v97 = v22;
    __int16 v98 = 2048;
    uint64_t v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    uint64_t v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 789;
    __int16 v96 = 2048;
    v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    uint64_t v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v91 = 0;
    unsigned int v53 = __str;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v54 = (char *)&_os_log_internal;
    uint64_t v58 = (char *)v27;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    uint64_t v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    v97 = v58;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if (v102) {
      unsigned int v59 = (char *)*((void *)&v102 + 1);
    }
    else {
      unsigned int v59 = (char *)&v102 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    long long v55 = *(_OWORD *)(v54 + 72);
    uint64_t v56 = *((void *)&v102 + 1);
    uint64_t v57 = v103;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(void *)(a1 + 40) = v56;
    *(void *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v87;
  if (v87)
  {
    if (v88) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v87 + 40))(v87, v90);
    }
  }
  return result;
}

void re::FixedArray<re::AnimationBlendTreeNode>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    uint64_t v8 = (void *)((char *)v8 + v5 - 8);
  }
  *uint64_t v8 = 0;
}

uint64_t re::AnimationBlendTreeBuilder<float>::addChildren(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6)
{
  uint64_t v8 = &v53;
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v9 = a1[3];
  if (v9 <= a3) {
    goto LABEL_39;
  }
  uint64_t v11 = a1;
  unint64_t v12 = 0;
  uint64_t v40 = a4;
  uint64_t v41 = *(void *)(a1[5] + 80 * a3 + 24) + a4;
  uint64_t v35 = (uint64_t)(a1 + 51);
  uint64_t v13 = 16 * a4;
  uint64_t v14 = 8 * a4;
  unint64_t v38 = a3;
  while (1)
  {
    uint64_t v15 = v11[5];
    if (*(void *)(v15 + 80 * a3 + 24) <= v12) {
      return v41;
    }
    uint64_t v16 = v11[50];
    unint64_t v17 = *(void *)(*(void *)(v15 + 80 * a3 + 40) + 8 * v12);
    unint64_t v18 = *(void *)(v16 + 16);
    if (v18 <= v17)
    {
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 797;
      __int16 v49 = 2048;
      unsigned int v50 = (void *)v17;
      __int16 v51 = 2048;
      unint64_t v52 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 789;
      __int16 v49 = 2048;
      unsigned int v50 = (void *)v17;
      __int16 v51 = 2048;
      unint64_t v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 468;
      __int16 v49 = 2048;
      unsigned int v50 = v7;
      __int16 v51 = 2048;
      unint64_t v52 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      unint64_t v6 = &_os_log_internal;
      uint64_t v32 = (void *)a3;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 797;
      __int16 v49 = 2048;
      unsigned int v50 = v32;
      __int16 v51 = 2048;
      unint64_t v52 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      void v44[2] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 789;
      __int16 v49 = 2048;
      unsigned int v50 = (void *)(v40 + v12);
      __int16 v51 = 2048;
      unint64_t v52 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      unsigned int v33 = (void *)a3;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 789;
      __int16 v49 = 2048;
      unsigned int v50 = v33;
      __int16 v51 = 2048;
      unint64_t v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 789;
      __int16 v49 = 2048;
      unsigned int v50 = (void *)v38;
      __int16 v51 = 2048;
      unint64_t v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 468;
      __int16 v49 = 2048;
      unsigned int v50 = (void *)v13;
      __int16 v51 = 2048;
      unint64_t v52 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      v44[0] = 0;
      long long v57 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 789;
      __int16 v49 = 2048;
      unsigned int v50 = (void *)v18;
      __int16 v51 = 2048;
      unint64_t v52 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v44[0] = 0;
      v8[4] = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v34 = (void *)a3;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v45 = 136315906;
      id v46 = "operator[]";
      __int16 v47 = 1024;
      int v48 = 789;
      __int16 v49 = 2048;
      unsigned int v50 = v34;
      __int16 v51 = 2048;
      unint64_t v52 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Unknown blend tree leaf type", "!\"Unreachable code\"", "addChildren", 559);
      _os_crash();
      __break(1u);
    }
    if (v9 <= v17) {
      goto LABEL_31;
    }
    uint64_t v7 = (void *)(a4 + v12);
    unint64_t v6 = *(void *)(a2 + 288);
    if (v6 <= a4 + v12) {
      goto LABEL_32;
    }
    unint64_t v42 = a4 + v12;
    uint64_t v43 = v13;
    uint64_t v19 = *(void *)(v16 + 32);
    uint64_t v7 = (void *)a2;
    uint64_t v20 = *(void *)(a2 + 296);
    a2 = *(unsigned __int8 *)(v15 + 80 * v17 + 24);
    uint64_t v13 = v20 + v14;
    *(unsigned char *)(v20 + v14 + 6) = a2;
    if (v18 <= a3) {
      goto LABEL_33;
    }
    unint64_t v18 = a3;
    BOOL v21 = re::StringID::operator==((void *)(v19 + 88 * a3 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    if (v12) {
      BOOL v22 = v21;
    }
    else {
      BOOL v22 = 0;
    }
    *(unsigned char *)(v13 + 7) = v22;
    *(_DWORD *)uint64_t v13 = *(_DWORD *)(v19 + 88 * v17 + 80);
    if ((_BYTE)a2)
    {
      *(_WORD *)(v20 + v14 + 4) = v41;
      if (v9 <= v18) {
        goto LABEL_36;
      }
      uint64_t v11 = a1;
      a2 = (unint64_t)v7;
      uint64_t v41 = re::AnimationBlendTreeBuilder<float>::addChildren(a1, v7, v17);
      unint64_t v9 = 88;
    }
    else
    {
      a2 = v19 + 88 * v17 + 16;
      unint64_t v9 = 88;
      if (re::StringID::operator==((void *)a2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        unsigned int v23 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v35, (void *)(v19 + 88 * v17 + 32));
        uint64_t v13 = *a5;
        unint64_t v18 = v7[45];
        if (v18 <= *a5) {
          goto LABEL_37;
        }
        a2 = (unint64_t)v7;
        *(void *)(v7[46] + 8 * v13) = *v23;
        uint64_t v24 = (*a5)++;
        *(_WORD *)(v20 + v14 + 4) = v24;
      }
      else
      {
        if (!re::StringID::operator==((void *)a2, re::AnimationBlendTreeNodeDescription::kInput)) {
          goto LABEL_40;
        }
        unint64_t v18 = *a6;
        a2 = v7[54];
        if (a2 <= *a6) {
          goto LABEL_38;
        }
        re::StringID::operator=((unint64_t *)(v7[56] + 16 * v18), (uint64_t *)(v19 + 88 * v17 + 32));
        unint64_t v26 = (*a6)++;
        *(_WORD *)(v20 + v14 + 4) = v26;
        *(unsigned char *)(v13 + 7) |= 2u;
        a2 = (unint64_t)v7;
      }
      uint64_t v11 = a1;
    }
    uint64_t v27 = v19 + 88 * v17;
    unint64_t v29 = *(void *)(v27 + 64);
    uint64_t v28 = (const StringID *)(v27 + 64);
    unint64_t v18 = v42;
    uint64_t v13 = v43;
    if (v29 <= 1 && (unint64_t v30 = *(unsigned char **)(v19 + 88 * v17 + 72)) != 0 && !*v30) {
      re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)v44, *(void *)(v19 + 88 * v17 + 8));
    }
    else {
      re::StringID::StringID((re::StringID *)v44, v28);
    }
    unint64_t v6 = *(void *)(a2 + 392);
    if (v6 <= v42) {
      goto LABEL_34;
    }
    re::StringID::operator=((unint64_t *)(*(void *)(a2 + 408) + v43), v44);
    re::StringID::destroyString((re::StringID *)v44);
    ++v12;
    unint64_t v9 = v11[3];
    uint64_t v13 = v43 + 16;
    v14 += 8;
    a3 = v38;
    a4 = v40;
    if (v9 <= v38) {
      goto LABEL_35;
    }
  }
}

uint64_t *re::AnimationBlendTree<float>::addClip(uint64_t a1, unint64_t a2, _anonymous_namespace_ *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (!*(void *)(a1 + 336)) {
      goto LABEL_14;
    }
    **(void **)(a1 + 344) = 1;
  }
  if (*(void *)(a1 + 336) <= a2)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 344) + 8 * a2);
  if (*(void *)(a1 + 336) <= a2 + 1)
  {
LABEL_12:
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((_BYTE)v9) {
    uint64_t v8 = SDWORD1(v9);
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)(*(void *)(a1 + 344) + 8 * (a2 + 1)) = v8 + v6;
  if (*(void *)(a1 + 312) <= a2) {
    goto LABEL_13;
  }
  *(void *)(*(void *)(a1 + 320) + 8 * a2) = this;
  return result;
}

void re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_1327, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::FloatAnimationBlendTree::~FloatAnimationBlendTree(re::FloatAnimationBlendTree *this)
{
  re::AnimationBlendTree<float>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<float>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<float>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<float>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<float>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<float>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<float>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<float>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D2A50;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<float>::weightPathFromName(re::StringID *a1, uint64_t a2)
{
  re::DynamicString::format((re::DynamicString *)"KeyValue.keyValueStore[%s]", (re::DynamicString *)&v4, a2);
  re::StringID::StringID(a1, (const re::DynamicString *)&v4);
  uint64_t result = v4;
  if (v4)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 80 * v4;
        double v6 = (re::StringID *)(v3 + 64);
        do
        {
          re::StringID::destroyString(v6);
          re::StringID::destroyString((re::StringID *)((char *)v6 - 16));
          re::DynamicArray<unsigned long>::deinit((uint64_t)v6 - 56);
          double v6 = (re::StringID *)((char *)v6 + 80);
          v5 -= 80;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::AnimationBlendTreeBuilder<double>::buildRig(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = __str;
  uint64_t v97 = *MEMORY[0x263EF8340];
  double v6 = a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_111;
  }
  uint64_t v8 = a2[50];
  double v6 = *(NSObject **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_112:
    uint64_t v79 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    StringID v92 = (StringID)0;
    unint64_t v56 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v86 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v88 = 2048;
    *(void *)(v5 + 20) = v56;
    __int16 v90 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Unknown blend node type", "!\"Unreachable code\"", "blendNodeType", 347);
    _os_crash();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v5 = *(char **)(v8 + 32);
  long long v12 = &v5[88 * a4];
  long long v13 = (const char *)*((void *)v12 + 1);
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v12)) {
    goto LABEL_113;
  }
  if (!re::StringID::operator==((void *)v12 + 2, re::AnimationBlendTreeNodeDescription::kClip)
    && !re::StringID::operator==((void *)v12 + 2, re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)&v5[88 * a4 + 24], *((const char **)v12 + 1), (uint64_t)v76);
    if (!v76[0])
    {
      if ((void)v77)
      {
        if (BYTE8(v77)) {
          (*(void (**)(void))(*(void *)v77 + 40))();
        }
        long long v77 = 0u;
        long long v78 = 0u;
      }
    }
  }
  uint64_t v15 = v11 + 80 * a4;
  uint64_t v17 = *(void *)(v15 + 24);
  uint64_t v16 = (void *)(v15 + 24);
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = (void *)(v11 + 80 * a4 + 40);
    unint64_t v61 = (const char **)(a2 + 39);
    uint64_t v58 = (_anonymous_namespace_ *)(a3 + 416);
    unsigned int v59 = v19;
    unint64_t v60 = v16;
    while (1)
    {
      re::AnimationBlendTreeBuilder<double>::buildRig(v73, a2, a3, *(void *)(*v19 + 8 * (void)v18), a5);
      if (!v73[0] && (void)v74)
      {
        if (BYTE8(v74)) {
          (*(void (**)(void))(*(void *)v74 + 40))();
        }
        long long v74 = 0u;
        long long v75 = 0u;
      }
      uint64_t v20 = (char *)*v16;
      if (*v16 <= (unint64_t)v18) {
        break;
      }
      unint64_t v21 = *(void *)(*v19 + 8 * (void)v18);
      uint64_t v5 = (char *)a2[3];
      if ((unint64_t)v5 <= v21) {
        goto LABEL_102;
      }
      uint64_t v22 = a2[50];
      uint64_t v5 = *(char **)(v22 + 16);
      if ((unint64_t)v5 <= v21) {
        goto LABEL_103;
      }
      unsigned int v23 = a4;
      if ((unint64_t)v5 <= a4) {
        goto LABEL_104;
      }
      uint64_t v24 = a5;
      uint64_t v25 = a2[5];
      uint64_t v5 = *(char **)(v22 + 32);
      unint64_t v26 = &v5[88 * v21];
      uint64_t v27 = v25 + 80 * v21;
      unint64_t v29 = *(char **)(v27 + 72);
      uint64_t v28 = (void *)(v27 + 72);
      unsigned int v62 = v29;
      unint64_t v30 = *(const char **)(v25 + 80 * v21 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)&v5[88 * a4]))
      {
        if (v18)
        {
          uint64_t v31 = a2[50];
          a5 = *(void **)(v31 + 16);
          unint64_t v32 = a4;
          if ((unint64_t)a5 <= a4) {
            goto LABEL_110;
          }
          unint64_t v30 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v31 + 32) + 88 * a4 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)&v5[88 * v21 + 80]);
            if (v80) {
              unsigned int v33 = v82;
            }
            else {
              unsigned int v33 = v81;
            }
            re::DynamicString::operator+((re::DynamicString *)&v79, "input3", (re::DynamicString *)&v92);
            if ((uint64_t)v92.var1) {
              uint64_t v34 = (const char *)v93;
            }
            else {
              uint64_t v34 = (char *)&v92.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v61, v33, "input3", v34, __str, 1, (uint64_t)v70);
            if (!v70[0] && (void)v71)
            {
              if (BYTE8(v71)) {
                (*(void (**)(void))(*(void *)v71 + 40))();
              }
              long long v71 = 0u;
              long long v72 = 0u;
            }
            if (*(void *)&v92.var0 && ((uint64_t)v92.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v92.var0 + 40))();
            }
            uint64_t v35 = &v5[88 * v21];
            unint64_t v37 = *((void *)v35 + 8);
            uint64_t v36 = (const StringID *)(v35 + 64);
            if (v37 <= 1 && (unint64_t v38 = *(unsigned char **)&v5[88 * v21 + 72]) != 0 && !*v38) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v92, *((void *)v26 + 1));
            }
            else {
              re::StringID::StringID((re::StringID *)&v92, v36);
            }
            re::DynamicArray<re::StringID>::add(v58, &v92);
            re::StringID::destroyString((re::StringID *)&v92);
            unint64_t v30 = "input2";
          }
        }
        else
        {
          unint64_t v30 = "input1";
        }
      }
      if (re::StringID::operator==(&v5[88 * v21 + 16], re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v80) {
          unint64_t v39 = v82;
        }
        else {
          unint64_t v39 = v81;
        }
        re::DynamicString::operator+((re::DynamicString *)&v79, v30, (re::DynamicString *)&v92);
        if ((uint64_t)v92.var1) {
          uint64_t v40 = (const char *)v93;
        }
        else {
          uint64_t v40 = (char *)&v92.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v61, v39, v30, v40, "", 1, (uint64_t)v67);
        a5 = v24;
        uint64_t v19 = v59;
        uint64_t v16 = v60;
        if (!v67[0] && (void)v68)
        {
          if (BYTE8(v68)) {
            (*(void (**)(void))(*(void *)v68 + 40))();
          }
          long long v68 = 0u;
          long long v69 = 0u;
        }
        if (*(void *)&v92.var0 && ((uint64_t)v92.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v92.var0 + 40))();
        }
        *(void *)&v92.var0 = 0;
        v92.var1 = "";
        re::DynamicArray<re::StringID>::add(v58, (uint64_t *)&v92);
        re::StringID::destroyString((re::StringID *)&v92);
        uint64_t v41 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), &v5[88 * v21 + 32]);
        unint64_t v42 = *v24;
        uint64_t v5 = *(char **)(a3 + 360);
        if ((unint64_t)v5 <= *v24)
        {
          uint64_t v83 = 0;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          StringID v92 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v85 = "operator[]";
          __int16 v86 = 1024;
          int v87 = 468;
          __int16 v88 = 2048;
          long long v89 = v42;
          __int16 v90 = 2048;
          uint64_t v91 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_110:
          uint64_t v83 = 0;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          StringID v92 = (StringID)0;
          double v6 = v32;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v85 = "operator[]";
          __int16 v86 = 1024;
          int v87 = 797;
          __int16 v88 = 2048;
          long long v89 = v6;
          __int16 v90 = 2048;
          uint64_t v91 = (char *)a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          uint64_t v79 = 0;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          StringID v92 = (StringID)0;
          unint64_t v55 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v86 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v88 = 2048;
          *(void *)(v5 + 20) = v55;
          __int16 v90 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_112;
        }
        *(void *)(*(void *)(a3 + 368) + 8 * (void)v42) = *v41;
        ++*v24;
      }
      else if (re::StringID::operator==(&v5[88 * v21 + 16], re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v80) {
          uint64_t v43 = v82;
        }
        else {
          uint64_t v43 = v81;
        }
        re::DynamicString::operator+((re::DynamicString *)&v79, v30, (re::DynamicString *)&v92);
        if ((uint64_t)v92.var1) {
          char v44 = (const char *)v93;
        }
        else {
          char v44 = (char *)&v92.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v61, v43, v30, v44, *(const char **)&v5[88 * v21 + 56], 1, (uint64_t)v64);
        a5 = v24;
        uint64_t v19 = v59;
        uint64_t v16 = v60;
        if (!v64[0] && (void)v65)
        {
          if (BYTE8(v65)) {
            (*(void (**)(void))(*(void *)v65 + 40))();
          }
          long long v65 = 0u;
          long long v66 = 0u;
        }
        if (*(void *)&v92.var0 && ((uint64_t)v92.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v92.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v58, (StringID *)&v5[88 * v21 + 32]);
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)&v5[88 * v21])
          && *(v28 - 1) <= 1uLL)
        {
          int v45 = v62;
          if (*v28 && !*(unsigned char *)*v28) {
            int v45 = "output";
          }
        }
        else
        {
          int v45 = v62;
        }
        if (v80) {
          id v46 = v82;
        }
        else {
          id v46 = v81;
        }
        __int16 v47 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v61, *((const char **)v26 + 1), v45, v46, v30, 0, 0, (uint64_t)&v92);
        if (!*(unsigned char *)&v92.var0)
        {
          __int16 v49 = *re::animationLogObjects(v47);
          unsigned int v50 = __str;
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            goto LABEL_100;
          }
          goto LABEL_105;
        }
        a5 = v24;
        uint64_t v19 = v59;
        uint64_t v16 = v60;
      }
      unint64_t v18 = ((char *)v18 + 1);
      if (*v16 <= (unint64_t)v18) {
        goto LABEL_94;
      }
    }
    uint64_t v83 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    StringID v92 = (StringID)0;
    unint64_t v21 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v85 = "operator[]";
    __int16 v86 = 1024;
    int v87 = 797;
    __int16 v88 = 2048;
    long long v89 = v18;
    __int16 v90 = 2048;
    uint64_t v91 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    uint64_t v83 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    StringID v92 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v85 = "operator[]";
    __int16 v86 = 1024;
    int v87 = 789;
    __int16 v88 = 2048;
    long long v89 = v21;
    __int16 v90 = 2048;
    uint64_t v91 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    uint64_t v83 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    StringID v92 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v85 = "operator[]";
    __int16 v86 = 1024;
    int v87 = 797;
    __int16 v88 = 2048;
    long long v89 = v21;
    __int16 v90 = 2048;
    uint64_t v91 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    uint64_t v83 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    StringID v92 = (StringID)0;
    unsigned int v50 = (char *)&_os_log_internal;
    __int16 v49 = v23;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v85 = "operator[]";
    __int16 v86 = 1024;
    int v87 = 797;
    __int16 v88 = 2048;
    long long v89 = v49;
    __int16 v90 = 2048;
    uint64_t v91 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    if (v94) {
      long long v54 = (char *)*((void *)&v94 + 1);
    }
    else {
      long long v54 = (char *)&v94 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v50 + 4) = v54;
    _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_100:
    long long v51 = *(_OWORD *)(v50 + 72);
    uint64_t v52 = *((void *)&v94 + 1);
    uint64_t v53 = v95;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v50 + 56);
    *(_OWORD *)(a1 + 24) = v51;
    *(void *)(a1 + 40) = v52;
    *(void *)(a1 + 48) = v53;
  }
  else
  {
LABEL_94:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v79;
  if (v79)
  {
    if (v80) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v79 + 40))(v79, v82);
    }
  }
  return result;
}

void re::DoubleAnimationBlendTree::~DoubleAnimationBlendTree(re::DoubleAnimationBlendTree *this)
{
  re::AnimationBlendTree<double>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<double>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<double>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<double>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<double>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<double>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<double>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<double>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D2B80;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::Vector2<float>>::buildRig(uint64_t a1, void *a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = __str;
  uint64_t v105 = *MEMORY[0x263EF8340];
  double v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_120;
  }
  uint64_t v8 = a2[50];
  double v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    uint64_t v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    unint64_t v61 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v96 = 2048;
    *(void *)(v5 + 20) = v61;
    __int16 v98 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v8 + 32);
  long long v13 = (const char **)(v12 + 88 * a4);
  uint64_t v14 = v13[1];
  unint64_t v15 = a4;
  unint64_t v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    BOOL v16 = re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    uint64_t v17 = 0x1CE4C130A6D4370;
    if (v16)
    {
      uint64_t v17 = 0xCD65BF962F71CLL;
      unint64_t v18 = "AddVector2";
    }
    else
    {
      unint64_t v18 = "LerpVector2";
    }
    *(void *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (void)v85)
    {
      if (BYTE8(v85)) {
        (*(void (**)(void))(*(void *)v85 + 40))();
      }
      long long v85 = 0u;
      long long v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip) {
         && !re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  }
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((void)v82)
      {
        if (BYTE8(v82)) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        long long v82 = 0u;
        long long v83 = 0u;
      }
    }
  }
  uint64_t v19 = v11 + 80 * v15;
  uint64_t v21 = *(void *)(v19 + 24);
  uint64_t v20 = (void *)(v19 + 24);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (void *)(v11 + 80 * v15 + 40);
    long long v66 = (const char **)(a2 + 39);
    uint64_t v63 = (_anonymous_namespace_ *)(a3 + 52);
    uint64_t v64 = v23;
    long long v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::Vector2<float>>::buildRig(v78, a2, a3, *(void *)(*v23 + 8 * (void)v22), a5);
      if (!v78[0] && (void)v79)
      {
        if (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        long long v79 = 0u;
        long long v80 = 0u;
      }
      uint64_t v24 = (void *)*v20;
      if (*v20 <= (unint64_t)v22) {
        break;
      }
      uint64_t v25 = *(char **)(*v23 + 8 * (void)v22);
      unint64_t v15 = a2[3];
      if (v15 <= (unint64_t)v25) {
        goto LABEL_111;
      }
      uint64_t v26 = a2[50];
      unint64_t v15 = *(void *)(v26 + 16);
      if (v15 <= (unint64_t)v25) {
        goto LABEL_112;
      }
      unint64_t v27 = v68;
      if (v15 <= v68) {
        goto LABEL_113;
      }
      uint64_t v28 = a5;
      uint64_t v29 = a2[5];
      unint64_t v15 = *(void *)(v26 + 32);
      unint64_t v30 = v15 + 88 * (void)v25;
      uint64_t v31 = v29 + 80 * (void)v25;
      unsigned int v33 = *(char **)(v31 + 72);
      unint64_t v32 = (void *)(v31 + 72);
      uint64_t v67 = v33;
      uint64_t v34 = *(const char **)(v29 + 80 * (void)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          uint64_t v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          uint64_t v36 = (char *)v68;
          if ((unint64_t)a5 <= v68) {
            goto LABEL_119;
          }
          uint64_t v34 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (void)v25 + 80));
            if (v88) {
              unint64_t v37 = v90;
            }
            else {
              unint64_t v37 = v89;
            }
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if ((uint64_t)v100.var1) {
              unint64_t v38 = (const char *)v101;
            }
            else {
              unint64_t v38 = (char *)&v100.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (void)v76)
            {
              if (BYTE8(v76)) {
                (*(void (**)(void))(*(void *)v76 + 40))();
              }
              long long v76 = 0u;
              long long v77 = 0u;
            }
            if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v100.var0 + 40))();
            }
            unint64_t v39 = v15 + 88 * (void)v25;
            unint64_t v41 = *(void *)(v39 + 64);
            uint64_t v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (unint64_t v42 = *(unsigned char **)(v15 + 88 * (void)v25 + 72)) != 0 && !*v42) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(void *)(v30 + 8));
            }
            else {
              re::StringID::StringID((re::StringID *)&v100, v40);
            }
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            uint64_t v34 = "input2";
          }
        }
        else
        {
          uint64_t v34 = "input1";
        }
      }
      if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v88) {
          uint64_t v43 = v90;
        }
        else {
          uint64_t v43 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          char v44 = (const char *)v101;
        }
        else {
          char v44 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v72[0] && (void)v73)
        {
          if (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          long long v73 = 0u;
          long long v74 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        *(void *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        int v45 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (void *)(v15 + 88 * (void)v25 + 32));
        id v46 = (char *)*a5;
        unint64_t v15 = a3[45];
        if (v15 <= *a5)
        {
          uint64_t v91 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 468;
          __int16 v96 = 2048;
          uint64_t v97 = v46;
          __int16 v98 = 2048;
          uint64_t v99 = (void *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v91 = 0;
          double v6 = __str;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          uint64_t v5 = v36;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 797;
          __int16 v96 = 2048;
          uint64_t v97 = v5;
          __int16 v98 = 2048;
          uint64_t v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          unint64_t v60 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v96 = 2048;
          *(void *)(v5 + 20) = v60;
          __int16 v98 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(void *)(a3[46] + 8 * (void)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v88) {
          __int16 v47 = v90;
        }
        else {
          __int16 v47 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          int v48 = (const char *)v101;
        }
        else {
          int v48 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (void)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v69[0] && (void)v70)
        {
          if (BYTE8(v70)) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
          long long v70 = 0u;
          long long v71 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (void)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (void)v25))
          && *(v32 - 1) <= 1uLL)
        {
          __int16 v49 = v67;
          if (*v32 && !*(unsigned char *)*v32) {
            __int16 v49 = "output";
          }
        }
        else
        {
          __int16 v49 = v67;
        }
        if (v88) {
          unsigned int v50 = v90;
        }
        else {
          unsigned int v50 = v89;
        }
        long long v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(unsigned char *)&v100.var0)
        {
          uint64_t v53 = *re::animationLogObjects(v51);
          long long v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22) {
        goto LABEL_103;
      }
    }
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v25 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v22;
    __int16 v98 = 2048;
    uint64_t v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 789;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v91 = 0;
    uint64_t v53 = __str;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    long long v54 = (char *)&_os_log_internal;
    uint64_t v58 = (char *)v27;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v58;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if (v102) {
      unsigned int v59 = (char *)*((void *)&v102 + 1);
    }
    else {
      unsigned int v59 = (char *)&v102 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    long long v55 = *(_OWORD *)(v54 + 72);
    uint64_t v56 = *((void *)&v102 + 1);
    uint64_t v57 = v103;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(void *)(a1 + 40) = v56;
    *(void *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v87;
  if (v87)
  {
    if (v88) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v87 + 40))(v87, v90);
    }
  }
  return result;
}

void re::Vector2FAnimationBlendTree::~Vector2FAnimationBlendTree(re::Vector2FAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<re::Vector2<float>>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Vector2<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Vector2<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Vector2<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D2CB0;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::Vector3<float>>::buildRig(uint64_t a1, void *a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = __str;
  uint64_t v105 = *MEMORY[0x263EF8340];
  double v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_120;
  }
  uint64_t v8 = a2[50];
  double v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    uint64_t v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    unint64_t v61 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v96 = 2048;
    *(void *)(v5 + 20) = v61;
    __int16 v98 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v8 + 32);
  long long v13 = (const char **)(v12 + 88 * a4);
  uint64_t v14 = v13[1];
  unint64_t v15 = a4;
  unint64_t v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    BOOL v16 = re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    uint64_t v17 = 0x1CE4C130A6D4372;
    if (v16)
    {
      uint64_t v17 = 0xCD65BF962F71ELL;
      unint64_t v18 = "AddVector3";
    }
    else
    {
      unint64_t v18 = "LerpVector3";
    }
    *(void *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (void)v85)
    {
      if (BYTE8(v85)) {
        (*(void (**)(void))(*(void *)v85 + 40))();
      }
      long long v85 = 0u;
      long long v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip) {
         && !re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  }
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((void)v82)
      {
        if (BYTE8(v82)) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        long long v82 = 0u;
        long long v83 = 0u;
      }
    }
  }
  uint64_t v19 = v11 + 80 * v15;
  uint64_t v21 = *(void *)(v19 + 24);
  uint64_t v20 = (void *)(v19 + 24);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (void *)(v11 + 80 * v15 + 40);
    long long v66 = (const char **)(a2 + 39);
    uint64_t v63 = (_anonymous_namespace_ *)(a3 + 52);
    uint64_t v64 = v23;
    long long v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::Vector3<float>>::buildRig(v78, a2, a3, *(void *)(*v23 + 8 * (void)v22), a5);
      if (!v78[0] && (void)v79)
      {
        if (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        long long v79 = 0u;
        long long v80 = 0u;
      }
      uint64_t v24 = (void *)*v20;
      if (*v20 <= (unint64_t)v22) {
        break;
      }
      uint64_t v25 = *(char **)(*v23 + 8 * (void)v22);
      unint64_t v15 = a2[3];
      if (v15 <= (unint64_t)v25) {
        goto LABEL_111;
      }
      uint64_t v26 = a2[50];
      unint64_t v15 = *(void *)(v26 + 16);
      if (v15 <= (unint64_t)v25) {
        goto LABEL_112;
      }
      unint64_t v27 = v68;
      if (v15 <= v68) {
        goto LABEL_113;
      }
      uint64_t v28 = a5;
      uint64_t v29 = a2[5];
      unint64_t v15 = *(void *)(v26 + 32);
      unint64_t v30 = v15 + 88 * (void)v25;
      uint64_t v31 = v29 + 80 * (void)v25;
      unsigned int v33 = *(char **)(v31 + 72);
      unint64_t v32 = (void *)(v31 + 72);
      uint64_t v67 = v33;
      uint64_t v34 = *(const char **)(v29 + 80 * (void)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          uint64_t v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          uint64_t v36 = (char *)v68;
          if ((unint64_t)a5 <= v68) {
            goto LABEL_119;
          }
          uint64_t v34 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (void)v25 + 80));
            if (v88) {
              unint64_t v37 = v90;
            }
            else {
              unint64_t v37 = v89;
            }
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if ((uint64_t)v100.var1) {
              unint64_t v38 = (const char *)v101;
            }
            else {
              unint64_t v38 = (char *)&v100.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (void)v76)
            {
              if (BYTE8(v76)) {
                (*(void (**)(void))(*(void *)v76 + 40))();
              }
              long long v76 = 0u;
              long long v77 = 0u;
            }
            if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v100.var0 + 40))();
            }
            unint64_t v39 = v15 + 88 * (void)v25;
            unint64_t v41 = *(void *)(v39 + 64);
            uint64_t v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (unint64_t v42 = *(unsigned char **)(v15 + 88 * (void)v25 + 72)) != 0 && !*v42) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(void *)(v30 + 8));
            }
            else {
              re::StringID::StringID((re::StringID *)&v100, v40);
            }
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            uint64_t v34 = "input2";
          }
        }
        else
        {
          uint64_t v34 = "input1";
        }
      }
      if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v88) {
          uint64_t v43 = v90;
        }
        else {
          uint64_t v43 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          char v44 = (const char *)v101;
        }
        else {
          char v44 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v72[0] && (void)v73)
        {
          if (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          long long v73 = 0u;
          long long v74 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        *(void *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        int v45 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (void *)(v15 + 88 * (void)v25 + 32));
        id v46 = (char *)*a5;
        unint64_t v15 = a3[45];
        if (v15 <= *a5)
        {
          uint64_t v91 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 468;
          __int16 v96 = 2048;
          uint64_t v97 = v46;
          __int16 v98 = 2048;
          uint64_t v99 = (void *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v91 = 0;
          double v6 = __str;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          uint64_t v5 = v36;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 797;
          __int16 v96 = 2048;
          uint64_t v97 = v5;
          __int16 v98 = 2048;
          uint64_t v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          unint64_t v60 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v96 = 2048;
          *(void *)(v5 + 20) = v60;
          __int16 v98 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(void *)(a3[46] + 8 * (void)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v88) {
          __int16 v47 = v90;
        }
        else {
          __int16 v47 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          int v48 = (const char *)v101;
        }
        else {
          int v48 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (void)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v69[0] && (void)v70)
        {
          if (BYTE8(v70)) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
          long long v70 = 0u;
          long long v71 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (void)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (void)v25))
          && *(v32 - 1) <= 1uLL)
        {
          __int16 v49 = v67;
          if (*v32 && !*(unsigned char *)*v32) {
            __int16 v49 = "output";
          }
        }
        else
        {
          __int16 v49 = v67;
        }
        if (v88) {
          unsigned int v50 = v90;
        }
        else {
          unsigned int v50 = v89;
        }
        long long v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(unsigned char *)&v100.var0)
        {
          uint64_t v53 = *re::animationLogObjects(v51);
          long long v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22) {
        goto LABEL_103;
      }
    }
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v25 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v22;
    __int16 v98 = 2048;
    uint64_t v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 789;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v91 = 0;
    uint64_t v53 = __str;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    long long v54 = (char *)&_os_log_internal;
    uint64_t v58 = (char *)v27;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v58;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if (v102) {
      unsigned int v59 = (char *)*((void *)&v102 + 1);
    }
    else {
      unsigned int v59 = (char *)&v102 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    long long v55 = *(_OWORD *)(v54 + 72);
    uint64_t v56 = *((void *)&v102 + 1);
    uint64_t v57 = v103;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(void *)(a1 + 40) = v56;
    *(void *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v87;
  if (v87)
  {
    if (v88) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v87 + 40))(v87, v90);
    }
  }
  return result;
}

void re::Vector3FAnimationBlendTree::~Vector3FAnimationBlendTree(re::Vector3FAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<re::Vector3<float>>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Vector3<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Vector3<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Vector3<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D2DE0;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::Vector4FAnimationBlendTree::~Vector4FAnimationBlendTree(re::Vector4FAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<re::Vector4<float>>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Vector4<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Vector4<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Vector4<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D2F10;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::Quaternion<float>>::buildRig(uint64_t a1, void *a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = __str;
  uint64_t v105 = *MEMORY[0x263EF8340];
  double v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_120;
  }
  uint64_t v8 = a2[50];
  double v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    uint64_t v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    unint64_t v61 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v96 = 2048;
    *(void *)(v5 + 20) = v61;
    __int16 v98 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v8 + 32);
  long long v13 = (const char **)(v12 + 88 * a4);
  uint64_t v14 = v13[1];
  unint64_t v15 = a4;
  unint64_t v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    BOOL v16 = re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    uint64_t v17 = 159940756;
    if (v16)
    {
      uint64_t v17 = 0x3518CB532193D904;
      unint64_t v18 = "MultiplyQuaternion";
    }
    else
    {
      unint64_t v18 = "Slerp";
    }
    *(void *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (void)v85)
    {
      if (BYTE8(v85)) {
        (*(void (**)(void))(*(void *)v85 + 40))();
      }
      long long v85 = 0u;
      long long v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip) {
         && !re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  }
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((void)v82)
      {
        if (BYTE8(v82)) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        long long v82 = 0u;
        long long v83 = 0u;
      }
    }
  }
  uint64_t v19 = v11 + 80 * v15;
  uint64_t v21 = *(void *)(v19 + 24);
  uint64_t v20 = (void *)(v19 + 24);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (void *)(v11 + 80 * v15 + 40);
    long long v66 = (const char **)(a2 + 39);
    uint64_t v63 = (_anonymous_namespace_ *)(a3 + 52);
    uint64_t v64 = v23;
    long long v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::Quaternion<float>>::buildRig(v78, a2, a3, *(void *)(*v23 + 8 * (void)v22), a5);
      if (!v78[0] && (void)v79)
      {
        if (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        long long v79 = 0u;
        long long v80 = 0u;
      }
      uint64_t v24 = (void *)*v20;
      if (*v20 <= (unint64_t)v22) {
        break;
      }
      uint64_t v25 = *(char **)(*v23 + 8 * (void)v22);
      unint64_t v15 = a2[3];
      if (v15 <= (unint64_t)v25) {
        goto LABEL_111;
      }
      uint64_t v26 = a2[50];
      unint64_t v15 = *(void *)(v26 + 16);
      if (v15 <= (unint64_t)v25) {
        goto LABEL_112;
      }
      unint64_t v27 = v68;
      if (v15 <= v68) {
        goto LABEL_113;
      }
      uint64_t v28 = a5;
      uint64_t v29 = a2[5];
      unint64_t v15 = *(void *)(v26 + 32);
      unint64_t v30 = v15 + 88 * (void)v25;
      uint64_t v31 = v29 + 80 * (void)v25;
      unsigned int v33 = *(char **)(v31 + 72);
      unint64_t v32 = (void *)(v31 + 72);
      uint64_t v67 = v33;
      uint64_t v34 = *(const char **)(v29 + 80 * (void)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          uint64_t v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          uint64_t v36 = (char *)v68;
          if ((unint64_t)a5 <= v68) {
            goto LABEL_119;
          }
          uint64_t v34 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (void)v25 + 80));
            if (v88) {
              unint64_t v37 = v90;
            }
            else {
              unint64_t v37 = v89;
            }
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if ((uint64_t)v100.var1) {
              unint64_t v38 = (const char *)v101;
            }
            else {
              unint64_t v38 = (char *)&v100.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (void)v76)
            {
              if (BYTE8(v76)) {
                (*(void (**)(void))(*(void *)v76 + 40))();
              }
              long long v76 = 0u;
              long long v77 = 0u;
            }
            if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v100.var0 + 40))();
            }
            unint64_t v39 = v15 + 88 * (void)v25;
            unint64_t v41 = *(void *)(v39 + 64);
            uint64_t v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (unint64_t v42 = *(unsigned char **)(v15 + 88 * (void)v25 + 72)) != 0 && !*v42) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(void *)(v30 + 8));
            }
            else {
              re::StringID::StringID((re::StringID *)&v100, v40);
            }
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            uint64_t v34 = "input2";
          }
        }
        else
        {
          uint64_t v34 = "input1";
        }
      }
      if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v88) {
          uint64_t v43 = v90;
        }
        else {
          uint64_t v43 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          char v44 = (const char *)v101;
        }
        else {
          char v44 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v72[0] && (void)v73)
        {
          if (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          long long v73 = 0u;
          long long v74 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        *(void *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        int v45 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (void *)(v15 + 88 * (void)v25 + 32));
        id v46 = (char *)*a5;
        unint64_t v15 = a3[45];
        if (v15 <= *a5)
        {
          uint64_t v91 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 468;
          __int16 v96 = 2048;
          uint64_t v97 = v46;
          __int16 v98 = 2048;
          uint64_t v99 = (void *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v91 = 0;
          double v6 = __str;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          uint64_t v5 = v36;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 797;
          __int16 v96 = 2048;
          uint64_t v97 = v5;
          __int16 v98 = 2048;
          uint64_t v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          unint64_t v60 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v96 = 2048;
          *(void *)(v5 + 20) = v60;
          __int16 v98 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(void *)(a3[46] + 8 * (void)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v88) {
          __int16 v47 = v90;
        }
        else {
          __int16 v47 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          int v48 = (const char *)v101;
        }
        else {
          int v48 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (void)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v69[0] && (void)v70)
        {
          if (BYTE8(v70)) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
          long long v70 = 0u;
          long long v71 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (void)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (void)v25))
          && *(v32 - 1) <= 1uLL)
        {
          __int16 v49 = v67;
          if (*v32 && !*(unsigned char *)*v32) {
            __int16 v49 = "output";
          }
        }
        else
        {
          __int16 v49 = v67;
        }
        if (v88) {
          unsigned int v50 = v90;
        }
        else {
          unsigned int v50 = v89;
        }
        long long v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(unsigned char *)&v100.var0)
        {
          uint64_t v53 = *re::animationLogObjects(v51);
          long long v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22) {
        goto LABEL_103;
      }
    }
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v25 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v22;
    __int16 v98 = 2048;
    uint64_t v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 789;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v91 = 0;
    uint64_t v53 = __str;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    long long v54 = (char *)&_os_log_internal;
    uint64_t v58 = (char *)v27;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v58;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if (v102) {
      unsigned int v59 = (char *)*((void *)&v102 + 1);
    }
    else {
      unsigned int v59 = (char *)&v102 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    long long v55 = *(_OWORD *)(v54 + 72);
    uint64_t v56 = *((void *)&v102 + 1);
    uint64_t v57 = v103;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(void *)(a1 + 40) = v56;
    *(void *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v87;
  if (v87)
  {
    if (v88) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v87 + 40))(v87, v90);
    }
  }
  return result;
}

void re::QuaternionFAnimationBlendTree::~QuaternionFAnimationBlendTree(re::QuaternionFAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<re::Quaternion<float>>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Quaternion<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Quaternion<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Quaternion<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D3040;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::GenericSRT<float>>::buildRig(uint64_t a1, void *a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = __str;
  uint64_t v105 = *MEMORY[0x263EF8340];
  double v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_120;
  }
  uint64_t v8 = a2[50];
  double v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    uint64_t v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    unint64_t v61 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v96 = 2048;
    *(void *)(v5 + 20) = v61;
    __int16 v98 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v8 + 32);
  long long v13 = (const char **)(v12 + 88 * a4);
  uint64_t v14 = v13[1];
  unint64_t v15 = a4;
  unint64_t v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    BOOL v16 = re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    unint64_t v17 = 0x20CE5B61BCLL;
    if (v16)
    {
      unint64_t v17 = 0xE80C09D1C21497E0;
      unint64_t v18 = "AdditiveBlendSRT";
    }
    else
    {
      unint64_t v18 = "LerpSRT";
    }
    *(void *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (void)v85)
    {
      if (BYTE8(v85)) {
        (*(void (**)(void))(*(void *)v85 + 40))();
      }
      long long v85 = 0u;
      long long v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip) {
         && !re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  }
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((void)v82)
      {
        if (BYTE8(v82)) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        long long v82 = 0u;
        long long v83 = 0u;
      }
    }
  }
  uint64_t v19 = v11 + 80 * v15;
  uint64_t v21 = *(void *)(v19 + 24);
  uint64_t v20 = (void *)(v19 + 24);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (void *)(v11 + 80 * v15 + 40);
    long long v66 = (const char **)(a2 + 39);
    uint64_t v63 = (_anonymous_namespace_ *)(a3 + 52);
    uint64_t v64 = v23;
    long long v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::GenericSRT<float>>::buildRig(v78, a2, a3, *(void *)(*v23 + 8 * (void)v22), a5);
      if (!v78[0] && (void)v79)
      {
        if (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        long long v79 = 0u;
        long long v80 = 0u;
      }
      uint64_t v24 = (void *)*v20;
      if (*v20 <= (unint64_t)v22) {
        break;
      }
      uint64_t v25 = *(char **)(*v23 + 8 * (void)v22);
      unint64_t v15 = a2[3];
      if (v15 <= (unint64_t)v25) {
        goto LABEL_111;
      }
      uint64_t v26 = a2[50];
      unint64_t v15 = *(void *)(v26 + 16);
      if (v15 <= (unint64_t)v25) {
        goto LABEL_112;
      }
      unint64_t v27 = v68;
      if (v15 <= v68) {
        goto LABEL_113;
      }
      uint64_t v28 = a5;
      uint64_t v29 = a2[5];
      unint64_t v15 = *(void *)(v26 + 32);
      unint64_t v30 = v15 + 88 * (void)v25;
      uint64_t v31 = v29 + 80 * (void)v25;
      unsigned int v33 = *(char **)(v31 + 72);
      unint64_t v32 = (void *)(v31 + 72);
      uint64_t v67 = v33;
      uint64_t v34 = *(const char **)(v29 + 80 * (void)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          uint64_t v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          uint64_t v36 = (char *)v68;
          if ((unint64_t)a5 <= v68) {
            goto LABEL_119;
          }
          uint64_t v34 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (void)v25 + 80));
            if (v88) {
              unint64_t v37 = v90;
            }
            else {
              unint64_t v37 = v89;
            }
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if ((uint64_t)v100.var1) {
              unint64_t v38 = (const char *)v101;
            }
            else {
              unint64_t v38 = (char *)&v100.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (void)v76)
            {
              if (BYTE8(v76)) {
                (*(void (**)(void))(*(void *)v76 + 40))();
              }
              long long v76 = 0u;
              long long v77 = 0u;
            }
            if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v100.var0 + 40))();
            }
            unint64_t v39 = v15 + 88 * (void)v25;
            unint64_t v41 = *(void *)(v39 + 64);
            uint64_t v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (unint64_t v42 = *(unsigned char **)(v15 + 88 * (void)v25 + 72)) != 0 && !*v42) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(void *)(v30 + 8));
            }
            else {
              re::StringID::StringID((re::StringID *)&v100, v40);
            }
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            uint64_t v34 = "input2";
          }
        }
        else
        {
          uint64_t v34 = "input1";
        }
      }
      if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v88) {
          uint64_t v43 = v90;
        }
        else {
          uint64_t v43 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          char v44 = (const char *)v101;
        }
        else {
          char v44 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v72[0] && (void)v73)
        {
          if (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          long long v73 = 0u;
          long long v74 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        *(void *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        int v45 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (void *)(v15 + 88 * (void)v25 + 32));
        id v46 = (char *)*a5;
        unint64_t v15 = a3[45];
        if (v15 <= *a5)
        {
          uint64_t v91 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 468;
          __int16 v96 = 2048;
          uint64_t v97 = v46;
          __int16 v98 = 2048;
          uint64_t v99 = (void *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v91 = 0;
          double v6 = __str;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          uint64_t v5 = v36;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 797;
          __int16 v96 = 2048;
          uint64_t v97 = v5;
          __int16 v98 = 2048;
          uint64_t v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          unint64_t v60 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v96 = 2048;
          *(void *)(v5 + 20) = v60;
          __int16 v98 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(void *)(a3[46] + 8 * (void)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v88) {
          __int16 v47 = v90;
        }
        else {
          __int16 v47 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          int v48 = (const char *)v101;
        }
        else {
          int v48 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (void)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v69[0] && (void)v70)
        {
          if (BYTE8(v70)) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
          long long v70 = 0u;
          long long v71 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (void)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (void)v25))
          && *(v32 - 1) <= 1uLL)
        {
          __int16 v49 = v67;
          if (*v32 && !*(unsigned char *)*v32) {
            __int16 v49 = "output";
          }
        }
        else
        {
          __int16 v49 = v67;
        }
        if (v88) {
          unsigned int v50 = v90;
        }
        else {
          unsigned int v50 = v89;
        }
        long long v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(unsigned char *)&v100.var0)
        {
          uint64_t v53 = *re::animationLogObjects(v51);
          long long v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22) {
        goto LABEL_103;
      }
    }
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v25 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v22;
    __int16 v98 = 2048;
    uint64_t v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 789;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v91 = 0;
    uint64_t v53 = __str;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    long long v54 = (char *)&_os_log_internal;
    uint64_t v58 = (char *)v27;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v58;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if (v102) {
      unsigned int v59 = (char *)*((void *)&v102 + 1);
    }
    else {
      unsigned int v59 = (char *)&v102 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    long long v55 = *(_OWORD *)(v54 + 72);
    uint64_t v56 = *((void *)&v102 + 1);
    uint64_t v57 = v103;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(void *)(a1 + 40) = v56;
    *(void *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v87;
  if (v87)
  {
    if (v88) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v87 + 40))(v87, v90);
    }
  }
  return result;
}

void re::SRTAnimationBlendTree::~SRTAnimationBlendTree(re::SRTAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<re::GenericSRT<float>>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::GenericSRT<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::GenericSRT<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::GenericSRT<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D3170;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::SkeletalPose>::buildRig(uint64_t a1, void *a2, void *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5 = __str;
  uint64_t v105 = *MEMORY[0x263EF8340];
  double v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4) {
    goto LABEL_120;
  }
  uint64_t v8 = a2[50];
  double v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    uint64_t v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    unint64_t v61 = a4;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(void *)(v5 + 4) = "operator[]";
    __int16 v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    __int16 v96 = 2048;
    *(void *)(v5 + 20) = v61;
    __int16 v98 = 2048;
    *(void *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v8 + 32);
  long long v13 = (const char **)(v12 + 88 * a4);
  uint64_t v14 = v13[1];
  unint64_t v15 = a4;
  unint64_t v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    BOOL v16 = re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    uint64_t v17 = 0x37782BFAD24CDBACLL;
    if (v16)
    {
      uint64_t v17 = 0x1AD1CC0AEFF59584;
      unint64_t v18 = "BlendAdditiveRigHierarchy";
    }
    else
    {
      unint64_t v18 = "BlendRigHierarchy";
    }
    *(void *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (void)v85)
    {
      if (BYTE8(v85)) {
        (*(void (**)(void))(*(void *)v85 + 40))();
      }
      long long v85 = 0u;
      long long v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip) {
         && !re::StringID::operator==((void *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  }
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((void)v82)
      {
        if (BYTE8(v82)) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        long long v82 = 0u;
        long long v83 = 0u;
      }
    }
  }
  uint64_t v19 = v11 + 80 * v15;
  uint64_t v21 = *(void *)(v19 + 24);
  uint64_t v20 = (void *)(v19 + 24);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = (void *)(v11 + 80 * v15 + 40);
    long long v66 = (const char **)(a2 + 39);
    uint64_t v63 = (_anonymous_namespace_ *)(a3 + 52);
    uint64_t v64 = v23;
    long long v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::SkeletalPose>::buildRig(v78, a2, a3, *(void *)(*v23 + 8 * (void)v22), a5);
      if (!v78[0] && (void)v79)
      {
        if (BYTE8(v79)) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        long long v79 = 0u;
        long long v80 = 0u;
      }
      uint64_t v24 = (void *)*v20;
      if (*v20 <= (unint64_t)v22) {
        break;
      }
      uint64_t v25 = *(char **)(*v23 + 8 * (void)v22);
      unint64_t v15 = a2[3];
      if (v15 <= (unint64_t)v25) {
        goto LABEL_111;
      }
      uint64_t v26 = a2[50];
      unint64_t v15 = *(void *)(v26 + 16);
      if (v15 <= (unint64_t)v25) {
        goto LABEL_112;
      }
      unint64_t v27 = v68;
      if (v15 <= v68) {
        goto LABEL_113;
      }
      uint64_t v28 = a5;
      uint64_t v29 = a2[5];
      unint64_t v15 = *(void *)(v26 + 32);
      unint64_t v30 = v15 + 88 * (void)v25;
      uint64_t v31 = v29 + 80 * (void)v25;
      unsigned int v33 = *(char **)(v31 + 72);
      unint64_t v32 = (void *)(v31 + 72);
      uint64_t v67 = v33;
      uint64_t v34 = *(const char **)(v29 + 80 * (void)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          uint64_t v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          uint64_t v36 = (char *)v68;
          if ((unint64_t)a5 <= v68) {
            goto LABEL_119;
          }
          uint64_t v34 = "input2";
          if (!re::StringID::operator==((void *)(*(void *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (void)v25 + 80));
            if (v88) {
              unint64_t v37 = v90;
            }
            else {
              unint64_t v37 = v89;
            }
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if ((uint64_t)v100.var1) {
              unint64_t v38 = (const char *)v101;
            }
            else {
              unint64_t v38 = (char *)&v100.var1 + 1;
            }
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (void)v76)
            {
              if (BYTE8(v76)) {
                (*(void (**)(void))(*(void *)v76 + 40))();
              }
              long long v76 = 0u;
              long long v77 = 0u;
            }
            if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
              (*(void (**)(void))(**(void **)&v100.var0 + 40))();
            }
            unint64_t v39 = v15 + 88 * (void)v25;
            unint64_t v41 = *(void *)(v39 + 64);
            uint64_t v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (unint64_t v42 = *(unsigned char **)(v15 + 88 * (void)v25 + 72)) != 0 && !*v42) {
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(void *)(v30 + 8));
            }
            else {
              re::StringID::StringID((re::StringID *)&v100, v40);
            }
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            uint64_t v34 = "input2";
          }
        }
        else
        {
          uint64_t v34 = "input1";
        }
      }
      if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if (v88) {
          uint64_t v43 = v90;
        }
        else {
          uint64_t v43 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          char v44 = (const char *)v101;
        }
        else {
          char v44 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v72[0] && (void)v73)
        {
          if (BYTE8(v73)) {
            (*(void (**)(void))(*(void *)v73 + 40))();
          }
          long long v73 = 0u;
          long long v74 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        *(void *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        int v45 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (void *)(v15 + 88 * (void)v25 + 32));
        id v46 = (char *)*a5;
        unint64_t v15 = a3[45];
        if (v15 <= *a5)
        {
          uint64_t v91 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 468;
          __int16 v96 = 2048;
          uint64_t v97 = v46;
          __int16 v98 = 2048;
          uint64_t v99 = (void *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          uint64_t v91 = 0;
          double v6 = __str;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          StringID v100 = (StringID)0;
          uint64_t v5 = v36;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          long long v93 = "operator[]";
          __int16 v94 = 1024;
          int v95 = 797;
          __int16 v96 = 2048;
          uint64_t v97 = v5;
          __int16 v98 = 2048;
          uint64_t v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          uint64_t v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          unint64_t v60 = a4;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(void *)(v5 + 4) = "operator[]";
          __int16 v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          __int16 v96 = 2048;
          *(void *)(v5 + 20) = v60;
          __int16 v98 = 2048;
          *(void *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(void *)(a3[46] + 8 * (void)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((void *)(v15 + 88 * (void)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if (v88) {
          __int16 v47 = v90;
        }
        else {
          __int16 v47 = v89;
        }
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if ((uint64_t)v100.var1) {
          int v48 = (const char *)v101;
        }
        else {
          int v48 = (char *)&v100.var1 + 1;
        }
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (void)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
        if (!v69[0] && (void)v70)
        {
          if (BYTE8(v70)) {
            (*(void (**)(void))(*(void *)v70 + 40))();
          }
          long long v70 = 0u;
          long long v71 = 0u;
        }
        if (*(void *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0) {
          (*(void (**)(void))(**(void **)&v100.var0 + 40))();
        }
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (void)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (void)v25))
          && *(v32 - 1) <= 1uLL)
        {
          __int16 v49 = v67;
          if (*v32 && !*(unsigned char *)*v32) {
            __int16 v49 = "output";
          }
        }
        else
        {
          __int16 v49 = v67;
        }
        if (v88) {
          unsigned int v50 = v90;
        }
        else {
          unsigned int v50 = v89;
        }
        long long v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(unsigned char *)&v100.var0)
        {
          uint64_t v53 = *re::animationLogObjects(v51);
          long long v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          goto LABEL_114;
        }
        a5 = v28;
        unsigned int v23 = v64;
        uint64_t v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22) {
        goto LABEL_103;
      }
    }
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    uint64_t v25 = (char *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v22;
    __int16 v98 = 2048;
    uint64_t v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 789;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v91 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v25;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v91 = 0;
    uint64_t v53 = __str;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    StringID v100 = (StringID)0;
    long long v54 = (char *)&_os_log_internal;
    uint64_t v58 = (char *)v27;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    long long v93 = "operator[]";
    __int16 v94 = 1024;
    int v95 = 797;
    __int16 v96 = 2048;
    uint64_t v97 = v58;
    __int16 v98 = 2048;
    uint64_t v99 = (void *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if (v102) {
      unsigned int v59 = (char *)*((void *)&v102 + 1);
    }
    else {
      unsigned int v59 = (char *)&v102 + 1;
    }
    *(_DWORD *)__str = 136315138;
    *(void *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    long long v55 = *(_OWORD *)(v54 + 72);
    uint64_t v56 = *((void *)&v102 + 1);
    uint64_t v57 = v103;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(void *)(a1 + 40) = v56;
    *(void *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(unsigned char *)a1 = 1;
  }
  uint64_t result = v87;
  if (v87)
  {
    if (v88) {
      return (*(uint64_t (**)(uint64_t, const char *))(*(void *)v87 + 40))(v87, v90);
    }
  }
  return result;
}

void re::SkeletalPoseAnimationBlendTree::~SkeletalPoseAnimationBlendTree(re::SkeletalPoseAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree((uint64_t *)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTree<re::SkeletalPose>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::SkeletalPose>::child(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::SkeletalPose>::totalDuration(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  if (v1)
  {
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 40))(v5);
        unint64_t v1 = *(void *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v7 = *(void *)(*(void *)(a1 + 320) + 8 * v3);
          float v4 = (*(double (**)(uint64_t))(*(void *)v7 + 40))(v7);
          unint64_t v1 = *(void *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::SkeletalPose>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

void re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree(uint64_t *a1)
{
  re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E6D32A0;
  uint64_t v2 = (uint64_t)(a1 + 30);
  uint64_t v3 = (uint64_t)(a1 + 57);
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 73));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 68));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 62);
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v3);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 52));
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 47));
  re::FixedArray<CoreIKTransform>::deinit(a1 + 44);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 41);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 38);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 35);
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)(a1 + 25));
  re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)(a1 + 20));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 15));
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)(a1 + 10));
  *a1 = (uint64_t)&unk_26E6BF1F0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::BlendShapeWeightsAnimation::~BlendShapeWeightsAnimation(re::BlendShapeWeightsAnimation *this)
{
  *(void *)this = &unk_26E6C35D0;
  if (*((unsigned char *)this + 168)) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 176));
  }
  if (*((unsigned char *)this + 128)) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 136));
  }
  if (*((unsigned char *)this + 88)) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 96));
  }
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit((re::BlendShapeWeightsAnimation *)((char *)this + 40));
  re::StringID::destroyString((re::BlendShapeWeightsAnimation *)((char *)this + 24));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6C35D0;
  if (*((unsigned char *)this + 168)) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 176));
  }
  if (*((unsigned char *)this + 128)) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 136));
  }
  if (*((unsigned char *)this + 88)) {
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 96));
  }
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit((re::BlendShapeWeightsAnimation *)((char *)this + 40));
  re::StringID::destroyString((re::BlendShapeWeightsAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::AnimationImpl<re::BlendShapeWeights>::evaluateCore(uint64_t a1, uint64_t a2)
{
}

ArcSharedObject *re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>(re *a1, uint64_t a2)
{
  float v4 = re::globalAllocators(a1);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 104, 8);
  double v6 = *(const StringID **)(a2 + 16);
  v8[0] = *(const StringID **)(a2 + 32);
  v8[1] = v6;
  *(void *)a1 = v5;
  return result;
}

void re::BlendShapeWeightsSampledAnimation::~BlendShapeWeightsSampledAnimation(re::BlendShapeWeightsSampledAnimation *this)
{
  *(void *)this = &unk_26E6C1050;
  uint64_t v2 = (re::BlendShapeWeightsSampledAnimation *)((char *)this + 40);
  re::FixedArray<re::BlendShapeWeights>::deinit((void *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C1050;
  uint64_t v2 = (re::BlendShapeWeightsSampledAnimation *)((char *)this + 40);
  re::FixedArray<re::BlendShapeWeights>::deinit((void *)this + 11);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

void re::FixedArray<re::BlendShapeWeights>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 32 * a3;
  double v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 32);
    uint64_t v8 = (_OWORD *)((char *)v8 + v5 - 32);
  }
  *uint64_t v8 = 0u;
  v8[1] = 0u;
}

void re::BlendShapeWeightsAnimationClip::~BlendShapeWeightsAnimationClip(re::BlendShapeWeightsAnimationClip *this)
{
  *(void *)this = &unk_26E6BF1F0;
  unint64_t v1 = (re::BlendShapeWeightsAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::BlendShapeWeightsAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
}

{
  re::StringID *v1;
  uint64_t vars8;

  *(void *)this = &unk_26E6BF1F0;
  unint64_t v1 = (re::BlendShapeWeightsAnimationClip *)((char *)this + 24);
  re::DynamicString::deinit((re::BlendShapeWeightsAnimationClip *)((char *)this + 40));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

BOOL re::AnimationClip<re::BlendShapeWeights>::childCount(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::child(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

double re::AnimationClip<re::BlendShapeWeights>::totalDuration(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 88)) {
      double v3 = *(double *)(a1 + 96);
    }
    else {
      double v3 = 0.0;
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    if (*(unsigned char *)(a1 + 104)) {
      double v5 = *(double *)(a1 + 112);
    }
    double v4 = v5 - v3;
  }
  else
  {
    double v4 = 0.0;
  }
  if (*(unsigned char *)(a1 + 144)) {
    double v4 = *(double *)(a1 + 152);
  }
  return *(double *)(a1 + 136) + v4 / fabsf(*(float *)(a1 + 160));
}

float re::AnimationClip<re::BlendShapeWeights>::timelineDesc@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 88)) {
      double v5 = *(double *)(a1 + 96);
    }
    else {
      double v5 = 0.0;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    if (*(unsigned char *)(a1 + 104)) {
      double v7 = *(double *)(a1 + 112);
    }
    float v6 = v7 - v5;
  }
  else
  {
    float v6 = 0.0;
    double v5 = 0.0;
    double v7 = 0.0;
  }
  if (!*(unsigned char *)(a1 + 144) || (double v8 = *(double *)(a1 + 152), v8 == 0.0))
  {
    char v9 = *(unsigned char *)(a1 + 164);
    if (v9) {
      float v6 = INFINITY;
    }
  }
  else
  {
    float v6 = v8;
    char v9 = *(unsigned char *)(a1 + 164);
  }
  float v10 = *(double *)(a1 + 136);
  *(float *)a2 = v10;
  *(float *)(a2 + 4) = v6;
  float v11 = *(float *)(a1 + 160);
  if (*(unsigned char *)(a1 + 128)) {
    float v11 = -v11;
  }
  float v12 = v5;
  *(float *)(a2 + 8) = v11;
  *(float *)(a2 + 12) = v12;
  float result = v7;
  float v14 = *(double *)(a1 + 120);
  *(float *)(a2 + 16) = result;
  *(float *)(a2 + 20) = v14;
  *(unsigned char *)(a2 + 24) = v9;
  *(unsigned char *)(a2 + 25) = *(unsigned char *)(a1 + 16);
  return result;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::createInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) != 1) {
    return a1;
  }
  unint64_t v9 = a5 + 1;
  if (*(void *)(a4 + 128) <= v9)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 136) + 8 * v9);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 80))(v10)) {
    return a1;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 168, 8);
  *(void *)uint64_t v11 = &unk_26E6BF1F0;
  char v12 = *(unsigned char *)(a1 + 16);
  *(void *)(v11 + 8) = *(void *)(a1 + 8);
  *(unsigned char *)(v11 + 16) = v12;
  re::StringID::StringID((re::StringID *)(v11 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v11 + 40), (const re::DynamicString *)(a1 + 40));
  *(unsigned char *)(v11 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(unsigned char *)(a1 + 72);
  *(void *)uint64_t v11 = &unk_26E6D3500;
  *(void *)(v11 + 80) = *(void *)(a1 + 80);
  int v13 = *(unsigned __int8 *)(a1 + 88);
  *(unsigned char *)(v11 + 88) = v13;
  if (v13) {
    *(void *)(v11 + 96) = *(void *)(a1 + 96);
  }
  int v14 = *(unsigned __int8 *)(a1 + 104);
  *(unsigned char *)(v11 + 104) = v14;
  if (v14) {
    *(void *)(v11 + 112) = *(void *)(a1 + 112);
  }
  long long v15 = *(_OWORD *)(a1 + 120);
  *(void *)(v11 + 136) = *(void *)(a1 + 136);
  *(_OWORD *)(v11 + 120) = v15;
  int v16 = *(unsigned __int8 *)(a1 + 144);
  *(unsigned char *)(v11 + 144) = v16;
  if (v16) {
    *(void *)(v11 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152) = *(void *)(a1 + 152);
  }
  int v17 = *(_DWORD *)(a1 + 160);
  *(_WORD *)(v11 + 164) = *(_WORD *)(a1 + 164);
  *(_DWORD *)(v11 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = v17;
  if (*(void *)(a4 + 128) <= v9)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(void *)(v11 + 80) = *(void *)(*(void *)(a4 + 136) + 8 * v9);
  *(unsigned char *)(v11 + 165) = 1;
  return v11;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::isInstanced(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 165);
}

uint64_t *re::AnimationClip<re::BlendShapeWeights>::evaluateCore(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  v45[0] = a2;
  v45[1] = a3;
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    a1 = _os_crash();
    __break(1u);
LABEL_10:
    uint64_t v21 = a1;
    memset(v44, 0, sizeof(v44));
    memset(v43, 0, sizeof(v43));
    re::BlendShapeWeights::init((uint64_t *)v44, v7 + 3);
    re::BlendShapeWeights::init((uint64_t *)v43, v7 + 3);
    if (v32[0] && v33 == 1)
    {
      uint64_t v15 = *(void *)(v21 + 80);
      v14.n128_u64[0] = 0;
      uint64_t v16 = 0;
      if (v15)
      {
        if (*(unsigned char *)(v21 + 88)) {
          uint64_t v16 = *(void *)(v21 + 96);
        }
        (*(void (**)(uint64_t, __n128))(*(void *)v15 + 40))(v15, v14);
        if (*(unsigned char *)(v21 + 104)) {
          v14.n128_u64[0] = *(void *)(v21 + 112);
        }
      }
      uint64_t v34 = 0;
      char v37 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      char v41 = 0;
      v32[0] = 3;
      char v35 = 1;
      uint64_t v36 = v16;
      uint64_t v42 = 0x200000000;
      int v38 = 1065353216;
      uint64_t v23 = 0;
      char v26 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      char v30 = 0;
      v22[0] = 3;
      char v24 = 1;
      unint64_t v25 = v14.n128_u64[0];
      uint64_t v31 = 0x200000000;
      int v27 = 1065353216;
      if (*(unsigned char *)(v21 + 128)) {
        int v17 = v43;
      }
      else {
        int v17 = v44;
      }
      if (*(unsigned char *)(v21 + 128)) {
        unint64_t v18 = v44;
      }
      else {
        unint64_t v18 = v43;
      }
      (*(void (**)(uint64_t *, unsigned char *, uint64_t, uint64_t *, uint64_t, _OWORD *))(*v8 + 88))(v8, v32, 1, v7, v6, v17);
      (*(void (**)(uint64_t *, char *, uint64_t, uint64_t *, uint64_t, _OWORD *))(*v8 + 88))(v8, v22, 1, v7, v6, v18);
      re::AnimationValueTraits<re::BlendShapeWeights>::invert(v44, v44);
      *(float *)&double v19 = re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, v43, v44);
      re::internal::assertLog((re::internal *)4, v20, v19, "assertion failure: '%s' (%s:line %i) Not yet implemented.", "!\"Unreachable code\"", "repeat", 160);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Not yet implemented. Cycle-offset computation currently does not yet support nested animations.", "internal::countTimelines(*source) == 1", "evaluateCore", 286);
    float result = (uint64_t *)_os_crash();
    __break(1u);
    return result;
  }
  double v7 = a4;
  double v8 = *(uint64_t **)(a1 + 80);
  if (v8)
  {
    uint64_t v6 = a5;
    if (*(unsigned char *)(a1 + 164) != 2 || !vcvtms_s32_f32(*(float *)(a2 + 60)))
    {
      uint64_t v10 = re::Slice<re::AnimationClock>::range(v45, 1uLL, a3);
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*v8 + 88))(v8, v10, v11, v7, v6, a6);
    }
    goto LABEL_10;
  }
  return re::AnimationValueTraits<re::BlendShapeWeights>::copy(a4, a6);
}

void *re::AnimationClip<re::BlendShapeWeights>::~AnimationClip(void *a1)
{
  *a1 = &unk_26E6BF1F0;
  uint64_t v2 = (re::StringID *)(a1 + 3);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString(v2);
  return a1;
}

void re::AnimationClip<re::BlendShapeWeights>::~AnimationClip(void *a1)
{
  *a1 = &unk_26E6BF1F0;
  unint64_t v1 = (re::StringID *)(a1 + 3);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 5));
  re::StringID::destroyString(v1);
  JUMPOUT(0x237DBCBD0);
}

void re::BlendShapeWeightsKeyframeAnimation::~BlendShapeWeightsKeyframeAnimation(re::BlendShapeWeightsKeyframeAnimation *this)
{
  *(void *)this = &unk_26E6C2E58;
  uint64_t v2 = (re::BlendShapeWeightsKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<re::BlendShapeWeights>::deinit((void *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimation *)((char *)this + 24));
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C2E58;
  uint64_t v2 = (re::BlendShapeWeightsKeyframeAnimation *)((char *)this + 40);
  re::FixedArray<re::BlendShapeWeights>::deinit((void *)this + 13);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 10);
  *(void *)this = &unk_26E6BF1F0;
  re::DynamicString::deinit(v2);
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::MaterialAsset::assetType(re::MaterialAsset *this)
{
  {
    re::MaterialAsset::assetType(void)::type = (uint64_t)"Material";
    qword_26879E648 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MaterialAsset::assetType(void)::type);
  }
  return &re::MaterialAsset::assetType(void)::type;
}

uint64_t re::AssetHandle::loadedAsset<re::MaterialAsset>(re::MaterialAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  re::MaterialAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::MaterialAsset::assetType(void)::type, 1);
}

uint64_t re::MaterialAsset::getOriginalConstantParameterType(re::MaterialAsset *this, const char *a2)
{
  uint64_t v2 = (char *)this + 1680;
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        double v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = v3;
  uint64_t result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v2, &v8);
  if (result) {
    return *(unsigned __int8 *)(result + 20);
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 40 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 40 * v4 + 8) == v2) {
        return v6 + 40 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 40 * v4 + 16;
}

uint64_t *re::MaterialAsset::tryGetOriginalColorGamut3FParameterValue@<X0>(re::MaterialAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 1680;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        double v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v12 = v5;
  uint64_t result = (uint64_t *)re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v12);
  if (result && *((unsigned char *)result + 20) == 20)
  {
    uint64_t v10 = *result;
    unint64_t v11 = *((unsigned int *)result + 2) | ((unint64_t)*((unsigned __int8 *)result + 16) << 32);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 4) = v10;
    *(void *)(a3 + 12) = v11;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

uint64_t re::MaterialAsset::tryGetOriginalColorGamut4FParameterValue@<X0>(re::MaterialAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (char *)this + 1680;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        double v7 = a2 + 2;
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *(unsigned __int8 *)v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v5;
  uint64_t result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v10);
  if (result && *(unsigned char *)(result + 20) == 21)
  {
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 4) = *(_OWORD *)result;
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 16);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

BOOL re::MaterialAsset::isColorTextureParameter(re::MaterialAsset *this, const re::StringID *a2)
{
  if (re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureBaseColor)
    || re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureBaseColorDetail)|| re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureSheenColor))
  {
    return 1;
  }
  return re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureEmissive);
}

uint64_t re::MaterialAsset::tryGetParameterBinding(re::MaterialAsset *this, const char *a2)
{
  unint64_t v3 = (char *)this + 1808;
  uint64_t v4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v3, (uint64_t)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v4;
}

void re::MaterialAsset::makeMaterialMemoryAsset(uint64_t a1, uint64_t a2, re::AssetHandle *a3, const char *a4, uint64_t a5)
{
  v12[0] = 0;
  uint64_t v12[2] = 0;
  void v12[4] = 0;
  v12[6] = 0;
  unsigned char v12[8] = 0;
  v12[10] = 0;
  v12[12] = 0;
  v12[14] = 0;
  v12[16] = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, a3);
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  re::MaterialAsset::makeMaterialMemoryAssetWithFunctionConstants(a1, a2, (re::AssetHandle *)v11, (uint64_t *)v9, v12, a4, a5);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

uint64_t re::MaterialAsset::makeMaterialMemoryAssetWithFunctionConstants(uint64_t a1, uint64_t a2, re::AssetHandle *a3, uint64_t *a4, unsigned __int8 *a5, const char *a6, uint64_t a7)
{
  uint64_t v13 = re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  MaterialAssetWithFunctionConstants = re::MaterialAsset::makeMaterialAssetWithFunctionConstants(v13, a2, v17, a4, a5, a6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  if (a6 && *a6)
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const char *, void, uint64_t, void))(*(void *)a1 + 424))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, a6, 0, a7, 0);
  }
  else
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, 0, a7, 0);
  }
}

void re::MaterialAsset::makeMutableMaterialMemoryAsset(uint64_t a1, uint64_t a2, re::AssetHandle *a3, const char *a4, uint64_t a5)
{
  v12[0] = 0;
  uint64_t v12[2] = 0;
  void v12[4] = 0;
  v12[6] = 0;
  unsigned char v12[8] = 0;
  v12[10] = 0;
  v12[12] = 0;
  v12[14] = 0;
  v12[16] = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, a3);
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  re::MaterialAsset::makeMutableMaterialMemoryAssetWithFunctionConstants(a1, a2, (re::AssetHandle *)v11, (uint64_t *)v9, v12, a4, a5);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

uint64_t re::MaterialAsset::makeMutableMaterialMemoryAssetWithFunctionConstants(uint64_t a1, uint64_t a2, re::AssetHandle *a3, uint64_t *a4, unsigned __int8 *a5, const char *a6, uint64_t a7)
{
  uint64_t v13 = re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  MaterialAssetWithFunctionConstants = re::MaterialAsset::makeMaterialAssetWithFunctionConstants(v13, a2, v17, a4, a5, a6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  if (a6 && *a6)
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const char *, uint64_t, uint64_t, void))(*(void *)a1 + 424))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, a6, 1, a7, 0);
  }
  else
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 416))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, 1, a7, 0);
  }
}

uint64_t *re::MaterialAsset::makeMaterialAssetWithFunctionConstants(re *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, const char *a6)
{
  unint64_t v11 = re::globalAllocators(a1);
  uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 1896, 8);
  bzero(v12, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v12);
  v77[0] = re::AssetHandle::operator=((uint64_t)(v12 + 5), a3);
  re::DynamicArray<re::TransitionCondition *>::add(v12 + 232, v77);
  uint64_t v13 = *(void *)(re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)a3) + 744);
  uint64_t v76 = v13;
  if (v13) {
    id v14 = (id)(v13 + 8);
  }
  bzero(v45, 0x210uLL);
  v45[16] = (uint64_t)&unk_26E6D3970;
  memset(&v45[17], 0, 24);
  long long v58 = 0u;
  long long v59 = 0u;
  int v60 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v46 = 0;
  int v57 = 0;
  int v64 = 1;
  uint64_t v67 = 0;
  int v68 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v71 = 0;
  int v72 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  int v75 = 0;
  v28[0] = *a5;
  if (v28[0]) {
    v28[1] = a5[1];
  }
  if (a5[2]) {
    unsigned __int8 v30 = a5[3];
  }
  if (a5[4]) {
    unsigned __int8 v32 = a5[5];
  }
  if (a5[6]) {
    unsigned __int8 v34 = a5[7];
  }
  if (a5[8]) {
    unsigned __int8 v36 = a5[9];
  }
  if (a5[10]) {
    unsigned __int8 v38 = a5[11];
  }
  if (a5[12]) {
    unsigned __int8 v40 = a5[13];
  }
  if (a5[14]) {
    unsigned __int8 v42 = a5[15];
  }
  if (a5[16]) {
    unsigned __int8 v44 = a5[17];
  }
  memset(v27, 0, 48);
  if (!a6) {
    a6 = "";
  }
  re::MaterialBuilder::MaterialBuilder((uint64_t)v77, &v76, v45, a4, v28, v27, (uint64_t)&v25, 0);
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*(void *)v25 + 40))();
  }
  re::FixedArray<re::LinkedFunction>::deinit(&v27[3]);
  re::FixedArray<re::LinkedFunction>::deinit(v27);
  re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)v45);
  if (v13) {

  }
  int v78 = 7;
  uint64_t v16 = *(void *)(a2 + 24);
  re::MaterialBuilder::MaterialBuilder((uint64_t)v24, (uint64_t)v77);
  re::MaterialManager::createMaterial(v16, (re::MaterialBuilder *)v24, v27);
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v24);
  v45[0] = a2;
  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)v45, &v25);
  uint64_t v17 = v27[0];
  if (v27[0])
  {
    id v18 = (id)(v27[0] + 8);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v12 + 208, v17);
  }
  else
  {
    uint64_t v19 = v12[208];
    if (v19)
    {

      v12[208] = 0;
    }
  }
  uint64_t v20 = v25;
  if (v25)
  {
    uint64_t v21 = (char *)v25 + 8;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v12 + 209, (uint64_t)v20);
  }
  else
  {
    uint64_t v22 = v12[209];
    if (v22)
    {

      v12[209] = 0;
    }
  }
  if (v25) {

  }
  if (v27[0]) {
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v77);
  }
  return v12;
}

uint64_t re::AssetHandle::asset<re::MaterialDefinitionAsset>(re::MaterialDefinitionAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::MaterialDefinitionAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        char v7 = (char *)v6[18];
      }
      else {
        char v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      unint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::MaterialAssetLoader::preloadAssets(re::MaterialAssetLoader *this)
{
  (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 8))(&v17);
  long long v2 = *((_OWORD *)this + 2);
  *((_OWORD *)this + 2) = v17;
  long long v17 = v2;
  uint64_t v3 = (char *)*((void *)this + 6);
  *((void *)this + 6) = v18;
  id v18 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 8))(&v17);
  long long v4 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 56) = v17;
  long long v17 = v4;
  uint64_t v5 = (char *)*((void *)this + 9);
  *((void *)this + 9) = v18;
  id v18 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 352))())
  {
    re::AssetHandle::loadAsync((re::MaterialAssetLoader *)((char *)this + 32));
    re::AssetHandle::loadAsync((re::MaterialAssetLoader *)((char *)this + 56));
  }
  re::Bundle::application(v16);
  re::Bundle::ID(v16, (re::DynamicString *)&v17);

  uint64_t v6 = *((void *)this + 2);
  if (v6 && *((void *)this + 3))
  {
    char v7 = (BYTE8(v17) & 1) != 0 ? v18 : (char *)&v17 + 9;
    if (!strcmp(v7, "com.disney.whatif"))
    {
      (*(void (**)(id *__return_ptr, uint64_t, const char *))(*(void *)v6 + 8))(v16, v6, "engine:videoMaterial.rematerialdefinition");
      uint64_t v8 = *((void *)this + 2);
      uint64_t v9 = *((void *)this + 3);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)v16);
      re::MaterialAsset::makeMaterialMemoryAsset(v8, v9, (re::AssetHandle *)v13, 0, 0);
      long long v10 = *((_OWORD *)this + 5);
      *((_OWORD *)this + 5) = v14;
      long long v14 = v10;
      uint64_t v11 = *((void *)this + 12);
      *((void *)this + 12) = v15;
      uint64_t v15 = v11;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
    }
  }
  uint64_t result = v17;
  if ((void)v17)
  {
    if (BYTE8(v17)) {
      return (*(uint64_t (**)(void))(*(void *)v17 + 40))();
    }
  }
  return result;
}

char **re::MaterialAssetLoader::introspectionType(re::MaterialAssetLoader *this)
{
  unint64_t v1 = &off_268773000;
  {
    unint64_t v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::MaterialAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"MaterialAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialAsset>, 0);
      unint64_t v1 = &off_268773000;
    }
  }
  return v1[248];
}

uint64_t re::MaterialAssetLoader::allocateSampleAsset(re::MaterialAssetLoader *this)
{
  long long v2 = re::globalAllocators(this);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 1896, 8);
  bzero((void *)v3, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v3);
  (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 8))(&v7);
  long long v4 = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v3 + 40) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  *(void *)&long long v7 = v3 + 40;
  re::DynamicArray<re::TransitionCondition *>::add((void *)(v3 + 1856), &v7);
  return v3;
}

uint64_t re::MaterialAssetLoader::registerAsset(re::MaterialAssetLoader *this, uint64_t a2, const re::ExistingAssetInformation *a3)
{
  if (!*((void *)this + 3)
    || ((*(uint64_t (**)(void))(**((void **)this + 2) + 408))(*((void *)this + 2)) & 1) != 0)
  {
    return 0;
  }
  if (*((void *)a3 + 10) == -1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)a3 + 10);
  }
  re::AssetManager::fromPeerID(*((os_unfair_lock_s **)this + 2), v7, (uint64_t)v25);
  uint64_t v8 = *((void *)this + 2);
  if (*((void *)a3 + 10) == -1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)a3 + 10);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 64));
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v8, v9, v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 64));
  v19[0] = 0;
  if (v22[0])
  {
    if (v24 && (uint64_t v10 = *(void *)(v24 + 24)) != 0) {
      re::AssetManager::deviceAssetPath(v10, (uint64_t)&v23, 0, 13, &v16);
    }
    else {
      LOBYTE(v16) = 0;
    }
    re::Optional<re::DynamicString>::operator=(v19, &v16);
    if (_BYTE)v16 && v17 && (v18) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    if (v25[0]) {
      uint64_t v11 = v26;
    }
    else {
      uint64_t v11 = 0;
    }
    v14[0] = v19[0];
    if (v19[0]) {
      re::DynamicString::DynamicString((re::DynamicString *)v15, (const re::DynamicString *)&v20);
    }
  }
  else
  {
    if (v25[0]) {
      uint64_t v11 = v26;
    }
    else {
      uint64_t v11 = 0;
    }
    v14[0] = 0;
  }
  if (*((void *)a3 + 17)) {
    uint64_t v12 = (char *)*((void *)a3 + 18);
  }
  else {
    uint64_t v12 = (char *)a3 + 137;
  }
  uint64_t v6 = re::MaterialAssetLoader::doRegisterAsset(this, a2, v11, v14, (uint64_t)v12);
  if (v14[0] && v15[0])
  {
    if (v15[1]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))();
    }
    memset(v15, 0, sizeof(v15));
  }
  if (v19[0] && v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  if (v22[0]) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v23);
  }
  return v6;
}

uint64_t re::MaterialAssetLoader::doRegisterAsset(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 1664);
  if (v6)
  {
    uint64_t v7 = 0;
    *(void *)(v6 + 1360) = a3;
    return v7;
  }
  uint64_t v11 = a1[3];
  uint64_t v12 = *(void *)(a2 + 1872);
  if (v12) {
    goto LABEL_9;
  }
  (*(void (**)(void *__return_ptr))(*a1 + 160))(v59);
  if (v59[0])
  {
    if (v61) {
      (*(void (**)(void))(*(void *)v59[0] + 40))();
    }
    uint64_t v61 = 0;
    memset(v59, 0, sizeof(v59));
    ++v60;
  }
  uint64_t v12 = *(void *)(a2 + 1872);
  if (v12)
  {
LABEL_9:
    uint64_t v13 = *(re::AssetHandle ***)(a2 + 1888);
    long long v14 = v13;
    while (*((void *)*v14 + 1))
    {
      if (++v14 == &v13[v12])
      {
        uint64_t v15 = v11;
        int v16 = 0;
        int v17 = 0;
        uint64_t v18 = 8 * v12;
        do
        {
          uint64_t v19 = *v13;
          uint64_t v20 = *((void *)*v13 + 1);
          if (v20)
          {
            unsigned int v21 = atomic_load((unsigned int *)(v20 + 704));
            if (v21 != 2)
            {
              if (v21 == 3) {
                return 2;
              }
              re::AssetHandle::loadAsync(*v13);
              uint64_t v23 = *((void *)v19 + 1);
              if (v23) {
                uint64_t v24 = *(uint64_t **)(v23 + 264);
              }
              else {
                uint64_t v24 = 0;
              }
              if (v24 == re::TextureAsset::assetType(v22)) {
                int v17 = 1;
              }
              else {
                int v16 = 1;
              }
            }
          }
          ++v13;
          v18 -= 8;
        }
        while (v18);
        uint64_t v11 = v15;
        if (v16) {
          return 1;
        }
        goto LABEL_26;
      }
    }
    return 2;
  }
  int v17 = 0;
LABEL_26:
  if (*(_DWORD *)(a2 + 1560) == 8)
  {
    re::parseShaderParameterData(v11, a5, a2 + 64, (uint64_t)&v53);
    v51[0] = *a4;
    if (v51[0]) {
      re::DynamicString::DynamicString((re::DynamicString *)v52, (const re::DynamicString *)(a4 + 8));
    }
    MaterialBuilder = re::makeMaterialBuilder((uint64_t **)v11, a2 + 8, v51, a3, &v53, (_DWORD *)(a2 + 1728), (uint64_t)v65);
    if (v51[0])
    {
      MaterialBuilder = (unsigned __int8 *)v52[0];
      if (v52[0])
      {
        if (v52[1]) {
          MaterialBuilder = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v52[0] + 40))();
        }
        memset(v52, 0, sizeof(v52));
      }
    }
    int v26 = v65[0];
    if (v65[0])
    {
      re::MaterialBuilder::operator=(a2 + 416, (uint64_t)&v66[4]);
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a2 + 1680, v57);
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a2 + 1808, v58);
    }
    else
    {
      int v27 = *re::assetTypesLogObjects((re *)MaterialBuilder);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        if (v66[12]) {
          long long v47 = v67;
        }
        else {
          long long v47 = &v66[13];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = a5;
        __int16 v63 = 2080;
        int v64 = v47;
        _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "Failed to prepare material builder '%s': %s.", buf, 0x16u);
      }
    }
    if (v65[0])
    {
      re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)&v66[4]);
    }
    else if (*(void *)&v66[4] && (v66[12] & 1) != 0)
    {
      (*(void (**)(void))(**(void **)&v66[4] + 40))();
    }
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v58);
    re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v57);
    re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)&v53);
    if (!v26) {
      return 2;
    }
  }
  re::MaterialBuilder::tickBuilder((re::MaterialBuilder *)(a2 + 416), (re::RenderManager *)v11, (uint64_t)&v53);
  if ((_BYTE)v53)
  {
    uint64_t v7 = 1;
    if (v54 && !v17)
    {
      re::parseTextureParameterData((_anonymous_namespace_ *)v11, a2 + 64, (uint64_t)v65);
      re::TextureParameterTable::operator=(a2 + 1032, (uint64_t *)v65);
      uint64_t v29 = *(void *)(v11 + 24);
      re::MaterialBuilder::MaterialBuilder((uint64_t)v49, a2 + 416);
      re::MaterialManager::createMaterial(v29, (re::MaterialBuilder *)v49, &v50);
      re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v49);
      uint64_t v31 = v50;
      if (v50)
      {
        unsigned int v32 = v70;
        if (v70)
        {
          uint64_t v33 = 0;
          unsigned __int8 v34 = (int *)(v69 + 8);
          while (1)
          {
            int v35 = *v34;
            v34 += 22;
            if (v35 < 0) {
              break;
            }
            if (v70 == ++v33)
            {
              LODWORD(v33) = v70;
              break;
            }
          }
        }
        else
        {
          LODWORD(v33) = 0;
        }
        if (v70 != v33)
        {
          uint64_t v38 = v33;
          uint64_t v39 = v69;
          do
          {
            re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(a2 + 1808, (re::DynamicString *)(v39 + 88 * v38 + 16), v39 + 88 * v38 + 48);
            uint64_t v39 = v69;
            if (v70 <= (int)v33 + 1) {
              unsigned int v40 = v33 + 1;
            }
            else {
              unsigned int v40 = v70;
            }
            int v41 = v33;
            while (1)
            {
              uint64_t v38 = (v41 + 1);
              if (v40 - 1 == v41) {
                break;
              }
              ++v41;
              LODWORD(v33) = v38;
              if ((*(_DWORD *)(v69 + 88 * v38 + 8) & 0x80000000) != 0) {
                goto LABEL_69;
              }
            }
            LODWORD(v33) = v40;
LABEL_69:
            ;
          }
          while (v32 != v33);
          uint64_t v31 = v50;
        }
        uint64_t v42 = a2 + 1664;
        if (v31)
        {
          id v43 = (id)(v31 + 8);
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a2 + 1664), v31);
        }
        else if (*(void *)v42)
        {

          *(void *)uint64_t v42 = 0;
        }
        *(void *)long long buf = v11;
        re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)buf, &v48);
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a2 + 1672), (uint64_t)v48);
        if (v48)
        {

          long long v48 = 0;
        }
        int v44 = *(unsigned __int8 *)(a2 + 1730);
        if (v44 == 6)
        {
          re::copyCustomParamFlattenedNames((void *)(v50 + 168), (void **)(a2 + 1776), (void **)(a2 + 1784), (void **)(a2 + 1792), (void **)(a2 + 1800));
        }
        else if (v44 == 7)
        {
          re::copyShaderGraphParamNames((re::sg::CachedCompilationMaterial *)(v50 + 168), (uint64_t)buf);
          re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a2 + 1736, (uint64_t)buf);
          re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)buf);
        }
        uint64_t v7 = 0;
      }
      else
      {
        char v37 = *re::assetTypesLogObjects(v30);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = a5;
          _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "failed to create material '%s'.", buf, 0xCu);
        }
        uint64_t v7 = 2;
      }
      if (v50) {

      }
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v68);
      re::TextureParameterTable::~TextureParameterTable((re::TextureParameterTable *)v65);
    }
  }
  else
  {
    unsigned __int8 v36 = *re::graphicsLogObjects(v28);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      if (v55) {
        int v46 = *(unsigned char **)&v56[7];
      }
      else {
        int v46 = v56;
      }
      *(_DWORD *)uint64_t v65 = 136315394;
      *(void *)uint64_t v66 = a5;
      *(_WORD *)&v66[8] = 2080;
      *(void *)&v66[10] = v46;
      _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, "Failed to create material '%s': %s", v65, 0x16u);
    }
    uint64_t v7 = 2;
  }
  if (!(_BYTE)v53 && v54 && (v55 & 1) != 0) {
    (*(void (**)(void))(*(void *)v54 + 40))();
  }
  return v7;
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 88 * v9;
  return v12 + 48;
}

void re::MaterialAssetLoader::unregisterAsset(re::MaterialAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4 = a2[208];
  if (v4)
  {

    a2[208] = 0;
  }
  re::MaterialBuilder::destroy((re::MaterialBuilder *)(a2 + 52));
  a2[234] = 0;
  ++*((_DWORD *)a2 + 470);
}

re *re::MaterialAssetLoader::unloadAsset(re::MaterialAssetLoader *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::MaterialAsset>((re *)"unloadAsset", 402, a2);
}

re *re::internal::destroyPersistent<re::MaterialAsset>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::MaterialAssetLoader::isSupportedSourceExtension(re::MaterialAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rematerial") || strcasecmp(a2, "hmmaterial") == 0;
}

void *re::MaterialAssetLoader::findDependencies@<X0>(re::MaterialAssetLoader *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2[234])
  {
    (*(void (**)(void *__return_ptr))(*(void *)this + 160))(v11);
    this = (re::MaterialAssetLoader *)v11[0];
    if (v11[0])
    {
      if (v13) {
        this = (re::MaterialAssetLoader *)(*(uint64_t (**)(void))(*(void *)v11[0] + 40))();
      }
      uint64_t v13 = 0;
      memset(v11, 0, sizeof(v11));
      ++v12;
    }
  }
  unint64_t v5 = a2[234];
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t result = re::DynamicArray<re::AssetHandle>::setCapacity((void *)a3, v5);
  ++*(_DWORD *)(a3 + 24);
  uint64_t v7 = a2[234];
  if (v7)
  {
    unint64_t v8 = (re::AssetHandle **)a2[236];
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void *re::MaterialAssetLoader::internalFindAssetHandleFields@<X0>(re::MaterialAssetLoader *this@<X0>, const re::IntrospectionBase **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = (unint64_t)a2[234];
  if (!v5)
  {
    re::AssetLoader::internalFindAssetHandleFields(this, a2, (uint64_t)v9);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 232), (uint64_t)v9);
    this = (re::MaterialAssetLoader *)v9[0];
    if (v9[0] && v9[4]) {
      this = (re::MaterialAssetLoader *)(*(uint64_t (**)(void))(*(void *)v9[0] + 40))();
    }
    unint64_t v5 = (unint64_t)a2[234];
  }
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t result = re::DynamicArray<float *>::setCapacity((void *)a3, v5);
  ++*(_DWORD *)(a3 + 24);
  if (a2[234])
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = re::DynamicArray<re::TransitionCondition *>::add((void *)a3, (const re::IntrospectionBase *)((char *)a2[236] + v7));
      ++v8;
      v7 += 8;
    }
    while ((unint64_t)a2[234] > v8);
  }
  return result;
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  re::FixedArray<unsigned long>::init<>(a4, (uint64_t)a1, a2[1]);
  re::FixedArray<unsigned long>::init<>(a5, (uint64_t)a1, a2[1]);
  if (a2[1])
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      uint64_t v12 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(*a2 + 24 * v10));
      if (a4[1] <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a4[2] + 8 * v10) = *(void *)(v12 + 1664);
      if (a3[1] > v10
        && (uint64_t v13 = *(re::MaterialParameterBlock **)(*a3 + 8 * v10)) != 0
        && !re::MaterialParameterBlock::isEmpty(*(re::MaterialParameterBlock **)(*a3 + 8 * v10)))
      {
        uint64_t v14 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v13, a1);
        if (a5[1] <= v10)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          return;
        }
      }
      else
      {
        if (a5[1] <= v10) {
          goto LABEL_15;
        }
        uint64_t v14 = 0;
      }
      *(void *)(a5[2] + 8 * v10) = v14;
      unint64_t v10 = v11;
    }
    while (a2[1] > (unint64_t)v11++);
  }
}

uint64_t re::AssetHandle::asset<re::MaterialAsset>(re::MaterialAsset *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::MaterialAsset::assetType(a1);
  uint64_t v2 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::MaterialAsset::assetType(void)::type, 0);
  if (!v2)
  {
    uint64_t v3 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      unint64_t v5 = re::AssetHandle::assetInfo(a1);
      if (v5[17]) {
        unint64_t v6 = (char *)v5[18];
      }
      else {
        unint64_t v6 = (char *)v5 + 137;
      }
      int v7 = 136315138;
      unint64_t v8 = v6;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v7, 0xCu);
    }
  }
  return v2;
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks(_anonymous_namespace_ *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unint64_t v10 = *((void *)a1 + 1);
  unint64_t v11 = *((void *)a1 + 1);
  if (*((void *)a1 + 1))
  {
    unint64_t v13 = 0;
    unsigned int v14 = 1;
    while (1)
    {
      uint64_t v15 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(void *)a1 + 24 * v13));
      unint64_t v16 = a3[1];
      if (v16 <= v13) {
        break;
      }
      *(void *)(a3[2] + 8 * v13) = *(void *)(v15 + 1664);
      if (a2[1] > v13
        && (int v17 = *(re::MaterialParameterBlock **)(*a2 + 8 * v13)) != 0
        && !re::MaterialParameterBlock::isEmpty(*(re::MaterialParameterBlock **)(*a2 + 8 * v13)))
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v17, &v20);
        unint64_t v16 = a4[1];
        if (v16 <= v13) {
          goto LABEL_16;
        }
        uint64_t v19 = v20;
        *(void *)(a4[2] + 8 * v13) = v20;
        *(void *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(a5) = v19;
      }
      else
      {
        unint64_t v16 = a4[1];
        if (v16 <= v13) {
          goto LABEL_15;
        }
        *(void *)(a4[2] + 8 * v13) = 0;
      }
      unint64_t v13 = v14;
      if (*((void *)a1 + 1) <= (unint64_t)v14++) {
        return;
      }
    }
    uint64_t v21 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    uint64_t v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 468;
    __int16 v26 = 2048;
    unint64_t v27 = v13;
    __int16 v28 = 2048;
    unint64_t v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    uint64_t v21 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    uint64_t v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 468;
    __int16 v26 = 2048;
    unint64_t v27 = v13;
    __int16 v28 = 2048;
    unint64_t v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    uint64_t v21 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    uint64_t v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 468;
    __int16 v26 = 2048;
    unint64_t v27 = v13;
    __int16 v28 = 2048;
    unint64_t v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles(void *a1, void *a2, char a3, uint64_t *a4, uint64_t *a5)
{
  if (!*a4) {
    re::FixedArray<unsigned long>::init<>(a4, (uint64_t)a1, a2[1]);
  }
  if (!*a5) {
    re::FixedArray<unsigned long>::init<>(a5, (uint64_t)a1, a2[1]);
  }
  if (a2[1])
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      uint64_t v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*a2 + 24 * v10));
      if (a4[1] <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a4[2] + 8 * v10) = *(void *)(v12 + 1664);
      if ((a3 & 1) != 0
        || (unint64_t v13 = *(re::MaterialParameterBlock **)(v12 + 1672), re::MaterialParameterBlock::isEmpty(v13)))
      {
        if (a5[1] <= v10) {
          goto LABEL_16;
        }
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v13, a1);
        if (a5[1] <= v10) {
          goto LABEL_17;
        }
      }
      *(void *)(a5[2] + 8 * v10) = v14;
      unint64_t v10 = v11;
    }
    while (a2[1] > (unint64_t)v11++);
  }
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles(_anonymous_namespace_ *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!*a3)
  {
    unint64_t v10 = *((void *)a1 + 1);
  }
  if (!*a4)
  {
    unint64_t v11 = *((void *)a1 + 1);
  }
  if (*((void *)a1 + 1))
  {
    unint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      uint64_t v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(void *)a1 + 24 * v12));
      unint64_t v15 = a3[1];
      if (v15 <= v12)
      {
        uint64_t v20 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        int v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 468;
        __int16 v25 = 2048;
        unint64_t v26 = v12;
        __int16 v27 = 2048;
        unint64_t v28 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        uint64_t v20 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        int v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 468;
        __int16 v25 = 2048;
        unint64_t v26 = v12;
        __int16 v27 = 2048;
        unint64_t v28 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        uint64_t v20 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        int v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 468;
        __int16 v25 = 2048;
        unint64_t v26 = v12;
        __int16 v27 = 2048;
        unint64_t v28 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a3[2] + 8 * v12) = *(void *)(v14 + 1664);
      if ((a2 & 1) != 0
        || (unint64_t v16 = *(re::MaterialParameterBlock **)(v14 + 1672), re::MaterialParameterBlock::isEmpty(v16)))
      {
        unint64_t v15 = a4[1];
        if (v15 <= v12) {
          goto LABEL_17;
        }
        *(void *)(a4[2] + 8 * v12) = 0;
      }
      else
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v16, &v19);
        unint64_t v15 = a4[1];
        if (v15 <= v12) {
          goto LABEL_18;
        }
        uint64_t v17 = v19;
        *(void *)(a4[2] + 8 * v12) = v19;
        *(void *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(a5) = v17;
      }
      unint64_t v12 = v13;
    }
    while (*((void *)a1 + 1) > (unint64_t)v13++);
  }
}

void re::MaterialAssetHelper::extractMaterialDataFromMeshInstanceParameterBlocks(_anonymous_namespace_ *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v8 = *((void *)a1 + 1);
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      if (a2[1] > v10
        && (unint64_t v12 = *(re::MaterialParameterBlock **)(*a2 + 8 * v10)) != 0
        && !re::MaterialParameterBlock::isEmpty(*(re::MaterialParameterBlock **)(*a2 + 8 * v10)))
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v12, &v16);
        unint64_t v13 = a3[1];
        if (v13 <= v10) {
          goto LABEL_14;
        }
        uint64_t v15 = v16;
        *(void *)(a3[2] + 8 * v10) = v16;
        *(void *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(a4) = v15;
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v13 = a3[1];
        if (v13 <= v10)
        {
          uint64_t v17 = 0;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v26 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v18 = 136315906;
          uint64_t v19 = "operator[]";
          __int16 v20 = 1024;
          int v21 = 468;
          __int16 v22 = 2048;
          unint64_t v23 = v10;
          __int16 v24 = 2048;
          unint64_t v25 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_14:
          uint64_t v17 = 0;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v26 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v18 = 136315906;
          uint64_t v19 = "operator[]";
          __int16 v20 = 1024;
          int v21 = 468;
          __int16 v22 = 2048;
          unint64_t v23 = v10;
          __int16 v24 = 2048;
          unint64_t v25 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(void *)(a3[2] + 8 * v10) = 0;
      }
      unint64_t v10 = v11;
    }
    while (v9 > v11++);
  }
}

double re::downgradeMaterialAssetFromFall2023@<D0>(re *this@<X0>, unsigned char *a2@<X8>)
{
  return re::downgradeShaderParameterDataFromSpring2023((uint64_t)this + 64, a2);
}

void *re::allocInfo_MaterialAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_71, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_71))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF78B40, "MaterialAsset");
    __cxa_guard_release(&_MergedGlobals_71);
  }
  return &unk_26AF78B40;
}

void re::initInfo_MaterialAsset(re *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xDA7FDB21D2F3CBD2;
  v11[1] = "MaterialAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78B28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78B28);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MaterialFile((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "materialFile";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0x800000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF78B30 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 64, 8);
      *(_DWORD *)uint64_t v9 = 6;
      *(void *)(v9 + 8) = 1;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(unsigned char *)(v9 + 40) = 1;
      *(void *)(v9 + 48) = re::downgradeMaterialAssetFromFall2023;
      *(_DWORD *)(v9 + 56) = 2;
      qword_26AF78B38 = v9;
      __cxa_guard_release(&qword_26AF78B28);
    }
  }
  *((void *)this + 2) = 0x76800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF78B30;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MaterialAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

re::MaterialAsset *re::internal::defaultConstruct<re::MaterialAsset>(int a1, int a2, re::MaterialAsset *this)
{
  return re::MaterialAsset::MaterialAsset(this);
}

uint64_t re::internal::defaultDestruct<re::MaterialAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::MaterialAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_MaterialAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialAsset>, this);
}

void re::MaterialAssetLoader::~MaterialAssetLoader(re::MaterialAssetLoader *this)
{
  *(void *)this = &unk_26E6D3770;
  uint64_t v2 = (re::MaterialAssetLoader *)((char *)this + 32);
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 56));
  re::AssetHandle::~AssetHandle(v2);
}

{
  re::AssetHandle *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6D3770;
  uint64_t v2 = (re::MaterialAssetLoader *)((char *)this + 32);
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 56));
  re::AssetHandle::~AssetHandle(v2);
  JUMPOUT(0x237DBCBD0);
}

re::MaterialAsset *re::MaterialAsset::MaterialAsset(re::MaterialAsset *this)
{
  *(void *)this = &unk_26E6D38D8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v2 = (char *)this + 8;
  re::DynamicString::setCapacity(v2, 0);
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(void *)((char *)this + 100) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(void *)((char *)this + 148) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(void *)((char *)this + 196) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(void *)((char *)this + 244) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0;
  *(void *)((char *)this + 292) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 0;
  *(void *)((char *)this + 340) = 0x7FFFFFFFLL;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 354) = 0;
  *((unsigned char *)this + 356) = 0;
  *((unsigned char *)this + 358) = 0;
  *((unsigned char *)this + 360) = 0;
  *((unsigned char *)this + 362) = 0;
  *((unsigned char *)this + 364) = 0;
  *((unsigned char *)this + 366) = 0;
  *((unsigned char *)this + 368) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_OWORD *)v2 + 23) = 0u;
  re::MaterialBuilder::MaterialBuilder((re::MaterialAsset *)((char *)this + 416));
  *((unsigned char *)this + 1656) = 0;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_DWORD *)this + 428) = 0;
  *(void *)((char *)this + 1716) = 0x7FFFFFFFLL;
  *((void *)this + 217) = 0;
  *((_OWORD *)this + 109) = 0u;
  *((_DWORD *)this + 440) = 0;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1828) = 0u;
  *(void *)((char *)this + 1844) = 0x7FFFFFFFLL;
  *((void *)this + 236) = 0;
  *((void *)this + 234) = 0;
  *((_DWORD *)this + 470) = 0;
  *((_OWORD *)this + 116) = 0u;
  return this;
}

void re::MaterialAsset::~MaterialAsset(re::MaterialAsset *this)
{
  re::MaterialAsset::~MaterialAsset(this);
  JUMPOUT(0x237DBCBD0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_26E6D38D8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1856);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 226);
  uint64_t v2 = (void *)*((void *)this + 225);
  if (v2)
  {

    *((void *)this + 225) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 224);
  if (v3)
  {

    *((void *)this + 224) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 223);
  if (v4)
  {

    *((void *)this + 223) = 0;
  }
  unint64_t v5 = (void *)*((void *)this + 222);
  if (v5)
  {

    *((void *)this + 222) = 0;
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 1736);
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 210);
  uint64_t v6 = *((void *)this + 209);
  if (v6)
  {

    *((void *)this + 209) = 0;
  }
  uint64_t v7 = *((void *)this + 208);
  if (v7)
  {

    *((void *)this + 208) = 0;
  }
  re::MaterialBuilder::~MaterialBuilder((re::MaterialAsset *)((char *)this + 416));
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)this + 376);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 38);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 32);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 20);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8);
  re::AssetHandle::~AssetHandle((re::MaterialAsset *)((char *)this + 40));
  re::DynamicString::deinit((re::MaterialAsset *)((char *)this + 8));
}

double re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    re::StringID::destroyString((re::StringID *)(a1 + 72));
    *(void *)(a1 + 56) = 0;
  }
}

double re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 40 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::FunctionLink>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 272 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v3 + v5 + 232);
          re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v3 + v5 + 184));
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v3 + v5 + 136));
          re::DynamicArray<unsigned long>::deinit(v3 + v5 + 96);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + v5 + 72));
          re::DynamicString::deinit((re::DynamicString *)(v3 + v5 + 40));
          re::DynamicString::deinit((re::DynamicString *)(v3 + v5 + 8));
          v5 += 272;
        }
        while (v6 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 64;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 152;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 160;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    re::DynamicString::deinit((re::DynamicString *)(a1 + 30));
    double v3 = re::DynamicString::deinit((re::DynamicString *)(a1 + 22));
    uint64_t v4 = a1[20];
    if (v4 != -1) {
      ((void (*)(char *, _DWORD *, double))off_26E6D38B8[v4])(&v5, a1 + 12, v3);
    }
    a1[20] = -1;
  }
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, re::AssetHandle *this)
{
}

double re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    double v3 = re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    uint64_t v4 = a1[20];
    if (v4 != -1) {
      ((void (*)(char *, _DWORD *, double))off_26E6D38B8[v4])(&v5, a1 + 12, v3);
    }
    a1[20] = -1;
  }
}

uint64_t re::ConstantTable::lookup(uint64_t a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 48), a2);
  if (v3 == -1) {
    return 0;
  }
  else {
    return *(void *)(a1 + 56) + 16 * v3 + 8;
  }
}

uint64_t re::ConstantTable::layoutHash(re::ConstantTable *this)
{
  return *((void *)this + 12);
}

uint64_t re::ConstantTable::data(re::ConstantTable *this)
{
  return *((void *)this + 5);
}

void *re::FixedArray<re::LinkedFunction>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = result[2];
      uint64_t v6 = 144 * v2;
      do
      {
        int v7 = (void *)(v5 + v4);
        re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v5 + v4 + 120));
        re::FixedArray<re::TypedArgument>::deinit((void *)(v5 + v4 + 96));
        re::FixedArray<re::TechniqueFunctionConstant>::deinit((void *)(v5 + v4 + 64));
        uint64_t v8 = *(void *)(v5 + v4 + 48);
        if (v8)
        {

          v7[6] = 0;
        }
        re::StringID::destroyString((re::StringID *)(v7 + 3));
        re::StringID::destroyString((re::StringID *)(v7 + 1));
        v4 += 144;
      }
      while (v6 != v4);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *int v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::TypedArgument>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (void *)result[2];
      uint64_t v5 = 112 * v2;
      do
      {
        re::FixedArray<re::MetalTypeInfo>::deinit(v4 + 8);
        re::StringID::destroyString((re::StringID *)(v4 + 5));
        re::StringID::destroyString((re::StringID *)v4);
        v4 += 14;
        v5 -= 112;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *int v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::MetalTypeInfo>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 80 * v2;
      uint64_t v5 = result[2] + 40;
      do
      {
        re::FixedArray<re::MetalTypeInfo>::deinit(v5);
        re::StringID::destroyString((re::StringID *)(v5 - 24));
        v5 += 80;
        v4 -= 80;
      }
      while (v4);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    *int v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::TechniqueFunctionConstant>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (uint64_t *)result[2];
      uint64_t v5 = v2 << 6;
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v4 + 5);
        double v6 = re::DynamicString::deinit((re::DynamicString *)v4);
        v4 += 8;
        v5 -= 64;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v6);
      void *v3 = 0;
      v3[1] = 0;
    }
    *int v1 = 0;
  }
  return result;
}

void re::ShaderParameterTable::~ShaderParameterTable(re::ShaderParameterTable *this)
{
}

void re::BufferTable::~BufferTable(re::BufferTable *this)
{
}

uint64_t re::BufferTable::deinit(re::BufferTable *this)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 64);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::deinit((uint64_t)this + 144);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 200);
  uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)this + 240);
  *((_DWORD *)this + 70) = 0;
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, i);
      if (*v4)
      {

        id *v4 = 0;
      }
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

double re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 16 * v4;
        do
        {
          void *v3 = 0;
          v3 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 8 * (a2 & 7);
}

void re::ConstantTable::~ConstantTable(re::ConstantTable *this)
{
  unint64_t v2 = (char *)this + 8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 48);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
}

double re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        double v6 = (void *)(v3 + 32);
        do
        {
          *double v6 = 0;
          *(v6 - 2) = 0;
          *(v6 - 4) = 0;
          v6 += 5;
          v5 -= 40;
        }
        while (v5);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

void re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 40 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

void re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * (*(void *)(v8 + v6 + 8) ^ (*(void *)(v8 + v6 + 8) >> 30));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (void *)(v8 + v6 + 8), (long long *)(v8 + v6 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * (*(void *)(*(void *)&v15[16] + v10 + 8) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(void *)&v15[16] + v10 + 8, *(void *)&v15[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 40 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v8 + 8) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 40 * v8;
  long long v15 = *a5;
  *(void *)(v14 + 32) = *((void *)a5 + 2);
  *(_OWORD *)(v14 + 16) = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::TextureParameterTable::~TextureParameterTable(re::TextureParameterTable *this)
{
}

double re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3) {
        bzero(v2, 16 * v3);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  }
  return result;
}

void re::SamplerTable::~SamplerTable(re::SamplerTable *this)
{
  uint64_t v2 = (char *)this + 64;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
  *((void *)this + 13) = 0;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v2);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
}

uint64_t re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(id **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 8 * v4;
        do
        {
          if (*v3)
          {

            id *v3 = 0;
          }
          ++v3;
          v5 -= 8;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(id **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, id *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl(void *a1)
{
  *a1 = &unk_26E6D3930;
  uint64_t v2 = (uint64_t)(a1 + 1);
  uint64_t v3 = (uint64_t)(a1 + 9);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit((uint64_t)(a1 + 9));
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit(v3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  return a1;
}

uint64_t re::TextureTableImpl<re::TextureHandle>::lookup@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 8), a2);
  if (result == -1)
  {
    char v6 = 0;
  }
  else
  {
    *(_WORD *)(a3 + 1) = *(_WORD *)(*(void *)(a1 + 16) + 16 * result + 8);
    char v6 = 1;
  }
  *(unsigned char *)a3 = v6;
  return result;
}

uint64_t re::TextureTableImpl<re::TextureHandle>::layoutHash(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t re::TextureTableImpl<re::TextureHandle>::size(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

void *re::TextureSource::lookupIndex@<X0>(void *(***a1)(uint64_t *__return_ptr)@<X0>, char *a2@<X8>)
{
  uint64_t result = (**a1)(&v5);
  char v4 = v5;
  if ((_BYTE)v5)
  {
    a2[1] = BYTE2(v5);
    char v4 = 1;
  }
  *a2 = v4;
  return result;
}

void *re::TextureSource::lookupProtectionOptions@<X0>(void *(***a1)(uint64_t *__return_ptr)@<X0>, char *a2@<X8>)
{
  uint64_t result = (**a1)(&v5);
  char v4 = v5;
  if ((_BYTE)v5)
  {
    a2[1] = BYTE1(v5);
    char v4 = 1;
  }
  *a2 = v4;
  return result;
}

uint64_t re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          if (*(unsigned char *)(v3 + 16))
          {
            char v6 = *(void **)(v3 + 24);
            if (v6)
            {

              *(void *)(v3 + 24) = 0;
            }
          }
          re::TextureHandle::invalidate((re::TextureHandle *)v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 112;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 88));
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
  }
  return result;
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), *(void *)&v13[16] + v10 + 48);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 88 * v10;
  *(_DWORD *)(v15 + 48) = *(_DWORD *)a5;
  *(void *)(v15 + 56) = *(void *)(a5 + 8);
  *(unsigned char *)(v15 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = *(unsigned char *)(a5 + 16);
  re::StringID::StringID((re::StringID *)(v15 + 72), (const StringID *)(a5 + 24));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 88 * v10;
  *(_DWORD *)(v15 + 48) = *(_DWORD *)a5;
  *(void *)(v15 + 56) = *(void *)(a5 + 8);
  *(unsigned char *)(v15 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = *(unsigned char *)(a5 + 16);
  uint64_t v16 = *(void *)(a5 + 24);
  *(void *)(v15 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(void *)(v15 + 72) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(void *)(v15 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = *(void *)(a5 + 24) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(void *)(v15 + 80) = *(void *)(a5 + 32);
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = "";
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 3));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

uint64_t *re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 64, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BlendShapeWeightsDefinitionAsset::assetType(re::BlendShapeWeightsDefinitionAsset *this)
{
  {
    re::BlendShapeWeightsDefinitionAsset::assetType(void)::type = (uint64_t)"BlendFactor";
    qword_26879E668 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BlendShapeWeightsDefinitionAsset::assetType(void)::type);
  }
  return &re::BlendShapeWeightsDefinitionAsset::assetType(void)::type;
}

void *re::BlendShapeWeightsDefinitionAsset::init(re::BlendShapeWeightsDefinitionAsset *this, re::Allocator *a2)
{
  unint64_t v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(void *)this = v2;
  re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(this, 0);
  *((void *)this + 5) = v2;
  unint64_t v4 = (char *)this + 40;
  ++*((_DWORD *)v4 - 4);
  uint64_t result = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  return result;
}

void re::BlendShapeWeightsDefinitionAsset::init(_anonymous_namespace_ *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = a4;
  uint64_t v143 = *MEMORY[0x263EF8340];
  if (!a4)
  {
  }
  uint64_t v10 = a2[55];
  if (v10)
  {
    uint64_t v87 = a1;
    unint64_t v11 = a2[52];
    if (v11) {
      signed int v12 = 2 * v11;
    }
    else {
      signed int v12 = 1;
    }
    unsigned int v106 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    uint64_t v107 = 0x7FFFFFFFLL;
    if (v11)
    {
      unint64_t v14 = 0;
      unint64_t v15 = 0;
      unint64_t v4 = 0x7FFFFFFFLL;
      do
      {
        unint64_t v5 = a2[52];
        if (v5 <= v15) {
          goto LABEL_151;
        }
        unint64_t v16 = *(void *)(a2[54] + 8 * v15);
        unint64_t v17 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
        unint64_t v5 = v17 ^ (v17 >> 31);
        unint64_t v18 = v104;
        if (!(void)v104
          || (unint64_t v18 = v5 % DWORD2(v105),
              uint64_t v19 = *(unsigned int *)(*((void *)&v104 + 1) + 4 * v18),
              v19 == 0x7FFFFFFF))
        {
LABEL_14:
          uint64_t v20 = v107;
          if (v107 == 0x7FFFFFFF)
          {
            uint64_t v20 = v106;
            unsigned int v21 = v106;
            if (v106 == DWORD2(v105))
            {
              re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v104, 2 * HIDWORD(v105));
              unsigned int v21 = v106;
              unint64_t v18 = v5 % DWORD2(v105);
            }
            unsigned int v106 = v21 + 1;
            uint64_t v22 = v105;
            int v23 = *(_DWORD *)(v105 + 32 * v20 + 8);
          }
          else
          {
            uint64_t v22 = v105;
            int v23 = *(_DWORD *)(v105 + 32 * v107 + 8);
            LODWORD(v107) = v23 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v22 + 32 * v20 + 8) = v23 | 0x80000000;
          uint64_t v24 = *((void *)&v104 + 1);
          *(_DWORD *)(v105 + 32 * v20 + 8) = *(_DWORD *)(v105 + 32 * v20 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v104 + 1) + 4 * v18);
          *(void *)(v105 + 32 * v20) = v5;
          *(void *)(v105 + 32 * v20 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v16;
          *(_DWORD *)(v105 + 32 * v20 + 24) = v14;
          *(_DWORD *)(v24 + 4 * v18) = v20;
          ++HIDWORD(v105);
          ++HIDWORD(v107);
        }
        else
        {
          while (*(void *)(v105 + 32 * v19 + 16) != v16)
          {
            uint64_t v19 = *(_DWORD *)(v105 + 32 * v19 + 8) & 0x7FFFFFFF;
            if (v19 == 0x7FFFFFFF) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v14 = (v14 + 1);
        unint64_t v15 = v14;
      }
      while (v11 > v14);
    }
    uint64_t v93 = a3[1];
    if (v93)
    {
      unint64_t v15 = 0;
      unint64_t v11 = 0;
      unint64_t v5 = v10 + 72;
      unint64_t v14 = (unint64_t)v87;
      while (1)
      {
        unint64_t v25 = a3[1];
        if (v25 <= v11) {
          break;
        }
        uint64_t v26 = re::DataArray<re::MeshInstance>::get(v10 + 72, *(void *)(*a3 + 8 * v11));
        uint64_t v27 = *(void *)(re::DataArray<re::MeshModel>::get(v10 + 8, *(void *)(v26 + 16)) + 96);
        if (v27) {
          uint64_t v27 = *(void *)(v27 + 64);
        }
        unint64_t v15 = (v15 + v27);
        if (v93 == ++v11) {
          goto LABEL_29;
        }
      }
LABEL_152:
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v25);
      _os_crash();
      __break(1u);
LABEL_153:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 476;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v11;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_154:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 468;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v11;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_155:
      uint64_t v123 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v131 = 136315906;
      *(void *)&v131[4] = "operator[]";
      __int16 v132 = 1024;
      int v133 = 476;
      __int16 v134 = 2048;
      unint64_t v135 = v14;
      __int16 v136 = 2048;
      unint64_t v137 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_156:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 476;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v14;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_157:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 797;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v11;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_158:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 468;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v11;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_159:
      re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v30);
      _os_crash();
      __break(1u);
LABEL_160:
      re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v36);
      _os_crash();
      __break(1u);
LABEL_161:
      v116[0] = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 468;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v14;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_162:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 797;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v4;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_163:
      *(void *)v131 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 468;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v4;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_164:
      re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) ", "modelIndex != nullptr", "init", 231);
      _os_crash();
      __break(1u);
    }
    unint64_t v15 = 0;
    unint64_t v14 = (unint64_t)v87;
LABEL_29:
    *(void *)unint64_t v14 = v6;
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)v14, v15);
    ++*(_DWORD *)(v14 + 24);
    *(void *)(v14 + 40) = v6;
    uint64_t v91 = (_anonymous_namespace_ *)(v14 + 40);
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)(v14 + 40), v15);
    *(void *)(v14 + 80) = v6;
    unint64_t v28 = v14 + 80;
    ++*(_DWORD *)(v28 - 16);
    re::DynamicArray<re::StringID>::setCapacity((void *)v28, v15);
    __int16 v90 = (_anonymous_namespace_ *)v28;
    ++*(_DWORD *)(v28 + 24);
    if (v93)
    {
      unint64_t v14 = 0;
      uint64_t v86 = v10 + 72;
      long long v85 = a3;
      __int16 v84 = a2;
      while (1)
      {
        unint64_t v30 = a3[1];
        if (v30 <= v14) {
          goto LABEL_159;
        }
        uint64_t v31 = re::DataArray<re::MeshInstance>::get(v86, *(void *)(*a3 + 8 * v14));
        if (!(void)v104) {
          goto LABEL_164;
        }
        unint64_t v33 = *(void *)(v31 + 16);
        unint64_t v34 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
        uint64_t v35 = *(unsigned int *)(*((void *)&v104 + 1) + 4 * ((v34 ^ (v34 >> 31)) % DWORD2(v105)));
        if (v35 == 0x7FFFFFFF) {
          goto LABEL_164;
        }
        while (*(void *)(v105 + 32 * v35 + 16) != v33)
        {
          uint64_t v35 = *(_DWORD *)(v105 + 32 * v35 + 8) & 0x7FFFFFFF;
          if (v35 == 0x7FFFFFFF) {
            goto LABEL_164;
          }
        }
        unint64_t v36 = a3[1];
        if (v36 <= v14) {
          goto LABEL_160;
        }
        unint64_t v95 = *(unsigned int *)(v105 + 32 * v35 + 24);
        unint64_t v11 = a2[55];
        unint64_t v89 = v14;
        StringID v92 = (StringID *)re::DataArray<re::MeshInstance>::get(v11 + 72, *(void *)(*a3 + 8 * v14));
        unint64_t v14 = a2[52];
        uint64_t v120 = 0;
        unint64_t v121 = 0;
        uint64_t v122 = 0;
        if (v14) {
          break;
        }
        unint64_t v4 = 0;
        unint64_t v15 = v121;
LABEL_47:
        if (v15 <= v14) {
          goto LABEL_161;
        }
        *(_DWORD *)(v122 + 4 * v14) = v4;
        v116[1] = 0;
        unint64_t v117 = 0;
        int v118 = 0;
        uint64_t v119 = 0;
        int v41 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v116, v4);
        ++v118;
        unint64_t v112 = 0;
        unint64_t v113 = 0;
        int v114 = 0;
        unint64_t v115 = 0;
        uint64_t v42 = (_anonymous_namespace_ *)re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(&v111, v4);
        int v96 = ++v114;
        uint64_t v108 = 0;
        unint64_t v109 = 0;
        uint64_t v110 = 0;
        unint64_t v14 = a2[52];
        unint64_t v4 = v95;
        if (v14 <= v95) {
          goto LABEL_162;
        }
        uint64_t v88 = v11 + 8;
        id v43 = (void *)re::DataArray<re::MeshModel>::get(v11 + 8, *(void *)(a2[54] + 8 * v95));
        int v45 = (re::BlendShapeModelUtil *)(v43 + 12);
        uint64_t v44 = v43[12];
        if (v44)
        {
          unint64_t v94 = *(void *)(v44 + 64);
          if (v94)
          {
            unint64_t v14 = 0;
            __int16 v98 = (re::BlendShapeModelUtil *)(v43 + 12);
            while (1)
            {
              uint64_t v46 = re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v45, (const DeformationModelData *)v14);
              memset(v129, 0, 36);
              *(void *)&v129[36] = 0x7FFFFFFFLL;
              if (v46)
              {
                unint64_t v48 = 0;
                unint64_t v11 = v46;
                do
                {
                  re::BlendShapeModelUtil::blendShapeTargetName(v45, (const DeformationModelData *)v14, v48, (re::StringID *)&v138);
                  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v129, (uint64_t *)&v138);
                  re::StringID::destroyString((re::StringID *)&v138);
                  ++v48;
                }
                while (v46 != v48);
              }
              unsigned int v97 = v46;
              uint64_t v99 = (const DeformationModelData *)v14;
              unint64_t v15 = v113;
              uint64_t v101 = v113;
              if (v113)
              {
                uint64_t v49 = 0;
                unint64_t v103 = v115;
                int v102 = *(_DWORD *)&v129[28];
                unint64_t v4 = *(unsigned int *)&v129[32];
                unint64_t v14 = *(void *)&v129[16];
                unint64_t v100 = v113;
                do
                {
                  if (v49 == v15) {
                    goto LABEL_146;
                  }
                  unint64_t v5 = v103 + 48 * v49;
                  if (*(_DWORD *)(v5 + 28) == v102)
                  {
                    if (!v4)
                    {
LABEL_78:
                      unint64_t v4 = v95;
                      goto LABEL_90;
                    }
                    unint64_t v11 = 0;
                    while (1)
                    {
                      if ((*(_DWORD *)(v14 + 24 * v11) & 0x80000000) != 0)
                      {
                        unint64_t v50 = *(unsigned int *)(v5 + 24);
                        if (!v50) {
                          break;
                        }
                        unint64_t v51 = 0xBF58476D1CE4E5B9
                            * ((*(void *)(v14 + 24 * v11 + 8) >> 31) ^ (*(void *)(v14 + 24 * v11 + 8) >> 1));
                        uint64_t v52 = *(unsigned int *)(*(void *)(v5 + 8)
                                              + 4
                                              * (((0x94D049BB133111EBLL * (v51 ^ (v51 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                                 * (v51 ^ (v51 >> 27))) >> 31))
                                               % v50));
                        if (v52 == 0x7FFFFFFF) {
                          break;
                        }
                        uint64_t v53 = *(void *)(v5 + 16);
                        while (1)
                        {
                          unint64_t v15 = 24;
                          BOOL v47 = re::StringID::operator==((void *)(v53 + 24 * v52 + 8), (void *)(v14 + 24 * v11 + 8));
                          if (v47) {
                            break;
                          }
                          uint64_t v52 = *(_DWORD *)(v53 + 24 * v52) & 0x7FFFFFFF;
                          if (v52 == 0x7FFFFFFF) {
                            goto LABEL_71;
                          }
                        }
                        BOOL v47 = re::StringID::operator==((void *)(v53 + 24 * v52 + 8), (void *)(v14 + 24 * v11 + 8));
                        if (!v47) {
                          break;
                        }
                      }
                      if (++v11 == v4) {
                        goto LABEL_78;
                      }
                    }
                  }
LABEL_71:
                  ++v49;
                  unint64_t v15 = v100;
                }
                while (v49 != v101);
              }
              uint64_t v125 = 0;
              unint64_t v126 = 0;
              uint64_t v127 = 0;
              unint64_t v4 = (unint64_t)v98;
              if (v97) {
                break;
              }
LABEL_76:
              long long v59 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::add(v116, &v125);
              if (v15 >= v112)
              {
                unint64_t v5 = v15 + 1;
                unint64_t v4 = v95;
                int v60 = v96;
                if (v112 < v15 + 1)
                {
                  if (v111)
                  {
                    unint64_t v61 = 8;
                    if (v112) {
                      unint64_t v61 = 2 * v112;
                    }
                    if (v61 <= v5) {
                      unint64_t v62 = v15 + 1;
                    }
                    else {
                      unint64_t v62 = v61;
                    }
                    re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(&v111, v62);
                    int v60 = v114;
                  }
                  else
                  {
                    re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(&v111, v15 + 1);
                    int v60 = ++v114;
                  }
                }
                unint64_t v15 = v113;
              }
              else
              {
                unint64_t v4 = v95;
                int v60 = v96;
              }
              unint64_t v63 = v115 + 48 * v15;
              *(_OWORD *)unint64_t v63 = 0u;
              *(_OWORD *)(v63 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
              *(_DWORD *)(v63 + 32) = 0;
              *(void *)(v63 + 36) = 0x7FFFFFFFLL;
              *(void *)unint64_t v63 = *(void *)v129;
              *(void *)uint64_t v129 = 0;
              uint64_t v64 = *(void *)(v63 + 8);
              *(void *)(v63 + 8) = *(void *)&v129[8];
              *(void *)&v129[8] = v64;
              uint64_t v65 = *(void *)(v63 + 16);
              *(void *)(v63 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(void *)&v129[16];
              *(void *)&v129[16] = v65;
              LODWORD(v65) = *(_DWORD *)(v63 + 24);
              *(_DWORD *)(v63 + 24) = *(_DWORD *)&v129[24];
              *(_DWORD *)&v129[24] = v65;
              LODWORD(v65) = *(_DWORD *)(v63 + 28);
              *(_DWORD *)(v63 + 28) = *(_DWORD *)&v129[28];
              *(_DWORD *)&v129[28] = v65;
              LODWORD(v65) = *(_DWORD *)(v63 + 32);
              *(_DWORD *)(v63 + 32) = *(_DWORD *)&v129[32];
              *(_DWORD *)&v129[32] = v65;
              LODWORD(v65) = *(_DWORD *)(v63 + 36);
              *(_DWORD *)(v63 + 36) = *(_DWORD *)&v129[36];
              *(_DWORD *)&v129[36] = v65;
              unint64_t v113 = v15 + 1;
              int v96 = v60 + 1;
              int v114 = v60 + 1;
              LODWORD(v49) = v117 - 1;
              re::FixedArray<re::StringID>::deinit(&v125);
LABEL_90:
              unint64_t v11 = v121;
              if (v121 <= v4) {
                goto LABEL_149;
              }
              unint64_t v11 = (*(_DWORD *)(v122 + 4 * v4) + v99);
              unint64_t v14 = v109;
              if (v109 <= v11) {
                goto LABEL_150;
              }
              *(_DWORD *)(v110 + 4 * v11) = v49;
              re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v129);
              int v45 = v98;
              unint64_t v14 = (v99 + 1);
              if (v94 <= v14) {
                goto LABEL_93;
              }
            }
            unint64_t v11 = 0;
            unint64_t v5 = 0;
            while (1)
            {
              re::BlendShapeModelUtil::blendShapeTargetName(v98, v99, v5, (re::StringID *)&v123);
              unint64_t v14 = v126;
              if (v126 <= v5) {
                break;
              }
              uint64_t v54 = (void *)(v127 + v11);
              uint64_t v55 = v123;
              long long v56 = v124;
              uint64_t v123 = 0;
              unint64_t v124 = "";
              uint64_t v57 = *(void *)(v127 + v11 + 8);
              unint64_t v58 = v55 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v127 + v11) & 1;
              v54[1] = v56;
              *(void *)&long long v138 = v58;
              *((void *)&v138 + 1) = v57;
              *uint64_t v54 = v55;
              re::StringID::destroyString((re::StringID *)&v138);
              re::StringID::destroyString((re::StringID *)&v123);
              ++v5;
              v11 += 16;
              if (v97 == v5) {
                goto LABEL_76;
              }
            }
            uint64_t v128 = 0;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v138 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v131 = 136315906;
            *(void *)&v131[4] = "operator[]";
            __int16 v132 = 1024;
            int v133 = 468;
            __int16 v134 = 2048;
            unint64_t v135 = v5;
            __int16 v136 = 2048;
            unint64_t v137 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_146:
            uint64_t v125 = 0;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v139 = 0u;
            long long v140 = 0u;
            long long v138 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v131 = 136315906;
            *(void *)&v131[4] = "operator[]";
            __int16 v132 = 1024;
            int v133 = 789;
            __int16 v134 = 2048;
            unint64_t v135 = v15;
            __int16 v136 = 2048;
            unint64_t v137 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_147;
          }
        }
LABEL_93:
        unint64_t v126 = 0;
        uint64_t v127 = 0;
        uint64_t v125 = 0;
        unint64_t v11 = v121;
        if (v121 <= v4) {
          goto LABEL_163;
        }
        unint64_t v5 = *(unsigned int *)(v122 + 4 * v4);
        uint64_t v66 = re::DataArray<re::MeshModel>::get(v88, *(void *)&v92[1].var0);
        uint64_t v67 = *(void *)(v66 + 56);
        a3 = v85;
        unint64_t v15 = (unint64_t)&v129[8];
        if (v67)
        {
          uint64_t v68 = (void *)v66;
          unint64_t v14 = 0;
          uint64_t v69 = 504;
          do
          {
            uint64_t v70 = v68[12];
            if (v70)
            {
              if (*(void *)(v70 + 40) > v14)
              {
                uint64_t v71 = *(unsigned int *)(*(void *)(v70 + 48) + 4 * v14);
                if (v71 != -1)
                {
                  unint64_t v11 = v71 + v5;
                  unint64_t v4 = v109;
                  if (v109 <= v71 + v5) {
                    goto LABEL_153;
                  }
                  unint64_t v11 = *(unsigned int *)(v110 + 4 * v11);
                  unint64_t v4 = v126;
                  if (v126 <= v11) {
                    goto LABEL_154;
                  }
                  unint64_t v4 = *(unsigned int *)(v127 + 4 * v11);
                  if (v4 == -1)
                  {
                    unint64_t v4 = v117;
                    if (v117 <= v11) {
                      goto LABEL_157;
                    }
                    uint64_t v72 = v119;
                    unint64_t v73 = *((void *)v87 + 2);
                    if (v73 >= *((void *)v87 + 1))
                    {
                      re::DynamicArray<re::FixedArray<re::StringID>>::growCapacity(v87, v73 + 1);
                      unint64_t v73 = *((void *)v87 + 2);
                    }
                    re::FixedArray<re::StringID>::FixedArray((unint64_t *)(*((void *)v87 + 4) + 24 * v73), v72 + 24 * v11);
                    uint64_t v74 = *((void *)v87 + 2) + 1;
                    *((void *)v87 + 2) = v74;
                    ++*((_DWORD *)v87 + 6);
                    unint64_t v4 = v126;
                    if (v126 <= v11) {
                      goto LABEL_158;
                    }
                    unint64_t v4 = (v74 - 1);
                    *(_DWORD *)(v127 + 4 * v11) = v4;
                  }
                  v129[0] = 1;
                  re::StringID::StringID((re::StringID *)&v129[8], v92);
                  unint64_t v11 = v68[7];
                  if (v11 <= v14) {
                    goto LABEL_155;
                  }
                  re::StringID::StringID((re::StringID *)&v129[24], (const StringID *)(v68[8] + v69));
                  *(_DWORD *)&v129[40] = v4;
                  int v130 = 0;
                  re::DynamicArray<re::BlendShapeWeightsMeshMap>::add(v91, (uint64_t)v129);
                  re::StringID::destroyString((re::StringID *)&v129[24]);
                  re::StringID::destroyString((re::StringID *)&v129[8]);
                  unint64_t v11 = v68[7];
                  if (v11 <= v14) {
                    goto LABEL_156;
                  }
                  int v75 = (void *)(v68[8] + v69);
                  uint64_t v76 = (unsigned char *)v75[1];
                  if (*v75 <= 1uLL && v76 && !*v76) {
                    long long v77 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s/%lu", (re::DynamicString *)&v138, v68[1], v14, v83);
                  }
                  else {
                    long long v77 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s/%s-%lu", (re::DynamicString *)&v138, v68[1], v76, v14);
                  }
                  if (BYTE8(v138)) {
                    int v78 = (const char *)v139;
                  }
                  else {
                    int v78 = (char *)&v138 + 9;
                  }
                  *(void *)uint64_t v129 = 0;
                  *(void *)&v129[8] = "";
                  re::DynamicArray<re::StringID>::add(v90, (uint64_t *)v129);
                  re::StringID::destroyString((re::StringID *)v129);
                  if (void)v138 && (BYTE8(v138)) {
                    (*(void (**)(void))(*(void *)v138 + 40))();
                  }
                  unint64_t v15 = (unint64_t)&v129[8];
                }
              }
            }
            ++v14;
            v69 += 560;
          }
          while (v67 != v14);
        }
        if (v125) {
          BOOL v79 = v126 == 0;
        }
        else {
          BOOL v79 = 1;
        }
        if (!v79) {
          (*(void (**)(void))(*(void *)v125 + 40))();
        }
        if (v108 && v109) {
          (*(void (**)(void))(*(void *)v108 + 40))();
        }
        long long v80 = v111;
        a2 = v84;
        if (v111)
        {
          unint64_t v15 = v115;
          if (v115)
          {
            if (v113)
            {
              uint64_t v81 = 48 * v113;
              unint64_t v5 = v115;
              do
              {
                re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v5);
                v5 += 48;
                v81 -= 48;
              }
              while (v81);
            }
            (*(void (**)(uint64_t *, unint64_t))(*v80 + 40))(v80, v15);
          }
        }
        re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)v116);
        if (v120) {
          BOOL v82 = v121 == 0;
        }
        else {
          BOOL v82 = 1;
        }
        if (!v82) {
          (*(void (**)(void))(*(void *)v120 + 40))();
        }
        unint64_t v14 = v89 + 1;
        if (v89 + 1 == v93) {
          goto LABEL_143;
        }
      }
      unint64_t v5 = 0;
      unint64_t v4 = 0;
      unsigned int v38 = 1;
      while (1)
      {
        unint64_t v15 = a2[52];
        if (v15 <= v5) {
          break;
        }
        char v37 = (_anonymous_namespace_ *)re::DataArray<re::MeshModel>::get(v11 + 8, *(void *)(a2[54] + 8 * v5));
        unint64_t v15 = v121;
        if (v121 <= v5) {
          goto LABEL_148;
        }
        *(_DWORD *)(v122 + 4 * v5) = v4;
        uint64_t v39 = *((void *)v37 + 12);
        if (v39) {
          uint64_t v39 = *(void *)(v39 + 64);
        }
        unint64_t v4 = (v4 + v39);
        unint64_t v5 = v38;
        if (v14 <= v38++) {
          goto LABEL_47;
        }
      }
LABEL_147:
      v116[0] = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 797;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v5;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_148:
      v116[0] = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 468;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v5;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_149:
      uint64_t v125 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v131 = 136315906;
      *(void *)&v131[4] = "operator[]";
      __int16 v132 = 1024;
      int v133 = 468;
      __int16 v134 = 2048;
      unint64_t v135 = v4;
      __int16 v136 = 2048;
      unint64_t v137 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_150:
      uint64_t v125 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v131 = 136315906;
      *(void *)&v131[4] = "operator[]";
      __int16 v132 = 1024;
      int v133 = 468;
      __int16 v134 = 2048;
      unint64_t v135 = v11;
      __int16 v136 = 2048;
      unint64_t v137 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_151:
      v116[0] = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v139 = 0u;
      long long v140 = 0u;
      long long v138 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v129 = 136315906;
      *(void *)&v129[4] = "operator[]";
      *(_WORD *)&v129[12] = 1024;
      *(_DWORD *)&v129[14] = 797;
      *(_WORD *)&v129[18] = 2048;
      *(void *)&v129[20] = v15;
      *(_WORD *)&v129[28] = 2048;
      *(void *)&v129[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_152;
    }
LABEL_143:
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v104);
  }
}

uint64_t re::DynamicArray<re::FixedArray<re::StringID>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 24 * v4;
        do
        {
          re::FixedArray<re::StringID>::deinit(v3);
          v3 += 3;
          v5 -= 24;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(void **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::DynamicArray<float>>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit(v3[4] + v8);
      ++v9;
      v8 += 40;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::DynamicArray<float>>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::BlendShapeWeightsDefinitionAsset::constructBlendShapeWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v5 != v6) {
    goto LABEL_8;
  }
  if (v5)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = (uint64_t *)(*(void *)(a3 + 32) + 8);
    while (1)
    {
      uint64_t v10 = *v8;
      v8 += 4;
      uint64_t v9 = v10;
      uint64_t v11 = *v7;
      v7 += 3;
      if (v9 != v11) {
        break;
      }
      if (!--v5) {
        goto LABEL_6;
      }
    }
LABEL_8:
    re::DynamicArray<re::BlendShapeWeights>::resize(a3, v6);
    int v12 = 1;
    if (v6) {
      goto LABEL_9;
    }
    return;
  }
LABEL_6:
  int v12 = 0;
  if (v6)
  {
LABEL_9:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    while (1)
    {
      unint64_t v16 = *(void *)(a1 + 16);
      if (v16 <= v15) {
        break;
      }
      re::make::shared::object<re::BlendShapeWeightsDefinition,re::FixedArray<re::StringID> const&>((const StringID **)(*(void *)(a1 + 32) + v13), &v18);
      unint64_t v16 = *(void *)(a3 + 16);
      if (v12)
      {
        if (v16 <= v15) {
          goto LABEL_23;
        }
        re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(*(void *)(a3 + 32) + v14));
        unint64_t v16 = *(void *)(a3 + 16);
        if (v16 <= v15) {
          goto LABEL_25;
        }
        re::BlendShapeWeights::init((uint64_t *)(*(void *)(a3 + 32) + v14), (uint64_t *)&v18);
      }
      else
      {
        if (v16 <= v15) {
          goto LABEL_24;
        }
        unint64_t v17 = (uint64_t *)(*(void *)(a3 + 32) + v14);
        if (!v17[3]) {
          re::BlendShapeWeights::reset(v17, (uint64_t *)&v18);
        }
      }
      if (v18) {

      }
      ++v15;
      v14 += 32;
      v13 += 24;
      if (v6 == v15) {
        return;
      }
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    unsigned int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 797;
    __int16 v24 = 2048;
    unint64_t v25 = v15;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    unsigned int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = v15;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    unsigned int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = v15;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    unsigned int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = v15;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::DynamicArray<re::BlendShapeWeights>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 32 * a2;
    unint64_t v9 = a2;
    do
    {
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::BlendShapeWeights>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 32 * v4;
      do
      {
        uint64_t v7 = (_OWORD *)(*(void *)(a1 + 32) + v6);
        *uint64_t v7 = 0uLL;
        v7[1] = 0uLL;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

re *re::BlendShapeWeightsDefinitionAssetLoader::unloadAsset(re *this, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    re::DynamicArray<re::StringID>::deinit(a2 + 80);
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a2 + 40);
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return this;
}

BOOL re::BlendShapeWeightsDefinitionAssetLoader::isSupportedSourceExtension(re::BlendShapeWeightsDefinitionAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reblendshapeweights") == 0;
}

uint64_t re::BlendShapeWeightsDefinitionAssetLoader::introspectionType(re::BlendShapeWeightsDefinitionAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78BF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78BF8))
  {
    qword_26AF78BF0 = re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsDefinitionAsset, (void (*)(re::IntrospectionBase *))&unk_26AF78BE8, 0);
    __cxa_guard_release(&qword_26AF78BF8);
  }
  return qword_26AF78BF0;
}

void *re::allocInfo_BlendShapeWeightsMeshMap(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78BC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78BC0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF78C70, "BlendShapeWeightsMeshMap");
    __cxa_guard_release(&qword_26AF78BC0);
  }
  return &unk_26AF78C70;
}

void re::initInfo_BlendShapeWeightsMeshMap(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xF3E33F2C32AF1988;
  v13[1] = "BlendShapeWeightsMeshMap";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78BC8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78BC8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "meshIdentifier";
      *(void *)(v7 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78C08 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "blendShapeWeightsIndex";
      *(void *)(v11 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78C10 = v11;
      __cxa_guard_release(&qword_26AF78BC8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF78C08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsMeshMap>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsMeshMap>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsMeshMap>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsMeshMap>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::BlendShapeWeightsMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = "";
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = "";
  *(void *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::BlendShapeWeightsMeshMap>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = "";
  *(void *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsMeshMap>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void *re::allocInfo_BlendShapeWeightsDefinitionAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78BD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78BD8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF78CE8, "BlendShapeWeightsDefinitionAsset");
    __cxa_guard_release(&qword_26AF78BD8);
  }
  return &unk_26AF78CE8;
}

void re::initInfo_BlendShapeWeightsDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x4D45F6BDEA9529E4;
  v16[1] = "BlendShapeWeightsDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78BE0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78BE0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "blendShapeWeightNames";
      *(void *)(v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78C18 = v8;
      unint64_t v9 = (re *)re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsMeshMap>>::get(v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "blendShapeWeightsMeshMapping";
      *(void *)(v10 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = &qword_26AF78C30;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2800000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78C20 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "blendShapeNames";
      *(void *)(v14 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x5000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78C28 = v14;
      __cxa_guard_release(&qword_26AF78BE0);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF78C18;
  *((void *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsDefinitionAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsDefinitionAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsDefinitionAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsDefinitionAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info = (uint64_t)&unk_26E6D3B18;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex((re *)v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info, 0);
    qword_2687737E0 = 0x2800000003;
    dword_2687737E8 = v10;
    word_2687737EC = 0;
    *(void *)&xmmword_2687737F0 = 0;
    *((void *)&xmmword_2687737F0 + 1) = 0xFFFFFFFFLL;
    qword_268773800 = v9;
    unk_268773808 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info = (uint64_t)&unk_26E6D3B18;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_2687737F0 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info;
}

void re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsMeshMap>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78C00, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF78C00);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF78C30);
      qword_26AF78C30 = (uint64_t)&unk_26E6D3BB0;
      __cxa_guard_release(&qword_26AF78C00);
    }
  }
  if ((_MergedGlobals_72 & 1) == 0)
  {
    int v1 = (void *)qword_26AF78BD0;
    if (qword_26AF78BD0
      || (int v1 = re::allocInfo_BlendShapeWeightsMeshMap(a1),
          qword_26AF78BD0 = (uint64_t)v1,
          re::initInfo_BlendShapeWeightsMeshMap((re *)v1, v2),
          (_MergedGlobals_72 & 1) == 0))
    {
      _MergedGlobals_72 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF78C30, 0);
      qword_26AF78C40 = 0x2800000003;
      dword_26AF78C48 = v3;
      word_26AF78C4C = 0;
      *(void *)&xmmword_26AF78C50 = 0;
      *((void *)&xmmword_26AF78C50 + 1) = 0xFFFFFFFFLL;
      qword_26AF78C60 = (uint64_t)v1;
      unk_26AF78C68 = 0;
      qword_26AF78C30 = (uint64_t)&unk_26E6D3BB0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF78C30, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF78C50 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
  *(_OWORD *)(a3 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = a3;
  *(void *)(a3 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = a3 + 40;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a3 + 80);
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3);
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
  *(_OWORD *)(a1 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1;
  *(void *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = a1 + 40;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1)
{
  re::DynamicArray<re::StringID>::deinit(a1 + 80);
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a1);
}

void re::BlendShapeWeightsDefinitionAssetLoader::~BlendShapeWeightsDefinitionAssetLoader(re::BlendShapeWeightsDefinitionAssetLoader *this)
{
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (((unint64_t)*a2 >> 31) ^ ((unint64_t)*a2 >> 1));
  unint64_t v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  unint64_t v6 = *(unsigned int *)(a1 + 24);
  if (!v6)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v5 % v6;
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v5 % v6));
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v7, v5, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 24 * v11 + 8;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (1)
  {
    long long v10 = (void *)(v9 + 24 * v8 + 8);
    if (re::StringID::operator==(v10, a2)) {
      return (uint64_t)v10;
    }
    uint64_t v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

void *re::DynamicArray<re::FixedArray<re::StringID>>::add(void *this, void *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::FixedArray<re::StringID>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  unint64_t v5 = (void *)(v3[4] + 24 * v4);
  *unint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v5[2] = 0;
  uint64_t v6 = a2[1];
  *unint64_t v5 = *a2;
  v5[1] = v6;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = v5[2];
  uint64_t v5[2] = a2[2];
  a2[2] = v7;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  long long v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_5, 4 * v10);
    }
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v7);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  uint64_t v12 = 24 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v12) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  uint64_t v13 = *(void *)(a1 + 16) + 24 * v7;
  uint64_t v14 = *a5;
  *(void *)(v13 + 8) = *(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFFELL | *a5 & 1;
  *(void *)(v13 + 8) = *a5 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(void *)(v13 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = a5[1];
  *a5 = 0;
  a5[1] = (uint64_t)"";
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)char v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * ((*(void *)(*(void *)&v15[16] + v10 + 8) >> 31) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 1));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(void *)&v15[16] + v10 + 8, *(void *)&v15[16] + v10 + 8);
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

double re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::FixedArray<re::StringID>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[3 * v9];
        unint64_t v11 = v7;
        do
        {
          *unint64_t v11 = 0;
          v11[1] = 0;
          void v11[2] = 0;
          uint64_t v12 = v8[1];
          *unint64_t v11 = *v8;
          v11[1] = v12;
          *long long v8 = 0;
          v8[1] = 0;
          uint64_t v13 = v11[2];
          void v11[2] = v8[2];
          void v8[2] = v13;
          re::FixedArray<re::StringID>::deinit(v8);
          v8 += 3;
          v11 += 3;
        }
        while (v8 != v10);
        long long v8 = (void *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 48 * v9;
        unint64_t v11 = v7;
        do
        {
          *((_DWORD *)v11 + 8) = 0;
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          *(void *)((char *)v11 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11, v8);
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v8);
          v8 += 6;
          v11 += 6;
          v10 -= 48;
        }
        while (v10);
        long long v8 = (uint64_t *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::BlendShapeWeightsMeshMap>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::BlendShapeWeightsMeshMap>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 48 * v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + 8) = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = "";
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(v5 + 24) = *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = "";
  *(void *)(v5 + 40) = *(void *)(a2 + 40);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::BlendShapeWeightsMeshMap>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[6 * v9];
        unint64_t v11 = v7;
        do
        {
          *(unsigned char *)unint64_t v11 = *(unsigned char *)v8;
          uint64_t v13 = (re::StringID *)(v8 + 1);
          char v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          void v11[2] = v8[2];
          void v8[2] = "";
          v8[1] = 0;
          uint64_t v15 = v8[3];
          signed int v14 = (re::StringID *)(v8 + 3);
          void v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          void v11[3] = *(void *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[4] = *((void *)v14 + 1);
          *(void *)signed int v14 = 0;
          *((void *)v14 + 1) = "";
          v11[5] = *((void *)v14 + 2);
          re::StringID::destroyString(v14);
          re::StringID::destroyString(v13);
          long long v8 = (void *)((char *)v14 + 24);
          v11 += 6;
        }
        while (v8 != v10);
        long long v8 = (void *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::FixedArray<unsigned int>::init<unsigned int const&>(void *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  *double result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = result;
  double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 4 * a3, 4);
  void v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    double result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)double result = *a4;
      double result = (void *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)double result = *a4;
  return result;
}

void re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  char v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    signed int v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_5, 4 * v10);
    }
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (_DWORD *)(*(void *)&v13[16] + v10 + 24));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::DynamicArray<re::DynamicArray<float>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::DynamicArray<float>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 40 * v9;
        uint64_t v11 = v7 + 4;
        do
        {
          *uint64_t v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 4) = *(void *)v8;
          *(v11 - 3) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 2);
          *(v11 - 2) = *(void *)(v8 + 16);
          *(void *)(v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v13;
          uint64_t v14 = *v11;
          *uint64_t v11 = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<unsigned long>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::BlendShapeWeights>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::BlendShapeWeights>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (re::BlendShapeWeights *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 32 * v9;
        uint64_t v11 = v7;
        do
        {
          re::FixedArray<float>::FixedArray(v11, (uint64_t)v8);
          uint64_t v12 = *((void *)v8 + 3);
          void v11[3] = v12;
          if (v12) {
            id v13 = (id)(v12 + 8);
          }
          re::BlendShapeWeights::~BlendShapeWeights(v8);
          uint64_t v8 = (re::BlendShapeWeights *)((char *)v8 + 32);
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        uint64_t v8 = (re::BlendShapeWeights *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, re::BlendShapeWeights *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

ArcSharedObject *re::make::shared::object<re::BlendShapeWeightsDefinition,re::FixedArray<re::StringID> const&>@<X0>(const StringID **a1@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  uint64_t v4 = re::globalAllocators((re *)a1);
  long long v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 104, 8);
  uint64_t v6 = a1[1];
  v8[0] = a1[2];
  v8[1] = v6;
  *a2 = v5;
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    double result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::FixedArray<re::StringID>>::resize((void *)a4, a5);
    }
  }
  else
  {
    double result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::FixedArray<re::StringID>>::add(this, v10);
  re::FixedArray<re::StringID>::deinit(v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 24 * *((void *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 24 * a3;
}

void *re::DynamicArray<re::FixedArray<re::StringID>>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 24 * a2;
    unint64_t v9 = a2;
    do
    {
      double result = re::FixedArray<re::StringID>::deinit((void *)(v3[4] + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 24 * v4;
      do
      {
        unsigned int v7 = (void *)(v3[4] + v6);
        *unsigned int v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::FixedArray<re::StringID>>::clear((void *)a2);
  }
  else
  {
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
    *(void *)a2 = a4;
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((void *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  unint64_t v9 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::resize((void *)a2, a5);
  {
    re::TypeRegistry::typeInfo(*(void **)a3, *(void *)(*(void *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      long long v11 = *(char **)(a2 + 32);
      uint64_t v12 = 24 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
}

void *re::DynamicArray<re::FixedArray<re::StringID>>::clear(void *result)
{
  int v1 = result;
  uint64_t v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    uint64_t v3 = (void *)result[4];
    uint64_t v4 = 24 * v2;
    do
    {
      double result = re::FixedArray<re::StringID>::deinit(v3);
      v3 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 24 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::BlendShapeWeightsMeshMap>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v10 = 0;
  v11[0] = 0;
  v11[1] = "";
  v12[0] = 0;
  v12[1] = "";
  uint64_t v12[2] = 0;
  re::DynamicArray<re::BlendShapeWeightsMeshMap>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 48 * *((void *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 48 * a3;
}

void re::DynamicArray<re::BlendShapeWeightsMeshMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 48 * a2 + 24;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      ++v9;
      v8 += 48;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 48 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(unsigned char *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = "";
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = "";
        *(void *)(v7 + 40) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
    if (v8)
    {
      uint64_t v9 = 48 * v8;
      uint64_t v10 = (re::StringID *)(*(void *)(a1 + 32) + 24);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        uint64_t v10 = (re::StringID *)((char *)v10 + 48);
        v9 -= 48;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::BlendShapeWeightsMeshMap>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      id v13 = *(char **)(a1 + 32);
      uint64_t v14 = 48 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 48;
        v14 -= 48;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 48 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t *re::TextureAsset::assetType(re::TextureAsset *this)
{
  {
    re::TextureAsset::assetType(void)::type = (uint64_t)"Texture";
    qword_26879E688 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::TextureAsset::assetType(void)::type);
  }
  return &re::TextureAsset::assetType(void)::type;
}

uint64_t re::TextureAsset::makeTextureAsset(uint64_t a1, int a2, long long *a3)
{
  long long v7 = 0u;
  long long v8 = 0u;
  LOWORD(v8) = 257;
  BYTE2(v8) = 1;
  long long v3 = a3[1];
  v6[0] = *a3;
  v6[1] = v3;
  uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((re *)&v7, a1, a2, v6);

  return TextureAsset;
}

uint64_t re::TextureAsset::makeTextureAsset(re *a1, uint64_t a2, int a3, long long *a4)
{
  long long v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 424, 8);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0u;
  *(_OWORD *)(v9 + re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 144) = 0u;
  *(_OWORD *)(v9 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(void *)(v9 + re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 416) = 0;
  uint64_t v10 = re::TextureAsset::TextureAsset((re::TextureAsset *)v9);
  re::TextureAsset::setTextureAndSemantic((uint64_t)v10, a1, a2, a3);
  long long v11 = *a4;
  *(_OWORD *)(v9 + 24) = a4[1];
  *(_OWORD *)(v9 + 8) = v11;
  return v9;
}

void re::TextureAsset::setTextureAndSemantic(uint64_t a1, const re::ImportGraphicsContext *a2, uint64_t a3, int a4)
{
  long long v8 = (id *)(a3 + 96);
  *(unsigned char *)(a1 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152) = *(unsigned char *)a3;
  uint64_t v9 = (id *)(a1 + 160);
  uint64_t v10 = (void **)(a3 + 8);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 160, a3 + 8);
  re::ObjCObject::operator=((id *)(a1 + 248), v8);
  if (*(unsigned char *)(a1 + 122)
    && *(unsigned char *)(a1 + 124)
    && re::TextureData::isValid((re::TextureData *)(a1 + 256)))
  {
    *(unsigned char *)(a1 + 256) = *(unsigned char *)a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 264, (uint64_t)v10);
    re::ObjCObject::operator=((id *)(a1 + 352), v8);
  }
  *(_DWORD *)(a1 + 388) = a4;
  if (*(_DWORD *)(a1 + 240) >= 2u) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 360) = objc_msgSend(*(id *)(a1 + 160), sel_width);
  if (*(_DWORD *)(a1 + 240) >= 2u) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 3re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = objc_msgSend(*(id *)(a1 + 160), sel_height);
  if (*(_DWORD *)(a1 + 240) >= 2u) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 368) = objc_msgSend(*(id *)(a1 + 160), sel_depth);
  if (*(_DWORD *)(a1 + 240) >= 2u) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 3re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = objc_msgSend(*(id *)(a1 + 160), sel_arrayLength);
  if (*(_DWORD *)(a1 + 240) >= 2u) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 376) = objc_msgSend(*(id *)(a1 + 160), sel_pixelFormat);
  if (*(_DWORD *)(a1 + 240) >= 2u) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 380) = objc_msgSend(*(id *)(a1 + 160), sel_textureType);
  long long v11 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;

  unsigned int v12 = *(_DWORD *)(a1 + 240);
  if (!v12)
  {
    id v13 = objc_msgSend(*v9, sel_device);
    if (v13)
    {
      uint64_t v14 = v13;
      int v15 = [v13 supportsTextureSwizzle];

      if (!v15)
      {
        *(_DWORD *)(a1 + 384) = 84148994;
        goto LABEL_18;
      }
    }
    unsigned int v12 = *(_DWORD *)(a1 + 240);
  }
  if (v12 >= 2) {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 384) = objc_msgSend(*(id *)(a1 + 160), sel_swizzle);
LABEL_18:
  if ((*(_DWORD *)(a1 + 388) - 3) <= 1) {
    re::TextureAsset::updateColorSpaceFromTexture((re::TextureAsset *)a1, a2, 0);
  }
  if (*(void *)(a1 + 56) && *(void *)(a1 + 48))
  {
    if (!*(_DWORD *)(a3 + 88))
    {
      re::TextureHandle::setMetalTexture((const re::TextureHandle *)(a1 + 48), v10);
      re::TextureAsset::updateLegacyLinearFormatWithSRGBDataTexture((re::TextureAsset *)a1, (id *)a2);
      return;
    }
LABEL_27:
    uint64_t v16 = std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAsset::makeTextureAssetWithIOSurface(v16);
  }
}

uint64_t re::TextureAsset::makeTextureAssetWithIOSurface(id *a1, id *a2, uint64_t a3, uint64_t a4)
{
  re::mtl::Device::makeTextureWithIOSurface(*a2, a1, a3, a4, &v6);
  v7[0] = 0;
  v8[0] = v6;
  unsigned int v9 = 0;
  id v10 = 0;
  memset(&v11[12], 0, 13);
  *(_DWORD *)long long v11 = 16777473;
  v11[4] = 1;
  *(_DWORD *)&v11[8] = 1;
  int v12 = 0;
  uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v7, 6, (long long *)v11);

  if (v9 != -1) {
    ((void (*)(unsigned char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                         + v9))(v11, v8);
  unsigned int v9 = -1;
  if (v6) {

  }
  return TextureAsset;
}

uint64_t re::TextureAsset::makeTextureAssetWithDirectTexture(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 424, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0u;
  *(_OWORD *)(v3 + re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 144) = 0u;
  *(_OWORD *)(v3 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(void *)(v3 + re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 416) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  unint64_t v4 = (void **)(v3 + 112);
  re::TextureAsset::TextureAsset((re::TextureAsset *)v3);
  re::DirectTexturePayload::make((uint64_t)a1, &v8);
  if ((REDirectTexturePayload **)(v3 + 112) != &v8)
  {
    unint64_t v5 = v8;
    long long v8 = 0;
    id v6 = *v4;
    uint64_t *v4 = v5;
  }
  return v3;
}

id re::TextureData::mipmapLevelCount(re::TextureData *this)
{
  int v1 = *((_DWORD *)this + 22);
  if (v1 == 1) {
    return (id)*((void *)this + 4);
  }
  if (v1)
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return (id)re::TextureAsset::updateMips(v4);
  }
  else
  {
    uint64_t v2 = (void *)*((void *)this + 1);
    return objc_msgSend(v2, sel_mipmapLevelCount);
  }
}

void re::TextureAsset::updateMips(uint64_t a1, const re::ImportGraphicsContext *a2, id *a3)
{
  id v5 = *a3;
  if (*(_DWORD *)(a1 + 344))
  {
    long long v8 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAsset::isLegacyLinearFormatWithSRGBData(v8);
  }
  else
  {
    id v6 = v5;
    id v7 = *(id *)(a1 + 264);
    id v16 = v6;
    id v15 = v7;
    re::copyTextureMips((uint64_t)a2, &v16, &v15, (unsigned __int16 *)(a1 + 120));
    if (v15)
    {

      id v15 = 0;
    }
    if (v16)
    {

      id v16 = 0;
    }
    id v13 = v7;
    re::makeLoadedTextureView(&v13, (_WORD *)(a1 + 120), &v14);
    if (v13)
    {

      id v13 = 0;
    }
    if (v14)
    {
      v9[0] = 0;
      v10[0] = v14;
      unsigned int v11 = 0;
      id v12 = 0;
      re::TextureAsset::setTextureAndSemantic(a1, a2, (uint64_t)v9, *(_DWORD *)(a1 + 388));

      if (v11 != -1) {
        ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
      }
                                            + v11))(&v17, v10);
      if (v14) {
    }
      }
    if (v7) {

    }
    if (v6) {
  }
    }
}

BOOL re::TextureAsset::isLegacyLinearFormatWithSRGBData(re::TextureAsset *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2 && !*(unsigned char *)(v2 + 296)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 97);
  if (v3 != 6 && v3 != 0) {
    return 0;
  }
  MTLPixelFormatGetInfoForDevice();
  uint64_t v5 = *((unsigned int *)this + 94);
  return v5 != re::translateLinearPixelFormatToSRGB(v5);
}

void re::TextureAsset::createTextureSRGBAdaptor(id *a1@<X0>, id *a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  int v8 = re::translateLinearPixelFormatToSRGB((uint64_t)objc_msgSend(*a2, sel_pixelFormat));
  if (objc_msgSend(*a2, sel_pixelFormat) == (id)v8)
  {
    *a4 = 0;
    return;
  }
  if (a1)
  {
    if (a3)
    {
LABEL_5:
      *a4 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    objc_msgSend(*a2, sel_device);
    if (a3) {
      goto LABEL_5;
    }
  }
  objc_msgSend(*a2, sel_textureType);
  int isSupportedPixelFormat = re::isSupportedPixelFormat();
  *a4 = 0;
  if (isSupportedPixelFormat)
  {
    id v19 = objc_msgSend(*a2, sel_newTextureViewWithPixelFormat_, v8);
    NS::SharedPtr<MTL::Texture>::operator=(a4, &v19);
    goto LABEL_25;
  }
LABEL_9:
  if (!a1) {
    return;
  }
  re::createDescriptorFromTexture(a1, a2, &v19);
  objc_msgSend(v19, sel_setUsage_, (int)objc_msgSend(*a2, sel_usage) | 2);
  objc_msgSend(v19, sel_setSwizzle_, 84148994);
  if (v8 == 11)
  {
    objc_msgSend(v19, sel_setPixelFormat_, 25);
    re::mtl::Device::makeTexture(v19, a1, &v18);
    NS::SharedPtr<MTL::Texture>::operator=(a4, &v18);
    if (v18) {

    }
    if (!*a4) {
      goto LABEL_25;
    }
    re::copyTexture(a1, a2, a4, 0x5040302uLL, 1);
    if (objc_msgSend(*a2, sel_swizzle) == 84148994) {
      goto LABEL_25;
    }
    id v10 = *a4;
    id v11 = objc_msgSend(*a4, sel_pixelFormat);
    id v12 = objc_msgSend(*a4, sel_textureType);
    id v13 = objc_msgSend(*a4, sel_mipmapLevelCount);
    id v14 = *a4;
    uint64_t v15 = (uint64_t)objc_msgSend(*a4, sel_arrayLength);
    if ((char *)objc_msgSend(v14, sel_textureType) - 5 >= (char *)2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 6 * v15;
    }
    id v17 = objc_msgSend(v10, sel_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_, v11, v12, 0, v13, 0, v16, objc_msgSend(*a2, sel_swizzle));
  }
  else
  {
    objc_msgSend(v19, sel_setPixelFormat_, 70);
    re::mtl::Device::makeTexture(v19, a1, &v18);
    NS::SharedPtr<MTL::Texture>::operator=(a4, &v18);
    if (v18) {

    }
    if (!*a4) {
      goto LABEL_25;
    }
    re::copyTexture(a1, a2, a4, 0x5040302uLL, 0);
    id v17 = objc_msgSend(*a4, sel_newTextureViewWithPixelFormat_, 71);
  }
  id v18 = v17;
  NS::SharedPtr<MTL::Texture>::operator=(a4, &v18);
  if (v18) {

  }
LABEL_25:
  if (v19) {
}
  }

void re::TextureAsset::addLegacyLinearFormatWithSRGBDataTexture(os_unfair_lock_s **this, os_unfair_lock_s **a2)
{
  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)a2, (re::ImportGraphicsContext *)v6);
  re::TextureHandle::unsynchronizedMetalTexture(this + 6, v4);
  re::TextureAsset::createTextureSRGBAdaptor(v6, v4, 0, &v5);
  if (v4[0]) {

  }
  if (v5)
  {
    re::TextureManager::registerTexture(a2[8], &v5, (os_unfair_lock_s **)v4);
    re::TextureHandle::operator=((re::TextureHandle *)(this + 17), (re::TextureHandle *)v4);
    re::TextureHandle::invalidate((re::TextureHandle *)v4);
    if (v5) {
  }
    }
}

void re::TextureAsset::updateLegacyLinearFormatWithSRGBDataTexture(re::TextureAsset *this, id *a2)
{
  if (*((void *)this + 18))
  {
    int v3 = (re::TextureAsset *)((char *)this + 136);
    if (*((void *)this + 17))
    {
      if (*((_DWORD *)this + 60))
      {
        id v7 = (re::TextureData *)std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureData::isValid(v7);
        return;
      }
      id v5 = objc_msgSend(*((id *)this + 20), sel_pixelFormat);
      if (v5 == (id)(int)re::translateLinearPixelFormatToSRGB((uint64_t)v5))
      {
        re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)this + 6, &v9);
      }
      else
      {
        if (!*a2) {
          a2 = 0;
        }
        id v6 = (os_unfair_lock_s **)((char *)this + 48);
        re::TextureHandle::unsynchronizedMetalTexture(v6, &v8);
        re::TextureAsset::createTextureSRGBAdaptor(a2, &v8, 0, &v9);
        if (v8) {

        }
        if (!v9)
        {
          re::TextureHandle::unsynchronizedMetalTexture(v6, &v8);
          re::TextureHandle::setMetalTexture(v3, &v8);
          if (v8) {

          }
          goto LABEL_12;
        }
      }
      re::TextureHandle::setMetalTexture(v3, &v9);
LABEL_12:
      if (v9) {
    }
      }
  }
}

uint64_t re::TextureData::isValid(re::TextureData *this)
{
  int v1 = *((_DWORD *)this + 22);
  if (v1)
  {
    if (v1 != 1)
    {
      int v3 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
      return re::TextureAsset::updateColorSpaceFromTexture(v3, v4, v5);
    }
    if (!*((void *)this + 4)) {
      return 0;
    }
  }
  return *((void *)this + 1) != 0;
}

void re::TextureAsset::updateColorSpaceFromTexture(re::TextureAsset *this, const re::ImportGraphicsContext *a2, __CFString *theString)
{
  CGColorSpaceNameForPixelFormat = theString;
  if (theString
    || (CGColorSpaceNameForPixelFormat = (__CFString *)*((id *)this + 31)) != 0
    || *((unsigned char *)a2 + 19)
    && (CGColorSpaceNameForPixelFormat = (__CFString *)re::ColorHelpers::getCGColorSpaceNameForPixelFormat(*((_DWORD *)this + 94), *((unsigned __int8 *)a2 + 20))) != 0)
  {
    CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(CGColorSpaceNameForPixelFormat, 0x8000100u);
    re::DynamicString::operator=((re::TextureAsset *)((char *)this + 392), (re::DynamicString *)&v7);
    if (v7)
    {
      if (v8) {
        (*(void (**)(void))(*(void *)v7 + 40))();
      }
    }
    re::TextureData::setColorSpace((id *)this + 19, CGColorSpaceNameForPixelFormat);
  }
}

void re::TextureAsset::setTextureAndSemantic(const re::ImportGraphicsContext *a1, uint64_t *a2, uint64_t a3, int a4, long long *a5)
{
  re::AssetHandle::loadNow(a2[1], 0);
  uint64_t v10 = a2[1];
  if (v10)
  {
    unsigned int v11 = atomic_load((unsigned int *)(v10 + 704));
    if (v11 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
      ++*(_DWORD *)(a2[1] + 260);
      uint64_t v12 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a2);
      if (v12)
      {
        uint64_t v13 = v12;
        re::TextureAsset::setTextureAndSemantic(v12, a1, a3, a4);
        long long v14 = *a5;
        *(_OWORD *)(v13 + 24) = a5[1];
        *(_OWORD *)(v13 + 8) = v14;
        uint64_t v15 = a2[1];
        *(unsigned char *)(v15 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v15);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize((re::internal::AssetEntry *)a2[1]);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
}

uint64_t re::TextureAsset::setTextureAndSemantic_makeMutable(const re::ImportGraphicsContext *a1, uint64_t *a2, uint64_t a3, int a4, long long *a5)
{
  re::AssetHandle::loadNow(a2[1], 0);
  uint64_t v10 = a2[1];
  if (!v10) {
    goto LABEL_13;
  }
  unsigned int v11 = *(os_unfair_lock_s **)(v10 + 24);
  if (v11)
  {
    int v12 = re::AssetManager::convertToMutable(v11, (const re::AssetHandle *)a2);
    uint64_t v13 = a2[1];
    if (!v13) {
      goto LABEL_13;
    }
    unsigned int v14 = atomic_load((unsigned int *)(v13 + 704));
    if (v12)
    {
      if (v14 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
        ++*(_DWORD *)(a2[1] + 260);
        uint64_t v15 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a2);
        if (v15)
        {
          uint64_t v16 = v15;
          re::TextureAsset::setTextureAndSemantic(v15, a1, a3, a4);
          long long v17 = *a5;
          *(_OWORD *)(v16 + 24) = a5[1];
          *(_OWORD *)(v16 + 8) = v17;
          uint64_t v18 = a2[1];
          *(unsigned char *)(v18 + 256) = 1;
LABEL_12:
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v18);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize((re::internal::AssetEntry *)a2[1]);
          goto LABEL_13;
        }
      }
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v14 = atomic_load((unsigned int *)(v10 + 704));
  }
  if (v14 == 2)
  {
    ++*(_DWORD *)(a2[1] + 260);
    uint64_t v19 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a2);
    if (v19)
    {
      uint64_t v20 = v19;
      re::TextureAsset::setTextureAndSemantic(v19, a1, a3, a4);
      long long v21 = *a5;
      *(_OWORD *)(v20 + 24) = a5[1];
      *(_OWORD *)(v20 + 8) = v21;
      uint64_t v18 = a2[1];
      goto LABEL_12;
    }
  }
LABEL_13:
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
  return 1;
}

void re::TextureAsset::setMetalTexture_fromDrawableQueue(uint64_t a1, re::ImportGraphicsContext *a2, void **a3, int a4)
{
  re::TextureHandle::setMetalTexture((const re::TextureHandle *)(a1 + 48), a3);
  if (a4)
  {
    re::ImportGraphicsContext::createFromRenderManager(a2, (re::ImportGraphicsContext *)v7);
    re::TextureAsset::updateLegacyLinearFormatWithSRGBDataTexture((re::TextureAsset *)a1, v7);
  }
}

void re::TextureData::setColorSpace(id *this, __CFString *a2)
{
  objc_storeStrong(this + 12, a2);
}

void re::TextureAssetLoader::init(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  a1[1] = a2;
  a1[2] = a3;
  re::ObjCObject::operator=((id *)a1 + 5, (id *)a4);
  re::ObjCObject::operator=((id *)a1 + 6, (id *)(a4 + 8));
  __int16 v16 = *(_WORD *)(a4 + 16);
  *((unsigned char *)a1 + 58) = *(unsigned char *)(a4 + 18);
  *((_WORD *)a1 + 28) = v16;
  if (*((unsigned char *)a1 + 59) || *(unsigned char *)(a4 + 19))
  {
    if (!*((unsigned char *)a1 + 59) || *(unsigned char *)(a4 + 19))
    {
      if (!*((unsigned char *)a1 + 59) && *(unsigned char *)(a4 + 19)) {
        *((unsigned char *)a1 + 59) = 1;
      }
      *((unsigned char *)a1 + 60) = *(unsigned char *)(a4 + 20);
    }
    else
    {
      *((unsigned char *)a1 + 59) = 0;
    }
  }
  a1[8] = *(void *)(a4 + 24);
  a1[9] = a6;
  a1[3] = a5;
  a1[4] = a7;
  *((unsigned char *)a1 + 88) = a8;
  re::Defaults::BOOLValue((re::Defaults *)"preloadEngineTextureAssets", v15, (char *)&v22);
  if ((_BYTE)v22) {
    char v17 = BYTE1(v22);
  }
  else {
    char v17 = 1;
  }
  *((unsigned char *)a1 + 89) = v17;
  if (a9)
  {
    __int16 v22 = a1;
    re::make::shared::object<re::TextureAssetRealityFileProviderCallbacks,re::TextureAssetLoader *>((re *)&v22, &v20);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 10, v20);
    uint64_t v19 = *(void *)(a1[1] + 1184);
    if (v19)
    {
      re::TextureAsset::assetType(v18);
      uint64_t v21 = v20;
      __int16 v22 = &re::TextureAsset::assetType(void)::type;
      re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::add<re::RealityFileAssetProvider::PerTypeLoadCallbacks*&>(v19 + 232, (uint64_t *)&v22, &v21);
    }
    if (v20) {
  }
    }
}

__n128 re::TextureAssetLoader::initSpecializedTemporaryLoader(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  re::ObjCObject::operator=((id *)(a1 + 40), (id *)(a2 + 40));
  re::ObjCObject::operator=((id *)(a1 + 48), (id *)(a2 + 48));
  __int16 v4 = *(_WORD *)(a2 + 56);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(_WORD *)(a1 + 56) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 59);
  if (*(unsigned char *)(a1 + 59)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6)
  {
    if (*(unsigned char *)(a1 + 59)) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *(unsigned char *)(a1 + 59) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 59) && *(unsigned char *)(a2 + 59)) {
        *(unsigned char *)(a1 + 59) = 1;
      }
      *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
    }
  }
  *(_OWORD *)(a1 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = *(_OWORD *)(a2 + 64);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return result;
}

void re::TextureAssetLoader::~TextureAssetLoader(re::TextureAssetLoader *this)
{
  *(void *)this = &unk_26E6D3C48;
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    *(void *)(v2 + 24) = 0;
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 96);
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {

    *((void *)this + 10) = 0;
  }
}

{
  uint64_t vars8;

  re::TextureAssetLoader::~TextureAssetLoader(this);
  JUMPOUT(0x237DBCBD0);
}

void re::TextureAssetLoader::preloadAssets(uint64_t a1, uint64_t a2)
{
  if (re::ServiceLocator::serviceOrNull<re::RenderManager>(a2))
  {
    uint64_t v4 = re::ServiceLocator::service<re::AssetService>(a2);
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(v4 + 1128), "BuiltinTexture");
    if (ProviderForScheme)
    {
      re::BuiltinTextureAssetProvider::buildFallbackTextureDescriptors(ProviderForScheme, v6, (uint64_t)v19);
      if (v20)
      {
        BOOL v7 = v21;
        uint64_t v8 = 144 * v20;
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)v7);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)v12, v7 + 4);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)v15, v7 + 9);
          re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)(v7 + 14));
          os_unfair_lock_lock((os_unfair_lock_t)(v4 + 64));
          re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)v4, (const re::AssetLoadDescriptor *)&v10, v9);
          os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 64));
          if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 352))()) {
            re::AssetHandle::loadAsync((re::AssetHandle *)v9);
          }
          re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 96), (re::AssetHandle *)v9);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
          if (v18[0])
          {
            if (v18[1]) {
              (*(void (**)(void))(*(void *)v18[0] + 40))();
            }
            memset(v18, 0, sizeof(v18));
          }
          if (v15[0])
          {
            if (v17) {
              (*(void (**)(void))(*(void *)v15[0] + 40))();
            }
            uint64_t v17 = 0;
            memset(v15, 0, sizeof(v15));
            ++v16;
          }
          if (v12[0])
          {
            if (v14) {
              (*(void (**)(void))(*(void *)v12[0] + 40))();
            }
            uint64_t v14 = 0;
            memset(v12, 0, sizeof(v12));
            ++v13;
          }
          if (v10 && (v11 & 1) != 0) {
            (*(void (**)(void))(*(void *)v10 + 40))();
          }
          v7 += 18;
          v8 -= 144;
        }
        while (v8);
      }
      re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v19);
    }
    re::AssetManager::assetHandle((re::AssetManager *)v4, "engine:blueNoise64RGBA8.ktx", 1, 0, &v10);
    if (*(unsigned char *)(a1 + 89)
      || (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 352))(*(void *)(a1 + 8)))
    {
      re::AssetHandle::loadAsync((re::AssetHandle *)&v10);
    }
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 96), (re::AssetHandle *)&v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
}

uint64_t re::TextureAssetLoader::defaultAssetCompileOptions(re::TextureAssetLoader *this, int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = re::globalAllocators(this);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 32, 4);
  *(void *)(result + 4) = 0;
  *(void *)(result + 20) = 0;
  *(void *)(result + 12) = 0;
  *(_DWORD *)uint64_t result = 16777473;
  *(unsigned char *)(result + 4) = 1;
  *(_DWORD *)(result + 28) = 0;
  *(void *)(result + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 8) = 0x100000001;
  return result;
}

void re::reinterpretAsLinear(re *this, const re::TextureData *a2)
{
  if (*((_DWORD *)a2 + 22) >= 2u) {
    goto LABEL_15;
  }
  uint64_t v4 = (char *)a2 + 8;
  int v5 = re::translateSRGBPixelFormatToLinear((uint64_t)objc_msgSend(*((id *)a2 + 1), sel_pixelFormat));
  if (*((_DWORD *)v4 + 20) >= 2u) {
    goto LABEL_15;
  }
  int v6 = v5;
  if (v5 == objc_msgSend(*(id *)v4, sel_pixelFormat))
  {
    *(unsigned char *)this = *(unsigned char *)a2;
    *((unsigned char *)this + 8) = 0;
    *((_DWORD *)this + 22) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 8, (uint64_t)v4);
    *((void *)this + 12) = *((id *)a2 + 12);
    return;
  }
  int v7 = *((_DWORD *)a2 + 22);
  if (v7 != 1)
  {
    if (!v7)
    {
      id v8 = objc_msgSend(*((id *)a2 + 1), sel_newTextureViewWithPixelFormat_, v6);
      id v9 = (__CFString *)*((id *)a2 + 12);
      *(unsigned char *)this &= 0x80u;
      *((void *)this + 1) = v8;
      *((_DWORD *)this + 22) = 0;
      *((void *)this + 12) = 0;
      re::TextureData::setColorSpace((id *)this, v9);
      if (v8)
      {
      }
      return;
    }
LABEL_15:
    uint64_t v12 = std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAssetLoader::serializeAssetBlob(v12);
    return;
  }
  id v10 = objc_msgSend(*((id *)a2 + 1), sel_copy);
  objc_msgSend(v10, sel_setPixelFormat_, v6);
  if (*((_DWORD *)a2 + 22) != 1) {
    goto LABEL_15;
  }
  id v13 = v10;
  char v11 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray((uint64_t)&v14, (uint64_t *)a2 + 2);
  memset(v15, 0, sizeof(v15));
  re::DynamicString::setCapacity(v15, 0);
  re::TextureData::TextureData((uint64_t)this, (uint64_t)&v13, (__CFString *)*((id *)a2 + 12));
  re::CPUTexture::~CPUTexture(&v13);
  if (v10) {
}
  }

uint64_t re::TextureAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v7 = (id *)(a3 + 152);
  v36[0] = *(unsigned char *)(a3 + 152);
  v37[0] = 0;
  unsigned int v38 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37, a3 + 160);
  id v8 = v7[12];
  id v39 = v8;
  if (!a4) {
    goto LABEL_62;
  }
  uint64_t v9 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)&v44);
  id v10 = v44;
  if (v44 && (v45 & 1) != 0) {
    id v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  if (v9 && *(_DWORD *)(v9 + 32) == 1)
  {
    id v11 = *(id *)v9;
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, [v11 bytes], objc_msgSend(v11, "length"));
    uint64_t v13 = v12 == [v11 length];

    goto LABEL_53;
  }
  unint64_t v14 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)&v44);
  uint64_t v15 = 0x7FFFFFFFLL;
  if (*(void *)a4)
  {
    uint64_t v16 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * (v14 % *(unsigned int *)(a4 + 24)));
    if (v16 != 0x7FFFFFFF)
    {
      uint64_t v17 = *(void *)(a4 + 16);
      uint64_t v15 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v17 + 88 * v16 + 16, (uint64_t)&v44))
      {
        uint64_t v16 = *(_DWORD *)(v17 + 88 * v16 + 8) & 0x7FFFFFFF;
        if (v16 == 0x7FFFFFFF) {
          goto LABEL_15;
        }
      }
      uint64_t v15 = v16;
    }
  }
LABEL_15:
  if (v44 && (v45 & 1) != 0) {
    (*(void (**)(void))(*(void *)v44 + 40))();
  }
  if (v15 != 0x7FFFFFFF)
  {
    LOBYTE(v44) = 0;
    if (shouldForceToLinearPixelFormat)
    {
      re::reinterpretAsLinear((re *)v40, (const re::TextureData *)v7);
      buf[0] = 1;
      BYTE4(v53) = v40[0];
      v54[0] = 0;
      int v55 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v54, (uint64_t)v41);
      id v23 = v43;
      id v43 = 0;
      id v56 = v23;
      if ((_BYTE)v44 || buf[0])
      {
        if (!(_BYTE)v44 || buf[0])
        {
          if ((_BYTE)v44 || !buf[0])
          {
            LOBYTE(v45) = BYTE4(v53);
            std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)&v46, (uint64_t)v54);
            unint64_t v25 = v56;
            id v56 = 0;
            id v26 = v50;
            id v50 = v25;
          }
          else
          {
            LOBYTE(v44) = 1;
            LOBYTE(v45) = BYTE4(v53);
            char v46 = 0;
            LODWORD(v49) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)&v46, (uint64_t)v54);
            __int16 v24 = v56;
            id v56 = 0;
            id v50 = v24;
          }
        }
        else
        {

          if (v49 != -1) {
            ((void (*)(char *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
          }
                                                  + v49))(&v51, &v46);
          LODWORD(v49) = -1;
          LOBYTE(v44) = 0;
        }
      }
      re::Optional<re::TextureData>::~Optional((uint64_t)buf);

      if (v42 != -1) {
        shouldForceToLinearPixelFormat = (_anonymous_namespace_ *)((uint64_t (*)(char *, unsigned char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix + v42))(&v51, v41);
      }
    }
    uint64_t v27 = *(void *)(a3 + 24);
    uint64_t v28 = *(unsigned int *)(a3 + 32);
    unsigned int v29 = *(_DWORD *)(a3 + 36);
    int v30 = *(_DWORD *)(a3 + 20);
    if ((_BYTE)v44) {
      long long v31 = (re::TextureData *)&v45;
    }
    else {
      long long v31 = (re::TextureData *)v7;
    }
    if (v30 == 4) {
      uint64_t v32 = v29;
    }
    else {
      uint64_t v32 = 1056964608;
    }
    uint64_t v33 = v27;
    if (v30 != 4) {
      uint64_t v33 = 1;
    }
    uint64_t v13 = re::exportToKtxWithRGBA8ToASTCCompression(a2, v31, v33 | v27 & 0xFFFFFFFF00000000, v28 | (v32 << 32), *(_DWORD *)(a3 + 388));
    re::Optional<re::TextureData>::~Optional((uint64_t)&v44);
  }
  else
  {
LABEL_62:
    {
      re::reinterpretAsLinear((re *)&v44, (const re::TextureData *)v36);
      v36[0] = (_BYTE)v44;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)&v45);
      id v18 = v49;
      id v49 = 0;
      id v19 = v39;
      id v39 = v18;

      if (v48 != -1) {
        ((void (*)(uint8_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
      }
                                                    + v48))(buf, &v45);
    }
    re::exportToKtx(a2, (uint64_t)v36, 0, 0, (uint64_t)&v44);
    if ((_BYTE)v44)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v21 = *re::assetTypesLogObjects(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        if (v46) {
          uint64_t v35 = *(unsigned char **)&v47[7];
        }
        else {
          uint64_t v35 = v47;
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v53 = v35;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      }
      uint64_t v13 = (_BYTE)v44 != 0;
      if (!(_BYTE)v44)
      {
        if (v45 && (v46 & 1) != 0) {
          (*(void (**)(void))(*(void *)v45 + 40))();
        }
        uint64_t v13 = 0;
      }
    }
  }
LABEL_53:

  if (v38 != -1) {
    ((void (*)(_anonymous_namespace_ **, unsigned char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                                             + v38))(&v44, v37);
  return v13;
}

uint64_t re::anonymous namespace'::shouldForceToLinearPixelFormat(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)v10);
    if (*(void *)&v10[0] && (BYTE8(v10[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v10[0] + 40))();
    }
    if (v6 && !*(_DWORD *)(v6 + 32))
    {
      int v7 = (*(unsigned char *)(v6 + 8) & 1) != 0 ? *(const char **)(v6 + 16) : (const char *)(v6 + 9);
      if (atoi(v7) > 4) {
        return 0;
      }
    }
  }
  if (*(_DWORD *)(a2 + 88) >= 2u)
  {
    uint64_t v9 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
    return re::TextureAsset::copyColorSpaceToCFStringPtr(v9);
  }
  else
  {
    objc_msgSend(*(id *)(a2 + 8), sel_pixelFormat);
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    MTLPixelFormatGetInfoForDevice();
    if ((WORD4(v10[0]) & 0x800) == 0) {
      return 0;
    }
    return *((_DWORD *)a1 + 97) == 3;
  }
}

void re::TextureAsset::copyColorSpaceToCFStringPtr(re::TextureAsset *this@<X0>, const __CFString **a2@<X8>)
{
  *a2 = 0;
  unint64_t v3 = *((void *)this + 50);
  unint64_t v4 = v3 >> 1;
  if ((v3 & 1) == 0) {
    unint64_t v4 = v3 >> 1;
  }
  if (v4)
  {
    if (v3) {
      int v5 = (const char *)*((void *)this + 51);
    }
    else {
      int v5 = (char *)this + 401;
    }
    CFStringRef v6 = (id)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, 0x8000100u);
    *a2 = v6;
    CFRelease(v6);
  }
}

void re::TextureAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, int a11, uint64_t a12)
{
  v117[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 112))
  {
    v100[0] = 0;
    uint64_t v101 = 0;
    LODWORD(v109) = 0;
    id v110 = 0;
    *(unsigned char *)(a2 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152) = 0;
    uint64_t v13 = (uint8_t *)(a2 + 152);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a2 + 160, (uint64_t)&v101);
    if (v13 != v100)
    {
      id v14 = v110;
      id v110 = 0;
      uint64_t v15 = *(void **)(a2 + 248);
      *(void *)(a2 + 248) = v14;
    }
    if (v109 != -1) {
      ((void (*)(uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
    }
                                                  + v109))(&v90, &v101);
    v100[0] = 0;
    uint64_t v101 = 0;
    LODWORD(v109) = 0;
    id v110 = 0;
    *(unsigned char *)(a2 + 256) = 0;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a2 + 264, (uint64_t)&v101);
    if ((uint8_t *)(a2 + 256) != v100)
    {
      id v16 = v110;
      id v110 = 0;
      uint64_t v17 = *(void **)(a2 + 352);
      *(void *)(a2 + re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 352) = v16;
    }
    if (v109 != -1) {
      ((void (*)(uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
    }
                                                  + v109))(&v90, &v101);
    *(void *)(a2 + 376) = 0x200000000;
    *(_DWORD *)(a2 + 384) = 84148994;
    *(_DWORD *)(a2 + 388) = 6;
    *(void *)unint64_t v100 = "";
    uint64_t v101 = 0;
    re::DynamicString::operator=((re::DynamicString *)(a2 + 392), (uint64_t)v100);
    *(_DWORD *)(a2 + 368) = 1;
    *(void *)(a2 + 360) = 0x100000001;
    *(_DWORD *)(a2 + 122) = 0;
    if (*(unsigned char *)(a2 + 126)) {
      *(unsigned char *)(a2 + 126) = 0;
    }
    *(_WORD *)(a2 + 120) = 0;
    *(_DWORD *)(a2 + 8) = 16777473;
    *(unsigned char *)(a2 + 12) = 1;
    *(_WORD *)(a2 + 13) = 0;
    *(unsigned char *)(a2 + 15) = 0;
    *(_DWORD *)(a2 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 1;
    *(void *)(a2 + 28) = 0;
    *(void *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 36) = 0;
    return;
  }
  if ((re::TextureData::isValid((re::TextureData *)(a2 + 152)) & 1) != 0 || !a3) {
    return;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 384);
  uint64_t v99 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 88))(a3))
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 72))(a3);
    a3 = 0;
    uint64_t v99 = v22;
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v98 = 0;
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = a3;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v94 = 0;
  int v97 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  uint64_t v90 = v23;
  int v93 = 0;
  BOOL Next = re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v90, 0xFFFFFFFFFFFFFFFFLL);
  if (!Next)
  {
    uint64_t v28 = *re::assetTypesLogObjects((re *)Next);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v100 = 0;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "Missing blob to create texture", v100, 2u);
    }
    goto LABEL_128;
  }
  re::TextureAsset::copyColorSpaceToCFStringPtr((re::TextureAsset *)a2, (const __CFString **)&v89);
  CFStringRef v25 = v89;
  id v26 = v89;
  if (!v89)
  {
    if ((*(_DWORD *)(a2 + 388) - 3) > 1)
    {
      id v26 = 0;
    }
    else
    {
      int v27 = re::translateLinearPixelFormatToSRGB(*(unsigned int *)(a2 + 376));
      id v26 = (__CFString *)(id)re::ColorHelpers::getCGColorSpaceNameForPixelFormat(v27, 0);
      unint64_t v89 = v26;
    }
  }
  unsigned int v88 = *(_DWORD *)(a2 + 384);
  uint64_t isHDR = *(unsigned int *)(a2 + 376);
  if (isHDR)
  {
    uint64_t isHDR = re::isHDR(isHDR);
    if (isHDR) {
      unsigned __int8 v30 = 1;
    }
    else {
      unsigned __int8 v30 = 2;
    }
    if (a5) {
      goto LABEL_35;
    }
  }
  else
  {
    unsigned __int8 v30 = 0;
    if (a5)
    {
LABEL_35:
      uint64_t v31 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a5, (uint64_t)v100);
      if (*(void *)v100 && (v101 & 1) != 0) {
        (*(void (**)(void))(**(void **)v100 + 40))();
      }
      int v32 = *(_DWORD *)(a2 + 388);
      if (v31) {
        BOOL v33 = (v32 - 3) >= 2;
      }
      else {
        BOOL v33 = 1;
      }
      int v35 = !v33 && v25 == 0;
      goto LABEL_49;
    }
  }
  int v35 = 0;
  int v32 = *(_DWORD *)(a2 + 388);
LABEL_49:
  v117[0] = &unk_26E6D3E98;
  v117[1] = &v99;
  v117[3] = v117;
  re::TextureAssetLoader::parseKTXData(a1, v91, v92, &v88, (int *)(a2 + 376), v32, (id *)&v89, v35, (uint64_t)v100, *(_DWORD *)(a2 + 20) != 1, v30, a4, (uint64_t)v117);
  int v38 = *(_DWORD *)(a2 + 364);
  if (v38 <= 1) {
    int v38 = 1;
  }
  int v39 = v103;
  if (v103 <= 1) {
    int v39 = 1;
  }
  if (v38 != v39) {
    goto LABEL_64;
  }
  int v40 = *(_DWORD *)(a2 + 360);
  if (v40 <= 1) {
    int v40 = 1;
  }
  int v41 = v102;
  if (v102 <= 1) {
    int v41 = 1;
  }
  if (v40 == v41)
  {
    int v42 = *(_DWORD *)(a2 + 368);
    if (v42 <= 1) {
      int v42 = 1;
    }
    int v43 = v104;
    if (v104 <= 1) {
      int v43 = 1;
    }
    BOOL v44 = v42 == v43;
  }
  else
  {
LABEL_64:
    BOOL v44 = 0;
  }
  *(unsigned char *)(a2 + 124) = v44;
  *(_WORD *)(a2 + 122) = v106;
  if (*(unsigned char *)(a2 + 126) || v111)
  {
    if (!*(unsigned char *)(a2 + 126) || v111)
    {
      if (!*(unsigned char *)(a2 + 126) && v111) {
        *(unsigned char *)(a2 + 126) = 1;
      }
      *(_WORD *)(a2 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = v112;
    }
    else
    {
      *(unsigned char *)(a2 + 126) = 0;
    }
  }
  if (v108) {
    unint64_t v45 = v108 >> 1;
  }
  else {
    unint64_t v45 = v108 >> 1;
  }
  if (v45) {
    unint64_t v36 = re::DynamicString::operator=((re::DynamicString *)(a2 + 64), (re::DynamicString *)&v107);
  }
  if (!v115) {
    goto LABEL_82;
  }
  if (v115 != 1)
  {
    uint64_t v78 = std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAssetLoader::parseKTXData(v78, v79, v80, v81, v82, v83, v84, v85, v86, a9, a10, a11, a12);
    return;
  }
  if (v114[3])
  {
LABEL_82:
    if (v114[0]) {
      re::TextureAsset::setTextureAndSemantic(a2, (const re::ImportGraphicsContext *)(a1 + 40), (uint64_t)&v113, *(_DWORD *)(a2 + 388));
    }
  }
  if ((_BYTE)v106)
  {
    *(unsigned char *)(a2 + 256) = *(unsigned char *)(a2 + 152);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a2 + 264, a2 + 160);
    objc_storeStrong((id *)(a2 + 352), *(id *)(a2 + 248));
  }
  if (*(unsigned char *)(a2 + 124)) {
    goto LABEL_87;
  }
  LODWORD(v49) = v103;
  if (v103 <= v102) {
    LODWORD(v49) = v102;
  }
  if (v49 <= v104) {
    uint64_t v49 = v104;
  }
  else {
    uint64_t v49 = v49;
  }
  if (*(_DWORD *)(a2 + 360) <= *(_DWORD *)(a2 + 364)) {
    unsigned int v50 = *(_DWORD *)(a2 + 364);
  }
  else {
    unsigned int v50 = *(_DWORD *)(a2 + 360);
  }
  if (v50 <= *(_DWORD *)(a2 + 368)) {
    unsigned int v50 = *(_DWORD *)(a2 + 368);
  }
  unsigned int v51 = 32 - __clz(v49);
  unsigned int v52 = v51 - 1;
  uint64_t v53 = ~(-1 << (v51 - 1));
  if (!v49)
  {
    uint64_t v53 = 0;
    unsigned int v52 = 0;
  }
  if ((v53 & v49) != 0) {
    uint64_t v54 = v51;
  }
  else {
    uint64_t v54 = v52;
  }
  int v55 = __clz((int)v50);
  unsigned int v56 = 64 - v55;
  unsigned int v57 = 63 - v55;
  BOOL v58 = v55 == 64;
  if (v55 == 64) {
    uint64_t v59 = 0;
  }
  else {
    uint64_t v59 = ~(-1 << (63 - v55));
  }
  if (v58) {
    unsigned int v60 = 0;
  }
  else {
    unsigned int v60 = v57;
  }
  if ((v59 & (int)v50) != 0) {
    uint64_t v61 = v56;
  }
  else {
    uint64_t v61 = v60;
  }
  int64_t v62 = v61 - v54;
  if (v62 >= 0)
  {
    if (v105)
    {
      uint64x2_t v63 = (uint64x2_t)vdupq_n_s64((unint64_t)v105 - 1);
      uint64_t v64 = (v105 + 7) & 0x1FFFFFFF8;
      v37.i16[0] = *(_WORD *)(a2 + 120);
      int64x2_t v65 = (int64x2_t)xmmword_2343757B0;
      int64x2_t v66 = (int64x2_t)xmmword_234361D60;
      int64x2_t v67 = (int64x2_t)xmmword_234361D40;
      int64x2_t v68 = (int64x2_t)xmmword_234361D20;
      int64x2_t v69 = vdupq_n_s64(v62);
      uint64x2_t v70 = (uint64x2_t)vdupq_n_s64(1uLL);
      int64x2_t v71 = vdupq_n_s64(8uLL);
      do
      {
        uint64x2_t v72 = (uint64x2_t)v65;
        uint64x2_t v73 = (uint64x2_t)v66;
        uint64x2_t v74 = (uint64x2_t)v67;
        uint64x2_t v75 = (uint64x2_t)v68;
        int8x16_t v76 = v37;
        int8x16_t v37 = vorrq_s8(v37, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v68, v69)), (int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v67, v69))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v66, v69)), (int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v65, v69)))));
        int64x2_t v66 = vaddq_s64(v66, v71);
        int64x2_t v67 = vaddq_s64(v67, v71);
        int64x2_t v68 = vaddq_s64(v68, v71);
        int64x2_t v65 = vaddq_s64(v65, v71);
        v64 -= 8;
      }
      while (v64);
      int8x16_t v77 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v75, v63), (int32x4_t)vcgtq_u64(v74, v63)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v73, v63), (int32x4_t)vcgtq_u64(v72, v63))), v76, v37);
      *(int8x8_t *)v77.i8 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
      *(_WORD *)(a2 + 120) = v77.i16[0] | v77.i16[2] | ((v77.i32[0] | v77.i32[1]) >> 16);
    }
LABEL_87:
    isValid = (re *)re::TextureData::isValid((re::TextureData *)(a2 + 152));
    if (isValid) {
      goto LABEL_122;
    }
    BOOL v47 = *re::assetTypesLogObjects(isValid);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      goto LABEL_122;
    }
    *(_WORD *)long long buf = 0;
    unsigned int v48 = "Failed to load compiled texture blob";
    goto LABEL_121;
  }
  BOOL v47 = *re::assetTypesLogObjects(v36);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    unsigned int v48 = "Failed copyTextureMips: unexpected mipmapOffset";
LABEL_121:
    _os_log_error_impl(&dword_233120000, v47, OS_LOG_TYPE_ERROR, v48, buf, 2u);
  }
LABEL_122:

  if (v115 != -1) {
    ((void (*)(uint8_t *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                               + v115))(buf, v114);
  unsigned int v115 = -1;
  if (v107 && (v108 & 1) != 0) {
    (*(void (**)(void))(*(void *)v107 + 40))();
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v117);

LABEL_128:
  if (v93)
  {
    (*(void (**)(uint64_t))(*(void *)v90 + 24))(v90);
    int v93 = 0;
  }
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  if (v94 && v98) {
    (*(void (**)(void))(*(void *)v94 + 40))();
  }
}

void re::TextureAssetLoader::parseKTXData(uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X2>, unsigned int *a4@<X3>, int *a5@<X4>, int a6@<W5>, id *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11, int a12, uint64_t a13)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  long long v90 = 0uLL;
  *(_DWORD *)uint64_t v91 = a12;
  *(_DWORD *)&v91[24] = 0;
  v91[28] = 0;
  *(_DWORD *)&v91[32] = 0;
  memset(&v91[4], 0, 17);
  v91[36] = *(unsigned char *)(a1 + 88);
  *(_DWORD *)&v91[40] = a6;
  id v20 = *a7;
  long long v93 = 0uLL;
  id v92 = v20;
  if ((a10 & 1) == 0) {
    *(_DWORD *)&v91[8] = 1;
  }
  id v84 = *(id *)(a1 + 40);
  uint64_t isHDR = (uint64_t)*(id *)(a1 + 48);
  id v85 = (id)isHDR;
  *(_WORD *)uint64_t v86 = *(_WORD *)(a1 + 56);
  v86[2] = *(unsigned char *)(a1 + 58);
  if (*(unsigned char *)(a1 + 59)) {
    char v88 = *(unsigned char *)(a1 + 60);
  }
  uint64_t v89 = *(void *)(a1 + 64);
  if (a8)
  {
    __int16 v22 = *(_WORD *)(a1 + 57);
    v86[0] = 0;
    *(_WORD *)&v86[1] = v22;
  }
  if ((a6 - 3) <= 1)
  {
    int v23 = *a5;
    uint64_t isHDR = re::translateLinearPixelFormatToSRGB(*a5);
    if (isHDR == v23)
    {
      uint64_t isHDR = re::isHDR(v23);
      if ((isHDR & 1) == 0) {
        *(_DWORD *)&v91[32] = 2;
      }
    }
  }
  char v83 = 1;
  if (v20)
  {
    uint64_t isHDR = re::ColorHelpers::getColorGamutFromCGColorSpaceName(v20, &v83);
    if (isHDR)
    {
      if (v83 == 1)
      {
        int v24 = re::isHDR(*a5);
        if (v24)
        {
          if ((unint64_t)re::getComponentCount() >= 3)
          {
            CFStringRef v25 = (__CFString **)MEMORY[0x263F00218];
LABEL_29:
            re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&v90, *v25);
            goto LABEL_30;
          }
        }
        else
        {
          *(void *)&long long v97 = 0;
          long long v96 = 0u;
          memset(buf, 0, sizeof(buf));
          MTLPixelFormatGetInfoForDevice();
          BOOL v26 = *(_DWORD *)&v91[32] == 2 || (*(_WORD *)&buf[8] & 0x800) != 0;
          if ((unint64_t)re::getComponentCount() >= 3)
          {
            if (v26) {
              CFStringRef v25 = (__CFString **)MEMORY[0x263F001E8];
            }
            else {
              CFStringRef v25 = (__CFString **)MEMORY[0x263F002B0];
            }
            goto LABEL_29;
          }
          if (v26)
          {
            CFStringRef v25 = (__CFString **)MEMORY[0x263F00250];
            goto LABEL_29;
          }
        }
        CFStringRef v25 = (__CFString **)MEMORY[0x263F00220];
        if (!v24) {
          CFStringRef v25 = (__CFString **)MEMORY[0x263F002B8];
        }
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  if (a12 >= 2) {
    DWORD2(v90) = 1;
  }
  *(_WORD *)(a9 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 96) = 0;
  *(void *)(a9 + 80) = 0;
  re::DynamicString::setCapacity((void *)(a9 + 72), 0);
  *(unsigned char *)(a9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 0;
  *(unsigned char *)(a9 + 112) &= 0x80u;
  *(void *)(a9 + 120) = 0;
  *(_DWORD *)(a9 + re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 200) = 0;
  *(void *)(a9 + 208) = 0;
  uint64_t v64 = (id *)(a9 + 208);
  uint64_t v82 = 0;
  v79[1] = 0;
  unint64_t v80 = 0;
  uint64_t v78 = 0;
  v79[0] = 0;
  int v81 = 0;
  v75[1] = 0;
  unint64_t v76 = 0;
  v75[0] = 0;
  int v77 = 0;
  if (!v72[0])
  {
    uint64_t MetadataFromKTXData = v73;
    if ((void)v73)
    {
      if (BYTE8(v73)) {
        uint64_t MetadataFromKTXData = (*(uint64_t (**)(void))(*(void *)v73 + 40))();
      }
      long long v73 = 0u;
      long long v74 = 0u;
    }
  }
  unint64_t v66 = a3;
  unint64_t v28 = v80;
  if (v80)
  {
    unint64_t v29 = 0;
    unint64_t v30 = 0;
    char v31 = 0;
    while (1)
    {
      unint64_t v32 = *(void *)(v82 + v29 + 8);
      if (v32) {
        uint64_t MetadataFromKTXData = *(void *)(v82 + v29 + 16);
      }
      else {
        uint64_t MetadataFromKTXData = v82 + v29 + 9;
      }
      unint64_t v33 = v32 >> 1;
      unint64_t v34 = v32 >> 1;
      if (*(void *)(v82 + v29 + 8)) {
        unint64_t v35 = v33;
      }
      else {
        unint64_t v35 = v34;
      }
      unint64_t v36 = v76;
      if (v76 <= v30)
      {
        uint64_t v94 = 0;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v96 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v101 = 136315906;
        unsigned int v102 = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        unint64_t v106 = v30;
        __int16 v107 = 2048;
        unint64_t v108 = v36;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_135:
        uint64_t v94 = 0;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v96 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v101 = 136315906;
        unsigned int v102 = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        unint64_t v106 = v29;
        __int16 v107 = 2048;
        unint64_t v108 = v30;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v37 = *(void *)(v78 + v29 + 8);
      if (v37) {
        int v38 = *(const char **)(v78 + v29 + 16);
      }
      else {
        int v38 = (const char *)(v78 + v29 + 9);
      }
      unint64_t v39 = v37 >> 1;
      unint64_t v40 = v37 >> 1;
      if (*(void *)(v78 + v29 + 8)) {
        unint64_t v41 = v39;
      }
      else {
        unint64_t v41 = v40;
      }
      switch(v35)
      {
        case 0xBuLL:
          uint64_t MetadataFromKTXData = memcmp((const void *)MetadataFromKTXData, "ToolVersion", 0xBuLL);
          if (!MetadataFromKTXData)
          {
            if (v41 < 3)
            {
              uint64_t MetadataFromKTXData = atoi(v38);
              if (!*(unsigned char *)(a9 + 104)) {
                *(unsigned char *)(a9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 1;
              }
              *(_WORD *)(a9 + 106) = MetadataFromKTXData;
            }
            else
            {
              if (!*(unsigned char *)(a9 + 104)) {
                *(unsigned char *)(a9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 1;
              }
              *(_WORD *)(a9 + 106) = 0;
            }
          }
          break;
        case 0x16uLL:
          uint64_t MetadataFromKTXData = memcmp((const void *)MetadataFromKTXData, "__primary_texture_path", 0x16uLL);
          if (!MetadataFromKTXData)
          {
            size_t v47 = strlen(v38);
            *(void *)long long buf = v38;
            *(void *)&buf[8] = v47;
            uint64_t MetadataFromKTXData = (uint64_t)re::DynamicString::operator=((re::DynamicString *)(a9 + 72), (uint64_t)buf);
            char v31 = 1;
            unint64_t v28 = v80;
          }
          break;
        case 0x14uLL:
          if (*(void *)MetadataFromKTXData == 0x6972705F73695F5FLL
            && *(void *)(MetadataFromKTXData + 8) == 0x7865745F7972616DLL
            && *(_DWORD *)(MetadataFromKTXData + 16) == 1701999988)
          {
            BOOL v48 = v41 == 4 && *(_DWORD *)v38 == 1702195828;
            *(unsigned char *)(a9 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = v48;
          }
          else
          {
            if (*(void *)MetadataFromKTXData != 0x6469735F73695F5FLL
              || *(void *)(MetadataFromKTXData + 8) != 0x7865745F72616365
              || *(_DWORD *)(MetadataFromKTXData + 16) != 1701999988)
            {
              break;
            }
            BOOL v46 = v41 == 4 && *(_DWORD *)v38 == 1702195828;
            *(unsigned char *)(a9 + 65) = v46;
          }
          char v31 = 1;
          break;
      }
      ++v30;
      v29 += 32;
      if (v28 <= v30) {
        goto LABEL_92;
      }
    }
  }
  char v31 = 0;
LABEL_92:
  if (*(unsigned char *)(a9 + 64))
  {
    uint64_t v49 = *re::assetTypesLogObjects((re *)MetadataFromKTXData);
    unint64_t v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
    if (v50)
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_233120000, v49, OS_LOG_TYPE_DEBUG, "KTX Metadata:", buf, 2u);
    }
    if (v80)
    {
      uint64_t v51 = 0;
      unint64_t v29 = 0;
      char v52 = 0;
      while (1)
      {
        unint64_t v53 = *(void *)(v82 + v51 + 8);
        if (v53) {
          uint64_t v54 = *(void **)(v82 + v51 + 16);
        }
        else {
          uint64_t v54 = (void *)(v82 + v51 + 9);
        }
        unint64_t v55 = v53 >> 1;
        unint64_t v56 = v53 >> 1;
        if (*(void *)(v82 + v51 + 8)) {
          unint64_t v57 = v55;
        }
        else {
          unint64_t v57 = v56;
        }
        unint64_t v30 = v76;
        if (v76 <= v29) {
          goto LABEL_135;
        }
        if (*(void *)(v78 + v51 + 8)) {
          BOOL v58 = *(const char **)(v78 + v51 + 16);
        }
        else {
          BOOL v58 = (const char *)(v78 + v51 + 9);
        }
        uint64_t v59 = *re::assetTypesLogObjects((re *)v50);
        unint64_t v50 = os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG);
        if (v50)
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v54;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v58;
          _os_log_debug_impl(&dword_233120000, v59, OS_LOG_TYPE_DEBUG, "\t key:%s, value:%s", buf, 0x16u);
        }
        switch(v57)
        {
          case 0x1DuLL:
            unint64_t v50 = memcmp(v54, "__mipmap_level_count_override", 0x1DuLL);
            if (!v50)
            {
              unint64_t v50 = strtoul(v58, 0, 0);
              HIDWORD(v93) = v50;
              goto LABEL_123;
            }
            break;
          case 0x11uLL:
            unint64_t v50 = memcmp(v54, "__height_override", 0x11uLL);
            if (!v50)
            {
              unint64_t v50 = strtoul(v58, 0, 0);
              DWORD1(v93) = v50;
              goto LABEL_123;
            }
            break;
          case 0x10uLL:
            if (*v54 == 0x5F68746469775F5FLL && v54[1] == 0x656469727265766FLL)
            {
              unint64_t v50 = strtoul(v58, 0, 0);
              LODWORD(v93) = v50;
              goto LABEL_123;
            }
            unint64_t v50 = memcmp(v54, "__depth_override", 0x10uLL);
            if (!v50)
            {
              unint64_t v50 = strtoul(v58, 0, 0);
              DWORD2(v93) = v50;
LABEL_123:
              char v52 = 1;
            }
            break;
        }
        ++v29;
        v51 += 32;
        if (v80 <= v29)
        {
          if (v52) {
            DWORD2(v90) = 2;
          }
          break;
        }
      }
    }
  }
  if ((v31 & 1) == 0) {
    *(unsigned char *)(a9 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 1;
  }
  unsigned int v61 = *a4;
  v68[0] = v90;
  v68[1] = *(_OWORD *)v91;
  v69[0] = *(_OWORD *)&v91[16];
  *(_OWORD *)((char *)v69 + 12) = *(_OWORD *)&v91[28];
  id v70 = v92;
  long long v71 = v93;
  *(unsigned char *)(a9 + 112) = buf[0];
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a9 + 120, (uint64_t)&buf[8]);
  if (v64 != &v100)
  {
    id v62 = v100;
    id v100 = 0;
    id v63 = *v64;
    *uint64_t v64 = v62;
  }
  if (v99 != -1) {
    ((void (*)(int *, uint8_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                            + v99))(&v101, &buf[8]);
  unsigned int v99 = -1;

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v75);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v79);
}

uint64_t re::TextureAssetLoader::assetByteSize(re::TextureAssetLoader *this, id *a2)
{
  uint64_t v4 = (*(uint64_t (**)(re::TextureAssetLoader *))(*(void *)this + 40))(this);
  if (!*((void *)this + 2)) {
    return v4;
  }
  if (!*((_DWORD *)a2 + 60))
  {
    if (objc_msgSend(a2[20], sel_mipmapLevelCount))
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v17 = 0;
        memset(v16, 0, sizeof(v16));
        CFStringRef v6 = (id *)(*((void *)this + 2) + 184);
        objc_msgSend(a2[20], sel_pixelFormat, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        objc_msgSend(a2[20], sel_width);
        objc_msgSend(a2[20], sel_height);
        objc_msgSend(a2[20], sel_depth);
        objc_msgSend(a2[20], sel_sampleCount);
        *(void *)&double v7 = re::mtl::getTextureLevelInfo(v6, (uint64_t)v16).n128_u64[0];
        uint64_t v8 = v17;
        id v9 = a2[20];
        uint64_t v10 = (uint64_t)objc_msgSend(v9, sel_arrayLength, v7);
        if ((char *)objc_msgSend(v9, sel_textureType) - 5 >= (char *)2) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 6 * v10;
        }
        v4 += v11 * v8;
        ++v5;
      }
      while (v5 < (unint64_t)objc_msgSend(a2[20], sel_mipmapLevelCount));
    }
    return v4;
  }
  uint64_t v13 = (re::TextureAssetLoader *)std::__throw_bad_variant_access[abi:nn180100]();
  return re::TextureAssetLoader::registerAsset(v13, v14, v15);
}

uint64_t re::TextureAssetLoader::registerAsset(re::TextureAssetLoader *this, re::DirectMeshPayload *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (*((void *)this + 2)
    && (!*((void *)a2 + 7) || !*((void *)a2 + 6))
    && re::TextureData::isValid((re::DirectMeshPayload *)((char *)a2 + 152))
    && !*((_DWORD *)a2 + 60))
  {
    re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*((void *)this + 2) + 64), (void **)a2 + 20, &v28);
    re::TextureHandle::operator=((re::DirectMeshPayload *)((char *)a2 + 48), (re::TextureHandle *)&v28);
    re::TextureHandle::invalidate((re::TextureHandle *)&v28);
  }
  if (!*((void *)this + 9) || !*((void *)a2 + 14))
  {
    uint64_t v15 = *((void *)this + 1);
    if (!v15) {
      goto LABEL_40;
    }
    if (*((unsigned char *)a2 + 122))
    {
      if (*((unsigned char *)a2 + 124)) {
        goto LABEL_40;
      }
      if (!*((_DWORD *)a2 + 86))
      {
        id v25 = *((id *)a2 + 33);
        re::makeLoadedTextureView(&v25, (_WORD *)a2 + 60, (id *)v27);
        if (v25)
        {

          id v25 = 0;
        }
        LOBYTE(v28) = 0;
        *(void *)unint64_t v29 = *(id *)v27;
        unsigned int v30 = 0;
        id v31 = 0;
        re::TextureAsset::setTextureAndSemantic((uint64_t)a2, (re::TextureAssetLoader *)((char *)this + 40), (uint64_t)&v28, *((_DWORD *)a2 + 97));

        if (v30 != -1) {
          ((void (*)(id *, unsigned __int8 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
        }
                                                         + v30))(&v26, v29);
        id v16 = *(id *)v27;
        if (*(void *)v27) {
          goto LABEL_31;
        }
        goto LABEL_40;
      }
LABEL_44:
      int v24 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:nn180100]();
      _Unwind_Resume(v24);
    }
    (*(void (**)(os_unfair_lock_s **__return_ptr))(*(void *)v15 + 8))(&v28);
    (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 1) + 24))(v27);
    re::AssetHandle::loadNow(*(uint64_t *)&v27[8], 0);
    if (*(void *)&v27[8])
    {
      unsigned int v19 = atomic_load((unsigned int *)(*(void *)&v27[8] + 704));
      if (v19 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)v27);
        ++*(_DWORD *)(*(void *)&v27[8] + 260);
        uint64_t v20 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v27);
        if (v20)
        {
          if (*((_DWORD *)a2 + 60)) {
            goto LABEL_44;
          }
          re::TextureAsset::updateMips(v20, (re::TextureAssetLoader *)((char *)this + 40), (id *)a2 + 20);
          uint64_t v21 = *(os_unfair_lock_s **)&v27[8];
          *(unsigned char *)(*(void *)&v27[8] + 256) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v21);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*(re::internal::AssetEntry **)&v27[8]);
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v28);
    goto LABEL_40;
  }
  CFStringRef v6 = (os_unfair_lock_s *)re::DirectMeshPayload::connectionId((id *)a2 + 14);
  double v7 = (const unsigned __int8 *)[*((id *)a2 + 14) identifier];
  unint64_t v28 = v6;
  uuid_copy(v29, v7);
  uint64_t v8 = *((void *)this + 9);
  unint64_t v33 = v28;
  uuid_copy(v34, v29);
  if (*((void *)a3 + 10) == -1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)a3 + 10);
  }
  re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(v8, (uint64_t)&v33, v9);
  uint64_t v10 = *((void *)this + 9);
  uint64_t v11 = v28;
  uuid_copy(dst, v29);
  uint64_t Resource = re::DirectResourceAssetTracker::findResource(v10, (uint64_t)v11, dst);
  if (!Resource) {
    goto LABEL_40;
  }
  uint64_t v13 = Resource;
  uint64_t v14 = DRResourceAsTexture();
  if (v14)
  {
    [*((id *)a2 + 14) setDirectTexture:v14];
    id v26 = (id)DRTextureReadTexture();
    if (*((void *)a2 + 7) && *((void *)a2 + 6))
    {
      re::TextureHandle::setMetalTexture((re::DirectMeshPayload *)((char *)a2 + 48), &v26);
    }
    else
    {
      uint64_t v17 = *((void *)this + 2);
      if (v17)
      {
        re::TextureManager::registerTexture(*(os_unfair_lock_s **)(v17 + 64), &v26, (os_unfair_lock_s **)v27);
        re::TextureHandle::operator=((re::DirectMeshPayload *)((char *)a2 + 48), (re::TextureHandle *)v27);
        re::TextureHandle::invalidate((re::TextureHandle *)v27);
      }
    }
    re::TextureHandle::setMetalTexture((re::DirectMeshPayload *)((char *)a2 + 136), &v26);
    id v16 = v26;
    if (v26) {
LABEL_31:
    }
  }
  else
  {
    id v18 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v27 = 134218240;
      *(void *)&v27[4] = re::DirectMeshPayload::connectionId((id *)a2 + 14);
      *(_WORD *)&v27[12] = 2048;
      *(void *)&v27[14] = v13;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "TexturePayload resourceDidUpdate received a non-texture DirectResource for connectionId: %llu resource: %p", v27, 0x16u);
    }
  }
LABEL_40:
  __int16 v22 = (void (***)(void, re::DirectMeshPayload *))*((void *)this + 3);
  if (v22 && *((void *)a2 + 12)) {
    (**v22)(v22, a2);
  }
  return 0;
}

void re::TextureAssetLoader::unregisterAsset(uint64_t a1, re::DirectMeshPayload *this, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6 && *((void *)this + 12)) {
    (*(void (**)(uint64_t, re::DirectMeshPayload *))(*(void *)v6 + 8))(v6, this);
  }
  if (*(void *)(a1 + 72) && *((void *)this + 14))
  {
    uint64_t v7 = re::DirectMeshPayload::connectionId((id *)this + 14);
    uint64_t v8 = (const unsigned __int8 *)[*((id *)this + 14) identifier];
    uint64_t v13 = v7;
    uuid_copy(v14, v8);
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v11 = v7;
    uuid_copy(v12, v14);
    if (*(void *)(a3 + 80) == -1) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *(void *)(a3 + 80);
    }
    re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(v9, (uint64_t)&v11, v10);
  }
  if (*((void *)this + 7) && *((void *)this + 6)) {
    re::TextureHandle::invalidate((re::DirectMeshPayload *)((char *)this + 48));
  }
  if (*((void *)this + 18))
  {
    if (*((void *)this + 17)) {
      re::TextureHandle::invalidate((re::DirectMeshPayload *)((char *)this + 136));
    }
  }
}

void re::TextureAssetLoader::createRuntimeData(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a4) {
    goto LABEL_7;
  }
  uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)&v15);
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  if (v12 && !*(_DWORD *)(v12 + 32))
  {
    if (*(unsigned char *)(v12 + 8)) {
      uint64_t v14 = *(const char **)(v12 + 16);
    }
    else {
      uint64_t v14 = (const char *)(v12 + 9);
    }
    int v13 = atoi(v14);
  }
  else
  {
LABEL_7:
    int v13 = 1;
  }
  re::TextureAssetLoader::createRuntimeData((uint64_t)a1, a2, a3, v13, a4, a6, a7, a8, v15, BYTE1(v15), SHIDWORD(v15), v16);
}

re *re::TextureAssetLoader::unloadAsset(re::TextureAssetLoader *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::TextureAsset>((re *)"unloadAsset", 1268, a2);
}

re *re::internal::destroyPersistent<re::TextureAsset>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::TextureAssetLoader::isSupportedSourceExtension(re::TextureAssetLoader *this, re *a2)
{
  return re::canLoadTextureFileWithExtension(a2, (const char *)a2);
}

char **re::TextureAssetLoader::introspectionType(re::TextureAssetLoader *this)
{
  int v1 = &off_268773000;
  {
    int v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::TextureAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"TextureAsset", (uint64_t (*)(re::internal *))re::allocInfo_TextureAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TextureAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TextureAsset>, 0);
      int v1 = &off_268773000;
    }
  }
  return v1[262];
}

void re::TextureAssetLoader::cloneAsset(id *this, char *a2, re::AssetSerializationScheme *a3)
{
  int v5 = *((_DWORD *)a2 + 60);
  if (!v5) {
    goto LABEL_26;
  }
  if (v5 != 1)
  {
    uint64_t v17 = (id *)std::__throw_bad_variant_access[abi:nn180100]();
    return;
  }
  if (*((void *)a2 + 23))
  {
LABEL_26:
    uint64_t v7 = a2 + 160;
    uint64_t v6 = (void *)*((void *)a2 + 20);
    if (v6)
    {
      v28[0] = 0;
      v29[0] = 0;
      unsigned int v30 = 0;
      id v31 = 0;
      if (v5)
      {
        v24[0] = 0;
        std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(v25, (uint64_t)v7);
        unsigned int v26 = 1;
        id v27 = 0;
        v28[0] = 0;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)v25);
        id v8 = v27;
        id v27 = 0;
        id v9 = v31;
        id v31 = v8;

        if (v26 != -1) {
          ((void (*)(id *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
        }
                                                + v26))(&v23, v25);
      }
      else
      {
        id v10 = v6;
        id v23 = v10;
        id v11 = v22;
        if (!v22)
        {
          if (v10) {

          }
          goto LABEL_17;
        }
        v24[0] = 0;
        v25[0] = v22;
        unsigned int v26 = 0;
        id v27 = 0;
        v28[0] = 0;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)v25);
        id v12 = v27;
        id v27 = 0;
        id v13 = v31;
        id v31 = v12;

        if (v26 != -1) {
          ((void (*)(char *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
        }
                                                  + v26))(&v32, v25);

        if (v10) {
      }
        }
      int v14 = *((_DWORD *)a2 + 97);
      long long v15 = *(_OWORD *)(a2 + 24);
      v21[0] = *(_OWORD *)(a2 + 8);
      v21[1] = v15;
      uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v28, v14, v21);
      *(_DWORD *)(TextureAsset + 40) = *((_DWORD *)a2 + 10);
      *(unsigned char *)(TextureAsset + 124) = a2[124];
      *(_DWORD *)(TextureAsset + 120) = *((_DWORD *)a2 + 30);
      re::DynamicString::operator=((re::DynamicString *)(TextureAsset + 64), (re::DynamicString *)(a2 + 64));
LABEL_17:

      if (v30 != -1) {
        ((void (*)(unsigned char *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
      }
                                                 + v30))(v24, v29);
      return;
    }
  }
  re::AssetLoader::cloneAsset((re::AssetLoader *)this, (const re::IntrospectionBase **)a2, a3);
}

void re::anonymous namespace'::makeCopyOfTextureCommitAndWaitForGPU(id *a1, id *a2, id *a3, int a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::createDescriptorFromTexture(a2, a3, &v21);
  if (a4)
  {
    objc_msgSend(v21, sel_setStorageMode_, 2);
    re::mtl::Device::makeSharedTexture(v21, a2, &v20);
  }
  else
  {
    re::mtl::Device::makeTexture(v21, a2, &v20);
  }
  if (v20)
  {
    objc_msgSend(v20, sel_setLabel_, objc_msgSend(*a3, sel_label));
    re::ImportGraphicsContext::getOrCreateCommandQueue((uint64_t)a2, (uint64_t)&re::internal::copyTextureQueueName(void)::queueName, (const char *)1, &v19);
    re::mtl::CommandQueue::makeCommandBuffer(&v19, &v18);
    re::mtl::CommandBuffer::makeBlitCommandEncoder(&v18, &v17);
    [v17 copyFromTexture:*a3 toTexture:v20];
    [v17 endEncoding];
    [v18 commit];
    [v18 waitUntilCompleted];
    re::internal::getCommandBufferError(&v18, (uint64_t)v13);
    if (v13[0])
    {
      id v9 = objc_msgSend(*a3, sel_label);
      if (v9) {
        objc_msgSend(v20, sel_setLabel_, objc_msgSend(v9, sel_stringByAppendingString_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "_copy", 4)));
      }
      *a1 = v20;
      id v20 = 0;
    }
    else
    {
      id v10 = *re::assetsLogObjects(v8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = objc_msgSend(objc_msgSend(*a3, sel_label), sel_UTF8String);
        if (v15) {
          id v12 = *(unsigned char **)&v16[7];
        }
        else {
          id v12 = v16;
        }
        *(_DWORD *)long long buf = 136315394;
        id v23 = v11;
        __int16 v24 = 2080;
        id v25 = v12;
      }
      *a1 = 0;
    }
    if (!v13[0] && v14 && (v15 & 1) != 0) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }

    if (v20) {
  }
    }
  else
  {
    *a1 = 0;
  }
  if (v21) {
}
  }

uint64_t re::TextureAssetLoader::allocateSampleAsset(id *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  re::mtl::makeDefaultDevice(&v22);
  uint64_t v21 = 4;
  uint64_t v19 = 0;
  uint64_t v20 = 80;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(&v22, &v19, &v20, &v21);
  id v3 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  if ((objc_msgSend(v3, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v3, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v3, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v3, sel_setPixelFormat_, 80);
  objc_msgSend(v3, sel_setWidth_, 4);
  objc_msgSend(v3, sel_setHeight_, 4);
  objc_msgSend(v3, sel_setUsage_, 4);
  objc_msgSend(v3, sel_setStorageMode_, 0);
  id Texture = re::mtl::Device::makeTexture(v3, this + 5, &v18);
  MEMORY[0x270FA5388](Texture);
  qmemcpy(v7, " !\"#$%&'()*+,-./0123456789:;<=>?", sizeof(v7));
  uint64_t v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  int64x2_t v14 = vdupq_n_s64(4uLL);
  uint64_t v15 = 1;
  objc_msgSend(v18, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v12, 0, 0x706050403020100, 0xF0E0D0C0B0A0908, 0x1716151413121110, 0x1F1E1D1C1B1A1918, v7[0], v7[1], v7[2], v7[3]);
  LOBYTE(v12) = 0;
  v13[0] = v18;
  unsigned int v16 = 0;
  id v17 = 0;
  uint64_t v9 = 0x100000001;
  HIDWORD(v10) = 0;
  int v8 = 16777473;
  int v11 = 0;
  *(void *)&long long v10 = 0;
  *(void *)((char *)&v10 + 5) = 0;
  uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)&v12, 6, (long long *)&v8);

  if (v16 != -1) {
    ((void (*)(char *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                            + v16))(&v23, v13);
  if (v18) {

  }
  if (v3) {
  return TextureAsset;
  }
}

void re::TextureAssetLoader::makeSharedResourcePayload(id *this@<X0>, char *a2@<X1>, re::AssetSerializationScheme *a3@<X2>, RESerializedPayload **a4@<X8>)
{
  int v5 = (void *)*((void *)a2 + 14);
  if (v5)
  {
    *a4 = (RESerializedPayload *)v5;
    return;
  }
  if (re::TextureData::isValid((re::TextureData *)(a2 + 256)))
  {
    int v9 = *((_DWORD *)a2 + 86);
    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_57;
      }
    }
    else if (objc_msgSend(*((id *)a2 + 33), sel_isShareable))
    {
      if (*((_DWORD *)a2 + 60))
      {
LABEL_57:
        uint64_t v28 = std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureAssetLoader::postInitializeAssetFromPayload(v28);
        return;
      }
      long long v10 = (re *)objc_msgSend(*((id *)a2 + 20), sel_isShareable);
      if ((v10 & 1) == 0)
      {
        int v11 = *re::assetTypesLogObjects(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Copying a texture to create a shared version.", buf, 2u);
        }
        if (*((_DWORD *)a2 + 60)) {
          goto LABEL_57;
        }
        uint64_t v12 = v36[0];
        if (v36[0])
        {
          buf[0] = 0;
          v33[0] = v36[0];
          unsigned int v34 = 0;
          id v35 = 0;
          re::TextureAsset::setTextureAndSemantic((uint64_t)a2, (const re::ImportGraphicsContext *)(this + 5), (uint64_t)buf, *((_DWORD *)a2 + 97));

          if (v34 != -1) {
            ((void (*)(id *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
          }
                                                  + v34))(&v31, v33);
        }
      }
    }
  }
  if (*((_DWORD *)a2 + 60)) {
    goto LABEL_57;
  }
  id v13 = *((id *)a2 + 20);
  v36[0] = v13;
  id v14 = objc_msgSend(v13, sel_iosurface);
  uint64_t v15 = (re *)objc_msgSend(v13, sel_isShareable);
  if (*((unsigned char *)this + 88)) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  int v17 = !v16;
  if (!v16 || (v15 & 1) != 0)
  {
    if (v17) {
      id v20 = v14;
    }
    else {
      id v20 = 0;
    }
    *(void *)long long buf = 0;
    if (!v15) {
      goto LABEL_34;
    }
LABEL_40:
    uint64_t v22 = a2[125];
    unsigned int v23 = *((_DWORD *)a2 + 97);
    re::DynamicString::DynamicString((re::DynamicString *)v30, (const re::DynamicString *)(a2 + 392));
    re::SharedTexturePayload::make(v36, v22, v23, (uint64_t)v30, (RESharedTexturePayload **)&v31);
    uint64_t v24 = (RESerializedPayload *)v31;
    id v31 = 0;
    *(void *)long long buf = v24;

    if (*(void *)&v30[0])
    {
      if (BYTE8(v30[0])) {
        (*(void (**)(void))(**(void **)&v30[0] + 40))();
      }
      memset(v30, 0, sizeof(v30));
    }
    if (v24) {
      goto LABEL_50;
    }
    goto LABEL_52;
  }
  id v18 = *re::assetTypesLogObjects(v15);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Last attempt to copying a texture to create a shared version", buf, 2u);
  }
  id v19 = v31;
  if (!v31)
  {
    *(void *)long long buf = 0;
    goto LABEL_47;
  }
  buf[0] = 0;
  v33[0] = v31;
  unsigned int v34 = 0;
  id v35 = 0;
  re::TextureAsset::setTextureAndSemantic((uint64_t)a2, (const re::ImportGraphicsContext *)(this + 5), (uint64_t)buf, *((_DWORD *)a2 + 97));

  if (v34 != -1) {
    ((void (*)(REDrawableQueueTexturePayload **, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                                                      + v34))(&v29, v33);
  if (*((_DWORD *)a2 + 60)) {
    goto LABEL_57;
  }
  NS::SharedPtr<MTL::Texture>::operator=(v36, (void **)a2 + 20);
  id v20 = objc_msgSend(v36[0], sel_iosurface);
  unsigned __int8 v21 = objc_msgSend(v36[0], sel_isShareable);

  *(void *)long long buf = 0;
  if (v21) {
    goto LABEL_40;
  }
LABEL_34:
  if (!v20)
  {
LABEL_47:
    if (!*((void *)a2 + 12)) {
      goto LABEL_52;
    }
    re::AssetLoader::makeSharedResourcePayload((re::AssetLoader *)this, (const re::IntrospectionBase **)a2, a3, (RESerializedPayload **)&v31);
    goto LABEL_49;
  }
  re::IOSurfaceTexturePayload::make(v36, (REIOSurfaceTexturePayload **)&v31);
LABEL_49:
  uint64_t v24 = (RESerializedPayload *)v31;
  id v31 = 0;
  *(void *)long long buf = v24;

  if (v24)
  {
LABEL_50:
    id v25 = (re::DrawableQueue *)*((void *)a2 + 12);
    if (v25)
    {
      re::DrawableQueue::makeSharedResourcePayload(v25, (REDrawableQueuePayload **)&v31);
      re::DrawableQueueTexturePayload::make(&v31, &v29);
      uint64_t v26 = v29;
      unint64_t v29 = 0;
      *a4 = (RESerializedPayload *)v26;

      id v27 = *(void **)buf;
    }
    else
    {
      id v27 = 0;
      *(void *)long long buf = 0;
      *a4 = v24;
    }
    goto LABEL_54;
  }
LABEL_52:
  re::AssetLoader::makeSharedResourcePayload((re::AssetLoader *)this, (const re::IntrospectionBase **)a2, a3, a4);
  id v27 = 0;
LABEL_54:

  if (v36[0]) {
}
  }

uint64_t re::TextureAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, uint64_t a3)
{
  id v12 = *a2;
  (*(void (**)(uint64_t, uint64_t, id *, void (***)(re::PassthroughAssetSerialization *__hidden)))(*(void *)a1 + 232))(a1, a3, &v12, re::PassthroughAssetSerialization::instance(void)::instance);

  id v11 = *a2;
  uint64_t v6 = re::AssetLoader::createRuntimeDataWithPayload(a1, a3, &v11, 0);

  if ((v6 & 1) == 0)
  {
    int v8 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v10 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "createRuntimeData returned false for asset created from a payload", v10, 2u);
    }
  }
  return v6;
}

void re::TextureAssetLoader::resourceDidUpdate(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  re::DrawableQueueTexturePayload::dynamicCast(a3, &v42);
  if (!v42)
  {
LABEL_6:
    *(unsigned char *)(a2 + 125) = 0;
    re::DirectTexturePayload::dynamicCast(a3, &v40);
    re::SharedTexturePayload::dynamicCast(a3, &v39);
    re::IOSurfaceTexturePayload::dynamicCast(a3, &v38);
    if (*(void *)(a1 + 72) && v40)
    {
      re::ObjCObject::operator=((id *)(a2 + 112), &v40);
      goto LABEL_23;
    }
    if (v39)
    {
      id v13 = re::SharedTexturePayload::handle(&v39);
      uint64_t v15 = *(void **)(a1 + 40);
      id v14 = (const re::ImportGraphicsContext *)(a1 + 40);
      id v16 = objc_msgSend(v15, sel_newSharedTextureWithHandle_, v13);
      re::SharedTexturePayload::colorSpace(&v39, (re::DynamicString *)buf);
      re::DynamicString::operator=((re::DynamicString *)(a2 + 392), (re::DynamicString *)buf);
      if (*(void *)buf && (v34 & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
      re::TextureAsset::copyColorSpaceToCFStringPtr((re::TextureAsset *)a2, (const __CFString **)&v37);
      id v17 = v37;
      buf[0] = 0;
      id v34 = v16;
      unsigned int v35 = 0;
      id v18 = v17;
      id v36 = v18;
      re::TextureAsset::setTextureAndSemantic(a2, v14, (uint64_t)buf, [v39 semantic]);
      *(unsigned char *)(a2 + 125) = [v39 isLimitedRenderAsset];

      if (v35 != -1) {
        ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
      }
                                            + v35))(&v43, &v34);

      if (!v16) {
        goto LABEL_23;
      }
      id v19 = v16;
    }
    else
    {
      if (!v38)
      {
        uint64_t v22 = *re::assetsLogObjects(v12);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "Using fallback Texture resourceDidUpdate, no shared texture or iosurface found.", buf, 2u);
        }
        id v32 = *a3;
        re::AssetLoader::resourceDidUpdate(a1, (re::DynamicString **)a2, &v32, a4);

        unsigned int v23 = (const re::ImportGraphicsContext *)(a1 + 40);
        uint64_t v24 = (re *)[*(id *)(a1 + 40) supportsSharedTextureHandles];
        if (v24)
        {
          id v25 = *re::assetTypesLogObjects(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "TextureAssetLoader::resourceDidUpdate: unexpected to get here if shared texture handles are supported", buf, 2u);
          }
        }
        buf[0] = 0;
        id v34 = 0;
        unsigned int v35 = 0;
        id v36 = 0;
        *(unsigned char *)(a2 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 152) = 0;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a2 + 160, (uint64_t)&v34);
        if ((uint8_t *)(a2 + 152) != buf)
        {
          id v26 = v36;
          id v36 = 0;
          id v27 = *(void **)(a2 + 248);
          *(void *)(a2 + 248) = v26;
        }
        if (v35 != -1) {
          ((void (*)(id *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
        }
                                            + v35))(&v37, &v34);
        id v31 = *a3;
        char v28 = re::AssetLoader::createRuntimeDataWithPayload(a1, a2, &v31, 0);

        if (v28)
        {
          re::TextureAsset::setTextureAndSemantic(a2, v23, a2 + 152, *(_DWORD *)(a2 + 388));
        }
        else
        {
          unsigned int v30 = *re::assetsLogObjects(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "createRuntimeData returned false for asset created from a payload", buf, 2u);
          }
        }
        goto LABEL_23;
      }
      unsigned __int8 v21 = (id *)(a1 + 40);
      re::IOSurfaceTexturePayload::makeTextureWithDevice(&v38, v21, &v37);
      buf[0] = 0;
      id v34 = v37;
      unsigned int v35 = 0;
      id v36 = 0;
      re::TextureAsset::setTextureAndSemantic(a2, (const re::ImportGraphicsContext *)v21, (uint64_t)buf, *(_DWORD *)(a2 + 388));

      if (v35 != -1) {
        ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
      }
                                            + v35))(&v43, &v34);
      id v19 = v37;
      if (!v37)
      {
LABEL_23:

        id v20 = v40;
        goto LABEL_24;
      }
    }

    goto LABEL_23;
  }
  re::DrawableQueueTexturePayload::drawableQueue(&v42, buf);
  int v8 = *(id **)(a1 + 16);
  long long v10 = re::globalAllocators(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 448, 8);
  uint64_t v41 = v11;
  re::TextureAssetLoader::setDrawableQueueForTextureAsset(a1, (void *)a2, &v41);
  if (v11)
  {

    uint64_t v41 = 0;
  }
  re::DrawableQueueTexturePayload::placeholderTexture(&v42, &v40);
  if (v40)
  {
    re::ObjCObject::operator=(a3, &v40);

    goto LABEL_6;
  }
  id v20 = *(id *)buf;
LABEL_24:
}

void re::TextureAssetLoader::setDrawableQueueForTextureAsset(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = a2 + 12;
  uint64_t v3 = a2[12];
  uint64_t v5 = *a3;
  if (v3 != *a3)
  {
    if (v5) {
      BOOL v7 = a2[14] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      if (a2[7]) {
        BOOL v8 = a2[6] == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        uint64_t v10 = *(void *)(a1 + 24);
        if (v10)
        {
          uint64_t v12 = *a3;
          if (v3)
          {
            (*(void (**)(uint64_t, void *))(*(void *)v10 + 8))(v10, a2);
            uint64_t v12 = *a3;
          }
          if (v5)
          {
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v4, v12);
            (***(void (****)(void, void *))(a1 + 24))(*(void *)(a1 + 24), a2);
            uint64_t v5 = *a3;
          }
          else
          {
            uint64_t v5 = v12;
          }
        }
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v4, v5);
      id v13 = (re::DrawableQueue *)*v4;
      if (*v4)
      {
        uint64_t v14 = a2[13];
        if (v14)
        {
          re::DrawableQueue::setActiveRealityRendererScene(v13, v14);
        }
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) It is ill-formed for a texture asset to be backed by both a DrawableQueue and a DirectTexture.", "!drawableQueue || !textureAsset.directTexturePayload.isValid()", "setDrawableQueueForTextureAsset", 1817);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::TextureAssetLoader::checkCredentialsOfNetworkAsset@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _WORD *a4@<X8>)
{
  if (a2)
  {
    uint64_t result = (void *)result[4];
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 64))(result, a3);
    }
    *a4 = 257;
  }
  else
  {
    *(unsigned char *)a4 = 0;
  }
  return result;
}

uint64_t re::TextureAssetLoader::needsCustomSerializationCopy(re::TextureAssetLoader *this, void *a2, int a3)
{
  if (!a3) {
    return 0;
  }
  if (!*((void *)a2 + 12) && !*((void *)a2 + 14)) {
    return 0;
  }
  re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)a2 + 6, &v12);
  uint64_t v4 = (re::LocklessRingBuffer **)*((void *)a2 + 12);
  if (v4)
  {
    re::DrawableQueue::getLatestReadableUnSynchronizedMetalTexture(v4, (uint64_t)&v8);
    if ((_BYTE)v8)
    {
      NS::SharedPtr<MTL::Texture>::operator=(&v12, v9);
      if ((_BYTE)v8)
      {
        if (v9[0]) {
      }
        }
    }
  }
  if (!v12) {
    return 0;
  }
  LOBYTE(v8) = 0;
  v9[0] = v12;
  unsigned int v10 = 0;
  id v11 = 0;
  char canExportToKtx = re::canExportToKtx(&v8, v5);

  if (v10 != -1) {
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                        + v10))(&v13, v9);
  if ((canExportToKtx & 1) == 0)
  {
    if (v12) {

    }
    return 0;
  }
  if (v12) {

  }
  return 1;
}

id *re::TextureAssetLoader::tryMakeCustomSerializationCopy(re::TextureAssetLoader *this, char *a2, int a3)
{
  if (!a3 || !*((void *)a2 + 12) && !*((void *)a2 + 14)) {
    return 0;
  }
  re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)a2 + 6, &v18);
  uint64_t v5 = (re::LocklessRingBuffer **)*((void *)a2 + 12);
  if (v5)
  {
    uint64_t TextureAsset = &v14;
    re::DrawableQueue::getLatestReadableUnSynchronizedMetalTexture(v5, (uint64_t)&v14);
    if ((_BYTE)v14)
    {
      NS::SharedPtr<MTL::Texture>::operator=(&v18, v15);
      if ((_BYTE)v14)
      {
        if (v15[0]) {
      }
        }
    }
  }
  if (!v18) {
    goto LABEL_16;
  }
  LOBYTE(v14) = 0;
  v15[0] = v18;
  unsigned int v16 = 0;
  id v17 = 0;
  int canExportToKtx = re::canExportToKtx(&v14, v6);
  char v8 = canExportToKtx;
  if (canExportToKtx)
  {
    int v9 = *((_DWORD *)a2 + 97);
    long long v10 = *(_OWORD *)(a2 + 24);
    v13[0] = *(_OWORD *)(a2 + 8);
    v13[1] = v10;
    uint64_t TextureAsset = (id *)re::TextureAsset::makeTextureAsset((uint64_t)&v14, v9, v13);
  }

  if (v16 != -1) {
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                        + v16))(&v19, v15);
  if (v8) {
    int v11 = 0;
  }
  else {
LABEL_16:
  }
    int v11 = 1;
  if (v18) {

  }
  if (v11) {
    return 0;
  }
  return TextureAsset;
}

_anonymous_namespace_ *re::TextureAssetLoader::editRealityFileSerializationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (_anonymous_namespace_ *)((uint64_t (*)(uint64_t, void, void, uint64_t))re::shouldASTCCompress)(a2 + 152, *(unsigned int *)(a2 + 388), *(unsigned int *)(a2 + 20), a2 + 24);
  if (result)
  {
    re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString>(a3, (re::DynamicString *)&v8, 2, &v6);
    if (v6 && (v7 & 1) != 0) {
      (*(void (**)(void))(*(void *)v6 + 40))();
    }
    uint64_t result = v8;
    if (v8)
    {
      if (v9) {
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v8 + 40))();
      }
    }
  }
  return result;
}

void re::TextureAssetLoader::injectMipsFromKTX(re::TextureAssetLoader *this, re::TextureAsset *a2, id *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  re::TextureAsset::copyColorSpaceToCFStringPtr(a2, (const __CFString **)&v8);
  int v6 = *((_DWORD *)a2 + 94);
  if (v6)
  {
    if (re::isHDR(v6)) {
      unsigned __int8 v7 = 1;
    }
    else {
      unsigned __int8 v7 = 2;
    }
  }
  else
  {
    unsigned __int8 v7 = 0;
  }
  re::TextureAssetLoader::parseKTXData((uint64_t)this, (__n128 *)[*a3 bytes], objc_msgSend(*a3, "length"), (unsigned int *)a2 + 10, (int *)a2 + 94, *((_DWORD *)a2 + 97), (id *)&v8, 0, (uint64_t)v10, *((_DWORD *)a2 + 5) != 1, v7, 1, 0);
  if (v14) {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  re::TextureAsset::updateMips((uint64_t)a2, (re::TextureAssetLoader *)((char *)this + 40), v13);

  if (v14 != -1) {
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                        + v14))(&v9, v13);
  unsigned int v14 = -1;
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
}

void re::TextureAssetLoader::setDirectTextureForTextureAsset(uint64_t a1, id *this, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  char v8 = this + 14;
  if (this[14]) {
    char v9 = re::DirectTexturePayload::directTexture(this + 14);
  }
  else {
    char v9 = 0;
  }
  if (v9 != (void *)a3)
  {
    if (a3 && this[12])
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)this, "assertion failure: '%s' (%s:line %i) It is ill-formed for a texture asset to be backed by both a DrawableQueue and a DirectTexture.", "!directTexture || !textureAsset.drawableQueue", "setDirectTextureForTextureAsset", 1856);
      _os_crash();
      __break(1u);
    }
    if (*(void *)(a1 + 72))
    {
      if (*v8)
      {
        long long v10 = (REDirectTexturePayload *)re::DirectMeshPayload::connectionId(v8);
        uint64_t v11 = (const unsigned __int8 *)[*v8 identifier];
        unint64_t v29 = v10;
        uuid_copy(v30, v11);
        uint64_t v12 = *(void *)(a1 + 72);
        id v27 = v10;
        uuid_copy(v28, v30);
        if (*(void *)(a4 + 80) == -1) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *(void *)(a4 + 80);
        }
        re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(v12, (uint64_t)&v27, v13);
        id v14 = *v8;
        *char v8 = 0;
      }
      if (a3)
      {
        re::DirectTexturePayload::make(a3, &v29);
        if (v8 != (id *)&v29)
        {
          id v15 = v29;
          unint64_t v29 = 0;
          id v16 = *v8;
          *char v8 = v15;
        }
        id v17 = (REDirectTexturePayload *)re::DirectMeshPayload::connectionId(v8);
        id v18 = (const unsigned __int8 *)[this[14] identifier];
        unint64_t v29 = v17;
        uuid_copy(v30, v18);
        uint64_t v19 = *(void *)(a1 + 72);
        id v25 = v29;
        uuid_copy(v26, v30);
        if (*(void *)(a4 + 80) == -1) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(void *)(a4 + 80);
        }
        re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(v19, (uint64_t)&v25, v20);
        id v24 = this[14];
        re::AssetLoader::createRuntimeDataWithPayload(a1, (uint64_t)this, &v24, 0);

        id v23 = (id)DRTextureReadTexture();
        if (this[7] && this[6])
        {
          re::TextureHandle::setMetalTexture((const re::TextureHandle *)(this + 6), &v23);
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 16);
          if (v21)
          {
            re::TextureManager::registerTexture(*(os_unfair_lock_s **)(v21 + 64), &v23, v22);
            re::TextureHandle::operator=((re::TextureHandle *)(this + 6), (re::TextureHandle *)v22);
            re::TextureHandle::invalidate((re::TextureHandle *)v22);
          }
        }
        re::TextureHandle::setMetalTexture((const re::TextureHandle *)(this + 17), &v23);
        if (v23) {
      }
        }
    }
  }
}

uint64_t re::TextureAssetLoader::setBlobOverrideSerializationParameter(_anonymous_namespace_ *a1, id *a2)
{
  re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::Data&>((uint64_t)a1, (const re::DynamicString *)&v5, 2, a2);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

unsigned __int8 *re::TextureAssetLoader::fetchSourceImageTextureDescriptor@<X0>(re::TextureAssetLoader *this@<X0>, re::RealityFile *a2@<X1>, re::RealityFile *a3@<X2>, const char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  re::TextureAssetRealityFileProviderCallbacks::tryCreateSourceImageTextureProvider(this, a2, a3, a4, (const char *)1, (unint64_t *)a5, 0, (uint64_t)v12);
  if (v12[0])
  {
    re::TextureProvider::lazyFetchProperties(v13, (const re::TextureProvider *)v13);
    id v7 = v13[23];
    *(unsigned char *)a6 = 1;
    *(void *)(a6 + 8) = v7;
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v9, (const re::DynamicString *)v13);
    *(unsigned char *)a6 = 0;
    *(void *)(a6 + 8) = v9;
    *(void *)(a6 + 32) = v11;
    *(_OWORD *)(a6 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v10;
  }
  return re::Result<re::DataTextureProvider,re::DynamicString>::~Result(v12);
}

void re::TextureAssetRealityFileProviderCallbacks::tryCreateSourceImageTextureProvider(re::TextureAssetRealityFileProviderCallbacks *this@<X0>, const re::TextureAssetLoader *a2@<X1>, re::RealityFile *a3@<X2>, const char *a4@<X3>, const char *a5@<X4>, unint64_t *a6@<X6>, uint64_t *a7@<X5>, uint64_t a8@<X8>)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  re::DynamicString::rfind((uint64_t)&v88, 46, v86);
  if (v86[0])
  {
    BOOL v58 = a4;
    uint64_t v59 = a5;
    unsigned int v60 = a3;
    unint64_t v57 = this;
    re::DynamicString::resize(&v88, v87, 42);
    if (v89) {
      id v17 = v91;
    }
    else {
      id v17 = v90;
    }
    re::DynamicString::format((re::DynamicString *)"%s%s.json", (re::DynamicString *)&v82, "assets/", v17);
    if (v89) {
      id v18 = v91;
    }
    else {
      id v18 = v90;
    }
    re::DynamicString::format((re::DynamicString *)"%s%s.sourceimage", (re::DynamicString *)&v78, "assets/", v18);
    uint64_t v19 = &v83;
    uint64_t v20 = v85;
    uint64_t v21 = v84;
    if (v83) {
      uint64_t v22 = (char *)v85[0];
    }
    else {
      uint64_t v22 = v84;
    }
    re::RealityFile::getInputStream(a2, v22, (uint64_t)&v101);
    if (v79) {
      id v23 = (char *)v81[0];
    }
    else {
      id v23 = v80;
    }
    InputStream = (re *)re::RealityFile::getInputStream(a2, v23, (uint64_t)v99);
    if ((_BYTE)v101)
    {
      id v25 = &v79;
      id v26 = v81;
      id v27 = v80;
      if (v99[0])
      {
        if (a7)
        {
          char v28 = *re::assetsLogObjects(InputStream);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            uint64_t v29 = *a7;
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = a3;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v58;
            *(_WORD *)&buf[22] = 2048;
            uint64_t v93 = v29;
          }
        }
        if (v104 < 2)
        {
          uint64_t v77 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          uint64_t v73 = 0;
          int v76 = 0;
          id v70 = 0;
          CFIndex v71 = 0;
          int64x2_t v69 = (char *)&v101 + 8;
          int v72 = 0;
          if (!re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v69, 0xFFFFFFFFFFFFFFFFLL))
          {
            re::DynamicString::format((re::DynamicString *)"Unexpected error reading source image options for asset path: '%s'.", (re::DynamicString *)buf, a3);
            long long v43 = *(_OWORD *)buf;
            uint64_t v44 = *(void *)&buf[16];
            uint64_t v45 = v93;
            *(unsigned char *)a8 = 0;
            *(_OWORD *)(a8 + 8) = v43;
            *(void *)(a8 + 24) = v44;
            *(void *)(a8 + 32) = v45;
LABEL_56:
            if (v72)
            {
              (*(void (**)(char *))(*(void *)v69 + 24))(v69);
              int v72 = 0;
            }
            int64x2_t v69 = 0;
            id v70 = 0;
            CFIndex v71 = 0;
            if (v73 && v77) {
              (*(void (**)(void))(*(void *)v73 + 40))();
            }
            goto LABEL_61;
          }
          CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFTypeRef cf = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v70, v71, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
          re::parseTextureFromImageOptions((re *)&cf, (uint64_t)v65);
          if (!v65[0])
          {
            re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v66);
            *(unsigned char *)a8 = 0;
            uint64_t v47 = v93;
            *(void *)(a8 + 8) = *(void *)buf;
            *(void *)(a8 + 32) = v47;
            *(_OWORD *)(a8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)&buf[8];
LABEL_55:
            re::Result<re::TextureFromImageOptions,re::DynamicString>::~Result((uint64_t)v65);
            goto LABEL_56;
          }
          CFRelease(cf);
          if (v59)
          {
            DWORD2(v66) = 1;
            int v67 = (int)v59;
          }
          CFDataRef v64 = 0;
          if (v100[54] < 2u)
          {
            uint64_t v98 = 0;
            uint64_t v96 = 0;
            uint64_t v94 = 0;
            uint64_t v95 = 0;
            int v97 = 0;
            *(void *)&buf[16] = 0;
            *(void *)long long buf = v100;
            *(void *)&uint8_t buf[8] = 0;
            LODWORD(v93) = 0;
            BOOL Next = re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)buf, 0xFFFFFFFFFFFFFFFFLL);
            if (Next)
            {
              CFDataRef v32 = CFDataCreate(v30, *(const UInt8 **)&buf[8], *(CFIndex *)&buf[16]);
              CFDataRef v64 = v32;
            }
            else
            {
              re::DynamicString::format((re::DynamicString *)"Unexpected error reading source image for asset path: '%s'.", (re::DynamicString *)&v61, v60);
              CFDataRef v32 = 0;
              long long v48 = v61;
              uint64_t v49 = v62;
              uint64_t v50 = v63;
              *(unsigned char *)a8 = 0;
              *(_OWORD *)(a8 + 8) = v48;
              *(void *)(a8 + 24) = v49;
              *(void *)(a8 + 32) = v50;
            }
            if (v93)
            {
              (*(void (**)(void))(**(void **)buf + 24))(*(void *)buf);
              LODWORD(v93) = 0;
            }
            memset(buf, 0, sizeof(buf));
            if (v94 && v98) {
              (*(void (**)(void))(*(void *)v94 + 40))();
            }
            if (Next)
            {
              if (v32)
              {
                re::DataTextureProvider::DataTextureProvider((uint64_t)buf, (id *)v57 + 5, *((unsigned __int8 *)v57 + 88), &v64, 0);
                CFRelease(v32);
                re::TextureProvider::setOptions((uint64_t)buf, &v66);
                re::DataTextureProvider::DataTextureProvider((uint64_t)&v61, (uint64_t)buf);
                *(unsigned char *)a8 = 1;
                re::DataTextureProvider::DataTextureProvider(a8 + 8, (uint64_t)&v61);
                re::DataTextureProvider::~DataTextureProvider((re::DataTextureProvider *)&v61);
                re::DataTextureProvider::~DataTextureProvider((re::DataTextureProvider *)buf);
              }
              else
              {
                re::DynamicString::format((re::DynamicString *)"Cound not allocate source image for asset path: '%s'.", (re::DynamicString *)buf, v60);
                long long v51 = *(_OWORD *)buf;
                uint64_t v52 = *(void *)&buf[16];
                uint64_t v53 = v93;
                *(unsigned char *)a8 = 0;
                *(_OWORD *)(a8 + 8) = v51;
                *(void *)(a8 + 24) = v52;
                *(void *)(a8 + 32) = v53;
              }
            }
            goto LABEL_55;
          }
        }
        uint64_t v54 = (re::TextureAssetLoader *)std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureAssetLoader::downgradeTextureAssetToSpring2023(v54, v55, v56);
        return;
      }
    }
    else
    {
      id v25 = &v83;
      id v26 = v85;
      id v27 = v84;
      uint64_t v19 = &v79;
      uint64_t v20 = v81;
      uint64_t v21 = v80;
      if (!v99[0])
      {
        if (a6)
        {
          size_t v46 = *(char *)a6;
          *(void *)&buf[16] = 0;
          uint64_t v93 = 0;
          *(void *)&uint8_t buf[8] = 0;
          re::DynamicString::setCapacity(buf, v46);
        }
        else
        {
        }
LABEL_39:
        long long v40 = *(_OWORD *)buf;
        uint64_t v41 = *(void *)&buf[16];
        uint64_t v42 = v93;
        *(unsigned char *)a8 = 0;
        *(_OWORD *)(a8 + 8) = v40;
        *(void *)(a8 + 24) = v41;
        *(void *)(a8 + 32) = v42;
LABEL_61:
        re::Result<re::RealityFileEntryStream,re::WrappedError>::~Result((uint64_t)v99);
        re::Result<re::RealityFileEntryStream,re::WrappedError>::~Result((uint64_t)&v101);
        if (v78 && (v79 & 1) != 0) {
          (*(void (**)(void))(*(void *)v78 + 40))();
        }
        if (v82 && (v83 & 1) != 0) {
          (*(void (**)(void))(*(void *)v82 + 40))();
        }
        goto LABEL_67;
      }
    }
    id v37 = (unsigned char *)*v26;
    if (*(void *)v25) {
      id v38 = v37;
    }
    else {
      id v38 = v27;
    }
    if (*(void *)v19) {
      id v39 = (unsigned char *)*v20;
    }
    else {
      id v39 = v21;
    }
    re::DynamicString::format((re::DynamicString *)"Unexpected: could open texture source image's '%s' but not '%s'.", (re::DynamicString *)buf, v39, v38);
    goto LABEL_39;
  }
  if (v89) {
    unint64_t v33 = v91;
  }
  else {
    unint64_t v33 = v90;
  }
  re::DynamicString::format((re::DynamicString *)"Unexpected: asset entry has no extension: '%s'.", (re::DynamicString *)&v101, v33);
  long long v34 = v101;
  uint64_t v35 = v102;
  uint64_t v36 = v103;
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v34;
  *(void *)(a8 + 24) = v35;
  *(void *)(a8 + 32) = v36;
LABEL_67:
  if (v88)
  {
    if (v89) {
      (*(void (**)(void))(*(void *)v88 + 40))();
    }
  }
}

void re::TextureAssetLoader::downgradeTextureAssetToSpring2023(re::TextureAssetLoader *this@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  if ((*((_DWORD *)this + 97) - 3) >= 2
    || ((id v7 = *((id *)this + 31),
         char v21 = 0,
         ColorGamutFromCGColorSpaceName = (re::TextureAsset *)re::ColorHelpers::getColorGamutFromCGColorSpaceName(v7, &v21), ColorGamutFromCGColorSpaceName)? (BOOL v9 = v21 == 0): (BOOL v9 = 1), v9))
  {
    *a3 = 1;
  }
  else
  {
    re::TextureAsset::assetType(ColorGamutFromCGColorSpaceName);
    long long v10 = (const re::ImportGraphicsContext *)(re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a2[130], (unint64_t)&re::TextureAsset::assetType(void)::type)+ 40);
    re::convertTextureColorSpace(0, (uint64_t)this + 152, (uint64_t)v17);
    if (v19)
    {
      if (v19 != 1)
      {
        uint64_t v13 = (re::TextureAssetLoader *)std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureAssetLoader::downgradeTextureAssetToSpring2024(v13, v14, v15);
        return;
      }
      if (!v18[3]) {
        goto LABEL_14;
      }
    }
    if (v18[0])
    {
      re::TextureAsset::setTextureAndSemantic((uint64_t)this, v10, (uint64_t)v17, *((_DWORD *)this + 97));
    }
    else
    {
LABEL_14:
      uint64_t v12 = *re::assetTypesLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v16 = 0;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Failed to convert texture asset's color space before writing", v16, 2u);
      }
    }
    *a3 = 1;

    if (v19 != -1) {
      ((void (*)(uint8_t *, void *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
    }
                                                 + v19))(v16, v18);
  }
}

uint64_t re::TextureAssetLoader::downgradeTextureAssetToSpring2024@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((*(_DWORD *)(this + 380) | 4) == 7)
  {
    this = re::DynamicString::format((re::DynamicString *)"2D array and 3D texture types are not supported in versions of REKit before Fall 2024.", (re::DynamicString *)&v8);
    long long v5 = v8;
    uint64_t v6 = v9;
    uint64_t v7 = v10;
    *(unsigned char *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v5;
    *(void *)(a2 + 24) = v6;
    *(void *)(a2 + 32) = v7;
  }
  else
  {
    *(unsigned char *)a2 = 1;
  }
  return this;
}

uint64_t *re::introspect_TextureSemantic(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78D68, memory_order_acquire) & 1) == 0)
  {
    uint64_t v31 = (re *)__cxa_guard_acquire(&qword_26AF78D68);
    if (v31)
    {
      CFDataRef v32 = re::introspectionAllocator(v31);
      unint64_t v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
      *(_DWORD *)unint64_t v33 = 1;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = "Unspecified";
      qword_26AF78D88 = (uint64_t)v33;
      long long v34 = re::introspectionAllocator(v33);
      uint64_t v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
      *(_DWORD *)uint64_t v35 = 1;
      *((void *)v35 + 1) = 1;
      *((void *)v35 + 2) = "Raw";
      qword_26AF78D90 = (uint64_t)v35;
      uint64_t v36 = re::introspectionAllocator(v35);
      id v37 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
      *(_DWORD *)id v37 = 1;
      *((void *)v37 + 1) = 2;
      *((void *)v37 + 2) = "Scalar";
      qword_26AF78D98 = (uint64_t)v37;
      id v38 = re::introspectionAllocator(v37);
      id v39 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 24, 8);
      *(_DWORD *)id v39 = 1;
      *((void *)v39 + 1) = 3;
      *((void *)v39 + 2) = "Color";
      qword_26AF78DA0 = (uint64_t)v39;
      long long v40 = re::introspectionAllocator(v39);
      uint64_t v41 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 24, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *((void *)v41 + 1) = 4;
      *((void *)v41 + 2) = "HDRColor";
      qword_26AF78DA8 = (uint64_t)v41;
      uint64_t v42 = re::introspectionAllocator(v41);
      long long v43 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 24, 8);
      *(_DWORD *)long long v43 = 1;
      *((void *)v43 + 1) = 5;
      *((void *)v43 + 2) = "Normal";
      qword_26AF78DB0 = (uint64_t)v43;
      uint64_t v44 = re::introspectionAllocator(v43);
      uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 24, 8);
      *(_DWORD *)uint64_t v45 = 1;
      *(void *)(v45 + 8) = 6;
      *(void *)(v45 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = "None";
      qword_26AF78DB8 = v45;
      __cxa_guard_release(&qword_26AF78D68);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78D70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78D70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF78DC0, "TextureSemantic", 4, 4, 1, 1);
    qword_26AF78DC0 = (uint64_t)&unk_26E715E00;
    qword_26AF78E00 = (uint64_t)&re::introspect_TextureSemantic(BOOL)::enumTable;
    dword_26AF78DD0 = 9;
    __cxa_guard_release(&qword_26AF78D70);
  }
  if (v2)
  {
    if (_MergedGlobals_73) {
      return &qword_26AF78DC0;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v51);
    char v3 = _MergedGlobals_73;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v51);
    if (v3) {
      return &qword_26AF78DC0;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_73)
    {
LABEL_34:
      uint64_t v29 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v29);
      return &qword_26AF78DC0;
    }
  }
  _MergedGlobals_73 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF78DC0, a2);
  uint64_t v47 = 0xACDB0069060A27C2;
  long long v48 = "TextureSemantic";
  v51[0] = 0x607DD0F01DCLL;
  v51[1] = "uint32_t";
  uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v51);
  if (v7)
  {
    uint64_t v8 = *v7;
    re::StringID::destroyString((re::StringID *)v51);
    uint64_t v9 = (unsigned int *)qword_26AF78E00;
    v50[1] = v8;
    re::TypeBuilder::beginEnumType((uint64_t)v51, &v47, 1, 1, (uint64_t)v50);
    unint64_t v11 = *v9;
    if (v11)
    {
      for (unint64_t i = 0; i < v11; ++i)
      {
        uint64_t v13 = *(void *)(*((void *)v9 + 1) + 8 * i);
        if (*(_DWORD *)v13 == 1)
        {
          id v14 = *(char **)(v13 + 16);
          if (v14)
          {
            uint64_t v15 = *v14;
            if (*v14)
            {
              char v16 = v14[1];
              if (v16)
              {
                id v17 = (unsigned __int8 *)(v14 + 2);
                do
                {
                  uint64_t v15 = 31 * v15 + v16;
                  int v18 = *v17++;
                  char v16 = v18;
                }
                while (v18);
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v19 = *(void *)(v13 + 8);
          *(void *)&v49.var0 = 2 * v15;
          v49.var1 = v14;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v51, v19, &v49);
          re::StringID::destroyString((re::StringID *)&v49);
          unint64_t v11 = *v9;
        }
      }
      if (v11)
      {
        for (unint64_t j = 0; j < v11; ++j)
        {
          uint64_t v21 = *(void *)(*((void *)v9 + 1) + 8 * j);
          if (*(_DWORD *)v21 == 2)
          {
            uint64_t v22 = *(char **)(v21 + 16);
            if (v22)
            {
              uint64_t v23 = *v22;
              if (*v22)
              {
                char v24 = v22[1];
                if (v24)
                {
                  id v25 = (unsigned __int8 *)(v22 + 2);
                  do
                  {
                    uint64_t v23 = 31 * v23 + v24;
                    int v26 = *v25++;
                    char v24 = v26;
                  }
                  while (v26);
                }
              }
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v27 = *(void *)(v21 + 8);
            *(void *)&v49.var0 = 2 * v23;
            v49.var1 = v22;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v51, v27, &v49);
            re::StringID::destroyString((re::StringID *)&v49);
            unint64_t v11 = *v9;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v51, v28);
    xmmword_26AF78DE0 = (__int128)v49;
    re::StringID::destroyString((re::StringID *)&v47);
    if (v2) {
      return &qword_26AF78DC0;
    }
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v51);
  re::internal::assertLog((re::internal *)5, v46, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TextureSemantic", v47, v48);
  uint64_t result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::allocInfo_TextureAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78D80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78D80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF78E68, "TextureAsset");
    __cxa_guard_release(&qword_26AF78D80);
  }
  return &unk_26AF78E68;
}

void re::initInfo_TextureAsset(re *this, re::IntrospectionBase *a2)
{
  v47[0] = 0x3DA0ACA55D0EE56ALL;
  v47[1] = "TextureAsset";
  re::StringID::destroyString((re::StringID *)v47);
  *((_OWORD *)this + 2) = v48;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78D78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78D78);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_int((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "width";
      *(void *)(v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x16800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E08 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::introspect_int((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "height";
      *(void *)(v12 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x16C00000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E10 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_int((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "depth";
      *(void *)(v16 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x17000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E18 = v16;
      id v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::mtl::introspect_PixelFormat((re::mtl *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "pixelFormat";
      *(void *)(v20 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x17800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E20 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::mtl::introspect_TextureType((re::mtl *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "textureType";
      *(void *)(v24 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x17C00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E28 = v24;
      id v25 = re::introspectionAllocator((re *)v24);
      uint64_t v26 = re::mtl::introspect_TextureSwizzleChannels((re::IntrospectionBase **)1);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "swizzle";
      *(void *)(v27 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x18000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E30 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v29 = re::introspect_TextureCompileOptions((re::IntrospectionBase **)1);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "compileOptions";
      *(void *)(v30 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x800000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E38 = v30;
      uint64_t v31 = re::introspectionAllocator((re *)v30);
      re::introspect_TextureSemantic((re *)1, v32);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "semantic";
      *(void *)(v33 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = &qword_26AF78DC0;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x18400000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E40 = v33;
      long long v34 = re::introspectionAllocator((re *)v33);
      uint64_t v36 = re::IntrospectionInfo<re::DynamicString>::get(1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "colorSpace";
      *(void *)(v37 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x18800000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E48 = v37;
      id v38 = re::introspectionAllocator((re *)v37);
      long long v40 = re::introspect_int((re *)1, v39);
      uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = "arrayLength";
      *(void *)(v41 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v40;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0x1740000000ALL;
      *(_DWORD *)(v41 + 40) = 0;
      *(void *)(v41 + 48) = 0;
      *(void *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78E50 = v41;
      uint64_t v42 = re::introspectionAllocator((re *)v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 64, 8);
      *(_DWORD *)uint64_t v43 = 6;
      *(void *)(v43 + 8) = 1;
      *(void *)(v43 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0;
      *(unsigned char *)(v43 + 40) = 1;
      *(void *)(v43 + 48) = re::TextureAssetLoader::downgradeTextureAssetToSpring2023;
      *(_DWORD *)(v43 + 56) = 2;
      qword_26AF78E58 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 64, 8);
      *(_DWORD *)uint64_t v45 = 6;
      *(void *)(v45 + 8) = 1;
      *(void *)(v45 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
      *(void *)(v45 + 24) = 0;
      *(void *)(v45 + 32) = 0;
      *(unsigned char *)(v45 + 40) = 1;
      *(void *)(v45 + 48) = re::TextureAssetLoader::downgradeTextureAssetToSpring2024;
      *(_DWORD *)(v45 + 56) = 3;
      qword_26AF78E60 = v45;
      __cxa_guard_release(&qword_26AF78D78);
    }
  }
  *((void *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((void *)this + 8) = &qword_26AF78E08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TextureAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TextureAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TextureAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TextureAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v46 = v48;
}

re::TextureAsset *re::internal::defaultConstruct<re::TextureAsset>(int a1, int a2, re::TextureAsset *this)
{
  return re::TextureAsset::TextureAsset(this);
}

uint64_t re::internal::defaultDestruct<re::TextureAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::TextureAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_TextureAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextureAsset", (uint64_t (*)(re::internal *))re::allocInfo_TextureAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TextureAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TextureAsset>, this);
}

re::TextureAsset *re::TextureAsset::TextureAsset(re::TextureAsset *this)
{
  *(void *)this = &unk_26E6D3DA0;
  *((_DWORD *)this + 2) = 16777473;
  *((unsigned char *)this + 12) = 1;
  *((_DWORD *)this + 4) = 1;
  *((_DWORD *)this + 9) = 0;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 25) = 0;
  *((_DWORD *)this + 10) = 84148994;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  int v2 = (void *)((char *)this + 64);
  char v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_WORD *)this + 60) = 0;
  *((void *)this + 14) = 0;
  *(_DWORD *)((char *)this + 122) = 65537;
  *((unsigned char *)this + 126) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 152) &= 0x80u;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 60) = 0;
  *((void *)this + 31) = 0;
  *((unsigned char *)this + 256) &= 0x80u;
  *((void *)this + 33) = 0;
  *((_DWORD *)this + 86) = 0;
  *((void *)this + 44) = 0;
  *(_OWORD *)((char *)this + 360) = xmmword_234375800;
  *((void *)this + 47) = 0x200000073;
  *((_DWORD *)this + 96) = 84148994;
  *((_DWORD *)this + 97) = 6;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  re::DynamicString::setCapacity((void *)this + 49, 0);
  return this;
}

void re::TextureAsset::~TextureAsset(id *this)
{
  re::TextureAsset::~TextureAsset(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  char v6;

  *this = &unk_26E6D3DA0;
  re::DynamicString::deinit((re::DynamicString *)(this + 49));

  int v2 = *((unsigned int *)this + 86);
  if (v2 != -1) {
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                        + v2))(&v5, this + 33);
  *((_DWORD *)this + 86) = -1;

  char v3 = *((unsigned int *)this + 60);
  if (v3 != -1) {
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                        + v3))(&v6, this + 20);
  *((_DWORD *)this + 60) = -1;
  re::TextureHandle::invalidate((re::TextureHandle *)(this + 17));

  uint64_t v4 = (char *)this[12];
  if (v4)
  {

    this[12] = 0;
  }
  re::DynamicString::deinit((re::DynamicString *)(this + 8));
  re::TextureHandle::invalidate((re::TextureHandle *)(this + 6));
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 80);
  uint64_t v4 = *(unsigned int *)(a2 + 80);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 80) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6D3DD0[v4])(&v5, result, a2);
}

void **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, void **a2, id *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture> const&>(*a1, a2, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, void **a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<1ul,re::CPUTexture,re::CPUTexture const&>(*a1, a2, a3);
}

void **std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture> const&>(uint64_t a1, void **a2, id *a3)
{
  if (*(_DWORD *)(a1 + 80)) {
    return (void **)std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture> const&>(a1, a3);
  }
  else {
    return NS::SharedPtr<MTL::Texture>::operator=(a2, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture> const&>(uint64_t a1, id *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                           + v4))(&v6, a1);
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<1ul,re::CPUTexture,re::CPUTexture const&>(uint64_t a1, void **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    NS::SharedPtr<MTL::Texture>::operator=(a2, (void **)a3);
    re::DynamicArray<re::DynamicArray<unsigned char>>::operator=((uint64_t)(a2 + 1), (uint64_t *)(a3 + 8));
    return re::DynamicString::operator=((re::DynamicString *)(a2 + 6), (re::DynamicString *)(a3 + 48));
  }
  else
  {
    return (re::DynamicString *)std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<1ul,re::CPUTexture const&>(a1, a3);
  }
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DynamicArray<unsigned char>>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * a1[2]), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 5 * v9;
      unint64_t v11 = (uint64_t *)(*(void *)(a2 + 32) + 8 * v10);
      uint64_t result = a1[4] + 8 * v10;
      uint64_t v12 = 40 * v4 - 8 * v10;
      do
      {
        uint64_t v13 = re::DynamicArray<BOOL>::DynamicArray(result, v11);
        v11 += 5;
        uint64_t result = v13 + 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * v4), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 40 * v4;
      uint64_t v8 = 40 * v6 - 40 * v4;
      do
      {
        uint64_t result = re::DynamicArray<unsigned long>::deinit(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 40 * v2;
    do
    {
      uint64_t result = re::DynamicArray<unsigned long>::deinit(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void *re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 40 * v9;
        unint64_t v11 = v7 + 4;
        do
        {
          *unint64_t v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 4) = *(void *)v8;
          *(v11 - 3) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 2);
          *(v11 - 2) = *(void *)(v8 + 16);
          *(void *)(v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v13;
          uint64_t v14 = *v11;
          *unint64_t v11 = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<unsigned long>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::DynamicArray<BOOL>::operator=(a3, v4);
      v4 += 5;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<1ul,re::CPUTexture const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                           + v4))(&v6, a1);
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t result = std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((void *)a1, a2);
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

void *std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(void *a1, uint64_t a2)
{
  uint64_t v4 = (const re::DynamicString *)(a2 + 48);
  *a1 = *(id *)a2;
  re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray((uint64_t)(a1 + 1), (uint64_t *)(a2 + 8));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 6), v4);
  return a1;
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::DynamicArray<unsigned char>>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                                       + v4))(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6D3DE0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, id *a3)
{
  id result = *a3;
  *a2 = result;
  return result;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  return std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(a2, a3);
}

uint64_t re::TextureData::TextureData(uint64_t a1, uint64_t a2, __CFString *a3)
{
  *(unsigned char *)a1 &= 0x80u;
  std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((void *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  if (a3) {
    re::TextureData::setColorSpace((id *)a1, a3);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 80);
  uint64_t v4 = *(unsigned int *)(a2 + 80);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    id result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 80) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6D3DF0[v4])(&v5, result, a2);
}

void **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(void ***a1, void **a2, void **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>>(*a1, a2, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, void **a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<1ul,re::CPUTexture,re::CPUTexture const&>(*a1, a2, a3);
}

void **std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>>(void **result, void **a2, void **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *((unsigned int *)result + 20);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    id result = (void **)((uint64_t (*)(char *, void **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                + v5))(&v6, result);
LABEL_7:
    const re::DynamicString *v4 = *a3;
    *a3 = 0;
    *((_DWORD *)v4 + 20) = 0;
    return result;
  }
  return NS::SharedPtr<MTL::Texture>::operator=(a2, a3);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 80);
  if (v4 != -1) {
    id result = ((uint64_t (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
  }
                                                       + v4))(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    id result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6D3E00[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  return std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(a2, a3);
}

uint64_t re::Result<re::TextureFromImageOptions,re::DynamicString>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1) {

  }
  else {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  }
  return a1;
}

uint64_t re::AssetHandle::loadedAsset<re::TextureAsset>(re::TextureAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  re::TextureAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::TextureAsset::assetType(void)::type, 1);
}

unsigned __int8 *re::Result<re::DataTextureProvider,re::DynamicString>::~Result(unsigned __int8 *a1)
{
  int v3 = *a1;
  uint64_t v2 = (re::DynamicString *)(a1 + 8);
  if (v3) {
    (**(void (***)(re::DynamicString *))v2)(v2);
  }
  else {
    re::DynamicString::deinit(v2);
  }
  return a1;
}

void re::make::shared::object<re::TextureAssetRealityFileProviderCallbacks,re::TextureAssetLoader *>(re *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::TextureAssetRealityFileProviderCallbacks *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 40, 8);
  re::TextureAssetRealityFileProviderCallbacks::TextureAssetRealityFileProviderCallbacks(v5, *(re::TextureAssetLoader **)a1);
  *a2 = v6;
}

void re::TextureAssetRealityFileProviderCallbacks::TextureAssetRealityFileProviderCallbacks(re::TextureAssetRealityFileProviderCallbacks *this, re::TextureAssetLoader *a2)
{
  *((void *)this + 3) = a2;
  *(void *)this = &unk_26E6D3E20;
  *((unsigned char *)this + 32) = *((void *)a2 + 2) != 0;
}

void re::TextureAssetRealityFileProviderCallbacks::~TextureAssetRealityFileProviderCallbacks(re::TextureAssetRealityFileProviderCallbacks *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

unsigned __int8 *re::TextureAssetRealityFileProviderCallbacks::tryCreateMissingAsset@<X0>(uint64_t a1@<X0>, const re::TextureAssetLoader *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v37 = a4;
  uint64_t v8 = *(re::TextureAssetRealityFileProviderCallbacks **)(a1 + 24);
  if (*(unsigned char *)(a3 + 80)) {
    uint64_t v9 = *(re::RealityFile **)(a3 + 88);
  }
  else {
    uint64_t v9 = (re::RealityFile *)(a3 + 81);
  }
  if (*(unsigned char *)(a3 + 16)) {
    uint64_t v10 = *(const char **)(a3 + 24);
  }
  else {
    uint64_t v10 = (const char *)(a3 + 17);
  }
  if (*(void *)(a5 + 8)) {
    unint64_t v11 = *(unint64_t **)(a5 + 16);
  }
  else {
    unint64_t v11 = (unint64_t *)(a5 + 9);
  }
  re::TextureAssetRealityFileProviderCallbacks::tryCreateSourceImageTextureProvider(v8, a2, v9, v10, *(const char **)(a3 + 112), v11, &v37, (uint64_t)v35);
  if (v35[0])
  {
    uint64_t v13 = re::globalAllocators(v12);
    re::loadTextureDataWithProvider((re *)v36, (re::TextureProvider *)v13[2], v14, (uint64_t)&v31);
    uint64_t v16 = *re::assetsLogObjects(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a3 + 80)) {
        uint64_t v17 = *(void *)(a3 + 88);
      }
      else {
        uint64_t v17 = a3 + 81;
      }
      if (*(unsigned char *)(a3 + 16)) {
        uint64_t v18 = *(void *)(a3 + 24);
      }
      else {
        uint64_t v18 = a3 + 17;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v18;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v39 = v37;
    }
    if ((_BYTE)v31)
    {
      buf[0] = v32;
      uint8_t buf[8] = 0;
      unsigned int v40 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[8], (uint64_t)&v32 + 8);
      id v41 = v34;
      *(void *)&v29[17] = 0;
      *(void *)&v29[12] = 0;
      *(_DWORD *)uint64_t v29 = 16777473;
      v29[4] = 1;
      *(_DWORD *)&v29[8] = 1;
      *(_DWORD *)&v29[28] = 0;
      uint64_t TextureAsset = (re::TextureAsset *)re::TextureAsset::makeTextureAsset((uint64_t)buf, v36[26], (long long *)v29);
      if (TextureAsset)
      {
        uint64_t v20 = TextureAsset;
        uint64_t v21 = re::TextureAsset::assetType(TextureAsset);
        uint64_t v22 = (const char *)re::TextureAsset::assetType(void)::type;
        *(void *)&long long v30 = v20;
        BYTE8(v3ArcSharedObject::ArcSharedObject(this, 0) = 0;
        long long v23 = *(_OWORD *)v29;
        uint64_t v25 = *(void *)&v29[24];
        uint64_t v24 = *(void *)&v29[16];
        *(unsigned char *)(a6 + 56) = 0;
        *(_OWORD *)(a6 + 4ArcSharedObject::ArcSharedObject(this, 0) = v30;
        *(unsigned char *)a6 = 1;
      }
      else
      {
        if (*(unsigned char *)(a3 + 80)) {
          uint64_t v27 = *(void *)(a3 + 88);
        }
        else {
          uint64_t v27 = a3 + 81;
        }
        re::DynamicString::format((re::DynamicString *)"Failed to create texture asset for asset path: '%s'.", (re::DynamicString *)v29, v27);
        long long v23 = *(_OWORD *)v29;
        uint64_t v25 = *(void *)&v29[24];
        uint64_t v24 = *(void *)&v29[16];
        *(unsigned char *)a6 = 0;
      }
      *(_OWORD *)(a6 + 8) = v23;
      *(void *)(a6 + 24) = v24;
      *(void *)(a6 + 32) = v25;

      if (v40 != -1) {
        ((void (*)(unsigned char *, unsigned char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
      }
                                                + v40))(v29, &buf[8]);
    }
    else
    {
      re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v32);
      *(unsigned char *)a6 = 0;
      uint64_t v26 = v39;
      *(void *)(a6 + 8) = *(void *)buf;
      *(void *)(a6 + 32) = v26;
      *(_OWORD *)(a6 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)&buf[8];
    }
    re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)&v31);
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v31, (const re::DynamicString *)v36);
    *(unsigned char *)a6 = 0;
    *(void *)(a6 + 8) = v31;
    *(void *)(a6 + 32) = v33;
    *(_OWORD *)(a6 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v32;
  }
  return re::Result<re::DataTextureProvider,re::DynamicString>::~Result(v35);
}

_anonymous_namespace_ *re::TextureAssetRealityFileProviderCallbacks::prepareDeserializationContext(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3)
{
  if (*((unsigned char *)result + 32) && *(unsigned char *)(a2 + 104))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    re::DynamicString::setCapacity(&v8, 0);
    v6.n128_f64[0] = re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString>(a3, (const re::DynamicString *)&v12, &v8);
    if (v8 && (v9 & 1) != 0) {
      (*(void (**)(double))(*v8 + 40))(v6.n128_f64[0]);
    }
    id result = v12;
    if (v12 && (v13 & 1) != 0) {
      id result = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(void *)v12 + 40))(v6);
    }
  }
  if (*(void *)(a2 + 112) != 1)
  {
    re::DynamicString::format((re::DynamicString *)"%d", (re::DynamicString *)&v8, *(void *)(a2 + 112));
    v7.n128_f64[0] = re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString>(a3, (const re::DynamicString *)&v12, &v8);
    if (v8 && (v9 & 1) != 0) {
      (*(void (**)(double))(*v8 + 40))(v7.n128_f64[0]);
    }
    id result = v12;
    if (v12)
    {
      if (v13) {
        return (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(void *)v12 + 40))(v7);
      }
    }
  }
  return result;
}

uint64_t re::TextureAssetRealityFileProviderCallbacks::postLoadProcessing@<X0>(re::RealityFile *this@<X2>, uint64_t a2@<X0>, re::TextureAsset *a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a4 + 80)) {
    __n128 v7 = *(const char **)(a4 + 88);
  }
  else {
    __n128 v7 = (const char *)(a4 + 81);
  }
  re::RealityFile::makeArchiveReader(this, (uint64_t)v43);
  if (!v43[0])
  {
    long long v23 = (_anonymous_namespace_ *)re::WrappedError::localizedDescription((id *)&v44);
    long long v24 = v39;
    uint64_t v25 = v40;
    uint64_t v26 = v41;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v24;
    *(void *)(a5 + 24) = v25;
    *(void *)(a5 + 32) = v26;
    return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
  }
  uint64_t v8 = v44;
  if (v44) {
    uint64_t v9 = v44 + 8;
  }
  re::RealityArchive::entryNames((re::RealityArchive *)v8, (uint64_t)&v39);
  if (!v40)
  {
LABEL_37:
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v39);
    *(unsigned char *)a5 = 1;
    if (!v8) {
      return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
    }
LABEL_38:

    return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
  }
  uint64_t v10 = v42;
  uint64_t v11 = 32 * v40;
  while (1)
  {
    re::DynamicString::rfind((uint64_t)v10, 46, v37);
    if (v37[0])
    {
      uint64_t v12 = (*((unsigned char *)v10 + 8) & 1) != 0
          ? (re::DynamicString *)*((void *)v10 + 2)
          : (re::DynamicString *)((char *)v10 + 9);
      unint64_t v13 = v38;
      if (!strcmp((const char *)v12 + v38, ".ktx"))
      {
        re::DynamicString::rfind((uint64_t)v10, 46, v13, (uint64_t)v35);
        if (v35[0])
        {
          uint64_t v14 = *((void *)v10 + 1);
          if (v14) {
            uint64_t v15 = (const char *)*((void *)v10 + 2);
          }
          else {
            uint64_t v15 = (char *)v10 + 9;
          }
          uint64_t v16 = v36;
          int v17 = strncmp(v15, "assets/", 7uLL);
          uint64_t v18 = v16 - 7;
          if (v17) {
            uint64_t v18 = v16;
          }
          uint64_t v19 = 7;
          if (v17) {
            uint64_t v19 = 0;
          }
          if (!strncmp(&v15[v19], v7, v18 - 1))
          {
            uint64_t v20 = (v14 & 1) != 0 ? (char *)*((void *)v10 + 2) : (char *)v10 + 9;
            re::RealityArchive::newDataByLoadingEntryWithName((re::RealityArchive *)v8, v20, (uint64_t)v32);
            int v21 = v32[0];
            if (v32[0])
            {
              id v22 = v33;
              id v29 = v22;
              re::TextureAssetLoader::injectMipsFromKTX(*(re::TextureAssetLoader **)(a2 + 24), a3, &v29);
            }
            else
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)&v33);
              *(unsigned char *)a5 = 0;
              *(void *)(a5 + 8) = v29;
              *(void *)(a5 + 32) = v31;
              *(_OWORD *)(a5 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v30;
            }
            if (!v32[0] && v33 && (v34 & 1) != 0) {
              (*(void (**)(void))(*(void *)v33 + 40))();
            }
            if (!v21) {
              break;
            }
          }
        }
      }
    }
    uint64_t v10 = (re::DynamicString *)((char *)v10 + 32);
    v11 -= 32;
    if (!v11) {
      goto LABEL_37;
    }
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v39);
  if (v8) {
    goto LABEL_38;
  }
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
}

uint64_t re::Result<re::TextureData,re::DynamicString>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {

    uint64_t v2 = *(unsigned int *)(a1 + 96);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
    }
                                             + v2))(&v4, a1 + 16);
    *(_DWORD *)(a1 + 96) = -1;
  }
  else
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  }
  return a1;
}

double re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString>(uint64_t a1, const re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = *(_DWORD *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      unsigned int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        unsigned int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 88 * v12 + 8) = v15 | 0x80000000;
    uint64_t v16 = 88 * v12;
    *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + vre::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v16 + 16), a2);
    uint64_t v17 = *(void *)(a1 + 16) + 88 * v12;
    double result = 0.0;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0u;
    *(void *)(v17 + re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = a3[3];
    uint64_t v18 = a3[1];
    *(void *)(v17 + 48) = *a3;
    *a3 = 0;
    uint64_t v19 = a3[2];
    a3[3] = 0;
    uint64_t v21 = *(void *)(v17 + 56);
    uint64_t v20 = *(void *)(v17 + 64);
    *(void *)(v17 + 56) = v18;
    *(void *)(v17 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = v19;
    a3[1] = v21;
    a3[2] = v20;
    *(_DWORD *)(v17 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  return result;
}

void std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26E6D3E98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6D3E98;
  a2[1] = v2;
  return result;
}

re *std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::operator()(re *result)
{
  uint64_t v1 = (void (***)(void))**((void **)result + 1);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = re::globalAllocators(result)[2];
    (**v1)(v1);
    double result = (re *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40))(v3, v1);
    **((void **)v2 + 1) = 0;
  }
  return result;
}

uint64_t std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::Data&>(uint64_t a1, const re::DynamicString *a2, int a3, id *a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v27, (uint64_t)a2);
  unint64_t v9 = v8;
  if (!*(void *)a1)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = *(_DWORD *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      unsigned int v13 = *(_DWORD *)(a1 + 32);
      unsigned int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = v9 % *(unsigned int *)(a1 + 24);
        unsigned int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + 88 * v13 + 8) = v16 | 0x80000000;
    uint64_t v17 = 88 * v13;
    *(_DWORD *)(*(void *)(a1 + 16) + v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v17 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v10);
    *(void *)(*(void *)(a1 + 16) + v17) = v9;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v17 + 16), a2);
    uint64_t v18 = *(void *)(a1 + 16) + 88 * v13;
    *(void *)(v18 + 48) = *a4;
    *(_DWORD *)(v18 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1ArcSharedObject::ArcSharedObject(this, 0) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 16) + 88 * v13;
    return v19 + 48;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 88 * v11 + 16, (uint64_t)a2))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 88 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v19 = v12 + 88 * v11;
      return v19 + 48;
    case 2:
      uint64_t v21 = v12 + 88 * v11;
      char v22 = (re::DynamicString *)(v21 + 48);
      uint64_t v23 = *(unsigned int *)(v21 + 80);
      if (v23 != -1) {
        (*(&off_26E6D3F08 + v23))((int)&v28, v22);
      }
      goto LABEL_21;
    case 3:
      uint64_t v24 = v12 + 88 * v11;
      char v22 = (re::DynamicString *)(v24 + 48);
      uint64_t v25 = *(unsigned int *)(v24 + 80);
      if (v25 != -1) {
        (*(&off_26E6D3F08 + v25))((int)&v29, v22);
      }
LABEL_21:
      *((_DWORD *)v22 + 8) = -1;
      uint64_t v26 = *(void *)(a1 + 16) + 88 * v11;
      *(void *)(v26 + 48) = *a4;
      *(_DWORD *)(v26 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 16) + 88 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v19 + 48;
}

uint64_t re::Optional<re::TextureData>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {

    uint64_t v2 = *(unsigned int *)(a1 + 96);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
    }
                                             + v2))(&v4, a1 + 16);
    *(_DWORD *)(a1 + 96) = -1;
  }
  return a1;
}

void sub_233474040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)REAudioPayload;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_233474264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233474498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233474644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233474C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2334750C0(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_233475368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233475610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_233475778(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void re::AudioPayload::makeBufferPayloadWithProperties(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, void *a6@<X5>, char a7@<W6>, int a8@<W7>, REAudioPayload **a9@<X8>, float a10@<S0>, double a11@<D1>, uint64_t a12, int a13, uint64_t a14)
{
  id v31 = a1;
  id v22 = a2;
  id v23 = a6;
  uint64_t v24 = [REAudioPayload alloc];
  LODWORD(v28) = a13;
  HIDWORD(v27) = a8;
  LOBYTE(v27) = a7;
  *(float *)&double v25 = a10;
  uint64_t v26 = -[REAudioPayload initWithBuffer:format:length:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:](v24, "initWithBuffer:format:length:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:", v31, v22, a3, a4, a5, v23, v25, a11, v27, a12, v28, a14);
  *a9 = v26;
}

void sub_233475914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void re::AudioPayload::makeFilePayloadWithProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, unsigned int a8@<W7>, REAudioPayload **a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, int a13, uint64_t a14)
{
  id v29 = a4;
  double v25 = [REAudioPayload alloc];
  LODWORD(v28) = a13;
  *(float *)&double v26 = a10;
  uint64_t v27 = -[REAudioPayload initWithFilePath:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:targetLUFS:audioAssetID:](v25, "initWithFilePath:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:targetLUFS:audioAssetID:", a1, a2, a3, v29, a5, a6, v26, a11, a12, __PAIR64__(a8, a7), v28, a14);
  *a9 = v27;
}

void sub_233475A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void re::AudioPayload::makeFileBufferPayloadWithProperties(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, void *a7@<X6>, char a8@<W7>, REAudioPayload **a9@<X8>, float a10@<S0>, double a11@<D1>, int a12, unsigned int a13, unsigned int a14, int a15, uint64_t a16)
{
  id v33 = a1;
  id v23 = a2;
  id v24 = a7;
  double v25 = [REAudioPayload alloc];
  LODWORD(v29) = a15;
  HIDWORD(v28) = a12;
  LOBYTE(v28) = a8;
  *(float *)&double v26 = a10;
  uint64_t v27 = -[REAudioPayload initWithFileBuffer:format:length:bufferSize:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:](v25, "initWithFileBuffer:format:length:bufferSize:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:", v33, v23, a3, a4, a5, a6, v26, a11, v24, v28, __PAIR64__(a14, a13), v29, a16);
  *a9 = v27;
}

void sub_233475B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void re::AudioPayload::dynamicCast(id *this@<X0>, void *a2@<X8>)
{
  id v7 = *this;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v5 = v7;
  if (isKindOfClass)
  {
    id v6 = v7;
    uint64_t v5 = v7;
  }
  else
  {
    id v6 = 0;
  }
  *a2 = v6;
}

void sub_233475BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL re::AssetCompatibilityManager::isScene(re::AssetCompatibilityManager *this, const re::AssetHandle *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    uint64_t v3 = *(uint64_t **)(v2 + 264);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 == re::SceneAsset::assetType(this);
}

BOOL re::AssetCompatibilityManager::sceneAssetNeedsCopyForWriting(re::AssetCompatibilityManager *this, const re::AssetHandle *a2, uint64_t a3)
{
  return re::AssetCompatibility::sceneAssetNeedsCopyForWriting(a2, a3);
}

uint64_t *re::AssetCompatibilityManager::sceneAssetCopyForWriting@<X0>(const re::AssetHandle *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return re::AssetCompatibility::sceneAssetCopyForWriting(a1, a2, a3);
}

uint64_t *re::AssetCompatibilityManager::createModifiedAssetPointerForWritingIfNecessary@<X0>(const re::internal::AssetEntry *a1@<X1>, const re::AssetManager *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(a1, a2, a3, a4, a5);
}

uint64_t *re::AssetCompatibilityManager::createModifiedAssetPointerForWritingIfNecessaryFromAssetHandle@<X0>(const re::AssetHandle *a1@<X1>, const re::AssetHandle *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessaryFromAssetHandle(a1, a2, a3, a4);
}

BOOL re::AssetCompatibilityManager::isSceneAssetCompatibleWithVersion(re::AssetCompatibilityManager *this, const re::AssetHandle *a2, const re::AssetHandle *a3)
{
  return re::AssetCompatibility::isSceneAssetCompatibleWithVersion(a2, a3);
}

uint64_t *re::AssetCompatibilityManager::sceneAssetCopyCompatibilityVariant(re::AssetCompatibilityManager *this, const re::AssetHandle *a2, uint64_t a3)
{
  return re::AssetCompatibility::sceneAssetCopyCompatibilityVariant(a2, a3);
}

uint64_t re::AssetCompatibilityManager::isAssetAvailableForVersion(re::SkeletonAsset *a1, re::SceneAsset *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    id v6 = *(uint64_t **)(v5 + 264);
    if (v6 == re::SkeletonAsset::assetType(a1)) {
      return 1;
    }
  }
  else
  {
    re::SkeletonAsset::assetType(a1);
  }
  return re::TypeAvailabilityUtilities::checkAssetIsAvailableForMajorVersion(a2, a3, 0);
}

void re::AssetCompatibilityManager::isAssetAllowedInRealityFile(const re::AssetHandle *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if (v3) {
    char v4 = *(re::TypeAvailabilityUtilities **)(v3 + 264);
  }
  else {
    char v4 = 0;
  }
  re::TypeAvailabilityUtilities::isAssetAllowedInRealityFile(v4, a2);
}

uint64_t re::AssetCompatibilityManager::convertToRealityKitRelease(uint64_t a1, uint64_t a2)
{
  return re::TypeAvailabilityUtilities::convertToRealityKitRelease(a2);
}

uint64_t *re::AssetCompatibilityManager::emitAssetTypeBeginSignpost(re::AssetCompatibilityManager *this, const re::AssetType *a2)
{
  uint64_t v3 = re::MeshAsset::assetType(this);
  if (v3 == (uint64_t *)a2)
  {
    double result = (uint64_t *)re::internal::enableSignposts(0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  else
  {
    char v4 = re::MaterialAsset::assetType((re::MaterialAsset *)v3);
    if (v4 == (uint64_t *)a2)
    {
      double result = (uint64_t *)re::internal::enableSignposts(0, 0);
      if ((result & 1) == 0) {
        return result;
      }
    }
    else
    {
      double result = re::TextureAsset::assetType((re::TextureAsset *)v4);
      if (result != (uint64_t *)a2) {
        return result;
      }
      double result = (uint64_t *)re::internal::enableSignposts(0, 0);
      if (!result) {
        return result;
      }
    }
  }
  return (uint64_t *)kdebug_trace();
}

uint64_t *re::AssetCompatibilityManager::emitAssetTypeEndSignpost(re::AssetCompatibilityManager *this, const re::AssetType *a2)
{
  uint64_t v3 = re::MeshAsset::assetType(this);
  if (v3 == (uint64_t *)a2)
  {
    double result = (uint64_t *)re::internal::enableSignposts(0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  else
  {
    char v4 = re::MaterialAsset::assetType((re::MaterialAsset *)v3);
    if (v4 == (uint64_t *)a2)
    {
      double result = (uint64_t *)re::internal::enableSignposts(0, 0);
      if ((result & 1) == 0) {
        return result;
      }
    }
    else
    {
      double result = re::TextureAsset::assetType((re::TextureAsset *)v4);
      if (result != (uint64_t *)a2) {
        return result;
      }
      double result = (uint64_t *)re::internal::enableSignposts(0, 0);
      if (!result) {
        return result;
      }
    }
  }
  return (uint64_t *)kdebug_trace();
}

uint64_t re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 32) = 0;
  uint64_t result = re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::SceneAssetRemapperImplementation::remapSceneAsset(re::SceneAssetRemapperImplementation *this@<X0>, const re::AssetHandle *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v26, a2);
  if (!*((void *)this + 5))
  {
LABEL_13:
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v29, (const re::AssetHandle *)&v26);
    *(unsigned char *)a4 = 1;
    *(_OWORD *)(a4 + 8) = v29;
    long long v29 = 0uLL;
    *(void *)(a4 + 24) = v30;
    uint64_t v30 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
    goto LABEL_14;
  }
  uint64_t v8 = *((void *)a2 + 1);
  if (v8) {
    unint64_t v9 = *(AssetService **)(v8 + 24);
  }
  else {
    unint64_t v9 = 0;
  }
  re::StringID::StringID((re::StringID *)&v29, a3);
  re::make::shared::object<re::ecs2::Scene,re::StringID>((re *)&v29, &v25);
  re::StringID::destroyString((re::StringID *)&v29);
  re::ecs2::ECSSerialization::loadFromAsset(v25, v9, (AssetService *)a2, v10);
  uint64_t v11 = *((void *)this + 5);
  if (!v11)
  {
LABEL_11:
    if (v25) {

    }
    goto LABEL_13;
  }
  char v12 = 0;
  uint64_t v13 = *((void *)this + 7);
  uint64_t v14 = 40 * v11;
  while (1)
  {
    uint64_t v31 = *(void *)(v13 + 24);
    uint64_t v32 = 0;
    re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::operator=<24ul>((uint64_t)&v29, v13);
    uint64_t v28 = v25;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 16))(&v23);
    if (v24) {
      break;
    }
    v12 |= (_BYTE)v23 != 0;
    uint64_t v15 = (re *)re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable((uint64_t)&v29);
    v13 += 40;
    v14 -= 40;
    if (!v14)
    {
      if (v12)
      {
        int v16 = re::globalAllocators(v15);
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 40, 8);
        *(_OWORD *)uint64_t v17 = 0u;
        *(_OWORD *)(v17 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
        *(void *)(v17 + 32) = 0;
        re::ecs2::ECSSerialization::saveIntoSceneAssetData(v25, v17, 1);
        uint64_t v19 = re::SceneAsset::assetType(v18);
        (*((void (**)(long long *__return_ptr, AssetService *, uint64_t, uint64_t *, void, void, void))v9->var0
         + 52))(&v29, v9, v17, v19, 0, 0, 0);
        long long v20 = v26;
        long long v26 = v29;
        long long v29 = v20;
        uint64_t v21 = v27;
        uint64_t v27 = v30;
        uint64_t v30 = v21;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
      }
      goto LABEL_11;
    }
  }
  id v22 = v24;
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = v22;

  re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable((uint64_t)&v29);
  if (v25) {

  }
LABEL_14:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
}

void re::SceneAssetRemapperImplementation::~SceneAssetRemapperImplementation(re::SceneAssetRemapperImplementation *this)
{
  *(void *)this = &unk_26E6D3FC0;
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D3FC0;
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 == a2) {
    return result;
  }
  uint64_t v5 = result;
  if (result[2] > a2) {
    return result;
  }
  uint64_t result = (void *)*result;
  if (!*v5)
  {
    uint64_t result = (void *)re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      uint64_t v2 = 40 * a2;
      uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        unint64_t v7 = result;
        if (!v5[1]) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0;
  if (!v3) {
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v8 = v5[4];
  uint64_t v9 = v5[2];
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = 40 * v9;
  uint64_t v11 = (uint64_t)v7;
  do
  {
    *(void *)(v11 + 24) = *(void *)(v8 + 24);
    *(void *)(v11 + 32) = 0;
    if (v8 == v11) {
      goto LABEL_24;
    }
    re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable(v11);
    uint64_t v12 = *(void *)(v8 + 32);
    if (*(void *)(v11 + 24) == *(void *)(v8 + 24))
    {
      uint64_t v13 = v8;
      if (v8 != v12)
      {
        *(void *)(v11 + 32) = v12;
        *(void *)(v8 + 32) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 32);
      if (!v12) {
        goto LABEL_24;
      }
    }
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v15 = v11;
    if (v14 >= 0x19)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v11 + 24);
      if (v17) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v16, 0);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    *(void *)(v11 + 32) = v15;
    (*(void (**)(void))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32));
    re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  uint64_t v8 = v5[4];
LABEL_26:
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
LABEL_27:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

re::ecs2::Scene *re::make::shared::object<re::ecs2::Scene,re::StringID>@<X0>(re *a1@<X0>, re::ecs2::Scene **a2@<X8>)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 384, 8);
  uint64_t result = re::ecs2::Scene::Scene(v5, (const StringID *)a1);
  *a2 = result;
  return result;
}

uint64_t re::AudioAssetLoadStrategy_Host::createRuntimeData(re::AudioAssetLoadStrategy_Base *a1, re::AudioFileAsset *a2, uint64_t a3, uint64_t a4, AudioSceneService *a5)
{
  id v9 = *(id *)(*((void *)a2 + 1) + 16);
  if (v9 || (id v9 = *(id *)(*((void *)a2 + 1) + 176)) != 0)
  {

LABEL_4:
    re::AudioFileAsset::completeLoad(a2, a5);
    return 1;
  }
  id v11 = *(id *)(*((void *)a2 + 1) + 184);

  if (v11) {
    goto LABEL_4;
  }
  if (!a3)
  {
    if (!(*(uint64_t (**)(void))(*(void *)(*((void *)a2 + 1) + 48) + 64))())
    {
      uint64_t result = re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(a1, a2);
      if (result) {
        goto LABEL_4;
      }
      return result;
    }
    a3 = *((void *)a2 + 1) + 48;
  }
  if ((*(uint64_t (**)(re::AudioAssetLoadStrategy_Base *, uint64_t, re::AudioFileAsset *))(*(void *)a1 + 40))(a1, a3, a2))goto LABEL_4; {
  return 0;
  }
}

void re::AudioAssetLoadStrategy_Host::unregisterAsset(re::AudioAssetLoadStrategy_Host *this, re::AudioFileAsset *a2, AudioSceneService *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = (id)*re::audioLogObjects(this);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 1) + 24);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Host] Unregistered audio asset: %llu", (uint8_t *)&v7, 0xCu);
  }
  else
  {

    if (!a2) {
      return;
    }
  }
  (*((void (**)(AudioSceneService *, void))a3->var0 + 23))(a3, *(void *)(*((void *)a2 + 1) + 24));
}

void re::AudioAssetLoadStrategy_Host::resourceDidUpdate(int a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v10 = a5;
  uint64_t v11 = a2;
  id v9 = *a3;
  v12[0] = &unk_26E6D4080;
  v12[1] = &v11;
  uint64_t v12[2] = &v10;
  void v12[3] = v12;
  char v13 = 1;
  re::AudioAssetLoadStrategy_Base::resourceDidUpdate(a1, a2, &v9, a4, a5, (uint64_t)v12);
  if (v13) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v12);
  }
}

void sub_233476B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&a13);
  }

  _Unwind_Resume(a1);
}

BOOL re::AudioAssetLoadStrategy_Host::createRuntimeDataWithSeekableInputStream(re::AudioAssetLoadStrategy_Host *this, re::SeekableInputStream *a2, re::AudioFileAsset *a3)
{
  if ((*(uint64_t (**)(void))(*(void *)(*((void *)a3 + 1) + 48) + 64))()) {
    *(void *)(*((void *)a3 + 1) + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160) = (*(uint64_t (**)(void))(*(void *)(*((void *)a3 + 1) + 48) + 40))();
  }
  int v6 = *((unsigned __int8 *)a3 + 100);
  unint64_t v7 = (*(uint64_t (**)(re::SeekableInputStream *))(*(void *)a2 + 64))(a2);
  if (v6)
  {
    uint64_t v8 = (re::SeekableInputStream *)(*(uint64_t (**)(re::SeekableInputStream *))(*(void *)a2 + 72))(a2);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  uint64_t v10 = +[_REAudioFile audioFileWithStream:v8 ownsStream:v9];
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = [v10 processingFormat];
    uint64_t v14 = (re *)re::audio::layoutTagFromFormat(v12, v13);
    *((_DWORD *)a3 + 32) = v14;
    if (v14 == -65536)
    {
      uint64_t v15 = *re::audioLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v27 = 0;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Host] Failed to load embedded audio due to missing channel layout.", v27, 2u);
      }
      BOOL v16 = 0;
    }
    else
    {
      uint64_t v18 = [v11 fileFormat];
      [v18 sampleRate];
      double v20 = v19;

      if (v20 != 48000.0)
      {
        uint64_t v21 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayoutTag:*((unsigned int *)a3 + 32)];
        id v22 = objc_alloc(MEMORY[0x263EF9388]);
        uint64_t v23 = [v11 fileFormat];
        [v23 sampleRate];
        uint64_t v24 = objc_msgSend(v22, "initStandardFormatWithSampleRate:channelLayout:", v21);

        uint64_t v12 = (re::audio *)v24;
      }
      if (v6)
      {
        objc_storeStrong((id *)(*((void *)a3 + 1) + 8), v12);
        *((void *)a3 + 17) = [v11 getReaderFileLength];
        unint64_t v25 = v7 / 0x64;
        if (v7 / 0x64 <= 0xC350) {
          unint64_t v25 = 50000;
        }
        if ((*((_DWORD *)a3 + 33) + 1) <= 1) {
          v25 += v7;
        }
        *((void *)a3 + 2ArcSharedObject::ArcSharedObject(this, 0) = v25;
        objc_storeStrong(*((id **)a3 + 1), v11);
        BOOL v16 = 1;
      }
      else
      {
        BOOL v16 = re::AudioAssetLoadStrategy_Base::decodeSeekableStreamIntoPCMBuffer(this, a2, a3);
      }
    }
  }
  else
  {
    uint64_t v17 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Host] Failed to load embedded audio due to nil audio file.", buf, 2u);
    }
    BOOL v16 = 0;
  }

  return v16;
}

void sub_233476EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Host::~AudioAssetLoadStrategy_Host(re::AudioAssetLoadStrategy_Host *this)
{
}

void std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E6D4080;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6D4080;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  if (*(void *)(*(void *)(**(void **)(result + 8) + 8) + 24)) {
    return (*(uint64_t (**)(void))(***(void ***)(result + 16) + 184))();
  }
  return result;
}

uint64_t std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *re::CGPerspectiveContextAsset::assetType(re::CGPerspectiveContextAsset *this)
{
  {
    re::CGPerspectiveContextAsset::assetType(void)::type = (uint64_t)"CGPerspectiveContext";
    qword_26879E6A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::CGPerspectiveContextAsset::assetType(void)::type);
  }
  return &re::CGPerspectiveContextAsset::assetType(void)::type;
}

uint64_t re::CGPerspectiveContextAssetLoader::unloadAsset(re::CGPerspectiveContextAssetLoader *this, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  if (v3) {
    CFRelease(v3);
  }
  a2[1] = 0;
  *(_DWORD *)a2 = -1;
  a2[4] = 0;
  ++*((_DWORD *)a2 + 10);
  uint64_t v4 = re::globalAllocators((re *)v3)[2];
  uint64_t v5 = (const void *)a2[1];
  if (v5) {
    CFRelease(v5);
  }
  a2[1] = 0;
  *(_DWORD *)a2 = -1;
  a2[4] = 0;
  ++*((_DWORD *)a2 + 10);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a2 + 2));
  int v6 = *(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 40);
  return v6(v4, a2);
}

uint64_t re::CGPerspectiveContextAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  CFDataRef v3 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UInt8 **)(a2 + 48), *(void *)(a2 + 24), (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  *(void *)(a2 + 8) = CGPerspectiveCommandsDecode(v3);
  CFRelease(v3);
  return 1;
}

BOOL re::CGPerspectiveContextAssetLoader::isSupportedSourceExtension(re::CGPerspectiveContextAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "cgp") == 0;
}

uint64_t re::CGPerspectiveContextAssetLoader::introspectionType(re::CGPerspectiveContextAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78F00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF78F00))
  {
    qword_26AF78EF8 = re::internal::getOrCreateInfo((re::internal *)"CGPerspectiveContextAsset", (uint64_t (*)(re::internal *))re::allocInfo_CGPerspectiveContextAsset, (re::IntrospectionBase *(*)(void))re::initInfo_CGPerspectiveContextAsset, (void (*)(re::IntrospectionBase *))&unk_26AF78EF0, 0);
    __cxa_guard_release(&qword_26AF78F00);
  }
  return qword_26AF78EF8;
}

void *re::allocInfo_CGPerspectiveContextAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_74, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_74))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF78F18, "CGPerspectiveContextAsset");
    __cxa_guard_release(&_MergedGlobals_74);
  }
  return &unk_26AF78F18;
}

void re::initInfo_CGPerspectiveContextAsset(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xC5C5E34969555BB2;
  v14[1] = "CGPerspectiveContextAsset";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF78EE8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF78EE8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "networkVersion";
      *(void *)(v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78F08 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "commandsBuffer";
      *(void *)(v12 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0;
      qword_26AF78F10 = v12;
      __cxa_guard_release(&qword_26AF78EE8);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF78F08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CGPerspectiveContextAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::CGPerspectiveContextAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::CGPerspectiveContextAsset>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::CGPerspectiveContextAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::CGPerspectiveContextAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::CGPerspectiveContextAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(const void **)(a3 + 8);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)a3 = -1;
  *(void *)(a3 + 32) = 0;
  ++*(_DWORD *)(a3 + 40);
  return re::DynamicArray<unsigned long>::deinit(a3 + 16);
}

double re::internal::defaultConstructV2<re::CGPerspectiveContextAsset>(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::CGPerspectiveContextAsset>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 32) = 0;
  ++*(_DWORD *)(a1 + 40);
  return re::DynamicArray<unsigned long>::deinit(a1 + 16);
}

void re::CGPerspectiveContextAssetLoader::~CGPerspectiveContextAssetLoader(re::CGPerspectiveContextAssetLoader *this)
{
}

BOOL re::ecs2::ECSSerialization::saveToStream(re::ecs2::ECSSerialization *this, re::ecs2::Scene *a2, AssetService *a3, google::protobuf::io::ZeroCopyOutputStream *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  memset(v37, 0, sizeof(v37));
  int v38 = 0;
  re::ecs2::ECSSerialization::saveIntoSceneAssetData(this, (uint64_t)v37, 0);
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::TypeInfo::TypeInfo((uint64_t)v35, (uint64_t)v15);
  re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)&v33, 0);
  v32[2] = 0;
  v32[1] = 0;
  v32[0] = &v33;
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)&v14);
  unsigned char v15[32] = v32;
  uint64_t v5 = re::ecs2::serializeObject<re::ecs2::ECSJSONSerializer>((uint64_t)&v14, (uint64_t)v37, (uint64_t)v35, (uint64_t)a3, (uint64_t)v10);
  int v6 = v10[0];
  if (!v10[0])
  {
    unint64_t v7 = *re::assetTypesLogObjects(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v12) {
        uint64_t v8 = *(unsigned char **)&v13[7];
      }
      else {
        uint64_t v8 = v13;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v41 = v8;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Failed to save scene to stream. Message: %s", buf, 0xCu);
    }
    if (!v10[0] && v11 && (v12 & 1) != 0) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  uint64_t v14 = &unk_26E6D44A0;
  if (v27)
  {
    if (v31) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    uint64_t v31 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    ++v30;
  }
  if (v22)
  {
    if (v26) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
    uint64_t v26 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    ++v25;
  }
  if (v17)
  {
    if (v21) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    ++v20;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v16);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v14);
  uint64_t v33 = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional(v34);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)v37);
  return v6 != 0;
}

double re::ecs2::ECSSerialization::saveIntoSceneAssetData(re *a1, uint64_t a2, uint64_t a3)
{
  int v6 = re::globalAllocators(a1);
  unint64_t v7 = v6[2];
  uint64_t v8 = re::globalAllocators((re *)v6)[2];
  if (a3)
  {
    uint64_t v26 = 0;
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
  }
  v25[0] = v9;
  int v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v24 = 0x7FFFFFFFLL;
  re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v22, v8, 3);
  uint64_t v10 = *((void *)a1 + 13);
  uint64_t v11 = *(uint64_t **)(v10 + 344);
  uint64_t v12 = *(void *)(v10 + 328);
  if (v12)
  {
    uint64_t v13 = 8 * v12;
    do
    {
      uint64_t v14 = *v11++;
      v13 -= 8;
    }
    while (v13);
    uint64_t v15 = *((void *)a1 + 13);
    uint64_t v11 = *(uint64_t **)(v15 + 344);
    uint64_t v12 = *(void *)(v15 + 328);
  }
  v21[0] = 0;
  v20[0] = 0;
  v20[1] = 0;
  void v20[2] = a1;
  v20[3] = v22;
  v21[1] = v20;
  long long v21[2] = 0;
  if (v12)
  {
    uint64_t v16 = 8 * v12;
    do
    {
      unint64_t v17 = *v11;
      if (!a3 || (*(unsigned char *)(v17 + 289) & 0x10) == 0)
      {
        re::DynamicArray<re::ecs2::EntityAssetData>::add(a2, (uint64_t)v19);
        re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v19);
      }
      ++v11;
      v16 -= 8;
    }
    while (v16);
  }
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v22);
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 2re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 72) = a2;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(a1 + 288);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs((void *)a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  *(_DWORD *)(a1 + 28ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(*(void *)(a1 + 272) + 24);
  return result;
}

_anonymous_namespace_ *re::ecs2::serializeObject<re::ecs2::ECSJSONSerializer>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 64)) {
    (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 72))(a1, "object", 1, a2, a3, a3, 0);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t result = re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v11 = *re::assetTypesLogObjects(result);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      char v13 = *(unsigned char *)(a1 + 64);
      if (v13)
      {
        long long v15 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
        uint64_t v12 = (v17 & 1) != 0 ? *(unsigned char **)&v18[7] : v18;
      }
      else
      {
        uint64_t v12 = v18;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
      if (v13)
      {
        if (v16 && (v17 & 1) != 0) {
          (*(void (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
    char v14 = *(unsigned char *)(a1 + 64);
    if (v14)
    {
      long long v15 = *(_OWORD *)(a1 + 72);
      re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
    }
    *(_OWORD *)long long buf = v15;
    uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v16);
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
    *(void *)(a5 + 24) = v20;
    *(void *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 32) = v21;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    long long v21 = 0uLL;
    if (v14)
    {
      uint64_t result = v16;
      if (v16)
      {
        if (v17) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
  }
  return result;
}

uint64_t re::ecs2::ECSSerialization::loadFromAsset(re::ecs2::ECSSerialization *this, AssetService *a2, AssetService *a3, const re::AssetHandle *a4)
{
  re::AssetHandle::loadNow((uint64_t)a3[1].var0, 0);
  var0 = a3[1].var0;
  if (!var0) {
    return 0;
  }
  unsigned int v8 = atomic_load((unsigned int *)var0 + 176);
  if (v8 != 2) {
    return 0;
  }
  uint64_t v9 = re::AssetHandle::loadedAsset<re::SceneAsset>((re::SceneAsset *)a3);
  re::ecs2::ECSSerialization::loadFromAssetData(this, a2, v9);
  return 1;
}

{
  void **var0;
  unsigned int v8;
  uint64_t v9;

  re::AssetHandle::loadNow((uint64_t)a3[1].var0, 0);
  var0 = a3[1].var0;
  if (!var0) {
    return 0;
  }
  unsigned int v8 = atomic_load((unsigned int *)var0 + 176);
  if (v8 != 2) {
    return 0;
  }
  uint64_t v9 = re::AssetHandle::loadedAsset<re::SceneAsset>((re::SceneAsset *)a3);
  re::ecs2::ECSSerialization::loadFromAssetData(this, a2, v9);
  return 1;
}

uint64_t re::AssetHandle::loadedAsset<re::SceneAsset>(re::SceneAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::SceneAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::ECSSerialization::loadFromAssetData(re *a1, AssetService *a2, uint64_t a3)
{
  void v20[4] = *MEMORY[0x263EF8340];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  int v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 136, 8);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v7 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_DWORD *)(v7 + 76) = 0x7FFFFFFF;
  *(_OWORD *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 0u;
  *(void *)(v7 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFF00000000;
  *(void *)(v7 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  char v17 = (uint64_t *)&unk_26E6D42E8;
  void v18[2] = &v17;
  v20[3] = v20;
  uint64_t v19 = (re::internal::EntityHandleHookupTable *)v7;
  v20[0] = &unk_26E6D42E8;
  unsigned int v8 = (re *)std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::~__value_func[abi:nn180100](&v17);
  uint64_t v9 = re::globalAllocators(v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 48, 8);
  *(_OWORD *)(v10 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_DWORD *)(v10 + 36) = 0x7FFFFFFF;
  v16[0] = (uint64_t)&unk_26E6D4378;
  id v16[3] = (uint64_t)v16;
  char v17 = (uint64_t *)v10;
  v18[3] = v18;
  v18[0] = &unk_26E6D4378;
  std::__function::__value_func<void ()(re::internal::MeshSortGroupFixupTable *)>::~__value_func[abi:nn180100](v16);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + 32);
    uint64_t v13 = 112 * v11;
    do
    {
      char v14 = (void *)(*((void *)a1 + 13) + 304);
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v14, v16);
      if (v16[0]) {

      }
      v12 += 112;
      v13 -= 112;
    }
    while (v13);
  }
  re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable(v19);
  std::unique_ptr<re::internal::MeshSortGroupFixupTable,std::function<void ()(re::internal::MeshSortGroupFixupTable*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v17);
  std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v19);
  return 1;
}

{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::Entity *v13;
  re::ecs2::Entity *v15[4];
  uint64_t *v16;
  void v17[5];

  v17[4] = *MEMORY[0x263EF8340];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  int v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 136, 8);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v7 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_DWORD *)(v7 + 76) = 0x7FFFFFFF;
  *(_OWORD *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 0u;
  *(void *)(v7 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFF00000000;
  *(void *)(v7 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  unsigned int v8 = re::globalAllocators((re *)v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 48, 8);
  *(_OWORD *)(v9 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_DWORD *)(v9 + 36) = 0x7FFFFFFF;
  v15[0] = (re::ecs2::Entity *)&unk_26E6D4258;
  void v15[3] = (re::ecs2::Entity *)v15;
  uint64_t v16 = (uint64_t *)v9;
  uint64_t v17[3] = v17;
  v17[0] = &unk_26E6D4258;
  std::__function::__value_func<void ()(re::internal::MeshSortGroupFixupTable *)>::~__value_func[abi:nn180100](v15);
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 32);
    uint64_t v12 = 112 * v10;
    do
    {
      uint64_t v13 = v15[0];
      re::ecs2::Entity::setParentInternal(v15[0], a1, 0xFFFFFFFFFFFFFFFFLL);
      if (v13) {

      }
      v11 += 112;
      v12 -= 112;
    }
    while (v12);
  }
  re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable((re::internal::EntityHandleHookupTable *)v7);
  re::internal::destroyPersistent<re::internal::EntityHandleHookupTable>((re *)v7);
  std::unique_ptr<re::internal::MeshSortGroupFixupTable,std::function<void ()(re::internal::MeshSortGroupFixupTable*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v16);
  return 1;
}

void re::ecs2::ECSSerialization::createSerializedJsonData(re::ecs2::ECSSerialization *this@<X0>, uint64_t a2@<X8>)
{
  Mutable = CFDataCreateMutable(0, 0);
  re::CFDataBufferedOutputStream::CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v37, (CFTypeRef *)&Mutable, -1);
  uint64_t v5 = (*(uint64_t (**)(re::ecs2::ECSSerialization *))(*(void *)this + 40))(this);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)v19);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init((uint64_t)v19, *(void *)(v6 + 32));
  re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>((uint64_t)v19, (uint64_t)this, (uint64_t)v37, (uint64_t)v15);
  if (v15[0])
  {
    v19[0] = &unk_26E6D44A0;
    if (v31)
    {
      if (v35) {
        (*(void (**)(void))(*(void *)v31 + 40))();
      }
      uint64_t v35 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      ++v34;
    }
    if (v26)
    {
      if (v30) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
      uint64_t v30 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      ++v29;
    }
    if (v21)
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      uint64_t v25 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      ++v24;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v20);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)v19);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
    uint64_t v7 = Mutable;
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v7;
  }
  else
  {
    CFRelease(Mutable);
    if (v17) {
      unsigned int v8 = *(unsigned char **)&v18[7];
    }
    else {
      unsigned int v8 = v18;
    }
    re::DynamicString::format((re::DynamicString *)"Serialization failed. Message: %s", (re::DynamicString *)&v12, v8);
    long long v9 = v12;
    uint64_t v10 = v13;
    uint64_t v11 = v14;
    *(unsigned char *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v9;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v11;
    if (!v15[0] && v16 && (v17 & 1) != 0) {
      (*(void (**)(void))(*(void *)v16 + 40))();
    }
    v19[0] = &unk_26E6D44A0;
    if (v31)
    {
      if (v35) {
        (*(void (**)(void))(*(void *)v31 + 40))();
      }
      uint64_t v35 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      ++v34;
    }
    if (v26)
    {
      if (v30) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
      uint64_t v30 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      ++v29;
    }
    if (v21)
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      uint64_t v25 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      ++v24;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v20);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)v19);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)v37);
}

void re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(re **)(a1 + 272);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(void *)v9 + 56))(&v25);
  re::TypeRegistry::typeInfo(v8, &v25, v31);
  if (v31[0])
  {
    if (!*(unsigned char *)(a1 + 64)) {
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))(*(void *)a1 + 72))(a1, "component", 1, a2, v32, v32, 0);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v22 = re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v23 = *re::assetTypesLogObjects(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v25) = *(unsigned char *)(a1 + 64);
        if ((_BYTE)v25)
        {
          long long v26 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
          int v24 = (v28 & 1) != 0 ? v30 : v29;
        }
        else
        {
          int v24 = v29;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
        if ((_BYTE)v25)
        {
          if (v27 && (v28 & 1) != 0) {
            (*(void (**)(void))(*(void *)v27 + 40))();
          }
        }
      }
      LOBYTE(v25) = *(unsigned char *)(a1 + 64);
      if ((_BYTE)v25)
      {
        long long v26 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)long long buf = v26;
      re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v27);
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(void *)(a4 + 24) = v35;
      *(void *)(a4 + 48) = v37;
      *(_OWORD *)(a4 + 32) = v36;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      long long v36 = 0uLL;
      if ((_BYTE)v25)
      {
        uint64_t v20 = v27;
        if (v27)
        {
          if (v28)
          {
            uint64_t v21 = v30;
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      *(unsigned char *)a4 = 1;
    }
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    long long v12 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
    PrettyTypeName = (re *)re::getPrettyTypeName(v12, (const re::IntrospectionBase *)&v25);
    uint64_t v14 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (v26) {
        long long v15 = (char *)*((void *)&v26 + 1);
      }
      else {
        long long v15 = (char *)&v26 + 1;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Serialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if (v26) {
      uint64_t v16 = (char *)*((void *)&v26 + 1);
    }
    else {
      uint64_t v16 = (char *)&v26 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"Serialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v16);
    long long v17 = *(_OWORD *)buf;
    uint64_t v18 = v35;
    uint64_t v19 = v36;
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 400;
    *(void *)(a4 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v17;
    *(void *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v18;
    *(void *)(a4 + 48) = v19;
    uint64_t v20 = v25;
    if (v25 && (v26 & 1) != 0)
    {
      uint64_t v21 = (unsigned char *)*((void *)&v26 + 1);
LABEL_34:
      (*(void (**)(re *, unsigned char *))(*(void *)v20 + 40))(v20, v21);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
}

void *re::ecs2::ECSSerialization::addOrUpdateComponentFromJsonStream(uint64_t a1, AssetService *a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), a4);
  if (v6)
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
    re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer((re::ecs2::ECSJSONDeserializer *)v17, a2);
    uint64_t v7 = (*(uint64_t (**)(void *))(*v6 + 40))(v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init((uint64_t)v17, *(void *)(v8 + 32));
    re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>((uint64_t)v17, v6, a3, (uint64_t)v13);
    if (!v13[0])
    {
      uint64_t v10 = *re::assetTypesLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (v15) {
          uint64_t v11 = *(unsigned char **)&v16[7];
        }
        else {
          uint64_t v11 = v16;
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v38 = v11;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Message: %s", buf, 0xCu);
      }
      if (!v13[0] && v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      uint64_t v6 = 0;
    }
    v17[0] = &unk_26E6D43F8;
    int v34 = &unk_26E6CA658;
    re::Optional<re::AssetPath>::~Optional(v35);
    v17[0] = &unk_26E6CBD38;
    if (v29)
    {
      if (v33) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      uint64_t v33 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      ++v32;
    }
    if (v24)
    {
      if (v28) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      ++v27;
    }
    if (v19)
    {
      if (v23) {
        (*(void (**)(void))(*(void *)v19 + 40))();
      }
      uint64_t v23 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      ++v22;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v18);
    re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)v17);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  }
  return v6;
}

void re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(re **)(a1 + 272);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
  uint64_t v9 = (*(uint64_t (**)(void *))(*a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(void *)v9 + 56))(&v27);
  re::TypeRegistry::typeInfo(v8, &v27, v33);
  if (v33[0])
  {
    if (!*(unsigned char *)(a1 + 64)) {
      (*(void (**)(uint64_t, const char *, uint64_t, void *, unsigned char *, unsigned char *, void))(*(void *)a1 + 72))(a1, "component", 1, a2, v34, v34, 0);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v23 = re::Encoder<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::SeekableInputStream>::close((_anonymous_namespace_ *)(a1 + 24));
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v24 = *re::assetTypesLogObjects(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = re::TypeInfo::name((re::TypeInfo *)v34)[1];
        LOBYTE(v27) = *(unsigned char *)(a1 + 64);
        if ((_BYTE)v27)
        {
          long long v28 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
          uint64_t v26 = (v30 & 1) != 0 ? v32 : v31;
        }
        else
        {
          uint64_t v26 = v31;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v26;
        _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type \"%s\". Message: %s", buf, 0x16u);
        if ((_BYTE)v27)
        {
          if (v29 && (v30 & 1) != 0) {
            (*(void (**)(void))(*(void *)v29 + 40))();
          }
        }
      }
      LOBYTE(v27) = *(unsigned char *)(a1 + 64);
      if ((_BYTE)v27)
      {
        long long v28 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)long long buf = v28;
      re::DynamicString::DynamicString((re::DynamicString *)&buf[16], (const re::DynamicString *)&v29);
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(void *)(a4 + 24) = *(void *)&buf[16];
      *(void *)(a4 + 48) = v38;
      *(_OWORD *)(a4 + 32) = v37;
      uint64_t v38 = 0;
      *(void *)&uint8_t buf[16] = 0;
      long long v37 = 0uLL;
      if ((_BYTE)v27)
      {
        uint64_t v21 = v29;
        if (v29)
        {
          if (v30)
          {
            int v22 = v32;
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      re::ecs2::Component::markDirty(a2);
      *(unsigned char *)a4 = 1;
    }
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void *))(*a2 + 40))(a2);
    uint64_t v13 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
    PrettyTypeName = (re *)re::getPrettyTypeName(v13, (const re::IntrospectionBase *)&v27);
    char v15 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (v28) {
        uint64_t v16 = (char *)*((void *)&v28 + 1);
      }
      else {
        uint64_t v16 = (char *)&v28 + 1;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if (v28) {
      long long v17 = (char *)*((void *)&v28 + 1);
    }
    else {
      long long v17 = (char *)&v28 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"Deserialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v17);
    long long v18 = *(_OWORD *)buf;
    uint64_t v19 = *(void *)&buf[16];
    uint64_t v20 = v37;
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 400;
    *(void *)(a4 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v18;
    *(void *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v19;
    *(void *)(a4 + 48) = v20;
    uint64_t v21 = v27;
    if (v27 && (v28 & 1) != 0)
    {
      int v22 = (unsigned char *)*((void *)&v28 + 1);
LABEL_34:
      (*(void (**)(re *, unsigned char *))(*(void *)v21 + 40))(v21, v22);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
}

void re::ecs2::ECSJSONDeserializer::~ECSJSONDeserializer(re::ecs2::ECSJSONDeserializer *this)
{
  *(void *)this = &unk_26E6D43F8;
  *((void *)this + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 520);
  *(void *)this = &unk_26E6CBD38;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 472);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 432);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6D43F8;
  *((void *)this + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 520);
  *(void *)this = &unk_26E6CBD38;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 472);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 432);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

BOOL re::ecs2::ECSSerialization::loadFromStream(re *a1, AssetService *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v60);
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::TypeInfo::TypeInfo((uint64_t)v59, (uint64_t)&v36);
  re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer((re::ecs2::ECSJSONDeserializer *)&v35, a2);
  uint64_t v34 = 0;
  memset(v32, 0, sizeof(v32));
  int v33 = 0;
  if (!v38) {
    (*((void (**)(void **, const char *, uint64_t, void *, unsigned char *, unsigned char *, void))v35 + 9))(&v35, "object", 1, v32, v59, v59, 0);
  }
  (*((void (**)(void **))v35 + 7))(&v35);
  uint64_t v8 = re::Encoder<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::SeekableInputStream>::close((_anonymous_namespace_ *)&v37);
  int v9 = v38;
  if (v38)
  {
    uint64_t v10 = *re::assetTypesLogObjects(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)v59)[1];
      v72[0] = v38;
      if (v38)
      {
        *(_OWORD *)&v73[4] = v39;
        re::DynamicString::DynamicString((re::DynamicString *)&v74, (const re::DynamicString *)v40);
        uint64_t v12 = (v75 & 1) != 0 ? v77 : v76;
      }
      else
      {
        uint64_t v12 = v76;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)int v67 = v11;
      *(_WORD *)&v67[8] = 2080;
      *(void *)&v67[10] = v12;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type \"%s\". Message: %s", buf, 0x16u);
      if (v72[0])
      {
        if (v74 && (v75 & 1) != 0) {
          (*(void (**)(re *, unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)v74 + 40))(v74, v77, v13, v14, v15);
        }
      }
    }
    v72[0] = v38;
    if (v38)
    {
      *(_OWORD *)&v73[4] = v39;
      re::DynamicString::DynamicString((re::DynamicString *)&v74, (const re::DynamicString *)v40);
    }
    long long v61 = *(_OWORD *)&v73[4];
    uint64_t v16 = re::DynamicString::DynamicString((re::DynamicString *)&v62, (const re::DynamicString *)&v74);
    buf[0] = 0;
    *(_OWORD *)&uint64_t v67[4] = v61;
    uint64_t v20 = v64;
    id v70 = v64;
    uint64_t v71 = v65;
    char v21 = v63;
    uint64_t v68 = v62;
    uint64_t v69 = v63;
    CFDataRef v64 = 0;
    uint64_t v65 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    if (v72[0])
    {
      uint64_t v16 = v74;
      if (v74)
      {
        if (v75) {
          uint64_t v16 = (re *)(*(uint64_t (**)(re *, unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)v74 + 40))(v74, v77, v17, v18, v19);
        }
      }
    }
    int v22 = *re::assetTypesLogObjects(v16);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    uint64_t v26 = (char *)&v69 + 1;
    if (v21) {
      uint64_t v26 = v20;
    }
    *(_DWORD *)int v72 = 136315138;
    *(void *)uint64_t v73 = v26;
    _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "Failed to load scene from stream. Message: %s", v72, 0xCu);
    if (!buf[0])
    {
LABEL_28:
      if (v68 && (v69 & 1) != 0) {
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v68 + 40))(v68, v70, v23, v24, v25);
      }
    }
  }
  else
  {
    re::ecs2::ECSSerialization::loadFromAssetData(a1, a2, (uint64_t)v32);
  }
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)v32);
  char v35 = &unk_26E6D43F8;
  unint64_t v57 = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional(v58);
  char v35 = &unk_26E6CBD38;
  if (v52)
  {
    if (v56) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v52 + 40))(v52, v56, v27, v28, v29, v30);
    }
    uint64_t v56 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    ++v55;
  }
  if (v47)
  {
    if (v51) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v47 + 40))(v47, v51, v27, v28, v29, v30);
    }
    uint64_t v51 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v47 = 0;
    ++v50;
  }
  if (v42)
  {
    if (v46) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v42 + 40))(v42, v46, v27, v28, v29, v30);
    }
    uint64_t v46 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    ++v45;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v41);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v35);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v60);
  return v9 == 0;
}

uint64_t anonymous namespace'::generateEntityIDLookupTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a1;
  if (*(unsigned char *)a3)
  {
    uint64_t v5 = *(void *)(a3 + 8) + 1;
    *(void *)(a3 + 8) = v5;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 296);
  }
  uint64_t v11 = v5;
  uint64_t result = re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<unsigned long long &>(a2, &v12, &v11);
  uint64_t v7 = *(void *)(v12 + 328);
  if (v7)
  {
    uint64_t v8 = *(uint64_t **)(v12 + 344);
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8++;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void anonymous namespace'::convertToEntityAssetData(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(*(void *)(a3 + 8) + 24);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = "";
  *(unsigned char *)(a5 + 24) = 1;
  *(void *)(a5 + 32) = 0;
  uint64_t v11 = (_anonymous_namespace_ *)(a5 + 32);
  *(_DWORD *)(a5 + 56) = 0;
  *(void *)(a5 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104) = 0;
  *(_OWORD *)(a5 + re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64) = 0u;
  *(_OWORD *)(a5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(a5 + 96) = 0;
  LODWORD(v12) = 0x7FFFFFFF;
  if (*(void *)v10)
  {
    unint64_t v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
    uint64_t v14 = *(unsigned int *)(*(void *)(v10 + 8) + 4 * ((v13 ^ (v13 >> 31)) % *(unsigned int *)(v10 + 24)));
    if (v14 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(v10 + 16);
      if (*(void *)(v15 + 32 * v14 + 16) == a1)
      {
        LODWORD(v12) = v14;
      }
      else
      {
        uint64_t v12 = v14;
        while (1)
        {
          uint64_t v12 = *(_DWORD *)(v15 + 32 * v12 + 8) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v15 + 32 * v12 + 16) == a1) {
            goto LABEL_10;
          }
        }
        LODWORD(v12) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  *(void *)a5 = *(void *)(*(void *)(v10 + 16) + 32 * v12 + 24);
  re::StringID::operator=((unint64_t *)(a5 + 8), (uint64_t *)(a1 + 272));
  *(unsigned char *)(a5 + 24) = (*(unsigned char *)(a1 + 288) & 8) != 0;
  unint64_t v16 = *(void *)(a1 + 56);
  *(void *)(a5 + 32) = a2;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)(a5 + 32), 0);
  ++*(_DWORD *)(a5 + 56);
  uint64_t v32 = a5;
  if (*(void *)(a5 + 40) < v16) {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)(a5 + 32), v16);
  }
  uint64_t v17 = *(void *)(a1 + 56);
  if (v17)
  {
    uint64_t v18 = *(char ***)(a1 + 72);
    uint64_t v19 = 8 * v17;
    do
    {
      uint64_t v20 = *v18;
      uint64_t v21 = (*(uint64_t (**)(char *))(*(void *)*v18 + 40))(*v18);
      if ((*(unsigned char *)(v21 + 40) & 1) == 0)
      {
        int v22 = (void *)v21;
        unint64_t v23 = *(void *)((*(uint64_t (**)(char *))(*(void *)v20 + 40))(v20) + 24) >> 1;
        uint64_t v24 = (uint64_t (*)(char *))v22[1];
        if (v24)
        {
          uint64_t v25 = v24(v20);
          v33.n128_u64[0] = v23;
          v33.n128_u64[1] = v25;
          LOBYTE(v34) = 1;
          re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v11, &v33);
        }
        else
        {
          (*(void (**)(const re::IntrospectionBase ***__return_ptr, void *))(*v22 + 32))(&v35, v22);
          uint64_t v26 = (*(uint64_t (**)(char *))(*(void *)v20 + 40))(v20);
          uint64_t v27 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26);
          __n128 v33 = (__n128)a2;
          uint64_t v34 = a3;
          uint64_t v28 = v35;
          char v35 = 0;
          v33.n128_u64[0] = v23;
          v33.n128_u64[1] = (unint64_t)v28;
          LOBYTE(v34) = 1;
          re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v11, &v33);
          if (v35) {
        }
          }
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  unint64_t v29 = *(void *)(a1 + 328);
  if (*(void *)(v32 + 80) < v29)
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((void *)(v32 + 72), v29);
    unint64_t v29 = *(void *)(a1 + 328);
  }
  if (v29)
  {
    uint64_t v30 = *(void **)(a1 + 344);
    uint64_t v31 = 8 * v29;
    do
    {
      if (!a4 || (*(unsigned char *)(a1 + 289) & 0x10) == 0)
      {
        re::DynamicArray<re::ecs2::EntityAssetData>::add(v32 + 72, (uint64_t)&v33);
        re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v33);
      }
      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
}

uint64_t re::DynamicArray<re::ecs2::EntityAssetData>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::growCapacity((void *)a1, v4 + 1);
    unint64_t v4 = *(void *)(a1 + 16);
  }
  uint64_t result = re::ecs2::EntityAssetData::EntityAssetData(*(void *)(a1 + 32) + 112 * v4, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::ecs2::ECSSerialization::saveEntityHierarchyIntoSceneAssetData(re *a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || (*((unsigned char *)a1 + 289) & 0x10) == 0)
  {
    uint64_t v6 = re::globalAllocators(a1);
    unint64_t v7 = v6[2];
    uint64_t v8 = re::globalAllocators((re *)v6)[2];
    if (a3)
    {
      uint64_t v23 = 0;
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
    }
    v22[0] = v9;
    int v20 = 0;
    memset(v19, 0, sizeof(v19));
    uint64_t v21 = 0x7FFFFFFFLL;
    re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v19, v8, 3);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v10 = a1;
    uint64_t v18 = 0;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = (re *)*((void *)v10 + 3);
    }
    while (v10);
    uint64_t v12 = *((void *)v11 + 2);
    v15[0] = 0;
    v15[1] = 0;
    _OWORD v15[2] = v12;
    void v15[3] = v19;
    uint64_t v17 = v15;
    re::DynamicArray<re::ecs2::EntityAssetData>::add(a2, (uint64_t)v14);
    re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v14);
    return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v19);
  }
  return result;
}

unsigned char *anonymous namespace'::convertFromEntityAssetData(re::ecs2::EntityFactory *a1, uint64_t a2, AssetService *a3, _anonymous_namespace_ *a4, uint64_t *a5)
{
  uint64_t v35 = *(void *)a2;
  unint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = re::ecs2::EntityFactory::instance(a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v11, v10, (re::ecs2::Entity **)a1);
  uint64_t v12 = *(unint64_t **)a1;
  re::StringID::operator=(v12 + 34, (uint64_t *)(a2 + 8));
  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v12, *(unsigned __int8 *)(a2 + 24));
  uint64_t v13 = (uint64_t)re::DirectAssetDeserialize::DirectAssetDeserialize((re::DirectAssetDeserialize *)&v38, a3, 0);
  v37[1] = 0;
  void v37[2] = 0;
  v37[0] = &v38;
  uint64_t v14 = *(void *)(a2 + 48);
  if (v14)
  {
    uint64_t v15 = 24 * v14;
    uint64_t v16 = (char **)(*(void *)(a2 + 64) + 8);
    do
    {
      uint64_t v17 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v13);
      uint64_t v18 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v17, (uint64_t)*(v16 - 1));
      if (v18)
      {
        uint64_t v19 = (uint64_t (*)(char *, const re::ecs2::ComponentTypeBase *))*((void *)v18 + 1);
        if (v19)
        {
          uint64_t v20 = v19(*v16, v18);
          uint64_t v21 = v20;
          uint64_t v36 = v20;
          if (v20) {
            id v22 = (id)(v20 + 8);
          }
          re::ecs2::EntityComponentCollection::add((uint64_t)(v12 + 4), &v36, 1);
          if (v36)
          {

            uint64_t v36 = 0;
          }
          if (v21) {
        }
          }
        else
        {
          uint64_t v24 = (re *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v12 + 4), v18);
          uint64_t v25 = re::globalAllocators(v24)[2];
          uint64_t v26 = (*(uint64_t (**)(re *))(*(void *)v24 + 40))(v24);
          uint64_t v27 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26);
          uint64_t v28 = *v16;
          *(void *)long long buf = v25;
          uint64_t v41 = 0;
          uint64_t v42 = v37;
        }
      }
      else
      {
        uint64_t v23 = *re::assetTypesLogObjects(0);
        uint64_t v13 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Unknown component type hash", buf, 2u);
        }
      }
      v16 += 3;
      v15 -= 24;
    }
    while (v15);
  }
  unint64_t v29 = (re::ecs2::MeshSortingComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v29) {
    re::internal::MeshSortGroupFixupTable::fixupMeshSortGroup(a5, v29);
  }
  re::internal::EntityHandleHookupTable::registerEntity(a4, (StringID *)v12, v35, 0);
  uint64_t v30 = *(void *)(a2 + 88);
  if (v30)
  {
    uint64_t v31 = *(void *)(a2 + 104);
    uint64_t v32 = 112 * v30;
    do
    {
      __n128 v33 = *(re::ecs2::Entity **)buf;
      re::ecs2::Entity::setParentInternal(*(re::ecs2::Entity **)buf, (re::ecs2::Entity *)v12, 0xFFFFFFFFFFFFFFFFLL);
      if (v33) {

      }
      v31 += 112;
      v32 -= 112;
    }
    while (v32);
  }
  uint8_t v38 = &unk_26E6CA658;
  return re::Optional<re::AssetPath>::~Optional(v39);
}

re *re::internal::destroyPersistent<re::internal::EntityHandleHookupTable>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v1 + 11);
    v3.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 5);
    uint64_t v4 = *(void *)v1;
    if (*(void *)v1)
    {
      uint64_t v5 = *((void *)v1 + 4);
      if (v5)
      {
        uint64_t v6 = *((void *)v1 + 2);
        if (v6)
        {
          uint64_t v7 = 48 * v6;
          uint64_t v8 = (uint64_t *)(v5 + 8);
          do
          {
            uint64_t v8 = std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::~unique_ptr[abi:nn180100](v8)
               + 6;
            v7 -= 48;
          }
          while (v7);
          uint64_t v4 = *(void *)v1;
          uint64_t v5 = *((void *)v1 + 4);
        }
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 40))(v4, v5, v3);
      }
      *((void *)v1 + 4) = 0;
      *((void *)v1 + 1) = 0;
      *((void *)v1 + 2) = 0;
      *(void *)uint64_t v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    char v9 = *(uint64_t (**)(uint64_t, re *, __n128))(*(void *)v2 + 40);
    return (re *)v9(v2, v1, v3);
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::open(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 272);
  if (*(_DWORD *)(v8 + 24) != *(_DWORD *)(a1 + 280))
  {
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
    a1 = re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(v7, v8);
  }
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  if (!a3)
  {
  }
  *(void *)(v7 + 48) = a3;
  if (!a4)
  {
  }
  *(void *)(v7 + 56) = a4;
  v15[0] = 0;
  re::Optional<re::DetailedError>::operator=(v7 + 64, v15);
  if (v15[0] && *(void *)&v17[1] && (v17[3] & 1) != 0) {
    (*(void (**)(void))(**(void **)&v17[1] + 40))();
  }
  *(void *)(v7 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(v7 + 48);
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((void *)(v7 + 120), 0x40uLL);
  ++*(_DWORD *)(v7 + 144);
  v15[0] = 0;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)(v7 + 120), (uint64_t)v15);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  *(void *)(v7 + 2re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(void *)(v7 + 56);
  re::DynamicArray<char>::setCapacity((void *)(v7 + 216), 0);
  ++*(_DWORD *)(v7 + 240);
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 48) + 32))(*(void *)(v7 + 48), 64, 8);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(void *)(v10 + 48) = 512;
  *(_DWORD *)(v10 + 56) = 324;
  *(unsigned char *)(v10 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v7 + 192) = v10;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 48) + 32))(*(void *)(v7 + 48), 48, 8);
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = 0u;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 256;
  *(void *)(v7 + re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184) = v11;
  uint64_t v12 = *(void *)(v7 + 192);
  *(void *)uint64_t v12 = v11;
  *(unsigned char *)(v12 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v12 + 32) = *(void *)(v12 + 24);
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 48);
  return v13(v7);
}

uint64_t re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>@<X0>(char *a1@<X2>, uint64_t a2@<X0>, void *a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)v9, a1, a4, -1);
  re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>(a2, a3, (uint64_t)v9, a5);
  return re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v9);
}

_anonymous_namespace_ *re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  double result = re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v11 = *re::assetTypesLogObjects(result);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      char v13 = *(unsigned char *)(a1 + 64);
      if (v13)
      {
        long long v15 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
        uint64_t v12 = (v17 & 1) != 0 ? *(unsigned char **)&v18[7] : v18;
      }
      else
      {
        uint64_t v12 = v18;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
      if (v13)
      {
        if (v16 && (v17 & 1) != 0) {
          (*(void (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
    char v14 = *(unsigned char *)(a1 + 64);
    if (v14)
    {
      long long v15 = *(_OWORD *)(a1 + 72);
      re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
    }
    *(_OWORD *)long long buf = v15;
    double result = re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v16);
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
    *(void *)(a5 + 24) = v20;
    *(void *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 32) = v21;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    long long v21 = 0uLL;
    if (v14)
    {
      double result = v16;
      if (v16)
      {
        if (v17) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
  }
  return result;
}

void re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 64))
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
    uint64_t v6 = *(re::TypeRegistry **)(a1 + 272);
    v38[0] = (rapidjson::internal *)0xD481AB84CBDDALL;
    v38[1] = (rapidjson::internal *)"Component*";
    re::TypeRegistry::typeInfo(v6, (const re::StringID *)v38, v39);
    re::StringID::destroyString((re::StringID *)v38);
    if (v39[0])
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v40);
      if (v12)
      {
        char v13 = (void (*)(uint64_t, const char *, unint64_t, unint64_t *, unsigned char *, unsigned char *, void))v12;
        if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, "entity", 1, 0))
        {
          v38[0] = *(rapidjson::internal **)(a2 + 296);
          re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, "id", 1, v38, 0);
          uint64_t v14 = *(void *)(a2 + 280);
          if (v14) {
            size_t v15 = strlen(*(const char **)(a2 + 280));
          }
          else {
            size_t v15 = 0;
          }
          size_t v37 = v15;
          if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, "name", 2, (uint64_t *)&v37, 0))
          {
            if (v37) {
              re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, v14, 0);
            }
            re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
          }
          BOOL v36 = (*(unsigned char *)(a2 + 288) & 8) != 0;
          re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isSelfActive", 10, (unsigned __int8 *)&v36, 0);
          if ((a3 & 2) != 0)
          {
            int v23 = *(_DWORD *)(a2 + 288);
            LOBYTE(v3ArcSharedObject::ArcSharedObject(this, 0) = (v23 & 2) != 0;
            LOBYTE(v29) = (v23 & 0x20) != 0;
            BOOL v35 = (v23 & 4) != 0;
            unsigned __int8 v34 = BYTE1(v23) & 1;
            BOOL v33 = (v23 & 0x40) != 0;
            BOOL v32 = (v23 & 0x80) != 0;
            unsigned __int8 v31 = v23 & 1;
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isEnabledInHierarchy", 20, (unsigned __int8 *)&v30, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isSelfAnchored", 21, (unsigned __int8 *)&v29, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isAnchoredInHierarchy", 22, (unsigned __int8 *)&v35, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "selfRequiresAnchoring", 23, &v34, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isGhosted", 24, (unsigned __int8 *)&v33, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isSceneEntity", 25, (unsigned __int8 *)&v32, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isActive", 26, &v31, 0);
          }
          unint64_t v30 = *(void *)(a2 + 56);
          if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, "components", 40, (uint64_t *)&v30, 0))
          {
            if (v30)
            {
              unint64_t v24 = 0;
              while (!*(unsigned char *)(a1 + 64))
              {
                unint64_t v29 = 0;
                unint64_t v29 = *(void *)re::ecs2::EntityComponentCollection::operator[](a2 + 32, v24);
                v13(a1, "component", v24++, &v29, v40, v40, 0);
                if (v30 <= v24) {
                  goto LABEL_22;
                }
              }
              goto LABEL_31;
            }
LABEL_22:
            re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
          }
          if (a3)
          {
            unint64_t v29 = *(void *)(a2 + 328);
            if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, "children", 50, (uint64_t *)&v29, 0))
            {
              if (v29)
              {
                unint64_t v25 = 0;
                uint64_t v26 = a2 + 304;
                while (!*(unsigned char *)(a1 + 64))
                {
                  uint64_t v27 = (void *)re::ecs2::EntityComponentCollection::operator[](v26, v25);
                  re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(a1, *v27, a3);
                  if (++v25 >= v29) {
                    goto LABEL_29;
                  }
                }
                goto LABEL_31;
              }
LABEL_29:
              re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
            }
          }
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
        }
LABEL_31:
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
        return;
      }
      char v17 = re::TypeInfo::name((re::TypeInfo *)v40);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v18, v19, v20, v21, v22, v17[1]);
      long long v16 = "Failed to get serialization function for type \"Component*\".";
    }
    else
    {
      long long v16 = "Type \"Component*\" not found in type registry.";
    }
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, "entity", v16, v7, v8, v9, v10, v11, v28);
    goto LABEL_31;
  }
}

void re::ecs2::serializeComponent<re::ecs2::ECSOPACKSerializer>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(re **)(a1 + 208);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(void *)v9 + 56))(&v25);
  re::TypeRegistry::typeInfo(v8, &v25, v31);
  if (v31[0])
  {
    if (!*(unsigned char *)(a1 + 64)) {
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))(*(void *)a1 + 72))(a1, "component", 1, a2, v32, v32, 0);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v22 = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
    if (*(unsigned char *)(a1 + 64))
    {
      int v23 = *re::assetTypesLogObjects(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v25) = *(unsigned char *)(a1 + 64);
        if ((_BYTE)v25)
        {
          long long v26 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
          unint64_t v24 = (v28 & 1) != 0 ? v30 : v29;
        }
        else
        {
          unint64_t v24 = v29;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
        if ((_BYTE)v25)
        {
          if (v27 && (v28 & 1) != 0) {
            (*(void (**)(void))(*(void *)v27 + 40))();
          }
        }
      }
      LOBYTE(v25) = *(unsigned char *)(a1 + 64);
      if ((_BYTE)v25)
      {
        long long v26 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)long long buf = v26;
      re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v27);
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(void *)(a4 + 24) = v35;
      *(void *)(a4 + 48) = v37;
      *(_OWORD *)(a4 + 32) = v36;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      long long v36 = 0uLL;
      if ((_BYTE)v25)
      {
        uint64_t v20 = v27;
        if (v27)
        {
          if (v28)
          {
            uint64_t v21 = v30;
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      *(unsigned char *)a4 = 1;
    }
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    uint64_t v12 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
    PrettyTypeName = (re *)re::getPrettyTypeName(v12, (const re::IntrospectionBase *)&v25);
    uint64_t v14 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (v26) {
        size_t v15 = (char *)*((void *)&v26 + 1);
      }
      else {
        size_t v15 = (char *)&v26 + 1;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Serialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if (v26) {
      long long v16 = (char *)*((void *)&v26 + 1);
    }
    else {
      long long v16 = (char *)&v26 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"Serialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v16);
    long long v17 = *(_OWORD *)buf;
    uint64_t v18 = v35;
    uint64_t v19 = v36;
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 400;
    *(void *)(a4 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v17;
    *(void *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v18;
    *(void *)(a4 + 48) = v19;
    uint64_t v20 = v25;
    if (v25 && (v26 & 1) != 0)
    {
      uint64_t v21 = (unsigned char *)*((void *)&v26 + 1);
LABEL_34:
      (*(void (**)(re *, unsigned char *))(*(void *)v20 + 40))(v20, v21);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
}

uint64_t re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>@<X0>(char *a1@<X2>, uint64_t a2@<X0>, void *a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)v9, a1, a4, -1);
  re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>(a2, a3, (uint64_t)v9, a5);
  return re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v9);
}

void re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(re **)(a1 + 208);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
  uint64_t v9 = (*(uint64_t (**)(void *))(*a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(void *)v9 + 56))(&v27);
  re::TypeRegistry::typeInfo(v8, &v27, v33);
  if (v33[0])
  {
    if (!*(unsigned char *)(a1 + 64)) {
      (*(void (**)(uint64_t, const char *, uint64_t, void *, unsigned char *, unsigned char *, void))(*(void *)a1 + 72))(a1, "component", 1, a2, v34, v34, 0);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v23 = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::close((_anonymous_namespace_ *)(a1 + 24));
    if (*(unsigned char *)(a1 + 64))
    {
      unint64_t v24 = *re::assetTypesLogObjects(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = re::TypeInfo::name((re::TypeInfo *)v34)[1];
        LOBYTE(v27) = *(unsigned char *)(a1 + 64);
        if ((_BYTE)v27)
        {
          long long v28 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
          long long v26 = (v30 & 1) != 0 ? v32 : v31;
        }
        else
        {
          long long v26 = v31;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v26;
        _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type \"%s\". Message: %s", buf, 0x16u);
        if ((_BYTE)v27)
        {
          if (v29 && (v30 & 1) != 0) {
            (*(void (**)(void))(*(void *)v29 + 40))();
          }
        }
      }
      LOBYTE(v27) = *(unsigned char *)(a1 + 64);
      if ((_BYTE)v27)
      {
        long long v28 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)long long buf = v28;
      re::DynamicString::DynamicString((re::DynamicString *)&buf[16], (const re::DynamicString *)&v29);
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(void *)(a4 + 24) = *(void *)&buf[16];
      *(void *)(a4 + 48) = v38;
      *(_OWORD *)(a4 + 32) = v37;
      uint64_t v38 = 0;
      *(void *)&uint8_t buf[16] = 0;
      long long v37 = 0uLL;
      if ((_BYTE)v27)
      {
        uint64_t v21 = v29;
        if (v29)
        {
          if (v30)
          {
            uint64_t v22 = v32;
            goto LABEL_34;
          }
        }
      }
    }
    else
    {
      re::ecs2::Component::markDirty(a2);
      *(unsigned char *)a4 = 1;
    }
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void *))(*a2 + 40))(a2);
    char v13 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
    PrettyTypeName = (re *)re::getPrettyTypeName(v13, (const re::IntrospectionBase *)&v27);
    size_t v15 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (v28) {
        long long v16 = (char *)*((void *)&v28 + 1);
      }
      else {
        long long v16 = (char *)&v28 + 1;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if (v28) {
      long long v17 = (char *)*((void *)&v28 + 1);
    }
    else {
      long long v17 = (char *)&v28 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"Deserialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v17);
    long long v18 = *(_OWORD *)buf;
    uint64_t v19 = *(void *)&buf[16];
    uint64_t v20 = v37;
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 400;
    *(void *)(a4 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v18;
    *(void *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v19;
    *(void *)(a4 + 48) = v20;
    uint64_t v21 = v27;
    if (v27 && (v28 & 1) != 0)
    {
      uint64_t v22 = (unsigned char *)*((void *)&v28 + 1);
LABEL_34:
      (*(void (**)(re *, unsigned char *))(*(void *)v21 + 40))(v21, v22);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
}

_anonymous_namespace_ *re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  double result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v11 = *re::assetTypesLogObjects(result);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      char v13 = *(unsigned char *)(a1 + 64);
      if (v13)
      {
        long long v15 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
        uint64_t v12 = (v17 & 1) != 0 ? *(unsigned char **)&v18[7] : v18;
      }
      else
      {
        uint64_t v12 = v18;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
      if (v13)
      {
        if (v16 && (v17 & 1) != 0) {
          (*(void (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
    char v14 = *(unsigned char *)(a1 + 64);
    if (v14)
    {
      long long v15 = *(_OWORD *)(a1 + 72);
      re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
    }
    *(_OWORD *)long long buf = v15;
    double result = re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v16);
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
    *(void *)(a5 + 24) = v20;
    *(void *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 32) = v21;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    long long v21 = 0uLL;
    if (v14)
    {
      double result = v16;
      if (v16)
      {
        if (v17) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a5 = 1;
  }
  return result;
}

void re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 64))
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
    uint64_t v6 = *(re::TypeRegistry **)(a1 + 208);
    v38[0] = 0xD481AB84CBDDALL;
    v38[1] = (uint64_t)"Component*";
    re::TypeRegistry::typeInfo(v6, (const re::StringID *)v38, v39);
    re::StringID::destroyString((re::StringID *)v38);
    if (v39[0])
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v40);
      if (v12)
      {
        char v13 = (void (*)(uint64_t, const char *, unint64_t, unint64_t *, unsigned char *, unsigned char *, void))v12;
        if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, "entity", 1, 0))
        {
          v38[0] = *(void *)(a2 + 296);
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, "id", 1, v38, 0);
          char v14 = *(char **)(a2 + 280);
          if (v14) {
            size_t v15 = strlen(*(const char **)(a2 + 280));
          }
          else {
            size_t v15 = 0;
          }
          size_t v37 = v15;
          if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, "name", 2, &v37, 0))
          {
            if (v37) {
              re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, v14, 0);
            }
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
          }
          BOOL v36 = (*(unsigned char *)(a2 + 288) & 8) != 0;
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isSelfActive", 10, &v36, 0);
          if ((a3 & 2) != 0)
          {
            int v23 = *(_DWORD *)(a2 + 288);
            LOBYTE(v3ArcSharedObject::ArcSharedObject(this, 0) = (v23 & 2) != 0;
            LOBYTE(v29) = (v23 & 0x20) != 0;
            BOOL v35 = (v23 & 4) != 0;
            char v34 = BYTE1(v23) & 1;
            BOOL v33 = (v23 & 0x40) != 0;
            BOOL v32 = (v23 & 0x80) != 0;
            char v31 = v23 & 1;
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isEnabledInHierarchy", 20, &v30, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isSelfAnchored", 21, &v29, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isAnchoredInHierarchy", 22, &v35, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "selfRequiresAnchoring", 23, &v34, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isGhosted", 24, &v33, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isSceneEntity", 25, &v32, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isActive", 26, &v31, 0);
          }
          unint64_t v30 = *(void *)(a2 + 56);
          if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, "components", 40, &v30, 0))
          {
            if (v30)
            {
              unint64_t v24 = 0;
              while (!*(unsigned char *)(a1 + 64))
              {
                unint64_t v29 = 0;
                unint64_t v29 = *(void *)re::ecs2::EntityComponentCollection::operator[](a2 + 32, v24);
                v13(a1, "component", v24++, &v29, v40, v40, 0);
                if (v30 <= v24) {
                  goto LABEL_22;
                }
              }
              goto LABEL_31;
            }
LABEL_22:
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
          }
          if (a3)
          {
            unint64_t v29 = *(void *)(a2 + 328);
            if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, "children", 50, &v29, 0))
            {
              if (v29)
              {
                unint64_t v25 = 0;
                uint64_t v26 = a2 + 304;
                while (!*(unsigned char *)(a1 + 64))
                {
                  uint64_t v27 = (void *)re::ecs2::EntityComponentCollection::operator[](v26, v25);
                  re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(a1, *v27, a3);
                  if (++v25 >= v29) {
                    goto LABEL_29;
                  }
                }
                goto LABEL_31;
              }
LABEL_29:
              re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
            }
          }
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
        }
LABEL_31:
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
        return;
      }
      char v17 = re::TypeInfo::name((re::TypeInfo *)v40);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v18, v19, v20, v21, v22, v17[1]);
      long long v16 = "Failed to get serialization function for type \"Component*\".";
    }
    else
    {
      long long v16 = "Type \"Component*\" not found in type registry.";
    }
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, "entity", v16, v7, v8, v9, v10, v11, v28);
    goto LABEL_31;
  }
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E6D4508;
  uint64_t v2 = a1 + 216;
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  re::DynamicArray<unsigned long>::deinit(v2);
  re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::~Encoder((unsigned char *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E6D44A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  return re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
}

void re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E6D44A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 59));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 54));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 43);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  __n128 v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = a1 + 288;
        uint64_t v7 = (uint64_t *)(v14 + 24);
        uint64_t v8 = 48 * v13;
        do
        {
          uint64_t v9 = *v7;
          v7 += 6;
          long long v16 = re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          unint64_t v15 = v9 | 0xFFFFFFFF00000000;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v6, &v15, &v16);
          v8 -= 48;
        }
        while (v8);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v21, v22, v23, v24, v25, v20[1]);
    return 0;
  }
  return result;
}

uint64_t (*re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this))(unsigned char *a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 == 94623636)
  {
    uint64_t v6 = (char *)v4[1];
    uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString;
    if (v6 == "char*") {
      return (uint64_t (*)(unsigned char *, const char *, const re::TypeInfo *, unsigned __int8 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v7;
    }
    int v8 = strcmp(v6, "char*");
    uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString;
    if (!v8) {
      return (uint64_t (*)(unsigned char *, const char *, const re::TypeInfo *, unsigned __int8 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v7;
    }
  }
  if (*((unsigned char *)this + 12) != 9) {
    goto LABEL_9;
  }
  unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
  uint64_t v7 = re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
  if (v9 >= 2)
  {
    if (v9 != 2)
    {
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
      uint64_t result = (uint64_t (*)(unsigned char *, const char *, const re::TypeInfo *, unsigned __int8 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))_os_crash();
      __break(1u);
      return result;
    }
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
    _os_crash();
    __break(1u);
LABEL_9:
    if (*(void *)this == *(void *)(a1 + 272))
    {
      LODWORD(v12) = **((void **)this + 2);
      HIDWORD(v12) = -1;
      uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, &v12);
      uint64_t v7 = re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (v10) {
        return *(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, unsigned __int8 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v10;
      }
    }
    else
    {
      return re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    }
  }
  return (uint64_t (*)(unsigned char *, const char *, const re::TypeInfo *, unsigned __int8 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v7;
}

void re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(void *a1)
{
  if (a1[34])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
    a1[34] = 0;
  }
}

void re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(unsigned char *a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)a2 == *(void *)(a1 + 272)
    && (LODWORD(v4) = **(void **)(a2 + 16),
        HIDWORD(v4) = -1,
        (uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, &v4)) != 0))
  {
    return *(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, unsigned __int8 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v3;
  }
  else
  {
    return re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  }
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_6, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v8;
  }
}

unsigned char *re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::~Encoder(unsigned char *a1)
{
  if (a1[40]) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 64));
  }
  return a1;
}

_anonymous_namespace_ *re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close(_anonymous_namespace_ *result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::doClose(result);
    if (!*((unsigned char *)v1 + 40)) {
      re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(v1, 0);
    }
    uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 96);
    if (*((int *)v1 + 4) >= 1)
    {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v1 + 24))();
      *((void *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *(void *)uint64_t v1 = 0;
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 4) = 0;
  }
  return result;
}

void *re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::doClose(void *result)
{
  if (result[21])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[20];
    if (result)
    {
      String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>::GetString(result);
      uint64_t v3 = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v1, String, *(void *)(v1[20] + 24) - *(void *)(v1[20] + 16));
      if ((v3 & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)&v8);
        if (v8)
        {
          if (v9) {
            (*(void (**)(void))(*(void *)v8 + 40))();
          }
        }
      }
      uint64_t v4 = v1[20];
      if (v4)
      {
        uint64_t v5 = v1[3];
        rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(v1[20]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v4);
      }
      v1[20] = 0;
      uint64_t v6 = v1[21];
      if (v6)
      {
        uint64_t v7 = v1[3];
        rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(v6 + 8);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v6);
      }
      v1[21] = 0;
      return (void *)re::DynamicArray<unsigned long>::deinit((uint64_t)(v1 + 24));
    }
  }
  return result;
}

uint64_t re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (this == (re::TypeInfo *)a6) {
    goto LABEL_19;
  }
  if (*(void *)this != *(void *)a6)
  {
    if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, a3)) {
      goto LABEL_19;
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      if (v19) {
        int v20 = *(_DWORD *)(v19 + 16);
      }
      else {
        int v20 = -1;
      }
      uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **(void **)(a6 + 16));
      if (v21) {
        int v22 = *(_DWORD *)(v21 + 16);
      }
      else {
        int v22 = -1;
      }
      if (v20 == v22) {
        goto LABEL_19;
      }
      uint64_t v24 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **(void **)(a6 + 16));
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.", v30, v31, v32, v33, v34, v24);
    }
    else
    {
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, this, (re::TypeInfo *)a6);
    }
    return 0;
  }
  uint64_t v15 = **((void **)this + 2);
  uint64_t v16 = **(void **)(a6 + 16);
  if ((unsigned __int16)v15 != (unsigned __int16)v16) {
    goto LABEL_10;
  }
  BOOL v18 = WORD1(v15) == WORD1(v16);
  uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
  BOOL v18 = v18 && v17 == 0;
  if (!v18) {
    goto LABEL_10;
  }
LABEL_19:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      uint64_t result = re::serializeBasic<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 2:
      uint64_t result = re::serializeEnum<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (re::TypeInfo *)a4, (uint64_t)this, a6, a7);
      break;
    case 3:
      uint64_t result = re::serializeOptional<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 4:
      uint64_t result = re::serializeArray<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a3, (char *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 5:
      uint64_t result = re::serializeList<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 6:
      uint64_t result = re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 7:
      uint64_t result = re::serializeUnion<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a3, (char *)a4, this, (re::TypeInfo *)a6, a7);
      break;
    case 8:
      uint64_t result = re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t **)this, a6, a7);
      break;
    case 9:
      uint64_t v35 = re::TypeInfo::name(this)[1];
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "Pointer type (\"%s\") needs to be handled explicitly by the serializer.", v25, v26, v27, v28, v29, v35);
      return 0;
    default:
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "Invalid type category. Value = %d", (uint64_t)a4, (uint64_t)this, a6, a7, a8, *((unsigned char *)this + 12));
      return 0;
  }
  return result;
}

BOOL re::serializeBasic<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_21:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, this, a6);
      return 0;
    }
    uint64_t v18 = **((void **)this + 2);
    uint64_t v19 = **((void **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19) {
      goto LABEL_21;
    }
    BOOL v21 = WORD1(v18) == WORD1(v19);
    uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    BOOL v21 = v21 && v20 == 0;
    if (!v21) {
      goto LABEL_21;
    }
  }
LABEL_4:
  uint64_t v14 = re::TypeInfo::name(this);
  unint64_t v15 = (unint64_t)*v14 >> 1;
  if (v15 > 0xCA3DEFB5)
  {
    if ((unint64_t)*v14 >> 1 > 0x18E6A9A092)
    {
      if ((unint64_t)*v14 >> 1 <= 0x303EE8780EDLL)
      {
        if (v15 == 0x18E6A9A093)
        {
          return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(a1 + 24, a2, (uint64_t)a3, a4, a7);
        }
        else
        {
          if (v15 != 0x303EE86A734) {
            goto LABEL_72;
          }
          return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(a1 + 24, a2, (uint64_t)a3, (unsigned __int16 *)a4, a7);
        }
      }
      if (v15 == 0x303EE8780EELL)
      {
        return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, a2, (uint64_t)a3, (unsigned int *)a4, a7);
      }
      if (v15 != 0x303EE88E58DLL) {
        goto LABEL_72;
      }
    }
    else
    {
      if ((unint64_t)*v14 >> 1 > 0x16749DFF02)
      {
        if (v15 == 0x16749DFF03)
        {
LABEL_54:
          return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, (uint64_t)a3, (unsigned int *)a4, a7);
        }
        uint64_t v22 = 0x16749F63A2;
LABEL_40:
        if (v15 == v22)
        {
          return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(a1 + 24, a2, (uint64_t)a3, (unint64_t *)a4, a7);
        }
LABEL_72:
        uint64_t v23 = re::TypeInfo::name(this);
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Unsupported basic type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
        return 0;
      }
      if (v15 != 3393056694)
      {
        uint64_t v17 = 0x16749D2549;
LABEL_26:
        if (v15 != v17) {
          goto LABEL_72;
        }
        return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(a1 + 24, a2, (uint64_t)a3, (__int16 *)a4, a7);
      }
    }
    return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, a2, (uint64_t)a3, (rapidjson::internal **)a4, a7);
  }
  if ((unint64_t)*v14 >> 1 > 0x5D0225B)
  {
    if ((unint64_t)*v14 >> 1 > 0xB0F77BD0)
    {
      if (v15 == 2969009105)
      {
        return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, (uint64_t)a3, (double *)a4, a7);
      }
      else
      {
        if (v15 != 3111160798) {
          goto LABEL_72;
        }
        return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(a1 + 24, a2, (uint64_t)a3, (char *)a4, a7);
      }
    }
    if (v15 == 97526364)
    {
      return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, (uint64_t)a3, (float *)a4, a7);
    }
    uint64_t v17 = 109413500;
    goto LABEL_26;
  }
  if ((unint64_t)*v14 >> 1 <= 0x2E9355)
  {
    if (v15 != 104431)
    {
      if (v15 == 3029738)
      {
        return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, a2, (uint64_t)a3, a4, a7);
      }
      goto LABEL_72;
    }
    goto LABEL_54;
  }
  if (v15 != 3052374)
  {
    uint64_t v22 = 3327612;
    goto LABEL_40;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(a1 + 24, a2, (uint64_t)a3, (uint64_t)a4, a7);
}

BOOL re::serializeOptional<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_11;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_11;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    v24[0] = 0;
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, (uint64_t)a3, v24, 0);
    if (v24[0])
    {
      uint64_t v18 = *(re::internal **)(a1 + 272);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)&v27);
      re::internal::translateType(v18, (const re::TypeRegistry *)v25, (uint64_t)v26);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, 0, v26, v26, 1);
      }
    }
    uint64_t v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)&v27);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)&v27);
    re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)a5);
    BOOL v23 = (*(uint64_t (**)(uint64_t))(v28 + 80))(a4) != 0;
    double v20 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, (uint64_t)a3, &v23, 0);
    if (v23)
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, double))(v28 + 80))(a4, v20);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))(*(void *)a1 + 72))(a1, a2, 0, v21, v25, v24, 0);
      }
    }
    uint64_t v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderBinary<re::SeekableInputStream>::endOptional(v19);
  return *(unsigned char *)(a1 + 64) == 0;
}

BOOL re::serializeArray<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned char *)a6 + 12) != 4) {
    goto LABEL_56;
  }
  uint64_t v18 = (void *)*((void *)a5 + 2);
  uint64_t v19 = (void *)*((void *)a6 + 2);
  int v20 = *((_DWORD *)v19 + 21) & 0xFFFFFF;
  if ((*((_DWORD *)v18 + 21) & 0xFFFFFF) != 0)
  {
    if (v20) {
      goto LABEL_13;
    }
LABEL_56:
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (v20 || *((_DWORD *)v18 + 22) != *((_DWORD *)v19 + 22)) {
    goto LABEL_56;
  }
LABEL_13:
  if (a7)
  {
    uint64_t v21 = (re::internal *)*((void *)a1 + 34);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
    re::internal::translateType(v21, (const re::TypeRegistry *)v53, (uint64_t)v54);
    uint64_t v22 = (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v54);
    if (v22)
    {
      BOOL v23 = (void (*)(unsigned char *, void, void, void, unsigned char *, unsigned char *, uint64_t))v22;
      uint64_t v24 = (void *)*((void *)a6 + 2);
      int v25 = *((_DWORD *)v24 + 21) & 0xFFFFFF;
      if (v25)
      {
        unint64_t v26 = 0;
        int v27 = 8;
      }
      else
      {
        unint64_t v26 = *((int *)v24 + 22);
        int v27 = 4;
      }
      unint64_t v55 = v26;
      BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 24), a2, (uint64_t)a3, (uint64_t *)&v55, v27);
      if (result)
      {
        unint64_t v46 = v55;
        if (v25) {
          BOOL v47 = v55 == 0;
        }
        else {
          BOOL v47 = 1;
        }
        char v48 = v47;
        if (!v47)
        {
          v52[0] = 0;
          v52[1] = 0xFFFFFFFFLL;
          (*(void (**)(unsigned char *, void, void *))(*(void *)a1 + 16))(a1, 0, v52);
          unint64_t v46 = v55;
        }
        if (v46)
        {
          unint64_t v49 = 0;
          do
          {
            v23(a1, 0, 0, 0, v54, v54, 1);
            ++v49;
          }
          while (v49 < v55);
        }
        if ((v48 & 1) == 0) {
          (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
        }
        uint64_t v39 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_53:
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(v39);
        return a1[64] == 0;
      }
      return result;
    }
    goto LABEL_36;
  }
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v54, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)a5);
  uint64_t v28 = (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v54);
  if (!v28)
  {
LABEL_36:
    uint64_t v40 = re::TypeInfo::name((re::TypeInfo *)v54);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v41, v42, v43, v44, v45, v40[1]);
    return 0;
  }
  uint64_t v29 = (void (*)(unsigned char *, void, void, uint64_t, unsigned char *, unsigned char *, void))v28;
  unint64_t v51 = re::ArrayAccessor::size((re::ArrayAccessor *)&v55, a4);
  int v30 = *(_DWORD *)(*((void *)a5 + 2) + 84) & 0xFFFFFF;
  if (v30) {
    int v31 = 8;
  }
  else {
    int v31 = 4;
  }
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 24), a2, (uint64_t)a3, (uint64_t *)&v51, v31);
  if (result)
  {
    unint64_t v33 = v51;
    if (v30) {
      BOOL v34 = v51 == 0;
    }
    else {
      BOOL v34 = 1;
    }
    char v35 = v34;
    if (!v34)
    {
      uint64_t v36 = *(void *)a4;
      v50[0] = 0;
      v50[1] = 0xFFFFFFFFLL;
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)a1 + 16))(a1, v36, v50);
      unint64_t v33 = v51;
    }
    if (v33)
    {
      unint64_t v37 = 0;
      do
      {
        uint64_t v38 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v55, a4, v37);
        v29(a1, 0, 0, v38, v54, v53, 0);
        ++v37;
      }
      while (v37 < v51);
    }
    if ((v35 & 1) == 0) {
      (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
    }
    uint64_t v39 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_53;
  }
  return result;
}

BOOL re::serializeList<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_11;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_11;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (!a7)
  {
    re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v50);
    re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)&v51);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v51);
    re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)a5);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v49);
    if (v25)
    {
      unint64_t v26 = (void (*)(uint64_t, void, void, uint64_t, unsigned char *, unsigned char *, void))v25;
      unint64_t v47 = (*(uint64_t (**)(uint64_t))(v52 + 80))(a4);
      uint64_t v21 = (_anonymous_namespace_ *)(a1 + 24);
      BOOL v27 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v47, 0);
      BOOL result = 0;
      if (!v27) {
        return result;
      }
      if (*(void *)(v52 + 96))
      {
        if (v47)
        {
          for (unint64_t i = 0; i < v47; ++i)
          {
            uint64_t v29 = (*(uint64_t (**)(uint64_t, unint64_t))(v52 + 96))(a4, i);
            v26(a1, 0, 0, v29, v49, v48, 0);
          }
        }
        goto LABEL_24;
      }
      char v35 = *(uint64_t (**)(uint64_t, void))(v52 + 104);
      if (v35 && *(void *)(v52 + 112) && *(void *)(v52 + 120))
      {
        uint64_t v36 = v35(a4, *(void *)(a1 + 56));
        uint64_t v37 = (*(uint64_t (**)(void))(v52 + 112))();
        if (v37)
        {
          uint64_t v38 = v37;
          do
          {
            v26(a1, 0, 0, v38, v49, v48, 0);
            uint64_t v38 = (*(uint64_t (**)(uint64_t))(v52 + 112))(v36);
          }
          while (v38);
        }
        (*(void (**)(uint64_t, void))(v52 + 120))(v36, *(void *)(a1 + 56));
        goto LABEL_24;
      }
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v50);
      uint64_t v45 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "List type \"%s\" does not provide an indexer or iterator.", v39, v40, v41, v42, v43, v45);
      return 0;
    }
    goto LABEL_25;
  }
  uint64_t v18 = *(re::internal **)(a1 + 272);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v51);
  re::internal::translateType(v18, (const re::TypeRegistry *)v48, (uint64_t)v49);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v49);
  if (!v19)
  {
LABEL_25:
    uint64_t v44 = re::TypeInfo::name((re::TypeInfo *)v49)[1];
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v30, v31, v32, v33, v34, v44);
    return 0;
  }
  int v20 = (void (*)(uint64_t, void, void, void, unsigned char *, unsigned char *, uint64_t))v19;
  unint64_t v50 = 0;
  uint64_t v21 = (_anonymous_namespace_ *)(a1 + 24);
  BOOL v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v50, 0);
  BOOL result = 0;
  if (v22)
  {
    if (v50)
    {
      for (unint64_t j = 0; j < v50; ++j)
        v20(a1, 0, 0, 0, v49, v49, 1);
    }
LABEL_24:
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(v21);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v102);
  re::TypeInfo::TypeInfo((uint64_t)&v84, (uint64_t)&v102.n128_i64[1]);
  uint64_t v15 = re::TypeInfo::name((re::TypeInfo *)&v84);
  int v16 = BYTE4(v85);
  if (BYTE4(v85) != 1)
  {
LABEL_10:
    if (v16 == 8)
    {
      unint64_t v21 = (unint64_t)*v15 >> 1;
      if (v21 == 0x22C6ED80D0CLL)
      {
        unint64_t v26 = (char *)v15[1];
        uint64_t v19 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v26 == "StringID") {
          return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, re *, const re::TypeInfo *, uint64_t))v19)(a1, a2, a3, a4, a5, a6, a7);
        }
        int v27 = strcmp(v26, "StringID");
        uint64_t v19 = re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (!v27) {
          return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, re *, const re::TypeInfo *, uint64_t))v19)(a1, a2, a3, a4, a5, a6, a7);
        }
      }
      else if (v21 == 0x134375A94D9F7110)
      {
        BOOL v22 = (char *)v15[1];
        uint64_t v19 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v22 == "DynamicString") {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
        }
        int v23 = strcmp(v22, "DynamicString");
        uint64_t v19 = re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (!v23) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
        }
      }
    }
LABEL_22:
    if (a5 != a6)
    {
      if (*(void *)a5 == *(void *)a6)
      {
        uint64_t v28 = **((void **)a5 + 2);
        uint64_t v29 = **((void **)a6 + 2);
        if ((unsigned __int16)v28 == (unsigned __int16)v29)
        {
          BOOL v31 = WORD1(v28) == WORD1(v29);
          uint64_t v30 = (v29 ^ v28) & 0xFFFFFF00000000;
          BOOL v31 = v31 && v30 == 0;
          if (v31) {
            goto LABEL_32;
          }
        }
      }
      else if (re::areSameTranslatedVersion(a5, a6, v14))
      {
        goto LABEL_32;
      }
      if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
      {
        re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
        return 0;
      }
    }
LABEL_32:
    if (a7)
    {
      uint64_t v32 = *(re::internal **)(a1 + 272);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v102);
      re::TypeInfo::TypeInfo((uint64_t)v97, (uint64_t)&v102.n128_i64[1]);
      re::internal::translateType(v32, (const re::TypeRegistry *)v97, (uint64_t)&v84);
      uint64_t v33 = *(re::internal **)(a1 + 272);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v102);
      re::TypeInfo::TypeInfo((uint64_t)v95, (uint64_t)&v102.n128_i64[1]);
      re::internal::translateType(v33, (const re::TypeRegistry *)v95, (uint64_t)v97);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v84);
      if (v34)
      {
        char v35 = (void (*)(uint64_t, const char *, void, void, uint64_t *, uint64_t *, uint64_t, double))v34;
        uint64_t v36 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v97);
        if (v36)
        {
          uint64_t v37 = (void (*)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))v36;
          v102.n128_u64[0] = 0;
          uint64_t v38 = (_anonymous_namespace_ *)(a1 + 24);
          BOOL v39 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, a3, (uint64_t *)&v102, 0);
          uint64_t result = 0;
          if (!v39) {
            return result;
          }
          if (v102.n128_u64[0])
          {
            unint64_t v41 = 0;
            do
            {
              double v42 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 1);
              v35(a1, "key", 0, 0, &v84, &v84, 1, v42);
              v37(a1, "value", 0, 0, v97, v97, 1);
              re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
              ++v41;
            }
            while (v41 < v102.n128_u64[0]);
          }
          goto LABEL_84;
        }
        uint64_t v63 = (re::TypeInfo *)v97;
      }
      else
      {
        uint64_t v63 = (re::TypeInfo *)&v84;
      }
    }
    else
    {
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v102);
      re::TypeInfo::TypeInfo((uint64_t)v95, (uint64_t)&v102.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v102);
      re::TypeInfo::TypeInfo((uint64_t)v94, (uint64_t)&v102.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v102);
      re::TypeInfo::TypeInfo((uint64_t)v93, (uint64_t)&v102.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v102);
      re::TypeInfo::TypeInfo((uint64_t)v92, (uint64_t)&v102.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)v90, (uint64_t)a5);
      uint64_t v43 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 80))(a1, v95);
      if (v43)
      {
        uint64_t v44 = (void (*)(uint64_t, const char *, void, uint64_t, void *, unsigned char *, void, double))v43;
        uint64_t v45 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v94);
        if (v45)
        {
          unint64_t v46 = (void (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v45;
          unint64_t v89 = (*(uint64_t (**)(uint64_t))(v91 + 88))(a4);
          uint64_t v38 = (_anonymous_namespace_ *)(a1 + 24);
          BOOL v47 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, a3, (uint64_t *)&v89, 0);
          uint64_t result = 0;
          if (!v47) {
            return result;
          }
          if (v89)
          {
            uint64_t v48 = *(void *)a5;
            v102.n128_u64[0] = 0x449AD97C4B77BED4;
            v102.n128_u64[1] = (unint64_t)"_CompareFunc";
            unint64_t v49 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v48 + 200, &v102);
            if (v49)
            {
              unint64_t v50 = *v49;
              re::StringID::destroyString((re::StringID *)&v102);
              if (v48)
              {
                unint64_t v51 = *(void *)v95[2];
                v102.n128_u64[0] = v50;
                v102.n128_u64[1] = v51;
                LODWORD(v103) = -1;
                uint64_t v52 = (uint64_t (**)(unint64_t, unint64_t))re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v95[0] + 768, (uint64_t *)&v102);
                if (v52)
                {
                  uint64_t v53 = *v52;
                  if (*v52)
                  {
                    uint64_t v88 = 0;
                    uint64_t v85 = 0;
                    unint64_t v86 = 0;
                    int v87 = 0;
                    uint64_t v84 = *(void *)(a1 + 56);
                    re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v84, v89);
                    ++v87;
                    uint64_t v54 = (*(uint64_t (**)(uint64_t, void))(v91 + 112))(a4, *(void *)(a1 + 56));
                    if ((*(unsigned int (**)(void))(v91 + 120))())
                    {
                      do
                      {
                        uint64_t v55 = (*(uint64_t (**)(uint64_t))(v91 + 128))(v54);
                        uint64_t v56 = (*(uint64_t (**)(uint64_t))(v91 + 136))(v54);
                        v102.n128_u64[0] = v55;
                        v102.n128_u64[1] = v56;
                        __n128 v57 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v84, &v102);
                      }
                      while (((*(uint64_t (**)(uint64_t, __n128))(v91 + 120))(v54, v57) & 1) != 0);
                    }
                    v58.n128_f64[0] = (*(double (**)(uint64_t, void))(v91 + 144))(v54, *(void *)(a1 + 56));
                    std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(v88, (char *)&v88[2 * v86], v53, v58);
                    if (v89)
                    {
                      uint64_t v59 = 0;
                      for (unint64_t i = 0; i < v89; ++i)
                      {
                        double v61 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 0);
                        if (v86 <= i)
                        {
                          uint64_t v96 = 0;
                          long long v105 = 0u;
                          long long v106 = 0u;
                          long long v103 = 0u;
                          long long v104 = 0u;
                          __n128 v102 = 0u;
                          unint64_t v82 = v86;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)int v97 = 136315906;
                          *(void *)&void v97[4] = "operator[]";
                          *(_WORD *)&v97[12] = 1024;
                          *(_DWORD *)&v97[14] = 789;
                          __int16 v98 = 2048;
                          unint64_t v99 = i;
                          __int16 v100 = 2048;
                          unint64_t v101 = v82;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_86:
                          uint64_t v96 = 0;
                          long long v105 = 0u;
                          long long v106 = 0u;
                          long long v103 = 0u;
                          long long v104 = 0u;
                          __n128 v102 = 0u;
                          unint64_t v83 = v62;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)int v97 = 136315906;
                          *(void *)&void v97[4] = "operator[]";
                          *(_WORD *)&v97[12] = 1024;
                          *(_DWORD *)&v97[14] = 789;
                          __int16 v98 = 2048;
                          unint64_t v99 = i;
                          __int16 v100 = 2048;
                          unint64_t v101 = v83;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                        }
                        v44(a1, "key", 0, v88[v59], v95, v93, 0, v61);
                        unint64_t v62 = v86;
                        if (v86 <= i) {
                          goto LABEL_86;
                        }
                        v46(a1, "value", 0, v88[v59 + 1], v94, v92, 0);
                        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
                        v59 += 2;
                      }
                    }
                    if (v84 && v88) {
                      (*(void (**)(void))(*(void *)v84 + 40))();
                    }
                    goto LABEL_84;
                  }
                }
              }
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v102);
            }
            uint64_t v77 = (*(uint64_t (**)(uint64_t, void))(v91 + 112))(a4, *(void *)(a1 + 56));
            (*(void (**)(void))(v91 + 120))();
            if (v89)
            {
              for (unint64_t j = 0; j < v89; ++j)
              {
                double v79 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 0);
                uint64_t v80 = (*(uint64_t (**)(uint64_t, double))(v91 + 128))(v77, v79);
                ((void (*)(uint64_t, const char *, void, uint64_t, void *, unsigned char *, void))v44)(a1, "key", 0, v80, v95, v93, 0);
                uint64_t v81 = (*(uint64_t (**)(uint64_t))(v91 + 136))(v77);
                v46(a1, "value", 0, v81, v94, v92, 0);
                re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
                (*(void (**)(uint64_t))(v91 + 120))(v77);
              }
            }
            (*(void (**)(uint64_t, void))(v91 + 144))(v77, *(void *)(a1 + 56));
          }
LABEL_84:
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(v38);
          return *(unsigned char *)(a1 + 64) == 0;
        }
        uint64_t v63 = (re::TypeInfo *)v94;
      }
      else
      {
        uint64_t v63 = (re::TypeInfo *)v95;
      }
    }
    CFDataRef v64 = re::TypeInfo::name(v63);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v65, v66, v67, v68, v69, v64[1]);
    return 0;
  }
  if (!re::TypeInfo::isInteger((re::TypeInfo *)&v84))
  {
    int v16 = BYTE4(v85);
    goto LABEL_10;
  }
  unint64_t v17 = (unint64_t)*v15 >> 1;
  if (v17 > 0x303EE8780EDLL)
  {
    if (v17 == 0x303EE8780EELL)
    {
      uint64_t v71 = (char *)v15[1];
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
      if (v71 == "uint32_t") {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      int v72 = strcmp(v71, "uint32_t");
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>;
      if (!v72) {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      goto LABEL_71;
    }
    if (v17 != 0x303EE88E58DLL)
    {
LABEL_71:
      v102.n128_u64[0] = 0x18E6A9A093;
      v102.n128_u64[1] = (unint64_t)"uint8_t";
      BOOL v73 = re::StringID::operator==(v15, &v102);
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>;
      if (v73) {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      v102.n128_u64[0] = 0x16749F63A2;
      v102.n128_u64[1] = (unint64_t)"int64_t";
      if (re::StringID::operator==(v15, &v102)) {
        return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, re *, const re::TypeInfo *, uint64_t))re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>)(a1, a2, a3, a4, a5, a6, a7);
      }
      *(void *)int v97 = 3327612;
      *(void *)&v97[8] = "long";
      BOOL v74 = re::StringID::operator==(v15, v97);
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>;
      if (v74) {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      v102.n128_u64[0] = 104431;
      v102.n128_u64[1] = (unint64_t)"int";
      BOOL v75 = re::StringID::operator==(v15, &v102);
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>;
      if (v75) {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      v102.n128_u64[0] = 109413500;
      v102.n128_u64[1] = (unint64_t)"short";
      BOOL v76 = re::StringID::operator==(v15, &v102);
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>;
      if (v76) {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      goto LABEL_22;
    }
    uint64_t v24 = (char *)v15[1];
    uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
    if (v24 != "uint64_t")
    {
      uint64_t v25 = "uint64_t";
      goto LABEL_67;
    }
  }
  else
  {
    if (v17 != 3393056694)
    {
      if (v17 == 0x303EE86A734)
      {
        uint64_t v18 = (char *)v15[1];
        uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
        if (v18 == "uint16_t") {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
        }
        int v20 = strcmp(v18, "uint16_t");
        uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>;
        if (!v20) {
          return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
        }
      }
      goto LABEL_71;
    }
    uint64_t v24 = (char *)v15[1];
    uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
    if (v24 != "size_t")
    {
      uint64_t v25 = "size_t";
LABEL_67:
      int v70 = strcmp(v24, v25);
      uint64_t v19 = re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>;
      if (!v70) {
        return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
      }
      goto LABEL_71;
    }
  }
  return ((uint64_t (*)(void, void, void, void, void, void, void))v19)(a1, a2, a3, a4, a5, a6, a7);
}

BOOL re::serializeUnion<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
LABEL_19:
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3)) {
    goto LABEL_19;
  }
LABEL_4:
  BOOL result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 24), a2, (uint64_t)a3, 16);
  if (a7)
  {
    if (!result) {
      return result;
    }
    v19[0] = 0;
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 24), "tag", 0, (rapidjson::internal **)v19, 0);
    if (v19[0] < *(unsigned int *)(*((void *)a6 + 2) + 88))
    {
      re::TypeInfo::unionMember(a6, v19[0], (uint64_t)v21);
      if (!a1[64]) {
        (*(void (**)(unsigned char *, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, v21, v21, 1);
      }
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    re::TypeInfo::TypeInfo((uint64_t)v21, (uint64_t)a5);
    unint64_t Tag = re::UnionAccessor::readTag((re::UnionAccessor *)v21, a4);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 24), "tag", 0, (rapidjson::internal **)&Tag, 0);
    if (Tag < *(unsigned int *)(*((void *)a5 + 2) + 88))
    {
      re::TypeInfo::unionMember(a5, Tag, (uint64_t)v19);
      if (!a1[64]) {
        (*(void (**)(unsigned char *, const char *, void, char *, unint64_t *, unint64_t *, void))(*(void *)a1 + 72))(a1, "value", 0, a4, v19, v19, 0);
      }
    }
  }
  re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return a1[64] == 0;
}

uint64_t re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t **this, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    if (*((unsigned char *)this[2] + 49))
    {
      BOOL v22 = *(re::TypeRegistry **)(a1 + 272);
      v36[0] = 0x2686EB529B3EE220;
      v36[1] = "DynamicString";
      re::TypeRegistry::typeInfo(v22, (const re::StringID *)v36, &v37);
      re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v38);
      re::StringID::destroyString((re::StringID *)v36);
      int v23 = (re *)v39;
      uint64_t v24 = (const re::TypeInfo *)v39;
      uint64_t v25 = a1;
      unint64_t v26 = a2;
      int v27 = (const re::TypeInfo *)a3;
    }
    else
    {
      uint64_t v14 = re::TypeInfo::name((re::TypeInfo *)this);
      if ((unint64_t)*v14 >> 1 != 0x134375A94D9F7110) {
        goto LABEL_6;
      }
      uint64_t v15 = (const char *)v14[1];
      if (v15 != "DynamicString")
      {
        if (strcmp(v15, "DynamicString")) {
          goto LABEL_6;
        }
      }
      uint64_t v25 = a1;
      unint64_t v26 = a2;
      int v27 = (const re::TypeInfo *)a3;
      int v23 = (re *)this;
      uint64_t v24 = (const re::TypeInfo *)this;
    }
    re::serializeDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v25, v26, v27, 0, v23, v24, 1);
    return *(unsigned char *)(a1 + 64) == 0;
  }
LABEL_6:
  if ((this[2][6] & 4) == 0)
  {
    BOOL v16 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, a3, 0);
    uint64_t result = 0;
    if (!v16) {
      return result;
    }
    uint64_t v18 = re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*this + 12), *this[2]);
    if (!v18 || *(_DWORD *)(v18 + 16) >= 2u)
    {
      uint64_t v20 = re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)(*this + 12), *this[2]);
      if (v20) {
        unsigned int v21 = *(_DWORD *)(v20 + 16);
      }
      else {
        unsigned int v21 = -1;
      }
      unsigned int v37 = v21;
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, "@version", 0, &v37, 0);
    }
    if (this == (uint64_t **)a6) {
      goto LABEL_23;
    }
    if (*this == *(uint64_t **)a6)
    {
      uint64_t v28 = *this[2];
      uint64_t v29 = **(void **)(a6 + 16);
      if ((unsigned __int16)v28 == (unsigned __int16)v29
        && WORD1(v28) == WORD1(v29)
        && ((v29 ^ v28) & 0xFFFFFF00000000) == 0)
      {
        goto LABEL_23;
      }
    }
    else if (re::areSameTranslatedVersion((re *)this, (const re::TypeInfo *)a6, v19))
    {
LABEL_23:
      re::internal::serializeMembersWithoutVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a4, (uint64_t *)this, a7);
LABEL_30:
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    }
    else
    {
      uint64_t v30 = re::TypeInfo::name((re::TypeInfo *)this)[1];
      re::TypeInfo::name((re::TypeInfo *)a6);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v31, v32, v33, v34, v35, v30);
    }
    goto LABEL_30;
  }
  return re::internal::serializeObjectWithOneMember<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((unsigned char *)a1, a2, a3, a4, (uint64_t *)this, (uint64_t *)a6, a7);
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(uint64_t a1, const char *a2, uint64_t a3, unsigned __int8 *a4, char a5)
{
  uint64_t v13 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v13);
    }
    char v9 = *(char **)(a1 + 168);
    int v10 = *a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteBool((uint64_t *)v9, v10);
    if ((a5 & 2) == 0)
    {
      uint64_t v11 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v11 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v12 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v12);
    }
    char v9 = *(char **)(a1 + 168);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v9, a4, 1u);
    if ((a5 & 2) == 0)
    {
      uint64_t v10 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v10 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(uint64_t a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    uint64_t v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(uint64_t a1, const char *a2, uint64_t a3, __int16 *a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    uint64_t v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(uint64_t a1, const char *a2, uint64_t a3, unsigned int *a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    uint64_t v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(uint64_t a1, const char *a2, uint64_t a3, unint64_t *a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    unint64_t v10 = *a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt64((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(uint64_t a1, const char *a2, uint64_t a3, unsigned __int8 *a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    unint64_t v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(uint64_t a1, const char *a2, uint64_t a3, unsigned __int16 *a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    unint64_t v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(uint64_t a1, const char *a2, uint64_t a3, rapidjson::internal **a4, char a5)
{
  uint64_t v14 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    }
    char v9 = *(char **)(a1 + 168);
    unint64_t v10 = *a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint64((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, const char *a2, uint64_t a3, float *a4, char a5)
{
  BOOL v16 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v16);
    }
    float v9 = *a4;
    unint64_t v10 = *(char **)(a1 + 168);
    if (fabsf(v9) != INFINITY)
    {
      double v14 = v9;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v10, v14);
      if ((a5 & 2) != 0) {
        return v5 == 0;
      }
      goto LABEL_8;
    }
    uint64_t v11 = "-Infinity";
    if (v9 > 0.0) {
      uint64_t v11 = "Infinity";
    }
    uint64_t v15 = v11;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v10, &v15);
    if ((a5 & 2) == 0)
    {
LABEL_8:
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, const char *a2, uint64_t a3, double *a4, char a5)
{
  uint64_t v15 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v15);
    }
    double v9 = *a4;
    unint64_t v10 = *(char **)(a1 + 168);
    if (fabs(v9) != INFINITY)
    {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v10, v9);
      if ((a5 & 2) != 0) {
        return v5 == 0;
      }
      goto LABEL_8;
    }
    uint64_t v11 = "-Infinity";
    if (v9 > 0.0) {
      uint64_t v11 = "Infinity";
    }
    double v14 = v11;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v10, &v14);
    if ((a5 & 2) == 0)
    {
LABEL_8:
      uint64_t v12 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v12 - 16);
    }
  }
  return v5 == 0;
}

double re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, const char *a2, uint64_t a3, unsigned char *a4, int a5)
{
  BOOL v16 = a2;
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v16);
    }
    if (*a4)
    {
      uint64_t v8 = 1;
    }
    else
    {
      double v9 = *(char **)(a1 + 168);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v9);
      uint64_t v8 = *a4;
    }
    LOBYTE(v11) = 3;
    DWORD1(v11) = a5 & 0xFFFFFFDF;
    *((void *)&v11 + 1) = v16;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = v8;
    return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v11);
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v43);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, unint64_t *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      uint64_t v48 = 0;
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      int v47 = 0;
      uint64_t v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      unint64_t v28 = 126 - 2 * __clz(v46);
      if (v46) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        uint64_t v30 = v48;
        uint64_t v31 = &v48[2 * v46];
        do
        {
          uint64_t v32 = *v30;
          uint64_t v33 = v30[1];
          v30 += 2;
          *(unsigned char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48) {
          (*(void (**)(void))(*(void *)v44 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v43);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, unsigned int *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      uint64_t v48 = 0;
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      int v47 = 0;
      uint64_t v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      unint64_t v28 = 126 - 2 * __clz(v46);
      if (v46) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        uint64_t v30 = v48;
        uint64_t v31 = &v48[2 * v46];
        do
        {
          uint64_t v32 = *v30;
          uint64_t v33 = v30[1];
          v30 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48) {
          (*(void (**)(void))(*(void *)v44 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v43);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, unsigned __int16 *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      uint64_t v48 = 0;
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      int v47 = 0;
      uint64_t v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      unint64_t v28 = 126 - 2 * __clz(v46);
      if (v46) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        uint64_t v30 = v48;
        uint64_t v31 = &v48[2 * v46];
        do
        {
          uint64_t v32 = *v30;
          uint64_t v33 = v30[1];
          v30 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48) {
          (*(void (**)(void))(*(void *)v44 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v43);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, unsigned __int8 *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      uint64_t v48 = 0;
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      int v47 = 0;
      uint64_t v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          __n128 v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      unint64_t v28 = 126 - 2 * __clz(v46);
      if (v46) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        uint64_t v30 = v48;
        uint64_t v31 = &v48[2 * v46];
        do
        {
          uint64_t v32 = *v30;
          uint64_t v33 = v30[1];
          v30 += 2;
          *(unsigned char *)std::__itoa::__base_10_u32[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48) {
          (*(void (**)(void))(*(void *)v44 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  v55[0] = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v49),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, uint64_t *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v22) {
      return result;
    }
    unint64_t v24 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
    if (v24)
    {
      uint64_t v53 = 0;
      uint64_t v50 = 0;
      unint64_t v51 = 0;
      int v52 = 0;
      uint64_t v49 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v24);
      ++v52;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v46 + 120))())
      {
        do
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v25);
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v25);
          v54[0].n128_u64[0] = v26;
          v54[0].n128_u64[1] = v27;
          __n128 v28 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, v54);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v25, v28) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v25, v18);
      unint64_t v29 = 126 - 2 * __clz(v51);
      if (v51) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)v54, v30, 1);
      if (v51)
      {
        uint64_t v31 = v53;
        uint64_t v32 = &v53[2 * v51];
        do
        {
          unint64_t v33 = **v31;
          if ((v33 & 0x8000000000000000) != 0)
          {
            v54[0].n128_u8[0] = 45;
            unint64_t v33 = -(uint64_t)v33;
            uint64_t v34 = (__n128 *)((char *)v54[0].n128_u64 + 1);
          }
          else
          {
            uint64_t v34 = v54;
          }
          uint64_t v35 = v31[1];
          if ((char *)v55 - (char *)v34 > 19
            || (unsigned int v36 = (1233 * (64 - __clz(v33 | 1))) >> 12,
                int64_t v37 = v36 - (std::__itoa::__pow10_64[v36] > v33) + 1,
                uint64_t v38 = v55,
                (char *)v55 - (char *)v34 >= v37))
          {
            uint64_t v38 = std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v34, v33);
          }
          *(unsigned char *)uint64_t v38 = 0;
          v20(a1, v54, 0, v35, v48, v47, 0);
          v31 += 2;
        }
        while (v31 != v32);
      }
      BOOL v21 = (_anonymous_namespace_ *)(a1 + 24);
      if (v49)
      {
        if (v53) {
          (*(void (**)(void))(*(void *)v49 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v21);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v39 = re::TypeInfo::name((re::TypeInfo *)v48);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v40, v41, v42, v43, v44, v39[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  v55[0] = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v49),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, int *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v22) {
      return result;
    }
    unint64_t v24 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
    if (v24)
    {
      uint64_t v53 = 0;
      uint64_t v50 = 0;
      unint64_t v51 = 0;
      int v52 = 0;
      uint64_t v49 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v24);
      ++v52;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v46 + 120))())
      {
        do
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v25);
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v25);
          v54[0].n128_u64[0] = v26;
          v54[0].n128_u64[1] = v27;
          __n128 v28 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, v54);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v25, v28) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v25, v18);
      unint64_t v29 = 126 - 2 * __clz(v51);
      if (v51) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)v54, v30, 1);
      if (v51)
      {
        uint64_t v31 = v53;
        uint64_t v32 = &v53[2 * v51];
        do
        {
          unsigned int v33 = **v31;
          if ((v33 & 0x80000000) != 0)
          {
            v54[0].n128_u8[0] = 45;
            unsigned int v33 = -v33;
            uint64_t v34 = (__n128 *)((char *)v54[0].n128_u64 + 1);
          }
          else
          {
            uint64_t v34 = v54;
          }
          uint64_t v35 = v31[1];
          if ((char *)v55 - (char *)v34 > 9
            || (unsigned int v36 = (1233 * (32 - __clz(v33 | 1))) >> 12,
                int64_t v37 = (((__PAIR64__(v36, v33) - std::__itoa::__pow10_32[v36]) >> 32) + 1),
                uint64_t v38 = v55,
                (char *)v55 - (char *)v34 >= v37))
          {
            uint64_t v38 = std::__itoa::__base_10_u32[abi:nn180100](v34, v33);
          }
          *(unsigned char *)uint64_t v38 = 0;
          v20(a1, v54, 0, v35, v48, v47, 0);
          v31 += 2;
        }
        while (v31 != v32);
      }
      BOOL v21 = (_anonymous_namespace_ *)(a1 + 24);
      if (v49)
      {
        if (v53) {
          (*(void (**)(void))(*(void *)v49 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v21);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v39 = re::TypeInfo::name((re::TypeInfo *)v48);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v40, v41, v42, v43, v44, v39[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  v55[0] = *MEMORY[0x263EF8340];
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v49),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7) {
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
  if (v19)
  {
    uint64_t v20 = (void (*)(uint64_t, __n128 *, void, __int16 *, unsigned char *, unsigned char *, void))v19;
    BOOL v21 = (_anonymous_namespace_ *)(a1 + 24);
    BOOL v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    BOOL result = 0;
    if (!v22) {
      return result;
    }
    unint64_t v24 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
    if (v24)
    {
      uint64_t v53 = 0;
      uint64_t v50 = 0;
      unint64_t v51 = 0;
      int v52 = 0;
      uint64_t v49 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v24);
      ++v52;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v46 + 120))())
      {
        do
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v25);
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v25);
          v54[0].n128_u64[0] = v26;
          v54[0].n128_u64[1] = v27;
          __n128 v28 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, v54);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v25, v28) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v25, v18);
      unint64_t v29 = 126 - 2 * __clz(v51);
      if (v51) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)v54, v30, 1);
      if (v51)
      {
        uint64_t v31 = v53;
        uint64_t v32 = &v53[2 * v51];
        do
        {
          unsigned int v33 = **v31;
          if ((v33 & 0x80000000) != 0)
          {
            v54[0].n128_u8[0] = 45;
            unsigned int v33 = -v33;
            uint64_t v34 = (__n128 *)((char *)v54[0].n128_u64 + 1);
          }
          else
          {
            uint64_t v34 = v54;
          }
          uint64_t v35 = v31[1];
          if ((char *)v55 - (char *)v34 > 9
            || (unsigned int v36 = (1233 * (32 - __clz(v33 | 1))) >> 12,
                int64_t v37 = (((__PAIR64__(v36, v33) - std::__itoa::__pow10_32[v36]) >> 32) + 1),
                uint64_t v38 = v55,
                (char *)v55 - (char *)v34 >= v37))
          {
            uint64_t v38 = std::__itoa::__base_10_u32[abi:nn180100](v34, v33);
          }
          *(unsigned char *)uint64_t v38 = 0;
          v20(a1, v54, 0, v35, v48, v47, 0);
          v31 += 2;
        }
        while (v31 != v32);
      }
      BOOL v21 = (_anonymous_namespace_ *)(a1 + 24);
      if (v49)
      {
        if (v53) {
          (*(void (**)(void))(*(void *)v49 + 40))();
        }
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v21);
    return *(unsigned char *)(a1 + 64) == 0;
  }
  uint64_t v39 = re::TypeInfo::name((re::TypeInfo *)v48);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v40, v41, v42, v43, v44, v39[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, re *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void **)a5;
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v15 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v17 = *v15;
    if ((unsigned __int16)v16 != (unsigned __int16)*v15) {
      goto LABEL_10;
    }
    BOOL v19 = WORD1(v16) == WORD1(v17);
    uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
    BOOL v19 = v19 && v18 == 0;
    if (!v19) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
      re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
      if (!v23)
      {
        uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v48);
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v39, v40, v41, v42, v43, v38[1]);
        return 0;
      }
      unint64_t v24 = (void (*)(uint64_t, uint64_t, void, uint64_t, unsigned char *, unsigned char *, void))v23;
      BOOL v25 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
      BOOL result = 0;
      if (!v25) {
        return result;
      }
      unint64_t v27 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
      if (v27)
      {
        uint64_t v53 = 0;
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        int v52 = 0;
        uint64_t v49 = v22;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v27);
        ++v52;
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v22);
        if ((*(unsigned int (**)(void))(v46 + 120))())
        {
          do
          {
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v28);
            uint64_t v30 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v28);
            v44.n128_u64[0] = v29;
            v44.n128_u64[1] = v30;
            __n128 v31 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, &v44);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v28, v31) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v28, v22);
        unint64_t v32 = 126 - 2 * __clz(v51);
        if (v51) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)&v44, v33, 1);
        if (v51)
        {
          uint64_t v34 = v53;
          uint64_t v35 = &v53[2 * v51];
          do
          {
            uint64_t v36 = *v34;
            if (*(unsigned char *)(*v34 + 8)) {
              uint64_t v37 = *(void *)(v36 + 16);
            }
            else {
              uint64_t v37 = v36 + 9;
            }
            v24(a1, v37, 0, v34[1], v48, v47, 0);
            v34 += 2;
          }
          while (v34 != v35);
        }
        if (v49)
        {
          if (v53) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
        }
      }
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(a5, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void **)a6;
  uint64_t v15 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v14, v15[9], &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  uint64_t v20 = re::TypeInfo::name((re::TypeInfo *)v48);
  if ((unint64_t)*v20 >> 1 == 0x22C6ED80D0CLL)
  {
    BOOL v21 = (char *)v20[1];
    if (v21 == "StringID" || !strcmp(v21, "StringID")) {
      goto LABEL_14;
    }
  }
  re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, re *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void **)a5;
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    uint64_t v15 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v17 = *v15;
    if ((unsigned __int16)v16 != (unsigned __int16)*v15) {
      goto LABEL_10;
    }
    BOOL v19 = WORD1(v16) == WORD1(v17);
    uint64_t v18 = (v17 ^ v16) & 0xFFFFFF00000000;
    BOOL v19 = v19 && v18 == 0;
    if (!v19) {
      goto LABEL_10;
    }
LABEL_14:
    if (!a7)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
      re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v48);
      if (!v23)
      {
        uint64_t v38 = re::TypeInfo::name((re::TypeInfo *)v48);
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v39, v40, v41, v42, v43, v38[1]);
        return 0;
      }
      unint64_t v24 = (void (*)(uint64_t, void, void, unint64_t, unsigned char *, unsigned char *, void))v23;
      BOOL v25 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
      BOOL result = 0;
      if (!v25) {
        return result;
      }
      unint64_t v27 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
      if (v27)
      {
        uint64_t v53 = 0;
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        int v52 = 0;
        uint64_t v49 = v22;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v27);
        ++v52;
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v22);
        if ((*(unsigned int (**)(void))(v46 + 120))())
        {
          do
          {
            uint64_t v29 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v28);
            uint64_t v30 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v28);
            v44.n128_u64[0] = v29;
            v44.n128_u64[1] = v30;
            __n128 v31 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, &v44);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v28, v31) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v28, v22);
        unint64_t v32 = 126 - 2 * __clz(v51);
        if (v51) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(v53, (char *)&v53[v51], (uint64_t)&v44, v33, 1);
        if (v51)
        {
          uint64_t v34 = v53;
          uint64_t v35 = &v53[v51];
          do
          {
            unint64_t v37 = v34->n128_u64[0];
            unint64_t v36 = v34->n128_u64[1];
            ++v34;
            v24(a1, *(void *)(v37 + 8), 0, v36, v48, v47, 0);
          }
          while (v34 != v35);
        }
        if (v49)
        {
          if (v53) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
        }
      }
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(unsigned char *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(a5, a6, a3)) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void **)a6;
  uint64_t v15 = (uint64_t *)*((void *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v14, v15[9], &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  uint64_t v20 = re::TypeInfo::name((re::TypeInfo *)v48);
  if ((unint64_t)*v20 >> 1 == 0x134375A94D9F7110)
  {
    BOOL v21 = (char *)v20[1];
    if (v21 == "DynamicString" || !strcmp(v21, "DynamicString")) {
      goto LABEL_14;
    }
  }
  re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
  return 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v16 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 44) & 0x20) != 0) {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v16);
    }
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(void *)(a1 + 168));
    uint64_t v9 = *a4;
    LOBYTE(v11) = 6;
    DWORD1(v11) = a5 & 0xFFFFFFDF;
    *((void *)&v11 + 1) = v16;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = v9;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v11);
  }
  return v5 == 0;
}

void std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(uint64_t *a1, char *a2, uint64_t (*a3)(unint64_t, unint64_t), __n128 a4)
{
  unint64_t v4 = 126 - 2 * __clz((a2 - (char *)a1) >> 4);
  uint64_t v6 = a3;
  if (a2 == (char *)a1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, a2, &v6, v5, 1, a4);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(unint64_t **a1, unint64_t **a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = (unint64_t *)v4[2];
        if (*v6 < *(void *)*v4)
        {
          uint64_t v7 = (unint64_t *)v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unint64_t v9 = **(void **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              unint64_t v10 = (unint64_t **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v10 = (unint64_t **)result;
LABEL_10:
          *unint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = *(void **)(result + 16);
      if (*v4 < **(void **)result)
      {
        uint64_t v5 = *(void *)(result + 24);
        uint64_t v6 = v3;
        do
        {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 16);
          uint64_t v7 = *(void **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(void *)uint64_t v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      uint64_t v2 = v3 + 16;
      BOOL result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(long long *a1, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3 = **a2;
  unint64_t v4 = **a3;
  if (v3 < **(void **)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(void **)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &>(unint64_t **a1, unint64_t **a2)
{
  long long v2 = *(_OWORD *)a1;
  unint64_t v3 = *a1;
  unint64_t v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    unint64_t v9 = *v3;
    do
    {
      unint64_t v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      long long v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unint64_t **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  unint64_t v4 = *a1;
  unint64_t v5 = **a1;
  do
  {
    unint64_t v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      unint64_t v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    long long v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)long long v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      unint64_t v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t a1, unint64_t **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (unint64_t **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((long long *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32));
      unint64_t v9 = (unint64_t **)(a1 + 48);
      if ((unint64_t **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      long long v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (unint64_t **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t **)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(long long *a1, unint64_t **a2, unint64_t **a3, _OWORD *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, a2, a3);
  if (**(void **)a4 < **a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(void **)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(long long *a1, unint64_t **a2, unint64_t **a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(void *)a5->n128_u64[0] < *(void *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(void *)a4->n128_u64[0] < **a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(void **)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,re::Pair<unsigned long long const*,void *,true>*>(unint64_t **a1, unint64_t **a2, unint64_t **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        uint64_t v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
          uint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)unint64_t v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = **v8;
      }
      else
      {
        unint64_t v10 = **v8;
        unint64_t v11 = *v8[2];
        BOOL v12 = v10 >= v11;
        if (v10 <= v11) {
          unint64_t v10 = *v8[2];
        }
        if (!v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      long long v13 = *a4;
      if (v10 >= **a4)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *(_OWORD *)long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v17 = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            unint64_t v17 = **v8;
            unint64_t v18 = *v8[2];
            BOOL v19 = v17 >= v18;
            if (v17 <= v18) {
              unint64_t v17 = *v8[2];
            }
            if (v19) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void **)(a2 - 16);
    if (**(void **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        unint64_t v10 = v7;
        uint64_t v7 = v6;
        *unint64_t v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(void **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = (unsigned int *)v4[2];
        if (*v6 < *(_DWORD *)*v4)
        {
          uint64_t v7 = (unsigned int *)v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unsigned int v9 = **(_DWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              unint64_t v10 = (unsigned int **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v10 = (unsigned int **)result;
LABEL_10:
          *unint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = *(_DWORD **)(result + 16);
      if (*v4 < **(_DWORD **)result)
      {
        uint64_t v5 = *(void *)(result + 24);
        uint64_t v6 = v3;
        do
        {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 16);
          uint64_t v7 = *(_DWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(void *)uint64_t v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      uint64_t v2 = v3 + 16;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(long long *a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int v3 = **a2;
  unsigned int v4 = **a3;
  if (v3 < **(_DWORD **)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(_DWORD **)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &>(unsigned int **a1, unsigned int **a2)
{
  long long v2 = *(_OWORD *)a1;
  unsigned int v3 = *a1;
  unsigned int v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    unsigned int v9 = *v3;
    do
    {
      unint64_t v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      unint64_t v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unsigned int **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  unsigned int v4 = *a1;
  unsigned int v5 = **a1;
  do
  {
    unsigned int v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      unint64_t v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      unsigned int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    unint64_t v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      unsigned int v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = (long long *)(a2 - 2);
      if (**(a2 - 2) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unsigned int v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (unsigned int **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((long long *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32));
      unsigned int v9 = (unsigned int **)(a1 + 48);
      if ((unsigned int **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      long long v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (unsigned int **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unsigned int **)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(long long *a1, unsigned int **a2, unsigned int **a3, _OWORD *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, a2, a3);
  if (**(_DWORD **)a4 < **a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(_DWORD **)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(long long *a1, unsigned int **a2, unsigned int **a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5->n128_u64[0] < *(_DWORD *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_DWORD *)a4->n128_u64[0] < **a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(_DWORD **)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,re::Pair<unsigned int const*,void *,true>*>(unsigned int **a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        unint64_t v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
          unint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)unsigned int v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unsigned int **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unsigned int v10 = **v8;
      }
      else
      {
        unsigned int v10 = **v8;
        unsigned int v11 = *v8[2];
        BOOL v12 = v10 >= v11;
        if (v10 <= v11) {
          unsigned int v10 = *v8[2];
        }
        if (!v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      long long v13 = *a4;
      if (v10 >= **a4)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *(_OWORD *)long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (unsigned int **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v17 = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            unsigned int v17 = **v8;
            unsigned int v18 = *v8[2];
            BOOL v19 = v17 >= v18;
            if (v17 <= v18) {
              unsigned int v17 = *v8[2];
            }
            if (v19) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(_DWORD **)(a2 - 16);
    if (**(_DWORD **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        unsigned int v10 = v7;
        uint64_t v7 = v6;
        *unsigned int v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(_DWORD **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(unsigned __int16 **a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, char a5)
{
unsigned __int16 **std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **result, unsigned __int16 **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = v4[2];
        if (*v6 < **v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unsigned int v9 = **(unsigned __int16 **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              unsigned int v10 = (unsigned __int16 **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unsigned int v10 = result;
LABEL_10:
          *unsigned int v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

unsigned __int16 **std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **result, unsigned __int16 **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = result[2];
      if (*v4 < **result)
      {
        char v5 = result[3];
        char v6 = v3;
        do
        {
          *(_OWORD *)char v6 = *((_OWORD *)v6 - 1);
          uint64_t v7 = *(v6 - 4);
          v6 -= 2;
        }
        while (*v4 < *v7);
        *char v6 = v4;
        v6[1] = v5;
      }
      uint64_t v2 = v3 + 2;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, _OWORD *a2, _OWORD *a3)
{
  unsigned int v3 = **(unsigned __int16 **)a2;
  unsigned int v4 = **(unsigned __int16 **)a3;
  if (v3 < **a1)
  {
    if (v4 < v3)
    {
      long long v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
      *a3 = v5;
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v8;
    if (**(unsigned __int16 **)a3 >= **(unsigned __int16 **)a2) {
      return 1;
    }
    long long v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (**(unsigned __int16 **)a2 >= **a1) {
      return 1;
    }
    long long v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unsigned __int16 **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  long long v2 = *(_OWORD *)a1;
  unsigned int v3 = *a1;
  unsigned int v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    unsigned int v9 = *v3;
    do
    {
      unsigned int v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      unsigned int v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unsigned __int16 **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  unsigned int v4 = *a1;
  unsigned int v5 = **a1;
  do
  {
    unsigned int v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      unsigned int v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      unsigned int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    unsigned int v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unsigned int v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      unsigned int v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(__n128 *a1, unsigned __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = a2 - 2;
      if (**(a2 - 2) < *(unsigned __int16 *)a1->n128_u64[0])
      {
        __n128 v7 = *a1;
        *a1 = *(__n128 *)v6;
        *(__n128 *)unsigned int v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, (__n128 *)a1[1].n128_u64, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, a1 + 1, a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, a1 + 1, a1 + 2, a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (unsigned __int16 **)&a1[2];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, (__n128 *)a1[1].n128_u64, (__n128 *)a1[2].n128_u64);
      unsigned int v9 = (unsigned __int16 **)&a1[3];
      if (&a1[3] == (__n128 *)a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      long long v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(__n128 *)((char *)a1 + v14 + 48) = *(__n128 *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int16 **)((char *)a1[1].n128_u64 + v14);
        v14 -= 16;
        if (*v12 >= v15)
        {
          n128_u64 = (unint64_t *)((char *)a1[3].n128_u64 + v14);
          goto LABEL_12;
        }
      }
      n128_u64 = a1->n128_u64;
LABEL_12:
      void *n128_u64 = v12;
      n128_u64[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a2, a3);
  if (*(unsigned __int16 *)a4->n128_u64[0] < *(unsigned __int16 *)a3->n128_u64[0])
  {
    __n128 result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(unsigned __int16 *)a3->n128_u64[0] < *(unsigned __int16 *)a2->n128_u64[0])
    {
      __n128 result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(unsigned __int16 *)a2->n128_u64[0] < **a1)
      {
        __n128 result = *(__n128 *)a1;
        *(__n128 *)a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(unsigned __int16 *)a5->n128_u64[0] < *(unsigned __int16 *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(unsigned __int16 *)a4->n128_u64[0] < *(unsigned __int16 *)a3->n128_u64[0])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(unsigned __int16 *)a3->n128_u64[0] < *(unsigned __int16 *)a2->n128_u64[0])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(unsigned __int16 *)a2->n128_u64[0] < **a1)
        {
          __n128 result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned __int16 **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, unsigned __int16 **a2, unsigned __int16 **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        unsigned int v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)unsigned int v18 = *(_OWORD *)v19;
          unsigned int v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)unsigned int v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unsigned __int16 **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unsigned int v10 = **v8;
      }
      else
      {
        unsigned int v10 = **v8;
        unsigned int v11 = *v8[2];
        BOOL v12 = v10 >= v11;
        if (v10 <= v11) {
          unsigned int v10 = *v8[2];
        }
        if (!v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      long long v13 = *a4;
      if (v10 >= **a4)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (unsigned __int16 **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v17 = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            unsigned int v17 = **v8;
            unsigned int v18 = *v8[2];
            BOOL v19 = v17 >= v18;
            if (v17 <= v18) {
              unsigned int v17 = *v8[2];
            }
            if (v19) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(unsigned __int16 **)(a2 - 16);
    if (**(unsigned __int16 **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        unsigned int v10 = v7;
        uint64_t v7 = v6;
        *unsigned int v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(unsigned __int16 **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, char a5)
{
unsigned __int8 **std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **result, unsigned __int8 **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = v4[2];
        if (*v6 < **v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unsigned int v9 = **(unsigned __int8 **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              unsigned int v10 = (unsigned __int8 **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unsigned int v10 = result;
LABEL_10:
          *unsigned int v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

unsigned __int8 **std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **result, unsigned __int8 **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = result[2];
      if (*v4 < **result)
      {
        char v5 = result[3];
        char v6 = v3;
        do
        {
          *(_OWORD *)char v6 = *((_OWORD *)v6 - 1);
          uint64_t v7 = *(v6 - 4);
          v6 -= 2;
        }
        while (*v4 < *v7);
        *char v6 = v4;
        v6[1] = v5;
      }
      uint64_t v2 = v3 + 2;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, _OWORD *a2, _OWORD *a3)
{
  unsigned int v3 = **(unsigned __int8 **)a2;
  unsigned int v4 = **(unsigned __int8 **)a3;
  if (v3 < **a1)
  {
    if (v4 < v3)
    {
      long long v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
      *a3 = v5;
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v8;
    if (**(unsigned __int8 **)a3 >= **(unsigned __int8 **)a2) {
      return 1;
    }
    long long v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (**(unsigned __int8 **)a2 >= **a1) {
      return 1;
    }
    long long v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unsigned __int8 **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned char const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  long long v2 = *(_OWORD *)a1;
  unsigned int v3 = *a1;
  unsigned int v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    unsigned int v9 = *v3;
    do
    {
      unsigned int v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      unsigned int v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unsigned __int8 **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned char const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  unsigned int v4 = *a1;
  unsigned int v5 = **a1;
  do
  {
    unsigned int v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      unsigned int v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      unsigned int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    unsigned int v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unsigned int v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      unsigned int v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(__n128 *a1, unsigned __int8 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = a2 - 2;
      if (**(a2 - 2) < *(unsigned __int8 *)a1->n128_u64[0])
      {
        __n128 v7 = *a1;
        *a1 = *(__n128 *)v6;
        *(__n128 *)unsigned int v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, (__n128 *)a1[1].n128_u64, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, a1 + 1, a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, a1 + 1, a1 + 2, a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (unsigned __int8 **)&a1[2];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, (__n128 *)a1[1].n128_u64, (__n128 *)a1[2].n128_u64);
      unsigned int v9 = (unsigned __int8 **)&a1[3];
      if (&a1[3] == (__n128 *)a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      long long v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(__n128 *)((char *)a1 + v14 + 48) = *(__n128 *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unsigned int v15 = **(unsigned __int8 **)((char *)a1[1].n128_u64 + v14);
        v14 -= 16;
        if (*v12 >= v15)
        {
          n128_u64 = (unint64_t *)((char *)a1[3].n128_u64 + v14);
          goto LABEL_12;
        }
      }
      n128_u64 = a1->n128_u64;
LABEL_12:
      void *n128_u64 = v12;
      n128_u64[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a2, a3);
  if (*(unsigned __int8 *)a4->n128_u64[0] < *(unsigned __int8 *)a3->n128_u64[0])
  {
    __n128 result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(unsigned __int8 *)a3->n128_u64[0] < *(unsigned __int8 *)a2->n128_u64[0])
    {
      __n128 result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(unsigned __int8 *)a2->n128_u64[0] < **a1)
      {
        __n128 result = *(__n128 *)a1;
        *(__n128 *)a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(unsigned __int8 *)a5->n128_u64[0] < *(unsigned __int8 *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(unsigned __int8 *)a4->n128_u64[0] < *(unsigned __int8 *)a3->n128_u64[0])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(unsigned __int8 *)a3->n128_u64[0] < *(unsigned __int8 *)a2->n128_u64[0])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(unsigned __int8 *)a2->n128_u64[0] < **a1)
        {
          __n128 result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned __int8 **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unsigned int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        unsigned int v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)unsigned int v18 = *(_OWORD *)v19;
          unsigned int v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)unsigned int v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unsigned __int8 **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unsigned int v10 = **v8;
      }
      else
      {
        unsigned int v10 = **v8;
        unsigned int v11 = *v8[2];
        BOOL v12 = v10 >= v11;
        if (v10 <= v11) {
          unsigned int v10 = *v8[2];
        }
        if (!v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      long long v13 = *a4;
      if (v10 >= **a4)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (unsigned __int8 **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unsigned int v17 = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            unsigned int v17 = **v8;
            unsigned int v18 = *v8[2];
            BOOL v19 = v17 >= v18;
            if (v17 <= v18) {
              unsigned int v17 = *v8[2];
            }
            if (v19) {
              uint64_t v7 = v16;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(unsigned __int8 **)(a2 - 16);
    if (**(unsigned __int8 **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        unsigned int v10 = v7;
        uint64_t v7 = v6;
        *unsigned int v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(unsigned __int8 **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = (void *)v4[2];
        if (*v6 < *(void *)*v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            uint64_t v9 = **(void **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              unsigned int v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unsigned int v10 = result;
LABEL_10:
          *unsigned int v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = *(void **)(result + 16);
      if (*v4 < **(void **)result)
      {
        uint64_t v5 = *(void *)(result + 24);
        uint64_t v6 = v3;
        do
        {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 16);
          uint64_t v7 = *(void **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(void *)uint64_t v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      uint64_t v2 = v3 + 16;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(long long *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3 = **a2;
  uint64_t v4 = **a3;
  if (v3 < **(void **)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(void **)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

uint64_t **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &>(uint64_t **a1, uint64_t **a2)
{
  long long v2 = *(_OWORD *)a1;
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    uint64_t v9 = *v3;
    do
    {
      unsigned int v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      unsigned int v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

uint64_t **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &>(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  do
  {
    uint64_t v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      unsigned int v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      uint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    unsigned int v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unsigned int v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 16);
      if (**(void **)(a2 - 16) < **(void **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      long long v8 = (void **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((long long *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *(void **)v9;
    if (**(void **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = **(void **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (void **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(long long *a1, uint64_t **a2, uint64_t **a3, _OWORD *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, a2, a3);
  if (**(void **)a4 < **a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(void **)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(long long *a1, uint64_t **a2, uint64_t **a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(void *)a5->n128_u64[0] < *(void *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(void *)a4->n128_u64[0] < **a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(void **)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,re::Pair<long long const*,void *,true>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        unsigned int v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)unsigned int v18 = *(_OWORD *)v19;
          unsigned int v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)uint64_t v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64_t **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        uint64_t v10 = **v8;
      }
      else
      {
        uint64_t v10 = **v8;
        uint64_t v11 = *v8[2];
        BOOL v12 = v10 < v11;
        if (v10 <= v11) {
          uint64_t v10 = *v8[2];
        }
        if (v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v13 = *a4;
      if (v10 >= **a4)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *(_OWORD *)long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (uint64_t **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v17 = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            uint64_t v17 = **v8;
            uint64_t v18 = *v8[2];
            BOOL v19 = v17 < v18;
            if (v17 <= v18) {
              uint64_t v17 = *v8[2];
            }
            if (v19) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v16;
            }
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void **)(a2 - 16);
    if (**(void **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        uint64_t v10 = v7;
        uint64_t v7 = v6;
        *uint64_t v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(void **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(int **a1, int **a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = (_DWORD *)v4[2];
        if (*v6 < *(_DWORD *)*v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            int v9 = **(_DWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = *(_DWORD **)(result + 16);
      if (*v4 < **(_DWORD **)result)
      {
        uint64_t v5 = *(void *)(result + 24);
        uint64_t v6 = v3;
        do
        {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v6 - 16);
          uint64_t v7 = *(_DWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(void *)uint64_t v6 = v4;
        *(void *)(v6 + 8) = v5;
      }
      uint64_t v2 = v3 + 16;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(long long *a1, int **a2, int **a3)
{
  int v3 = **a2;
  int v4 = **a3;
  if (v3 < **(_DWORD **)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(_DWORD **)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

int **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &>(int **a1, int **a2)
{
  long long v2 = *(_OWORD *)a1;
  int v3 = *a1;
  int v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    int v9 = *v3;
    do
    {
      uint64_t v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      uint64_t v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

int **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &>(int **a1, int **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  int v4 = *a1;
  int v5 = **a1;
  do
  {
    int v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      uint64_t v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    uint64_t v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      int v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = (long long *)(a2 - 16);
      if (**(_DWORD **)(a2 - 16) < **(_DWORD **)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *int v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      long long v8 = (_DWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((long long *)a1, (int **)(a1 + 16), (int **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *(_DWORD **)v9;
    if (**(_DWORD **)v9 < **v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (_DWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(long long *a1, int **a2, int **a3, _OWORD *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, a2, a3);
  if (**(_DWORD **)a4 < **a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(_DWORD **)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(long long *a1, int **a2, int **a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5->n128_u64[0] < *(_DWORD *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_DWORD *)a4->n128_u64[0] < **a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(_DWORD **)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

int **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,re::Pair<int const*,void *,true>*>(int **a1, int **a2, int **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        uint64_t v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
          uint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)int v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = **v8;
      }
      else
      {
        int v10 = **v8;
        int v11 = *v8[2];
        BOOL v12 = v10 < v11;
        if (v10 <= v11) {
          int v10 = *v8[2];
        }
        if (v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v13 = *a4;
      if (v10 >= **a4)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *(_OWORD *)long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (int **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v17 = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            int v17 = **v8;
            int v18 = *v8[2];
            BOOL v19 = v17 < v18;
            if (v17 <= v18) {
              int v17 = *v8[2];
            }
            if (v19) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v16;
            }
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(_DWORD **)(a2 - 16);
    if (**(_DWORD **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        int v10 = v7;
        uint64_t v7 = v6;
        *int v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(_DWORD **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(__int16 **a1, __int16 **a2, uint64_t a3, uint64_t a4, char a5)
{
__int16 **std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **result, __int16 **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = v4[2];
        if (*v6 < **v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            int v9 = **(__int16 **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              int v10 = (__int16 **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          int v10 = result;
LABEL_10:
          *int v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

__int16 **std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **result, __int16 **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      unint64_t v4 = result[2];
      if (*v4 < **result)
      {
        char v5 = result[3];
        char v6 = v3;
        do
        {
          *(_OWORD *)char v6 = *((_OWORD *)v6 - 1);
          uint64_t v7 = *(v6 - 4);
          v6 -= 2;
        }
        while (*v4 < *v7);
        *char v6 = v4;
        v6[1] = v5;
      }
      uint64_t v2 = v3 + 2;
      __n128 result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, _OWORD *a2, _OWORD *a3)
{
  int v3 = **(__int16 **)a2;
  int v4 = **(__int16 **)a3;
  if (v3 < **a1)
  {
    if (v4 < v3)
    {
      long long v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
      *a3 = v5;
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v8;
    if (**(__int16 **)a3 >= **(__int16 **)a2) {
      return 1;
    }
    long long v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (**(__int16 **)a2 >= **a1) {
      return 1;
    }
    long long v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

__int16 **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &>(__int16 **a1, __int16 **a2)
{
  long long v2 = *(_OWORD *)a1;
  int v3 = *a1;
  int v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    long long v7 = a1 + 2;
    do
    {
      long long v5 = v7;
      if (v7 >= a2) {
        break;
      }
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    long long v5 = a1;
    do
    {
      long long v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      long long v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    int v9 = *v3;
    do
    {
      int v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      int v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

__int16 **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &>(__int16 **a1, __int16 **a2)
{
  uint64_t v2 = 0;
  long long v3 = *(_OWORD *)a1;
  int v4 = *a1;
  int v5 = **a1;
  do
  {
    int v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  long long v7 = &a1[v2];
  long long v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      int v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    int v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)int v11 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      int v14 = *v4;
      do
      {
        unint64_t v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        unint64_t v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    long long v8 = v11 - 2;
  }
  if (v8 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)v8;
  }
  *(_OWORD *)long long v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__n128 *a1, __int16 **a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = a2 - 2;
      if (**(a2 - 2) < *(__int16 *)a1->n128_u64[0])
      {
        __n128 v7 = *a1;
        *a1 = *(__n128 *)v6;
        *(__n128 *)int v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, (__n128 *)a1[1].n128_u64, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, a1 + 1, a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, a1 + 1, a1 + 2, a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (__int16 **)&a1[2];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, (__n128 *)a1[1].n128_u64, (__n128 *)a1[2].n128_u64);
      int v9 = (__int16 **)&a1[3];
      if (&a1[3] == (__n128 *)a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (**v9 < **v8)
    {
      long long v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(__n128 *)((char *)a1 + v14 + 48) = *(__n128 *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = **(__int16 **)((char *)a1[1].n128_u64 + v14);
        v14 -= 16;
        if (*v12 >= v15)
        {
          n128_u64 = (unint64_t *)((char *)a1[3].n128_u64 + v14);
          goto LABEL_12;
        }
      }
      n128_u64 = a1->n128_u64;
LABEL_12:
      void *n128_u64 = v12;
      n128_u64[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a2, a3);
  if (*(__int16 *)a4->n128_u64[0] < *(__int16 *)a3->n128_u64[0])
  {
    __n128 result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(__int16 *)a3->n128_u64[0] < *(__int16 *)a2->n128_u64[0])
    {
      __n128 result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(__int16 *)a2->n128_u64[0] < **a1)
      {
        __n128 result = *(__n128 *)a1;
        *(__n128 *)a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(__int16 *)a5->n128_u64[0] < *(__int16 *)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(__int16 *)a4->n128_u64[0] < *(__int16 *)a3->n128_u64[0])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(__int16 *)a3->n128_u64[0] < *(__int16 *)a2->n128_u64[0])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(__int16 *)a2->n128_u64[0] < **a1)
        {
          __n128 result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

__int16 **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,re::Pair<short const*,void *,true>*>(__int16 **a1, __int16 **a2, __int16 **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        int v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)int v18 = *(_OWORD *)v19;
          int v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v24;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)int v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, __int16 **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (__int16 **)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        LOWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = **v8;
      }
      else
      {
        int v10 = **v8;
        int v11 = *v8[2];
        BOOL v12 = v10 < v11;
        if (v10 <= v11) {
          LOWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = *v8[2];
        }
        if (v12)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      long long v13 = *a4;
      if (**a4 <= (__int16)v10)
      {
        uint64_t v14 = a4[1];
        do
        {
          long long v15 = a4;
          a4 = v8;
          *long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (__int16 **)(result + 16 * v16);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            LOWORD(v17) = **v8;
            uint64_t v7 = v16;
          }
          else
          {
            int v17 = **v8;
            int v18 = *v8[2];
            BOOL v19 = v17 < v18;
            if (v17 <= v18) {
              LOWORD(v17) = *v8[2];
            }
            if (v19) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v16;
            }
          }
        }
        while (*v13 <= (__int16)v17);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(__int16 **)(a2 - 16);
    if (**(__int16 **)v6 < *v8)
    {
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        int v10 = v7;
        uint64_t v7 = v6;
        *int v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(__int16 **)v6 < *v8);
      *uint64_t v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    long long v3 = (uint64_t *)result;
    uint64_t v4 = result + 16;
    if ((uint64_t *)(result + 16) != a2)
    {
      uint64_t v5 = 0;
      char v6 = (uint64_t *)result;
      do
      {
        uint64_t v7 = (uint64_t *)v4;
        uint64_t v8 = v6[2];
        __n128 result = re::DynamicString::operator<(v8, *v6);
        if (result)
        {
          uint64_t v9 = v6[3];
          uint64_t v10 = v5;
          while (1)
          {
            *(_OWORD *)((char *)v3 + v10 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)v3 + v10);
            if (!v10) {
              break;
            }
            __n128 result = re::DynamicString::operator<(v8, *(uint64_t *)((char *)v3 + v10 - 16));
            v10 -= 16;
            if ((result & 1) == 0)
            {
              int v11 = (uint64_t *)((char *)v3 + v10 + 16);
              goto LABEL_10;
            }
          }
          int v11 = v3;
LABEL_10:
          *int v11 = v8;
          v11[1] = v9;
        }
        uint64_t v4 = (uint64_t)(v7 + 2);
        v5 += 16;
        char v6 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    long long v3 = (uint64_t *)result;
    uint64_t v4 = result + 16;
    while (v4 != a2)
    {
      uint64_t v5 = (uint64_t *)v4;
      uint64_t v6 = v3[2];
      __n128 result = re::DynamicString::operator<(v6, *v3);
      if (result)
      {
        uint64_t v7 = v3[3];
        uint64_t v8 = v5;
        do
        {
          uint64_t v9 = v8 - 2;
          *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
          __n128 result = re::DynamicString::operator<(v6, *(v8 - 4));
          uint64_t v8 = v9;
        }
        while ((result & 1) != 0);
        *uint64_t v9 = v6;
        v9[1] = v7;
      }
      uint64_t v4 = (uint64_t)(v5 + 2);
      long long v3 = v5;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  char v7 = re::DynamicString::operator<(*a2, *a1);
  uint64_t result = re::DynamicString::operator<(*a3, v6);
  if ((v7 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    if (!re::DynamicString::operator<(*a2, *a1)) {
      return 1;
    }
    long long v11 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    return 2;
  }
  if (!result)
  {
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    if (!re::DynamicString::operator<(*a3, *a2)) {
      return 1;
    }
    long long v13 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v13;
    return 2;
  }
  long long v9 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v9;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::DynamicString const*,void *,true> *,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  long long v12 = *(_OWORD *)a1;
  uint64_t v4 = *a1;
  if (re::DynamicString::operator<(*a1, *(a2 - 2)))
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = v5[2];
      v5 += 2;
    }
    while ((re::DynamicString::operator<(v4, v6) & 1) == 0);
  }
  else
  {
    char v7 = a1 + 2;
    do
    {
      uint64_t v5 = v7;
      if (v7 >= v2) {
        break;
      }
      v7 += 2;
    }
    while (!re::DynamicString::operator<(v4, *v5));
  }
  if (v5 < v2)
  {
    do
    {
      uint64_t v8 = *(v2 - 2);
      v2 -= 2;
    }
    while ((re::DynamicString::operator<(v4, v8) & 1) != 0);
  }
  while (v5 < v2)
  {
    long long v13 = *(_OWORD *)v5;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
    *(_OWORD *)uint64_t v2 = v13;
    do
    {
      uint64_t v9 = v5[2];
      v5 += 2;
    }
    while (!re::DynamicString::operator<(v4, v9));
    do
    {
      uint64_t v10 = *(v2 - 2);
      v2 -= 2;
    }
    while ((re::DynamicString::operator<(v4, v10) & 1) != 0);
  }
  if (v5 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  }
  *((_OWORD *)v5 - 1) = v12;
  return v5;
}

long long *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::DynamicString const*,void *,true> *,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &>(long long *a1, long long *a2)
{
  uint64_t v4 = 0;
  long long v17 = *a1;
  uint64_t v5 = *(void *)a1;
  do
    char v6 = re::DynamicString::operator<(*(void *)&a1[++v4], v5);
  while ((v6 & 1) != 0);
  char v7 = &a1[v4];
  uint64_t v8 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      uint64_t v10 = *((void *)a2-- - 2);
    }
    while ((re::DynamicString::operator<(v10, v5) & 1) == 0);
  }
  else
  {
    do
      uint64_t v9 = *((void *)a2-- - 2);
    while (!re::DynamicString::operator<(v9, v5));
  }
  if (v7 < a2)
  {
    long long v11 = &a1[v4];
    long long v12 = a2;
    do
    {
      long long v13 = *v11;
      *long long v11 = *v12;
      *long long v12 = v13;
      do
        uint64_t v14 = *((void *)v11++ + 2);
      while ((re::DynamicString::operator<(v14, v5) & 1) != 0);
      do
        uint64_t v15 = *((void *)v12-- - 2);
      while (!re::DynamicString::operator<(v15, v5));
    }
    while (v11 < v12);
    uint64_t v8 = v11 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  *uint64_t v8 = v17;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = a2 - 2;
      if (re::DynamicString::operator<(*(a2 - 2), *a1))
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)char v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (re::DynamicString::operator<(*v9, *v8))
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if ((re::DynamicString::operator<(v12, *((void *)v15 + 2)) & 1) == 0)
        {
          unint64_t v16 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a2, a3);
  if (re::DynamicString::operator<(*a4, *a3))
  {
    long long v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    if (re::DynamicString::operator<(*a3, *a2))
    {
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      if (re::DynamicString::operator<(*a2, *a1))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a2, a3, a4);
  if (re::DynamicString::operator<(*a5, *a4))
  {
    long long v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    if (re::DynamicString::operator<(*a4, *a3))
    {
      long long v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (re::DynamicString::operator<(*a3, *a2))
      {
        long long v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        if (re::DynamicString::operator<(*a2, *a1))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (re::DynamicString::operator<(*v14, *a1))
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      long long v17 = a2 - 2;
      do
      {
        long long v21 = *(_OWORD *)a1;
        int v18 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)int v18 = v21;
        }
        else
        {
          *(_OWORD *)int v18 = *(_OWORD *)v17;
          *(_OWORD *)long long v17 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
        v17 -= 2;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v8 = a3;
      uint64_t v9 = ((uint64_t)a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (uint64_t *)(result + 16 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        uint64_t v17 = *v11;
      }
      else
      {
        uint64_t v13 = *v11;
        uint64_t v14 = v11[2];
        int v15 = re::DynamicString::operator<(*v11, v14);
        BOOL v16 = v15 == 0;
        if (v15) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = v13;
        }
        if (!v16)
        {
          v11 += 2;
          uint64_t v10 = v12;
        }
      }
      uint64_t v18 = *v5;
      __n128 result = re::DynamicString::operator<(v17, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v27 = v5[1];
        uint64_t v28 = v8;
        do
        {
          char v19 = v5;
          uint64_t v5 = v11;
          *(_OWORD *)char v19 = *(_OWORD *)v11;
          if (v7 < v10) {
            break;
          }
          uint64_t v20 = (2 * v10) | 1;
          unint64_t v11 = (uint64_t *)(v6 + 16 * v20);
          uint64_t v21 = 2 * v10 + 2;
          if (v21 >= v8)
          {
            uint64_t v26 = *v11;
            uint64_t v10 = (2 * v10) | 1;
          }
          else
          {
            uint64_t v22 = *v11;
            uint64_t v23 = v11[2];
            int v24 = re::DynamicString::operator<(*v11, v23);
            BOOL v25 = v24 == 0;
            uint64_t v26 = v24 ? v23 : v22;
            if (!v25) {
              v11 += 2;
            }
            uint64_t v8 = v28;
            uint64_t v10 = v25 ? v20 : v21;
          }
          __n128 result = re::DynamicString::operator<(v26, v18);
        }
        while (!result);
        *uint64_t v5 = v18;
        v5[1] = v27;
      }
    }
  }
  return result;
}

uint64_t *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3 && re::DynamicString::operator<(*v8, a1[2 * v5 + 4]))
    {
      v8 += 2;
      uint64_t v9 = v10;
    }
    *(_OWORD *)a1 = *(_OWORD *)v8;
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 16 * (v4 >> 1));
    uint64_t v10 = (uint64_t *)(a2 - 16);
    uint64_t v9 = *(void *)(a2 - 16);
    __n128 result = re::DynamicString::operator<(*v8, v9);
    if (result)
    {
      uint64_t v11 = *(void *)(a2 - 8);
      do
      {
        uint64_t v12 = v10;
        uint64_t v10 = v8;
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
        __n128 result = re::DynamicString::operator<(*v8, v9);
      }
      while ((result & 1) != 0);
      *uint64_t v10 = v9;
      v10[1] = v11;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(__n128 *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v2;
        char v6 = (void *)v4[2];
        if (*v6 >> 1 < *(void *)*v4 >> 1)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((void *)this + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unint64_t v9 = **(void **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >> 1 >= v9 >> 1)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *uint64_t v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        unint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}